--- .buildpath ---
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<buildpath>
+	<buildpathentry kind="src" path=""/>
+	<buildpathentry kind="con" path="org.eclipse.php.core.LANGUAGE"/>
+</buildpath>

--- .htaccess ---
@@ -0,0 +1,11 @@
+#��ֹĿ¼���
+Options All -Indexes
+DirectoryIndex index.html index.php
+<IfModule mod_rewrite.c>
+RewriteEngine on
+RewriteBase /
+RewriteCond %{REQUEST_FILENAME} !-f
+RewriteCond %{REQUEST_FILENAME} !-d
+RewriteCond $1 !^(visit|im|min|robots\.txt)
+RewriteRule ^(.*)$ index.php/$1 [QSA,L]
+</IfModule>
\ No newline at end of file

--- .project ---
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>BXDY</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.wst.validation.validationbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.dltk.core.scriptbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.php.core.PHPNature</nature>
+	</natures>
+</projectDescription>

--- .settings/org.eclipse.core.resources.prefs ---
@@ -0,0 +1,35 @@
+eclipse.preferences.version=1
+encoding//admin/Tpl/default/Fcategory/add_classify_2.html=UTF-8
+encoding//admin/Tpl/default/Fcategory/add_link_type.html=UTF-8
+encoding//admin/Tpl/default/Fcategory/add_normal_type.html=UTF-8
+encoding//admin/Tpl/default/Fcategory/edit_classify.html=UTF-8
+encoding//admin/Tpl/default/Fcategory/edit_link_type.html=UTF-8
+encoding//admin/Tpl/default/Fcategory/edit_normal_type.html=UTF-8
+encoding//admin/Tpl/default/Fguestbook/edit.html=UTF-8
+encoding//admin/Tpl/default/Fguestbook/edit2.html=UTF-8
+encoding//admin/Tpl/default/Fguestbook/manage2.html=UTF-8
+encoding//admin/Tpl/default/Fjob/add.html=UTF-8
+encoding//admin/Tpl/default/Fjob/edit.html=UTF-8
+encoding//admin/Tpl/default/Fmanager/manage.html=UTF-8
+encoding//admin/Tpl/default/Fprofile/pwd.html=UTF-8
+encoding//admin/Tpl/default/Fuser/manage.html=UTF-8
+encoding//install/Conf/~fangfacms4.0.sql.htm=UTF-8
+encoding//public/theme/default/content/cnews_list.html=UTF-8
+encoding//public/theme/default/content/cnews_view.html=UTF-8
+encoding//public/theme/default/content/coop_list.html=UTF-8
+encoding//public/theme/default/content/coop_view.html=UTF-8
+encoding//public/theme/default/content/pnews_list.html=UTF-8
+encoding//public/theme/default/content/pnews_view.html=UTF-8
+encoding//public/theme/default/content/promodel_list.html=UTF-8
+encoding//public/theme/default/content/promodel_view.html=UTF-8
+encoding//public/theme/default/guestbook/cindex.html=UTF-8
+encoding//public/theme/default/guestbook/index.html=UTF-8
+encoding//public/theme/default/index.html=UTF-8
+encoding//public/theme/default/job/index.html=UTF-8
+encoding//public/theme/default/job/show.html=UTF-8
+encoding//public/theme/default/page/cshow.html=UTF-8
+encoding//public/theme/default/page/lshow.html=UTF-8
+encoding//public/theme/default/page/rshow.html=UTF-8
+encoding//public/theme/default/page/show.html=UTF-8
+encoding//public/theme/default/system/footer.html=UTF-8
+encoding/<project>=UTF-8

--- .settings/org.eclipse.php.core.prefs ---
@@ -0,0 +1,3 @@
+eclipse.preferences.version=1
+include_path=0;/BXDY
+use_asp_tags_as_php=false

--- admin.php ---
@@ -0,0 +1,34 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: admin.php
+// +----------------------------------------------------------------------
+// | Date: Wed Apr 21 09:55:28 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 后台管理的入口文件 
+// +----------------------------------------------------------------------
+
+error_reporting ( E_ALL & ~ E_NOTICE );
+// 后台入口标识
+define ( 'IN_ADMIN', true );
+// 是否调试模式
+define ( 'IN_DEBUG', true );
+// 简写的 DIRECTORY_SEPARATOR
+define ( 'DS', DIRECTORY_SEPARATOR );
+// 根目录
+define ( 'FANGFACMS_ROOT', dirname ( __FILE__ ) . '/' );
+if (! file_exists ( FANGFACMS_ROOT . 'data/config.inc.php' )) {
+	header ( "Content-type: text/html; charset=utf-8" );
+	die ( '请先运行 install.php' );
+}
+// 定义项目名称和路径
+define ( 'APP_NAME', 'admin' );
+define ( 'APP_PATH', FANGFACMS_ROOT . APP_NAME . '/' );
+require FANGFACMS_ROOT . 'define.php';
+// 加载框架入口文件 
+require THINK_PATH . "ThinkPHP.php";
+// 实例化后台应用实例
+App::run ();
\ No newline at end of file

--- admin/.htaccess ---
@@ -0,0 +1,4 @@
+<FilesMatch "\.(php|html)$">
+    order deny,allow
+    deny from all
+</FilesMatch>
\ No newline at end of file

--- admin/Common/alias.php ---
@@ -0,0 +1,29 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: alias.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-6
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 定制项目需要加载的文件
+// +----------------------------------------------------------------------
+
+
+
+// 别名定义、此类文件可以实现自动加载，不需要手动导入
+alias_import(array(
+    'Model'         =>   THINK_PATH.'Lib/Think/Core/Model.class.php',
+    'Db'                   =>   THINK_PATH.'Lib/Think/Db/Db.class.php',
+    'Cache'              =>    THINK_PATH.'Lib/Think/Util/Cache.class.php',
+    'Debug'              =>    THINK_PATH.'Lib/Think/Util/Debug.class.php',
+    'ViewModel'          =>    THINK_PATH.'Lib/Think/Core/Model/ViewModel.class.php',
+    'AdvModel'          =>    THINK_PATH.'Lib/Think/Core/Model/AdvModel.class.php',
+    'RelationModel'     =>    THINK_PATH.'Lib/Think/Core/Model/RelationModel.class.php',
+	'Page'				=> THINK_PATH.'Lib/ORG/Util/Page.class.php',	//默认载入分页类
+	'Html'				=> INCLUDE_PATH . 'Html.class.php',
+    )
+);
+?>
\ No newline at end of file

--- admin/Common/common.php ---
@@ -0,0 +1,190 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: common.php
+// +----------------------------------------------------------------------
+// | Date: Wed Apr 21 16:51:08 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 后台常用函数
+// +----------------------------------------------------------------------
+
+/**
+ +----------------------------------------------------------
+ * 检查字符串是否是UTF8编码
+ +----------------------------------------------------------
+ * @param string $string 字符串
+ +----------------------------------------------------------
+ * @return Boolean
+ +----------------------------------------------------------
+ */
+function is_utf8($string)
+{
+	return preg_match('%^(?:
+		 [\x09\x0A\x0D\x20-\x7E]            # ASCII
+	   | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
+	   |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
+	   | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
+	   |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
+	   |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
+	   | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
+	   |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
+   )*$%xs', $string);
+}
+
+
+
+
+
+
+/**
+ * 包含后台模板公共头部
+ */
+function theader (){
+	include(TMPL_PATH.C('DEFAULT_THEME').'/public/header.php');
+}
+
+/**
+ * 包含后台模板公共底部
+ */
+function tfooter() {
+	include(TMPL_PATH.C('DEFAULT_THEME').'/public/footer.php');
+}
+
+
+
+/**
+ * 递归获取文件夹下的所有文件,不包括目录
+ */
+function getFiles($dir)
+{
+	if (!is_dir($dir)) {
+		return false;
+	}
+	
+	static $files ;
+	$d = dir($dir);
+	while (false !== ($entry = $d->read())) {
+		if ($entry != '.' && $entry != '..') {
+			if (filetype($dir . '/' . $entry) == 'file') {
+				$files[] = $dir . '/' . $entry;
+			} elseif (filetype($dir . '/' . $entry) == 'dir') {
+				getFiles($dir . '/' . $entry);
+			}
+		}
+	}	
+	return $files;
+}
+
+/**
+ * 内容发布 SEO ping挂件
+ *	$page_uri 需要检查更新的页面URI
+ *  $tags  标签
+ */
+function seo_ping($content_data)
+{
+	$content_data = unserialize($content_data);
+	$cfg_setting = F('config.cache', '', ALL_CACHE_PATH);
+	
+	/**
+	 * server ping服务器地址
+	 */
+	if (empty($cfg_setting['PING_SITES']) || @$cfg_setting['AUTO_PING'] != 1 || empty($content_data['url'])) {
+		return false;
+	}
+	$ping_sites = preg_replace("|(\s)+|", '$1', $cfg_setting['PING_SITES']);
+	$ping_sites = trim($ping_sites);
+	
+	$category = F('category_'.$content_data['catid'], '', DATA_CACHE_PATH);
+	$sitename = $cfg_setting['SEOTITLE'];
+	$siteurl = 'http://' . $_SERVER['HTTP_HOST'] . '/' . __ROOT__;
+	$rssurl = $siteurl . 'rss.xml';
+	$content_url = rtrim($siteurl, '/\\') . '/' . trim($category['url'], '/\\') . '/' . $content_data['url'];
+	$tags = str_replace(array(',', '，'), '|', (key_exists('seokeywords', $content_data) ? str_replace('{skeywords}', $cfg_setting['SEOKEYWORDS'], $content_data['seokeywords']) : $cfg_setting['SEOKEYWORDS']));
+
+	if ( !empty($ping_sites) ) {
+		Vendor('class-IXR');
+		$ping_sites = explode("\n", $ping_sites);
+		foreach ( (array) $ping_sites as $site ) {
+			$client = new IXR_Client($site);
+			$client->timeout = 3;
+			$client->useragent .= ' -- Fangfa/1.0';
+			$client->debug = false;
+			
+			//参数说明:调用方法名,博客名称,博客网站地址,博客网站的订阅地址,需要检查更新的页面URL,需要检查更新的页面URL
+			if ( !$client->query('weblogUpdates.extendedPing', $sitename, $siteurl, $rssurl, $content_url, $tags) ) // then try a normal ping
+				$client->query('weblogUpdates.ping', $sitename, $siteurl);
+		}
+	}
+	
+	return true;
+}
+
+/**
+ * 删除内容管理生成的静态文件
+ */
+function clear_html($content_data)
+{
+	$content_data = unserialize($content_data);
+	$category = F('category_'.$content_data['catid'], '', DATA_CACHE_PATH);
+	
+	$category_base_path = FANGFACMS_ROOT . trim($category['url'], '/\\') . '/';
+	$content_path = $category_base_path . $content_data['url'];
+	
+	if (is_dir($category_base_path)) {
+		//删除当前内容栏目静态文件
+		$d = dir($category_base_path);
+		while (false !== ($entry = $d->read())) {  //循环删除栏目主页文件，包括栏目分页文件
+			if (preg_match('/^index(_\d*)?\.'.substr(C('TMPL_TEMPLATE_SUFFIX'), 1).'$/', $entry)) {
+				@unlink($category_base_path . $entry);
+			}
+		}
+		
+		//删除当前内容详细页
+		if (is_file($content_path)) {
+			$path_info = pathinfo($content_path);
+			$d = dir($path_info['dirname']);
+			while (false !== ($entry = $d->read())) {  //循环删除栏目主页文件，包括栏目分页文件
+				if (preg_match('/^' . $path_info['filename'] . '(_\d*)?\.'.substr(C('TMPL_TEMPLATE_SUFFIX'), 1).'$/', $entry)) {
+					@unlink($path_info['dirname'] . '/' . $entry);
+				}
+			}
+		}
+	}
+}
+
+/**
+ +----------------------------------------------------------
+ * 生成二维码图片
+ +----------------------------------------------------------
+ * @param string $content 二维码内容
+ +----------------------------------------------------------
+ * @param int  $size  图片生成尺寸
+ +----------------------------------------------------------
+ * @return string
+ +----------------------------------------------------------
+ */
+function generate_brcode($content, $size = 4){
+    if(empty($content)) return false;
+    
+	require_once FANGFACMS_ROOT."admin/phpqrcode/qrlib.php";
+    $errorCorrectionLevel = 'L'; //纠错
+    $matrixPointSize      = min(max((int)$size, 1), 10); //图片尺寸大小
+    static $rrand         = 0; $rrand++;
+	$save_path            = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' );
+	$png_temp_dir         = $save_path.'brcode/'.date ('Y/m');
+
+	if (! is_dir ( $png_temp_dir ))  mk_dir ( $png_temp_dir );
+    $file_name = $png_temp_dir."/".times().$rrand.$matrixPointSize.'.png'; //生成的二维码图片路径
+	
+	QRcode::png($content, $file_name , $errorCorrectionLevel, $matrixPointSize, 2);   
+	return 	$saveName = str_replace($save_path , '', $file_name);//二维码存放路径
+}
+function getSp($arr){
+	echo "<pre>";
+	print_r($arr);
+	echo "</pre>";
+	exit();
+}
\ No newline at end of file

--- admin/Conf/config.php ---
@@ -0,0 +1,49 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: config.php
+// +----------------------------------------------------------------------
+// | Date: Wed Apr 21 10:17:09 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 项目核心配置文件
+// +----------------------------------------------------------------------
+$config =  array(
+	'APP_DEBUG' => IN_DEBUG ? true : false,			//调试模式
+	'URL_CASE_INSENSITIVE' => true,		//url大小写不敏感
+ 	'DEFAULT_MODULE' => 'Findex',		//默认controller
+// 	'DEFAULT_ACTION' => 'index',		//默认action
+ 	'URL_DISPATCH_ON' => false,			//不需要使用URL分发，直接使用传统的URL模式
+	'URL_DISPATCH_ON' => false,			//后台不开启URL模式、路由等，url传参使用传统模式
+	'APP_PLUGIN_ON' => true,			//启用应用扩展支持
+ 	'TMPL_ENGINE_TYPE' => 'Smarty',		//后台使用原生的PHP做模板引擎
+	'DEFAULT_THEME' => 'default',       //默认default, 其他模板：theme2
+	'TMPL_ENGINE_CONFIG' => array(  	 // Smarty模板配置，请勿更改
+    	'caching' => false,
+        'template_dir' => TMPL_PATH,
+		'compile_dir' => RUNTIME_PATH . 'templates_c',
+        'cache_dir' => TEMP_PATH,
+		'left_delimiter' => '{{',
+		'right_delimiter' => '}}',
+		'debugging' => false,
+        'plugins_dir' => array('plugins',INCLUDE_PATH . '/tag'),
+	),
+	'TMPL_TEMPLATE_SUFFIX' => '.html',	//模板后缀
+	'URL_MODEL' => 0,					//传统模式的url
+	'TOKEN_ON' => true,					//开启令牌验证
+	'TMPL_ACTION_MESSAGE' => 'Public:message',	//信息提示模板
+	'TMPL_ACTION_ERROR' => 'Public:message',
+	'TMPL_ACTION_SUCCESS' => 'Public:message',
+	'AUTH_PWD_ENCODER'		=>'md5',	// 用户认证密码加密方式
+ 	'USER_AUTH_GATEWAY' => 'flogin/index', 		//认证网关
+	'AUTH_ACT_TYPE' => 'File',	//权限验证的方法，可选： 'File'，'Db'
+	'PAGESIZE' => 20,			//列表页默认记录数
+	'DEVELOPER_PASSWORD' => 'Jjdsjgl3zl',  //开发用户账号密码
+	'SYSTEM_DIR' => array('admin','data','front','include','install','public','min','visit','im'),  //系统文件夹
+	'LOG_RECORD' => 'false', //不使用日志记录
+);
+$data_config = include(ALL_CACHE_PATH.'/config.inc.php');
+$cache_config = include(ALL_CACHE_PATH.'/config.cache.php');
+return @array_merge($config,(array)$data_config,(array)$cache_config);
\ No newline at end of file

--- admin/Conf/core.php ---
@@ -0,0 +1,25 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: core.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-6
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 定义项目默认要加载的类文件
+// +----------------------------------------------------------------------
+
+
+
+// 加载的核心文件列表
+return array(
+    THINK_PATH.'Lib/Think/Exception/ThinkException.class.php',  // 异常处理类
+    THINK_PATH.'Lib/Think/Core/Log.class.php',    // 日志处理类
+    THINK_PATH.'Lib/Think/Core/App.class.php',   // 应用程序类
+    THINK_PATH.'Lib/Think/Core/Action.class.php', // 控制器类
+    THINK_PATH.'Lib/Think/Core/View.class.php',  // 视图类
+    APP_PATH.'Common/alias.php',  // 加载别名
+);
+?>
\ No newline at end of file

--- admin/Conf/paths.php ---
@@ -0,0 +1,35 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: paths.php
+// +----------------------------------------------------------------------
+// | Date: Wed Apr 21 10:17:26 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 项目自定义目录配置文件
+// +----------------------------------------------------------------------
+
+// 目录名称设置
+define('CACHE_DIR',  'cache');
+define('HTML_DIR',    'a');
+define('CONF_DIR',    'Conf');
+define('LIB_DIR',      'Lib');
+define('LOG_DIR',     'logs');
+define('LANG_DIR',    'lang');
+define('TEMP_DIR',    'tmp');
+define('TMPL_DIR',     'Tpl');
+
+// 后台路径设置
+define('TMPL_PATH',APP_PATH.TMPL_DIR.'/');
+define('HTML_PATH',FANGFACMS_ROOT ); //
+define('COMMON_PATH',   APP_PATH.'Common/'); // 项目公共目录
+define('LIB_PATH',  APP_PATH.LIB_DIR.'/'); //
+define('CACHE_PATH',   RUNTIME_PATH.CACHE_DIR.'/'); //
+define('CONFIG_PATH',  APP_PATH.CONF_DIR.'/'); //
+define('LOG_PATH',  RUNTIME_PATH.LOG_DIR.'/'); //
+define('LANG_PATH', APP_PATH.LANG_DIR.'/'); //
+define('TEMP_PATH', RUNTIME_PATH.TEMP_DIR.'/'); //
+
+

--- admin/Conf/tags.php ---
@@ -0,0 +1,8 @@
+<?php
+return array(
+	'app_begin' => array('init_sesstion'),	
+	'after_content_add' => array(
+		'seo_ping',// seo ping
+		'clear_html'
+	),
+);
\ No newline at end of file

--- admin/Lib/Action/FactivityAction.class.php ---
@@ -0,0 +1,440 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FtagAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 活动报名
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 活动报名
+ *
+ */
+class FactivityAction extends FbaseAction {
+
+
+	/**
+	 * 栏目表模型对象
+	 *
+	 * @var object
+	 */
+	protected $_category = null;
+
+	/**
+	 * 所在栏目数据
+	 *
+	 * @var array
+	 */
+	protected $category_data = array();
+
+
+	/**
+	 * @name活动报名管理初始化，主要用户检查操作权限
+	 *
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		if (strtolower(MODULE_NAME) == 'factivity') {
+			if ($in['catid']) { //检查栏目操作权限
+				$this->_category = D ('Category');
+				$this->category_data = $this->_category->find((int)$in['catid']);
+				$this->assign('cat',$this->category_data);
+				$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+			} else {
+				$this->message('<font class="red">没有选择要操作的栏目~！</font>');
+			}
+		}
+	}
+
+	/**
+	 * @name检查权限
+	 *
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') {
+			return true;
+		}
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+
+	/**
+	 * @name活动内容管理
+	 *
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_activity = D ( 'Activity' );
+		//表前缀
+		//查询条件
+		$where = array ();
+		$where["catid"] = $in['catid'];
+		if ($in['q'] && $in['q'] != '请输入关键字') {
+			$in['q'] = urldecode($in['q']);
+			$where["{$in['field']}"] = array('like',"%{$in['q']}%");
+		}
+		//排序条件
+		$order = " `sort` ASC, `aid` DESC ";
+		//统计模型数量
+		$data ['count'] = $_activity->where ( $where )->count ();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] = $_activity->field("`aid`,`thumb`,`attr`,`username`,`catid`,`title`,`start_time`,`end_time`,`sort`,`url`,`status`,`create_time`")->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		//2013-1-15 陈敏 ,新增加thumb,attr,username,status等字段的添加，用于前面信息的调取
+		$this->assign ( 'data', $data );
+		$this->assign('in', $in);
+		$this->display();
+	}
+
+	/**
+	 * @name录入要显示的内容
+	 *
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_add();
+		}
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$_activity = D ('Activity');
+			//令牌验证
+			if (!$_activity->autoCheckToken($in)) $this->message('<font class="red">请不要非法提交或者重复刷新页面！</font>');
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			$in['info']['catid'] = $in['catid'];
+			$return = $_activity->add($in['info']);
+			if (false !== $return) {
+				$this->message('<font class="green">内容保存成功！</font>',U('factivity/manage?catid='.$in['catid']),3,false);
+				exit;
+			} else {
+				$this->message('<font class="red">' . $_activity->getError() . '内容保存失败！</font>');
+			}
+		}
+		$this->display();
+	}
+
+
+
+	/**
+	 * @name更新内容
+	 *
+	 */
+	public function edit() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_ajax_edit();
+		if ($in['do']) $this->_do_edit();
+		if (!$in['aid']) $this->message('<font class="red">参数错误，无法继续该操作！</font>');
+		$_activity = D ('Activity');
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			//令牌验证
+//			if (!$_activity->autoCheckToken($in))
+//				$this->message('请不要非法提交或者重复刷新页面！'); //由于tags参数不能传数组，请将数组参数格式化
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			if (false !== $_activity->save($in['info'])) {
+				$this->message('<font class="green">内容更新成功！</font>',U('factivity/manage?catid='.$in['catid']));
+			} else {
+				$this->message('<font class="red">' . $_activity->getError() . '内容更新失败！</font>');
+			}
+		}
+
+        $data = $_activity->find($in['aid']);
+
+		$attr_checkboxes = array("top"=> "首页置顶","hot"=>"热点","scroll"=> "图片轮播");
+        $data["attr"] = empty($data["attr"]) ? array() : explode(",",$data["attr"] );
+		$this->assign('attr_checkboxes',$attr_checkboxes);
+		$this->assign('customer_id', $data["attr"]);
+		
+		$this->assign('data',$data );
+		$this->display();
+	}
+
+
+	private function _ajax_edit() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'sort':  //更新排序
+				$in['aid'] && $in['aid'] = substr($in['aid'],5);
+				$in['sort'] = intval($in['sort']);
+				if ($in['sort'] == '0' || !empty($in['sort'])) {
+					$_activity = M ('Activity');
+					$data = $_activity->find($in['aid']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_activity->save($data)) {
+							echo $data['sort'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'savetitle':  //更新标题
+				$in['aid'] && $in['aid'] = substr($in['aid'],6);
+				if (!empty($in['title'])) {
+					$_activity = M ('Activity');
+					$data = $_activity->find($in['aid']);
+					if (is_array($data)) {
+						$data['title'] = $in['title'];
+						if (false !== $_activity->save($data)) {
+							echo $data['title'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+
+
+	/**
+	 * @name删除活动信息
+	 */
+	public function delete() {
+		$in = &$this->in;
+		if (!$in['aid']) $this->message('<font class="red">没有选择操作项！</font>');
+		$_activity = D('Activity');
+		if (is_numeric($in['aid'])) {
+			$_activity->delete($in['aid']);
+			$this->message('<font class="green">删除成功！</font>');
+		}
+	}
+
+
+	/**
+	 * @name活动报名信息
+	 */
+	public function manage_apply() {
+		$in = &$this->in;
+		$data = array ();
+		$baoming=array();
+		$_activity_apply = D ( 'ActivityApply' );
+		//表前缀
+		//查询条件
+		$where = array ();
+		$where["aid"] = $in['aid'];
+		//2013-1-15 陈敏 if语句用于判读当前页面下的状态,无状态时则显示所有非回收站的报名信息
+		if(isset($in["status"])) 
+		{
+			$where["status"] = $in['status'];//in为前台设置
+			$this->assign('status',$in['status']);
+		}
+		else
+		{
+			$where['status']=array('gt','-1');
+		}
+		if ($in['q'] && $in['q'] != '请输入关键字') {
+			$in['q'] = urldecode($in['q']);
+			$where["{$in['field']}"] = array('like',"%{$in['q']}%");
+		}
+		//排序条件
+		$order = " `mid` DESC ";
+		//统计模型数量
+		$data ['count'] = $_activity_apply->where ("`status`<>'-1' AND `aid`=".$in['aid'])->count ();
+
+		//2013-1-15 陈敏 回收站里面的记录条数，判断显示全部删除字段与否
+		$data ['jilu'] = $_activity_apply->where ("`status`='-1' AND `aid`=".$in['aid'])->count ();
+
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] = $_activity_apply->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		$this->assign ( 'data', $data );
+		$this->assign('in', $in);
+		$this->display('manage_apply');
+	}
+
+	/**
+	 * @name添加报名信息
+	 */
+	public function add_apply() {
+		$in = &$this->in;
+		$_activity_apply = D ('ActivityApply');
+		if ($this->ispost()) {  //录入内容
+			//令牌验证
+			if (!$_activity_apply->autoCheckToken($in))
+				$this->message('请不要非法提交或者重复刷新页面！'); //由于tags参数不能传数组，请将数组参数格式化
+			if (!empty($in['info']['reply'])) {
+				$in['info']['reply_user_id'] = $_SESSION['userdata']['user_id'];
+			}
+			if (!empty($in['info']['create_time'])) {
+				$in['info']['create_time'] = strtotime($in['info']['create_time']);
+			}
+			if (!empty($in['info']['reply_time'])) {
+				$in['info']['reply_time'] = strtotime($in['info']['reply_time']);
+			}
+			if (false !== $_activity_apply->add($in['info'])) {
+				$this->message('<font class="green">信息添加成功！</font>',U('factivity/manage_apply?catid='.$in['catid'].'&aid='.$in['info']['aid']));
+			} else {
+				$this->message('<font class="red">' . $_activity_apply->getError() . '信息更新失败！</font>');
+			}
+		}
+		$this->assign('in', $in);
+		$this->display('add_apply');
+	}
+
+	/**
+	 * @name报名信息修改
+	 */
+	public function edit_apply() {
+		$in = &$this->in;
+		if ($in['do']) $this->_do_edit();//2013-1-15 陈敏 主要是实现报名信息状态的更改
+		$_activity_apply = D ('ActivityApply');
+		if ($this->ispost()) {  //录入内容
+			//令牌验证
+			if (!$_activity_apply->autoCheckToken($in))
+			$this->message('请不要非法提交或者重复刷新页面！'); //由于tags参数不能传数组，请将数组参数格式化
+			if (!empty($in['info']['reply'])) {
+				$in['info']['reply_user_id'] = $_SESSION['userdata']['user_id'];
+			}
+			if (!empty($in['info']['create_time'])) {
+				$in['info']['create_time'] = strtotime($in['info']['create_time']);
+			}
+			if (!empty($in['info']['reply_time'])) {
+				$in['info']['reply_time'] = strtotime($in['info']['reply_time']);
+			}
+			if (false !== $_activity_apply->save($in['info'])) {
+				$this->message('<font class="green">内容更新成功！</font>',U('factivity/manage_apply?catid='.$in['catid'].'&aid='.$in['info']['aid']));
+			} else {
+				$this->message('<font class="red">' . $_activity_apply->getError() . '内容更新失败！</font>');
+			}
+		}
+		$this->assign('data',$_activity_apply->find($in['mid']));
+		$this->assign('in', $in);
+		$this->display('edit_apply');
+	}
+
+/**
+	 * @name操作
+	 */
+	protected function _do_edit() {
+		$in = &$this->in;
+		$_c = D ('Activity');
+		if (!$in['mid'] && empty($in['info'])) $this->message('<font class="red">未选择操作项！</font>');
+		switch ($in['do']) {
+			case 'recycle':  //移动到回收站、即 status => '-1'
+				if ($in['mid']) {
+					$idArr = array($in['mid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['mid'];
+				}
+				if ($_c->status($idArr,'-1')) {
+					$this->message('<font class="green">操作成功！</font>','',3);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'restore': //从回收站还原，还原后为待审状态,sort为1
+				if ($in['mid']) {
+					$idArr = array($in['mid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['mid'];
+				}
+				if ($_c->status($idArr,'0')) {
+					$this->message('<font class="green">操作成功！</font>','',3);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'status': //标记为已审，待审
+				if (!in_array($in['dostatus'],array('0','1'))) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['mid']) {
+					$idArr = array($in['mid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['mid'];
+				}
+				if ($_c->status($idArr,$in['dostatus'])) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'moveto': //移动到其它栏目
+				if (!$in['moveto']) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['mid']) {
+					$idArr = array($in['mid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['mid'];
+				}
+				if ($_c->moveto($idArr,$in['moveto'])) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+
+	public function delete_all()
+	{
+		$in=$this->in;
+		$_c = D ('ActivityApply');
+		if($_c->where("`status`='-1' AND `aid`=".$in['aid'])->delete())
+		{
+		$this->message('<font class="green">操作成功!</font>');
+		}
+		else
+		{
+			$this->message('<font class="red">操作失败!</font>');
+			}
+		}
+
+	/**
+	 * @name报名信息删除
+	 */
+	public function delete_apply() {
+		$in = &$this->in;
+			 if ($in['mid']) {
+			if (is_array($in['mid'])) {
+				$where['mid'] = array('in',$in['mid']);
+			} else {
+				$id = intval($in['mid']);
+				$where['mid'] = $id;
+			}
+			$where['aid'] = intval($in['info']['aid'] ? $in['info']['aid'] : $in['aid']);
+			$_activity_apply = D ('ActivityApply');
+			if (false !== $_activity_apply->where($where)->delete()) {
+				$this->message('<font class="green">删除成功！</font>');
+			} 
+			else {
+				$this->message('<font class="red">删除失败！</font>');
+			}
+		}
+	}
+}
+
+	
\ No newline at end of file

--- admin/Lib/Action/FadAction.class.php ---
@@ -0,0 +1,263 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FtagAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 广告管理
+// +----------------------------------------------------------------------
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 广告管理
+ *
+ */
+class FadAction extends FbaseAction {
+	
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'ad';
+		if ($in['ajax']) {
+			$this->_ajax();
+		}
+	}
+	
+	/**
+	 * @name标签管理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加广告
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($this->ispost()) {
+			$in['info']['setting'] = $in['info'][$in['info']['type']]['setting'];
+			$in['forward'] = U ('fad/manage');
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		$this->assign('nowtime',time());
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name编辑广告
+	 */
+	public function edit() {
+		$in = &$this->in;
+		$in['aid'] = intval($in['aid']);
+		$_ad = D ('Ad');
+		if ($this->ispost()) {			
+			$in['info']['setting'] = $in['info'][$in['info']['type']]['setting'];			
+			$in['forward'] = U ('fad/manage');
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		
+		if (!$in['aid']) $this->message('<font class="red">参数错误！</font>');
+		$data = $_ad->where("`aid`='{$in['aid']}'")->find();		
+		$this->assign('data',$data);
+		$this->display();
+	}
+	
+	/**
+	 * @name处理ad方面的ajax请求
+	 */
+	protected function _ajax() {
+		$in = &$this->in;
+		switch($in['ajax']) {
+			case '':
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	*@nameAJAX获取AD表单
+	*/
+	public function ajax_getform(){
+		$in = &$this->in;
+		if($in['is_ajax']){
+			if(isset($in['form_id'])){
+				if(isset($in['aid'])){
+					$in['aid'] = intval($in['aid']);
+					$_ad = D ('Ad');
+					$data = $_ad->where("`aid`='{$in['aid']}'")->find();		
+					$this->assign('data',$data);
+				}
+				$this->display('ad_'.$in['form_id']);
+				exit();
+			}
+		}
+	}
+
+	/**
+	 * @name预览
+	 */
+	public function preview() {
+		$in = &$this->in;
+		$_ad = D ('Ad');
+		$in['aid'] = intval($in['aid']);
+		if (!$in['aid']) $this->message('<font class="red">参数错误！</font>');		
+		$data = $_ad->find($in['aid']);
+		if (!empty($data)) {
+			import('Ad',INCLUDE_PATH);
+			$ad = new Ad($data['type'],$data['setting']);
+			echo $ad->get();
+		}
+	}
+    
+    public function delete(){
+        
+        $in = &$this->in;
+        $_ad = D ('Ad');
+        $in['aid'] = intval($in['aid']);
+        if (!$in['aid']) $this->message('<font class="red">参数错误！</font>');	
+        $_ad->where('aid = '.$in['aid'])->delete();
+        $this->message ( '删除成功！' );
+    }
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FaskAction.class.php ---
@@ -0,0 +1,302 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Fask.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-10-26
+// +----------------------------------------------------------------------
+// | Author: Chao <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 辅助插件 - 问答模块
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 辅助插件 - 问答模块
+ *
+ */
+class FaskAction extends FbaseAction {
+	protected $_category = '';
+	protected $category_data = '';
+	/**
+	 * 初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'ask';
+		
+		if ($in['catid']) {
+			$this->_category = D ('Category');
+			$this->category_data = $this->_category->find((int)$in['catid']);
+			$this->assign('cat',$this->category_data);
+			$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+			
+			//同类型分类下拉列表json
+			$categorys = $this->_category->getSameCategorys($this->category_data['catid']);
+			$arr = array();
+			if (is_array($categorys)) {
+				foreach ($categorys as $k=>$v) {
+					$arr[$v['catid']] = $v['name'];
+					$categorys[$k]['id'] = $v['catid'];
+				}
+				$this->assign('cat_json',json_encode($arr));
+				//树形栏目下拉框
+				import('Tree',INCLUDE_PATH);
+				$_tree = get_instance_of('Tree');
+				$_tree->init ( $categorys );
+				$str = "<option value='\$catid'>\$spacer\$name</option>";
+				$this->assign('category_tree',$_tree->get_tree ( 0, $str ));
+			}
+		} else $this->message('<font class="red">没有选择要操作的栏目</font>');
+	}
+	
+	/**
+	 * 检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') return true;
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+	
+	/**
+	 * @name分类管理
+	 */
+	public function category_manage()
+	{
+		$in = &$this->in;
+		$_model = M('ask_category');
+		$msg = '';
+		$parent_id = 0;
+		
+		//生成树
+		import ( 'Tree', INCLUDE_PATH );
+		$tree = get_instance_of ( 'Tree' );
+		$categorys = $_model->field("`ask_category_id` AS `id`,`name`,`parentid`,`catid`,`sort`,`status`,`create_time`")->order('`sort` ASC')->findAll();
+		foreach ($categorys AS &$c) {
+			$c['create_time'] = date('Y-m-d H:i', $c['create_time']);
+			$c['access'] = '<a href="'."{$this->category_data['url']}index?ask_category_id={$c['id']}".'">访问</a>';
+			$c['edit'] = '<a href="'.U("fask/category_manage?act=edit&catid={$this->category_data['catid']}&ask_category_id={$c['id']}").'">编辑</a>';
+			$c['delete'] = '<a href="'.U("fask/category_manage?act=delete&catid={$this->category_data['catid']}&ask_category_id={$c['id']}").'">删除</a>';
+			if ($in['ask_category_id'] && $in['ask_category_id'] == $c['id']) {
+				$parent_id = $c['parentid'];
+			}
+		}
+		$tree->init ( $categorys );
+		$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+		$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+		$this->assign ( 'categorys_option',$categorys_option );	//已有分类
+		
+		$str = "<tr>
+				  <td>\$id</td>
+				  <td>\$spacer\$name</td>
+				  <td>\$sort&nbsp;</td>
+				  <td>\$create_time&nbsp;</td>
+				  <td>\$access | \$edit | \$delete</td>
+				</tr>";
+		$tree->ret = '';
+		
+		$html = $tree->get_tree ( 0, $str );
+		$this->assign('html', $html);
+		
+		switch ($in['act']) {
+			case 'add':
+				$in['info']['create_time'] = $in['info']['update_time'] = strtotime($in['info']['create_time']);
+				if ($_model->add($in['info'])) $this->message('<font class="green">添加成功！</font>');
+				else $this->message('<font class="red">添加失败！</font>');
+				break;
+			case 'edit':
+				$this->category_edit();
+				exit;
+				break;
+			case 'delete':
+				$ask_model = M('ask');
+				$_model->delete($in['ask_category_id']); //删除分类
+				$ask_model->where('ask_category_id='. $in['ask_category_id'])->delete(); //删除分类下的内容
+				
+				//删除子分类及内容
+				$where = array();
+				$where['parentid'] = array('IN', $in['ask_category_id']);
+				while ($delete_data = $_model->where($where)->findAll()) {
+					$parent_ids = array();
+					if (empty($delete_data)) break;
+					foreach ($delete_data AS $d) {
+						$_model->delete($d['ask_category_id']);
+						$ask_model->where('ask_category_id='. $d['ask_category_id'])->delete();
+						$parent_ids[] = $d['ask_category_id'];
+					}
+					$where['parentid'] = implode(',', $parent_ids);
+				}
+				
+				redirect(U('fask/category_manage?catid=' . $this->category_data['catid']));
+				break;
+		}
+		$this->assign('msg', $msg);
+		$this->display();
+	}
+	
+	/**
+	 * @name编辑栏目
+	 */
+	protected function category_edit()
+	{
+		$in = &$this->in;
+		
+		$_model = M('ask_category');
+		if ($this->ispost()) {
+			$in['info']['update_time'] = time();
+			$in['info']['create_time'] = strtotime($in['info']['create_time']);
+			$_model->save($in['info']);
+			$this->message('<font class="green">编辑成功！</font>', $this->forward, 3);
+		}
+		$data = $_model->find($in['ask_category_id']);
+		$this->assign('data', $data);
+		$this->display('category_edit');
+	}
+	
+	/**
+	 * @name列表
+	 */
+	public function manage() {
+		$in = &$this->in;
+		
+		$where = array();
+		$where[] = 'parentid=0';
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`=' . $in['status'];
+		}
+		if (!empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		$in['order'] = '`ask_id` DESC';
+		
+		$this->assign('status', array('0' => '隐藏', '1' => '显示'));
+		$this->assign('q_fields', array('title' => '标题', 'username' => '提问人'));
+		$this->assign('in', $in);
+
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+		$category = $this->category_data;
+		
+		$_model = D('ask');
+		
+		if ($in['act'] == 'delAnswer') {
+			if ($_model->delete($in['ask_id'])) {
+				$_model->updateAnswerNum($in['parentid']);
+				die(json_encode('ok'));
+			} else die(json_encode('error'));
+		}
+		if ($this->ispost()) {
+			$in['info']['create_time'] = strtotime($in['info']['create_time']);
+			$in['info']['update_time'] = time();
+			if (!$in['info']['good_answer']) {
+				$in['info']['good_answer'] = 0;
+			}
+			if ($_model->save($in['info'])) {
+				$this->message('<font class="green">编辑成功！</font>');
+			} else $this->message('<font class="green">编辑失败！</font>');
+		}
+		$data = $_model->find($in['ask_id']);
+		
+		//同类型分类下拉列表json
+		import ( 'Tree', INCLUDE_PATH );
+		$tree = get_instance_of ( 'Tree' );
+		$ask_category_model = M('ask_category');
+		$ask_category_where = array();
+		$ask_category_where['status'] = 1;
+		$ask_category_where['catid'] = $category['catid'];
+		$ask_categorys = $ask_category_model->where($ask_category_where)->field("`ask_category_id` AS `id`,`name`,`parentid`")->order('`sort` ASC')->findAll();
+		$tree->init ( $ask_categorys );
+		$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+		$ask_categorys_option = $tree->get_tree ( 0, $str, $data['ask_category_id']);
+		$this->assign ( 'ask_categorys_option',$ask_categorys_option );	//已有分类
+		
+		//回答列表
+		$data['answer_list'] = $_model->where('parentid='.$data['ask_id'])->findAll();
+		$this->assign('data', $data);
+		$this->display();
+	}
+	
+	/**
+	 * @name删除
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+		
+		$_model = M('ask');
+		if (is_array($in['info']['id'])) {
+			$ids = implode(',', $in['info']['id']);
+		} else $ids = intval($in['info']['id']);
+		
+		$_model->delete($ids);
+		
+		$_model->where('parentid IN (' . $ids . ')')->delete();  //删除回答
+		redirect($this->forward);
+	}
+}
\ No newline at end of file

--- admin/Lib/Action/FbaseAction.class.php ---
@@ -0,0 +1,180 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: BaseAction.class.php
+// +----------------------------------------------------------------------
+// | Date: Wed Apr 21 13:44:16 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: condition
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 基础类
+ *
+ */
+class FbaseAction extends Action {
+	/**
+	 * 请求来源
+	 *
+	 * @var string
+	 */
+	public $forward = '';
+
+	/**
+	 * 搜集变量、包括 $_GET、$_POST、$_COOKIE
+	 * @var array
+	 */
+	public $in = array ();
+
+	/**
+	 * 权限验证对象
+	 * @var object
+	 */
+	public $_auth = '';
+
+	/**
+	 * 系统版本
+	 * @var string
+	 */
+	public $version = '4.2';
+
+	/**
+	 * 后台模板风格
+	 */
+	public $_a_theme = 'index';
+
+	/**
+	 * 初始化、载入数据表定义、执行权限验证、上下文分析等操作
+	 *
+	 */
+	protected function _initialize() {
+		if (strtolower ( MODULE_NAME ) == 'fbase') {
+			$this->message ( '页面不存在！' );
+		}
+		$in = &$this->in;
+		$this->initConf ();
+		import ( 'ORG.Util.Input' );
+		//输入过滤
+		$this->in = &Input::getVar ( $_REQUEST );
+		$this->forward = $this->in ['forward'] ? $this->in ['forward'] : (isset ( $_SERVER ['HTTP_REFERER'] ) ? $_SERVER ['HTTP_REFERER'] : '');
+		$this->assign ( 'forward', $this->forward );
+		if (false !== $this->needAuth) {//定义了 $needAuth = false 的控制器不需要进行验证
+			//检查权限
+			$this->checkRbac();
+		}
+
+		//$this->_a_theme = $this->initTheme();
+		$this->assign('_a_theme', $this->_a_theme);
+
+		$this->assign('userData',$_SESSION['userdata']);
+		$this->assign('version',$this->version);
+		$this->assign('action_name', ACTION_NAME);
+	}
+
+	/**
+	 * 初始化定义风格模板
+	 *
+	 */
+	/*protected function initTheme() {
+        $in = &$this->in;
+
+        if (empty($_GET['_a_theme'])) {
+			return isset($_COOKIE["_a_theme"]) ? $_COOKIE["_a_theme"] : $this->_a_theme;
+		} else {
+			if (file_exists(TMPL_PATH . C('DEFAULT_THEME') . '/Findex/' . $_GET['_a_theme'] . '.html')) {
+				setcookie("_a_theme", $_GET['_a_theme'], time()+3600*24*365);
+				return $_GET['_a_theme'];
+			} else {
+				return isset($_COOKIE["_a_theme"]) ? $_COOKIE["_a_theme"] : $this->_a_theme;
+			}
+		}
+    }*/
+
+	/**
+	 * 初始化部分全局定义
+	 */
+	protected function initConf() {
+		//定义相对网站的跟目录
+		define ( 'URL_ROOT', C ( 'SITE_TO_ROOT' ) );
+		//各资源文件夹目录
+		define ( '_PUBLIC_', URL_ROOT . 'admin/Public/' );
+		//前台模板文件目录路径
+		define('FRONT_TEMPLATE_PATH',FANGFACMS_ROOT . 'public/theme/' . C('DEFAULT_THEME'));
+	}
+
+
+	/**
+	 * 检查用户访问权限
+	 */
+	protected function checkRbac($controller = '',$action = '',$return = false) {
+		import ( 'Auth', INCLUDE_PATH );
+		$this->_auth = get_instance_of ( 'Auth' );
+		//略过开发者的权限检查
+		if ($_SESSION['userdata']['username'] == 'developer' || $_SESSION['userdata']['username'] == 'admin') {
+			return true;
+		}
+		if (!$this->_auth->checkRbac ()) {
+			if (!$return) {
+				if (!empty($this->in ['ajax'])) {
+					die('false');
+				} else {
+					$this->message('登录超时或者没有权限执行此操作！',U('flogin/index?unset=1'));
+				}
+			} else {
+				return false;
+			}
+		}
+		return true;
+	}
+
+	/**
+	 * 获取每页显示记录数
+	 * @param int $sizename
+	 */
+	protected function getPageSize($sizename = '') {
+		if (! isset ( $sizename ))
+			return C ( 'PAGESIZE' ) ? C ( 'PAGESIZE' ) : 20;
+		//检查全局设置
+		$result = C ( $sizename );
+		if (empty ( $result )) {
+			//检查cookie
+			$result = cookie ( $sizename );
+			if (empty ( $result )) {
+				//查看是否有传递记录参数
+				$in = &$this->in;
+				//检查参数
+				if ($in [$sizename]) {
+					cookie ( $sizename, $in [$sizename] );
+					$result = $in [$sizename];
+				}
+			}
+		}
+		return $result;
+	}
+
+	/**
+	 * 提示消息，并跳转到$url
+	 */
+	protected function message($message, $url = '', $wait = 3, $exit = true) {
+		if (empty ( $url ))
+			$url = $this->forward;
+		$message = str_ireplace('<br>','<br />',$message);
+		$message = str_ireplace('<br/>','<br />',$message);
+		$message = br2li($message);
+		$this->assign ( 'msgTitle', '系统提示' );
+		$this->assign ( 'message', $message ); // 提示信息
+		//保证输出不受静态缓存影响
+		C ( 'HTML_CACHE_ON', false );
+		// 成功操作后默认停留1秒
+		$this->assign ( 'waitSecond', $wait );
+		// 默认操作成功自动返回操作前页面
+		$this->assign ( "jumpUrl", $url );
+		$this->display ( C ( 'TMPL_ACTION_MESSAGE' ) );
+		$exit && exit ();
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FblogAction.class.php ---
@@ -0,0 +1,165 @@
+<?php
+/*
+ * 微博
+ * */
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name RBAC访问控制设置
+ *
+ */
+class FblogAction extends FbaseAction {
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+	}
+	
+	/**
+	 * @name 站内内容
+	 *
+	 */
+   public function contentlist() {
+   	        $in = &$this->in;
+	        $content = D('content');
+         	//生成树
+		   	import ( 'Tree', INCLUDE_PATH );
+		   	$parent_id = ($in['parentid'] ? $in['parentid'] : 0);
+         	$tree = get_instance_of ( 'Tree' );
+			$categorys = D('Category')->field("`catid` AS `id`,`name`,`parentid`")->where("`cattype`='cat'")->findAll();
+			$tree->init ( $categorys );
+			$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+			$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+			$this->assign ( 'html',$categorys_option );	//已有分类
+       	 $where = ' 1';
+		 $pageurl = "";
+		 $seaarr = array();
+       	 if($in['stitle']) {
+				 $where .= ' AND title like \'%'.$in['stitle'].'%\'';
+                 $pageurl .= "&q=".$in['stitle'];
+				 $seaarr['stitle'] = $in['stitle'];
+				  }
+		 if($in['spic']) {
+           		 $where .= "  AND thumb != '' ";
+				 $pageurl .= "&spic=".$in['spic'];
+				  $seaarr['spic'] = $in['spic'];
+				}
+         if(is_numeric($in['snav'])) {
+		          $where .= ' AND catid = '.$in['snav'].' ';
+                   $pageurl .= "&snav=".$in['snav'];
+				    $seaarr['snav'] = $in['snav'];
+		       }
+		$this->assign("search",$seaarr);
+		
+		//统计模型数量
+		$data ['count'] = $content->where($where)->count();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], 10 ,$pageurl);
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+
+		 
+		 $data['info'] = $content->where($where)->order('create_time DESC')->limit ( $Page->firstRow . ',' . $Page->listRows )->select();
+		 $this->assign('data',$data);	
+	     $this->display();
+   }
+   
+   /*
+    * 选择内容
+    * 
+    */
+   public function manage() {
+   	$in = $this->in;
+	$db_pre = C('DB_PREFIX');
+   	if($_COOKIE['blogcid']) {
+   		$where = 'cid='.$_COOKIE['blogcid'];
+   		$_content = D("content");
+   		$modelid = $_content->field("cat.modelid,cat.catdir")->join("LEFT JOIN {$db_pre}category AS cat ON cat.catid = {$db_pre}content.catid")->where($where)->find();
+		$array = array(
+            1=>"{$db_pre}content_article",
+            2=>"{$db_pre}content_product",
+            3=>"{$db_pre}content_picture",
+        );
+		$data = $_content->join("LEFT JOIN ".$array[$modelid['modelid']]." ON ".$array[$modelid['modelid']].".cid = {$db_pre}content.cid")->where("{$db_pre}content.cid=".$_COOKIE['blogcid'])->find();			
+		$data['url'] =C('SITEURL').substr($_SERVER['SCRIPT_NAME'],0,strrpos($_SERVER['SCRIPT_NAME'],"/")).'/'.$modelid['catdir'].'/'.$data['url'];		
+		setcookie("blogcid",'',-86400);
+		$num=0;
+		$images = array();
+		if ($data['images']) {
+			$img = eval("return (".$data['images'].");");
+			$i = 0;
+			foreach ($img as $image) {
+				$images[$i]['image'] = $image[1]; //原图
+				$i++;
+			}
+			$num += 1;
+ 		}
+		if($data['big_pic']) $num += 1;
+		if($data['thumb']) $num += 1;
+		$this->assign("images",$images);
+		$this->assign("tag",$num);
+   		$this->assign("data",$data);
+   	}
+			$user = D("bloguser");
+		$tence = $user->field("name")->where("type='腾讯微博' AND state=1")->select();
+		$sina = $user->field("name")->where("type='新浪微博' AND state=1")->select();
+		$this->assign("tence",$tence);
+		$this->assign("sina",$sina);
+   $this->display();
+   } 
+
+   
+   /*
+    * 帐号设置管理
+    * 
+    */
+    public function usermanage() {
+    	$bloguser = D("bloguser");
+		if($_GET['act'] == 'update') {      //更改状态
+    		$where = 'id='.$_GET['id'];
+            $data = $bloguser->where($where)->find();		
+		       if($data['type'] == '腾讯微博') {
+		            include './plugins/tecent/Config.php';
+					include './plugins/tecent/Tencent.php';
+					OAuth::init($client_id, $client_secret);
+					 Tencent::$debug = $debug;
+					if($_GET['state'] == 1) {        //刷新
+					    $_SESSION['t_refresh_token'] = $data['refresh_token'];
+					    $out = OAuth::refreshToken();
+					   unset($_SESSION['t_refresh_token']);
+						unset($_SESSION['t_access_token']);
+						unset($_SESSION['t_expire_in']);
+						$redata['datelimit'] = strtotime(date('Y-m-d h:i:s',time()+$out['expires_in']));
+						$redata['state'] = "1";
+						$redata['access_token'] = $out['access_token'];
+						$redata['refresh_token'] = $out['refresh_token'];
+						$redata['openid'] = $out['openid'];
+					    }else {                      //清除
+						 $_SESSION['t_access_token'] = $data['access_token'];
+						 $_SESSION['t_code'] = $data['code'];
+						 $_SESSION['t_openid'] = $data['openid'];
+					     $_SESSION['t_openkey'] = $data['openkey'];
+                         OAuth::clearOAuthInfo();
+						  unset($_SESSION['t_refresh_token']);
+						$redata['state'] = '0';	
+					 }
+			   } else  {          //新浪微博
+		            if($_GET['state'] == 1) {        //刷新
+                       $redata['state'] = '1';
+                      }  else {
+					  $redata['state'] = '0';
+					 }					  
+			   }			
+			$bloguser->where($where)->save($redata);
+    	} elseif($_GET['act'] == 'del') {
+    		$where = 'id='.$_GET['id'];
+    		$bloguser->where($where)->delete();
+    	}
+    	$userlist = $bloguser->select();
+        $this->assign('userlist',$userlist);
+    	$this->display();
+    }   
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FbrcodeAction.class.php ---
@@ -0,0 +1,347 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FbrcodeAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2013-4-9
+// +----------------------------------------------------------------------
+// | Author: 
+// +----------------------------------------------------------------------
+// | 文件描述: 二位码生成器
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 系统管理
+ *
+ */
+class FbrcodeAction extends FbaseAction {
+	/**
+	 * @name初始化二维码数据
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'brcode';
+		$this->assign('status', array('0' => '未审核', '1' => '已审核'));
+		$is_brcode = C("is_brcode");
+        
+		if(empty($is_brcode)){
+             if($in['ajax'] == 1) die( '没有启用二维码功能！');
+			$this->message ( '没有启用二维码功能！' );
+		}
+		//$this->assign('in', $this->in);
+	}
+	
+	/**
+	 * @name管理入口
+	 */
+	public function index()
+	{
+		$this->manage();
+	}
+	
+	/**
+	 * @name二维码管理
+	 *
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		$where = array();
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`=' . $in['status'];
+		}
+		
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		$in['order'] = '`id` DESC';
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		$this->assign('upload_dir', C('UPLOAD_DIR'));
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加、编辑 二维码
+	 */
+	public function add()
+	{
+		$in = &$this->in;
+        $arr_size = array();
+		for($size=1; $size<=10; $size++) 
+			$arr_size[$size] = '尺寸：'.$size;
+		$this->assign('size', $arr_size);
+
+		$this->assign('upload_dir', C('UPLOAD_DIR'));
+		if ($in['do']) {
+			$_model = M('brcode');
+			$data[$in['do']] = $in[$in['do']];
+			$_model->where('id=' . $in['id'])->save($data);
+			redirect($this->forward);
+		} else {
+			if ($this->ispost()) {
+                if(empty($in ['info']['title']))  $this->message ( '标题不能为空！' );
+ 				if(empty($in ['info']['content']))  $this->message ( '内容不能为空！' );
+
+				if (! $in ['_tablename'])
+					$this->message ( '没有指定操作表！' );
+				$name = $in ['_tablename']; //数据表名
+				//		die($this->getInTableName($name));
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+				$_keyid = $_m->getPk ();
+				//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+				$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+
+				if( $in ['info'] [$_keyid] ){
+					$val = $_m->find (array('id'=>$in ['info'] [$_keyid]));
+					$filename = FANGFACMS_ROOT.C('UPLOAD_DIR').$val['url'];
+					if(!empty($val['url']) && file_exists( $filename ) ) @unlink($filename);
+				}
+				//二维码存在时 删除原来的二维码
+				$in['info']['url'] = generate_brcode(trim($in['info']['content']), $in['info']['size']);
+                
+				if ( $_m->create ( $in ['info'] ) ) {
+					if (! empty ( $in ['info'] [$_keyid] )) { //更新
+							$keyid = $_m->save ();
+					} else { //添加
+						$keyid = $_m->add ();
+						if ($keyid) $in['info'][$_keyid] = $keyid;
+					}
+					if (false !== $keyid) { //添加数据
+						if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+							$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+						}
+						//返回处理信息
+						if ($in ['ajax'])
+							$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+						else if($in ['_tablename'] == 'menu')
+							$this->message ( '记录保存成功！', '', 0, false);
+						else
+							$this->message ( '记录保存成功！' );
+					} else {
+						//返回处理信息
+						if ($in ['ajax'])
+							$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+						else
+							$this->message ( $_m->getError () . '<br />数据保存失败！' );
+					}
+				} else {
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+					else
+						$this->message ( $_m->getError ().'记录保存失败！' );
+				}
+			}
+			//获取数据
+			if (!empty($in['_tablename'])) {
+				$name = $in ['_tablename']; //数据表名
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+				$_keyid = $_m->getPk ();
+				if ( $in [$_keyid] ) { //编辑
+					$keyid = $in [$_keyid] ;
+					$data = $_m->find ( $keyid );
+					if (isset($data['parentid']) && $data['parentid']>0) {
+						$this->assign('parent_data',$_m->find($data['parentid']));
+					}
+					$this->assign ( 'data', $data );
+				}
+			}
+			if (!empty($in['tpl'])) {
+				$this->display ( $in ['tpl'] );
+			} else {
+				$this->display();
+			}
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+		if ($in ['ajax']) {
+			$this->_edit_ajax ();
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function _edit_ajax()
+	{
+		$in = &$this->in;
+		$_model = M('fbcode');
+		switch ($in['ajax']) {
+			case 'sort':  //排序
+				$in['id'] && $in['id'] = (int)substr($in['id'],5);
+				if ($in['id'] && !empty($in['sort'])) {
+					$data = $_model->find($in['id']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_model->save($data)) {
+							//更新缓存
+							die($data['sort']);
+						}
+					}
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name删除 二维码
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		//		die($this->getInTableName($name));
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in['info'][$_keyid] ) { //主键筛选
+			if (is_array($in['info'][$_keyid])) {
+				if (!empty($in['info'][$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in['info'][$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+	   if ($in[$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in[$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}	
+
+	/**
+	 * @批量生成二维码
+	 */
+	public function batch()
+	{
+ 		$in        = &$this->in;
+		if ($in['ajax'] == 1) {
+			$modelid     =  "1,2,3,4,5,14,15";
+            $brcode_size = C("brcode_size"); 
+			$_model      = M();
+			
+			$db_pre      = C('DB_PREFIX');
+			$table       = "{$db_pre}model_field mf, {$db_pre}category c";
+			$where       = "mf.modelid = c.modelid AND mf.modelid IN($modelid) AND mf.field = 'brcode' AND mf.status = '1'";
+			$data        = $_model->table($table)->field('c.catid')->where($where )->select();
+            $count       = 0;
+			foreach($data as $item){
+				$catid = $item['catid'];
+				$list = M('Content')->field('url, cid, brcode')->where("catid = '$catid'")->select();
+				foreach($list as $val){
+					$siteurl = 'http://'.$_SERVER['HTTP_HOST'];
+					$categoryData = F ('category_' . $catid);
+					$brcode_url   = $siteurl.str_replace('//','/',$categoryData['url'].$val['url']);
+					$pic_url = generate_brcode($brcode_url, $brcode_size);
+					if(!empty($pic_url)){
+                        $count++;
+						$sql = "UPDATE {$db_pre}content SET `brcode`='$pic_url' WHERE `cid`='".$val['cid']."' LIMIT 1";
+						$_model->query($sql);
+                    }
+					if(!empty($val['brcode'])){
+						@unlink(FANGFACMS_ROOT.C('UPLOAD_DIR').$val['brcode']);
+                    }
+				}
+			}
+			if($count == 0) die("没有生成二维码的数据！");
+			die("共生成了".$count."条二维码数据！");
+        }
+		$this->display();
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FcacheAction.class.php ---
@@ -0,0 +1,237 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FdbAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 数据缓存维护
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 数据缓存维护
+ *
+ */
+class FcacheAction extends FbaseAction {
+
+	/**
+	 * @name更新所有缓存
+	 */
+	public function all() {
+		//检查数据缓存目录的权限设置
+		//更新缓存信息
+		$this->model (false);
+		$this->category (false);
+		$this->module (false);
+		$this->index (false);
+		$this->menu(false);
+		$this->sysset(false);
+        $this->act(false);
+        $this->role(false);
+        $this->ad(false);
+        $this->keylink(false);
+        //更新admin/front  app缓存
+        $this->app();
+		$this->message('<font class="green">所有缓存更新成功！</font>', U ( 'findex/home' ) );
+	}
+	
+	/**
+	 * @name更新app缓存以及项目临时文件，项目log
+	 * 
+	 */
+	public function app() {
+		$file = array(
+			ALL_CACHE_PATH . 'admin/runtime/~app.php',
+			ALL_CACHE_PATH . 'admin/runtime/~runtime.php',
+			ALL_CACHE_PATH . 'front/runtime/~app.php',
+			ALL_CACHE_PATH . 'front/runtime/~runtime.php',		
+		);
+		$dir = array(
+			ALL_CACHE_PATH . 'admin/runtime/cache/',
+			ALL_CACHE_PATH . 'admin/runtime/logs/',
+			ALL_CACHE_PATH . 'admin/runtime/tmp/',
+			ALL_CACHE_PATH . 'front/runtime/cache/',
+			ALL_CACHE_PATH . 'front/runtime/logs/',
+			ALL_CACHE_PATH . 'front/runtime/tmp/',
+		);
+		if (!empty($file)) {
+			foreach ($file as $f) {
+				@unlink($f);
+			}
+		}
+		if (!empty($dir)) {
+			import('ORG.Io.Dir');
+			$_dir = new Dir();
+			foreach ($dir as $d) {
+				@$_dir->clearDir($d);
+			}
+		}
+	}
+
+	/**
+	 * @name更新首页
+	 * @param boolean $msg
+	 */
+	public function index($msg = true) {
+		@unlink(FANGFA_ROOT . 'index.html');
+		if($msg) {
+			$this->message('<font class="green">网站首页更新成功！</font>',U('findex/home'));
+		}
+	}
+
+	/**
+	 * @name更新参数配置文件
+	 * 
+	 * @param boolean $msg
+	 */
+	public function sysset($msg = true) {
+		$_setting = D ('Setting');
+		$_setting->cacheAll();
+		if($msg) {
+			$this->message('<font class="green">网站配置更新成功！</font>',U('fset/set'));
+		}
+	}
+
+	/**
+	 * @name更新act缓存
+	 * 
+	 * @param boolean $msg
+	 */
+    public function act($msg = true) {
+		$_setting = D ('Acts');
+		$_setting->cacheAct();
+    	if($msg) {
+    		$in = &$this->in;
+    		$url = 'frole/manage';
+    		if(isset($in['isadmin']) && $in['isadmin']==0)$url = 'fmember/manage_group';
+			$this->message('<font class="green">授权信息更新成功！</font>',U($url));
+		}
+	}
+
+	/**
+	 * @name更新模型缓存，包括field缓存
+	 * @param boolean $msg
+	 */
+	public function model($msg = true) {
+		$_model = D ( 'Model' );
+		$_model->cacheAll ();
+		if($msg) {
+			$this->message('<font class="green">模型信息更新成功！</font>',U('fmodel/manage'));
+		}
+	}
+
+	/**
+	 * @name更新模块缓存
+	 * @param boolean $msg
+	 */
+	public function module($msg = true) {
+		$_module = D ( 'Module' );
+		$_module->cacheAll ();
+        if($msg) {
+			$this->message('<font class="green">模块缓存更新成功！</font>',U('fmodule/manage'));
+		}
+	}
+
+	/**
+	 * @name更新栏目缓存，包括路由缓存
+	 * @param boolean $msg
+	 */
+	public function category($msg = true) {
+		$_category = D ( 'Category' );
+		$_category->cacheAll ();
+		
+		if($msg) {
+			$this->message('<font class="green">栏目信息更新成功！</font>',U('fcategory/manage'));
+		}
+	}
+
+
+	/**
+	 * @name更新菜单缓存
+	 * @param boolean $msg
+	 */
+	public function menu($msg = true) {
+		$_menu = D ('Menu');
+		$_menu->cacheAll();
+		if($msg) {
+			$this->message('<font class="green">菜单缓存更新成功！</font>',U('fset/menu?do=manage'));
+		}
+	}
+
+	
+	/**
+	 * @name更新角色信息缓存
+	 * @param boolean $msg
+	 */
+	public function role($msg = true) {
+		$_role = D ('Role');
+		$_role->cacheAll();
+		if($msg) {
+			$this->message('<font class="green">角色缓存更新成功！</font>',U('frole/manage'));
+		}
+	}
+	
+	/**
+	 * @name缓存广告信息
+	 *
+	 * @param boolean $msg
+	 */
+	public function ad($msg = true) {
+		$_ad = D ('Ad');
+		$_ad->cacheAll();
+		if($msg) {
+			$this->message('<font class="green">广告信息缓存更新成功！</font>',U('fad/manage'));
+		}
+	}
+	
+	/**
+	 * @name更新关键词链接
+	 * @param boolean $msg
+	 */
+	public function keylink($msg = true) {
+		$_keylink = D('Keylink');
+		$_keylink->cache();
+		if($msg) {
+			$this->message('<font class="green">关键词链接信息缓存更新成功！</font>',U('fset/keylink?do=manage'));
+		}
+	}
+    
+    /**
+     * @name清空前后台所有缓存文件
+     * @articler fangfa
+     * @date 2013-01-28
+     * 
+     */
+    
+    public function deldir($dir) {
+      //先删除目录下的文件：
+      //前后台
+        if(!isset($dir)){
+            $dir['admin'] = './data/admin/runtime/templates_c';
+            $dir['front'] = './data/front/runtime/templates_c';
+        }
+        foreach($dir as $k=>$v){
+            $dh=opendir($v);
+            while ($file=readdir($dh)) {
+                if($file!="." && $file!="..") {
+                    $fullpath=$v."/".$file;
+                    if(!is_dir($fullpath)) {
+                        unlink($fullpath);
+                    } else {
+                        deldir($fullpath);
+                    }
+                }
+            }
+
+        closedir($dh);
+        }
+        $this->message('<font class="green">前后台所有缓存文件已清空！</font>', U ( 'findex/home' ));
+    } 
+     
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/FcategoryAction.class.php ---
@@ -0,0 +1,841 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Fcategory.class.php
+// +----------------------------------------------------------------------
+// | Date: Mon Apr 26 11:55:49 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 栏目管理控制器
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 栏目管理控制器
+ *
+ */
+class FcategoryAction extends FbaseAction {
+
+	/**
+	 * 栏目模型对象
+	 * @var object
+	 */
+	protected $_category = '';
+
+	/**
+	 * 栏目数据
+	 * @var unknown_type
+	 */
+	protected $category_data = array ();
+
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize ();
+		$in = &$this->in;
+		$this->_category = D ( 'Category' );
+		if ($in['info']['catid']>0) $in['catid'] = $in['info']['catid'];
+		if ($in ['catid']) {
+			$this->category_data = $this->_category->find ( (int)$in ['catid'] );
+		}
+	}
+
+	/**
+	 * @name添加栏目
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in ['ajax']) {
+			$this->_add_ajax ();
+		}
+		if($in['classify']){//添加分类
+			$this->_add_classify();
+			
+			exit();
+		}
+		if (empty($in['step']) || !$in['type'] || $in['type']=='undefined') { //选择添加的栏目类型
+			//所有可用模型  筛选掉 系统管理员 和个人会员
+			$data = D ( 'Model' )->field("`name`,`modelid`")->where ( " `status`='1' and moduleid != 2 and moduleid!=11" )->findAll ();		
+			//生成树
+			import ( 'Tree', INCLUDE_PATH );
+			$parent_id = ($in['parentid'] ? $in['parentid'] : 0);
+			$tree = get_instance_of ( 'Tree' );
+			$categorys = D('Category')->field("`catid` AS `id`,`name`,`parentid`")->where("`cattype`='cat'")->findAll();
+			$tree->init ( $categorys );
+			$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+			$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+			$this->assign ( 'data', $data );	//所有模型信息
+			$this->assign ( 'html',$categorys_option );	//已有分类
+
+			$in['type'] && $this->assign('type', $in['type']);
+			$in['modelid'] && $this->assign('modelid', $in['modelid']);
+			$this->display ( 'add_select' );
+			exit ();
+		}
+		$parent_data = array ();
+		if ($in ['parentid'] && !$in['type']) {//直接添加子栏目
+			$pid = intval ( $in ['parentid'] );
+			$parent_data = $this->_category->find ( $pid );
+			$this->assign ( 'parent_data', $parent_data );
+			$in['type'] = $parent_data['type'];
+			$in ['info'] ['modelid'] = $parent_data['modelid'];
+		}
+		if ($in ['parentid'] && $in['type']) {//自选类型的子栏目
+			$pid = intval ( $in ['parentid'] );
+			$parent_data = $this->_category->find ( $pid );
+			$this->assign ( 'parent_data', $parent_data );
+			$in ['info'] ['modelid'] = $parent_data['modelid'];
+		}
+		//检查添加的类型
+		$types = array ('page', 'link', 'normal');
+		if (!$in ['type'] || ! in_array ( $in ['type'], $types )) {
+			$this->message ( '<font class="red">参数错误！</font>' );
+		}
+		$method = '_add_' . $in ['type'] . '_category';
+		$in ['info'] ['type'] = &$in ['type'];
+
+		//分发到对应类型栏目的处理方法
+		if (method_exists($this,$method)) {
+			$this->$method ( '', $parent_data );
+		} else {
+			$this->message('<font class="red">参数错误，非法操作！</font>');
+		}
+	}
+
+	/**
+	 * @name处理添加栏目时候的ajax请求
+	 */
+	protected function _add_ajax() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		if ($in ['ajax'] == 'checkdir') { //检查目录名称
+			$in ['info'] ['catdir'] && $in ['info'] ['catdir'] = trim ( $in ['info'] ['catdir'] );
+			if (! empty ( $in['info']['catdir'] ) || $in['info']['url']) {
+				if ($_category->validate($in['info'],'catdir')) {
+					die('true');
+				}
+				die('false');
+			}
+			die ( 'false' );
+		}
+		if ($in ['ajax'] == 'checkpage') { //检查单页目录名称
+			$in ['info'] ['url'] = trim ( $in ['info'] ['url'] );
+			if (! empty ( $in['info']['url'] )) {
+				if ($_category->validate($in['info'],'url')) {
+					die('true');
+				}
+				die($_category->getError().'false');
+			}
+			die ( 'false' );
+		}
+		if ($in ['ajax'] == 'delete_thumb') {	//删除缩略图
+			if ($_category->delete_thumb($in ['catid'])) {
+				die('true');
+			} else {
+				die('false');
+			}
+		}
+		if($in ['ajax'] == 'checkname') { //检查名字
+			if(!empty($in['info']['classifyname'])){
+				$oldname = $in['oldname'] ? $in['oldname'] : '';
+				$categorys = $_category->where("`name`='".$in['info']['classifyname']."' AND `name` != '" . $oldname ."'")->find();
+				if(is_array($categorys)){//同名检查
+					die('false');
+				}else{
+					die('true');
+				}
+			}else{
+				die('false');
+			}
+		}
+		if($in['ajax'] == 'getpin') {
+			if($in['word']){
+			//import('Wordtopy',INCLUDE_PATH);
+			include(INCLUDE_PATH."Wordtopy.class.php");
+			$piny = Wordtopy::getPinyin($in['word']);
+			die($piny);
+			}else{
+				die('');
+			}
+		}
+		exit ();
+	}
+	
+	/*
+	*@name添加分类
+	*
+	*/
+	protected function _add_classify(){
+		$in = &$this->in;
+		$_category = $this->_category;
+		if($in['dosubmit']){
+			if($in['step']==2){
+				if(!$in['info']['modelid']) $this->message ( '<font class="red">参数错误！</font>' );
+				$modelid = intval($in['info']['modelid']);
+				//$category_data = $_category->where("`cattype`='cat' AND `catid`=".$topcatid)->find();
+				//$modelid = $category_data['modelid'];
+				//模块所属数据
+				$_model = D ( 'Model' );
+				$model_data = $_model->relation ( true )->find ( $modelid );
+				if (empty($model_data)) {
+					$this->message('<font class="red">该分类所属模型不存在或者被删除！</font>');
+				}
+				if($in['info']['parentid']){
+					$classify_data = $_category->where("`cattype`='cla' AND `catid`=".$in['info']['parentid'])->find();
+					$parent_name = $classify_data['name'];
+				}else{
+					$parent_name = '顶级分类';
+				}
+				$this->assign ( 'parent_name', $parent_name );
+				$this->assign ( 'model_data', $model_data );
+				$this->assign ( 'in', $in );
+				$this->assign ( 'forward', U('fcategory/manage?cattype=cla') );
+				$this->display ('add_classify_2');
+				exit();
+			}elseif($in['step']==3){
+				if($this->ispost()){
+					//令牌验证
+					//if (!$_category->autoCheckToken($in)) {
+					//	$this->message('请不要非法提交或者重复提交页面！');
+					//}
+					if (! ( int ) $in ['info'] ['modelid']) {
+						$this->message ( '<font class="red">没有选择模型！</font>' );
+					}
+					//重装数据
+					$in['info']['classifyname'] &&  $in['info']['name'] = $in['info']['classifyname'];
+					
+					if (false !== $_category->add ( $in ['info'] )) {
+						$this->message ( '<font class="green">添加成功！</font>');
+					} else {
+						$this->message ( $_category->getError () . '添加失败！</font>' );
+					}
+					exit();
+				}
+			}
+		}
+		
+		//获取含有联动分类字段的模型
+		$data = D ( "Model" )->table("`".C('DB_PREFIX')."model` m")->field("m.name,m.modelid")->join("`".C('DB_PREFIX')."model_field` mf ON mf.modelid = m.modelid")->where ( " m.status='1' AND mf.status='1' AND mf.field='classify_select' " )->findAll ();
+		foreach($data as $k=>$v){
+			$model_array[] = $v['modelid'];
+		}
+		if(!empty($model_array)){
+			$model_id = implode(',',$model_array);
+			$categorys = D( 'Category' )->field("`catid` AS `id`, `name`,`parentid`,`modelid`")->where("`cattype`='cat' AND `modelid` IN (".$model_id.")")->findAll();
+		}else{
+			$categorys[] = array('id' => '0',
+							   'name' => '没有模型含有分类字段');
+		}
+		
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cla') );
+		$this->assign('category',$categorys);
+		$this->assign('modeldata',$data);
+		$this->display ('add_classify_1');
+	}
+	
+	/**
+	*@name AJAX获取对应模型分类
+	*/
+	public function ajaxgetclassify(){
+		$in = &$this->in;
+		$_category = $this->_category;
+		if($in['ajax'] == 'classify'){
+			switch ($in['gettype']){
+			  case 'getmodel':
+				if($in['modelid'])
+				{
+					//得到父栏目的信息
+					//$category_parent = $_category->field("`catid` AS `id`,`name`,`parentid`,`modelid`")->where("`cattype`='cat' AND `catid` = ".$in['catid'] )->find();
+					//生成树
+					import ( 'Tree', INCLUDE_PATH );
+					//$parent_id = intval($category_parent['id']);//父栏目ID
+					$tree = get_instance_of ( 'Tree' );
+					//得到分类数据
+					$classify = $_category->field("`catid` AS `id`,`name`,`parentid`,`modelid`,`topcatid`")->where("`cattype`='cla' AND `modelid`=".$in['modelid'])->findAll();
+					if(empty($classify)) die('2');//没有查到分类数据
+					$tree->init ( $classify );
+					$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+					$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+					die($categorys_option);
+				}else{
+					die('1');
+				}
+			  break;
+				
+			  case 'getcategory':
+				if($in['catid'])
+				{
+					//得到分类的信息
+					$category_parent = $_category->field("`catid` AS `id`,`name`,`parentid`,`modelid`")->where("`cattype`='cla' AND `catid` = ".$in['catid'] )->find();
+					//生成树
+					import ( 'Tree', INCLUDE_PATH );
+					//$parent_id = intval($category_parent['id']);//父栏目ID
+					$tree = get_instance_of ( 'Tree' );
+					//得到分类数据
+					$classify = $_category->field("`catid` AS `id`,`name`,`parentid`,`modelid`")->where("`cattype`='cat' AND `modelid`=".$category_parent['modelid'])->findAll();
+					if(empty($classify)) die('2');//没有查到分类数据
+					$tree->init ( $classify );
+					$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+					$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+					die($categorys_option);
+				}else{
+					die('1');
+				}
+			  break;
+			}
+		}
+	}
+	
+	/**
+	 * @name 获取栏目信息
+	 */
+	public function getcategory(){
+		$in = &$this->in;
+		$_category = $this->_category;
+		if($in['dosubmit']){
+			if($in['catid']){
+				if(!isset($in['topcatid'])){
+					$in['topcatid'] = array();
+				}
+					if(false !== $_category->settopcatid($in['catid'],$in['topcatid'])){
+						$this->message('提交成功！');
+					}else{
+						$this->message('提交失败！');
+					}
+			}else{
+				
+			}
+		}
+		if($in['catid'])
+		{
+		  //得到分类的信息
+		  $category_parent = $_category->field("`catid` AS `id`,`name`,`parentid`,`modelid`,`topcatid`")->where("`cattype`='cla' AND `catid` = ".$in['catid'] )->find();
+		  //生成树
+		  //import ( 'Tree', INCLUDE_PATH );
+		  //$parent_id = intval($category_parent['id']);//父栏目ID
+		  //$tree = get_instance_of ( 'Tree' );
+		  //得到栏目数据
+		  $classify = $_category->field("`catid` AS `id`,`name`,`parentid`,`modelid`")->where("`cattype`='cat' AND `modelid`=".$category_parent['modelid'])->findAll();
+		  if(empty($classify)) die('没有查到栏目数据');//没有查到栏目数据
+		  //$tree->init ( $classify );
+		  //$str = "<option value='\$id' \$selected>\$spacer\$name</option>\n";
+		  //$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+		  if(!empty($category_parent['topcatid'])){
+		  	$category_topcatid = split(',',$category_parent['topcatid']);
+			foreach($classify as $k=>$v){
+				$v['checked'] = '';
+				foreach($category_topcatid as $m){
+					
+					if($v['id'] === $m){
+						$classify[$k]['checked'] = 'checked';
+					}
+				}
+			}
+		  }
+		 	$this->assign('catid',$in['catid']);
+		 	$this->assign ( 'data', $classify );
+			$this->display('select_classify');
+		}
+	}
+	
+	/**
+	 * @name添加、编辑普通栏目
+	 */
+	protected function _add_normal_category() {
+		$in = &$this->in;
+//		dump($in);exit;
+		$_category = $this->_category;
+		//检查参数
+		$modelid = intval ( $in ['modelid'] ? $in ['modelid'] : $in ['info'] ['modelid']);
+		//$modelid = intval ( $in ['info'] ['modelid'] ? $in ['info'] ['modelid'] : $in ['modelid'] );
+		if (! $modelid)
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$parentid = intval ( $in ['parentid'] );
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			if (!$_category->autoCheckToken($in)) {
+				$this->message('请不要非法提交或者重复提交页面！');
+			}
+			//更新的时候只能修改部分项数据
+			if (! ( int ) $in ['info'] ['modelid']) {
+				$this->message ( '<font class="red">没有选择模型！</font>' );
+			}
+			$in ['info'] ['type'] = 'normal';
+//			dump($in ['info']);exit;
+			//添加
+			if (false !== $_category->add ( $in ['info'] )) {
+				$this->message ( '<font class="green">添加成功！</font>');
+			} else {
+				$this->message ( $_category->getError () . '添加失败！</font>' );
+			}
+		}
+		//模块所属数据
+		$_model = D ( 'Model' );
+		$model_data = $_model->relation ( true )->find ( $modelid );
+		if (empty($model_data)) {
+			$this->message('<font class="red">该栏目所属模型不存在或者被删除！</font>');
+		}
+		//获取设置项
+		$mName = ucfirst ( substr($model_data ['module'] ['controller'],1) );
+		$_m = D ( $mName );
+		if (!method_exists($_m,'setting')) {
+			throw_exception (  "{$mName}Model的setting方法不存在，无法载入栏目设置项！<br />" );
+		} else {
+			$setting = $_m->setting(array("modelid"=>$in['modelid']),$in['catid'],$in['parentid']);
+		}
+		$this->assign ( 'otherHtml', $setting );
+		$this->assign ( 'model_data', $model_data );
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cat') );
+		$this->display ( 'add_normal_type' );
+	}
+
+	/**
+	 * @name增加单页栏目的处理
+	 */
+	protected function _add_page_category() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		$parentid = intval ( $in ['parentid'] );
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			if (!$_category->autoCheckToken($in)) {
+				$this->message('<font class="red">请不要非法提交或者重复提交页面！</font>');
+			}
+			$in ['info'] ['type'] = 'page';
+			//添加
+			if (false !== $_category->add ( $in ['info'] )) {
+				$this->message ( '<font class="green">添加成功！</font>');
+			} else {
+				$this->message ( $_category->getError () . '添加失败！</font>' );
+			}
+		}
+		//获取设置项
+		$_m = D ( 'Page' );
+		if (!method_exists($_m,'setting')) {
+			throw_exception (  "PageModel的setting方法不存在，无法载入栏目设置项！<br />" );
+		} else {
+			$setting = $_m->setting('',$in['catid'],$in['parentid']);
+		}
+		$this->assign ( 'otherHtml', $setting );
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cat') );
+		$this->display ( 'add_page_type' );
+	}
+
+	/**
+	 * @name添加外部链接栏目
+	 */
+	protected function _add_link_category() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		//栏目已经存在的数据
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			if (!$_category->autoCheckToken($in)) {
+				$this->message('<font class="red">请不要非法提交或者重复提交页面！</font>');
+			}
+			$in ['info'] ['type'] = 'link';
+			//添加
+			if (false !== $_category->add ( $in ['info'] )) {
+				$this->message ( '<font class="green">添加成功！</font>');
+			} else {
+				$this->message ( '<font class="red">' . $_category->getError () . '添加失败！</font>' );
+			}
+		}
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cat') );
+		$this->display ( 'add_link_type' );
+	}
+
+	/**
+	 * @name 编辑栏目分类
+	 */
+	public function edit() {
+		$in = &$this->in;
+		if ($in ['ajax']) {
+			$this->_edit_ajax ();
+		}
+		if($in['classify']) {
+			$this->_edit_classify();
+			exit();
+		}
+		if(!$in['catid']) {	//编辑栏目
+			$this->message('<font class="red">参数错误，没有选择要编辑的栏目！</font>');
+		}
+		$data = &$this->category_data;
+		//栏目数据
+		$this->assign('data',$data);
+		$in['type'] = $data['type'];
+		//父栏目数据
+		$parent_data = $this->_category->find ( $data['parentid'] );
+		$this->assign ( 'parent_data', $parent_data );
+		//检查添加的类型
+		$types = array ('page', 'link', 'normal');
+		if (!$in ['type'] || ! in_array ( $in ['type'], $types )) {
+			$this->message ( '<font class="red">参数错误！</font>' );
+		}
+		$method = '_edit_' . $in ['type'] . '_category';
+		$in ['info'] ['type'] = &$in ['type'];
+		//分发到对应类型栏目的处理方法
+		if (method_exists($this,$method)) {
+			$this->$method ( '', $parent_data );
+		} else {
+			$this->message('<font class="red">参数错误，非法操作！</font>');
+		}
+	}
+
+
+	/**
+	 * @name处理添加栏目时候的ajax请求
+	 */
+	protected function _edit_ajax() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		switch ($in['ajax']) {
+			case 'delete_thumb':	//删除缩略图
+				if ($_category->delete_thumb($in ['catid'])) {
+					die('true');
+				} else {
+					die('false');
+				}
+				break;
+			case 'sort':  //排序
+				$in['catid'] && $in['catid'] = (int)substr($in['catid'],5);
+				if ($in['catid'] && !empty($in['sort'])) {
+					$data['sort'] = $in['sort'];
+					$data['catid'] = $in['catid'];
+					$_category->auto_format = false;
+					if (false !== $_category->save($data)) {
+						//更新缓存
+						die($data['sort']);
+					}
+				}
+				echo '';
+				break;
+			case 'getcategory':
+				$infos = $_category->field("`catid` AS `id`,`name`,`parentid`")->where("`cattype`='cat'")->order("`sort` ASC,`catid` ASC")->findAll();
+				import('Tree',INCLUDE_PATH);
+				$_tree = get_instance_of('Tree');
+				$_tree->init ( $infos );
+				$str = "<option value='\$id'>\$spacer\$name</option>";
+				echo '<select id="setparentid" onchange="$(\'#parentid\').val(this.value);">';
+				echo $_tree->get_tree ( 0, $str );
+				echo '</select>';
+				break;
+			case 'settopcatid':
+				if($in['catid'] && $in['topcatid']){
+					if(false !== $_category->settopcatid($in['catid'],$in['topcatid'])){
+						//写入成功
+						/*$category_data = $_category->field("`topcatid`")->where("`catid`=".$in['catid'])->find();
+						if(!empty($category_data)){
+							$data_array = split(',',$category_data['topcatid']);
+							if(is_array($data_array)){
+								$data = '';
+								foreach($data_array as $k){
+									$info_data = $_category->field("`name`")->where("`catid`=".$k)->find();
+									$data .=  $info_data['name'].'<br>';
+								}
+								die($data);
+							}
+							die('false');
+						}else{
+							die('false');
+						}*/
+						die('true');
+					}
+					die('false');
+				}
+			break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name添加、编辑分类
+	 */
+	protected function _edit_classify() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		$data = $this->category_data;
+		$modelid = $data['modelid'];
+		$parentid = $data['parentid'];
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			//if (!$_category->autoCheckToken($in)) {
+			//	$this->message('<font class="red">请不要非法提交或者重复提交页面！</font>');
+			//}
+			//更新的时候只能修改部分项数据
+			if (! ( int ) $in ['info'] ['modelid']) {
+				$this->message ( '<font class="red">没有选择模型！</font>' );
+			}
+			$in ['info'] ['type'] = 'normal';
+			if (false !== $_category->save ( $in ['info'] )) {
+				$this->message ( '<font class="green">编辑成功！</font>' );
+			} else {
+				$this->message ( '<font class="red">' . $_category->getError () . '编辑失败！</font>' );
+			}
+
+		}
+		//模块所属数据
+		$_model = D ( 'Model' );
+		$model_data = $_model->relation ( true )->find ( $modelid );
+		if (empty($model_data)) {
+			$this->message('<font class="red">该分类所属模型不存在或者被删除！</font>');
+		}
+		if($parentid){
+			$classify_data = $_category->where("`cattype`='cla' AND `catid`=".$parentid)->find();//父级分类信息
+			$parent_name = $classify_data['name'];
+		}else{
+			$parent_name = '顶级分类';
+		}
+		$this->assign ( 'data', $data );
+		$this->assign ( 'parent_name', $parent_name );
+		$this->assign ( 'model_data', $model_data );
+		$this->assign ( 'forward', U ( 'fcategory/manage?cattype=cla' ) );
+		$this->display('edit_classify');
+	}
+
+	/**
+	 * @name添加、编辑普通栏目
+	 */
+	protected function _edit_normal_category() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		$data = $this->category_data;
+		$modelid = $data['modelid'];
+		$parentid = $data['parentid'];
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			if (!$_category->autoCheckToken($in)) {
+				$this->message('<font class="red">请不要非法提交或者重复提交页面！</font>');
+			}
+			//更新的时候只能修改部分项数据
+			if (! ( int ) $in ['info'] ['modelid']) {
+				$this->message ( '<font class="red">没有选择模型！</font>' );
+			}
+			$in ['info'] ['type'] = 'normal';
+			if (false !== $_category->save ( $in ['info'] )) {
+				$this->message ( '<font class="green">编辑成功！</font>' );
+			} else {
+				$this->message ( '<font class="red">' . $_category->getError () . '编辑失败！</font>' );
+			}
+
+		}
+		//模块所属数据
+		$_model = D ( 'Model' );
+		$model_data = $_model->relation ( true )->find ( $modelid );
+		if (empty($model_data)) {
+			$this->message('<font class="red">该栏目所属模型不存在或者被删除！</font>');
+		}
+		//获取设置项
+		$mName = ucfirst ( substr($model_data ['module'] ['controller'],1) );
+		$_m = D ( $mName );
+		if (!method_exists($_m,'setting')) {
+			throw_exception (  "{$mName}Model的setting方法不存在，无法载入栏目设置项！" );
+		} else {
+			$setting = $_m->setting($data,$in['catid'],$in['parentid']);
+		}
+		$this->assign ( 'otherHtml', $setting );
+		$this->assign ( 'model_data', $model_data );
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cat') );
+		$this->display ( 'edit_normal_type' );
+	}
+
+	/**
+	 * @name增加单页栏目的处理
+	 */
+	protected function _edit_page_category() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		$data = $this->category_data;
+		$modelid = $data['modelid'];
+		$parentid = $data['parentid'];
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			if (!$_category->autoCheckToken($in)) {
+				$this->message('<font class="red">请不要非法提交或者重复提交页面！</font>');
+			}
+			$in ['info'] ['type'] = 'page';
+			if (false !== $_category->save ( $in ['info'] )) {
+				$this->message ( '<font class="green">编辑成功！</font>' );
+			} else {
+				$this->message ( '<font class="red">' . $_category->getError () . '编辑失败！</font>' );
+			}
+
+		}
+		//获取设置项
+		$_m = D ( 'Page' );
+		if (!method_exists($_m,'setting')) {
+			throw_exception (  "PageModel的setting方法不存在，无法载入栏目设置项！" );
+		} else {
+			$setting = $_m->setting($data,$in['catid'],$in['parentid']);
+		}
+		$this->assign ( 'otherHtml', $setting );
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cat') );
+		$this->display ( 'edit_page_type' );
+	}
+
+	/**
+	 * @name添加外部链接栏目
+	 */
+	protected function _edit_link_category() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		$data = $this->category_data;
+		$modelid = $data['modelid'];
+		$parentid = $data['parentid'];
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+//			if (!$_category->autoCheckToken($in)) {
+//				$this->message('请不要非法提交或者重复提交页面！');
+//			}
+			$in ['info'] ['type'] = 'link';
+			if (false !== $_category->save ( $in ['info'] )) {
+				$this->message ( '<font class="green">编辑成功！</font>' );
+			} else {
+				$this->message ( '<font class="red">' . $_category->getError () . '编辑失败！</font>' );
+			}
+		}
+		$this->assign ( 'forward', U('fcategory/manage?cattype=cat') );
+		$this->display ( 'edit_link_type' );
+	}
+
+	/**
+	 * @name栏目管理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$_category = $this->_category;
+		$data = array();
+		$where =array();
+		
+		//区分栏目和分类
+		if($in['cattype']){
+			if($in['cattype']=='cat'){
+				$where['cattype'] = $in['cattype'];
+			}elseif($in['cattype']=='cla'){
+				$where['cattype'] = $in['cattype'];
+			}else{
+				$this->message ( '<font class="red">参数错误！</font>' );
+			}
+		}else{
+			$where['cattype'] = 'cat';//默认只读取目录，不读分类
+		}
+        
+        
+        //过滤栏目表上的副表栏目 2013-1-28 fangfa  
+        $where['controller'] = array('neq','Fsidetable');
+
+		if (is_numeric($in['parentid'])) {
+			$parent_category = F('category_' . $in['parentid']);
+			$where['catid'] = array('IN', $parent_category['childrenids_self']);
+		}
+		//生成翻页
+		$data ['count'] = $_category->where($where)->count ();
+		//初始化分页类
+		$in ['p'] = intval ( $in ['p'] );
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+//		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		$Page = new Page ( $data ['count'], 100000 );  //不分页
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据、后台的数据操作都直接操作数据库
+		$_category->auto_format = true;
+//		$data ['info'] = $_category->relation( 'model' )->where($where)->field ( "`catid` AS `id`,`name`,`modelid`,`parentid`,`type`,`sort`,`url`,`islock`" )->order ( "`sort` ASC,`catid` ASC " )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		$data ['info'] = $_category->relation( 'model' )->where($where)->field ( "`catid` AS `id`,`name`,`modelid`,`parentid`,`type`,`sort`,`url`,`islock`,`topcatid`" )->order ( "`sort` ASC,`catid` ASC " )->select ();
+//		dump($data ['info']);exit;
+		//生成树
+		import ( 'Tree', INCLUDE_PATH );
+		$tree = get_instance_of ( 'Tree' );
+		if (is_array($data['info'])) {
+			foreach ($data['info'] as $k=>$v) {
+				$data['info'][$k]['typename'] = ($v['type'] == 'normal' ? '内部栏目' : ($v['type'] == 'page' ? '<font color="blue">单网页</font>' : '<font color="red">链接</font>'));
+				$data['info'][$k]['add_child'] = "<a href='" . U( 'fcategory/add?parentid='.$v['id'].'&modelid='.$v['modelid'].'&type='.$v['type']) . " '>添加子栏目</a>";
+				//$data['info'][$k]['add_child'] = ($v['type'] == 'link' ? '<font color="#CCCCCC">添加子栏目</font>'  : "<a href='" . U( 'fcategory/add?parentid='.$v['id'].'&modelid='.$v['modelid']) . " '>添加子栏目</a>");
+				$data['info'][$k]['access'] = "<a href='".$v['url'] ."' target='_blank'>访问</a>";
+				$data['info'][$k]['edit'] = "<a href='" . U ( 'fcategory/edit?catid='.$v['id'] ) . "'>编辑</a>";
+				if ($v['islock']==0) {
+					$data['info'][$k]['delete'] = "<a href=javascript:confirmurl('" . U ( 'fcategory/delete?catid='.$v['id'] ) . "','确认删除【".($v['name'])."】栏目及其子目录吗？') title='删除栏目及栏目资讯'>删除</a>";
+				} else {
+					$data['info'][$k]['delete'] = '<font color="#999">锁定</color>';
+				}
+				$data['info'][$k]['nameedit'] = "<a href='" . U ( 'fcategory/edit?catid='.$v['id'] ) . "' title='编辑该栏目'>{$v['name']}</a>";
+				$data['info'][$k]['modelname'] = $v['model']['name'];
+				$data['info'][$k]['link'] = $v['url'];
+				//如果是分类
+				if($in['cattype']=='cla'){
+					if(!$v['parentid']){
+						$topcatid = $v['topcatid'];
+						$topcatid_array = split(',',$topcatid);
+						$data['info'][$k]['typename'] = '';
+						if(!empty($topcatid_array) && !in_array('0',$topcatid_array)){
+							foreach($topcatid_array as $m){
+								$parent_cat_data = $_category->field('`name`')->where("`catid`=".$m)->find();
+								$data['info'][$k]['typename'] .= $parent_cat_data['name'].'<br />';
+							}
+							//$data['info'][$k]['typename'] .= "<a href='javascript:void(0);' onclick='javascript:getcat(".$v['id'].");') id='a_".$v['id']."'>绑定其他目录</a><span id='addcat_".$v['id']."' style='display:none;'></span><input type='button' class='dialog' value='查看' id='select_box' alt='/admin.php?m=fcategory&a=getcategory&catid=".$v['id']."&TB_iframe=true&height=300&width=500' />";
+							$data['info'][$k]['typename'] = "<input type='button' class='dialog' value='查看' id='select_box' alt='/admin.php?m=fcategory&a=getcategory&catid=".$v['id']."&TB_iframe=true&height=300&width=500' />";
+						}else{
+							//$data['info'][$k]['typename'] = "<a href='javascript:void(0);' onclick='javascript:getcat(".$v['id'].");') id='a_".$v['id']."'>未绑定目录</a><span id='addcat_".$v['id']."' style='display:none;'></span>";
+							$data['info'][$k]['typename'] = "<input type='button' class='dialog' value='查看' id='select_box' alt='/admin.php?m=fcategory&a=getcategory&catid=".$v['id']."&TB_iframe=true&height=300&width=500' />";
+						}
+					}else{
+						$data['info'][$k]['typename'] = '';
+					}
+					$data['info'][$k]['add_child'] = "<a href='" . U( 'fcategory/add?info[parentid]='.$v['id'].'&info[modelid]='.$v['modelid'].'&classify=1&step=2&dosubmit=1') . " '>添加子分类</a>";
+					$data['info'][$k]['edit'] = "<a href='" . U ( 'fcategory/edit?catid='.$v['id'].'&classify=1' ) . "'>编辑</a>";
+					if ($v['islock']==0) {
+						$data['info'][$k]['delete'] = "<a href=javascript:confirmurl('" . U ( 'fcategory/delete?catid='.$v['id'].'&classify=1' ) . "','确认删除【".($v['name'])."】分类及其子分类吗？')  title='删除栏目及栏目资讯'>删除</a>"; //urlencode
+					} else {
+						$data['info'][$k]['delete'] = '<font color="#999">锁定</color>';
+					}
+					$data['info'][$k]['nameedit'] = "<a href='" . U ( 'fcategory/edit?catid='.$v['id'].'&classify=1' ) . "' title='编辑该分类'>{$v['name']}</a>";
+				}
+			}
+		}
+		$tree->init ( $data ['info'] );
+		$str = "<tr>
+				  <td class='editable_sort pointer' id='sort_\$id'>\$sort</td>
+				  <td>\$id</td>
+				  <td>\$spacer\$nameedit</td>
+				  <td>\$link&nbsp;</td>
+				  <td>\$typename&nbsp;</td>
+				  <td>\$modelname&nbsp;</td>
+				  <td>\$access | \$add_child | \$edit | \$delete</td>
+				</tr>";
+		$html = $tree->get_tree ( 0, $str );
+		$this->assign ( 'html', $html );
+		$this->assign ( 'pages', $data ['pages'] );
+		if($in['cattype']=='cla'){
+			$this->display ( 'manage_classify' );
+			exit();
+		}
+		$this->display ( );
+	}
+
+	/**
+	 * @name删除栏目
+	 */
+	public function delete() {
+		$in = &$this->in;
+		$catid = intval($in['catid']);
+		if (!$catid) $this->message('<font class="red">参数错误！</font>', U('fcategory/manage'));
+		$_category = D ('Category');
+		if (false !== $_category->delete($catid)) {
+			if($in['classify']){//删除分类成功
+				$this->message('<font class="green">操作成功，请注意删除栏目内容管理对应的菜单！</font>', U('fcategory/manage?cattype=cla'));
+			}
+			$this->message('<font class="green">操作成功，请注意删除栏目内容管理对应的菜单！</font>', U('fcategory/manage?cattype=cat'));
+		} else {
+			if($in['classify']){//删除分类失败
+				$this->message('<font class="red">' . $_category->getError() . '删除失败！</font>', U('fcategory/manage?cattype=cla'));
+			}
+			$this->message('<font class="red">' . $_category->getError() . '删除失败！</font>', U('fcategory/manage?cattype=cat'));
+		}
+	}
+}?>
\ No newline at end of file

--- admin/Lib/Action/FcollectAction.class.php ---
@@ -0,0 +1,911 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Fcollect.class.php
+// +----------------------------------------------------------------------
+// | Date: 2011-11-02
+// +----------------------------------------------------------------------
+// | Author: mark <376727439@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 信息采集管理
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 栏目管理控制器
+ *
+ */
+class FcollectAction extends FbaseAction {
+
+	/**
+	 * 结点地址
+	 * */
+	protected $source_url;
+	
+	/**
+	 * 结点编码
+	 * */
+	protected $source_lang;
+	
+	/**
+	 * 获取地址方式
+	 * */
+	protected $source_type;
+	
+	/**
+	 * 需要替换的文字
+	 * */
+	protected $replace_before;
+	
+	/**
+	 * 替换后的文字
+	 * */
+	protected $replace_after;
+	/**
+	 * 目标站源文件
+	 * */
+	protected $html;
+	
+	/**
+	 * 目标站文章获取规则
+	 * */
+	protected $replace;
+	
+	protected $Count;
+	protected $Items;
+	protected $SourceString;
+	protected $medias = array();
+	protected $media_infos= array();
+	protected $Links;
+	protected $BaseUrl;
+	protected $Title;
+	protected $HomeUrl;
+	protected $BaseUrlPath;
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize ();
+		$in = &$this->in;
+	}
+
+	/**
+	 * @name添加栏目
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($this->ispost()) {
+			if (D("Collect")->add($in)) {
+				$this->message("添加成功！", U("fcollect/manage"));
+			}else {
+				$this->message("添加失败！", U("fcollect/manage"));
+			}
+			
+		}
+		$category = D("Category")->where("modelid=1")->order("catid")->findAll();
+		$this->assign("category",$category);
+		$this->display();
+	}
+
+	public function manage(){
+		$in = &$this->in;
+		$_collect = D("Collect");
+		
+		$data = $_collect->field("c_id,name,into_catid,create_time,update_time")->order("c_id DESC")->findAll();
+		$this->assign("data",$data);
+		$this->display();
+		
+	}
+	/**
+	 * 修改结点信息
+	 * */
+	public function edit(){
+		$in = &$this->in;
+		$_collect = D("Collect");
+		
+		if ($this->ispost()) {
+			$in['replace'] = var_export ( $in ['replace'], true );
+			if (false === $_collect->where("c_id=".$in['c_id'])->save($in)) {
+				$this->message("内容更新失败！",$this->forward);
+			}else {
+				$this->message("内容更新成功！",$this->forward);
+			}
+		}
+		$data = $_collect->where("c_id=".$in['c_id'])->find();
+		$category = D("Category")->where("modelid=1")->order("catid")->findAll();
+		$this->assign("category",$category);
+		$this->assign("data",$data);
+		$this->display();
+	}
+	/**
+	 * 删除结点及结点下缓存文章
+	 * */
+	public function del(){
+		$in = &$this->in;
+		if(empty($in['c_id'])){
+			$this->message("参数错误");
+		}
+		$_collect = D("Collect");
+		$_page    = D("CollectPage");
+		$bool = $_collect->where("c_id=".$in['c_id'])->delete();
+		if ($bool) {
+			$_page->where("c_id=".$in['c_id'])->delete();
+			$this->message("删除结点及节点下临时数据成功！");
+		}else {
+			$this->message("删除结点失败！");
+		}
+	}
+	/**
+	 * 采集结点文章
+	 * 如果临时数据内没有采集信息，才采集
+	 * */
+	public function collect(){
+		$in = &$this->in;
+		$_collect_page = D("CollectPage");
+		$count = $_collect_page->where("c_id=".$in['c_id'])->count();
+		if ($count > 0){
+			redirect(U("fcollect/collect_page?c_id=".$in['c_id']));exit();
+		}
+		$this->assign("c_id",$in['c_id']);
+		$this->display();
+	}
+	
+	/**
+	 * 开始采集结点
+	 * */
+	public function starturl(){
+		$in = &$this->in;
+		header( 'Content-Type:   text/html;   charset=utf-8 ');
+		echo "开始采集......<br/>";
+		ob_flush();
+		flush();
+		$_collect = D("Collect");
+		$collect = $_collect->where("c_id=".$in['c_id'])->find();
+	
+		$this->source_type = $collect['source_type'];
+		$this->source_url = $collect['source_url'];
+		$this->HomeUrl = $collect['profiex_url'];
+		$this->source_lang = $collect['source_lang'];
+		$this->replace_after = $collect['replace_after'];
+		$this->replace_before = $collect['replace_before'];
+		$this->replace = $collect['replace'];
+		
+		//分析url
+		$this->site_url();
+		foreach ($this->source_url as $k => $t){
+			$this->html = "";
+			$this->BaseUrlPath = $t;
+		
+			if ($s = fopen( $t ,"r" )) { // base64_decode
+			    $this->html = stream_get_contents($s, -1);
+				fclose( $s );
+			}else {
+				continue;
+			}
+			
+			//对原文件编码和替换文字的处理
+			$this->html_deal($this->html);
+			
+			if( trim($collect['html_start']) !='' && trim($collect['html_end']) != '' ) {
+	            $area = $collect['html_start'].'[var:区域]'.$collect['html_end'];
+	            $this->html = $this->html_area($this->html, '[var:区域]', $area);
+	        }
+	        //获取区域内
+	        $this->area_url();//$this->Links;
+			
+		}
+		
+		if(empty($this->Links)){
+			echo "没有找到可用的链接，请检查设置是否正确<br/>";
+			echo "<a href=\"#\" onclick=\"window.parent.location = '".U("fcollect/manage")."'\">返回列表</a>";
+			exit();
+		}
+		$collect['have_is'] = trim($collect['have_is']);
+		$collect['have_not'] = trim($collect['have_not']);
+		//开始采集内容
+		foreach ( $this->Links as $r => $link){
+			//筛选包含指定字符串的链接
+			if ($collect['have_is']!= '' && !strstr($link['link'],$collect['have_is'])){
+				continue;
+			}
+			if ($collect['have_not'] != '' && $collect['have_is'] != $collect['have_not'] && strstr($link['link'],$collect['have_not'])){
+				continue;
+			}
+			$this->get_page($link);
+		}
+	   	
+		$collect = $_collect->where("c_id=".$in['c_id'])->save(array("update_time"=>time()));
+		
+		echo "<a href=\"#\" onclick=\"window.parent.location = '".U("fcollect/collect_page?c_id=".$in['c_id'])."'\">查看采集结果</a>";
+		
+	}
+	
+	/**
+	 * 处理结点源文件，替换编号和替换文字
+	 * */
+	private function html_deal(&$input){
+		//替换编码
+		if ($this->source_lang != 'utf-8') {
+			$input = iconv($this->source_lang,"utf-8",$input);
+		}
+		
+		//替换文字
+		if (empty($this->replace_before) || empty($this->replace_after)) return false;
+		$this->replace_before = explode(",",$this->replace_before);
+		$this->replace_after = explode(",",$this->replace_after);
+		
+		foreach ($this->replace_before as $k => $t){
+			if (empty($t)) continue;
+			//处理替换前词组为多个，替换后的词组为一个的情况。
+			if (isset($this->replace_after[$k])){
+				$after = $this->replace_after[$k];
+			}else {
+				$after = $this->replace_after[0];
+			}
+			$input = str_replace($t,$after,$input);
+		}
+	}
+	/**
+	 * 获取结点链接
+	 */
+	private function site_url(){
+		if ($this->source_type == "hand") {//手动设置url
+			$this->source_url = explode("\r\n", $this->source_url);
+		}
+		
+		foreach ($this->source_url as $k => $t){
+			if (empty($t)) {
+				unset($this->source_url[$k]);
+			}
+		}
+	}
+	
+	/**
+	 * 传入链接源文件、开始截取前端HTML和结尾HTMl。
+	 * 返回中间截取部分。
+	 * 
+	 * */
+	private function html_area($html, $sptag, &$areaRule)
+    {
+        //用正则表达式的模式匹配
+       /* if($this->noteInfos['matchtype']=='regex')
+        {
+            $areaRule = str_replace("/", "\\/", $areaRule);
+            $areaRules = explode($sptag, $areaRule);
+            $arr = array();
+            if($html==''||$areaRules[0]=='')
+            {
+                return '';
+            }
+            preg_match('#'.$areaRules[0]."(.*)".$areaRules[1]."#isU", $html, $arr);
+            return empty($arr[1]) ? '' : trim($arr[1]);
+        }
+
+        //用字符串模式匹配
+        else
+        {*/
+            $areaRules = explode($sptag,$areaRule);
+            
+            if($html=='' || $areaRules[0]=='')
+            {
+                return '';
+            }
+            $posstart = @strpos($html,$areaRules[0]);
+            if($posstart===FALSE)
+            {
+                return '';
+            }
+            $posstart = $posstart + strlen($areaRules[0]);
+            $posend = @strpos($html,$areaRules[1],$posstart);
+            if($posend > $posstart && $posend!==FALSE)
+            {
+                //return substr($html,$posstart+strlen($areaRules[0]),$posend-$posstart-strlen($areaRules[0]));
+                return substr($html,$posstart,$posend-$posstart);
+            }
+            else
+            {
+                return '';
+            }
+        //}
+    }
+    
+   
+   /**
+    * 获取区域内的链接和标题
+    * */
+   private function area_url()
+    {
+        $c = '';
+        $i = 0;
+        $startPos = 0;
+        $endPos = 0;
+        $wt = 0;
+        $ht = 0;
+        $scriptdd = 0;
+        $attStr = '';
+        $tmpValue = '';
+        $tmpValue2 = '';
+        $tagName = '';
+        $hashead = 0;
+        $slen = strlen($this->html);
+        if($this->GetLinkType=='link' || $this->GetLinkType=='')
+        {
+            $needTags = array('a');
+        }
+        if($this->GetLinkType=='media')
+        {
+            $needTags = array('img','embed','a');
+            $this->IsHead = true;
+        }
+        $tagbreaks = array(' ','<','>',"\r","\n","\t");
+        for(;isset($this->html[$i]);$i++)
+        {
+            if($this->html[$i]=='<')
+            {
+                $tagName = '';
+                $j = 0;
+                for($i=$i+1; isset($this->html[$i]); $i++)
+                {
+                    if($j>10)
+                    {
+                        break;
+                    }
+                    $j++;
+                    if( in_array($this->html[$i],$tagbreaks) )
+                    {
+                        break;
+                    }
+                    else
+                    {
+                        $tagName .= $this->html[$i];
+                    }
+                }
+                $tagName = strtolower($tagName);
+
+                //标记为注解
+                if($tagName=='!--')
+                {
+                    $endPos = strpos($this->html,'-->',$i);
+                    if($endPos !== false)
+                    {
+                        $i=$endPos+3;
+                    }
+                    continue;
+                }
+
+                //标记在指定集合内
+                else if( in_array($tagName,$needTags) )
+                {
+                    $startPos = $i;
+                    $endPos = strpos($this->html,'>',$i+1);
+                    if($endPos===false)
+                    {
+                        break;
+                    }
+                    $attStr = substr($this->html,$i+1,$endPos-$startPos-1);
+                    $this->set_source($attStr);
+                    if($tagName=='img')
+                    {
+                        $this->insert_media($this->get_att('src'),'img');
+                    }
+                    else if($tagName=='embed'){
+                        $rurl = $this->insert_media($this->get_att('src'),'embed');
+                        if($rurl != '')
+                        {
+                            $this->media_infos[$rurl][0] = $this->get_att('width');
+                            $this->media_infos[$rurl][1] = $this->get_att('height');
+                        }
+                    }
+                    else if($tagName=='a')
+                    { 
+                        $this->insert_link($this->fill_url($this->get_att('href')),$this->get_inner_text($i,'a'));
+                        
+                    }
+                }
+                else
+                {
+                    continue;
+                }
+            }//End if char
+        }//End for
+        if($this->Title == '')
+        {
+            $this->Title = $this->BaseUrlPath;
+        }
+    }
+    
+    //设置属性解析器源字符串
+    private function set_source($str = ''){
+        $this->Count = -1;
+        $this->Items = '';
+        $strLen = 0;
+        $this->SourceString = trim(preg_replace("/[ \t\r\n]{1,}/"," ",$str));
+        $strLen = strlen($this->SourceString);
+        $this->SourceString .= " "; //增加一个空格结尾,以方便处理没有属性的标记
+        if($strLen>0&&$strLen<=1024){
+            $this->PrivateAttParse();
+        }
+    }
+    
+    //解析属性(仅给SetSource调用)
+    private function PrivateAttParse(){
+        $d = '';
+        $tmpatt = '';
+        $tmpvalue = '';
+        $startdd = -1;
+        $ddtag = '';
+        $strLen = strlen($this->SourceString);
+        $j = 0;
+
+        //这里是获得标记的名称
+        if($this->IsTagName){
+            //如果属性是注解，不再解析里面的内容，直接返回
+            if(isset($this->SourceString[2])){
+                if($this->SourceString[0].$this->SourceString[1].$this->SourceString[2]=='!--'){
+                    $this->Items['tagname'] = '!--';
+                    return ;
+                }
+            }
+            for($i=0;$i<$strLen;$i++)
+            {
+                $d = $this->SourceString[$i];
+                $j++;
+                if(preg_match("/[ '\"\r\n\t]/i", $d))
+                {
+                    $this->Count++;
+                    $this->Items["tagname"]=strtolower(trim($tmpvalue));
+                    $tmpvalue = ''; break;
+                }
+                else
+                {
+                    $tmpvalue .= $d;
+                }
+            }
+            if($j>0)
+            {
+                $j = $j-1;
+            }
+        }
+
+        //遍历源字符串，获得各属性
+        for($i=$j;$i<$strLen;$i++)
+        {
+            $d = $this->SourceString[$i];
+            //获得属性的键
+            if($startdd==-1)
+            {
+                if($d!='=')
+                {
+                    $tmpatt .= $d;
+                }
+                else
+                {
+                    $tmpatt = strtolower(trim($tmpatt));
+                    $startdd=0;
+                }
+            }
+
+            //检测属性值是用什么包围的，允许使用 '' '' 或空白
+            else if($startdd==0)
+            {
+                switch($d)
+                {
+                    case ' ':
+                        continue;
+                        break;
+                    case '\'':
+                        $ddtag='\'';
+                        $startdd=1;
+                        break;
+                    case '"':
+                        $ddtag='"';
+                        $startdd=1;
+                        break;
+                    default:
+                        $tmpvalue.=$d;
+                        $ddtag=' ';
+                        $startdd=1;
+                        break;
+                }
+            }
+
+            //获得属性的值
+            else if($startdd==1)
+            {
+                if($d==$ddtag)
+                {
+                    $this->Count++;
+                    if($this->CharToLow)
+                    {
+                        $this->Items[$tmpatt] = strtolower(trim($tmpvalue));
+                    }
+                    else
+                    {
+                        $this->Items[$tmpatt] = trim($tmpvalue);
+                    }
+                    $tmpatt = '';
+                    $tmpvalue = '';
+                    $startdd=-1;
+                }
+                else
+                {
+                    $tmpvalue.=$d;
+                }
+            }
+        }//End for
+
+        //处理没有值的属性(必须放在结尾才有效)如："input type=radio name=t1 value=aaa checked"
+        if(empty($tmpatt) != '')
+        {
+            $this->Items[$tmpatt] = '';
+        }
+    } 
+    
+    private function get_att($str)
+    {
+        if($str == '')
+        {
+            return '';
+        }
+        $str = strtolower($str);
+        if(isset($this->Items[$str]))
+        {
+            return $this->Items[$str];
+        }
+        else
+        {
+            return '';
+        }
+    }
+    private function insert_media($url, $mtype)
+    {
+        if( preg_match("/^(javascript:|#|'|\")/", $url) )
+        {
+            return '';
+        }
+        if($url == '')
+        {
+            return '';
+        }
+        $this->medias[$url]=$mtype;
+        return $url;
+    }
+    
+    private function get_inner_text(&$pos,$tagname)
+    {
+        $startPos=0;
+        $endPos=0;
+        $textLen=0;
+        $str = '';
+        $startPos = strpos($this->html,'>',$pos);
+
+        if($tagname=='title')
+        {
+            $endPos = strpos($this->html,'<',$startPos);
+        }
+        else
+        {
+            $endPos1 = strpos($this->html,'</a',$startPos);
+            $endPos2 = strpos($this->html,'</A',$startPos);
+            if($endPos1===false)
+            {
+                $endPos = $endPos2;
+            }
+            else if($endPos2===false)
+            {
+                $endPos = $endPos1;
+            }
+            else
+            {
+                $endPos = ($endPos1 < $endPos2 ? $endPos1 : $endPos2 );
+            }
+        }
+        if($endPos > $startPos)
+        {
+            $textLen = $endPos-$startPos;
+            $str = substr($this->html,$startPos+1,$textLen-1);
+        }
+        $pos = $startPos + $textLen + strlen("</".$tagname) + 1;
+        if($tagname=='title')
+        {
+            return trim($str);
+        }
+        else
+        {
+            preg_match_all("/<img(.*)src=[\"']{0,1}(.*)[\"']{0,1}[> \r\n\t]{1,}/isU",$str,$imgs);
+            if(isset($imgs[2][0]))
+            {
+                $txt = trim(Html2Text($str));
+                $imgs[2][0] = preg_replace("/[\"']/",'',$imgs[2][0]);
+                return "img:".$this->FillUrl($imgs[2][0]).':txt:'.$txt;
+            }
+            else
+            {
+            	$str = strip_tags($str);
+                //$str = preg_replace('/<\/(.*)$/i', '', $str);
+                //$str = trim(preg_replace('/^(.*)>/i','',$str));
+                return $str;
+            }
+        }
+    }
+    
+    private function fill_url($surl)
+    {
+        $i = $pathStep = 0;
+        $dstr = $pstr = $okurl = '';
+
+        $surl = trim($surl);
+        if($surl == '')
+        {
+            return '';
+        }
+        $pos = strpos($surl,'#');
+        if($pos>0)
+        {
+            $surl = substr($surl,0,$pos);
+        }
+        if($surl[0]=='/')
+        {
+            $okurl = $this->HomeUrl."/".$surl;
+        }
+        else if($surl[0]=='.')
+        {
+            if(!isset($surl[2]))
+            {
+                return '';
+            }
+            else if($surl[0]=='/')
+            {
+                $okurl = $this->BaseUrlPath."/".substr($surl,2,strlen($surl)-2);
+            }
+            else
+            {
+                $urls = explode('/',$surl);
+                foreach($urls as $u)
+                {
+                    if($u=='..')
+                    {
+                        $pathStep++;
+                    }
+                    else if($i<count($urls)-1)
+                    {
+                        $dstr .= $urls[$i].'/';
+                    }
+                    else
+                    {
+                        $dstr .= $urls[$i];
+                    }
+                    $i++;
+                }
+                $urls = explode('/',$this->BaseUrlPath);
+                if(count($urls) <= $pathStep)
+                {
+                    return '';
+                }
+                else
+                {
+                    $pstr = '';
+                    for($i=0;$i<count($urls)-$pathStep;$i++){ $pstr .= $urls[$i].'/'; }
+                    $okurl = $pstr.$dstr;
+                }
+            }
+        }
+        else
+        {
+            if( strlen($surl) < 7 )
+            {
+                $okurl = $this->BaseUrlPath.'/'.$surl;
+            }
+            else if( strtolower(substr($surl,0,7))=='http://' )
+            {
+                $okurl = preg_replace('/^http:\/\//i', '', $surl);
+            }
+            else
+            {
+                $okurl = $this->BaseUrlPath.'/'.$surl;
+            }
+        }
+        $okurl = str_replace("http://","",$okurl);
+        $okurl = preg_replace('/\/{1,}/i', '/', $okurl);
+        return 'http://'.$okurl;
+    }
+    
+    private function insert_link($url, $atitle)
+    {
+        if( preg_match("/^(javascript:|#|'|\")/", $url) )
+        {
+            return '';
+        }
+        if($url == '')
+        {
+            return '';
+        }
+        if( preg_match('/^img:/', $atitle) )
+        {
+            list($aimg, $atitle) = explode(':txt:', $atitle);
+            if(!isset($this->Links[$url]))
+            {
+                if($atitle != '')
+                {
+                    $this->Links[$url]['title'] = cn_substr($atitle,50);
+                }
+                else
+                {
+                    $this->Links[$url]['title'] = preg_replace('/img:/', '', $aimg);
+                }
+                $this->Links[$url]['link']  = $url;
+            }
+            $this->Links[$url]['image'] = preg_replace('/img:/', '', $aimg);
+            $this->insert_media($this->Links[$url]['image'], 'img');
+        }
+        else
+        {
+            if(!isset($this->Links[$url]))
+            {
+                $this->Links[$url]['image'] = '';
+                $this->Links[$url]['title'] = $atitle;
+                $this->Links[$url]['link']  = $url;
+            }
+            else
+            {
+                if(strlen($this->Links[$url]['title']) < strlen($atitle)) $this->Links[$url]['title'] = $atitle;
+            }
+        }
+        return $url;
+    }
+    private function get_page($link){
+    	$in = &$this->in;
+		$data = array();
+    	
+    	if ($s = fopen( $link['link'] ,"r" )) { // base64_decode
+		    $page = stream_get_contents($s, -1);
+			fclose( $s );
+		}else {
+			return false;
+		}
+		$this->html_deal($page);
+		foreach ($this->replace as $k => $t){
+			//处理需要匹配的字段。
+			if (!strstr( $k,"replace" )) { continue; }
+			if ($k == "replace_before" || $k == "replace_after") {unset($this->replace[$k]);}
+			if (empty($t)) {continue;}
+        	$data[$k] = $this->html_area($page,'[!--content--]',$t);
+        	
+        	//得到需要过滤的字段名称
+        	$filter = "";
+        	$filter = str_replace("replace", "filter",  $k);
+        	if(empty($this->replace[$filter])){ continue;}
+        	preg_match_all("/{fangfa}([^\"]+?){\/fangfa}/",$this->replace[$filter],$filter_preg);
+
+        	foreach($filter_preg[1] as $preg){
+				 $data[$k] = preg_replace("#".$preg."#isU", "", $data[$k]);
+			}
+			$data[$k] = trim( $data[$k] );
+		}
+		if (!empty($data['replace_time'])) {
+			$data['create_time'] = (int) strtotime($data['replace_time']);
+		}
+		
+		$data['title'] = $data['replace_title'];
+		$data['content'] = $data['replace_content'];
+		$data['source'] = $data['replace_source'];
+		$data['thumb'] = $link['image'];
+		$data['link'] = $link['link'];
+		$data['c_id'] = $in['c_id'];
+		echo "采集网址：".$link['link']." 完成<br/>";
+		ob_flush();
+		flush();
+		$_collect_page = D("CollectPage");
+		$_collect_page->add($data);
+		
+		unset($data);
+    }
+    /**
+     * 显示结点采集到的信息列表
+     * */
+	public function collect_page(){
+		$in = &$this->in;
+		$_collect_page = D("CollectPage");
+		import("ORG.Util.Page");
+		$data['count'] = $_collect_page->where("c_id=".$in['c_id'])->count();
+		$Page = new Page($data['count'],15);
+		$data['pages'] = $Page->show();
+		$data['info'] = $_collect_page->where("c_id=".$in['c_id'])->order("pid asc")->limit($Page->firstRow.",".$Page->listRows)->select();
+		$this->assign("data",$data);
+		$this->assign("c_id",$in['c_id']);
+		$this->display();
+	}
+	
+	/**
+	 * 查看临时数据详情
+	 * */
+	public function show(){
+		$in = &$this->in;
+		$_collect_page = D("CollectPage");
+		if ($this->ispost()) {
+			if(!empty($in['info']['create_time'])){
+				$in['info']['create_time'] = strtotime($in['info']['create_time']);
+			}
+			$bool = $_collect_page->where("pid=" . $in['pid'])->save($in['info']);
+			if ($bool == true) {
+				$this->message("保存成功！", U("fcollect/collect_page?c_id=".$in['c_id']));
+			}else {
+				$this->message("保存失败！", U("fcollect/collect_page?c_id=".$in['c_id']));
+			}
+		}
+		$data = $_collect_page->where("pid=".$in['pid'])->find();
+		if (empty($data)) {
+			$this->message("没有找到对应是数据");
+		}
+		$this->assign("data",$data);
+		$this->display();
+	}
+	/**
+	 * 删除临时数据库
+	 * */
+	public function del_page(){
+		$in = &$this->in;
+		$_collect_page = D("CollectPage");
+		$bool = $_collect_page->where("pid=".$in['pid'])->delete();
+		if($bool) echo "1";
+		else  echo "2";
+		exit();
+	}
+	public function del_page_all(){
+		$in = &$this->in;
+		$_collect_page = D("CollectPage");
+		if (empty($in['info']['pid'])) {
+			$this->message("参数错误！",U("fcollect/collect_page?c_id=".$in['c_id']));
+		}
+		$pid = implode(",",$in['info']['pid']);
+		
+		$bool = $_collect_page->where("pid in ($pid)")->delete();
+		if($bool) 
+			$this->message("操作成功！",U("fcollect/collect_page?c_id=".$in['c_id']));
+		else  
+			$this->message("操作失败！",U("fcollect/collect_page?c_id=".$in['c_id']));
+	}
+	/**
+	 * 导入临时数据
+	 * */
+	public function explode(){
+		$in = &$this->in;
+		if (empty($in['info']['pid']) || empty($in['c_id'])) {
+			$this->message("参数错误！");
+		}
+		$_collect_page = D("CollectPage");
+		$_content = D("Content");
+		$_collect = D("Collect");
+		
+		$pid = implode(",", $in['info']['pid']);
+		$data = $_collect_page->where("pid in ($pid)")->findAll();
+		
+		$catid = $_collect->where("c_id=".$in['c_id'])->getField("into_catid");
+		
+		$username = $_SESSION['userdata']['username'];
+		$user_id = $_SESSION['userdata']['user_id'];
+		
+		foreach ($data as $k=>$t){
+			if($t['status'] == 1){
+					continue;
+			}
+			unset($t['cid']);
+			$t['catid'] = $catid;
+			$t['username'] = $username;
+			$t['user_id'] = $user_id;
+			$t['update_time'] = time();
+			
+			$cid = $_content->add($t);
+			$_collect_page->where("pid=".$t['pid'])->save(array("status"=>1));
+			
+		}
+		$this->message("导入数据成功！");
+		
+	}
+	
+}
+	
+	
+?>
\ No newline at end of file

--- admin/Lib/Action/FcommentAction.class.php ---
@@ -0,0 +1,347 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Ffriendlink.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-07-26
+// +----------------------------------------------------------------------
+// | Author: fangfa <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 模块 评论
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 模块评论
+ *
+ */
+class FcommentAction extends FbaseAction {
+	/**
+	 * 栏目表模型对象
+	 * @var unknown_type
+	 */
+	protected $_category = '';
+
+	/**
+	 * 栏目数据
+	 * @var unknown_type
+	 */
+	protected $category_data = '';
+	
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+
+		$in = &$this->in;
+		$in['_tablename'] = 'comment';
+		if ($in['id']) {
+			$comment = M('Comment')->find($in['id']);
+			if ($comment) $in['catid'] = $comment['catid'];
+		}
+		//if ($in['catid']) {
+			$this->_category = D ('Category');
+			$this->category_data = $this->_category->find((int)$in['catid']);
+			$this->assign('cat',$this->category_data);
+			$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+		//} else $this->message('<font class="red">没有选择要操作的栏目</font>');
+		
+		$this->assign('in', $this->in);
+		$this->assign('status', array('0' => '待审', '1' => '审核'));
+		$this->assign('reply', array('0' => '未回复', '1' => '已回复'));
+		$this->assign('q_fields', array('title' => '标题', 'username' => '留言者', 'replyer' => '回复者'));
+	}
+	
+	/**
+	 * @name检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') return true;
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+	
+	/**
+	 * @name列表
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		$where = array();
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`=' . $in['status'];
+		}
+		if (isset($in['reply']) && $in['reply'] != 'all') {
+			$where[] = ($in['reply'] == 0 ? ' `reply` IS NULL' : ' `reply` IS NOT NULL');
+		}
+		if(!empty($in['newsid']))
+		{
+			$where[] = ' `newsid`=' . $in['newsid'];
+			$this->assign('newsid',$in['newsid']);
+			$this->assign('flag',$in['flag']);
+		}
+		if (!empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+		
+		if ($in['dosubmit']) {
+			$Comment = M('Comment');
+			if(!empty($in['info']['reply']))
+			{
+				if($in['replyed'] == 0)
+				{
+					$_count = M ('ContentCount');
+					$_contentCount = $_count->field("`{$in['type']}`")->where("`cid`='{$in['newsid']}'")->find();			
+					if (!$_contentCount) {
+						$_count->add(array('cid'=>$in['newsid']));						
+					}
+					$_count->execute("update __TABLE__ set `comments_checked`=`comments_checked`+1 where `cid`='{$in['newsid']}' limit 1");
+				}
+
+				$data['replytime'] = time();
+				$data['replyer'] = $_SESSION['userdata']['username'];
+				//过滤敏感词
+			$cat = D ( 'Category' );
+			$cat_data = $cat->field('setting')->where(" `catid`=".$in['catid']."")->find();
+			if(isset($cat_data['setting']['isfilter']) && $cat_data['setting']['isfilter']){//如果开启过滤
+				$in['info'] = $this->filter();
+			}
+				$data['reply'] =  $in['info']['reply'];
+			}else
+			{
+				$this->message(L("回复不能为空！"));	
+			}
+			$data['status'] = $in['info']['status'];
+			$Comment->where('id=' . $in['info']['id'])->save($data);
+			if($in['flag'] == 111)
+			redirect($this->forward."&newsid=".$in['newsid']."&flag=111");
+			else
+			redirect($this->forward);
+		} else {
+			$this->assign('catid',$in['catid']);
+			$this->assign('flag',$in['flag']);
+			
+			if ($this->ispost()) {
+				if (! $in ['_tablename'])
+					$this->message ( '没有指定操作表！' );
+				$name = $in ['_tablename']; //数据表名
+				//		die($this->getInTableName($name));
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+				$_keyid = $_m->getPk ();
+				//过滤敏感词
+				$in['info'] = $this->filter();
+				//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+				$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+				if ( $_m->create ( $in ['info'] ) ) {
+					if (! empty ( $in ['info'] [$_keyid] )) { //更新
+						$keyid = $_m->save ();
+					} else { //添加
+						$keyid = $_m->add ();
+						if ($keyid) $in['info'][$_keyid] = $keyid;
+					}
+					if (false !== $keyid) { //添加数据
+						if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+							$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+						}
+						//返回处理信息
+						if ($in ['ajax'])
+							$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+						else if($in ['_tablename'] == 'menu')
+							$this->message ( '记录保存成功！', '', 0, false);
+						else
+							$this->message ( '记录保存成功！' );
+					} else {
+						//返回处理信息
+						if ($in ['ajax'])
+							$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+						else
+							$this->message ( $_m->getError () . '<br />数据保存失败！' );
+					}
+				} else {
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+					else
+						$this->message ( $_m->getError ().'记录保存失败！' );
+				}
+			}
+			//获取数据
+			if (!empty($in['_tablename'])) {
+				$name = $in ['_tablename']; //数据表名
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+				$_keyid = $_m->getPk ();
+				if ( $in [$_keyid] ) { //编辑
+					$keyid = $in [$_keyid] ;
+					$data = $_m->find ( $keyid );
+					if (isset($data['parentid']) && $data['parentid']>0) {
+						$this->assign('parent_data',$_m->find($data['parentid']));
+					}
+					$this->assign ( 'data', $data );
+				}
+			}
+			if (!empty($in['tpl'])) {
+				$this->display ( $in ['tpl'] );
+			} else {
+				$this->display();
+			}
+		}
+	}
+	
+	/**
+	 * @name审核
+	 */
+	public function check()
+	{
+		
+		$in = &$this->in;
+		if ($in['id'] && isset($in['status'])) {
+			$data['id'] = $in['id'];
+			$data['status'] = $in['status'];
+			$_model = M('Comment');
+			$_model->save($data);
+		}
+		redirect($this->forward);
+	}
+	
+	/**
+	* @name过滤敏感词
+	*/
+	public function filter(){
+		$in = &$this->in;
+		$filterwords = explode('|',C ('FILTER_WORD'));//敏感词组
+		foreach($filterwords as $k => $v){
+			$filterwords[$k] = '/'.$v.'/';
+		}
+		$in['info']['reply'] = preg_replace($filterwords,'***',$in['info']['reply']);
+		$in['info']['comment'] = preg_replace($filterwords,'***',$in['info']['comment']);
+		return $in['info'];
+	}
+	
+	/**
+	 * @name删除留言
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+		if(empty($this->in['info']['id']))		
+		$this->in['id']=$in['id'];
+		else
+		$this->in['id'] = $this->in['info']['id'];
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		//		die($this->getInTableName($name));
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+}
\ No newline at end of file

--- admin/Lib/Action/FcontentAction.class.php ---
@@ -0,0 +1,454 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: ContentAction.class.php
+// +----------------------------------------------------------------------
+// | Date: Wed Apr 21 15:26:46 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 内容管理模块，静态模块
+// +----------------------------------------------------------------------
+
+//文档状态： 0=待审,9=终审,-1=回收站
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 内容管理模块
+ *
+ */
+class FcontentAction extends FbaseAction {
+
+	/**
+	 * 栏目表模型对象
+	 * @var object
+	 */
+	protected $_category = '';
+
+	/**
+	 * 栏目数据
+	 * @var array
+	 */
+	protected $category_data = '';
+
+
+	/**
+	 * @name内容管理初始化，主要用户检查操作权限
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		if (strtolower(MODULE_NAME) == 'fcontent') {
+			if ($in['catid']) { //检查栏目操作权限
+				$this->_category = D ('Category');
+				$this->category_data = $this->_category->find((int)$in['catid']);
+				$this->assign('cat',$this->category_data);
+				$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+			} else {
+				$this->message('<font class="red">没有选择要操作的栏目~！</font>');
+			}
+		}
+	}
+
+	/**
+	 * 检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') {
+			return true;
+		}
+//		dump($userData);dump($permissions);
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+
+	/**
+	 * @name内容管理、列表
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_content = D ( 'Content' );
+		//表前缀
+		$db_pre = C('DB_PREFIX');
+        //是否启用评论
+        $this->assign('is_comment',C('IS_COMMENT'));
+        //是否启用剪裁功能
+        $this->assign('is_cut',C('IS_CUT'));
+        
+		//查询条件
+		$where = array ();
+		$where["{$db_pre}content.catid"] = $in['catid'];
+		if (isset($in['status'])) {
+			$where["{$db_pre}content.status"] = $in['status'];
+			$this->assign('status',$in['status']);
+		} else {  //显示所有非回收站里的内容
+			$where["{$db_pre}content.status"] = array('gt', '-1'); 
+		}
+		if ($in['q'] && $in['q'] != '请输入关键字') {
+			$in['q'] = urldecode($in['q']);
+			$where["{$db_pre}content.{$in['field']}"] = array('like',"%{$in['q']}%");
+		}
+		//排序条件
+		$order = " {$db_pre}content.`sort` ASC,{$db_pre}content.`cid` DESC ";
+		//join  count表
+		$join = "{$db_pre}content_count ON ";
+		$join .= "{$db_pre}content.cid={$db_pre}content_count.cid ";
+		//field
+		$field = "{$db_pre}content.*";
+		$field .= ",{$db_pre}content_count.`hits`,{$db_pre}content_count.`comments`,{$db_pre}content_count.`comments_checked`";
+		//统计模型数量
+		$data ['count'] = $_content->join($join)->where ( $where )->count ();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] = $_content->field($field)->join($join)->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		if (is_array($data ['info'])) {
+			foreach ($data ['info'] as $k=>$v) {
+				$data['info'][$k]['url'] = $_content->getUrl($v);
+			}
+		}
+		//同类型分类下拉列表json
+		$categorys = $this->_category->getSameCategorys($this->category_data['catid']);
+		$arr = array();
+		if (is_array($categorys)) {
+			foreach ($categorys as $k=>$v) {
+				$arr[$v['catid']] = $v['name'];
+				$categorys[$k]['id'] = $v['catid'];
+			}
+			$this->assign('cat_json',json_encode($arr));
+			//树形栏目下拉框
+			import('Tree',INCLUDE_PATH);
+			$_tree = get_instance_of('Tree');
+			$_tree->init ( $categorys );
+			$str = "<option value='\$catid'>\$spacer\$name</option>";
+			$this->assign('category_tree',$_tree->get_tree ( 0, $str ));
+		}
+		$this->assign ( 'data', $data );
+		$this->assign('in', $in);
+		$this->display();
+	}
+
+	/**
+	 * @name录入要显示的内容
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_add();
+		}
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$_content = D ('Content');
+			//令牌验证
+			if (!$_content->autoCheckToken($in)) $this->message('<font class="red">请不要非法提交或者重复刷新页面！</font>');
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			$return = $_content->add($in['info']);
+			if (false !== $return) {				  
+				$this->message('<font class="green">内容保存成功！</font>',U('fcontent/manage?catid='.$in['catid']),3,false);
+				//应用扩展，实现ping(ping服务),clear_html(更新静态页面),由于tags参数不能传数组，请将数组参数格式化
+				tag('after_content_add', serialize($_content->get($return,'all')));
+				exit;
+			} else {
+				$this->message('<font class="red">' . $_content->getError() . '内容保存失败！</font>');
+			}
+		}
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,array("catid"=>$in['catid'],"classify_select"=>$in['catid']));
+		$this->assign('form_data',$form);
+		$this->assign('catid',$in['catid']);
+		$this->display();
+	}
+
+	/**
+	 * @name添加内容时候的ajax请求
+	 */
+	protected function _ajax_add() {
+		$in = &$this->in;
+		$cat_data = $this->category_data;
+		switch ($in['ajax']) {
+			case 'check_title':
+				$_content = D ('Content');
+				if ($_content->titleExist($in['c_title'])) {
+					die('此标题已经被使用过！');
+				} else {
+					die('此标题还没有被使用过！');
+				}
+				break;
+			default:
+				break;
+		}
+	}
+
+	/**
+	 * @name更新内容
+	 */
+	public function edit() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_ajax_edit();
+		if ($in['do']) $this->_do_edit();
+		if (!$in['cid']) $this->message('<font class="red">参数错误，无法继续该操作！</font>');
+		$_content = D ('Content');
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$in['info']['cid'] = &$in['cid'];
+			//令牌验证
+//			if (!$_content->autoCheckToken($in)) $this->message('请不要非法提交或者重复刷新页面！');,由于tags参数不能传数组，请将数组参数格式化
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+            $in['info']['images']   =   is_array($in['info']['images'])?$in['info']['images']:'';
+			if (false !== $_content->update($in['info'],$in['info']['cid'])) {				
+				$this->message('<font class="green">内容更新成功！</font>',$in['forward']);
+				//应用扩展，实现ping(ping服务),clear_html(更新静态页面)
+				tag('after_content_add', serialize($_content->get($in['cid'], 'all')));
+			} else {
+				$this->message('<font class="red">' . $_content->getError() . '内容更新失败！</font>',$in['forward']);
+			}
+		}
+		//获取信息详细内容
+		$data = $_content->get($in['cid'],'all');
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,$data,array('url'=>'readonly="readonly"'));
+		$this->assign('form_data',$form);
+		$this->assign('data',$data);
+		$this->display();
+	}
+
+	/**
+	 * @name 处理编辑的AJAX请求
+	 */
+	private function _ajax_edit() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'sort':  //更新排序
+				$in['cid'] && $in['cid'] = substr($in['cid'],5);
+				$in['sort'] = intval($in['sort']);
+				if ($in['sort'] == '0' || !empty($in['sort'])) {
+					$_content = M ('Content');
+					$data = $_content->find($in['cid']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_content->save($data)) {
+							echo $data['sort'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'savetitle':  //更新标题
+				$in['cid'] && $in['cid'] = substr($in['cid'],6);
+				if (!empty($in['title'])) {
+					$_content = M ('Content');
+					$data = $_content->find($in['cid']);
+					if (is_array($data)) {
+						$data['title'] = $in['title'];
+						if (false !== $_content->save($data)) {
+							echo $data['title'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'updatetime':  //更改 更新时间
+				$in['cid'] && $in['cid'] = substr($in['cid'],5);
+				if (!empty($in['updatetime'])) {
+					$_content = M ('Content');
+					$data = $_content->find($in['cid']);
+					if (is_array($data)) {
+						$data['update_time'] = strtotime($in['updatetime']);
+						if (false !== $_content->save($data)) {
+							echo date('Y-m-d',$data['update_time']);
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'category':  //更换栏目
+				$in['cid'] && $in['cid'] = substr($in['cid'],9);
+				if (!empty($in['new_catid'])) {
+					if ($in['catid'] == $in['new_catid']) {
+						echo $this->category_data['name'];
+						exit ();
+					} else { //更新
+						$_content = M ('Content');
+						$data = $_content->field("`cid`,`catid`")->find($in['cid']);
+						if (is_array($data)) {
+							$data['catid'] = $in['new_catid'];
+							if (false !== $_content->save($data)) {
+								$category_data = F ('category_' . $in['new_catid']);
+								echo $category_data['name'];
+								exit ();
+							}
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'getclassify':
+				if($in['cid']){
+					$category = D('Category')->getTreeByParentId($in['cid']);
+					if(!empty($category['child'])){
+						$html = '';
+						foreach($category['child'] as $k=>$v){
+							$html .= '<option value="'.$v['catid'];
+							if($k==1){
+								$html .= 'selected';
+							}
+							$html .= '">'.$v['name'].'</option>';
+						}
+						die($html);
+					}
+					die('false');
+				}
+				die('false');
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name获取分类信息
+	 */
+	public function getclassify(){
+		$in = &$this->in;
+		if($in['dosubmit']){
+			if($in['topcatid'] && $in['catid']){
+				if(false !== D('Category')->settopcatid($in['catid'],$in['topcatid'])){
+						echo '<script>alert("提交成功!")</script>';
+						//$this->message('提交成功！');
+					}else{
+						echo '<script>alert("提交失败!")</script>';
+						//$this->message('提交失败！');
+					}
+			}
+			return false;
+		}
+		if($in['catid']){
+			$category = D('Category')->field("`modelid`")->where("`catid`=".$in['catid'])->find();
+			if(!empty($category)){
+				$classify = D('Category')->field("`catid` as 'id', `parentid`, `name`, `topcatid`")->where("`cattype`='cla' AND `modelid`=".$category['modelid'])->findAll();
+				if(empty($classify)) die('没有查到分类数据');
+				foreach($classify as $k=>$v){
+					if(!empty($classify[$k]['topcatid'])){
+						$tid_array = split(',',$classify[$k]['topcatid']);
+						if(in_array($in['catid'],$tid_array)){
+							$classify[$k]['checked'] = 'checked';
+						}
+					}
+				}
+				$this->assign('catid',$in['catid']);
+		 		$this->assign ( 'data', $classify );
+				$this->display('select_classify');
+			}
+			return false;
+		}
+		return false;
+	}
+
+	/**
+	 * @name操作
+	 */
+	protected function _do_edit() {
+		$in = &$this->in;
+		$_c = D ('Content');
+		if (!$in['cid'] && empty($in['info'])) $this->message('<font class="red">未选择操作项！</font>');
+		switch ($in['do']) {
+			case 'recycle':  //移动到回收站、即 status => '-1'
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,'-1')) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'restore': //从回收站还原，还原后为待审状态,sort为1
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,'0')) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'status': //标记为已审，待审
+				if (!in_array($in['dostatus'],array('0','9'))) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,$in['dostatus'])) {
+					$this->message('<font class="green">操作成功！</font>',U('fcontent/manage?catid='.$in['catid']),1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'moveto': //移动到其它栏目
+				if (!$in['moveto']) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->moveto($idArr,$in['moveto'])) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+
+	/**
+	 * @name彻底删除信息
+	 */
+	public function delete() {
+		$in = &$this->in;
+		if (!$in['cid']) $this->message('<font class="red">没有选择操作项！</font>');
+
+		$_c = D('Content');
+		if (is_numeric($in['cid'])) {
+			$_c->delete(array($in['cid']));
+			$this->message('<font class="green">删除成功！</font>');
+		} elseif ($in['cid'] == 'all') { //清空回收站
+			$_c->delete('all', $in['catid']);
+			$this->message('<font class="green">删除成功！</font>');
+		}
+		//删除内容后的操作：包括更新相关列表页实体文件，删除详细页实体文件，更新首页实体文件
+		tag('after_content_delete');
+	}
+
+
+}
\ No newline at end of file

--- admin/Lib/Action/FdbAction.class.php ---
@@ -0,0 +1,228 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FdbAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: Chao <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 数据库维护
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 数据库维护
+ *
+ */
+class FdbAction extends FbaseAction {
+	/**
+	 * @name 初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		
+		switch ($in['do']) {
+			case 'optimize':
+				$this->optimize();
+				break;
+			case 'repair':
+				$this->repair();
+				break;
+		}
+	}
+	
+	/**
+	 * @name数据库备份
+	 */
+	public function backup() {
+		$in = &$this->in;
+		$DbBackup = D('DbBackup');
+		header('Content-type:text/html;charset=utf-8;');
+		
+		//如果有数据提交
+		if ($this->ispost()) {
+			if (is_null($in['tableName'])) {
+				exit;
+			}
+			$tables = $in['tableName']; //需要备份的表
+			if (!is_array($tables)) {
+				$tables = explode(',', $tables);
+			}
+			
+			if(!isset($in['startpos'])) {  //记录开始位置
+				$startpos = 0;
+			} else $startpos = $in['startpos'];
+			
+			if (!isset($in['fnum'])) {  //分卷id
+				$fnum = 1;
+			} else $fnum = $in['fnum'];
+			
+			if(empty($in['nowtable'])) {  //当面表名称
+				$nowtable = '';
+			} else $nowtable = $in['nowtable'];
+			
+			$fsize = intval($in['fsize']) ? intval($in['fsize']) : 2048;  //分卷大小
+
+			$prefix = 'BACK_' . date('Y_m_d') . '_' . substr(uniqid(), -5);
+			while (file_exists(DB_BACKUP_PATH . $prefix . '_1.txt')) {  //判断是否有重名备份文件
+				$prefix = 'BACK_' . date('Y_m_d') . '_ ' . substr(uniqid(), -5);
+			}
+			
+			$backup = $DbBackup->doBackup($tables, $fsize, $fnum, $nowtable, $startpos, $prefix);
+			echo '<div style="font-size:13px;">';
+			while ($backup['code'] == 'incomplete') { //$backup['code'] 值表示: incomplete：还有分卷 success:完成 error:出错
+				if (!is_array($backup['tableName'])) {
+					$backup['tableName'] = explode(',', $backup['tableName']);
+				}
+				echo $backup['msg'] . '<br />';
+				$backup = $DbBackup->doBackup($backup['tableName'], $backup['fsize'], $backup['fnum'], $backup['nowtable'], $backup['startpos'], $prefix);
+			}
+			
+			echo $backup['msg'] . '<br />';
+			echo '</div>';
+			exit;
+		}
+		
+		//获取系统存在的表信息
+		$otherTables = Array();
+		$fangfaSysTables = Array();
+		
+		$tableList = $DbBackup->getTables();
+		$i = 0;
+		$j = 0;
+		foreach ($tableList AS $key=>$table) {
+			if (preg_match('/^' . C('DB_PREFIX') . '.*/i', $table)) {
+				$fangfaSysTables[$i]['name'] = $table;
+				$fangfaSysTables[$i]['count'] = M(substr($table, strlen(C('DB_PREFIX'))))->count();
+				$i++;
+			} else {
+				$otherTables[$j]['name'] = $table;
+				$otherTables[$j]['count'] = $DbBackup->getCount($table);
+				$j++;
+			}
+		}
+		
+		$this->assign('mysqlVersion', (string)substr(mysql_get_server_info ( $DbBackup->getDb ()->getNlinkID ()), 0, 3));
+		$this->assign('fangfaSysTables', $fangfaSysTables);
+		$this->assign('otherTables', $otherTables);
+		
+		$this->display();
+	}
+	
+	/**
+	 * @name数据库恢复
+	 */
+	public function restore() {
+		$in = &$this->in;
+		$DbBackup = D('DbBackup');
+		
+		$filelists = $DbBackup->orderBackupFiles(DB_BACKUP_PATH);
+		if ($this->ispost()) {
+			if (isset($filelists[$in['prefix']])) {
+				echo '<div style="font-size:13px;">';
+				foreach ($filelists[$in['prefix']] as $f) {
+					if ($DbBackup->doRedat(DB_BACKUP_PATH . $f['name'])) {
+						echo '分卷' . $f['name'] . '还原完成！<br />';
+					}
+				}
+				echo "所有数据还原完成！<br />";
+				echo '</div>';
+			}
+			exit;
+		}
+		
+		$this->assign('filelists', $filelists);
+		$this->display();
+	}
+	
+	/**
+	 * @name删除备份
+	 */
+	public function del()
+	{
+		$in = &$this->in;
+		$DbBackup = D('DbBackup');
+		
+		$filelists = $DbBackup->orderBackupFiles(DB_BACKUP_PATH);
+		
+		if (isset($filelists[$in['prefix']])) {
+			foreach ($filelists[$in['prefix']] AS $f) {
+				if (!@unlink(trim(DB_BACKUP_PATH, '/\\') . '/' . $f['name'])) {
+					$this->error('删除备份文件失败！');
+				}
+			}
+		}
+		
+		redirect(U('fdb/restore'));
+	}
+	
+	/**
+	 * @name数据库修复
+	 */
+	public function repair() {
+		$in = & $this->in;
+		$DbBackup = D('DbBackup');
+		
+		$table_list = explode(',', $in['table_list']);
+		echo '<div style="font-size:13px;">';
+		if ($table_list) {
+			foreach ($table_list AS $t) {
+				if ($DbBackup->doRepair($t)) {
+					echo "修复表： " . $t . "  OK！<br />";
+				}else {
+					echo "修复表： " . $t . "  失败，原因是：" . $DbBackup->getDb()->getError() . '。 <br />';
+				}
+			}
+		} else {
+			echo "您没有选择需要操作的表！";
+		}
+		echo "修复完成！";
+		echo '</div>';
+		exit;
+	}
+	
+	/**
+	 * @name数据表优化
+	 */
+	public function optimize() {
+		$in = & $this->in;
+		$DbBackup = D('DbBackup');		
+		$table_list = explode(',', $in['table_list']);
+		header('Content-type:text/html;charset=utf-8;');
+		echo '<div style="font-size:13px;">';		
+		if ($table_list) {
+			foreach ($table_list AS $t) {
+				if ($DbBackup->doOpimize($t)) {
+					echo "执行优化表： " . $t . "  OK！<br />";
+				}else {
+					echo "执行优化表： " . $t . "  失败，原因是：" . $DbBackup->getDb()->getError() . '。 <br />';
+				}
+			}
+		} else {
+			echo "您没有选择需要操作的表！";
+		}
+		echo "优化完成！";	
+		echo '</div>';	
+		exit;
+	}
+	
+	/**
+	 * @name查看数据表结构
+	 */
+	public function viewinfo() {
+		$in = & $this->in;
+		$DbBackup = D('DbBackup');
+		header('Content-type:text/html;charset=utf-8;');
+		echo '<div style="font-size:13px;width:98%;height:98%;">';
+		echo "<pre>" . $DbBackup->doViewinfo($in['tablename']) . '</pre>';
+		echo '</div>';
+	}
+	
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/FeditorAction.class.php ---
@@ -0,0 +1,307 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FdbAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: Chao <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 编辑器文件管理(目前只支持kindeditor)
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+
+//定义文件名输出编码： windows 输出gbk  其他*nx 输出 utf-8
+defined('OUT_ENCODE') or define('OUT_ENCODE', IS_WIN ? 'gbk' : 'utf-8');
+/**
+ * @name 编辑器文件管理
+ *
+ */
+class FeditorAction extends FbaseAction {
+
+
+	/**
+	 * @name编辑器管理入口
+	 */
+	public function manage () {
+        $in = &$this->in;
+        $in['type'] && $in['type'] = trim($in['type']);
+        if($in['type'] && in_array($in['type'],array('kind','tinymce'))) {
+            $this->{$in['type'].'_manage'}();
+        } else {
+            die('参数错误！');
+        }
+	}
+
+	/**
+	 * @name上传入口
+	 */
+	public function upload() {
+        $in = &$this->in;
+        $in['type'] && $in['type'] = trim($in['type']);
+        if($in['type'] && in_array($in['type'],array('kind','tinymce'))) {
+            $this->{$in['type'].'_upload'}();
+        }
+	}
+	
+	/**
+	 * @name kindeditor
+	 */
+	private function kind_manage() {
+        $in = &$this->in;
+        //图片扩展名
+        if($in['uploadfiletype'] == 'image'){
+        	$ext_arr = array('gif', 'jpg', 'jpeg', 'png', 'bmp');
+        	//根目录路径，可以指定绝对路径，比如 /var/www/attached/
+        	$root_path =  FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/';
+        	//根目录URL，可以指定绝对路径，比如 http://www.yoursite.com/attached/
+        	$root_url = __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . 'images/';
+        }else if($in['uploadfiletype'] == 'flash'){
+        	$ext_arr = array('flv', 'swf');
+        	//根目录路径，可以指定绝对路径，比如 /var/www/attached/
+        	$root_path =  FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'media/';
+        	//根目录URL，可以指定绝对路径，比如 http://www.yoursite.com/attached/
+        	$root_url = __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . 'media/';
+        }else if($in['uploadfiletype'] == 'media'){
+        	$ext_arr = array('mp3','wav','wma','wmv','mid','avi','mpg','asf','rm','rmvb');
+        	//根目录路径，可以指定绝对路径，比如 /var/www/attached/
+        	$root_path =  FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'media/';
+        	//根目录URL，可以指定绝对路径，比如 http://www.yoursite.com/attached/
+        	$root_url = __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . 'media/';
+        }else{
+			die("非法操作！");
+		}
+        //根据path参数，设置各路径和URL
+        if (empty($in['path'])) {
+            $current_path = realpath($root_path) . '/';
+            $current_url = $root_url;
+            $current_dir_path = '';
+            $moveup_dir_path = '';
+        } else {
+            $current_path = realpath($root_path) . '/' . $in['path'];
+            $current_url = $root_url . $in['path'];
+            $current_dir_path = $in['path'];
+            $moveup_dir_path = preg_replace('/(.*?)[^\/]+\/$/', '$1', $current_dir_path);
+        }
+        //排序形式，name or size or type
+        $order = empty($in['order']) ? 'name' : strtolower($in['order']);
+
+        //不允许使用..移动到上一级目录
+        if (preg_match('/\.\./', $current_path)) {
+            echo 'Access is not allowed.';
+            exit;
+        }
+        //最后一个字符不是/
+        if (!preg_match('/\/$/', $current_path)) {
+            echo 'Parameter is not valid.';
+            exit;
+        }
+        //目录不存在或不是目录
+        if (!file_exists($current_path) || !is_dir($current_path)) {
+            echo 'Directory does not exist.';
+            exit;
+        }
+
+        //遍历目录取得文件信息
+        $file_list = array();
+        if ($handle = opendir($current_path)) {
+            $i = 0;
+            while (false !== ($filename = readdir($handle))) {
+                if ($filename{0} == '.') continue;
+                $file =$current_path . $filename;
+                if (is_dir($file)) {
+                    $file_list[$i]['is_dir'] = true; //是否文件夹
+                    $file_list[$i]['has_file'] = (count(scandir($file)) > 2); //文件夹是否包含文件
+                    $file_list[$i]['filesize'] = 0; //文件大小
+                    $file_list[$i]['is_photo'] = false; //是否图片
+                    $file_list[$i]['filetype'] = ''; //文件类别，用扩展名判断
+                } else {
+                    $file_list[$i]['is_dir'] = false;
+                    $file_list[$i]['has_file'] = false;
+                    $file_list[$i]['filesize'] = filesize($file);
+                    $file_list[$i]['dir_path'] = '';
+                    $file_ext = strtolower(array_pop(explode('.', trim($file))));
+                    $file_list[$i]['is_photo'] = in_array($file_ext, $ext_arr);
+                    $file_list[$i]['filetype'] = $file_ext;
+                    if(!$file_list[$i]['is_photo']){//将不属于上传类型的文件过滤掉
+						 continue;
+						}
+                }
+                $file_list[$i]['filename'] = auto_charset($filename,OUT_ENCODE,'utf-8'); //文件名，包含扩展名
+                $file_list[$i]['datetime'] = date('Y-m-d H:i:s', filemtime($file)); //文件最后修改时间
+                $i++;
+            }
+            closedir($handle);
+        }
+        if(count($file_list)==1 && !$file_list[0]['is_dir'] && !$file_list[0]['is_photo']){//没找到符合的文件类型，清空数组
+			array_pop($file_list);
+		}else if(count($file_list)>1 && !$file_list[count($file_list)-1]['is_dir'] && !$file_list[count($file_list)-1]['is_photo']){
+			array_pop($file_list);//去掉数组最后一个键值为false的键
+		}
+		if( !empty($file_list) ) {//对文件输出排序
+			$file_list = $this -> kind_order($file_list, $order);
+		}
+        $result = array();
+        //$result['ext_arr'] = $file_list;
+        //相对于根目录的上一级目录
+        $result['moveup_dir_path'] = $moveup_dir_path;
+        //相对于根目录的当前目录
+        $result['current_dir_path'] = $current_dir_path;
+        //当前目录的URL
+        $result['current_url'] = $current_url;
+        //文件数
+        $result['total_count'] = count($file_list);
+        //文件列表数组
+        $result['file_list'] = $file_list;
+
+        //输出JSON字符串
+        header('Content-type: application/json; charset=UTF-8');
+        die(json_encode($result));
+
+	}
+	/**
+	 * @name 对文件排序输出
+	 * */
+	private function kind_order($file_list, $order){
+		//name     or size     or type
+		//filename or filesize or filetype
+		$key = $order == "name" ? "filename" : $key;
+		$key = $order == "size" ? "filesize" : $key;
+		$key = $order == "type" ? "filetype" : $key;
+		$count = count($file_list);
+		for($i = 0; $i < $count; $i ++) {
+			for($j= $i + 1; $j < $count; $j ++) { 
+				$temp = ""; 
+				if ($file_list[$i][$key] > $file_list[$j][$key]){ 
+					$temp = $file_list[$i]; 
+					$file_list[$i] = $file_list[$j]; 
+					$file_list[$j] = $temp; 
+				}                 
+			} 
+		} 
+		return $file_list;
+	}
+	/**
+	 * @name上传
+	 */
+	private function kind_upload() {
+		$in = &$this->in;
+		//定义允许上传的文件扩展名
+		if($in['uploadfiletype']=='image'){//判断上传文件的类型
+			$ext_arr = array('gif', 'jpg', 'jpeg', 'png', 'bmp');
+			//文件保存目录路径
+			$save_path = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/'.date("Y/m/",time());
+			//文件保存目录URL
+			$save_url = __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . 'images/'.date("Y/m/",time());
+		}else if($in['uploadfiletype']=='flash'){
+			$ext_arr = array('flv', 'swf');
+			//文件保存目录路径
+			$save_path = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'media/';
+			//文件保存目录URL
+			$save_url = __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . 'media/';
+		}else if($in['uploadfiletype']=='media'){
+			$ext_arr = array('mp3','wav','wma','wmv','mid','avi','mpg','asf','rm','rmvb');
+			//文件保存目录路径
+			$save_path = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'media/';
+			//文件保存目录URL
+			$save_url = __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . 'media/';
+		}else{
+			$this->alert("非法操作！");
+		}
+		//$ext_arr = array('gif', 'jpg', 'jpeg', 'png', 'bmp');
+		//最大文件大小
+		$max_size = 1000000;
+		
+		//有上传文件时
+		if (empty($_FILES) === false) {
+			//原文件名
+			$file_name = $_FILES['imgFile']['name'];
+			//服务器上临时文件名
+			$tmp_name = $_FILES['imgFile']['tmp_name'];
+			//文件大小
+			$file_size = $_FILES['imgFile']['size'];
+			//检查文件名
+			if (!$file_name) {
+				$this->alert("请选择文件。");
+			}
+			//检查目录
+			if (@mk_dir($save_path) === false) {
+				$this->alert("上传目录不存在。");
+			}
+			//检查目录写权限
+			if (@is_writable($save_path) === false) {
+				$this->alert("上传目录没有写权限。");
+			}
+			//检查是否已上传
+			if (@is_uploaded_file($tmp_name) === false) {
+				$this->alert("临时文件可能不是上传文件。");
+			}
+			//检查文件大小
+			if ($file_size > $max_size) {
+				$this->alert("上传文件大小超过限制。");
+			}
+			//获得文件扩展名
+			$temp_arr = explode(".", $file_name);
+			$file_ext = array_pop($temp_arr);
+			$file_ext = trim($file_ext);
+			$file_ext = strtolower($file_ext);
+			//获得文件名
+			$filname_noext = array_pop($temp_arr);
+			$filname_noext = trim($filname_noext);
+			$filname_noext = iconv('utf-8',OUT_ENCODE,$filname_noext);//对名称编码，解决中文名称问题
+			//检查扩展名
+			if (in_array($file_ext, $ext_arr) === false) {
+				$this->alert("上传文件扩展名是不允许的扩展名");
+			}
+			//新文件名
+			// mark  2011-8-12 修改文件名称和保存路径，防止同目录上传文件数量过大而访问过慢的问题
+			$new_file_name = date("YmdHis") . rand(10000, 99999) . '.' . $file_ext; 
+//			$i=1;
+//			while(file_exists($save_path . '/' . $filname_noext.'('.$i.').' . $file_ext)){
+//				$i++;
+//			}
+//			$new_file_name = $filname_noext.'('.$i.').' . $file_ext;
+			//移动文件
+			$file_path = $save_path . $new_file_name;
+			
+			if (move_uploaded_file($tmp_name, $file_path) === false) {
+				$this->alert("上传文件失败。");
+			}
+			@chmod($file_path, 0644);
+			$file_url = $save_url . $new_file_name;
+			$file_url = iconv(OUT_ENCODE,'UTF-8',$file_url);
+			header('Content-type: text/html; charset=UTF-8');
+			die(json_encode(array('error' => 0, 'url' => $file_url)));
+		}
+	}
+
+	/**
+	 * @name返回json数据
+	 * @param unknown_type $msg
+	 */
+    private function alert($msg) {
+        header('Content-type: text/html; charset=UTF-8');
+        echo json_encode(array('error' => 1, 'message' => $msg));
+        exit;
+    }
+
+    /**
+     * @name tinymce管理
+     */
+	private function tinymce_manage() {
+
+	}
+
+	/**
+	 * @name tinymce上传
+	 */
+	private function tinymce_upload() {
+
+	}
+
+
+
+}
\ No newline at end of file

--- admin/Lib/Action/FfilesAction.class.php ---
@@ -0,0 +1,246 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FuploadAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 文件管理
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+//定义文件名输出编码：保存文件的时候 windows 输出gbk  其他*nx 输出 utf-8
+defined('OUT_ENCODE') or define('OUT_ENCODE', IS_WIN ? 'gbk' : 'utf-8');
+/**
+ * @name 文件管理
+ *
+ */
+class FfilesAction extends FbaseAction {
+
+	/**
+	 * @name图片库列表
+	 */
+	public function images() {
+		$in = &$this->in;
+		if ($in ['do'] && $in ['do'] == 'cutimg')
+			$this->cutimg ();
+		if ($in ['do'] && $in ['do'] == 'delete')
+			$this->delete_image();
+		if (empty ( $in ['path'] ) || $in ['path'] == '/')
+			$in ['path'] = '';
+		$path = &$in ['path']; //当前浏览路径
+		//当前物理路径
+		$upload_dir = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/';
+		$upload_url = C ( 'UPLOAD_URL' ) . 'images/';
+		//可以显示的图片类型
+		$images_ext = explode ( '|', C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+		$now_dir = realpath ( $upload_dir . $path );
+		if (! file_exists ( $now_dir )) {
+			$this->error ( '参数错误！' );
+		}
+		//遍历当前文件夹
+		$handle = opendir ( $now_dir );
+		if (false !== $handle) {
+			$files = array (); //所有文件
+			while ( false !== ($file = readdir ( $handle )) ) {
+				if ($file{0} != "." ) {
+					$filename = $now_dir . '/' . $file;
+					$isdir = ( int ) is_dir ( $filename );
+					$filetype = filetype ( $filename );
+					if ($filetype == 'file') {
+						$fileinfo = pathinfo ( $filename );
+						if (empty ( $fileinfo ['extension'] ) || ! in_array ( strtolower ( $fileinfo ['extension'] ), $images_ext )) {
+							continue;
+						}
+					} else if ($isdir) {
+						//屏蔽FrontPage扩展目录和linux隐蔽目录
+						if (preg_match ( "/^_(.*)$/", $filename ))
+							continue;
+						if (preg_match ( "/^\.(.*)$/", $filename ))
+							continue;
+					}
+					//得到相对路径
+					$url = realpath ( $now_dir . '/' . $file );
+					$url = str_replace ( realpath ( $upload_dir ), '', $url );
+					$url = str_replace ( '\\', '/', $url );
+					$url = rtrim($url,'/\\');
+					$files [] = array (
+						'isdir' => $isdir,
+						'filename' => auto_charset($file,OUT_ENCODE,'utf-8'),
+						'filemtime' => filemtime ( $filename ),
+						'filetype' => $filetype,
+						'filesize' => byte_format ( filesize ( $filename ) ),
+						'url' => $url,
+						'imageurl' => auto_charset('images/' . ltrim($url, '\\/'),OUT_ENCODE,'utf-8'),
+						'fullurl' => auto_charset(WEB_PUBLIC_PATH . '/' . $upload_url . $url,OUT_ENCODE,'utf-8'),
+					);
+				}
+			}
+			closedir ( $handle );
+		}
+		//数据
+		$path = empty ( $path ) ? '/' : $path;
+		if ($path != '/') { //父级目录
+			$path_arr = explode ( '/', $path );
+			array_pop ( $path_arr );
+			$parent_path = implode ( '/', $path_arr );
+		} else {
+			$parent_path = $path;
+		}
+
+		$data = array (
+			'files' => $files,
+			'path' => $path,
+			'parent_path' => $parent_path,
+			'opener_id' => $in ['opener_id'],
+			'upload_dir' => C('UPLOAD_DIR'),
+		);
+		if (!empty($in['shower_id'])) $data['shower_id'] = $in['shower_id'];
+		usort($data['files'], array($this, 'imageFileSort'));
+		$this->assign ( 'data', $data );
+		$this->assign('forward',urlencode ($_SERVER['REQUEST_URI']));
+		$this->display ();
+	}
+
+	/**
+	 * @name图片裁剪
+	 */
+	protected function cutimg() {
+		$in = &$this->in;
+		$upload_dir = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' );
+		$upload_url = C ( 'UPLOAD_URL' );
+		$filepath = $upload_dir . $in ['file'];
+		$fileurl = $upload_url . $in ['file'];
+		if ($this->ispost()) {
+		  echo $fileurl;
+          exit;
+			$in['w'] = intval($in['w']);
+			$in['h'] = intval($in['h']);
+			$in['x'] = intval($in['x']);
+			$in['y'] = intval($in['y']);
+            $filepath = auto_charset($filepath,'utf-8',OUT_ENCODE);
+            if(is_file($filepath)) {
+                import('ImageResize',INCLUDE_PATH);
+                $_imageResize = new ImageResize();
+                $_imageResize->load($filepath);
+                if ($_imageResize->cut($in['w'],$in['h'],$in['x'],$in['y'])) {
+                    //保存图片、覆盖原图
+                    if ($_imageResize->save($filepath,false)) {
+                        die($fileurl);
+                    }
+                }
+            }
+            die('n');
+
+		}
+		$this->assign('fileurl',$fileurl);
+		$this->assign('file',$in['file']);
+
+		$this->display ( 'cutimg' );
+		exit ();
+	}
+
+	/**
+	 * @name模板库
+	 */
+	public function tpl() {
+		$in = &$this->in;
+		empty($in ['path']) && $in ['path'] = '/';
+		$path = &$in ['path']; //当前浏览路径
+		//当前物理路径
+		$tpl_dir = realpath(FRONT_TEMPLATE_PATH);
+		//可以显示的模板文件类型
+		$images_ext = array (
+			'html', 'htm'
+		);
+		$now_dir = realpath ( $tpl_dir . $path );
+		if (! file_exists ( $now_dir )) {
+			$this->error ( '参数错误！' );
+		}
+		import('ORG.Io.Dir');
+		$dir = new Dir($now_dir);
+		$data = $dir->toArray();
+		if (is_array($data)) {
+			foreach ($data as $k=>$v) {
+				$data[$k]['path'] = rtrim(str_replace($tpl_dir,'',$v['pathname']),'/\\');
+				$data[$k]['path'] = ltrim(str_replace($tpl_dir,'',$v['pathname']),'/\\');
+//				$data[$k]['filename'] = auto_charset($data[$k]['filename'], OUT_ENCODE, 'utf-8');
+				if (strpos($data[$k]['path'],'\\'))
+					$data[$k]['path'] = str_replace('\\','/',$data[$k]['path']);
+			}
+		}
+		//当前目录，上级目录
+		$pathArr = explode('/',$path);
+		array_pop($pathArr);
+		if (empty($pathArr)) {
+			$parent_path = '/';
+		} else {
+			$parent_path = '/' . implode('/',$pathArr);
+		}
+		usort($data, array($this, 'tplFileSort'));
+		$this->assign ( 'data', $data );
+		$this->assign ( 'parent_path', $parent_path );
+		$this->assign ( 'now_path', $path );
+		$this->assign ( 'opener_id', $in['opener_id'] );
+		$this->display ();
+	}
+
+	/**
+	 * @name删除图片
+	 *
+	 */
+	protected function delete_image() {
+		$in = &$this->in;
+		if ($in['file']) {  //TODO
+			$upload_dir = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' );
+			$upload_url = C ( 'UPLOAD_URL' );
+			$filename = $upload_dir . $in['file'];
+            $filename = auto_charset($filename,'utf-8',OUT_ENCODE);
+			if (is_file($filename)) {
+				@unlink($filename);
+				$message = L(basename ($filename).'删除成功！');
+				$this->assign('message',$message);
+			}
+		}
+		if ($in['forward']) {
+			header('location:'.urldecode($in['forward']));
+		}
+	}
+
+	/**
+	 * @name 对站内图片文件进行排序
+	 *
+	 * @param array $a
+	 * @param array $b
+	 * @return boolean
+	 */
+	protected function imageFileSort($a, $b)
+	{
+		if ($a['isdir']==1 && $b['isdir']==0) {
+			return false;
+		} else if ($a['isdir']==0 && $b['isdir']==1) {
+			return true;
+		} else {
+			return strcmp($a["filename"], $b["filename"]);
+		}
+	}
+
+	/**
+	 * @name 对选择模板排序
+	 * @param unknown_type $a
+	 * @param unknown_type $b
+	 */
+	protected function tplFileSort($a, $b)
+	{
+		if ($a['isDir']==true && $b['isDir']==false) {
+			return false;
+		} else if ($a['isDir']==false && $b['isDir']==true) {
+			return true;
+		} else {
+			return strcmp($a["filename"], $b["filename"]);
+		}
+	}
+}
\ No newline at end of file

--- admin/Lib/Action/FfriendlinkAction.class.php ---
@@ -0,0 +1,459 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Ffriendlink.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-07-26
+// +----------------------------------------------------------------------
+// | Author: Chao <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 辅助插件 - 友情链接管理
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 辅助插件 - 友情链接管理
+ *
+ */
+class FfriendlinkAction extends FbaseAction {
+	protected $type_list;
+	/**
+	 * @name初始化友情链接数据
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'friendlink';
+		$this->assign('q_fields', array('name' => '站点名称', 'id' => 'ID', 'type' => '标识符'));
+		$this->assign('status', array('0' => '未审核', '1' => '已审核'));
+		
+		//链接分类
+		$_model = M('friendlink_type');
+		$this->type_list = $_model->getField('type_id,type_name');
+		$this->assign('type_list', $this->type_list);
+		
+		$this->assign('in', $this->in);
+	}
+	
+	/**
+	 * @name管理入口
+	 */
+	public function index()
+	{
+		$this->manage();
+	}
+	
+	/**
+	 * @name友情链接管理
+	 *
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		$where = array();
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`=' . $in['status'];
+		}
+		if ($in['type_id']) {
+			$where[] = ' `type_id`="' . $in['type_id'] . '"';
+		}
+		if (!empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		$in['order'] = '`sort` ASC';
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加、编辑 友情链接
+	 */
+	public function add()
+	{
+		$in = &$this->in;
+		$this->assign('upload_dir', C('UPLOAD_DIR'));
+		if ($in['do']) {
+			$_model = M('Friendlink');
+			$data[$in['do']] = $in[$in['do']];
+			$_model->where('id=' . $in['id'])->save($data);
+			redirect($this->forward);
+		} else {
+			$in['info']['type_id'] && ($in['info']['type_name'] = $this->type_list[$in['info']['type_id']]);
+			if ($this->ispost()) {
+				if (! $in ['_tablename'])
+					$this->message ( '没有指定操作表！' );
+				$name = $in ['_tablename']; //数据表名
+				//		die($this->getInTableName($name));
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+				$_keyid = $_m->getPk ();
+				//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+				$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+				if ( $_m->create ( $in ['info'] ) ) {
+					if (! empty ( $in ['info'] [$_keyid] )) { //更新
+						$keyid = $_m->save ();
+					} else { //添加
+						$keyid = $_m->add ();
+						if ($keyid) $in['info'][$_keyid] = $keyid;
+					}
+					if (false !== $keyid) { //添加数据
+						if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+							$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+						}
+						//返回处理信息
+						if ($in ['ajax'])
+							$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+						else if($in ['_tablename'] == 'menu')
+							$this->message ( '记录保存成功！', '', 0, false);
+						else
+							$this->message ( '记录保存成功！' );
+					} else {
+						//返回处理信息
+						if ($in ['ajax'])
+							$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+						else
+							$this->message ( $_m->getError () . '<br />数据保存失败！' );
+					}
+				} else {
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+					else
+						$this->message ( $_m->getError ().'记录保存失败！' );
+				}
+			}
+			//获取数据
+			if (!empty($in['_tablename'])) {
+				$name = $in ['_tablename']; //数据表名
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+				$_keyid = $_m->getPk ();
+				if ( $in [$_keyid] ) { //编辑
+					$keyid = $in [$_keyid] ;
+					$data = $_m->find ( $keyid );
+					if (isset($data['parentid']) && $data['parentid']>0) {
+						$this->assign('parent_data',$_m->find($data['parentid']));
+					}
+					$this->assign ( 'data', $data );
+				}
+			}
+			if (!empty($in['tpl'])) {
+				$this->display ( $in ['tpl'] );
+			} else {
+				$this->display();
+			}
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+		if ($in ['ajax']) {
+			$this->_edit_ajax ();
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function _edit_ajax()
+	{
+		$in = &$this->in;
+		$_model = M('friendlink');
+		switch ($in['ajax']) {
+			case 'sort':  //排序
+				$in['id'] && $in['id'] = (int)substr($in['id'],5);
+				if ($in['id'] && !empty($in['sort'])) {
+					$data = $_model->find($in['id']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_model->save($data)) {
+							//更新缓存
+							die($data['sort']);
+						}
+					}
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name删除 友情链接
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		//		die($this->getInTableName($name));
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+	
+	/**
+	 * @name分类管理
+	 */
+	public function manage_type()
+	{
+		$in = & $this->in;
+		$in ['_tablename'] = 'friendlink_type';
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function edit_type()
+	{
+		$in = & $this->in;
+		if ($in['ajax']) {
+			$this->_edit_type_ajax();
+		}
+	}
+	
+	/**
+	 * @name 处理友情链接类型的AJAX请求
+	 */
+	public function _edit_type_ajax()
+	{
+		$in = &$this->in;
+		$_model = M('friendlink_type');
+		
+		switch ($in['ajax']) {
+			case 'type_name':
+				$in['id'] && $in['id'] = (int)substr($in['id'],10);
+				if ($in['id'] && !empty($in['type_name'])) {
+					$data['type_id'] = $in['id'];
+					$data['type_name'] = $in['type_name'];
+					if (false !== $_model->save($data)) {
+						$friendlink_model = M('friendlink');
+						$friendlink_model->where('type_id='.$data['type_id'])->save($data);
+						die($data['type_name']);
+					}
+				}
+			break;
+		}
+	}
+	
+	/**
+	 * @name添加分类
+	 */
+	public function add_type()
+	{
+		$in = &$this->in;
+		
+		if ($this->ispost()) {
+			$_model = M('friendlink_type');
+			$data['type_name'] = $in['info']['type_name'];
+			if ($_model->add($data) !== false) {
+				redirect($in['forward']);
+				exit;
+			}
+			
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	/**
+	 * @name删除分类
+	 */
+	public function delete_type()
+	{
+		$in = &$this->in;
+		$_model = M('friendlink_type');
+	    $_model->delete($in['id']);
+	    redirect(U('ffriendlink/manage_type'));
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FguestbookAction.class.php ---
@@ -0,0 +1,364 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Ffriendlink.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-07-26
+// +----------------------------------------------------------------------
+// | Author: Chao <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 模块 留言板
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 留言板模块
+ *
+ */
+class FguestbookAction extends FbaseAction {
+	/**
+	 * 栏目表模型对象
+	 * @var unknown_type
+	 */
+	protected $_category = '';
+
+	/**
+	 * 栏目数据
+	 * @var unknown_type
+	 */
+	protected $category_data = '';
+
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		if ($in['id']) {
+			$guestbook = M('Guestbook')->find($in['id']);
+			if ($guestbook) $in['catid'] = $guestbook['catid'];
+		}
+		if ($in['catid']) {
+			$this->_category = D ('Category');
+			$this->category_data = $this->_category->find((int)$in['catid']);
+			$this->assign('cat',$this->category_data);
+			$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+		} else $this->message('<font class="red">没有选择要操作的栏目</font>');
+
+		$this->assign('in', $this->in);
+		$this->assign('status', array('0' => '待审', '1' => '审核'));
+		$this->assign('tag', array('1' => '投诉', '2' => '建议'));
+		$this->assign('reply', array('0' => '未回复', '1' => '已回复'));
+		$this->assign('q_fields', array('title' => '标题', 'username' => '留言者', 'replyer' => '回复者'));
+	}
+
+	/**
+	 * 检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') return true;
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+
+	/**
+	 * @name列表
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		if($in['catid']==27){
+			$this->manage2();
+			exit();
+		}
+		$where = array();
+		if ($in['catid']) {
+			$where[] = " `catid`='{$in['catid']}' ";
+		}
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`=' . $in['status'];
+		}
+		if (isset($in['reply']) && $in['reply'] != 'all') {
+			$where[] = ($in['reply'] == 0 ? ' `reply` IS NULL' : ' `reply` IS NOT NULL');
+		}
+		if (!empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		$_mGuestbook = D ( 'Guestbook' ); //实例化表模型类
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`id` DESC ";
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_mGuestbook->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_mGuestbook->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		$this->display();
+	}
+
+	public function manage2()
+	{
+		$in = &$this->in;
+
+		$where = array();
+		if ($in['catid']) {
+			$where[] = " `catid`='{$in['catid']}' ";
+		}
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`=' . $in['status'];
+		}
+		if (isset($in['tag']) && $in['tag'] != 'all') {
+			$where[] = ' `tag`=' . $in['tag'];;
+		}
+		if (!empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		$_mGuestbook = D ( 'Guestbook' ); //实例化表模型类
+	
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`id` DESC ";
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+	
+		//获取数据
+		//初始化分页类
+		$data = array ();
+	
+		//统计记录数
+		$data ['count'] = $_mGuestbook->where ( $option['where'] )->count ();
+	
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+	
+		//分页代码
+		$data ['pages'] = $Page->show ();
+	
+		//当前页数据
+		$data ['info'] = $_mGuestbook->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		$this->display("manage2");
+	}
+	
+	/**
+	 * @name编辑
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+		if($in['catid']==27){
+			$this->edit2();
+			exit();
+		}
+		$_mGuestbook = D ( 'Guestbook' ); //实例化表模型类
+		if ($in['do']) {
+			$_model = M('guestbook');
+			$data[$in['do']] = $in[$in['do']];
+			$_model->where('id=' . $in['id'])->save($data);
+			redirect($this->forward);
+		} else {
+			if ($this->isPost()) {				
+				//过滤敏感词语
+				$cat = D ( 'Category' );
+				$cat_data = $cat->field('setting')->where(" `catid`=".$in['catid']."")->find();
+				if(isset($cat_data['setting']['isfilter']) && $cat_data['setting']['isfilter']){//如果开启过滤
+					$in['info'] = $this->filter();
+				}
+				//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+				$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+				if ( $_mGuestbook->create ( $in ['info'] ) ) {
+					if (! empty ( $in ['info'] ['id'] )) { //更新
+						$keyid = $_mGuestbook->save ();
+					} else { //添加
+						$keyid = $_mGuestbook->add ();						
+					}
+					if (false !== $keyid) { //添加数据
+						
+						//返回处理信息
+						if ($this->isAjax())
+							$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+						else
+							$this->message ( '记录保存成功！' );
+					} else {
+						//返回处理信息
+						if ($this->isAjax())
+							$this->ajaxReturn ( '', $_mGuestbook->getError () . '<br />数据保存失败！', 1, 'json' );
+						else
+							$this->message ( $_mGuestbook->getError () . '<br />数据保存失败！' );
+					}
+				} else {
+					if ($this->isAjax())
+						$this->ajaxReturn ( '', $_mGuestbook->getError (), 1, 'json' );
+					else
+						$this->message ( $_mGuestbook->getError ().'记录保存失败！' );
+				}
+			}
+			//获取数据		
+			$this->assign ( 'data', $_mGuestbook->find ( $in['id'] ) );
+			//getSp($_mGuestbook->find ( $in['id'] ));
+			$this->display();
+		}
+	}
+
+	public function edit2()
+	{
+		$in = &$this->in;
+		$_mGuestbook = D ( 'Guestbook' ); //实例化表模型类
+		if ($in['do']) {
+			$_model = M('guestbook');
+			$data[$in['do']] = $in[$in['do']];
+			$_model->where('id=' . $in['id'])->save($data);
+			redirect($this->forward);
+		} else {
+			if ($this->isPost()) {
+				//过滤敏感词语
+				$cat = D ( 'Category' );
+				$cat_data = $cat->field('setting')->where(" `catid`=".$in['catid']."")->find();
+				if(isset($cat_data['setting']['isfilter']) && $cat_data['setting']['isfilter']){//如果开启过滤
+					$in['info'] = $this->filter();
+				}
+				//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+				$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+				if ( $_mGuestbook->create ( $in ['info'] ) ) {
+					if (! empty ( $in ['info'] ['id'] )) { //更新
+						$keyid = $_mGuestbook->save ();
+					} else { //添加
+						$keyid = $_mGuestbook->add ();
+					}
+					if (false !== $keyid) { //添加数据
+	
+						//返回处理信息
+						if ($this->isAjax())
+							$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+						else
+							$this->message ( '记录保存成功！' );
+					} else {
+						//返回处理信息
+						if ($this->isAjax())
+							$this->ajaxReturn ( '', $_mGuestbook->getError () . '<br />数据保存失败！', 1, 'json' );
+						else
+							$this->message ( $_mGuestbook->getError () . '<br />数据保存失败！' );
+					}
+				} else {
+					if ($this->isAjax())
+						$this->ajaxReturn ( '', $_mGuestbook->getError (), 1, 'json' );
+					else
+						$this->message ( $_mGuestbook->getError ().'记录保存失败！' );
+				}
+			}
+			//获取数据
+			$this->assign ( 'data', $_mGuestbook->find ( $in['id'] ) );
+			//getSp($_mGuestbook->find ( $in['id'] ));
+			$this->display('edit2');
+		}
+	}
+	
+	/**
+	 * @name审核
+	 */
+	public function check()
+	{
+
+		$in = &$this->in;
+		if ($in['id'] && isset($in['status'])) {
+			$data['id'] = $in['id'];
+			$data['status'] = $in['status'];
+			$_model = M('Guestbook');
+			$_model->save($data);
+		}
+		redirect($this->forward);
+	}
+
+	/**
+	* @name过滤敏感词
+	*/
+	public function filter(){
+		$in = &$this->in;
+		$filterwords = explode('|',C ('FILTER_WORD'));//敏感词组
+		foreach($filterwords as $k => $v){
+			$filterwords[$k] = '/'.$v.'/';
+		}
+		$in['info']['title'] = preg_replace($filterwords,'***',$in['info']['title']);
+		$in['info']['content'] = preg_replace($filterwords,'***',$in['info']['content']);
+		$in['info']['reply'] = preg_replace($filterwords,'***',$in['info']['reply']);
+		return $in['info'];
+	}
+
+	/**
+	 * @name删除留言
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+		$_mGuestbook = D ( 'Guestbook' ); //实例化表模型类
+		
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		
+        
+        //lwh update
+		if ($in ['id'] ) { 
+			
+				$option ['where'] = array ('id' => $in ['id'] );
+
+		}elseif($in['info']['id']){
+
+				$option ['where'] = " `id` IN (".implode(',', $in['info']['id']) .")";
+          
+		}		
+		if (! empty ( $option )) {
+			if (false !== $_mGuestbook->delete($option)) {				
+				$this->message('删除成功');
+			} else {
+				$this->message($_mGuestbook->getError() . '删除失败');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件' );
+		}
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FhtmlAction.class.php ---
@@ -0,0 +1,358 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FhtmlAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-7-9
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: html维护，也就是删除已经存在的html实体文件
+// +----------------------------------------------------------------------
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+
+/**
+ * @name html维护
+ *
+ */
+class FhtmlAction extends FbaseAction {
+	
+	/**
+	 * @name更新主页
+	 */
+	public function index() {
+		//$filesize = $this->_htmls['htmls']->index ();
+		if (file_exists_case(FANGFACMS_ROOT . 'index.html')) {
+			@unlink(FANGFACMS_ROOT . 'index.html') or $this->message('<font class="red">首页更新失败！</font>');
+		}
+		
+		$this->message ( '<font class="green">网站首页更新成功！</font>', U('findex/home'), 3);
+	}
+	
+	/**
+	 * @name栏目页
+	 */
+	public function category() {
+		$in = &$this->in;
+		$template_file_extension = substr(C('TMPL_TEMPLATE_SUFFIX'), 1);
+		if ($this->ispost() && $this->in['catids']) {
+			$catids = implode(',', $this->in['catids']);
+			$_c = D('Category');
+			$cats = $_c->field('`catid`, `type`, `name`, `catdir`, `url`')
+					->where((0==$catids ? 1 : '`catid` IN(' . $catids . ')') . ' AND ishtml=1')
+					->order("`catid` DESC")
+					->findAll();
+			$success = '';
+			$error = '<div style="color:red">';
+			foreach ($cats AS $c) {
+				if ($c['type'] == 'page') {  //单页
+					if ($_c->auto_format) {
+						$page_path = FANGFACMS_ROOT . trim(substr($c['url'], strlen(__ROOT__)+1), '/\\');
+					} else {
+						$page_path = FANGFACMS_ROOT . trim($c['url'], '/\\');
+					}
+					
+					$path_info = pathinfo($page_path);
+					if (is_file($page_path) && $path_info['extension'] == $template_file_extension) {
+						//路径
+						$basepath = $path_info['dirname'] . '/';
+						$d = dir($basepath);
+						while (false !== ($entry = $d->read())) {
+							if (preg_match('/^'.$path_info['filename'].'(_\d*)?\.'.$template_file_extension.'$/', $entry)) {
+								@unlink($basepath . $entry);
+							}
+						}
+					}
+					
+					$success .= $c['name'] . ' 更新成功！</font>';
+				} else {  //内部栏目
+					$basepath = rtrim(FANGFACMS_ROOT, '/\\') . '/' . trim($c['catdir'], '/\\') . '/';
+					if (is_dir($basepath)) {  //存在栏目文件夹
+						$d = dir($basepath);
+						while (false !== ($entry = $d->read())) {  //循环删除栏目主页文件，包括栏目分页文件
+							if (preg_match('/^index(_\d*)?\.'.$template_file_extension.'$/', $entry)) {
+								@unlink($basepath . $entry);
+							}
+						}
+					}
+					
+					$success .= $c['name'] . ' 更新成功！';
+				}
+			}
+			$error .= '</div>';
+			
+			$this->message('<font class="green">' . $success . $error . '</font>' , U('fhtml/category'), 30);
+		} else {  //所有栏目列表
+			$data = D('Category')->field("`catid` AS `id`,`name`,`modelid`,`parentid`")->order("`sort` ASC,`catid` DESC")->findAll();
+			import ( 'Tree', INCLUDE_PATH );
+			$tree = get_instance_of ( 'Tree' );
+			$tree->init ( $data );
+			$str = "<option value='\$id'>\$spacer\$name</option>";
+			$html = $tree->get_tree ( 0, $str );
+			$this->assign('html',$html);
+		}
+		$this->display();
+	}
+	
+	/**
+	 * @name更新详细内容页
+	 */
+	public function show() {
+		$in = &$this->in;
+		$template_file_extension = substr(C('TMPL_TEMPLATE_SUFFIX'), 1);
+		
+		if ($this->ispost() && $in['catids']) {  //获取需要更新的Html列表			
+			$catids = implode(',', $this->in['catids']);
+			$where = "c.`url`!=''";
+			$where .= (0==$catids ? "" : " AND c.`catid` IN($catids)");
+			!empty($in['startid']) && $where .= " AND c.cid >= " . $in['startid'];
+			!empty($in['endid']) && $where .= " AND c.cid <= " . $in['endid'];
+			!empty($in['starttime']) && $where .= " AND c.create_time >= " . strtotime($in['starttime']);
+			!empty($in['endtime']) && $where .= " AND c.create_time <= " . strtotime($in['endtime']);
+			$Content = D('Content');
+			
+			//获取需要更新的内容列表
+			$content_list = $Content->query('SELECT c.cid, c.catid, c.url, cat.catdir FROM `'.C('DB_PREFIX').'content` as c LEFT JOIN `'.C('DB_PREFIX').'category` as cat ON c.catid=cat.catid WHERE ' . $where . ' ORDER BY c.sort ASC,c.catid DESC');
+			if (!empty($content_list) && is_array($content_list)) {
+				foreach ($content_list AS &$cl)
+				{
+					//获取Html绝对地址
+					$cl['url'] = rtrim(FANGFACMS_ROOT, '/\\') . '/' . trim($cl['catdir'], '/\\') . '/' . $cl['url'];
+				}
+			} else {
+				$this->message('<font class="red">没有需要更新的数据！</font>', U('fhtml/show'), 3);
+			}
+
+			$this->assign('pagesize', $in['pagesize']);
+			$this->assign('total', count($content_list));
+			$this->assign('complete', 0);
+			$this->assign('content_list', $content_list);
+		} else if ($this->ispost() && $in['content_list']) {  //开始更新HTML
+			$in['pagesize'] = empty($in['pagesize']) ? 50 : intval($in['pagesize']);
+			$i = 0;
+			if (($_total = count($in['content_list'])) > 0) {
+				foreach ($in['content_list'] AS $k=>$html) {
+					if ($i >= $in['pagesize']) {
+						break;
+					}
+					
+					$base_info = pathinfo($html);
+					//路径
+					$basepath = $base_info['dirname'] . '/';
+					
+					if (is_file($html) && $base_info['extension'] == $template_file_extension) {
+						$d = dir($basepath);
+						while (false !== ($entry = $d->read())) {
+							if (preg_match('/^'.$base_info['filename'].'(_\d*)?\.'.$template_file_extension.'$/', $entry)) {
+								@unlink($basepath . $entry);
+							}
+						}
+					}
+					
+					$i++;
+					$in['complete']++;
+					unset($in['content_list'][$k]);
+					if($k+1 == $_total) $this->message('<font class="green">全部更新完成！</font>', U('fhtml/show'), 5);
+				}
+			}
+			
+			$this->assign('pagesize', $in['pagesize']);
+			$this->assign('total', $in['total']);
+			$this->assign('complete', $in['complete']);
+			$this->assign('content_list', $in['content_list']);
+		} else {  //显示界面
+			$data = D('Category')
+					->field("`catid` AS `id`,`name`,`modelid`,`parentid`")
+					//->where("`ishtml`='1' AND `type`='normal'")
+					->order("`sort` ASC,`catid` DESC")
+					->findAll();
+			import ( 'Tree', INCLUDE_PATH );
+			$tree = get_instance_of ( 'Tree' );
+			$tree->init ( $data );
+			$str = "<option value='\$id'>\$spacer\$name</option>";
+			$html = $tree->get_tree ( 0, $str );
+			$this->assign('html',$html);
+		}
+		
+		$this->display();
+	}
+	
+	/**
+	 * @name生成 sitemap文件
+	 */
+	public function sitemaps()
+	{
+		$in = &$this->in;
+		
+		if ($this->ispost()) {
+			$Setting = M('setting');
+			$cfg_setting = $Setting->getField('var,value');
+			
+			$items = array();   //sitemaps
+			$baidunews_items = array();  //baidunews
+			//首页
+			$items[0] = array(
+				'loc'		=>	$cfg_setting['siteurl'],
+				'lastmod'	=>	date('Y-m-d'),
+				'changefreq'	=>	'daily',
+				'priority'	=>	'1.0'
+			);
+			
+			$Category = M('category');
+			$category_list = $Category->where('`type` IN("normal", "page")')->findAll();
+			
+			foreach ($category_list AS $c) {
+				$status = false;   //判断是否插入到xml
+				switch ($c['type']) {
+					case 'normal':
+						if (file_exists(FANGFACMS_ROOT . $c['url'] . 'index' . C('TMPL_TEMPLATE_SUFFIX'))) {
+							$status = true;
+						}
+						break;
+					case 'page':
+						if (file_exists(FANGFACMS_ROOT . $c['url'])) {
+							$status = true;
+						}
+						break;
+				}
+				$status && $items[] = array(
+					'loc'		=>	$cfg_setting['siteurl'] . '/' . $c['url'],
+					'lastmod'	=>	date('Y-m-d'),
+					'changefreq'	=>	'daily',
+					'priority'	=>	'0.9'
+				);
+			}
+			
+			$Content = D('Content');
+			$limit = $in['baidunum'] > $in['num'] ? $in['baidunum'] : $in['num'];
+			$query = "SELECT {db_prefix}content.*, {db_prefix}category.name AS category_name, {db_prefix}model.tablename FROM {db_prefix}content "
+				   . " LEFT JOIN {db_prefix}category ON {db_prefix}category.catid={db_prefix}content.catid "
+				   . " LEFT JOIN {db_prefix}model ON {db_prefix}category.modelid={db_prefix}model.modelid "
+				   . " ORDER BY update_time DESC LIMIT 0," . $limit;
+			$query = str_replace('{db_prefix}', C('DB_PREFIX'), $query);
+			
+			$content_list = $Content->query($query);
+			//sitemaps
+			require_cache(INCLUDE_PATH . 'sitemaps.class.php');
+			$google_sitemap = new google_sitemap();
+			
+			foreach ($content_list AS $k=>$c) {
+				$link = $cfg_setting['siteurl'] . '/' . ltrim($Content->getUrl($c), '/\\');
+				if ($k < $in['baidunum']) {
+					$items[] = array(
+						'loc'		=>	$link,
+						'lastmod'	=>	date('Y-m-d', $c['update_time']),
+						'changefreq'	=>	$in['content_changefreq'],
+						'priority'		=>	$in['content_priority']
+					);
+				}
+				
+				//获取正文内容，用于baidunews
+				if ($in['mark'] == 1 && $k < $in['num']) {
+					$baidunews_content = $Content->query('SELECT content FROM fangfa_' . $c['tablename'] . ' WHERE cid=' . $c['cid']);
+					$baidunews_items[$k] = $c;
+					$baidunews_items[$k]['content'] = $baidunews_content[0]['content'];
+					$baidunews_items[$k]['siteurl'] = $cfg_setting['siteurl'];
+					$baidunews_items[$k]['link'] = $link;
+					$baidunews_items[$k]['thumb'] = $cfg_setting['siteurl'] . '/' . C('UPLOAD_DIR') . $c['thumb'];
+				}
+			}
+			
+			$google_sitemap->items = $items;
+			$google_sitemap->build(FANGFACMS_ROOT . 'sitemaps.xml');
+			
+			//baidunews
+			if ($in['mark'] == 1) {
+				require_cache(INCLUDE_PATH . 'baidunews.class.php');
+				$baidunews = new baidunews($cfg_setting['seotitle'], $in['email'], $in['time'], $in['num']);
+				$baidunews->baidunews_items = $baidunews_items;
+				$baidunews->file_name = FANGFACMS_ROOT . 'baidunews.xml';
+				$baidunews->set_xml();
+			}
+			
+			$this->message('<font class="green">XML更新成功！</font>', $in['forward']);
+		}
+		
+		$User = M('user');
+		$admin_user = $User->field('email')->order('user_id ASC')->find();
+		$this->assign('admin_email', $admin_user['email']);
+		$this->display();
+	}
+	
+	/**
+	 * @name生成rss文件
+	 */
+	public function rss()
+	{
+		$in = &$this->in;
+		
+		if ($this->ispost()) {
+			$Setting = M('setting');
+			$cfg_setting = $Setting->getField('var,value');
+			
+			$Content = D('content');
+			$limit = $in['baidunum'] > $in['num'] ? $in['baidunum'] : $in['num'];
+			$query = "SELECT {db_prefix}content.*, {db_prefix}category.name AS category_name, {db_prefix}model.tablename FROM {db_prefix}content "
+				   . " LEFT JOIN {db_prefix}category ON {db_prefix}category.catid={db_prefix}content.catid "
+				   . " LEFT JOIN {db_prefix}model ON {db_prefix}category.modelid={db_prefix}model.modelid "
+				   . " ORDER BY update_time DESC LIMIT 0," . $limit;
+			$query = str_replace('{db_prefix}', C('DB_PREFIX'), $query);
+			
+			$content_list = $Content->query($query);
+			
+			require_cache(INCLUDE_PATH . 'Rss.class.php');
+			$encoding =(string) 'UTF-8';
+			$about = (string) $cfg_setting['siteurl'];
+			$title = (string) $cfg_setting['seotitle'];
+			$description = (string) $cfg_setting['seodescription'];
+			$image_link = (string) '';
+			$category = (string) $cfg_setting['companyname'];
+			$cache = (string) 60; // in minutes (only rss 2.0)
+			$rssfile = new RSSBuilder($encoding, $about, $title, $description, $image_link, $category, $cache);
+			
+			/* if you want you can add additional Dublic Core data to the basic 
+			rss file (if rss version supports it) */
+			$publisher = (string) $cfg_setting['companyname']; // person, an organization, or a service
+			$creator = (string) $cfg_setting['companyname']; // person, an organization, or a service
+			$date = (string) time();
+			$language = (string) 'zh';
+			$rights = (string) $cfg_setting['copyright'];
+			$coverage = (string) ''; // spatial location , temporal period or jurisdiction
+			$contributor = (string) $cfg_setting['companyname']; // person, an organization, or a service
+			$rssfile->addDCdata($publisher,	$creator, $date, $language,	$rights, $coverage, $contributor);
+			
+			/* if you want you can add additional Syndication data to the basic rss 
+			file (if rss version supports it) */
+			$period = (string) 'daily'; // hourly / daily / weekly / …
+			$frequency = (int) 1; // every x hours / days / …
+			$base = (string) time()-10000;
+			$rssfile->addSYdata($period, $frequency, $base);
+			
+			/* data for a single RSS item */
+			
+			foreach ($content_list AS $k=>$c) {
+				$about = $link = $cfg_setting['siteurl'] . '/' . ltrim($Content->getUrl($c), '/\\');
+				$title = (string) $c['title'];
+				$description = (string) $c['description'];
+				$subject = (string) $c['category_name']; // optional DC value
+				$date = (string) $c['update_time']; // optional DC value
+				$author = (string) $c['username']; // author of item
+				$comments = (string) $link; // url to comment page rss 2.0 value
+				$image = (string) (!empty($c['thumb']) ? $cfg_setting['siteurl'] . '/' . C('UPLOAD_DIR') . $c['thumb'] : ''); // optional mod_im value for dispaying a different pic for every item
+				$rssfile->addItem($about, $title, $link, $description, $subject, $date,	$author, $comments, $image);
+			}
+			
+			$version = '2.0'; // 0.91 / 1.0 / 2.0
+			//$rssfile->outputRSS($version);
+			
+			$foo = $rssfile->getRSSOutput($version);
+			echo FANGFACMS_ROOT;
+			file_put_contents(FANGFACMS_ROOT . 'rss.xml', $foo);
+			
+			$this->message('<font class="green">RSS更新成功！</font>', $in['forward']);
+		}
+		
+		$this->display();
+	}
+}
\ No newline at end of file

--- admin/Lib/Action/FindexAction.class.php ---
@@ -0,0 +1,245 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FindexAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 后台管理主页
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 后台管理主页
+ *
+ */
+class FindexAction extends FbaseAction {
+
+	/**
+	 * @name后台框架
+	 */
+	public function index() {
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_index();
+		}
+		//角色的菜单
+		$_menu = D('Menu');
+		$where = array(
+			'parentid' => '1',	//后台顶部菜单
+		);
+
+		/*switch ($this->_a_theme) {
+			case 'theme2':
+				$_menu = D ("Menu");
+				$this->assign('menu_html', $_menu->getRoleMenu2(2,$_SESSION['userdata']['roles']));
+				break;
+			case 'theme3':
+			case 'theme4':
+				$_menu = D ("Menu");
+				$this->assign('menu_html', $_menu->getRoleMenu3(2,$_SESSION['userdata']['roles']));
+				break;
+			default :
+				$topMenus = $_menu->where($where)->findAll();
+				$this->assign('topMenus',$topMenus);
+		}*/
+		$_menu = D ("Menu");
+		$this->assign('menu_html', $_menu->getRoleMenu3(1,$_SESSION['userdata']['roles']));
+		
+		$this->assign('companyname',C('COMPANYNAME'));
+		//用户信息
+		$this->display ($this->_a_theme);
+	}
+
+
+	/**
+	 * @name后台主界面上的ajax请求
+	 */
+	private function _ajax_index() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'getmenu':  //获取菜单
+				if ($in['root'] == 'source' && $in['menuid']) {
+					$menuid = intval($in['menuid']);
+				} else {
+					$menuid = intval($in['root']);
+				}
+				$_menu = D ("Menu");
+				$data = $_menu->getRoleMenu($menuid,$_SESSION['userdata']['roles']);
+//				dump($data);exit;
+				die(json_encode($data));
+				break;
+		}
+		exit ();
+	}
+
+	/**
+	 * @name管理主页、显示统计信息
+	 */
+	public function home() {
+		$in = &$this->in;
+		$_user = D ('User');
+		$userdata = $_user->getUserData($_SESSION['userdata']['user_id']);
+
+		if ($_SESSION['userdata']['user_id'] == '999999') {
+				$userdata['user_id'] = '999999';
+				$userdata['username'] = 'Developer';
+				$userdata['rolenickname'] = 'Developer';
+		}
+		if ($userdata['last_login_ip']) {
+			import('ORG.Net.IpArea');
+			$_ipArea = new IpArea(INCLUDE_PATH . '/data/QQWry.Dat');
+			$userdata['last_login_place'] = $_ipArea->get($userdata['last_login_ip']);
+		}
+		$this->assign('userdata',$userdata);
+		$this->display ();
+	}
+
+	/**
+	 * @name后台导航
+	 */
+	public function map() {
+		$this->display();
+	}
+
+	/**
+	 * @name系统信息、环境检测
+	 */
+	public function system() {
+		//允许上传的最大文件大小
+		if (@ini_get ( 'file_uploads' )) {
+			$sys_info ['fileupload'] = ini_get ( 'upload_max_filesize' );
+		} else {
+			$sys_info ['fileupload'] = '<font color="red">未知大小</font>';
+		}
+		//gd信息
+		$sys_info ['gdv'] = $gd = $this->gd_version ();
+		if ($gd == 0) {
+			$sys_info ['gd'] = 'N/A';
+		} else {
+			if ($gd == 1) {
+				$sys_info ['gd'] = 'GD1';
+			} else {
+				$sys_info ['gd'] = 'GD2';
+			}
+			$sys_info ['gd'] .= ' (';
+			/* 检查系统支持的图片类型 */
+			if ($gd && (imagetypes () & IMG_JPG) > 0) {
+				$sys_info ['gd'] .= ' JPEG';
+			}
+			if ($gd && (imagetypes () & IMG_GIF) > 0) {
+				$sys_info ['gd'] .= ' GIF';
+			}
+			if ($gd && (imagetypes () & IMG_PNG) > 0) {
+				$sys_info ['gd'] .= ' PNG';
+			}
+			$sys_info ['gd'] .= ')';
+		}
+		//操作系统
+		$sys_info ['os'] = PHP_OS;
+		$sys_info ['zlib'] = function_exists ( 'gzclose' ); //zlib
+		$sys_info ['safe_mode'] = ( boolean ) ini_get ( 'safe_mode' ); //safe_mode = Off
+		$sys_info ['safe_mode_gid'] = ( boolean ) ini_get ( 'safe_mode_gid' ); //safe_mode_gid = Off
+		$sys_info ['timezone'] = function_exists ( "date_default_timezone_get" ) ? date_default_timezone_get () : '没有设置';
+		$sys_info ['socket'] = function_exists ( 'fsockopen' );
+		$sys_info ['web_server'] = $_SERVER ['SERVER_SOFTWARE']; //web服务器
+
+		$sys_info ['short_open_tag'] = ( boolean ) @ini_get ( 'short_open_tag' ); //短标签功能
+		$sys_info ['php_fopenurl'] = ( boolean ) @ini_get ( 'allow_url_fopen' ); //远程打开,不符合要求将导致采集、远程资料本地化等功能无法应用
+		//GD 不支持将导致与图片相关的大多数功能无法使用
+		$sys_info ['php_dns'] = preg_match ( "/^[0-9.]{7,15}$/", @gethostbyname ( 'www.phpcms.cn' ) ); //域名解析
+		$sys_info ['gzip'] = GZIP && function_exists ( 'ob_gzhandler' ); //开启gzip设置
+
+		$sys_info ['version'] = $this->version;  //cms版本
+		$sys_info ['phpv'] = phpversion ();  //php版本
+		$_db = D ();
+		$ft_min = $_db->query ( "SHOW VARIABLES LIKE 'ft_min_word_len'" );
+		$sys_info ['ft_min_word_len'] = $ft_min [0];
+		$sys_info ['mysqlv'] = mysql_get_server_info ( $_db->getDb ()->getNlinkID () ); //数据库版本
+		$sys_info ['ft_min_word_len'] = $sys_info ['ft_min_word_len']['Value'];  //全文索引最小字长度设定
+		$sys_info ['web_root'] = realpath(FANGFACMS_ROOT); //网站根目录
+		$sys_info ['web_root_relative'] = '/' . __ROOT__; //网站根目录
+		//检测mb扩展是否开启
+		$sys_info ['mb_string'] = (boolean)function_exists('mb_substr');
+		$this->assign ( 'sys_info', $sys_info );
+		$this->display ();
+	}
+
+	/**
+	 * @name获取GD库版本
+	 */
+	private function gd_version() {
+		static $version = - 1;
+		if ($version >= 0) {
+			return $version;
+		}
+		if (! extension_loaded ( 'gd' )) {
+			$version = 0;
+		} else {
+			// 尝试使用gd_info函数
+			if (PHP_VERSION >= '4.3') {
+				if (function_exists ( 'gd_info' )) {
+					$ver_info = gd_info ();
+					preg_match ( '/\d/', $ver_info ['GD Version'], $match );
+					$version = $match [0];
+				} else {
+					if (function_exists ( 'imagecreatetruecolor' )) {
+						$version = 2;
+					} elseif (function_exists ( 'imagecreate' )) {
+						$version = 1;
+					}
+				}
+			} else {
+				if (preg_match ( '/phpinfo/', ini_get ( 'disable_functions' ) )) {
+					/* 如果phpinfo被禁用，无法确定gd版本 */
+					$version = 1;
+				} else {
+					// 使用phpinfo函数
+					ob_start ();
+					phpinfo ( 8 );
+					$info = ob_get_contents ();
+					ob_end_clean ();
+					$info = stristr ( $info, 'gd version' );
+					preg_match ( '/\d/', $info, $match );
+					$version = $match [0];
+				}
+			}
+		}
+		return $version;
+	}
+
+	/**
+	 * @name 得到栏目树
+	 * @param unknown_type $parentid
+	 */
+	private function getTreeByParentId($parentid) {
+        //要返回的数据
+        $data = array();
+        if ($parentid > 0) {
+            $data[0] = F ('category_'.$parentid);
+            if (!empty($data[0]['childrenidarr'])) {
+                foreach ($data[0]['childrenidarr'] as $v) {
+                    $data[] = F ('category_'.$v);
+                }
+            }
+            $data = array_to_tree($data,'catid','parentid' );
+            $return = $data[0];
+        } else {
+            $categorys = D('Category','admin')->field("`name`,`parentid`,`catid`,`catdir`,`url`,`sort`")->order("`sort` ASC")->findAll();
+            $return = array_to_tree($categorys,'catid','parentid');
+        }
+        return $return;
+    }
+
+    /**
+     * @name 测试
+     */
+    public function test() {
+        print_r($this->getTreeByParentId(0));
+    }
+
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FjobAction.class.php ---
@@ -0,0 +1,547 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FjobAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-09-17
+// +----------------------------------------------------------------------
+// | Author: Chao <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 辅助插件 - 人才招聘
+// +----------------------------------------------------------------------
+
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 辅助插件 - 人才招聘
+ *
+ */
+class FjobAction extends FbaseAction {
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'job';
+		
+		if ($in['catid']) {
+			$category = F('category_'.$in['catid'], '', ALL_CACHE_PATH.'cache/');
+			$this->assign('category', $category);
+			$this->assign('catid', $in['catid']);
+			$this->checkPermissions($_SESSION['userdata'], $category['permissions']['admin']);
+		} else $this->message('<font class="red">缺少catid参数！</font>');
+		
+		$this->assign('q_fields', array('name' => '职位名称', 'id' => '职位ID', 'department' => '所属部门'));
+		$this->assign('status', array('0' => '待审', '1' => '已审'));
+		$this->assign('in', $this->in);
+	}
+	
+	/**
+	 * @name检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') return true;
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+	
+	/**
+	 * @name职位列表
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		$where = array();
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`="' . $in['status'] . '"';
+		}
+		if (isset($in['q']) && !empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加职位
+	 */
+	public function add()
+	{
+		$in = &$this->in;
+		$this->assign('end_time', date('Y-m-d', time()+3600*24*31*12));
+		$this->assign('editer_html', Html::editor('info[notes]', '', C('EDITOR_TYPE'), array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+		if ($this->ispost()) {
+			$in['info']['create_time'] = $in['info']['update_time'] = time();
+			$in['info']['end_time'] = strtotime($in['info']['end_time']);
+			
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name编辑职位
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+		
+		if (!$in['id']) $this->message('<font class="red">参数不完整！</font>');
+		if ($in['ajax']) {
+			$this->_ajax_edit();
+			exit;
+		}
+		if ($this->ispost()) {
+			$in['info']['update_time'] = time();
+			$in['info']['end_time'] = strtotime($in['info']['end_time']);
+			
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		$job = M('Job')->find($in['id']);
+		$this->assign('editer_html', Html::editor('info[notes]', $job['notes'], C('EDITOR_TYPE'), array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @nameAJAX编辑
+	 */
+	private function _ajax_edit()
+	{
+		$in = &$this->in;
+		$_model = M('Job');
+		switch ($in['ajax']) {
+			case 'sort':  //排序
+				$in['id'] && $in['id'] = (int)substr($in['id'],5);
+				if ($in['id'] && !empty($in['sort'])) {
+					$data = $_model->find($in['id']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_model->save($data)) {
+							//更新缓存
+							die($data['sort']);
+						}
+					}
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name修改状态
+	 */
+	public function check()
+	{
+		$in = &$this->in;
+		if (!$in['id']) $this->message('<font class="red">参数不完整！</font>');
+		$data = array(
+			'id'	=>	$in['id'],
+			'status'	=>	$in['status']
+		);
+		M('Job')->save($data);
+		redirect($this->forward);
+	}
+	
+	/**
+	 * @name删除职位
+	 */
+	public function delete()
+	{
+		//$this->in['id'] = $this->in['info']['id'];
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		//		die($this->getInTableName($name));
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+        //fangfa 2013-1-15 解决不能删除的问题
+        if($in['info']['id']){
+            $id = implode(',',$in['info']['id']);
+            $option['where'] = " `id` in (".$id.") ";
+        }else{
+            $id = $in['id']; 
+            $option['where'] = " `id` in (".$id.") ";
+        }
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+	
+	/**
+	 * @name简历列表
+	 */
+	public function resume_manage()
+	{
+		$in = &$this->in;
+		$in['_tablename'] = 'job_apply';
+		if (!array_key_exists('job_id', $in)) $this->message('<font class="red">参数不完整！</font>');
+		
+		$where = array();
+		$where[] = ' `job_id`=' . $in['job_id'];
+		if (isset($in['status']) && $in['status'] != 'all') {
+			$where[] = ' `status`="' . $in['status'].'"';
+		}
+		if (isset($in['user_sex']) && $in['user_sex'] != 'all') {
+			$where[] = ' `user_sex`="' . $in['user_sex'].'"';
+		}
+		if (isset($in['q']) && !empty($in['q']) && $in['q'] != '请输入关键字') {
+			$where[] = ' `' . $in['field'] . '` LIKE "%' . $in['q'] . '%"';
+		}
+		if (count($where) > 0) {
+			$in['where'] = implode(' AND ', $where);
+		}
+		
+		$this->assign('status', array('未阅' => '未阅', '已阅' => '已阅', '候选' => '候选', '在职' => '在职'));
+		$this->assign('user_sex', array('all'=>'不限', '男' => '男', '女' => '女'));
+		$this->assign('q_fields', array('user_name' => '姓名', 'user_card' => '身份证'));
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name查看简历
+	 */
+	public function resume_show() {
+			$in = &$this->in;
+			if (empty($in['apply_id'])) {
+				die('缺少参数apply_id！');
+			}
+			$_model = M('job_apply');
+			$data = $_model->find($in['apply_id']);
+			
+			$this->assign('data', $data);
+			$this->assign('status', array('未阅' => '未阅', '已阅' => '已阅', '候选' => '候选', '在职' => '在职'));
+			$this->display();
+	}
+	
+	/**
+	 * @name删除简历
+	 */
+	public function resume_delete()
+	{
+		$in = &$this->in;
+		$in['_tablename'] = 'job_apply';
+		if (!empty($in['info']['id'])) {
+			$this->in['id'] = $this->in['info']['id'];
+		}
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		//		die($this->getInTableName($name));
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+	
+	/**
+	 * @name编辑简历
+	 */
+	public function resume_edit()
+	{
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_resume_edit();
+		}
+	}
+	
+	/**
+	 * @nameAJAX编辑
+	 */
+	protected function _ajax_resume_edit()
+	{
+		$in = &$this->in;
+		$_model = M('job_apply');
+		$data['status'] = $in['status'];
+		$data['id'] = $in['job_apply_id'];
+		if ($_model->save($data)) {
+			die(json_encode('ok'));
+		} else die(json_encode('error'));
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FloginAction.class.php ---
@@ -0,0 +1,245 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FloginAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 登录、登出模块控制器，安全考虑，不继承fbase
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 登录登出模块
+ *
+ */
+class FloginAction extends Action {
+
+	public $in = array ();
+
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		
+		import ( 'ORG.Util.Input' );
+		//输入过滤
+		$this->in = &Input::getVar ( $_REQUEST );
+
+		//定义相对网站的跟目录
+		define ( 'URL_ROOT', C ( 'SITE_TO_ROOT' ) );
+		//各资源文件夹目录
+		define ( '_PUBLIC_', URL_ROOT . 'admin/Public/' );
+		//前台模板文件目录路径
+		define ( 'FRONT_TEMPLATE_PATH', FANGFACMS_ROOT . 'public/theme/' . C ( 'DEFAULT_THEME' ) );
+
+		$this->forward = $this->in ['forward'] ? $this->in ['forward'] : (isset ( $_SERVER ['HTTP_REFERER'] ) ? $_SERVER ['HTTP_REFERER'] : '');
+		$this->assign ( 'forward', $this->forward );
+	}
+
+	/**
+	 * @name系统登录
+	 */
+	public function index() {
+		$in = &$this->in;
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			$name = C ( 'TOKEN_NAME' );
+			if (! $_SESSION [$name] || $_SESSION [$name] != $in [$name]) {
+				die ( json_encode ( array ('code' => 'n', 'text' => br2li ( '请不要非法或者重复提交页面！' ) ) ) );
+			}
+			//检查验证码
+			if ($_SESSION ['need_verify'] && $_SESSION ['verify'] != md5 ( $in ['info'] ['verify'] )) {
+				if ($in ['ajax'])
+					die ( json_encode ( array ('code' => 'n', 'text' => '验证码错误！' ) ) );
+				$this->assign ( 'message', '验证码错误' );
+			} else {
+				//开发人员登录
+				if ($in ['info'] ['username'] == 'developer') {
+					if ($in ['info'] ['password'] == C ( 'DEVELOPER_PASSWORD' )) {
+						$_SESSION ['userdata'] = array ('user_id' => 999999, 'username' => 'developer', 'roles' => array ('developer' ) );
+						if ($in ['ajax'])
+							die ( json_encode ( array ('code' => 'y', 'text' => '登入成功' ) ) );
+						redirect ( U ( 'findex/index?forward=', $this->forward ) );
+					} else {
+						$_SESSION ['need_verify'] = true;
+						if ($in ['ajax'])
+							die ( json_encode ( array ('code' => 'n', 'text' => '密码错误' ) ) );
+						redirect ( U ( 'flogin/login' ) );
+					}
+				}
+				//验证登录
+				import ( 'User', INCLUDE_PATH );
+				$_user = get_instance_of ( 'User' );
+				if ($_user->checkLogin ( $in ['info'], true )) {
+					unset ( $_SESSION ['need_verify'] );
+					unset ( $_SESSION ['verify'] );
+					if ($in ['ajax'])
+						die ( json_encode ( array ('code' => 'y', 'text' => '登入成功！' ) ) );
+					redirect ( U ( 'findex/index?forward=', $this->forward ) );
+				} else {
+					$_SESSION ['need_verify'] = true;
+					if ($in ['ajax'])
+//						die ( json_encode ( array ('code' => 'n', 'text' => br2li ( $_user->getError () ) ) ) );
+						die ( json_encode ( array ('code' => 'n', 'text' => $_user->getError () ) ) );
+					$this->assign ( 'message', $_user->getError () . '密码错误！');
+				}
+			}
+		}
+		$this->assign ( 'verify', $_SESSION ['need_verify'] );
+		$this->assign('companyname', C('COMPANYNAME'));
+		//是否需要验证码
+		$this->display ();
+	}
+
+	/**
+	 * @name注销登录
+	 */
+	public function logout() {
+		if (isset ( $_SESSION ['userdata'] )) {
+			import ( 'Act', INCLUDE_PATH );
+			$auth = get_instance_of ( 'Act' );
+//			$auth->clearUser ();
+			session_destroy();
+			$this->assign ( "forward", __URL__ . '/flogin/' );
+			$this->message ( L ( '登出成功' ), U('flogin/index'));
+		} else {
+			$this->message ( L ( '已经登出' ) );
+		}
+	}
+
+	/**
+	 * @name验证码
+	 */
+	public function verify() {
+		import ( "ORG.Util.Image" );
+		Image::buildImageVerify ();
+	}
+	
+	/**
+	 * @name找回密码
+	 *
+	 */
+	public function getpwd(){
+		$in = &$this->in;
+		if ($this->ispost()) { //处理提交
+			//令牌验证
+			$name = C ( 'TOKEN_NAME' );
+			if (! $_SESSION [$name] || $_SESSION [$name] != $in [$name]) {
+				die ( json_encode ( array ('code' => 'n', 'text' => br2li ( '请不要非法或者重复提交页面！' ) ) ) );
+			}
+			//检查验证码
+			if ($_SESSION ['need_verify'] && $_SESSION ['verify'] != md5 ( $in ['info'] ['verify'] )) {
+				if ($in ['ajax'])
+					die ( json_encode ( array ('code' => 'n', 'text' => '验证码错误！' ) ) );
+				$this->assign ( 'message', '验证码错误' );
+			} else {
+				//验证用户名
+				import ( 'User', INCLUDE_PATH );
+				$_user = get_instance_of ( 'User' );
+				if ($_user->checkGetPwd ( $in ['info'] )) {
+					unset ( $_SESSION ['need_verify'] );
+					unset ( $_SESSION ['verify'] );					
+					$code = $_user->strEncode();
+					$_user->updateVerify($in['info']['username'], $code);
+					import('SendMail',INCLUDE_PATH);
+				    $_sendmail = get_instance_of('SendMail');
+				    $_mail_server = C('MAIL_SERVER');
+				    $_mail_port = C('MAIL_PORT');
+				    $_mail_user = C('MAIL_USER');
+				    $_mail_password = C('MAIL_PASSWORD');
+				    $_mail_type = C('MAIL_TYPE');
+				    $_sendmail->set($_mail_server, $_mail_port, $_mail_user, $_mail_password, $_mail_type);
+				    if ($in ['ajax']){
+				    	$data = $_user->field("`user_id`,`email`")->getByUsername($in['info']['username']);
+				    	die ( json_encode ( array ('code' => 'y', 'text' => $_sendmail->send(
+				    	$data['email'],
+				    	L('找回密码'),
+						"亲爱的用户{$in['info']['username']}：您好！<br/><br/>　　重新设置密码请访问以下链接（注意：此链接有效期为三天）：<br/>{C('SITEURL')}/admin.php?m=flogin&a=setpwd&code={$code}",
+				    	$_mail_user)? "设置密码邮件已发送到您的注册邮箱，请注意查收！" : $_sendmail->error[0][1] ) ) );
+				    }
+					redirect ( U ( 'findex/index?forward=', $this->forward ) );
+				} else {
+					$_SESSION ['need_verify'] = true;
+					if ($in ['ajax'])
+						die ( json_encode ( array ('code' => 'n', 'text' => $_user->getError () ) ) );
+					$this->assign ( 'message', $_user->getError () . '用户名错误！');
+				}
+			}
+		}
+		$this->assign ( 'verify', $_SESSION ['need_verify'] );
+		$this->assign('companyname', C('COMPANYNAME'));
+		//是否需要验证码
+		$this->display ();
+	}
+	
+	/**
+	 * @name设置密码
+	 *
+	 */
+	public function setpwd(){
+		$in = &$this->in;
+		import ( 'User', INCLUDE_PATH );
+		$_user = get_instance_of('User');
+		$userData = $_user->getByVerify($in['code']);
+		if (!empty($userData) ) {
+			$last_time = strtotime($_user->strDecode($userData['verify']));
+			$invalid_time = $last_time + 3*3600*24;
+			if(time()<$invalid_time){
+				if($this->ispost()) { //处理提交
+					$_user->updatePassword($userData['username'], $in['info']['new_password']);
+					$_user->updateVerify($userData['username'], md5(time()));
+					if ($in ['ajax']){
+					    die ( json_encode ( array ('code' => 'y', 'text' => '密码重置成功！' ) ) );
+					}
+					redirect ( U ( 'findex/index?forward=', $this->forward ) );
+				}
+				elseif ($this->isget()) { //处理链接
+					$this->assign ( 'verify', $_SESSION ['need_verify'] );
+					$this->assign('companyname', C('COMPANYNAME'));
+					$this->assign('username', $userData['username']);
+					$this->assign('code', $userData['verify']);
+					//是否需要验证码
+					$this->display ();
+				}
+				else{
+					$this->message(L('非法提交数据！'), '?m=flogin&a=index');
+				}
+			}
+			else{
+				$this->message(L('此链接已过期！'), '?m=flogin&a=index');
+			}
+		}
+		else{
+			$this->message(L('非法进入或链接已失效！'), '?m=flogin&a=index');
+		}
+	}
+
+
+	/**
+	 * @name提示消息，并跳转到$url
+	 */
+	protected function message($message, $url = '', $wait = 3, $exit = true) {
+		if (empty ( $url ))
+			$url = $this->forward;
+		$message = str_ireplace('<br>','<br />',$message);
+		$message = str_ireplace('<br/>','<br />',$message);
+		$message = br2li($message);
+		$this->assign ( 'msgTitle', '系统提示' );
+		$this->assign ( 'message', $message ); // 提示信息
+		//保证输出不受静态缓存影响
+		C ( 'HTML_CACHE_ON', false );
+		// 成功操作后默认停留1秒
+		$this->assign ( 'waitSecond', $wait );
+		// 默认操作成功自动返回操作前页面
+		$this->assign ( "jumpUrl", $url );
+		$this->display ( C ( 'TMPL_ACTION_MESSAGE' ) );
+		$exit && exit ();
+	}
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/FmagazineAction.class.php ---
@@ -0,0 +1,588 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FloginAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-8-16
+// +----------------------------------------------------------------------
+// | Author: Mark 
+// +----------------------------------------------------------------------
+// | 文件描述: 电子报刊
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 登录登出模块
+ *
+ */
+class FmagazineAction extends FbaseAction {
+
+	protected $_category = '';
+	protected $category_data = '';
+	/**
+	 * @name内容管理初始化，主要用户检查操作权限
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		$cat = F("category_".$in['catid']);
+		$this->assign("cat",$cat);
+		if (strtolower(MODULE_NAME) == 'fmagazine') {
+			if ($in['catid']) { //检查栏目操作权限
+				$this->_category = D ('Category');
+				$this->category_data = $this->_category->find((int)$in['catid']);
+				//$this->assign('cat',$this->category_data);
+				//$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+			} else {
+				$this->message('<font class="red">没有选择要操作的栏目~！</font>');
+			}
+		}
+	}
+	
+	public function manage(){
+		$in = &$this->in;
+		$_magazine = D ( 'Magazine' );
+		//表前缀
+		$db_pre = C('DB_PREFIX');
+		$where = array ();
+		$where["{$db_pre}magazine.catid"] = $in['catid'];
+		$data = $_magazine->where($where)->order("sort asc")->select();
+		
+		import ( 'Tree', INCLUDE_PATH );
+		$parent_id = 0;
+		$tree = get_instance_of ( 'Tree' );
+		$tree->init ( $data );
+		$str = "<tr>
+				  <!--<td><input type='checkbox' rel='checkbox' name='info[id][]' value='\$id' /></td>-->
+				  <td class='editable_sort pointer' id='sort_\$id'>\$sort</td>
+				  <td>\$id</td>
+				  <td>\$spacer\$title\$is_images</td>
+				  <td>\$create_time&nbsp;</td>
+				  <td>\$update_time&nbsp;</td>
+				  <td><!--\$access | -->\$edit | \$editiamges | \$delete</td>
+				</tr>";
+		$categorys_option = $tree->get_tree ( 0, $str);
+		$this->assign ( 'html',$categorys_option );	//已有分类
+		$this->display();
+	}
+	
+ 	public function add(){
+		$in = &$this->in;
+		$_magazine = D('Magazine');
+		
+		if ($in['dosubmit']) {
+			if (false === $_magazine->add($in['info'])) {
+			 	$this->message($_magazine->error, $this->forward);
+			}else {
+			 	$this->message("添加杂志成功", U("fmagazine/manage?catid=".$in['catid']));
+			}
+		}
+		import ( 'Tree', INCLUDE_PATH );
+		$parent_id = 0;
+		$tree = get_instance_of ( 'Tree' );
+		$categorys = $_magazine -> field(" `id`,`title`,`parentid`") -> where("`catid`=".$in['catid'])->findAll();
+		$tree->init ( $categorys );
+		$str = "<option value='\$id' \$selected>\$spacer\$title</option>\n";
+		$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+		$this->assign ( 'html',$categorys_option );	//已有分类
+		$this->display();
+ 	}
+ 	
+ 	public function edit(){
+ 		$in = &$this->in;
+ 		if ($in['ajax']) { $this->_edit_sort(); }
+		$_magazine = D ( 'Magazine' );
+ 		//删除一个杂志及子级杂志。
+ 		if (isset($in['do']) && $in['do'] == "delete" ) {
+ 			$parentid = $_magazine->where("id=".$in['id'])->getField("parentid");
+ 			if (false == $_magazine -> del($parentid, $in['catid'], $in['id'])) {
+			 	$this->message($_magazine->error, $this->forward);
+			}else {
+			 	$this->message("删除杂志成功！", U("fmagazine/manage?catid=".$in['catid']));
+			}
+ 		}
+ 		if ($in['dosubmit']) {
+			if (false === $_magazine->where("id=".$in['info']['id'])->save($in['info'])) {
+			 	$this->message($_magazine->error, $this->forward);
+			}else {
+			 	$this->message("修改杂志成功", U("fmagazine/manage?catid=".$in['catid']));
+			}
+ 		}
+ 		import ( 'Tree', INCLUDE_PATH );
+		$parent_id = 0;
+		$tree = get_instance_of ( 'Tree' );
+		$categorys = $_magazine -> field(" `id`,`title`,`parentid`") -> where("`catid`=".$in['catid'])->findAll();
+		$tree->init ( $categorys );
+		$str = "<option value='\$id' \$selected>\$spacer\$title</option>\n";
+		$categorys_option = $tree->get_tree ( 0, $str, $parent_id);
+		$this->assign ( 'html',$categorys_option );	//已有分类
+		
+ 		$data = $_magazine->where("id=".$in['id']." and catid=".$in['catid'])->find();
+ 		$this->assign("data",$data);
+ 		$this->display();
+ 	}
+ 	
+ 	protected function _edit_sort(){
+ 		$in = &$this->in;
+ 		$in['id']  = substr($in['mid'],5);
+		$in['sort'] = intval($in['sort']);
+		if ($in['sort'] == '0' || !empty($in['sort'])) {
+			$_magazine = M ('Magazine');
+			$data = $_magazine->find($in['id']);
+			if (is_array($data)) {
+				$data['sort'] = $in['sort'];
+				if (false !== $_magazine->save($data)) {
+					echo $data['sort'];
+					exit ();
+				}
+			}
+		}
+		echo '';
+ 	}
+ 	
+ 	public function editimages(){
+ 		$in = &$this->in;
+ 		$_magazine = D("Magazine");
+ 		if ($in['do']) {
+ 			$this->image();
+ 			exit();
+ 		}
+ 		if($in['dosubmit']){
+ 			if( false === $this->deal_image() ){
+			 	$this->message("修改导图失败", $this->forward);
+			}else {
+			 	$this->message("修改导图成功！", U("fmagazine/manage?catid=".$in['catid']));
+ 			}
+ 		}
+ 		$data = $_magazine->where("id=".$in['id'])->find();
+ 		if( empty($data['images']) ){
+ 			$this->message("没有上传杂志封面，请上传杂志图片！",U("fmagazine/edit?id=".$data['id']."&catid=".$data['catid']));
+ 		}
+ 		$data['images'] = __ROOT__."/". C("UPLOAD_DIR").$data['images'];
+ 		$this->assign("data",$data);
+ 		$this->display();
+ 	}
+ 	/**
+ 	 * 编辑杂志图片
+ 	 * 处理提交过来的数据，保存
+ 	 * */
+ 	private function deal_image(){
+ 		$in = &$this->in;
+ 		//得到关联的文章 cid
+ 		preg_match_all('/href=\"([^\"]+?)\"/',$in['html_container'],$match);
+ 		$cid = array();
+ 		if(!empty($match[1])){
+ 			foreach ($match[1] as $t){
+	 			$path = pathinfo($t);
+	 			$cid[] = $path['filename'];
+	 		}
+	 		$cid = implode(",", $cid);
+ 		}
+ 		
+ 		$_magazine = D("Magazine");
+ 		
+ 		$bool = $_magazine->where("id=".$in['info']['id'])->save(array('img_map'=>$in['html_container'],'content_id'=> $cid));
+ 	
+ 		if ($bool) {
+ 			$this->message("编辑成功！",U("fmagazine/manage?catid=".$in['info']['catid']));
+ 		}else {
+ 			$this->message("编辑失败！",U("fmagazine/manage?catid=".$in['info']['catid']));
+ 		}
+ 		
+ 	}
+ 	/**
+ 	 * 得到该栏目下的所有文章
+ 	 * 输出页面，供图片地址选择链接
+ 	 * */
+ 	public function image(){
+ 		$in = &$this->in;
+		$_content = D("Content c");
+		$db_pre = C('DB_PREFIX');
+		$c = $_content->join("{$db_pre}category ct on c.catid=ct.catid")->field("c.cid, c.url, c.title, ct.catdir")->where("c.catid=".$in['catid'])->findAll();
+		$r = array();
+		foreach ($c as $t){
+			$r[]= "{'id':".$t['cid'].",'url':'". __ROOT__."/".$t['catdir']."/".$t['url']."','title':'".$t['title']."'}";
+		}
+		if (!empty($t)) {
+			echo "[".implode(",",$r)."]";
+			exit();
+		}else {
+			echo "";
+		}
+	}
+	
+	/**************************文章管理***********************/
+	
+	public function page_manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_content = D ( 'Content' );
+		//表前缀
+		$db_pre = C('DB_PREFIX');
+		//查询条件
+		$where = array ();
+		$where["{$db_pre}content.catid"] = $in['catid'];
+		if (isset($in['status'])) {
+			$where["{$db_pre}content.status"] = $in['status'];
+			$this->assign('status',$in['status']);
+		} else {  //显示所有非回收站里的内容
+			$where["{$db_pre}content.status"] = array('gt', '-1'); 
+		}
+		if ($in['q'] && $in['q'] != '请输入关键字') {
+			$in['q'] = urldecode($in['q']);
+			$where["{$db_pre}content.{$in['field']}"] = array('like',"%{$in['q']}%");
+		}
+		//排序条件
+		$order = " {$db_pre}content.`sort` ASC,{$db_pre}content.`cid` DESC ";
+		//join  count表
+		$join = "{$db_pre}content_count ON ";
+		$join .= "{$db_pre}content.cid={$db_pre}content_count.cid ";
+		//field
+		$field = "{$db_pre}content.*";
+		$field .= ",{$db_pre}content_count.`hits`,{$db_pre}content_count.`comments`,{$db_pre}content_count.`comments_checked`";
+		//统计模型数量
+		$data ['count'] = $_content->join($join)->where ( $where )->count ();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] = $_content->field($field)->join($join)->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		if (is_array($data ['info'])) {
+			foreach ($data ['info'] as $k=>$v) {
+				$data['info'][$k]['url'] = $_content->getUrl($v);
+			}
+		}
+		//同类型分类下拉列表json
+		$categorys = $this->_category->getSameCategorys($this->category_data['catid']);
+		$arr = array();
+		if (is_array($categorys)) {
+			foreach ($categorys as $k=>$v) {
+				$arr[$v['catid']] = $v['name'];
+				$categorys[$k]['id'] = $v['catid'];
+			}
+			$this->assign('cat_json',json_encode($arr));
+			//树形栏目下拉框
+			import('Tree',INCLUDE_PATH);
+			$_tree = get_instance_of('Tree');
+			$_tree->init ( $categorys );
+			$str = "<option value='\$catid'>\$spacer\$name</option>";
+			$this->assign('category_tree',$_tree->get_tree ( 0, $str ));
+		}
+		$this->assign ( 'data', $data );
+		$this->assign('in', $in);
+		$this->display();
+	}
+
+	/**
+	 * @name录入要显示的内容
+	 */
+	public function page_add() {
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_add();
+		}
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$_content = D ('Content');
+			//令牌验证
+			if (!$_content->autoCheckToken($in)) $this->message('<font class="red">请不要非法提交或者重复刷新页面！</font>');
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			$return = $_content->add($in['info']);
+			if (false !== $return) {				  
+				$this->message('<font class="green">内容保存成功！</font>',U('fmagazine/page_manage?catid='.$in['catid']),3,false);
+				//应用扩展，实现ping(ping服务),clear_html(更新静态页面),由于tags参数不能传数组，请将数组参数格式化
+				tag('after_content_add', serialize($_content->get($return,'all')));
+				exit;
+			} else {
+				$this->message('<font class="red">' . $_content->getError() . '内容保存失败！</font>');
+			}
+		}
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,array("catid"=>$in['catid'],"classify_select"=>$in['catid']));
+		$this->assign('form_data',$form);
+		$this->assign('catid',$in['catid']);
+		$this->display();
+	}
+
+	/**
+	 * @name添加内容时候的ajax请求
+	 */
+	protected function _ajax_add() {
+		$in = &$this->in;
+		$cat_data = $this->category_data;
+		switch ($in['ajax']) {
+			case 'check_title':
+				$_content = D ('Content');
+				if ($_content->titleExist($in['c_title'])) {
+					die('此标题已经被使用过！');
+				} else {
+					die('此标题还没有被使用过！');
+				}
+				break;
+			default:
+				break;
+		}
+	}
+
+	/**
+	 * @name更新内容
+	 */
+	public function page_edit() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_ajax_edit();
+		if ($in['do']) $this->_do_edit();
+		if (!$in['cid']) $this->message('<font class="red">参数错误，无法继续该操作！</font>');
+		$_content = D ('Content');
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$in['info']['cid'] = &$in['cid'];
+			//令牌验证
+//			if (!$_content->autoCheckToken($in)) $this->message('请不要非法提交或者重复刷新页面！');,由于tags参数不能传数组，请将数组参数格式化
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			if (false !== $_content->update($in['info'],$in['info']['cid'])) {				
+				$this->message('<font class="green">内容更新成功！</font>',U('fmagazine/page_manage?catid='.$in['catid']));
+				//应用扩展，实现ping(ping服务),clear_html(更新静态页面)
+				tag('after_content_add', serialize($_content->get($in['cid'], 'all')));
+			} else {
+				$this->message('<font class="red">' . $_content->getError() . '内容更新失败！</font>');
+			}
+		}
+		//获取信息详细内容
+		$data = $_content->get($in['cid'],'all');
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,$data,array('url'=>'readonly="readonly"'));
+		$this->assign('form_data',$form);
+		$this->assign('data',$data);
+		$this->display();
+	}
+
+	/**
+	 * @name 处理编辑的AJAX请求
+	 */
+	private function _ajax_edit() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'sort':  //更新排序
+				$in['cid'] && $in['cid'] = substr($in['cid'],5);
+				$in['sort'] = intval($in['sort']);
+				if ($in['sort'] == '0' || !empty($in['sort'])) {
+					$_content = M ('Content');
+					$data = $_content->find($in['cid']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_content->save($data)) {
+							echo $data['sort'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'savetitle':  //更新标题
+				$in['cid'] && $in['cid'] = substr($in['cid'],6);
+				if (!empty($in['title'])) {
+					$_content = M ('Content');
+					$data = $_content->find($in['cid']);
+					if (is_array($data)) {
+						$data['title'] = $in['title'];
+						if (false !== $_content->save($data)) {
+							echo $data['title'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'updatetime':  //更改 更新时间
+				$in['cid'] && $in['cid'] = substr($in['cid'],5);
+				if (!empty($in['updatetime'])) {
+					$_content = M ('Content');
+					$data = $_content->find($in['cid']);
+					if (is_array($data)) {
+						$data['update_time'] = strtotime($in['updatetime']);
+						if (false !== $_content->save($data)) {
+							echo date('Y-m-d',$data['update_time']);
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'category':  //更换栏目
+				$in['cid'] && $in['cid'] = substr($in['cid'],9);
+				if (!empty($in['new_catid'])) {
+					if ($in['catid'] == $in['new_catid']) {
+						echo $this->category_data['name'];
+						exit ();
+					} else { //更新
+						$_content = M ('Content');
+						$data = $_content->field("`cid`,`catid`")->find($in['cid']);
+						if (is_array($data)) {
+							$data['catid'] = $in['new_catid'];
+							if (false !== $_content->save($data)) {
+								$category_data = F ('category_' . $in['new_catid']);
+								echo $category_data['name'];
+								exit ();
+							}
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'getclassify':
+				if($in['cid']){
+					$category = D('Category')->getTreeByParentId($in['cid']);
+					if(!empty($category['child'])){
+						$html = '';
+						foreach($category['child'] as $k=>$v){
+							$html .= '<option value="'.$v['catid'];
+							if($k==1){
+								$html .= 'selected';
+							}
+							$html .= '">'.$v['name'].'</option>';
+						}
+						die($html);
+					}
+					die('false');
+				}
+				die('false');
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name获取分类信息
+	 */
+	public function getclassify(){
+		$in = &$this->in;
+		if($in['dosubmit']){
+			if($in['topcatid'] && $in['catid']){
+				if(false !== D('Category')->settopcatid($in['catid'],$in['topcatid'])){
+						echo '<script>alert("提交成功!")</script>';
+						//$this->message('提交成功！');
+					}else{
+						echo '<script>alert("提交失败!")</script>';
+						//$this->message('提交失败！');
+					}
+			}
+			return false;
+		}
+		if($in['catid']){
+			$category = D('Category')->field("`modelid`")->where("`catid`=".$in['catid'])->find();
+			if(!empty($category)){
+				$classify = D('Category')->field("`catid` as 'id', `parentid`, `name`, `topcatid`")->where("`cattype`='cla' AND `modelid`=".$category['modelid'])->findAll();
+				if(empty($classify)) die('没有查到分类数据');
+				foreach($classify as $k=>$v){
+					if(!empty($classify[$k]['topcatid'])){
+						$tid_array = split(',',$classify[$k]['topcatid']);
+						if(in_array($in['catid'],$tid_array)){
+							$classify[$k]['checked'] = 'checked';
+						}
+					}
+				}
+				$this->assign('catid',$in['catid']);
+		 		$this->assign ( 'data', $classify );
+				$this->display('select_classify');
+			}
+			return false;
+		}
+		return false;
+	}
+
+	/**
+	 * @name操作
+	 */
+	protected function _do_edit() {
+		$in = &$this->in;
+		$_c = D ('Content');
+		if (!$in['cid'] && empty($in['info'])) $this->message('<font class="red">未选择操作项！</font>');
+		switch ($in['do']) {
+			case 'recycle':  //移动到回收站、即 status => '-1'
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,'-1')) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'restore': //从回收站还原，还原后为待审状态,sort为1
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,'0')) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'status': //标记为已审，待审
+				if (!in_array($in['dostatus'],array('0','9'))) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,$in['dostatus'])) {
+					$this->message('<font class="green">操作成功！</font>',U('fcontent/manage?catid='.$in['catid']),1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'moveto': //移动到其它栏目
+				if (!$in['moveto']) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->moveto($idArr,$in['moveto'])) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+
+	/**
+	 * @name彻底删除信息
+	 */
+	public function page_delete() {
+		$in = &$this->in;
+		if (!$in['cid']) $this->message('<font class="red">没有选择操作项！</font>');
+
+		$_c = D('Content');
+		if (is_numeric($in['cid'])) {
+			$_c->delete(array($in['cid']));
+			$this->message('<font class="green">删除成功！</font>');
+		} elseif ($in['cid'] == 'all') { //清空回收站
+			$_c->delete('all', $in['catid']);
+			$this->message('<font class="green">删除成功！</font>');
+		}
+		//删除内容后的操作：包括更新相关列表页实体文件，删除详细页实体文件，更新首页实体文件
+		tag('after_content_delete');
+	}
+	
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/FmanagerAction.class.php ---
@@ -0,0 +1,252 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FmanagerAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2011-1-30
+// +----------------------------------------------------------------------
+// | Author: 孙斌 <sunyichi@163.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  管理员管理
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name RBAC访问控制设置
+ *
+ */
+class FmanagerAction extends FbaseAction {
+	
+	/**
+	 * User类对象
+	 * @var object
+	 */
+	protected $_user = '';
+	
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		import('User',INCLUDE_PATH);//导入User类
+		//所有管理员角色
+		$this->_user = get_instance_of('User');
+		$roles = D('Role')->field("`role_id`,`nickname`")->where("`status`='1' and `isadmin`='1'")->order("`role_id` ASC ")->findAll();
+		$this->assign('roles',$roles);
+	}
+	
+	/**
+	 * @name 管理员管理
+	 *
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$where = array();
+		if (true !== C('USER_PASSPORT_ON')) {
+			$_user = M ('User');
+			//表前缀
+			$db_pre = C('DB_PREFIX');
+			$data = array ();
+			//查询条件
+			$where = array ();
+			$where["{$db_pre}user.isadmin"] = 1;
+			if ($in['role_id']) {
+				$where["{$db_pre}role_user.role_id"] = $in['role_id'];
+			}
+			if ($in['q'] && $in['q'] != '请输入关键字') {
+				if($in['type']=='rolename')$where["{$db_pre}role.name"] = $in['q'];
+				else if($in['type']=='rolenickname')$where["{$db_pre}role.nickname"] = $in['q'];
+				else $where["{$db_pre}user." . $in['type']] = $in['q'];
+			}
+			//排序条件
+			if ($in['order']) {
+				$order = "{$db_pre}user.`user_id` DESC";
+			} else {
+				$order = "{$db_pre}user.`user_id` DESC";
+			}
+			//left join 表 role_user 后 left join role
+			$join_role_user = "`{$db_pre}role_user`
+					 		  ON ({$db_pre}role_user.user_id={$db_pre}user.user_id)";
+			$join_role = "`{$db_pre}role`
+					 	 ON ({$db_pre}role_user.role_id={$db_pre}role.role_id)";
+			//查找字段
+			$field = "{$db_pre}user.*,
+					  {$db_pre}role.nickname AS `rolenickname`,
+					  {$db_pre}role.name AS `rolename`";
+			//统计管理员数量
+			$data ['count'] = $_user->join($join_role_user)->join($join_role)->where ( $where )->count ();			
+			//初始化分页类
+			$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+			$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );			
+			//分页代码
+			$data ['pages'] = $Page->show ();			
+			//当前页数据
+			$data ['info'] = $_user->field($field)->join($join_role_user)->join($join_role)->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		} else { //处理通行证模式
+			//TODO
+		}
+		//IP->地址
+		if (is_array($data['info'])) {
+			import('ORG.Net.IpArea');
+			$_ipArea = new IpArea(INCLUDE_PATH . '/ipdata/QQWry.Dat');
+			foreach ($data['info'] as $k=>$v) {
+				$data['info'][$k]['last_login_location'] = $_ipArea->get($v['last_login_ip']);
+			}
+		}
+		$this->assign ('data', $data);
+		$this->assign('in', $this->in);
+		$this->display();
+	}
+	
+	/**
+	 * @name添加管理员
+	 * 
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_add_ajax();
+		//获取要显示的字段，及其相关属性
+		$field_data = D('ModelField')->where("`modelid`='{$in['modelid']}' AND `systype`<>'2' AND `status`='1'")->order('`sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,array(),array("repassword"=>'equalTo="#info_password"', "username"=>'remote="'.U('fmanager/add?ajax=checkusername').'"', "email"=>'remote="'.U('fmanager/add?ajax=checkemail').'"'));
+		$this->assign( 'form_data', $form );
+		//添加进数据库
+		if ($this->ispost()) {
+			$_user = &$this->_user;
+			if (!$_user->autoCheckToken($in)) { //令牌验证
+				$this->error ( '请不要非法提交或者重复提交页面！</font>' );
+			}
+			if (false === $_user->insert($in['info'],(int)$in['info']['isadmin'])) {
+				$this->message('<font class="red">' . $_user->getError() . '管理员添加失败！</font>');
+			} else {
+				$this->message('<font class="green">管理员添加成功！</font>', U("fmanager/manage") );
+			}
+		}
+		$this->assign ( 'modelid', $in['modelid'] );
+		//TODO
+		$this->display();
+	}
+
+	/**
+	 * @name处理添加用户时候的ajax请求
+	 * 
+	 */
+	protected function _add_ajax() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'checkusername':
+				$_user = D ('User');
+				if (true === $_user->validate($in['info'],'username')) {
+					die('true');
+				} else {
+					die('false');
+				}
+				break;
+			case 'checkemail':
+				$_user = D ('User');
+				if (true === $_user->validate($in['info'],'email')) {
+					die('true');
+				} else {
+					die('false');
+				}
+				break;
+			default:
+				;
+		}
+		exit();
+	}
+	
+	/**
+	 * @name编辑管理员
+	 * 
+	 */
+	public function edit() {
+		$in = &$this->in;
+		$_user = &$this->_user;
+		if ($in['do'] == 'status') {
+			$this->status();
+		}
+		
+		if ($this->ispost()) {
+			if (!$in['info']['user_id']) {
+				$this->message('<font class="red">参数错误，没有选择要修改的管理员！</font>');
+			}
+			if ($in['info']['user_id'] == '1') $this->message('<font class="red">操作终止，不能更改【管理员】状态！</font>');
+			if (!$_user->autoCheckToken($in)) { //令牌验证
+				$this->error ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			}
+			if (false === $_user->update($in['info'],(int)$in['info']['isadmin'])) {
+				$this->message('<font class="red">' . $_user->getError() . '管理员信息修改失败！</font>');
+			} else {
+				$this->message('<font class="greeen">管理员信息修改成功！</font>', U('fmanager/manage') );
+			}
+		}
+		if (!$in['user_id']) {
+			$this->message('<font class="red">参数错误，没有选择要修改的管理员！</font>');
+		}
+		if ($in['user_id'] == 1) {
+			$this->message('<font class="red">操作终止，不能更改【管理员】状态！</font>');
+		}
+		//获取管理员详情
+		$data = $_user->getUserData($in['user_id'], true);
+		$data['password'] = '';
+		//获取要显示的字段，及其相关属性
+		$role_user_data = D('RoleUser')->where("`user_id`='{$in['user_id']}'")->find();
+		$role_data = D('Role')->find($role_user_data['role_id']);
+		$field_data = D('ModelField')->where("`modelid`='{$role_data['modelid']}' AND `systype`<>'2' AND `status`='1'")->order('`sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,$data,array("repassword"=>'equalTo="#info_password"', "username"=>'readonly="readonly"', "email"=>'readonly="readonly"'));
+		$this->assign( 'form_data', $form );
+		$this->assign( 'data',$data );
+		$this->display();
+	}
+	
+	/**
+	 * @name修改管理员状态
+	 * 
+	 */
+	protected function status() {
+	$in = &$this->in;
+		$_user = &$this->_user;
+		if (!$in['user_id']) {
+			 $this->message('<font class="red">参数错误，没有指定删除项！</font>');
+		}
+		if (is_numeric($in['user_id'])) {
+			if ($in['user_id'] == '1') $this->message('<font class="red">操作终止，不能更改【管理员】状态！</font>');
+		}
+		if (is_array($in['user_id'])) {
+			if (in_array('1',$in['user_id']))  $this->message('<font class="red">操作终止，不能更改【管理员】状态！</font>');
+		}
+		if (false === $_user->status($in['user_id'],$in['status'])) {
+			$this->message('<font class="red">' . $_user->getError() . '操作发生错误！</font>',U('fmanager/manage'));
+		} else {
+			redirect(U('fmanager/manage'));
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name删除管理员
+	 * 
+	 */
+	public function delete() {
+		$in = &$this->in;
+		$_user = &$this->_user;
+		if (!$in['user_id']) {
+			 $this->message('<font class="red">参数错误，没有指定删除项！</font>');
+		}
+		if (is_numeric($in['user_id'])) {
+			if ($in['user_id'] == '1') $this->message('<font class="red">操作终止，【管理员】无法删除！</font>');
+		}
+		if (is_array($in['user_id'])) {
+			if (in_array('1',$in['user_id']))  $this->message('<font class="red">操作终止，【管理员】无法删除！</font>');
+		}
+		if (true === $_user->delete($in['user_id'])) {
+			$this->message('<font class="red">操作成功！</font>',U('fmanager/manage'));
+		} else {
+			$this->message('<font class="red">' . $_user->getError() . '操作发生错误！</font>',U('fmanager/manage'));
+		}
+		//TODO
+		$this->display();
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FmemberAction.class.php ---
@@ -0,0 +1,840 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FmemberAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2011-01-18
+// +----------------------------------------------------------------------
+// | Author: 孙斌 <sunyichi@163.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  会员模型管理
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 会员模型管理
+ *
+ */
+class FmemberAction extends FbaseAction {
+	
+	/**
+	 * @name会员模型列表
+	 */
+	public function manage_model() {
+		$in = &$this->in;
+		$data = array ();
+		$_model = D ( 'Model' );
+		//查询条件
+		$condition = array ('moduleid'=>$in['moduleid']);
+		//排序条件
+		$order = ' `modelid` ASC ';
+		//统计模型数量
+		$data ['count'] = $_model->where ( $condition )->count ();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] = $_model->relation ( 'module' )->where ( $condition )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		
+		$this->assign ( 'moduleid', $in['moduleid'] );
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+	
+	/**
+	 * @name新增模型
+	 */
+	public function add_model() {
+		$in = &$this->in;
+		//处理新增模型的时候的ajax请求
+		if ($in ['ajax'])
+			$this->_ajax_add_model ();
+			//处理普通请求
+		$_model = D ( 'Model' );
+		$_module = D ( 'Module' );
+		if ($this->ispost()) { //处理修改
+			if (! $_model->autoCheckToken ( $in ))
+				$this->message ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );			
+			$modelid = $_model->add ( $in ['info'] );
+			if ($modelid === true) {
+				$this->message ( '<font class="green">模型创建成功！</font>', U("Fmember/manage_model?moduleid={$in['moduleid']}") );
+			} else {
+				$this->message ( '<font class="red">' . $_model->getError () . '<br />模型创建失败！</font>' );
+			}
+		}
+		//查询可用的模块
+		$modules = $_module->selectModule ( array (
+			'`status`' => '1',
+		) );		
+		if (! $modules)
+			$this->message ( '<font class="red">没有可用模块！</font>' );
+		if (is_array ( $modules )) {
+			foreach ( $modules as $k => $v ) {
+				$modules [$k] = array (
+					'title' => $v, 'value' => $k 
+				);
+			}
+		}
+		$this->assign ( 'moduleid', $in['moduleid'] );
+		$this->assign ( 'modules', $modules );
+		$this->display ();
+	}
+	
+	/**
+	 * @name添加模型的AJAX请求
+	 */
+	protected function _ajax_add_model() {
+		$in = &$this->in;
+		$_model = D ( 'Model' );
+		if ($in ['ajax'] == 'check_tablename') { //检查表名
+			$in['info']['exttable'] = trim( $in['info']['exttable'] );
+			if (!empty($in['info']['exttable'])) {
+				$table = $_model->where("`exttable`='{$in['info']['exttable']}'" )->find ( );
+				if (is_array ( $table ))
+					die ( 'false' ); //有重复
+				else
+					die ( 'true' ); //未重复，可以使用
+			}
+			die ( 'false' );
+		} else if ($in ['ajax'] == 'check_name') { //检查模型名称
+			$table = $_model->where( "`name`='{$in['name']}'" )->find ( );
+			if (is_array ( $table ))
+				die ( 'false' ); //有重复
+			else
+				die ( 'true' ); //未重复，可以使用
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name字段列表
+	 */
+	public function list_field() {
+		$in = &$this->in;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		$_module = D ( 'Module' );
+		$_field = D ( 'ModelField' );
+		$model_data = $_model->find ( array (
+			'where' => array (
+			'modelid' => $in ['modelid'] 
+		) 
+		) );
+		if (! is_array ( $model_data )) {
+			$this->message ( '<font class="red">该模型不存在！</font>' );
+		}
+		//检查模型是否是可扩展的		
+		if (! $model_data ['extendable'] > 0)
+			$this->message ( '<font class="red">该模型是系统模型，不能管理其字段！</font>' );
+			//模块字段、扩展模型字段
+		$module_where = array (
+			'moduleid' => "{$model_data['moduleid']}" 
+		);
+		$module_data = $_module->field ( 'extendable' )->where ( $module_where )->find ();
+		if (! $module_data ['extendable'] > 0)
+			$this->message ( '<font class="red">该模型所属模块是系统模块，不管理其字段！</font>' );
+		//分页查询
+		//排序条件		
+		$order = ' `card` ASC ,`sort` ASC ';
+		//统计所属模型的字段记录数
+		$data ['count'] = $_field->where ( "`modelid`='{$in['modelid']}'" )->count ();
+		//初始化分页类
+		$in ['p'] = intval ( $in ['p'] );
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据、后台的数据操作都直接操作数据库
+		$data ['info'] = $_field->where ( "`modelid`=" . $in ['modelid'] )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		
+		$this->assign ( 'data', $data );
+		$this->assign ( 'modelid', $in ['modelid'] );
+		$this->assign ( 'moduleid', $model_data ['moduleid'] );
+		//载入相应的字段类，模板会调用其静态方法
+		import ( 'Field', INCLUDE_PATH );
+		$this->display ();
+	}
+	
+	/**
+	 * @name添加、编辑、复制字段
+	 */
+	public function add_field() {
+		$in = &$this->in;
+		if (! $in ['modelid'] && ! $in ['fieldid'] && ! $in ['copy_fieldid']) {
+			$this->message ( '<font class="red">参数错误！</font>' );
+		}
+		//处理添加字段时候的ajax请求
+		if ($in ['ajax']) {
+			$this->_ajax_add_field ();
+		}
+		$_model = D ( 'Model' );
+		$_mfield = D ( 'ModelField' );
+		$data = '';
+		if ($this->ispost()) { //处理提交数据
+			//检查数据来源
+			if (! $_mfield->autoCheckToken ( $in ))
+				$this->message ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			$in ['info'] ['modelid'] = $in ['modelid'];
+			if ($in ['info'] ['fieldid'] > 0) { //更新数据库				
+				$field_data = $_mfield->find ( $in ['info'] ['fieldid'] );
+				//可修改部分信息
+				$field_data ['name'] = $in ['info'] ['name'];
+				$field_data ['tips'] = $in ['info'] ['tips'];
+				$field_data ['parent_css'] = $in ['info'] ['parent_css'];
+				$field_data ['css'] = $in ['info'] ['css'];
+				$field_data ['minlength'] = $in ['info'] ['minlength'];
+				$field_data ['maxlength'] = $in ['info'] ['maxlength'];
+				$field_data ['required'] = $in ['info'] ['required'];
+				$field_data ['pattern'] = $in ['info'] ['pattern'];
+				$field_data ['errortips'] = $in ['info'] ['errortips'];
+				$field_data ['setting'] = $in ['info'] ['setting'];
+				$field_data ['formattribute'] = $in ['info'] ['formattribute'];
+				$field_data ['card'] = $in ['info'] ['card'];				
+				if (false === $_mfield->save ( $field_data )) {
+					$this->message ( '<font class="red">' . $_mfield->getError () . '<br />字段更新失败！</font>' );
+				} else {
+					$this->message ( '<font class="green">字段更新成功！</font>', $this->forward );
+				}
+			} else { //插入新纪录
+				if (false === $_mfield->add ( $in ['info'] )) {
+					$this->message ( '<font class="red">' . $_mfield->getError () . '<br />字段添加失败！</font>' );
+				} else {
+					$this->message ( '<font class="green">字段添加成功！</font>', $this->forward );
+				}
+			}
+		} else {
+			//复制
+			if ($in ['copy_fieldid']) {
+				$data = $_mfield->find ( $in ['copy_fieldid'] );
+				$in ['modelid'] = $data ['modelid'];
+				unset ( $data ['fieldid'] );
+				unset ( $data ['field'] );
+				unset ( $data ['name'] );
+				$this->assign ( 'data', $data );
+			}
+			if ($in ['fieldid']) { //编辑
+				$data = $_mfield->find ( $in ['fieldid'] );
+				$in ['modelid'] = $data ['modelid'];
+				$this->assign ( 'data', $data );
+			}
+		}
+		$model_data = $_model->find ( array ('where' => array ('modelid' => $in ['modelid'] ) ) );
+		$this->assign ( 'modelid', $in ['modelid'] );
+		$this->assign ( 'moduleid', $model_data ['moduleid'] );
+		$this->assign ( 'forward', $this->forward );
+		$this->display ();
+	}
+	
+	/**
+	 * @name处理添加字段时候的ajax请求
+	 */
+	protected function _ajax_add_field() {
+		$in = &$this->in;
+		$_mField = D ( 'ModelField' );
+		if ($in ['ajax'] == 'setting') {  //设置
+			if (! $in ['type'])
+				exit ();
+			$fieldid = $in ['copy_fieldid'] ? $in ['copy_fieldid'] : $in ['fieldid'];
+			if ($fieldid) {
+				$data = $_mField->field ( 'setting' )->find ( $fieldid );
+				$html = $_mField->getSettingByType ( $in ['type'], $data ['setting'] );
+			} else {
+				$html = $_mField->getSettingByType ( $in ['type'] );
+			}
+			if ($html) {
+				die ( $html );
+			} else {
+				die ( '<font class="red">参数不正确！</font>' );
+			}
+			exit ();
+		}
+		if ($in ['ajax'] == 'check') {  //字段名称检查
+			if ($in ['modelid'] && empty ( $in ['field'] )) {
+				$in ['info']['field'] = trim ( $in ['info']['field'] );
+				if (!empty($in ['info']['field'])) {
+					$option = array (
+						'where' => array (
+							'modelid' => $in ['modelid'], 'field' => $in ['info']['field'] 
+						) 
+					);
+					$field_data = $_mField->find ( $option );				
+					if (is_array ( $field_data )) {
+						die('false');	//重复，不可用						
+					} else {
+						die('true');	//未重复，可以使用
+					}
+				}
+				die('false');
+			} else {
+				die('false');	//参数错误
+			}
+			exit ();
+		}
+		if ($in ['ajax'] == 'sort') {  //快速排序			
+			$in['fieldid'] && $in['fieldid'] = substr($in['fieldid'],6);
+			$in['sort'] = intval($in['sort']);
+			if ($in['fieldid'] &&  $in['sort'] == '0' || !empty($in['sort'])) {
+				$_mField = M ('ModelField');
+				$data = $_mField->field("`fieldid`,`sort`")->find($in['fieldid']);
+				if (is_array($data)) {
+					$data['sort'] = $in['sort'];
+					if (false !== $_mField->save($data)) {
+						echo $data['sort'];
+						exit ();
+					}
+				}
+			}
+			echo '';
+			exit();
+		}
+		if ($in ['ajax'] == 'savename') {  //快速编辑字段别名
+			$in['fieldid'] && $in['fieldid'] = substr($in['fieldid'],5);
+			if ($in['fieldid'] && !empty($in['name'])) {
+				$_mField = M ('ModelField');
+				$data = $_mField->field("`fieldid`,`name`")->find($in['fieldid']);				
+				if (is_array($data)) {
+					$data['name'] = $in['name'];
+					if (false !== $_mField->save($data)) {
+						echo $data['name'];
+						exit ();
+					}
+				}
+			}
+			echo '';
+			exit();
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name编辑模型，不可扩展的模型不能编辑，模型的编辑总只能更新模型的名称和状态
+	 * 
+	 */
+	public function update_model() {
+		$in = &$this->in;
+		//处理编辑模型的时候的ajax请求
+		if ($in ['ajax'])
+			$this->_ajax_update_model ();
+			//处理普通请求
+		$_model = D ( 'Model' );
+		$_module = D ( 'Module' );
+		$data = $_model->find ( $in ['modelid'] );
+		if (! is_array ( $data )) {
+			$this->message ( '<font class="red">要修改的模型不存在！</font>' );
+		}
+		//查询当前模型所属模块
+		if ($this->ispost()) { //处理修改
+			if (! $_model->autoCheckToken ( $in )) {
+				$this->error ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			}
+			//更新条件
+			$option = array (
+				'where' => array (
+				'modelid' => $in ['modelid']
+			) 
+			);
+			//name,status,description 几个数据才能更新，其余数据都是不可修改的
+			$data ['name'] = $in ['info'] ['name'];
+			$data ['status'] = $in ['info'] ['status'];
+			$data ['description'] = $in ['info'] ['description'];
+			if ($_model->update ( $data, $option )) {
+				$this->message ( '<font class="green">模型编辑成功！</font>', $this->forward );
+			} else {
+				$this->message ( '<font class="red">' . $_model->getError () . '模型编辑失败！</font>' );
+			}
+		}
+		$this->assign ( 'modules', $_module->find ( $data ['moduleid'] ) );
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+	
+	/**
+	 * @name处理模型更新时候的ajax请求
+	 */
+	protected function _ajax_update_model() {
+		$in = &$this->in;
+		$_model = D ( 'Model' );
+		if (! $in ['modelid'])
+			$this->ajaxReturn ( 'e', '异常错误' ); //异常错误
+		if ($in ['ajax'] == 'check_name') { //检查模型名称
+			$table = $_model->find ( "`name`='{$in['name']}' AND `modelid`<>'{$in['modelid']}'" );
+			if (is_array ( $table ))
+				$this->ajaxReturn ( 'n', '重复，不可使用' ); //有重复
+			else
+				$this->ajaxReturn ( 'y', '未重复，可以使用' ); //未重复，可以使用
+		}
+		$this->ajaxReturn ( 'e', '异常错误' ); //异常错误
+	}
+	
+	/**
+	 * @name删除模型
+	 */
+	public function del_model() {
+		$in = &$this->in;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		$model_data = $_model->find ( array ('where' => array ('modelid' => $in ['modelid'] ) ) );
+		if ($_model->delete ( $in ['modelid'] )) {
+			//删除模型字段信息			
+			$this->message ( '<font class="green">成功删除模型！</font>', U ( "Fmember/manage_model?moduleid={$model_data ['moduleid']}" ) );
+		} else {
+			$this->message ( '<font class="red">' . $_model->getError () . '操作失败！</font>' );
+		}
+	}
+	
+	/**
+	 * @name删除字段
+	 */
+	public function del_field() {
+		$in = &$this->in;
+		if (! $in ['fieldid'])
+			$this->message ( '<font class="red">非法参数！</font>' );
+		$_mField = D ( 'ModelField' );
+		if (! $_mField->delete ( $in ['fieldid'] )) {
+			$this->message ( '<font class="red">' . $_mField->getError () . '删除失败！</font>' );
+		} else {
+			$this->message ( '<font class="green">字段删除成功！</font>' );
+		}
+	}
+	
+	
+	/**
+	 * @name启用、禁用模型
+	 */
+	public function status_model() {
+		$in = &$this->in;
+		if (! $in ['modelid'] || ! in_array ( $in ['status'], array (
+			0, 1 
+		) ))
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		$model_data = $_model->find ( array (
+			'modelid' => "{$in['modelid']}" 
+		) );
+		if (! is_array ( $model_data ))
+			$this->message ( '<font class="red">发生异常，要操作的模型不存在！</font>' );
+			//如果是开启，则先检查关联的模块是否开启
+		if ($in ['status'] == 1) {
+			$_module = D ( 'Module' );
+			$module_data = $_module->find ( array (
+				'modelid' => "{$in['modelid']}" 
+			) );
+			if (is_array ( $module_data )) {
+				if ($module_data ['status'] == 0)
+					$this->message ( '<font class="red">模型所属模块已经禁用，如果需要开启模型，请先将模块启用。</font>' );
+			} else {
+				$this->message ( '<font class="red">发生异常，模型所属模块不存在！</font>' );
+			}
+		}
+		//启用、禁用模型、并更新缓存
+		$_model->status ( $in ['modelid'], $in ['status'] );
+		redirect ( $this->forward );
+	}
+	
+	/**
+	 * @name启用、禁用字段
+	 */
+	public function status_field() {
+		$in = &$this->in;
+		if (! $in ['fieldid'])
+			$this->message ( '<font class="red">非法参数</font>' );
+		$_mField = D ( 'ModelField' );
+		$field_data = $_mField->find ( intval ( $in ['fieldid'] ) );
+		if (! is_array ( $field_data )) {
+			$this->message ( '<font class="red">字段不存在！</font>' );
+		} else {
+			if ($field_data ['systype'] == '2') {
+				$this->message ( '<font class="red">系统字段，不能操作！</font>' );
+			} else {
+				$in ['status'] = intval ( $in ['status'] ) > 0 ? '1' : '0';
+				$field_data ['status'] = $in ['status'];
+				if (false !== $_mField->save ( $field_data )) {
+					redirect ( $this->forward );
+				} else {
+					$this->message ( '<font class="red">操作失败！</font>' );
+				}
+			}
+		}
+	}
+	
+	/**
+	 * @name预览模型、只有扩展模型才能预览
+	 */
+	public function preview_model() {
+		$in = &$this->in;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+			//检查模型是否可扩展	
+		$_model = D ( 'Model' );
+		$model_data = $_model->find ( $in ['modelid'] );
+		if (! is_array ( $model_data ))
+			$this->message ( '<font class="red">该模型不存在或者已经被删除！</font>' );
+		$_mField = D ( 'ModelField' );
+		//字段系统类型   systype   0=自定义字段  1=主表默认字段  2=系统字段(主键字段)
+		$field_data = $_mField->where ( "`modelid`='{$in['modelid']}' AND `status`='1' AND `systype`<>'2'" )->order ( "`sort` ASC,`fieldid` ASC " )->findAll ();
+		//print_r($field_data);exit;
+		$form_data = $_model->getForm($field_data);
+		$this->assign ( 'data', $model_data );
+		$this->assign ( 'form_data', $form_data );
+		$this->display ();
+	}
+	
+	/**
+	 * @name导出模型
+	 */
+	public function export_model() {
+		$in = &$this->in;
+		$this->message ( '<font class="red">建设中...</font>' );exit;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		$filename = $_model->export ( $in ['modelid'] );
+		if (false !== $filename) {
+			import ( 'ORG.Net.Http' );
+			Http::download ( $filename );
+		} else {
+			$this->message ( '<font class="red">模型不存在！</font>' );
+		}
+	}
+	
+	
+	/**
+	 * @name会员角色管理
+	 */
+	public function manage_group() {
+		$in = &$this->in;
+		$in ['_tablename'] = 'role';
+		$in['where'] = array("isadmin"=>0);  //"status"=>1
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		//$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$data ['info'] = $_m->relation ( 'model' )->where ( $option['where'] )->order ( $option['order'] )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		$this->assign ( 'data', $data );
+		$this->assign ( 'moduleid', $in['moduleid'] );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加会员角色
+	 */
+	public function add_group() {
+		$in = &$this->in;
+		if ($in ['ajax'])
+			$this->_ajax_add_group ();
+		$in ['_tablename'] = 'role';
+		$this->assign('forward',U("fmember/manage_group?moduleid={$in['moduleid']}"));
+		
+		if ($this->ispost()) {
+			if (! $in ['_tablename']){
+				$this->message ( '没有指定操作表！' );
+			}
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//查询可用的会员模型
+		$_model = D ( 'Model' );
+		$where = "`status`='1' AND `moduleid`='{$in['moduleid']}' AND `exttable`<>'manager'";
+		$models = $_model->selectModel($where);
+		//print_r($models);exit;
+		if (!$models)
+			$this->message ( '<font class="red">没有可用的用户模型！</font>' );
+		if (is_array ( $models )) {
+			foreach ( $models as $k => $v ) {
+				$models [$k] = array (
+					'title' => $v, 'value' => $k 
+				);
+			}
+		}
+		$this->assign ( 'models', $models );
+		$this->assign ( 'moduleid', $in['moduleid'] );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name处理添加时候的ajax请求
+	 */
+	protected function _ajax_add_group() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'checkname':
+				$_role = D ( 'Role' );
+				if (!empty($in ['info']['name']) && $_role->regex($in ['info']['name'],'english')) {
+					if ($_role->isNameExists($in['info']['name'])) {
+						die('false');
+					}
+					die('true');
+				}
+				die('false');
+				break;			
+			default:				
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name编辑会员角色
+	 */
+	public function update_group() {
+		$in = &$this->in;
+		if ($in ['do'] == 'status') $this->status_group();
+		$in ['_tablename'] = 'role';
+		$in ['tpl'] = 'update_group';
+		$this->assign('forward',U("fmember/manage_group?moduleid={$in['moduleid']}"));
+		
+		if ($this->ispost()) {
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		$_model = D ( 'Model' );
+		$this->assign ( 'models', $_model->find ( $data ['modelid'] ) );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name删除会员角色
+	 */
+	public function delete_group() {
+		$in = &$this->in;		
+		$in ['_tablename'] = 'role';
+		$this->assign('forward',U("fmember/manage_group?moduleid={$in['moduleid']}"));
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+	
+	/**
+	 * @name启用、禁用会员角色
+	 */
+	public function status_group() {
+		$in = &$this->in;
+		if (! $in ['role_id'])
+			$this->error ( '非法参数' );
+		$_role = D ( 'Role' );
+		$data = $_role->find ( intval ( $in ['role_id'] ) );
+		if (! is_array ( $data )) {
+			$this->error ( '会员角色不存在！' );
+		} else {
+			$in ['status'] = intval ( $in ['status'] ) > 0 ? '1' : '0';
+			$data ['status'] = $in ['status'];
+			if (false !== $_role->save ( $data )) {
+				redirect ( $this->forward );
+			} else {
+				$this->message ( '<font class="red">操作失败！</font>' );
+			}
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name会员模块配置
+	 */
+	public function setting_module (){
+		$in = &$this->in;
+		$key = 'user';
+		$_setting = D ('Setting');
+		if ($this->ispost()) {
+			if (is_array($in['info'])) {
+				foreach ($in['info'] as $k=>$v) {
+					$_setting->set($k,$v,$key);
+				}
+				//更新缓存和配置
+				$_setting->cacheAll();
+				R('Fcache','app');
+				$this->message('<font class="green">会员模块配置保存成功！</font>',U('fmember/setting_module'));
+			} else {
+				$this->message('<font class="red">' . "参数错误！</font>");
+			}
+		}
+		$value_data = $_setting->where("`key`='{$key}'")->findAll();
+		if (is_array($value_data)) {
+			foreach ($value_data as $k=>$v) {
+				$value_data[$v['var']] = $v['value'];
+				unset($value_data[$k]);	
+			}
+		}
+		$this->assign ('value_data', $value_data);
+		$this->display ();
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FmobileAction.class.php ---
@@ -0,0 +1,664 @@
+<?php
+
+// +----------------------------------------------------------------------
+
+// | FangFa Net [ http://www.fangfa.net ]
+
+// +----------------------------------------------------------------------
+
+// | File: FmobileAction.class.php
+
+// +----------------------------------------------------------------------
+
+// | Date: 2013-06-14
+
+// +----------------------------------------------------------------------
+
+// | Author: fangfa <1364119331@qq.com>
+
+// +----------------------------------------------------------------------
+
+// | 文件描述:  手机站管理
+
+// +----------------------------------------------------------------------
+
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+
+
+
+/**
+
+ * @name 手机站管理
+
+ *
+
+ */
+
+class FmobileAction extends FbaseAction {
+
+    
+
+    public $_fontsize = array(
+
+        '1' =>  '18',//纯文字
+
+        '2' =>  '10',//图文
+
+        '3' =>  '16',//图文简介
+
+    );
+
+    
+
+    /**
+
+	 * @name初始化手机站模块
+
+	 */
+
+	protected function _initialize(){
+
+	   
+
+        parent::_initialize();
+
+        $in = &$this->in;
+
+        
+
+       // if(C("IS_MOBILE") == false) $this->message(L('没有启用手机站功能！'));
+
+        
+
+        $in['_tablename_menu'] = 'mobilemenu';
+
+        
+
+        
+
+
+
+	}
+
+    
+
+	/**
+
+	*手机栏目
+
+	**/
+
+    public function setting(){
+
+        
+
+        $in = &$this->in;
+
+        if (! $in ['_tablename_menu']) $this->message ( '没有指定栏目操作表！' );
+
+        
+
+        $name = $in ['_tablename_menu']; //数据表名
+
+		$_mm = D ( parse_name($name,1) ); //实例化表模型类
+
+        $where = array();
+
+        $where['status'] = 1;
+
+        $join = ' LEFT JOIN fangfa_category ON fangfa_category.catid = fangfa_mobilemenu.catid ';
+
+        
+
+        $data_model = $_mm->join($join)->where($where)->select();
+
+        foreach($data_model as $k=>$v){
+
+            $data_model[$k] = $v;
+
+            $data_model[$k]['color'] = import('wap_'.$v['id'],INCLUDE_PATH.'wap/') == 1?'red':'black';
+
+			//thinkphp中的import方法用于导入系统的基类库
+
+        }
+
+        
+
+        //广告位
+
+        $_ad = M('Mobilead');
+
+        $ad = $_ad->select();
+
+        foreach($ad as $k=>$v){
+
+            $ad[$k] =   $v;
+
+            $setting =  $v['setting'];
+
+            $ad[$k]['setting']  =   eval("return {$setting};");
+
+        }
+        
+
+        $this->assign('data_model',$data_model);
+
+        $this->assign('ad',$ad);
+
+        
+
+        $this->display();
+
+        
+
+    }
+
+    
+
+	/**
+
+	*更新模版
+
+	**/
+
+    public function updateModel(){
+
+        
+
+        $in = &$this->in;
+
+        if (! $in ['_tablename_menu']) $this->message ( '<font color="red">没有指定栏目操作表！</font>' );
+
+        
+
+        $name = $in ['_tablename_menu']; 
+
+		$_m = D ( parse_name($name,1) );
+
+        
+
+        $where = array();
+
+        $where['status'] = 1;
+
+        $where['id'] = $in['id'];
+
+        $join = ' LEFT JOIN fangfa_category ON fangfa_category.catid = fangfa_mobilemenu.catid ';
+
+        
+
+        $data = $_m->join($join)->where($where)->find();        
+
+        if($return = $this->createPhpCache($data)){
+            die($this->createHtml($return,$data));
+
+            exit;
+
+        }else{
+
+            die('<font style="color:red;">缓存文件创建失败！</font>');
+
+            exit;
+
+        }
+
+        
+
+        
+
+    }
+
+
+
+	/**
+
+	*循环求出缓存
+
+	**/
+
+	public function huancun(){
+
+		$in = &$this->in;
+
+        if (! $in ['_tablename_menu']) $this->message ( '没有指定栏目操作表！' );
+
+        $name = $in ['_tablename_menu'];
+
+		$_m = D ( parse_name($name,1) );
+
+        $where = array();
+
+        $where['status'] = 1;
+
+        $join = ' LEFT JOIN fangfa_category ON fangfa_category.catid = fangfa_mobilemenu.catid ';
+
+        
+
+        $data = $_m->join($join)->where($where)->select();		
+		for($i=0;$i<count($data);$i++)
+
+		{
+
+
+
+		$wap_class = import('wap_'.$data[$i]['id'],INCLUDE_PATH.'wap/');
+
+		if(empty($wap_class))
+		copy(INCLUDE_PATH.'wap/wap_'.$data[$i]['controller'].'.dc',INCLUDE_PATH.'wap/wap_'.$data[$i]['id'].'.class.php');
+
+		F("wap_".$data[$i]['id'].".class",'',INCLUDE_PATH.'wap/');
+
+		}
+		$this->message('<font class="green">模版缓存文件生成成功！</font>',U('fmobilemenu/menumanage'));
+
+	}
+
+
+
+	/**
+
+	创建缓存文件
+
+	**/
+
+    protected function createPhpCache($data){
+
+        
+
+        if(!isset($data)){
+
+            return '栏目不存在！';
+
+            exit;
+
+        }else{
+
+            $wap_class = import('wap_'.$data['id'],INCLUDE_PATH.'wap/');
+
+            if(empty($wap_class))
+
+			copy(INCLUDE_PATH.'wap/wap_'.$data['controller'].'.dc',INCLUDE_PATH.'wap/wap_'.$data['id'].'.class.php');
+
+            //copy将前面的文件复制给后面的文件
+
+            $dc = F("wap_".$data['id'].".class",'',INCLUDE_PATH.'wap/');//thinkphp内置方法F快速文件数据读取和保存
+
+            return $dc;
+
+        }
+
+        
+
+    }
+
+    
+
+
+
+	/**
+
+	**创建编辑手机栏目的栏目编辑页面
+
+	**/
+
+    protected function createHtml($data,$record){
+        ${'checked_status_'.$data['status']} = ' checked="checked" ';
+        $data['name'] = empty($data['name'])?$record['name']:$data['name'];
+        $html = '<p id="returnHtmlp"></p><form action="" id="form1" method="post">';
+        switch ($record['controller']){
+            case 'fcontent':
+
+                $html .= '显示条数：<input type="text" class="input" name="info[size]" value="'.$data['size'].'" /><br/>';
+
+                $html .= '显示样式：<input type="radio" '.$checked_status_1.' name="info[status]" value="1" />文字 <input type="radio" '.$checked_status_2.' name="info[status]" value="2" />图片+文字 <input type="radio"'.$checked_status_3.' name="info[status]" value="3" />图片+文字+描述<br/>';
+
+                $html .= '显示排序：<input type="text" class="input" name="info[sort]" value="'.$data['sort'].'" /><br/>';
+
+                $html .= '附加条件：<input type="text" class="input" name="info[where]" value="'.$data['where'].'" /><br/>';
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;
+
+            case 'fpage':
+
+                $html .= '文字内容：<textarea class="textarea" name="info[description]">'.$data['description'].'</textarea><br/>';   
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;
+             case 'fguestbook':
+			     $html .= '显示条数：<input type="text" class="input" name="info[size]" value="'.$data['size'].'" /><br/>';
+
+                $html .= '显示样式：<input type="radio" '.$checked_status_1.' name="info[status]" value="1" />文字 <input type="radio" '.$checked_status_2.' name="info[status]" value="2" />图片+文字 <input type="radio"'.$checked_status_3.' name="info[status]" value="3" />图片+文字+描述<br/>';
+
+                $html .= '显示排序：<input type="text" class="input" name="info[sort]" value="'.$data['sort'].'" /><br/>';
+
+                $html .= '附加条件：<input type="text" class="input" name="info[where]" value="'.$data['where'].'" /><br/>';
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;
+             case 'fjob':
+                    $html .= '显示条数：<input type="text" class="input" name="info[size]" value="'.$data['size'].'" /><br/>';
+
+                $html .= '显示样式：<input type="radio" '.$checked_status_1.' name="info[status]" value="1" />文字 <input type="radio" '.$checked_status_2.' name="info[status]" value="2" />图片+文字 <input type="radio"'.$checked_status_3.' name="info[status]" value="3" />图片+文字+描述<br/>';
+
+                $html .= '显示排序：<input type="text" class="input" name="info[sort]" value="'.$data['sort'].'" /><br/>';
+
+                $html .= '附加条件：<input type="text" class="input" name="info[where]" value="'.$data['where'].'" /><br/>';
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;
+            case 'fsalenet':
+                   $html .= '显示条数：<input type="text" class="input" name="info[size]" value="'.$data['size'].'" /><br/>';
+
+                $html .= '显示样式：<input type="radio" '.$checked_status_1.' name="info[status]" value="1" />文字 <input type="radio" '.$checked_status_2.' name="info[status]" value="2" />图片+文字 <input type="radio"'.$checked_status_3.' name="info[status]" value="3" />图片+文字+描述<br/>';
+
+                $html .= '显示排序：<input type="text" class="input" name="info[sort]" value="'.$data['sort'].'" /><br/>';
+
+                $html .= '附加条件：<input type="text" class="input" name="info[where]" value="'.$data['where'].'" /><br/>';
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;
+
+             case 'fvote':
+                          $html .= '显示条数：<input type="text" class="input" name="info[size]" value="'.$data['size'].'" /><br/>';
+
+                $html .= '显示样式：<input type="radio" '.$checked_status_1.' name="info[status]" value="1" />文字 <input type="radio" '.$checked_status_2.' name="info[status]" value="2" />图片+文字 <input type="radio"'.$checked_status_3.' name="info[status]" value="3" />图片+文字+描述<br/>';
+
+                $html .= '显示排序：<input type="text" class="input" name="info[sort]" value="'.$data['sort'].'" /><br/>';
+
+                $html .= '附加条件：<input type="text" class="input" name="info[where]" value="'.$data['where'].'" /><br/>';
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;
+			case 'fask':
+                         $html .= '显示条数：<input type="text" class="input" name="info[size]" value="'.$data['size'].'" /><br/>';
+
+                $html .= '显示样式：<input type="radio" '.$checked_status_1.' name="info[status]" value="1" />文字 <input type="radio" '.$checked_status_2.' name="info[status]" value="2" />图片+文字 <input type="radio"'.$checked_status_3.' name="info[status]" value="3" />图片+文字+描述<br/>';
+
+                $html .= '显示排序：<input type="text" class="input" name="info[sort]" value="'.$data['sort'].'" /><br/>';
+
+                $html .= '附加条件：<input type="text" class="input" name="info[where]" value="'.$data['where'].'" /><br/>';
+
+                $html .= '模块描述：<input type="text" class="input" name="info[name]" value="'.$data['name'].'" />';
+
+                $html .= '<input type="hidden" name="info[controller]" value="'.$data['controller'].'" />';
+
+                break;  			      
+		   default:
+                  die("该模块不存在！");			
+
+        }
+
+       
+        $html .= '<input type="hidden" name="id" value="'.$record['id'].'" /><input type="button" onclick="save_cache();" value="保存"/></form>';
+
+        return $html;
+
+        
+
+    }
+
+    
+
+    public function saveCache(){
+
+        
+
+        $in = &$this->in;
+
+
+
+        F("wap_".$in['id'].".class",$in['info'],INCLUDE_PATH.'wap/');
+
+        $datas['text'] = '<span style="color:red;">缓存成功！</span>';
+
+        $datas['id']   = $in['id']; 
+
+        die(json_encode($datas));//通过json编码进行编译~默认编码是utf-8
+
+        exit;
+
+        
+
+    }  
+
+	/**
+
+	**创建首页的模版
+
+	**/
+
+    public function create(){
+
+        
+
+       
+
+        
+
+        $in = &$this->in;
+
+        if (! $in ['_tablename_menu']) $this->message ( '没有指定操作表！' );
+
+        if ($in['model'] == '') $this->message( '没有需要生成首页的模块id，WAP首页生成失败！' );
+
+        
+
+        $name = $in ['_tablename_menu']; 
+
+		$_m = D ( parse_name($name,1) );
+
+        $DB_PREFIX = C('DB_PREFIX');
+
+        $join = ' LEFT JOIN '.$DB_PREFIX.'category AS c ON c.catid = '.$DB_PREFIX.'mobilemenu.catid ';
+
+        
+
+        $_ad = M('Mobilead');
+
+        foreach($in['model'] as $v){
+
+            
+
+            $v = explode('_',$v);
+
+
+
+            if($v[0] != 'ad'){
+
+
+
+                $v = $v[0];
+
+            }else{
+
+                $html = $_ad->where('aid = '.$v[1])->find();
+
+                $return[] = '<div class="ad">'.$html['notes'].'</div>';
+
+                continue;
+
+            }
+
+
+
+            $wap_box1 = F('wap_'.$v.'.class','',INCLUDE_PATH.'wap/');
+
+            $wap_box1['htmlsort'] = $wap_box1['sort'];
+
+            $wap_box1['stylestatus'] = $wap_box1['status'];
+
+            $where = $DB_PREFIX.'mobilemenu.id = '.$v;
+
+            $wap_box2 = $_m->field($DB_PREFIX.'mobilemenu.*,c.name AS realname')->join($join)->where($where)->find();
+
+            
+
+            $wap_box = array_merge($wap_box1,$wap_box2);
+
+
+
+            $return[] = $this->returnHTML($wap_box);
+
+
+
+        }
+
+        $html = '{{include file="system/header.html"}}';
+
+        $html .= '<div class="bodyer">';
+
+        foreach($return as $k=>$v){
+
+            $html .= $v;
+
+        }
+
+        $html .= '</div>';
+
+        $html .= '{{include file="system/footer.html"}}';
+
+        
+
+
+
+        $filename = array('header','footer');
+
+        foreach($filename as $v){
+
+            if (!file_exists('public/theme/wap/system/'.$v.'.html')) {
+
+                copy(INCLUDE_PATH.'wap/wap_system_'.$v.'.dc','public/theme/wap/system/'.$v.'.html');
+
+            }
+
+        }
+
+        
+
+
+
+        file_put_contents('public/theme/wap/index.html',$html,LOCK_EX);
+
+        $this->message ( 'wap首页创建成功！' );
+
+           
+
+    }
+
+    
+
+    public function returnHTML($wap_box){
+
+        
+
+        $html = '';
+
+        
+
+        if(!is_array($wap_box)) return false;
+
+
+
+        switch($wap_box['controller']){
+
+            case 'Fwapcontent':
+
+                $html .= '<div class="clear"></div>';
+
+                $html .= '<div class="news">';
+
+                $html .= '<div class="nav1">'.$wap_box['realname'].'<span><a href="__ROOT__/'.$wap_box['url'].'">更多>></a></span></div>';
+
+                $html .= '<div class="nav'.$wap_box['stylestatus'].'_main">';
+
+                $html .= '{{fflist catid='.$wap_box['catid'].' url="'.$wap_box['url'].'" pagesize='.$wap_box['size'].' tlength='.$this->_fontsize[$wap_box['stylestatus']].' dlength=20 isthumb=1 sort="'.$wap_box['htmlsort'].'" to=wap}}';
+
+                $html .= '<ul>';
+
+                $html .= '{{foreach from=$wap item=v}}';
+
+                $html .= '<li>';
+
+                if($wap_box['stylestatus'] == 1){
+
+                    $html .= '<span><p><a href="{{$v.url}}">{{$v.title}}<font style="float:right;">{{$v.create_time|date_format:"%Y-%m-%d"}}</font></a></p></span>';
+
+                }elseif($wap_box['stylestatus'] == 2){
+
+                    $html .= '<span><p><a href="{{$v.url}}">{{$v.title}}</a></p><p>{{$v.description}}</p></span>';
+
+                }elseif($wap_box['stylestatus'] == 3){
+
+                    $html .= '<img src="{{$v.thumb}}" />';
+
+                    $html .= '<span><p><a href="{{$v.url}}">{{$v.title}}</a></p><p>{{$v.description}}</p></span>';
+
+                }
+
+                $html .= '</li>';
+
+                $html .= '{{/foreach}}';
+
+                $html .= '</ul>';
+
+                $html .= '</div>';
+
+                $html .= '</div>';
+
+            break;
+
+            case 'Fwappage':
+
+                $html .= '<div class="clear"></div>';
+
+                $html .= '<div class="about">';
+
+                $html .= '<div class="nav1">'.$wap_box['realname'].'<span><a href="__ROOT__/'.$wap_box['url'].'">更多>></a></span></div>';
+
+                $html .= '<div class="nav1_main">'.$wap_box['description'].'</div>';
+
+                $html .= '</div>';
+
+            break;
+
+        }
+
+        
+
+        return $html;
+
+        
+
+    }
+
+       
+
+    
+
+}
+
+    
+
+
+

--- admin/Lib/Action/FmobileadAction.class.php ---
@@ -0,0 +1,349 @@
+<?php
+
+
+
+// +----------------------------------------------------------------------
+
+// | FangFa Net [ http://www.fangfa.net ]
+
+// +----------------------------------------------------------------------
+
+// | File: FmobileadAction.class.php
+
+// +----------------------------------------------------------------------
+
+// | Date: 2013-06-14
+
+// +----------------------------------------------------------------------
+
+// | Author: fangfa <1364119331@qq.com>
+
+// +----------------------------------------------------------------------
+
+// | 文件描述:  手机站广告管理
+
+// +----------------------------------------------------------------------
+
+
+
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+
+/**
+
+ * @name 手机站广告管理
+
+ *
+
+ */
+
+class FmobileadAction extends FbaseAction {
+
+    
+
+    protected $classes = array(
+
+    
+
+        '1' =>  '图片',
+
+        '2' =>  '文字',
+
+    
+
+    );
+
+    
+
+    /**
+
+	 * @name初始化手机站广告模块
+
+	 */
+
+	protected function _initialize(){
+
+	   
+
+        parent::_initialize();
+
+        $in = &$this->in;
+
+	    $in['_tablename'] = 'mobilead';
+
+        
+
+     //   if(C("IS_MOBILE") == false) $this->message(L('没有启用手机站功能！'));
+
+
+
+	}
+
+    
+
+    /**
+
+	 * @name手机站广告列表
+
+	 */
+
+    public function manage(){
+
+        
+
+        $in = &$this->in;
+
+        
+
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+        
+
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+        $where = array();
+
+        $order = ' aid DESC ';
+
+        $data = $_m->where($where)->order($order)->select();
+
+        $this->assign('data',$data);
+
+        
+
+        $this->display();
+
+        
+
+        
+
+    }
+
+    
+
+    /**
+
+	 * @name添加手机站广告
+
+	 */    
+
+    
+
+    public function add(){
+        $in = &$this->in;
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+
+        if($this->ispost()){
+            $name = $in ['_tablename']; 
+            $_m = D ( parse_name($name,1) ); 
+            $in['info']['create_time']  = time();
+            $in['info']['out_time']     = strtotime($in['info']['out_time']);
+			if(empty($in['info']['out_time'] )) $in['info']['out_time']=null;
+			
+            if($in['info']['classes'] == 1){
+                $in['info']['notes'] = '<img src="__PUBLIC__/uploads/'.$in['info']['notes'].'"/>';
+            }
+            if($_m->add($in['info'])){
+                $this->message ( '广告添加成功！' , $in['forward'] );
+            }else{
+			 $this->message ( '广告添加失败！' , $in['forward'] );
+            }
+
+            
+
+        }
+
+        
+
+        $this->forward = $this->in ['forward'] ? $this->in ['forward'] : (isset ( $_SERVER ['HTTP_REFERER'] ) ? $_SERVER ['HTTP_REFERER'] : '');
+
+		$this->assign ( 'forward', $this->forward );
+
+
+
+        $this->assign('classes',$this->classes);
+
+        
+
+        $this->display();
+
+        
+
+        
+
+        
+
+    }
+
+    
+
+    /**
+
+	 * @name更新手机站广告
+
+	 */
+
+	public function edit(){
+
+		$in = &$this->in;
+
+        
+
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+        
+
+        $name = $in ['_tablename']; 
+
+        $_m = D ( parse_name($name,1) ); 
+
+        
+
+        $where = array();
+
+        $where['aid'] = $in['aid'];
+
+        
+
+        if($this->ispost()){
+
+            $in['info']['out_time']     = strtotime($in['info']['out_time']);
+			if(empty($in['info']['out_time'] )) $in['info']['out_time']=null;
+			
+            if($in['info']['classes'] == 1){
+                $in['info']['notes'] = '<img src="__PUBLIC__/uploads/'.$in['info']['notes'].'"/>';
+            }
+            
+
+            if($_m->data($in['info'])->where($where)->save()){
+
+                 $this->message ( '广告修改成功！' );
+
+            }else{
+
+                 $this->message ( '广告修改失败！' );
+
+            }   
+
+        }    
+
+        $data = $_m->where($where)->find();
+        $this->assign('data',$data);
+
+        
+
+        $this->display();
+
+        
+
+	}   
+
+    
+
+    public function delete(){
+
+        $in = &$this->in;
+
+        
+
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+        
+
+        $name = $in ['_tablename']; 
+
+        $_m = D ( parse_name($name,1) ); 
+
+        
+
+        $where = array();
+
+        $where['aid'] = $in['aid'];
+
+        
+
+        if($_m->where($where)->delete()){
+
+            $this->message ( '广告删除成功！' );
+
+        }else{
+
+            $this->message ( '广告删除失败！' );
+
+        }
+
+        
+
+    }     
+
+    
+
+    /**
+
+     * @name异步选择广告种类
+
+     */ 
+
+     
+
+    public function ajaxSetting(){
+
+        
+
+        $in = &$this->in;
+
+        if (! $in ['_tablename']) die('没有指定操作表！');
+
+        if (! $in ['classes']) die('没有指定广告类型');
+
+        die($this->classesHTML($in['classes']));
+
+        exit;
+
+        
+
+    }
+
+    
+
+    /**
+
+     * @name返回广告类型对应的html
+
+     */ 
+
+     
+
+    public function classesHTML($classes,$setting){
+
+        
+
+        switch ($classes){
+
+            
+
+            case 1:
+
+                return '<label>图片：<input id="info_ad_pic" class="input" type="text" style="width:260px" size="50" maxlength="255" value="'.$setting['notes'].'" name="info[notes]"></label><label><input id="upload_info_ad_pic" class="dialog" type="button" value="上传图片" title="从电脑上传图片" alt="?m=fupload&a=fieldupload&fieldid=28&opener_id=info_ad_pic&height=250&width=500"></label><br/><label>链接：<input type="text" class="input" value="'.$setting['url'].'" name="info[url]"  /></label>';
+
+                break;
+
+            case 2:
+
+                return '<label><textarea id="text" class="textarea" rows="10" cols="60" name="info[notes]">'.$setting['notes'].'</textarea><label>
+				<label>链接：<input type="text" class="input" value="'.$setting['url'].'" name="info[url]"  /></label>';
+                break;
+
+            
+
+        }
+
+    } 
+
+
+
+}
\ No newline at end of file

--- admin/Lib/Action/FmobilemenuAction.class.php ---
@@ -0,0 +1,587 @@
+<?php
+
+
+
+// +----------------------------------------------------------------------
+
+// | FangFa Net [ http://www.fangfa.net ]
+
+// +----------------------------------------------------------------------
+
+// | File: FmobilemenuAction.class.php
+
+// +----------------------------------------------------------------------
+
+// | Date: 2013-06-08
+
+// +----------------------------------------------------------------------
+
+// | Author: fangfa <1364119331@qq.com>
+
+// +----------------------------------------------------------------------
+
+// | 文件描述:  手机站栏目管理
+
+// +----------------------------------------------------------------------
+
+
+
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+
+//defined ( 'IN_ADMIN' )检测IN_ADMIN这个常量是不是存在
+
+/**
+
+ * @name 手机站栏目管理
+
+ *
+
+ */
+
+class FmobilemenuAction extends FbaseAction {
+
+    
+
+    /**
+
+	 * @name初始化手机站栏目模块
+
+	 */
+
+	protected function _initialize(){
+
+	   
+
+        parent::_initialize();
+
+        $in = &$this->in;
+
+	    $in['_tablename'] = 'mobilemenu';
+
+      //  if(C("IS_MOBILE") == false) $this->message(L('没有启用手机站功能！'));
+
+
+
+	}
+
+    
+
+    /**
+
+	 * @name手机站栏目列表
+
+	 */
+
+    public function menumanage(){
+
+        
+
+        $in = &$this->in;
+
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+        
+
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+		//parse_name()字符串风格转换(0:将Java风格转换为C的风格;1:将C风格转换为Java的风格)
+
+        $where = array();
+
+        $order = ' sort ASC,id ASC ';
+
+        $data = $_m->where($where)->order($order)->select();
+
+        $this->assign('data',$data);
+
+        
+
+        $this->display();
+
+        
+
+        
+
+    }
+
+    
+
+    /**
+
+	 * @name添加手机站栏目
+
+	 */
+
+    public function add(){
+
+        
+
+        $in = &$this->in;
+
+        
+
+        $name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+        
+
+        if($this->ispost()){
+
+            $in['info']['create_time'] = time();
+
+            $in['info']['setting']     = var_export($in['info']['setting'],true);
+
+			//var_export返回一个合法的可以合法赋值的值,加true可以赋给一个变量,不加true则不能赋值给一个变量
+
+            $in['info']['catdir']     = $in['info']['url'].'.wap';
+
+            $wap = $_m->where('catdir = "'.$in['info']['catdir'].'" OR url = "'.$in['info']['url'].'"')->find();
+
+            if($wap) $this->message('栏目目录已存在，栏目创建失败！');
+
+            
+
+            $return = $_m->add($in['info']);
+
+            if($return){
+
+                $this->message('栏目创建成功！');
+
+            }else{
+
+                $this->message('栏目创建失败！');
+
+            }
+
+        }
+
+        
+
+        $_table = D('Category','admin');
+
+        $where = array();
+
+        $where['controller'] = array(' IN ','"fcontent","fpage","fguestbook","fjob","fsalenet","fvote","fask"');
+
+
+        $_getCatid = $_m->getUseCatid(1);//获已有栏目,第一个参数表示栏目的status值,第二个参数为不需要的mobilemenu的id值
+
+
+
+        if($_getCatid){
+
+            $where['catid'] = array(' NOT IN ',$_getCatid);//挑选出还没有被选取的符合条件的栏目
+
+        }
+
+        $category = $_table->where($where)->select();
+
+
+
+        $this->assign('category',$category);
+
+        
+
+        $this->display();
+
+        
+
+    }
+
+    
+
+    /**
+
+	 * @name更新手机站栏目
+
+	 */
+
+	public function edit(){
+
+		$in = &$this->in;
+
+        
+
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+        
+
+		if ($in ['ajax']) {
+
+			$this->_edit_ajax ();
+
+            exit;
+
+		}
+
+        $name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+        if($this->ispost()){
+
+            $in['info']['setting']     = var_export($in['info']['setting'],true);
+
+           //$in['info']['catdir']     = $catdir['catdir'];
+
+            $return = $_m->where('id = '.$in['id'])->save($in['info']);
+
+            if($return !==false){
+
+                $this->message('栏目编辑成功！');
+
+            }else{
+
+                $this->message('栏目编辑失败！');
+
+            }
+
+            
+
+        }
+
+        
+
+        $_table = D('Category','admin');//D中的admin表示Model所在的项目
+
+        $where = array();
+
+        $where['controller'] = array(' IN ','"fcontent","fpage"');
+
+        
+
+        
+
+        $_getCatid = $_m->getUseCatid(1,$in['id']);//排除了当前栏目和栏目中已有栏目的catid
+
+        if($_getCatid){
+
+            $where['catid'] = array(' NOT IN ',$_getCatid);
+
+        }
+
+        
+
+        $category = $_table->where($where)->select();
+
+        $this->assign('category',$category);
+
+        
+
+        $data = $_m->where(' id = '.$in['id'])->find();
+
+        
+
+        $category_edit = $_m->getOnesCategory($data['catid']);
+
+        $_array_key = array_search( $category_edit['controller'],$_m->_returnController );
+
+        $setting = $data['setting'];
+
+        $setting = eval("return {$setting};");
+
+        $data['otherHTML'] = self::_tpl_($_array_key,$setting['template']);//加入html代码
+
+
+
+        $this->assign('data',$data);
+
+       
+
+        
+
+        $this->display();
+
+        
+
+	}
+
+    
+
+    /**
+
+	 * @name异步排序
+
+	 */
+
+	public function _edit_ajax(){
+
+		$in = &$this->in;
+
+		$_model = M('Mobilemenu');
+
+		switch ($in['ajax']) {
+
+			case 'sort':  //排序
+
+				$in['id'] && $in['id'] = (int)substr($in['id'],5);
+
+				if ($in['id'] && !empty($in['sort'])) {
+
+					$data = $_model->find($in['id']);
+
+					if (is_array($data)) {
+
+						$data['sort'] = $in['sort'];
+
+						if (false !== $_model->save($data)) {
+
+							//更新缓存
+
+							die($data['sort']);
+
+						}
+
+					}
+
+				}
+
+				break;
+
+			default:
+
+				break;
+
+		}
+
+		exit ();
+
+	}
+
+    
+
+    
+
+    /**
+
+	 * @name异步获取模版
+
+	 */
+
+    
+
+    public function ajaxSetting(){
+
+        
+
+        $in = &$this->in;
+
+        
+
+        $data = array();
+
+
+
+        if(!isset($in['catid'])){
+
+            $data['error'] = '请选择栏目！';
+
+            die(json_encode($data));
+
+        }    
+
+        
+
+        $name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+        $category = $_m->getOnesCategory($in['catid']);
+
+        
+
+        if(isset($category)){
+
+            $_array_key = array_search($category['controller'],$_m->_returnController);
+            
+			$category['otherHTML'] = self::_tpl_($_array_key,$_m->_tplArray[$category['modelid']]);			
+            
+			die(json_encode($category));        
+
+        }else{
+
+            $data['error'] = '未获取到指定栏目！';
+
+            $data['otherHTML'] = self::_tpl_(-1);
+
+            die(json_encode($data));
+
+        }
+
+
+
+    }
+
+    
+
+    /** 
+
+     * @name筛选模版
+
+     */
+
+
+
+    public function _tpl_($key,$val = false){
+
+        
+
+        $category['otherHTML'] = '<tbody>';
+
+
+	   switch ($key){
+           case 3:
+		   case 5:
+			case 6:
+		        $category['otherHTML'] .= '<tr>';
+
+                $category['otherHTML'] .= '<th width="150">列表页<span>该栏目首页所使用的模板</span></th>';
+
+                $category['otherHTML'] .= '<td>';
+
+                $category['otherHTML'] .= '<label><input name="info[setting][template][index]" value="'.$val['index'].'" id="tb_inpute10552c937977179b3412b678936f042" class="input" title="请选择频道页模板" type="text"></label>';
+
+                $category['otherHTML'] .= '<label><input class="dialog" alt="?m=ffiles&a=tpl_wap&opener_id=tb_inpute10552c937977179b3412b678936f042&TB_iframe=true&height=400&width=500" title="模板库" id="upload_img_e10552c937977179b3412b678936f042" value="选择模板" type="button"></label>';
+
+                $category['otherHTML'] .= '</td>';
+
+                $category['otherHTML'] .= '</tr>';
+				    $category['otherHTML'] .= '<tr>';
+
+                $category['otherHTML'] .= '<th width="150">详细页模板<span>栏目下详细内容显示所使用的模板</span></th>';
+
+                $category['otherHTML'] .= '<td>';
+
+                $category['otherHTML'] .= '<label><input name="info[setting][template][show]" value="'.$val['show'].'" id="tb_input1ec1ed730b02c096de68d4cc2ef2b2a8" class="input valid" title="请选择内容页模板" type="text"></label>';
+
+                $category['otherHTML'] .= '<label><input class="dialog" alt="?m=ffiles&a=tpl_wap&opener_id=tb_input1ec1ed730b02c096de68d4cc2ef2b2a8&TB_iframe=true&height=400&width=500" title="模板库" id="upload_img_1ec1ed730b02c096de68d4cc2ef2b2a8" value="选择模板" type="button"></label>';
+
+                $category['otherHTML'] .= '</td>';
+
+                $category['otherHTML'] .= '</tr>';
+				    $category['otherHTML'] .= '<tr>';
+
+                $category['otherHTML'] .= '<th width="150">结果页模板<span>栏目下详细内容显示所使用的模板</span></th>';
+
+                $category['otherHTML'] .= '<td>';
+
+                $category['otherHTML'] .= '<label><input name="info[setting][template][send]" value="'.$val['send'].'" id="tb_input1ec1ed730b02c096de68d4cc2ef2b2a8" class="input valid" title="请选择内容页模板" type="text"></label>';
+
+                $category['otherHTML'] .= '<label><input class="dialog" alt="?m=ffiles&a=tpl_wap&opener_id=tb_input1ec1ed730b02c096de68d4cc2ef2b2a8&TB_iframe=true&height=400&width=500" title="模板库" id="upload_img_1ec1ed730b02c096de68d4cc2ef2b2a8" value="选择模板" type="button"></label>';
+
+                $category['otherHTML'] .= '</td>';
+
+                $category['otherHTML'] .= '</tr>';
+           
+                 break;
+		    case 0:
+		    case 2:	
+			case 4:
+                $category['otherHTML'] .= '<tr>';
+
+                $category['otherHTML'] .= '<th width="150">频道页模板<span>该栏目首页所使用的模板</span></th>';
+
+                $category['otherHTML'] .= '<td>';
+
+                $category['otherHTML'] .= '<label><input name="info[setting][template][index]" value="'.$val['index'].'" id="tb_inpute10552c937977179b3412b678936f042" class="input" title="请选择频道页模板" type="text"></label>';
+
+                $category['otherHTML'] .= '<label><input class="dialog" alt="?m=ffiles&a=tpl_wap&opener_id=tb_inpute10552c937977179b3412b678936f042&TB_iframe=true&height=400&width=500" title="模板库" id="upload_img_e10552c937977179b3412b678936f042" value="选择模板" type="button"></label>';
+
+                $category['otherHTML'] .= '</td>';
+
+                $category['otherHTML'] .= '</tr>';
+				
+				
+            case 1:
+           		
+                $category['otherHTML'] .= '<tr>';
+
+                $category['otherHTML'] .= '<th width="150">内容页模板<span>栏目下详细内容显示所使用的模板</span></th>';
+
+                $category['otherHTML'] .= '<td>';
+
+                $category['otherHTML'] .= '<label><input name="info[setting][template][show]" value="'.$val['show'].'" id="tb_input1ec1ed730b02c096de68d4cc2ef2b2a8" class="input valid" title="请选择内容页模板" type="text"></label>';
+
+                $category['otherHTML'] .= '<label><input class="dialog" alt="?m=ffiles&a=tpl_wap&opener_id=tb_input1ec1ed730b02c096de68d4cc2ef2b2a8&TB_iframe=true&height=400&width=500" title="模板库" id="upload_img_1ec1ed730b02c096de68d4cc2ef2b2a8" value="选择模板" type="button"></label>';
+
+                $category['otherHTML'] .= '</td>';
+
+                $category['otherHTML'] .= '</tr>';
+
+                break;
+            
+              
+		   default:
+
+                $category['otherHTML'] .= '<tr>';
+
+                $category['otherHTML'] .= '<th width="150">频道页模板<span>该栏目所使用的模板</span></th>';
+
+                $category['otherHTML'] .= '<td>请先选择您要绑定的栏目模型！'.$key.'</td>';
+
+                $category['otherHTML'] .= '</tr>';
+				
+
+        }
+		
+		
+
+
+        $category['otherHTML'] .= '</tbody>';
+
+
+
+        return $category['otherHTML'];
+
+        
+
+    }
+
+    
+
+    public function delete(){
+
+        
+
+        $in = &$this->in;
+
+        
+
+        if (! $in ['_tablename']) $this->message ( '没有指定操作表！' );
+
+
+
+        $name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+
+        
+
+        if($_m->where("id = ".$in['id'])->delete()){
+
+            $this->message ( '栏目删除成功！' );
+
+        }else{
+
+            $this->message ( '栏目删除失败！' );
+
+        }
+
+        
+
+    }
+
+    
+
+    
+
+    
+
+    
+
+}
\ No newline at end of file

--- admin/Lib/Action/FmodelAction.class.php ---
@@ -0,0 +1,689 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FmodelAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-7
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 模型管理
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 模型管理
+ *
+ */
+class FmodelAction extends FbaseAction {
+	
+	/**
+	 * @name模型列表、包括普通模型和内容模型
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_model = D ( 'Model' );		
+
+		//排序条件
+		$order = ' `modelid` ASC ';		
+        
+        //过滤副表内容 2013-01-28 fangfa
+        if($in['sidetable'] == 1){
+            $condition = ' moduleid!=11 ';
+        }else{
+            $condition = ' moduleid=11 ';
+        }
+		//统计模型数量
+		$data ['count'] = $_model->where ( $condition )->count ();		
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );		
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		 if($in['sidetable'] == 1){
+             $data ['info'] = $_model->relation ( 'module' )->where ( $condition )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();		
+         } else {
+		    $db_pre = C('DB_PREFIX');
+			$data ['info'] = $_model->field("{$db_pre}model.*,{$db_pre}category.catid")->join("left join {$db_pre}category on {$db_pre}category.modelid={$db_pre}model.modelid ")->where ("{$db_pre}model.moduleid=11")->order ("{$db_pre}model.modelid ASC ")->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();		
+		 }
+        $this->assign ( 'showtag', $in['sidetable'] );                             	 
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+	
+	/**
+	 * @name字段列表
+	 */
+	public function list_field() {
+		$in = &$this->in;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+
+		$_model = D ( 'Model' );
+		$_module = D ( 'Module' );
+		$_field = D ( 'ModelField' );
+        
+        if($in['fieldid']){
+            $data = array('listshow'=>$in['list_show']);
+            M('ModelField')->data($data)->where('fieldid = '.$in['fieldid'])->save();            
+        }  
+        
+		$model_data = $_model->find ( array (
+			'where' => array (
+			'modelid' => $in ['modelid'] 
+		) 
+		) );
+		if (! is_array ( $model_data )) {
+			$this->message ( '<font class="red">该模型不存在！</font>' );
+		}
+		//检查模型是否是可扩展的		
+		if (! $model_data ['extendable'] > 0)
+			$this->message ( '<font class="red">该模型是系统模型，不能管理其字段！</font>' );
+			//模块字段、扩展模型字段
+		$module_where = array (
+			'moduleid' => "{$model_data['moduleid']}" 
+		);
+		$module_data = $_module->field ( 'extendable' )->where ( $module_where )->find ();
+		if (! $module_data ['extendable'] > 0)
+			$this->message ( '<font class="red">该模型所属模块是系统模块，不管理其字段！</font>' );
+		//分页查询
+		//排序条件		
+		$order = ' `card` ASC ,`sort` ASC ';
+		//统计所属模型的字段记录数
+		$data ['count'] = $_field->where ( "`modelid`='{$in['modelid']}'" )->count ();
+		//初始化分页类
+		$in ['p'] = intval ( $in ['p'] );
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据、后台的数据操作都直接操作数据库
+		$data ['info'] = $_field->where ( "`modelid`=" . $in ['modelid'] )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		$this->assign ( 'data', $data );
+		$this->assign ( 'modelid', $in ['modelid'] );
+		//载入相应的字段类，模板会调用其静态方法
+		import ( 'Field', INCLUDE_PATH );
+		$this->display ();
+	}
+	
+	/**
+	 * @name新增模型
+	 */
+	public function add_model() {
+		$in = &$this->in;
+		//处理新增模型的时候的ajax请求
+		if ($in ['ajax'])
+			$this->_ajax_add_model ();
+			//处理普通请求
+		$_model = D ( 'Model' );
+		$_module = D ( 'Module' );
+		if ($this->ispost()) { //处理修改
+			if (! $_model->autoCheckToken ( $in ))
+				$this->message ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );	
+                		
+			 $modelid = $_model->add ( $in ['info'] );
+            
+            //fangfa 2012-12-29 新增副表处理
+            if($in['info']['moduleid'] == 11){
+                $_category  = M('Category');
+                $_menu      = M('Menu');
+                $categoryArray = array(
+                    'modelid'   =>  $modelid,
+                    'type'      =>  'normal',
+                    'controller'=>  'Fsidetable',
+                    'parentid'  =>  0,
+                    'name'      =>  $in['info']['name'],
+                    'permissions'=>  "array (
+  'admin' => 
+  array (
+    'add' => 
+    array (
+      0 => 'administrator',
+    ),
+    'edit' => 
+    array (
+      0 => 'administrator',
+    ),
+    'check' => 
+    array (
+      0 => 'administrator',
+    ),
+    'delete' => 
+    array (
+      0 => 'administrator',
+    ),
+    'manage' => 
+    array (
+      0 => 'administrator',
+    ),
+  ),
+)",
+                    'cattype'   =>  'site',
+                    
+                );
+                $catid = $_category->add($categoryArray);  
+                $menuArray  = array(
+                    'parentid'  =>  10,
+                    'name'      =>  $in['info']['name'],
+                    'url'       =>  "?m=fsidetable&a=manage&catid={$catid}",
+                    'target'    =>  'mainFrame',
+                    'rolenames' =>  "array (0 => 'administrator',)",
+                    'isopen'    =>  1,
+                    'sort'      =>  1,
+                    'keyid'     =>  "cat_{$catid}",
+                    'issystem'  =>  0,
+                );
+                $_menu->add($menuArray);
+            }
+            
+			if ($modelid == true) {
+				$this->message ( '<font class="green">模型创建成功！</font>', U('fmodel/manage') );
+			} else {
+				$this->message ( '<font class="red">' . $_model->getError () . '<br />模型创建失败！</font>' );
+			}
+		}
+		//查询可用的模块
+		$modules = $_module->selectModule ( array (
+			'`status`' => '1', 
+		) );
+		if (!$modules)
+			$this->message ( '<font class="red">没有可用模块！</font>' );
+		if (is_array ( $modules )) {
+			foreach ( $modules as $k => $v ) {
+				$modules [$k] = array (
+					'title' => $v, 'value' => $k 
+				);
+			}
+		}
+		$this->assign ( 'modules', $modules );
+		$this->display ();
+	}
+	
+	/**
+	 * @name处理添加模型的AJAX请求
+	 */
+	protected function _ajax_add_model() {
+		$in = &$this->in;
+		$_model = D ( 'Model' );
+		if ($in ['ajax'] == 'check_tablename') { //检查表名
+			$in['info']['exttable'] = trim( $in['info']['exttable'] );
+			if (!empty($in['info']['exttable'])) {
+				$table = $_model->where("`exttable`='{$in['info']['exttable']}'" )->find ( );
+				if (is_array ( $table ))
+					die ( 'false' ); //有重复
+				else
+					die ( 'true' ); //未重复，可以使用
+			}
+			die ( 'false' );
+		} else if ($in ['ajax'] == 'check_name') { //检查模型名称
+			$table = $_model->where( "`name`='{$in['name']}'" )->find ( );
+			if (is_array ( $table ))
+				die ( 'false' ); //有重复
+			else
+				die ( 'true' ); //未重复，可以使用
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name编辑模型，不可扩展的模型不能编辑，模型的编辑总只能更新模型的名称和状态
+	 * 
+	 */
+	public function update_model() {
+		$in = &$this->in;
+		//处理编辑模型的时候的ajax请求
+		if ($in ['ajax'])
+			$this->_ajax_update_model ();
+			//处理普通请求
+		$_model = D ( 'Model' );
+		$_module = D ( 'Module' );
+		$data = $_model->find ( $in ['modelid'] );
+		if (! is_array ( $data )) {
+			$this->message ( '<font class="red">要修改的模型不存在！</font>' );
+		}
+		//查询当前模型所属模块
+		if ($this->ispost()) { //处理修改
+			if (! $_model->autoCheckToken ( $in )) {
+				$this->error ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			}
+			//更新条件
+			$option = array (
+				'where' => array (
+				'modelid' => $in ['modelid']
+			) 
+			);
+			//name,status,description 几个数据才能更新，其余数据都是不可修改的
+			$data ['name'] = $in ['info'] ['name'];
+			$data ['status'] = $in ['info'] ['status'];
+			$data ['description'] = $in ['info'] ['description'];
+			if ($_model->update ( $data, $option )) {
+				$this->message ( '<font class="green">模型编辑成功！</font>', $this->forward );
+			} else {
+				$this->message ( '<font class="red">' . $_model->getError () . '模型编辑失败！</font>' );
+			}
+		}
+		$this->assign ( 'modules', $_module->find ( $data ['moduleid'] ) );
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+	
+	/**
+	 * @name处理模型更新时候的ajax请求
+	 */
+	protected function _ajax_update_model() {
+		$in = &$this->in;
+		$_model = D ( 'Model' );
+		if (! $in ['modelid'])
+			$this->ajaxReturn ( 'e', '异常错误' ); //异常错误
+		if ($in ['ajax'] == 'check_name') { //检查模型名称
+			$table = $_model->find ( "`name`='{$in['name']}' AND `modelid`<>'{$in['modelid']}'" );
+			if (is_array ( $table ))
+				$this->ajaxReturn ( 'n', '重复，不可使用' ); //有重复
+			else
+				$this->ajaxReturn ( 'y', '未重复，可以使用' ); //未重复，可以使用
+		}
+		$this->ajaxReturn ( 'e', '异常错误' ); //异常错误
+	}
+	
+	/**
+	 * @name添加、编辑、复制字段
+	 */
+	public function add_field() {
+		$in = &$this->in;
+		if (! $in ['fieldid'] && ! $in ['modelid'] && ! $in ['copy_fieldid']) {
+			$this->message ( '<font class="red">参数错误！</font>' );
+		}
+		//处理添加字段时候的ajax请求
+		if ($in ['ajax']) {
+			
+			$this->_ajax_add_field ();
+		}	
+		$_mfield = D ( 'ModelField' );
+		$data = '';
+		if ($this->ispost()) { //处理提交数据
+			//检查数据来源
+			if (! $_mfield->autoCheckToken ( $in ))
+				$this->message ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			$in ['info'] ['modelid'] = $in ['modelid'];
+			if ($in ['info'] ['fieldid'] > 0) { //更新数据库				
+				$field_data = $_mfield->find ( $in ['info'] ['fieldid'] );
+				//可修改部分信息
+				$field_data ['name'] = $in ['info'] ['name'];
+				$field_data ['tips'] = $in ['info'] ['tips'];
+				$field_data ['parent_css'] = $in ['info'] ['parent_css'];
+				$field_data ['css'] = $in ['info'] ['css'];
+				$field_data ['minlength'] = $in ['info'] ['minlength'];
+				$field_data ['maxlength'] = $in ['info'] ['maxlength'];
+				$field_data ['required'] = $in ['info'] ['required'];
+				$field_data ['pattern'] = $in ['info'] ['pattern'];
+				$field_data ['errortips'] = $in ['info'] ['errortips'];
+				$field_data ['setting'] = $in ['info'] ['setting'];
+				$field_data ['formattribute'] = $in ['info'] ['formattribute'];
+				$field_data ['card'] = $in ['info'] ['card'];				
+				if (false === $_mfield->save ( $field_data )) {
+					$this->message ( '<font class="red">' . $_mfield->getError () . '<br />字段更新失败！</font>' );
+				} else {
+					$this->message ( '<font class="green">字段更新成功！</font>', $this->forward );
+				}
+			} else { //插入新纪录
+                
+                if(!empty($in['sidetabledb'])){
+                    $_model = D('Model');
+                    $data = $_model->selectonesModel(" modelid  = ".$in['sidetabledb']);
+                    $in['info']['dbname'] = $data['tablename'];
+                }
+            
+				if (false === $_mfield->add ( $in ['info'] )) {
+					$this->message ( '<font class="red">' . $_mfield->getError () . '<br />字段添加失败！</font>' );
+				} else {
+					$this->message ( '<font class="green">字段添加成功！</font>', $this->forward );
+				}
+			}
+		} else {
+			//复制
+			if ($in ['copy_fieldid']) {
+				$data = $_mfield->find ( $in ['copy_fieldid'] );
+				$in ['modelid'] = $data ['modelid'];
+				unset ( $data ['fieldid'] );
+				unset ( $data ['field'] );
+				unset ( $data ['name'] );
+				$this->assign ( 'data', $data );
+			}
+			if ($in ['fieldid']) { //编辑
+				$data = $_mfield->find ( $in ['fieldid'] );
+				$in ['modelid'] = $data ['modelid'];
+				$this->assign ( 'data', $data );
+			}
+		}
+		$this->assign ( 'modelid', $in ['modelid'] );
+		$this->assign ( 'forward', $this->forward );
+		$this->display ();
+	}
+	
+	/**
+	 * @name处理添加字段时候的ajax请求
+	 */
+	protected function _ajax_add_field() {
+		$in = &$this->in;
+		$_mField = D ( 'ModelField' );
+		if ($in ['ajax'] == 'setting') {  //设置
+			if (! $in ['type'])
+				exit ();
+			$fieldid = $in ['copy_fieldid'] ? $in ['copy_fieldid'] : $in ['fieldid'];
+			if ($fieldid) {
+				$data = $_mField->field ( 'setting' )->find ( $fieldid );
+				$html = $_mField->getSettingByType ( $in ['type'], $data ['setting'] );
+			} else {
+				$html = $_mField->getSettingByType ( $in ['type'] );
+			}			
+			if ($html) {
+				die ( $html );
+			} else {
+				die ( '<font class="red">参数不正确！</font>' );
+			}
+			exit ();
+		}
+		if ($in ['ajax'] == 'check') {  //字段名称检查
+			if ($in ['modelid'] && empty ( $in ['field'] )) {
+				$in ['info']['field'] = trim ( $in ['info']['field'] );
+				if (!empty($in ['info']['field'])) {
+					$option = array (
+						'where' => array (
+							'modelid' => $in ['modelid'], 'field' => $in ['info']['field'] 
+						) 
+					);
+					$field_data = $_mField->find ( $option );				
+					if (is_array ( $field_data )) {
+						die('false');	//重复，不可用						
+					} else {
+						die('true');	//未重复，可以使用
+					}
+				}
+				die('false');
+			} else {
+				die('false');	//参数错误
+			}
+			exit ();
+		}
+		if ($in ['ajax'] == 'sort') {  //快速排序			
+			$in['fieldid'] && $in['fieldid'] = substr($in['fieldid'],6);
+			$in['sort'] = intval($in['sort']);
+			if ($in['fieldid'] &&  $in['sort'] == '0' || !empty($in['sort'])) {
+				$_mField = M ('ModelField');
+				$data = $_mField->field("`fieldid`,`sort`")->find($in['fieldid']);
+				if (is_array($data)) {
+					$data['sort'] = $in['sort'];
+					if (false !== $_mField->save($data)) {
+						echo $data['sort'];
+						exit ();
+					}
+				}
+			}
+			echo '';
+			exit();
+		}
+		if ($in ['ajax'] == 'savename') {  //快速编辑字段别名
+			$in['fieldid'] && $in['fieldid'] = substr($in['fieldid'],5);
+			if ($in['fieldid'] && !empty($in['name'])) {
+				$_mField = M ('ModelField');
+				$data = $_mField->field("`fieldid`,`name`")->find($in['fieldid']);				
+				if (is_array($data)) {
+					$data['name'] = $in['name'];
+					if (false !== $_mField->save($data)) {
+						echo $data['name'];
+						exit ();
+					}
+				}
+			}
+			echo '';
+			exit();
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name删除模型
+	 */
+	public function del_model() {
+		$in = &$this->in;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		if ($_model->delete ( $in ['modelid'] )) {
+			//删除模型字段信息			
+			$this->message ( '<font class="green">成功删除模型！</font>', U ( 'fmodel/manage' ) );
+		} else {
+			$this->message ( '<font class="red">' . $_model->getError () . '操作失败！</font>' );
+		}
+	}
+	
+	/**
+	 * @name删除字段
+	 */
+	public function del_field() {
+		$in = &$this->in;
+		if (! $in ['fieldid'])
+			$this->message ( '<font class="red">非法参数！</font>' );
+		$_mField = D ( 'ModelField' );
+		if (! $_mField->delete ( $in ['fieldid'] )) {
+			$this->message ( '<font class="red">' . $_mField->getError () . '删除失败！</font>' );
+		} else {
+			$this->message ( '<font class="green">字段删除成功！</font>' );
+		}
+	}
+	
+	
+	/**
+	 * @name启用、禁用模型
+	 */
+	public function status_model() {
+		$in = &$this->in;
+		if (! $in ['modelid'] || ! in_array ( $in ['status'], array (
+			0, 1 
+		) ))
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		$model_data = $_model->find ( array (
+			'modelid' => "{$in['modelid']}" 
+		) );
+		if (! is_array ( $model_data ))
+			$this->message ( '<font class="red">发生异常，要操作的模型不存在！</font>' );
+			//如果是开启，则先检查关联的模块是否开启
+		if ($in ['status'] == 1) {
+			$_module = D ( 'Module' );
+			$module_data = $_module->find ( array (
+				'modelid' => "{$in['modelid']}" 
+			) );
+			if (is_array ( $module_data )) {
+				if ($module_data ['status'] == 0)
+					$this->message ( '<font class="red">模型所属模块已经禁用，如果需要开启模型，请先将模块启用。</font>' );
+			} else {
+				$this->message ( '<font class="red">发生异常，模型所属模块不存在！</font>' );
+			}
+		}
+		//启用、禁用模型、并更新缓存
+		$_model->status ( $in ['modelid'], $in ['status'] );
+		redirect ( $this->forward );
+	}
+	
+	/**
+	 * @name启用、禁用字段
+	 */
+	public function status_field() {
+		$in = &$this->in;
+		if (! $in ['fieldid'])
+			$this->message ( '<font class="red">非法参数</font>' );
+		$_mField = D ( 'ModelField' );
+		$field_data = $_mField->find ( intval ( $in ['fieldid'] ) );
+		if (! is_array ( $field_data )) {
+			$this->message ( '<font class="red">字段不存在！</font>' );
+		} else {
+			if ($field_data ['systype'] == '2') {
+				$this->message ( '<font class="red">系统字段，不能操作！</font>' );
+			} else {
+				$in ['status'] = intval ( $in ['status'] ) > 0 ? '1' : '0';
+				$field_data ['status'] = $in ['status'];
+				if (false !== $_mField->save ( $field_data )) {
+					redirect ( $this->forward );
+				} else {
+					$this->message ( '<font class="red">操作失败！</font>' );
+				}
+			}
+		}
+	}
+	
+	/**
+	 * @name导出模型
+	 */
+	public function export_model() {
+		$in = &$this->in;
+		$this->message ( '<font class="red">建设中...</font>' );exit;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+		$_model = D ( 'Model' );
+		$filename = $_model->export ( $in ['modelid'] );
+		if (false !== $filename) {
+			import ( 'ORG.Net.Http' );
+			Http::download ( $filename );
+		} else {
+			$this->message ( '<font class="red">模型不存在！</font>' );
+		}
+	}
+	
+	/**
+	 * @name导入模型
+	 */
+	public function import_model() {
+		$in = &$this->in;
+		$this->message ('<font class="red">建设中...</font>');exit;
+		$_model = D('Model');
+		if ( $this->ispost()) {
+			if (! $_model->autoCheckToken ( $in ))
+				$this->message ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			if (! empty ( $_FILES ['model'] )) {
+				$upload_file = $_FILES ["model_file"];
+				//上传的文件信息
+				$file_info = pathinfo ( $upload_file ["name"] );
+				//上传的文件格式
+				$file_ext = strtolower ( $file_info ["extension"] );
+				if ($file_ext != 'model')
+					$this->message ( '<font class="red">上传文件不正确 </font>' );
+				//获取数据
+				$model_data = include ($_FILES ['model_file'] ['tmp_name']);
+			} else {
+				$this->message('<font class="red">没有选择上传文件</font>');	
+			}
+		}
+		$this->display ();
+	}
+	
+	/**
+	 * @name预览模型、只有扩展模型才能预览
+	 */
+	public function preview_model() {
+		$in = &$this->in;
+		if (! $in ['modelid'])
+			$this->message ( '<font class="red">参数错误！</font>' );
+			//检查模型是否可扩展	
+		$_model = D ( 'Model' );
+		$model_data = $_model->find ( $in ['modelid'] );		
+		if (! is_array ( $model_data ))
+			$this->message ( '<font class="red">该模型不存在或者已经被删除！</font>' );
+		$_mField = D ( 'ModelField' );
+		//字段系统类型   systype   0=自定义字段  1=主表默认字段  2=系统字段(主键字段)
+		$field_data = $_mField->where ( "`modelid`='{$in['modelid']}' AND `status`='1' AND `systype`<>'2'" )->order ( "`sort` ASC,`fieldid` ASC " )->findAll ();
+//		print_r($field_data);exit;		
+		$form_data = $_model->getForm($field_data);
+		$this->assign ( 'data', $model_data );		
+		$this->assign ( 'form_data', $form_data );
+		$this->display ();
+	}
+    
+    
+    /**
+     * 
+     * @name生成副表挂靠字段选择 ajax
+     * @articler fangfa
+     * @datetime 2012-12-28
+     * 
+     */
+    
+    public function values(){
+        
+        $in = &$this->in;
+        
+        $_modelFiled = M( 'ModelField' );
+        
+        $modelFiledArray = $_modelFiled->where('modelid = '.$in['modelid'])->select();
+        
+        $modelFiledHtml = '';
+        
+        foreach($modelFiledArray as $k=>$v){
+            if($v['field'] != 'catid'){//判断是否属于catid 栏目类型
+                $modelFiledHtml .= '<option value="'.$v['field'].'">'.$v['name'].'</option>';
+            }
+        }
+        
+        echo $modelFiledHtml;
+
+    }
+    
+    /**
+     * 
+     * @name生成副表预览信息 ajax
+     * @articler fangfa
+     * @datetime 2013-01-02
+     * 
+     */    
+    
+    public function previewselect(){
+        
+        $in = &$this->in;
+        
+        //设置最多预览个数
+        $pagesize = 5;
+        
+        if (! $in ['modelid']){
+            echo "参数错误！请检查是否模型ID是否传入";exit;
+        }else if(empty($in['classname']) || $in['classname'] == 'multiple'){
+            echo "该类型不能生成预览";exit;
+        }
+        
+        $_model = D('Model');
+        $data = $_model->selectonesModel(" modelid  = ".$in['modelid']);
+        
+        if(is_array($data)){
+            $_sideTable = M($data['tablename']);
+            $returnHtml = $_sideTable->field("{$in['dbkey']},{$in['dbvalue']}")->limit("0,{$pagesize}")->select();
+        }else{
+            echo "参数错误！请检查是否已删除模型";exit;
+        }
+        
+        //遍历获取返回的html
+        $html = '';
+        switch ($in['classname']){
+        case 'select':
+          $html .= '<select>';  
+          foreach($returnHtml as $k=>$v){
+            $html .= '<option value="'.$v[$in['dbvalue']].'">'.$v[$in['dbkey']].'</option>';  
+          }
+          $html .= '</select>';
+          break;
+        default:
+          foreach($returnHtml as $k=>$v){
+            $html .= '<input type="'.$in['classname'].'" value="'.$v[$in['dbvalue']].'">'.$v[$in['dbkey']];  
+          }
+        } 
+        
+        echo $html;
+        
+    }
+
+
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/FmoduleAction.class.php ---
@@ -0,0 +1,221 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FmoduleAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-12
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 模块管理
+// +----------------------------------------------------------------------
+
+/**
+ * @name 模块管理
+ *
+ */
+class FmoduleAction extends FbaseAction {
+
+	/**
+	 * @name模块管理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_model = D ( 'Module' );
+
+		//查询条件
+		$condition = array ();
+
+		//排序条件
+		$order = ' `sort` ASC,`moduleid` DESC ';
+
+		//统计模型数量
+		$data ['count'] = $_model->where ( $condition )->count ();
+
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_model->where ( $condition )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+
+	/**
+	 * @name注册模块
+	 */
+	public function add() {
+		$in = &$this->in;
+		$_module = D ('Module');
+		if ($this->ispost()) { //注册模块。不可扩展模块注册成功后自动注册模型
+			if ($_module->register($in['info'])) {
+				$this->message('<font class="green">模块注册成功！</font>');
+			} else {
+				$this->message('<font class="red">模块注册失败！'.$_module->getError() . '</font>');
+			}
+		}
+		$this->display();
+	}
+
+	/**
+	 * @name注册，编辑，开启、禁用模块、系统模块不能禁用
+	 */
+	public function edit() {
+		$in = &$this->in;
+		$_module = D ('Module');
+		if ($in['ajax']) $this->_edit_ajax();
+		if ($in['do']) {
+			switch ($in['do']) {
+				case 'status':
+					$in['moduleid'] = intval($in['moduleid']);
+					if (!$in['moduleid']) $this->message('<font class="red">参数错误，没有指定要操作的记录！</font>');
+					if (false === $_module->chageStatus($in['moduleid'],$in['status'])) {
+						$this->message('<font class="red">状态更新失败！</font>');
+					} else {
+						redirect(U('fmodule/manage'));
+					}
+					break;
+				default:
+					break;
+			}
+			exit();
+		} else {  //编辑模块
+			if ($this->ispost()) {
+				if ($in['info']['moduleid']) {
+					if (! $in ['_tablename'])
+						$this->message ( '没有指定操作表！' );
+					$name = $in ['_tablename']; //数据表名
+					$_m = D ( parse_name($name,1) ); //实例化表模型类
+					$_keyid = $_m->getPk ();
+					//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+					$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+					if ( $_m->create ( $in ['info'] ) ) {
+						if (! empty ( $in ['info'] [$_keyid] )) { //更新
+							$keyid = $_m->save ();
+						} else { //添加
+							$keyid = $_m->add ();
+							if ($keyid) $in['info'][$_keyid] = $keyid;
+						}
+						if (false !== $keyid) { //添加数据
+							if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+								$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+							}
+							//返回处理信息
+							if ($in ['ajax'])
+								$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+							else if($in ['_tablename'] == 'menu')
+								$this->message ( '记录保存成功！', '', 0, false);
+							else
+								$this->message ( '记录保存成功！' );
+						} else {
+							//返回处理信息
+							if ($in ['ajax'])
+								$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+							else
+								$this->message ( $_m->getError () . '<br />数据保存失败！' );
+						}
+					} else {
+						if ($in ['ajax'])
+							$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+						else
+							$this->message ( $_m->getError ().'记录保存失败！' );
+					}
+				}
+				else {
+					$this->message('<font class="red">参数错误！</font>');
+				}
+			} 
+			//获取数据
+			if (!empty($in['_tablename'])) {
+				$name = $in ['_tablename']; //数据表名
+				$_m = D ( parse_name($name,1) ); //实例化表模型类
+				$_keyid = $_m->getPk ();
+				if ( $in [$_keyid] ) { //编辑
+					$keyid = $in [$_keyid] ;
+					$data = $_m->find ( $keyid );
+					if (isset($data['parentid']) && $data['parentid']>0) {
+						$this->assign('parent_data',$_m->find($data['parentid']));
+					}
+					$this->assign ( 'data', $data );
+				}
+			}
+			$in['tpl'] = 'edit';
+			if (!empty($in['tpl'])) {
+				$this->display ( $in ['tpl'] );
+			} else {
+				$this->display();
+			}
+		}
+	}
+
+	/**
+	 * @name编辑操作的ajax请求
+	 */
+	protected function _edit_ajax() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'sort':
+				$in['moduleid'] && $in['moduleid'] = substr($in['moduleid'],9);
+				$in['sort'] = intval($in['sort']);
+				if ($in['moduleid'] &&  $in['sort'] == '0' || !empty($in['sort'])) {
+					$_module = M ('Module');
+					$data = $_module->field("`moduleid`,`sort`")->find($in['moduleid']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_module->save($data)) {
+							echo $data['sort'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+
+	/**
+	 * @name删除模块、系统模块不能删除，非系统模块删除后会自动删除对应的模型
+	 */
+	public function delete() {
+		$in = &$this->in;
+		$in['moduleid'] && $in['moduleid'] = intval($in['moduleid']);
+		if ($in['moduleid']) {
+			$_module = D ('Module');
+			if (false !== $_module->delete($in['moduleid'])) {
+				$this->message('<font class="green">模块卸载成功，请注意删除对应的模块菜单！</font>', U ('fmodule/manage'));
+			} else {
+				$this->message('<font class="red">'.$_module->getError() . '参数错误，模块不存在！</font>');
+			}
+		} else {
+			$this->message('<font class="red">参数错误，模块不存在！</font>');
+		}
+	}
+
+	/**
+	 * @name更新模块缓存信息
+	 */
+	public function cache() {
+		$in = &$this->in;
+		$_module = D('Module');
+		if ($in['moduleid']) {	//更新单个缓存
+			if (!$_module->cacheModule($in['moduleid'])) $this->error('数据写入失败！');
+			else $this->success('缓存更新成功');
+		} else { //更新所有缓存
+			if (!$_module->cacheAllModule()) $this->error('数据写入失败！');
+			else $this->success('缓存更新成功');
+		}
+
+	}
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/ForderAction.class.php ---
@@ -0,0 +1,204 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: ForderAction.class.php
+// +----------------------------------------------------------------------
+// | Date: Fri Apr 23 14:18:54 CST 2010
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 订单模块
+// +----------------------------------------------------------------------
+//
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 订单模块
+ *
+ */
+class ForderAction extends FbaseAction {
+	
+	/**
+	 * @name订单管理
+	 * @see FbaseAction::manage()
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$_mOrder = D ('Order','Admin');
+		//初始化数据
+		$data = array();
+		//查询条件 ,   group  by  ordernum
+		$where = array ();
+		if (isset($in['status'])) {
+			$in['status'] = intval($in['status']);
+			$where["status"] = $in['status'];
+			$this->assign('status',$in['status']);
+		} else {  //显示所有非取消的并且客户已经确认的订单
+			$where["status"] = array('gt', '-1'); 
+		}
+		if ($in['q'] && $in['q'] != '请输入关键字') {
+			$in['q'] = urldecode($in['q']);
+			$where["{$in['field']}"] = array('like',"%{$in['q']}%");
+		}
+		//排序条件
+		$order = " `orderid` DESC ";
+		//统计订单数量
+		$data ['count'] = $_mOrder->where ( $where )->count ();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] =  $_mOrder->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();;
+//		dump($data);exit;
+		$this->assign ( 'data', $data );
+		$this->assign('in',$this->in);
+		$this->display();
+	}
+	
+	/**
+	 * @name修改订单
+	 * 
+	 */
+	public function edit() {
+		$in = &$this->in;
+		$_mOrder = D ('Order','admin');
+		//修改
+		if ($this->ispost()) { //保存信息
+//			dump($in['info']);exit;
+			if (false === $_mOrder->save($in['info'])) {
+				$this->message(L(' 修改失败！') . $_mOrder->getError());
+			} else {
+				$this->message(L(' 修改成功！'), U('forder/manage'));
+			}
+		}
+		if ($in['do']) $this->status();
+		$where = array(
+			'orderid' => (int)$in['orderid'],
+		);
+		$data = $_mOrder->where($where)->find();
+		if ($data['status']<0) {
+			$this->message(L('不能操作已经关闭交易的订单！'));
+		}
+		//修改完以后，保存操作记录
+		$this->assign('data',$data);
+		$this->display();
+	}
+	
+	/**
+	 * @name更改订单状态，已经完成交易或者已经取消的订单，无法修改状态
+	 * 
+	 */
+	protected function status() {
+		$in = &$this->in;
+		//更改完后，保存操作记录
+		$in['dosubmit'] = 1;
+		$in['_tablename'] = 'order';
+		$in['status'] = intval($in['status']);
+		
+		if ($this->ispost()) {
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+		exit;
+	}
+	
+	/**
+	 * @name查看订单详情
+	 * 
+	 */
+	public function show() {
+		$in = &$this->in;
+		$_mOrder = D ('Order','admin');
+		$where = array(
+			'orderid' => (int)$in['orderid'],
+		);
+		$data = $_mOrder->where($where)->find();
+		$this->assign('data',$data);
+		$this->display();
+	}
+	
+	/**
+	 * @name查看某个订单的日志记录
+	 * 
+	 */
+	public function log() {
+		$in = &$this->in;
+		
+		$this->display();
+	}
+	
+	
+	/**
+	 * @name模块配置
+	 * 
+	 */
+	public function setting() {
+		$in = &$this->in;
+		
+		$this->display();
+	}
+	
+	/*public function delete() {
+		
+	}*/
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FpageAction.class.php ---
@@ -0,0 +1,57 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FdbAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 单页处理
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 单页处理
+ *
+ */
+class FpageAction extends FbaseAction {
+	
+	/**
+	 * @name 单页处理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$_page = D ('Page');
+		if ($this->ispost()) {
+			//令牌验证
+			if (!$_page->autoCheckToken($in)) $this->message('<font class="red">请不要非法提交或者重复刷新页面！</font>');
+			$in['info']['catid'] = &$in['catid'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['update_time'] = time();
+			if ($in['info']['pageid']) {
+				if (false !== $_page->save($in['info'])) {
+					$this->message('<font class="green">保存成功！</font>');
+				} else {
+					$this->message('<font class="red">保存失败！</font>');
+				}
+			} else {
+				$in['info']['create_time'] = time();
+				if (false !== $_page->add($in['info'])) {
+					$this->message('<font class="green">保存成功！</font>');
+				} else {
+					$this->message('<font class="red">保存失败！</font>');
+				}
+			}
+		}
+		$category_data = D('Category')->find($in ['catid']);
+		$this->assign('cat',$category_data);
+		$this->assign('data',$_page->where("`catid`='{$in['catid']}'")->find());
+		$this->assign('forward',U('fpage/manage?catid='.$in['catid']));
+		$this->display();
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FpluginAction.class.php ---
@@ -0,0 +1,265 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FpluginAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2013-02-21
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 
+ *
+ */
+class FpluginAction extends FbaseAction {
+
+    public function testdata(){
+
+        $in = &$this->in;
+        
+        $_category = D('Category');
+        $arr = array(1,2,3,4,5);
+        $dbname_arr = array(1=>'fangfa_content_article',2=>'fangfa_content_product',3=>'fangfa_content_picture',4=>'fangfa_content_download',5=>'fangfa_content_video');
+        $_getCatidUseModelid = $_category->getCatidUseModelid($arr);
+
+        $this->assign('categoryArr',$_getCatidUseModelid);
+        
+        if($this->ispost()){
+       	    //执行数据库表插入 有待优化
+        	$sql_data = file_get_contents(APP_PATH.'Tpl/default/Fplugin/content.txt');
+    		$sql_data = str_replace("\r\n", "\n", $sql_data);
+        	$sql_lines = explode("+-+", $sql_data);
+            
+            //执行数据库表插入 有待优化
+        	$sql_data_sidetable = file_get_contents(APP_PATH.'Tpl/default/Fplugin/sidetable.txt');
+    		$sql_data_sidetable = str_replace("\r\n", "\n", $sql_data_sidetable);
+        	$sql_lines_sidetable = explode("+-+", $sql_data_sidetable);
+            
+            $number = $in['size'] == 'diy'?$in['sizenumber']:$in['size'];
+            $randomthumb = $in['randomthumb'];
+            
+            $attr = $in['attr'];
+            $attrsize = $in['attrsize'];
+            $Model = new Model(); // 实例化一个model对象 没有对应任何数据表
+            foreach($in['catid'] as $c){
+                
+                $category = $_category->where('catid = '.$c)->find();
+                $db_name = $dbname_arr[$category['modelid']];
+                
+                for($i = 0;$i<$number;$i++){
+                    $sql = 'INSERT INTO `fangfa_content` (`catid`, `title`, `style`, `thumb`, `attr`, `description`, `status`, `sort`, `url`, `template`, `seokeywords`, `seodescription`, `seotitle`, `user_id`, `username`, `create_time`, `update_time`) VALUES ';
+                    $v2 = str_replace('$CATID',$c,$sql_lines[$i]);
+
+                    if(in_array('top',$attr) && $i < $attrsize){
+                        $v2 = str_replace('$ATTR','top',$v2);
+                    }elseif(in_array('hot',$attr) && $i < ($attrsize*2)){
+                        $v2 = str_replace('$ATTR','hot',$v2);
+                    }elseif(in_array('scroll',$attr) && $i < ($attrsize*3)){
+                        $v2 = str_replace('$ATTR','scroll',$v2);
+                        $v2 = str_replace('$THUMB','images/image_test.jpg',$v2);
+                    }else{
+                        $v2 = str_replace('$ATTR','',$v2);
+                    }
+                    
+                    if($randomthumb){
+                        $rand = rand(1,2);
+                        if($rand == 2){
+                            $v2 = str_replace('$THUMB','images/image_test.jpg',$v2);
+                        }else{
+                            $v2 = str_replace('$THUMB','',$v2);
+                        }
+                    }else{
+                        $v2 = str_replace('$THUMB','',$v2);
+                    }
+                    
+                    $sql .= $v2;
+                    $Model->query($sql);
+                    $id = mysql_insert_id();
+                    $sort = rand(1,$number);
+                    $sql2 = 'UPDATE fangfa_content SET url = "2013/'.$id.'.html",status = 9,sort = '.$sort.'  WHERE cid = '.$id;
+                    $Model->query($sql2);
+                    $sql_sidetable = 'INSERT INTO `'.$db_name.'` (`cid`, `fulltitle`, `content`) VALUES';
+                    $sql_sidetable .= $sql_lines_sidetable[$i];
+                    $sql_sidetable = str_replace('$CID',$id,$sql_sidetable);
+
+                    $Model->query($sql_sidetable);
+                    
+                }
+            }
+        
+        }
+
+        $this->display();
+        
+    }
+    
+    public function photomanage(){
+        
+        $in = &$this->in;
+        
+        $db_pre = C('DB_PREFIX');
+        
+        $_model_field = D('ModelField');
+        $_content = D('Content');
+        //组图、缩略图
+        $modelfield = $_model_field->findlist($in['modelid'],' formtype in ("thumb","images")',0,'field,setting');
+        foreach($modelfield as $k=>$v){
+            $set[$v['field']]['maxwidth'] = $v['setting']['cut_maxwidth'];
+            $set[$v['field']]['maxheight'] = $v['setting']['cut_maxheight']; 
+            if($k == 0)
+                $field .= $v['field'];
+            else
+                $field .= ','.$v['field'];
+        }
+
+        $data = $_content->field($field)
+                         ->join("LEFT JOIN {$db_pre}".$in['tablename']." as t2 ON t2.cid = {$db_pre}content.cid")
+                         ->where("{$db_pre}content.cid = ".$in['cid'])
+                         ->find();
+                         
+                         
+                         
+        foreach($data as $k=>$v){
+
+            if(self::isInString($v,'array')){
+
+                $v = eval("return $v;");
+                foreach($v as $k2=>$v2){
+                    $photos[$k2]['src'] = $v2[1].'?'.rand(0,9999);
+                    $photos[$k2]['maxwidth'] = $set[$k]['maxwidth'];
+                    $photos[$k2]['maxheight'] = $set[$k]['maxheight'];
+                }
+            }else{
+
+                $imgs[$k]['src'] = $v.'?'.rand(0,9999);
+                $imgs[$k]['maxwidth'] = $set[$k]['maxwidth'];
+                $imgs[$k]['maxheight'] = $set[$k]['maxheight'];
+
+            }
+        }
+
+        $imgs = array_filter($imgs);
+                
+        //文章内图
+        $modelfield2 = $_model_field->findlist($in['modelid'],' formtype in ("editor")',0,'field');
+        foreach($modelfield2 as $k=>$v){
+            if($k == 0)
+                $field2 .= $v['field'];
+            else
+                $field2 .= ','.$v['field'];
+        }
+        
+        $data2 = $_content->field($field2)
+                         ->join("LEFT JOIN {$db_pre}".$in['tablename']." as t2 ON t2.cid = {$db_pre}content.cid")
+                         ->where("{$db_pre}content.cid = ".$in['cid'])
+                         ->find();
+                         
+        foreach($data2 as $k=>$v){
+            $regex = '/(?<=<img src=").*(?=")/Usi';
+            $str = $v;
+
+
+            $matches = array();
+
+            preg_match_all($regex, $str, $matches);
+            
+            $content_arr = $matches[0];
+            
+            foreach($content_arr as $k=>$v){
+                $str = explode('../../../uploads/',$v);
+                $contents[] = $str[1];
+            }
+
+        }
+
+        
+        $this->assign('set',$set);
+        $this->assign('imgs',$imgs);
+        $this->assign('photos',$photos);
+        $this->assign('contents',$contents);
+        $this->assign('cid',$in['cid']);
+        $this->assign('tablename',$in['tablename']);
+        $this->assign('modelid',$in['modelid']);
+        
+        $this->display();
+        
+
+    }
+    
+    function isInString($haystack, $needle) { 
+        //防止$needle 位于开始的位置 
+        $haystack = '-_-!' . $haystack; 
+        return (bool)strpos($haystack, $needle); 
+    } 
+    
+    public function cutit(){
+        
+        $in = &$this->in;
+        
+		$upload_dir = FANGFACMS_ROOT . C('UPLOAD_DIR');
+		$filepath = $upload_dir . $in ['src'];
+        
+        $img = getimagesize($filepath);
+         
+        $this->assign('img',$img);
+        $this->assign('maxwidth',$in['maxwidth']);
+        $this->assign('maxheight',$in['maxheight']);
+        $this->assign('src',$in['src']);
+        $this->assign('cid',$in['cid']);
+        $this->assign('tablename',$in['tablename']);
+        $this->assign('modelid',$in['modelid']);
+        
+        $this->display();
+    }
+    
+    public function cutphoto(){
+        
+        $in = &$this->in;
+       
+		$upload_dir = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' );
+        $src = explode('?',$in['src']);
+		$filepath = $upload_dir . $src[0];
+        
+        
+
+        
+		if ($this->ispost()) {
+			$in['w'] = intval($in['w']);
+			$in['h'] = intval($in['h']);
+			$in['x1'] = intval($in['x1']);
+			$in['y1'] = intval($in['y1']);
+
+            if(is_file($filepath)) {
+
+                import('ImageResize',INCLUDE_PATH);
+                $_imageResize = new ImageResize();
+                $_imageResize->load($filepath);
+                if ($_imageResize->cut($in['w'],$in['h'],$in['x1'],$in['y1'])) {
+                    //保存图片、覆盖原图
+                    if ($_imageResize->save($filepath,false)) {
+                        $this->message('图片裁剪成功！','admin.php?m=fplugin&a=photomanage&cid='.$in['cid'].'&tablename='.$in['tablename'].'&modelid='.$in['modelid']);
+                    }
+                }
+            }
+            die('n');
+
+		}
+        
+    }
+    
+    public function clear_sql(){
+        
+        $in = &$this->in;
+        
+        
+        
+    }
+
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Action/FpressAction.class.php ---
@@ -0,0 +1,181 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FvoteAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-1-2
+// +----------------------------------------------------------------------
+// | Author: 成俊<cgjp123@163.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  投票
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 投票管理
+ *
+ */
+class FpressAction extends FbaseAction
+{
+	protected $_category = '';
+	protected $category_data = '';
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'Press';
+		if (strtolower(MODULE_NAME) == 'fpress') {
+			if ($in['catid'] || $in['info']['catid']) { //检查栏目操作权限
+				$this->_category = D ('Category');
+				$this->category_data = $this->_category->find( (int)$in['catid'] );
+				$this->assign('cat',$this->category_data);
+				//print_r($this->category_data);
+				//$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+			} else {
+				$this->message('<font class="red">没有选择要操作的栏目~！</font>');
+			}
+		}
+	}
+
+
+	/**
+	 * @name投票列表
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		$_press = D( $in['_tablename'] );
+		$order = "sort asc";
+		$data['count'] = $_press ->  count();
+		
+		import("ORG.Util.Page"); 	
+		$Page = new Page ( $data['count'], 20);
+		$data['pages'] = $Page->show ();
+
+		$data['info'] = $_press -> field("pid,catid,thumb,url,sort,title,attr,create_time,update_time,status")->order($order)->limit ( $Page->firstRow . ',' . $Page->listRows ) -> select ();
+
+		$this->assign("data", $data);
+		$this->display();
+	}
+
+	/**
+	 * @name添加投票
+	 */
+	public function add() {
+		
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_add();
+		}
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$_press = D ('Press');
+			$return = $_press->add($in['info']);
+			if (false !== $return) {			  
+				$this->message('<font class="green">内容保存成功！</font>',U('fpress/manage?catid='.$in['info']['catid']),3,false);
+				exit;
+			} else {
+				$this->message('<font class="red">' . $_press->getError() . '内容保存失败！</font>');
+			}
+		}
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,array("catid"=>$in['catid'],"classify_select"=>$in['catid']));
+	
+		$this->assign('form_data',$form);
+		$this->assign('catid',$in['catid']);
+		$this->display();
+	}
+
+	public function edit() {
+		$in = &$this->in;
+		if (empty($in['info']['pid']) && empty($in['pid'])) $this->message('<font class="red">参数错误，无法继续该操作！</font>');
+		if($in['ajax'] && $in['ajax'] == "sort"){
+			$this->_edit_sort();
+		}
+		$_press = D ('Press');
+		$_mField = D('ModelField');
+		$cat_data = $this->category_data;
+		
+		import('Field',INCLUDE_PATH);  // 进行处理
+		$fieldArr = $_mField->field("`fieldid`")->where(" `status`='1' AND `modelid`='".$cat_data['modelid']."'")->findAll();
+		$field = array();  // 栏目模型所有字段的信息
+		foreach ($fieldArr as $k=>$v) {
+			$value = F ('modelField_'.$v['fieldid']);
+			if (is_array($value)) {  //组合成 array($formtype1=>'',$formtype2=>'',$formtype3=>'',)的形式
+				$field[$value['field']] = $value;
+			}
+		}
+		if($in['dosubmit']){
+			$bool = $_press->update($in['info']);
+			//$bool = $_press -> data($data)->add();
+			if($bool){
+				$this->message("内容更新成功！",U("fpress/manage?catid=".$in['info']['catid']));
+			}
+			else {
+				$this->message($_press->error, $this->forward);
+			}
+		}
+		$data = $_press->where("pid=".$in['pid']." and catid=".$in['catid'])->find();
+		foreach ($field as $k=>$v)  {
+			Field::output($v['formtype'],$k, $v['setting'],$data);
+		}
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1'")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,$data,array('url'=>'readonly="readonly"'));
+		$this->assign('form_data',$form);
+		$this->assign('data',$data);
+		$this->display();
+	}
+	
+	public function status_model(){
+		$in = &$this->in;
+		if( empty($in['pid']) ) {
+			$this->message("没有编号！");
+		}
+		$_press = D("Press");
+		$_press -> where("pid=".$in['pid'])->data( array("status" => $in['status']  ))-> save( );
+		
+		redirect(U("fpress/manage?catid=".$in['catid']));
+	}
+	 
+	
+	public function delete()
+	{
+		$in = &$this->in;
+		$_model = D('Press');
+		if (!$in['pid'] || !$in['catid']) {
+			$this->message("参数错误", $this->forward);
+		}
+		$bool = $_model->where('pid ='.$in['pid']." and catid=".$in['catid'])->delete();
+		if($bool){
+			$this->message("操作成功！",U("fpress/manage?catid=".$in['catid']));
+		}
+		else {
+			$this->message("操作失败！",U("fpress/manage?catid=".$in['catid']));
+		}
+	}
+	
+	protected function _edit_sort(){
+ 		$in = &$this->in;
+ 		$in['pid']  = substr($in['pid'],5);
+		$in['sort'] = intval($in['sort']);
+		if ($in['sort'] == '0' || !empty($in['sort'])) {
+			$_press = M ('Press');
+			$data = $_press->find($in['pid']);
+			if (is_array($data)) {
+				$data['sort'] = $in['sort'];
+				if (false !== $_press->save($data)) {
+					echo $data['sort'];
+					exit ();
+				}
+			}
+		}
+		echo '';
+ 	}
+}
+?>

--- admin/Lib/Action/FprofileAction.class.php ---
@@ -0,0 +1,111 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FdbAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 个人信息处理
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 个人信息处理
+ *
+ */
+class FprofileAction extends FbaseAction {
+	
+	protected $needAuth = false;
+	
+	/**
+	 * 用户操作类对象
+	 */
+	
+	protected $_user = '';
+	
+	/**
+	 * 用户信息
+	 * @var unknown_type
+	 */
+	protected $profile_data = array();
+	
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		//验证权限
+		if ($in['user_id'] && ! (int)$_SESSION['userdata']['user_id'] ) {
+			$in['user_id'] = $_SESSION['userdata']['user_id'];
+		}
+		import('User', INCLUDE_PATH);
+		$this->_user = get_instance_of('User');
+		$this->profile_data = $this->_user->getUserData($in['user_id']);
+	}
+	
+	/**
+	 * @name编辑个人资料
+	 */	
+	public function edit() {
+		$in = &$this->in;
+		$_user = &$this->_user;
+		if (!$_SESSION['userdata']['user_id']) {
+			$this->message('<font class="red">你还没有登录，请登录！</font>', U('flogin/index'));
+		}
+		if ($_SESSION['userdata']['username'] == 'developer') {
+			$this->message('<font class="red">操作终止，不能更改此管理员信息！</font>', U('findex/home'));
+		}
+		if ($this->ispost()) {
+			if (!$_user->autoCheckToken($in)) { //令牌验证
+				$this->error ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			}
+			if (false === $_user->update($in['info'],(int)$in['info']['isadmin'])) {
+				$this->message('<font class="red">' . $_user->getError() . '个人资料修改失败！</font>');
+			} else {
+				$this->message('<font class="greeen">个人资料修改成功！</font>', U('fprofile/edit') );
+			}
+		}
+		$data = $_user->getUserData($_SESSION['userdata']['user_id']);
+		$this->assign('data',$data);
+		$this->display();
+	}
+	
+	/**
+	 * @name修改个人密码
+	 */
+	public function pwd() {
+		extract($this->in);
+		$_user = &$this->_user;
+		if (!$_SESSION['userdata']['user_id']) {
+			$this->message('<font class="red">你还没有登录，请登录！</font>', U('flogin/index'));
+		}
+		if ($_SESSION['userdata']['username'] == 'developer') {
+			$this->message('<font class="red">操作终止，不能更改此管理员信息！</font>', U('findex/home'));
+		}
+		if ($this->ispost()) {
+			if (!$_user->autoCheckToken($_POST)) { //令牌验证
+				$this->error ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			}
+			if ($_user->changePassword($_SESSION['userdata']['username'], $old_password, $password)) {
+				$this->message('<font class="green">密码修改成功！</font>', U('fprofile/pwd'));
+			} else {
+				$this->error('<font class="red">密码修改失败，请重新修改！</font>');
+			}
+		}
+		$this->display();
+	}
+	
+	/**
+	 * @name注销登录
+	 */
+	public function logout() {
+		unset($_SESSION);
+		session_destroy();
+		$this->message('<font class="green">退出成功,请重新登录！</font>', U('/flogin/index'));
+	}
+}

--- admin/Lib/Action/FrbacAction.class.php ---
@@ -0,0 +1,630 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FrbacAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-6-2
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  操作模块管理及角色授权管理
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 操作模块及角色授权管理
+ *
+ */
+class FrbacAction extends FbaseAction {
+
+	/**
+	 * @name模块操作列表
+	 */
+	public function manage() {		
+		$in = &$this->in;		
+		$in['_tablename'] = 'acts';
+		if(!isset($in['appname']))$in['appname'] = "admin";
+		$in['where'] = "appname = '{$in['appname']}'";
+		if ($this->ispost()) {	//关键字查询筛选
+			$search = array();
+			if ($in['q'] != '请输入关键字') {
+				$in['q'] = urldecode($in['q']);
+				$search['q'] = $in['q'];
+				if ($in['field']) {
+					$in['where'] .= " AND `{$in['field']}` LIKE '%{$in['q']}%'";
+					$search['field'] = $in['field'];
+				}
+			}
+			$this->assign('search',$search);
+		}
+		
+		if (! $in['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in[$_keyid] ) { //主键筛选
+			$option['where'] = array ($_keyid => $in[$_keyid] );
+		}
+		if ($in['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		$this->assign ( 'appname', $in['appname'] );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+		
+	/**
+	 * @name添加模块
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_add_ajax();
+		$in['_tablename'] = 'acts';
+
+		if ($this->ispost()) {
+			$_acts = D ('Acts');
+			if ($_acts->isActsExists($in['info'])) {
+				$this->error( "“".$in['info']['controller'] ."”的操作 “".$in['info']['action']."”已经注册，无需再次注册到系统中！<br />");
+			}
+			
+			if (! $in['_tablename'])
+				$this->message ( '没有指定操作表！' );
+            
+            //fangfa   2012-12-2   修改现有后台操作注册管理后需要手动添加超级管理员的操作权限的问题    
+            $in['info']['allow']    =  'administrator';
+                
+			$name = $in['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in['info'] ) ) {
+				if (! empty ( $in['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in['info'] );
+					}
+					//返回处理信息
+					if ($in['ajax'])
+						$this->ajaxReturn ( $in['info'], '记录保存成功！', 1, 'json' );
+					else if($in['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in[$_keyid] ) { //编辑
+				$keyid = $in[$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		$this->assign ( 'appname', isset($in['appname'])?$in['appname']:"admin" );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name处理添加模块操作时候的ajax请求
+	 */
+	protected function _add_ajax() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			default:
+				break;
+		}
+	}
+	
+	/**
+	 * @name编辑模块
+	 */
+	public function edit() {
+		$in = &$this->in;
+		$in['_tablename'] = 'acts';
+		$in['tpl'] = 'edit';
+		
+		if ($this->ispost()) {
+			if (! $in['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in['info'] ) ) {
+				if (! empty ( $in['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in['info'] );
+					}
+					//返回处理信息
+					if ($in['ajax'])
+						$this->ajaxReturn ( $in['info'], '记录保存成功！', 1, 'json' );
+					else if($in['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in[$_keyid] ) { //编辑
+				$keyid = $in[$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name取消模块注册
+	 */
+	public function delete() {
+		$in = &$this->in;
+		$in['_tablename'] = 'acts';
+		
+		if (! $in['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in['_tablename']; //数据表名
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in[$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in[$_keyid])) {
+					$option['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option['where'] = array ($_keyid => $in[$_keyid] );
+			}
+		}
+		if ($in['where']) {
+			if (!empty($option['where'])) {
+				@$option['where'] = array_merge($in['where'],$option['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in[$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in[$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+	
+	/**
+	 * @name角色授权
+	 * 后台勾选以后自动生效
+	 */
+	public function power() {
+		$in = &$this->in;
+		if (!$in['role_id']) {
+			$this->error('没有选择要授权的角色！');
+		}
+		$_acts = D ('Acts');
+		if ($this->ispost()) {
+			if ($in['dosubmit'] == 1) {
+				$result = $_acts->ajaxSave($in);
+			}else {
+				$result = $_acts->ajaxCategory($in);
+			}
+			if(null === $result) {
+				die('e');
+			} else if (false === $result) {
+				die('false');	
+			} else {
+				die('true');
+			}
+		}
+		//所有操作文件
+		//SELECT GROUP_CONCAT(DISTINCT(controller)) FROM `fangfa_acts` GROUP BY appname;
+		$group = $_acts->field(array("GROUP_CONCAT(DISTINCT(controller)) AS 'group'"))->group("appname")->order('controller')->findAll();
+		if(strpos($group[1]['group'],'frbac')){//通过FRBAC来判断是前台还是后台的控制器组合
+			$group['admin'] = $group[1];
+			$group['front'] = $group[0];
+		}elseif(strpos($group[0]['group'],'frbac')){
+			$group['admin'] = $group[0];
+			$group['front'] = $group[1];
+		}
+		unset($group[0],$group[1]);
+		if (!empty($group) && is_array($group)) {
+			foreach ($group as $k=>$v) {
+				!empty($v) && $data[$k] = explode(',', $v['group']);				
+			}
+		}
+		unset($group,$k,$v);
+		$data = array_map('array_flip', $data);//交换键与值
+		$datas = array();
+		if (is_array($data)) {
+			foreach ($data as $k=>$v) {	//操作文件下的所有动作
+				if (is_array($v) && !empty($v)) {
+					foreach ($v as $controller=>$t) {
+						$where = array(
+							'appname' => $k,
+							'controller' => $controller,
+						);
+						$datas[$k][$controller]['info'] = $_acts->where($where)->findAll();
+						//控制器名	
+						$datas[$k][$controller]['contorllername'] = $datas[$k][$controller]['info'][0]['controllername'];				
+					}
+				} 
+			}
+		}
+		$category = D ( 'Category' )->where("type='normal' and controller!='Fsidetable'")->relation( 'model' )->field ( "`catid` AS `id`,`name`,controller,`modelid`,`parentid`,`type`,`sort`,`url`,`islock`,`topcatid`,permissions" )->order ( "`sort` ASC,`catid` ASC " )->select ();
+		
+
+		foreach ($category as $k => $t){
+			$tablename = ucfirst ( substr($t ['controller'],1) );
+			$_m = D ( $tablename );
+			$setting = $_m->setting($t, $t['catid'], $t['parentid']);
+			$setting = explode("<!--start permissions-->",$setting['body']);
+			$setting = explode("<!--end permissions-->",$setting[1]);
+			$category[$k]['setting'] = $setting[0];
+		}
+		
+		$this->assign('data',$datas);
+		$this->assign('isadmin',isset($in['isadmin'])?$in['isadmin']:1);
+		$this->assign('role_data',D('Role')->find($in['role_id']));
+		$this->assign("category",$category);		
+		$this->display();
+	}
+	
+	/**
+	 * @name 自动注册模块
+	 */
+	public function Autoadd(){
+		$in = &$this->in;
+		if(isset($in['appname'])){
+			if(($re = $this->_auto_add(FANGFACMS_ROOT.$in['appname'].'/lib/Action',$in['appname']))!==true){
+				$this->message ( $re );
+			}
+			$this->message ( '模块更新成功！' ,U("frbac/manage?appname=".$in['appname']));
+		}
+		else{
+			if(($re = $this->_auto_add(FANGFACMS_ROOT.'admin/lib/Action','admin'))!==true){
+				$this->message ( $re );
+			}
+			//跳转执行前台模块的更新
+			echo '<script>self.location.href="'. U('frbac/Autoadd?doupdate=1&appname=front') .'"</script>';
+		}
+	}
+	
+	/**
+	 * @name 自动注册
+	 */
+	private function _auto_add($path,$app){
+		$in = &$this->in;
+		$file_path = realpath($path);//模块路径
+		$path = rtrim($path,'/');
+		if(file_exists($path)){
+			$file_array = array();
+			$file_array = glob($path.'/*.php');//遍历后台文件
+			foreach($file_array as $k){
+				$file[] = substr(basename($k),0,strpos(basename($k),'.'));
+			}
+			$method_name = array();
+			foreach($file as $v){
+				if($v!='EmptyAction' && $v!='FbaseAction'){//过滤掉EmptyAction和基础类
+					if($app=='front'){
+						define ( 'IN', true );//前台模块入口
+						include($path.'/'.$v.'.class.php');//加载前台模块文件
+					}
+					$reflector = new ReflectionClass($v);//反射类
+					foreach($reflector->getMethods() as $method){//遍历方法
+						$reflector_method = new ReflectionMethod($v,$method->getName());//获取该方法的属性
+						if($method->getName()!='_empty'){//过滤掉空方法
+							$Classname = $reflector_method->getDeclaringClass();//得到该方法对应的已定义类名
+							$Class_docname = $reflector->getDocComment();//得到该类的别名
+							if($reflector_method->isPublic() && $Classname->getName()==$v){//判断是否是PUBLIC和本类中的方法，去掉继承
+								$note = $method->getDocComment();//取得该方法的注释
+								$reg  = '/@name[\s]?([\w\x{4e00}-\x{9fa5}]+)/u';
+								preg_match($reg,$note,$mat);//取得该方法名称
+								if(is_array($mat) && !empty($mat)){
+									$notes = $mat[1];
+								}else{
+									$notes = '';
+								}
+								preg_match($reg,$Class_docname,$matc);//取得类名
+								if(is_array($matc) && !empty($matc)){
+									$c_name = $matc[1];
+								}else{
+									$c_name = '';
+								}
+								$method_name[strtolower(substr($v,0,-6))][] = array('name' => $method->getName(),
+																		'note' => $notes, 
+																		'cname' => $c_name,
+																		);
+							}
+						}
+					}
+				}
+			}
+			//写入数据库
+			if($in['doupdate']){
+				$_acts = D ('Acts');
+				foreach($method_name as $k=>$v){
+					if(is_array($v)){
+						foreach($v as $key=>$val){
+							$name = $val['note'];
+							$appname = $app;
+							$controller = $k;
+							$c_name = $val['cname'];
+							$action = $val['name'];
+							$array = array('name'=>$name,
+											'appname' => $appname,
+											'controller' => $controller,
+											'action' => $action,
+											'controllername' => $c_name);
+							if($appname=='admin'){
+								$array['allow'] = 'administrator';
+							}
+							//读数据库
+							$data = $_acts->where("`controller`='{$controller}' AND `action`='{$action}' AND `appname`='{$appname}'")->find();
+							if(is_array($data) && !empty($data)){//有数据
+								$array['aid'] = $data['aid'];
+								$keyid = $_acts->save($array);//更新
+							}else{
+								$keyid = $_acts->add($array);//添加
+							}
+							if(false === $keyid){
+								//$this->message ( $_acts->getError () . ' '.$controller.' 模块中 '.$action.' 方法更新失败！' );
+								$re_string = $appname . '-' . $controller.' 模块中 '.$action.' 方法更新失败！';
+								return $re_string;
+							}
+						}
+					}
+				}
+				//$this->message ( '所有模块更新成功！' );
+				return true;
+			}
+		}
+	}
+	
+	/**
+	 * @name  编辑角色菜单
+	 **/
+	public function menu(){
+		$in = &$this->in;
+		$_role = D("Role");
+		$_menu = D("Menu");
+		$role = $_role->where("role_id=".$in['role_id'])->find();
+		$this->childmenu(1,$data);
+		$role_name = $_role->where("role_id=" . $in['role_id'])->getField("name");
+		$role_menu = array();
+		foreach ($data as $t){
+			if (in_array($role_name,$t['rolenames'])) {
+				$role_menu[] = $t['menuid'];
+			}
+		}
+		$str = "";
+		$top_menu = $_menu -> where("parentid=1")->order("menuid asc")->findAll();
+		$menu_tpl = "<table border='0' cellpadding='0' cellspacing='0' id='menus' ><tr>";
+		
+		foreach ($top_menu as $k =>$v){
+			
+			if($_SESSION['userdata']['roles'][0] != 'developer'){
+				if (!in_array($_SESSION['userdata']['roles'][0],$v['rolenames'])){
+					continue;
+				}
+			}
+			
+			$check = "";
+			if(in_array($v['menuid'], $role_menu)){
+				$check = "checked";
+			}
+			$menu_tpl .= "<td id='top".$k."' valign='top'><ul><li><input type='checkbox' name='menuid[]' value='". $v['menuid'] ."' $check/>".$v['name'];
+			$menu_tpl .= $this -> menulist($v['menuid'], $role_menu);
+			
+			$menu_tpl .= "</li></ul></td>";
+		}
+		$menu_tpl .= "</tr></table>";
+		
+		/*foreach ($menu as $k => $t) {
+			menu_tpl
+		}*/
+		$this->assign("role", $role);
+		$this->assign("menu_tpl", $menu_tpl);
+		$this->display();
+	}
+	
+	/**
+	 * @name       得到所有的子菜单
+	 * $parentid   为父级菜单的编号
+	 * $menuid     为当前菜单的编号
+	 * $role_menu  当前权限拥有的菜单
+	 **/
+	private function menulist( $parentid, $role_menu, $menuid = 0 ){
+		$in = &$this->in;
+		$_menu = D("Menu");
+		$where = "parentid=".$parentid ;
+		if ($menuid != 0) 
+			$where .= " and menuid=".$menuid;
+		$menu = $_menu  -> where($where)->order("menuid asc")->findAll();
+		$str = "";
+		foreach ($menu as $k => $v){
+			if($_SESSION['userdata']['roles'][0] != 'developer'){
+				if (!in_array($_SESSION['userdata']['roles'][0],$v['rolenames'])){
+					continue;
+				}
+			}
+			$check = "";
+			if(in_array($v['menuid'], $role_menu)){
+				$check = "checked";
+			}
+			$str .= "<li><input type='checkbox' name='menuid[]' value='". $v['menuid'] ."' $check/>".$v['name'];
+			
+			$str .= $this-> menulist($v['menuid'], $role_menu);
+			$str .= "</li>";
+		}
+		
+		if ($str != '') {
+			$return = "<ul>". $str ."</ul>";
+		}
+		return $return;
+	}
+	/**
+	 * @name 保存角色用油的菜单权限
+	 * */
+	public function savemenu(){
+		$in = &$this->in;
+		
+		//$data['menu'] = implode(",", $in['menuid']);
+		$_role = D("Role");
+		$_menu = D("Menu");
+		$role_name = $_role->where("role_id=".$in['role_id'])->getField("name");
+		$db = C("DB_PREFIX");
+		$data = array();
+		$this->childmenu(1,$data);
+		foreach ($data as $k => $t) {
+			$rolenames = array();
+			if (!empty($t['rolenames'])) {
+				$rolenames = $t['rolenames'];
+			}
+			if(in_array($t['menuid'],$in['menuid']) && !in_array($role_name,$rolenames)){
+				$rolenames[] = $role_name;
+			}elseif (!in_array($t['menuid'],$in['menuid']) && in_array($role_name,$rolenames)) {
+				$new = array();
+				foreach ($rolenames as $c){
+					if ($c != $role_name) {
+						$new [] = $c;
+					}
+				}
+				unset($rolenames);
+				$rolenames = $new;
+ 			}
+			if (!empty($rolenames)) {
+				$rolenames = var_export ($rolenames, true );
+			}else {
+				$rolenames = "";
+			}
+			$_menu->query('update '.$db.'menu set rolenames="'.$rolenames.'" where menuid='.$t['menuid']);
+		}
+		$_menu->cacheAll();
+		$this->message("操作成功！",__ROOT__."/admin.php?m=frole&a=manage&modelid=6");
+		
+	}
+	/**
+	 *@name 得到子级栏目
+	 * */
+	private function childmenu($parentid, & $data){
+		$_menu =  D("Menu");
+		$menu = $_menu->where("parentid=".$parentid)->findAll();
+		foreach ($menu as $k => $t){
+			$count = $_menu->where("parentid=".$t['menuid'])->count();
+			$data [] = $t;
+			if ($count > 0) {
+				$this->childmenu($t['menuid'], $data);
+			}
+			
+		}
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FroleAction.class.php ---
@@ -0,0 +1,326 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FrbacAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-6-2
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  角色管理
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 角色管理
+ *
+ */
+class FroleAction extends FbaseAction {
+	
+	/**
+	 * @name角色管理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$in ['_tablename'] = 'role';
+		$in['where'] = array("isadmin"=>1);  //"status"=>1
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		$this->assign ( 'modelid', $in['modelid'] );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加角色
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in ['ajax'])
+			$this->_add_ajax ();
+		$in ['_tablename'] = 'role';
+		$this->assign('forward',U("frole/manage?modelid={$in['modelid']}"));
+		
+		if ($this->ispost()) {
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		$this->assign ( 'modelid', $in['modelid'] );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name处理添加时候的ajax请求
+	 */
+	protected function _add_ajax() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'checkname':
+				$_role = D ( 'Role' );
+				if (!empty($in ['info']['name']) && $_role->regex($in ['info']['name'],'english')) {
+					if ($_role->isNameExists($in['info']['name'])) {
+						die('false');
+					}
+					die('true');
+				}
+				die('false');
+				break;			
+			default:				
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name编辑角色
+	 */
+	public function edit() {
+		$in = &$this->in;
+		if ($in ['do'] == 'status') $this->status();
+		$in ['_tablename'] = 'role';
+		$in ['tpl'] = 'edit';
+		
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		$this->assign('forward',U("frole/manage?modelid={$data['modelid']}"));
+		
+		if ($this->ispost()) {
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name删除角色
+	 */
+	public function delete() {
+		$in = &$this->in;		
+		$in ['_tablename'] = 'role';		
+		
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		$data = $_m->find ( $in [$_keyid] );
+		$this->assign('forward', U("frole/manage?modelid={$data['modelid']}"));
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+	
+	/**
+	 * @name启用、禁用角色
+	 */
+	public function status() {
+		$in = &$this->in;
+		if (! $in ['role_id'])
+			$this->error ( '非法参数' );
+		$_role = D ( 'Role' );
+		$data = $_role->find ( intval ( $in ['role_id'] ) );
+		if (! is_array ( $data )) {
+			$this->error ( '角色不存在！' );
+		} else {
+			$in ['status'] = intval ( $in ['status'] ) > 0 ? '1' : '0';
+			$data ['status'] = $in ['status'];
+			if (false !== $_role->save ( $data )) {
+				redirect ( $this->forward );
+			} else {
+				$this->message ( '<font class="red">操作失败！</font>' );
+			}
+		}
+		exit ();
+	}
+	
+	
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FsalenetAction.class.php ---
@@ -0,0 +1,299 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FtagAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 网络营销
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 网络营销
+ *
+ */
+class FsalenetAction extends FbaseAction {
+	/**
+	 * 网络营销分类对象
+	 * 
+	 * @var object
+	 */	
+	protected $_salenet_cat = null;
+	/**
+	 * 栏目表模型对象
+	 * 
+	 * @var object
+	 */
+	protected $_category = null;
+
+	/**
+	 * 所在栏目数据
+	 * 
+	 * @var array
+	 */
+	protected $category_data = array();
+
+
+	/**
+	 * @name网络营销管理初始化，主要用户检查操作权限
+	 * 
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		$this->_salenet_cat = D ('Scategory');
+		$this->assign('cate_data',$this->_salenet_cat->select());
+
+		if (strtolower(MODULE_NAME) == 'fsalenet') {
+			if ($in['catid']) { //检查栏目操作权限
+				$this->_category = D ('Category');
+				$this->category_data = $this->_category->find((int)$in['catid']);
+				$this->assign('cat',$this->category_data);
+				$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+			} else {
+				$this->message('<font class="red">没有选择要操作的栏目~！</font>');
+			}
+		}
+		
+		$_province = D("Province")->findAll();
+		$this->assign("province",$_province);
+	}
+
+	/**
+	 * @name检查权限
+	 * 
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') {
+			return true;
+		}
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+
+	/**
+	 * @name栏目管理
+	 */
+	public function category_manage() {
+
+		
+		$in = &$this->in;
+		$data = array ();
+		$_aslenet = D ('Salenet');
+		$db_pre = c('DB_PREFIX');
+		
+		$where = array ();
+
+		$where["{$db_pre}salenet.catid"] = $in['catid'];
+
+
+	}
+
+	/**
+	 * @name营销内容管理
+	 * 
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_aslenet = D ( 'Salenet' );
+		//表前缀
+		$db_pre = C('DB_PREFIX');
+
+		
+		//查询条件
+		$where = array ();
+		$where["{$db_pre}salenet.catid"] = $in['catid'];		
+		if ($in['q'] && $in['q'] != '请输入关键字') {
+			$in['q'] = urldecode($in['q']);
+			$where["{$db_pre}salenet.{$in['field']}"] = array('like',"%{$in['q']}%");
+		}
+		//排序条件
+		$order = " {$db_pre}salenet.`sort` ASC,{$db_pre}salenet.`sid` DESC ";
+		//联合查询
+		$join_role_cate = "`{$db_pre}scategory`
+					 		  ON ({$db_pre}salenet.scatid={$db_pre}scategory.scategoryid)";
+
+		//统计模型数量
+		$data ['count'] = $_aslenet->join($join_role_cate)->where ( $where )->count();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+		//当前页数据
+		$data ['info'] = $_aslenet->field("{$db_pre}salenet.`sid`,{$db_pre}salenet.`title`,{$db_pre}salenet.`province`,{$db_pre}salenet.`catid`,{$db_pre}salenet.`content`,{$db_pre}salenet.`create_at`,{$db_pre}salenet.`status`,{$db_pre}salenet.`url`,{$db_pre}salenet.`sort`,{$db_pre}salenet.`name`,{$db_pre}scategory.`scategoryid`")->join($join_role_cate)->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select();
+		$_province = D("Province");
+        foreach ($data['info'] as $k => $v){
+			$data['info'][$k]['province'] = $_province->where("id=".$v['province'])->getField("name");
+		}
+		
+        
+		$this->assign ( 'data', $data );
+		$this->assign('in', $in);
+		$this->display();
+	}
+
+	/**
+	 * @name审核内容
+	 * 
+	 */
+	 public function check() {
+		$in = &$this->in;
+		if (!$in['sid']) $this->message('<font class="red">参数不完整！</font>');
+		$data = array(
+			'sid'	=>	$in['sid'],
+			'status'	=>	$in['status']
+		);
+		M('Salenet')->save($data);
+		redirect($this->forward);				
+
+	 }
+
+	/**
+	 * @name录入要显示的内容
+	 * 
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_add();
+		}
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$_salenet = D ('Salenet');
+			//令牌验证			
+
+			if (!$_salenet->autoCheckToken($in)) $this->message('<font class="red">请不要非法提交或者重复刷新页面！</font>');
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			$in['info']['url'] = 'null';
+			$in['info']['catid'] = $in['catid'];
+			$in['info']['create_at'] = time();
+			$in['info']['update_at'] = time();
+			
+			$return = $_salenet->add($in['info']);
+
+			if (false !== $return) {
+
+				$in['info']=null;
+				$in['info']['sid'] = $return;
+				$in['info']['url'] = "{$return}". C ('URL_HTML_SUFFIX');
+				$_salenet->save($in['info']);
+				
+				$this->message('<font class="green">内容保存成功！</font>',U('fsalenet/manage?catid='.$in['catid']),3,false);				
+				exit;
+			} else {
+				$this->message('<font class="red">' . $_salenet->getError() . '内容保存失败！</font>');
+			}
+		}
+		$this->display();
+	}
+
+	
+
+	/**
+	 * @name更新内容
+	 * 
+	 */
+	public function edit() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_ajax_edit();
+		if ($in['do']) $this->_do_edit();
+		if (!$in['sid']) $this->message('<font class="red">参数错误，无法继续该操作！</font>');
+		$_salenet = D ('Salenet');
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			//令牌验证
+//			if (!$_salenet->autoCheckToken($in)) 
+//				$this->message('请不要非法提交或者重复刷新页面！'); //由于tags参数不能传数组，请将数组参数格式化
+
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+			$in['info']['update_at'] = time();
+
+			if(!strstr($in['info']['url'],'.html'))$in['info']['url']=$in['info']['url']. C ('URL_HTML_SUFFIX');
+
+			if (false !== $_salenet->save($in['info'])) {				
+				$this->message('<font class="green">内容更新成功！</font>',U('fsalenet/manage?catid='.$in['catid']));				
+			} else {
+				$this->message('<font class="red">' . $_salenet->getError() . '内容更新失败！</font>');
+			}
+		}
+		$this->assign('data',$_salenet->find($in['sid']));
+		$this->display();
+	}
+
+
+	/**
+	 * @name更新内容的AJAX请求
+	 */
+	private function _ajax_edit() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'sort':  //更新排序
+				$in['sid'] && $in['sid'] = substr($in['sid'],5);
+				$in['sort'] = intval($in['sort']);
+				if ($in['sort'] == '0' || !empty($in['sort'])) {
+					$_salenet = M ('Salenet');
+					$data = $_salenet->find($in['sid']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_salenet->save($data)) {
+							echo $data['sort'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'savetitle':  //更新标题
+				$in['sid'] && $in['sid'] = substr($in['sid'],6);
+				if (!empty($in['title'])) {
+					$_salenet = M ('salenet');
+					$data = $_salenet->find($in['aid']);
+					if (is_array($data)) {
+						$data['title'] = $in['title'];
+						if (false !== $_salenet->save($data)) {
+							echo $data['title'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;					
+			default:
+				break;
+		}
+		exit ();
+	}
+
+
+	/**
+	 * @name删除营销信息
+	 */
+	public function delete() {
+		$in = &$this->in;
+		if (!$in['sid']) $this->message('<font class="red">没有选择操作项！</font>');
+		$_salenet = D('Salenet');
+		if (is_numeric($in['sid'])) {
+			$_salenet->delete($in['sid']);
+			$this->message('<font class="green">删除成功！</font>');
+		}
+	}
+	
+}
\ No newline at end of file

--- admin/Lib/Action/FsetAction.class.php ---
@@ -0,0 +1,646 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FhomeAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-5
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 系统管理
+// +----------------------------------------------------------------------
+
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 系统管理
+ *
+ */
+class FsetAction extends FbaseAction {
+	
+	/**
+	 * @name系统设置
+	 */
+	public function set() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_set_ajax();
+		$key = 'sysset';
+		if ($this->ispost()) {
+			$_setting = D ('Setting');
+			if (is_array($in['info'])) {
+				foreach ($in['info'] as $k=>$v) {
+					$_setting->set($k,$v,$key);
+				}
+				//更新缓存和配置
+				$_setting->cacheAll();
+				R('Fcache','app');
+				$this->message('<font class="green">网站配置保存成功！</font>',U('fset/set'));
+			} else {
+				$this->message('<font class="red">' . "参数错误！</font>");
+			}
+		}
+		$_widget = D ( 'Widget' );
+		$where = array (
+			'appname' => APP_NAME, 
+			'controller' => 'fset', 
+			'action' => 'set', 
+			'status' => '1' 
+		);
+		//启用的widget
+		$widget_data = $_widget->where ( $where )->order("`sort` ASC")->findAll ();
+		$data['widget'] = $widget_data;
+		//widget需要的数据，参数表中
+		$_setting = D('Setting');
+		$value_data = $_setting->where("`key`='{$key}'")->findAll();
+		if (is_array($value_data)) {
+			foreach ($value_data as $k=>$v) {
+				$value_data[$v['var']] = $v['value'];
+				unset($value_data[$k]);	
+			}
+			$data['value'] = $value_data;
+		}
+		//当期选中项
+		$in['selected'] && $data['selected'] = $in['selected'];
+		$this->assign ( 'set_html', W ( 'SysSet', $data, true ) );
+		$this->display ();
+	}
+	
+	/**
+	 * @name处理set时候的ajax请求操作
+	 */
+	protected function _set_ajax() {
+		$in = &$this->in;
+		switch($in['ajax']) {
+			case 'test_mail':	//发送测试邮件
+				import('SendMail',INCLUDE_PATH);
+		        $_sendmail = get_instance_of('SendMail');
+		        $_sendmail->set($in['mail_server'], $in['mail_port'], $in['mail_user'], $in['mail_password'], $in['mail_type']);
+		        echo $_sendmail->send($in['email_to'], "测试邮件 - FangfaCMS {$this->version}", "Fanafa CMS {$this->version} 邮件发送测试！<br />", $in['mail_user']) ? "邮件发送成功！" : $_sendmail->error[0][1];
+				break;
+		}
+		exit ();
+	}
+	
+	
+	
+	/**
+	 * @name菜单管理
+	 */
+	public function menu() {
+		$in = &$this->in;		
+		if ($in ['ajax']) {	//处理ajax请求
+			switch ($in['ajax']) {
+				case 'getchild':  //获取子菜单
+					$_menu = D('Menu');
+					$array[] = array(
+							'title' => $in['parentid'] ? '请选择' : '无',
+							'value' => 0,
+						);
+					$infos = $_menu->where("`parentid`='{$in['parentid']}'")->findAll();
+			        if (is_array($infos)) {
+				        foreach($infos as $k=>$v) {
+							$array[] = array(
+								'title' => $v['name'],
+								'value' => $v['menuid'],
+							);
+					    }
+			        }		        
+					if(!$in['parentid'] || $array) {
+						ksort($array);
+						import('Html',INCLUDE_PATH);
+						echo Html::select('setparentid',$array, $in['parentid'], 'onchange="if(this.value>0){getchild(this.value);$(\'#parentid\').val(this.value);this.disabled=true;}"');
+					}
+					break;
+				case 'sort':  //ajax保存排序
+						$in['menuid'] && $in['menuid'] = intval(substr($in['menuid'],5));
+//						dump($in);
+						$_menu = D ('Menu');
+						if ($in['menuid'] && isset($in['sort'])) {
+							$in['sort'] = intval($in['sort']);
+							$data = array(
+								'menuid' => $in['menuid'],
+								'sort' => $in['sort']
+							);
+							if (false !== $_menu->save($data)) {
+								echo $in['sort'];
+								exit ();
+							}
+						}
+						echo '';
+						break;
+				default:
+					break;
+			}
+			
+		} else {	//处理普通请求
+			$TARGET = array(
+				'_self'=>'当前窗口', 
+				'_blank'=>'新窗口', 
+				'top'=>'上窗口', 
+				'left'=>'左窗口', 
+				'mainFrame'=>'右窗口', 
+			);
+			$this->assign('TARGET',$TARGET);
+			switch ($in['do']) {
+				case 'add':	//添加
+					$in ['tpl'] = 'add_menu';
+					if ($in['parentid']) {
+						$parent_data = D ('Menu')->find(intval($in['parentid']));
+						$this->assign('parent_data',$parent_data);
+					}
+					//所有角色
+					$_role = D ('Role');
+					$this->assign('roles',$_role->where("`status`='1'")->select());
+					if ($in['parentid']) {
+						$this->assign('forward',U('fset/menu?do=manage&parentid='.$in['parentid']));
+					} else {
+						$this->assign('forward',U('fset/menu?do=manage'));
+					}
+					$this->addData();
+					$this->ispost() && D('Menu')->cacheAll();
+					break;
+				case 'edit':		//编辑
+					$in ['tpl'] = 'edit_menu';
+					$in ['_tablename'] = 'menu';
+					//所有角色
+					$_role = D ('Role');
+					$this->assign('roles',$_role->where("`status`='1'")->select());
+					if ($in['parentid']) {
+						$this->assign('forward',U('fset/menu?do=manage&parentid='.$in['parentid']));
+					} else {
+						$this->assign('forward',U('fset/menu?do=manage'));
+					}
+					$this->addData();
+					$this->ispost() && D('Menu')->cacheAll();
+					break;
+				case 'manage':	//管理
+					$in ['tpl'] = 'manage_menu';
+					$in ['_tablename'] = 'menu';
+					$in ['where'] = array(
+						'parentid' => (int)$in ['parentid'],
+					);
+					$in['order'] = '`sort` ASC,`menuid` ASC';
+					$this->assign('parentid',$in['parentid']);
+					$this->assign('menu',F ('menu_'.$in['parentid'],'',ALL_CACHE_PATH .'menu/'));						
+					$this->manageData();
+					break;
+				case 'delete':	//删除	
+					$in ['_tablename'] = 'menu';
+					$this->deleteData();
+					break;
+				default:
+					break;
+			}			
+		}		
+	}
+	
+	/**
+	 * @name系统参数设置
+	 */
+	public function arg() {
+		$in = &$this->in;
+		if ($in ['ajax']) {	//处理ajax请求
+			switch ($in['ajax']) {
+				case 'check_var':
+					
+					break;
+				case 'savevalue':
+					$in['var'] && $in['var'] = substr($in['var'],6);
+					$_setting = D ('Setting');
+					if ($in['var'] && !empty($in['var'])) {
+						$data = array(
+							'var' => $in['var'],
+							'value' => $in['value']
+						);							
+						if (false !== $_setting->save($data)) {
+							//更新配置文件
+							$_setting->cacheAll();
+							die($data['value']);
+						}
+						
+					}
+					echo '';
+					break;
+				default:
+					break;
+			}
+			
+		} else {	//处理普通请求			
+			!$in['setting'] && $in ['_tablename'] = 'setting';
+			switch ($in['do']) {
+				case 'add':	//添加
+					$in ['tpl'] = 'add_arg';
+					$this->assign('forward',U('fset/arg?do=manage'));									
+					if ($this->ispost()) {
+						$_setting = D ('Setting');	
+						if (false !== $_setting->add($in['info'])) {
+							//同时更新配置文件
+							if(!$_setting->cacheAll()){
+								$this->message('<font class="red">配置文件更新失败！</font>',U('fset/arg?do=manage'));
+							}
+							$this->message('<font class="green">保存成功！</font>',U('fset/arg?do=manage'));							
+						} else {
+							$this->message('<font class="red">保存失败！</font>');
+						}
+					}
+					$this->display('add_arg');
+					break;
+				case 'edit':		//编辑
+					$in ['tpl'] = 'edit_arg';
+					$this->assign('forward',U('fset/arg?do=manage'));
+					$this->addData();
+					//同时更新配置文件
+					$_setting = D ('Setting');
+					if(!$_setting->cacheAll()){
+						$this->message('<font class="red">配置文件更新失败！</font>',U('fset/arg?do=manage'));
+					}
+					break;
+				case 'manage':	//管理
+					$in ['tpl'] = 'manage_arg';	
+					if ($in['q']) {	//关键字查询筛选
+						$search = array();
+						$search['q'] = $in['q'];
+						if ($in['field']) {
+							$in ['where'] = " `{$in['field']}` LIKE '%{$in['q']}%'";
+							$search['field'] = $in['field'];
+						}
+						$this->assign('search',$search);
+					}
+					//获取参数标识
+					$_setting = D ('Setting');
+					$grouparray = $_setting->field("`key`")->group("`key`")->findAll();
+					$group = array();
+					if(is_array($grouparray)){
+						foreach($grouparray as $k=>$v){
+							$group[]=$v["key"];
+						}
+						$this->assign('group',$group);
+					}
+					if($in['orderkey']){
+						$in['where'] = "`key` = '".$in['orderkey']."'";
+						$this->assign('orderkey',$in['orderkey']);
+					}
+					$this->manageData();
+					break;
+				case 'delete':	//删除
+					$this->deleteData();
+					break;
+				default:
+					break;
+			}			
+		}
+	}
+
+
+ 	/**
+	 * @name关键词链接
+	 */
+	public function keylink() {
+		$in = &$this->in;
+		if ($in ['ajax']) {	//处理ajax请求
+			switch ($in['ajax']) {				
+				case 'saveword':
+					$in['id'] && $in['id'] = substr($in['id'],5);
+//					dump($in);exit;					
+					$_kl = D ('Keylink');
+					if ($in['id']) {
+						$data = array(
+							'word' => $in['word']							
+						);
+						$where['id'] = $in['id'];
+						if (false !== $_kl->where($where)->save($data)) {
+							$_kl->cache();
+							die($data['word']);
+						}
+					}
+					echo '';
+					break;
+				case 'saveurl':
+					$in['id'] && $in['id'] = substr($in['id'],4);
+//					dump($in);exit;
+					$_kl = D ('Keylink');
+					if ($in['id']) {
+						$data = array(
+							'url' => $in['url']							
+						);
+						$where['id'] = $in['id'];
+						if (false !== $_kl->where($where)->save($data)) {
+							$_kl->cache();
+							die($data['url']);
+						}
+					}
+					echo '';
+					break;
+				case 'savesort':
+					$in['id'] && $in['id'] = substr($in['id'],5);
+//					dump($in);exit;
+					$_kl = D ('Keylink');
+					if ($in['id']) {
+						$data = array(
+							'sort' => $in['sort']							
+						);
+						$where['id'] = $in['id'];
+						if (false !== $_kl->where($where)->save($data)) {
+							$_kl->cache();
+							die($data['sort']);
+						}
+					}
+					echo '';
+					break;
+				default:
+					break;
+			}
+
+		} else {	//处理普通请求
+			$in ['_tablename'] = 'keylink';
+			switch ($in['do']) {
+				case 'add':	//添加
+					$in ['tpl'] = 'add_keylink';
+					$this->assign('forward',U('fset/keylink?do=manage'));
+					if ($this->ispost()) {
+						$_kl = D ('Keylink');
+						if (false !== $_kl->add($in['info'])) {
+							$_kl->cache();
+							$this->message('<font class="green">保存成功！</font>',U('fset/keylink?do=manage'));
+						} else {
+							$this->message('<font class="red">保存失败！</font>');
+						}
+					}
+					$this->display('add_keylink');
+					break;
+				case 'edit':		//编辑
+					$in ['tpl'] = 'edit_keylink';
+					//如果是全局参数，则同时更新config.inc.php文件
+					$this->assign('forward',U('fset/keylink?do=manage'));
+					$this->addData();
+					break;
+				case 'manage':	//管理
+					$in ['tpl'] = 'manage_keylink';
+					if ($in['q'] && $in['q'] != '请输入关键字') {	//关键字查询筛选
+						$search = array();
+						$search['q'] = $in['q'];
+						if ($in['field']) {
+							$in ['where'] = " `{$in['field']}` LIKE '%{$in['q']}%'";
+							$search['field'] = $in['field'];
+						}
+						$this->assign('search',$search);
+					}
+					$in['order'] = '`sort` ASC';
+					$this->manageData();
+					break;
+				case 'delete':	//删除
+					$this->deleteData();
+					break;
+				case 'cache':  //更新缓存
+					$_kl = D ('Keylink');
+					$_kl->cache();
+					$this->message('<font class="green">缓存更新完毕！</font>',U('fset/keylink?do=manage'));
+					break;
+				default:
+					break;
+			}
+		}
+	}
+	
+	/**
+	*@name TODO更新参数缓存
+	*/
+	public function cacheset(){
+		$in = &$this->in;
+		$_setting = D ('Setting');
+		$_setting->cacheAll();
+	}
+	
+	/**
+	 * @name常规的添加、更新操作
+	 *
+	 */
+	public function addData() {
+		$in = &$this->in;
+		if ($this->ispost()) {
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+
+
+	/**
+	 * @name常规的删除操作、如果此方法不适用，则可以在对应的action中override
+	 */
+	public function deleteData() {
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+		//		die($this->getInTableName($name));
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		$_model = D ( $name );
+		//安全起见，必须包含删除的记录的主键，或者删除条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		}
+		if ($in [$_keyid] ) { //主键筛选
+			if (is_array($in[$_keyid])) {
+				if (!empty($in [$_keyid])) {
+					$option ['where'] = " `{$_keyid}` IN (".implode(',', $in[$_keyid]) .")";
+				}
+			} else {
+				$option ['where'] = array ($_keyid => $in [$_keyid] );
+			}
+		}
+		if ($in ['where']) {
+			if (!empty($option ['where'])) {
+				@$option['where'] = array_merge($in['where'],$option ['where']);
+			} else {
+				$option['where'] = &$in['where'];
+			}
+		}
+		if (! empty ( $option )) {
+			if (false !== $_m->delete($option)) {
+				if (method_exists ( $_m, 'cache' )) { //删除缓存
+					if (is_array($in[$_keyid])) {
+						if (!empty($in [$_keyid])) {
+							foreach ($_keyid as $k) {
+								$_m->cache ( $k , null );
+							}
+						}
+					} else if (is_numeric($in [$_keyid])) {
+						$_m->cache ( $_keyid , null );
+					}
+				}
+				$this->message('删除成功！');
+			} else {
+				$this->message($_m->getError() . '删除失败！');
+			}
+		} else {
+			$this->message ( '参数错误，没有指定删除条件！' );
+		}
+	}
+
+	/**
+	 * @name数据列表
+	 */
+	public function manageData() {
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	public function space(){
+		$in = &$this->in;
+		$space_size = (int)C("SPACE_SIZE");//初始设置空间大小
+		$space_use  = $this->getDirSize(dirname($_SERVER['SCRIPT_FILENAME']).'/');//已使用空间
+
+		$surplus = $space_size- $space_use;//剩余空间大小
+		if($surplus < 0){$surplus = 0;}
+		$surplus_float = number_format(( $surplus / $space_size ) * 100,2,".","");
+		
+		$data['space_size'] = $this->getRealSize($space_size);
+		$data['space_use'] = $this->getRealSize($space_use);
+		$data['surplus'] = $this->getRealSize($surplus);
+		$data['surplus_float'] = $surplus_float . "%";
+		
+		$this->assign("data",$data);
+		$this->display();
+	}
+
+	public function getDirSize($dir)
+    {
+        $handle = opendir($dir);
+        while (false!==($FolderOrFile = readdir($handle))){
+            if($FolderOrFile != "." && $FolderOrFile != ".."){
+                if(is_dir("$dir/$FolderOrFile")){
+                    $sizeResult += $this->getDirSize("$dir/$FolderOrFile");
+                }
+                else{
+                    $sizeResult += filesize("$dir/$FolderOrFile");
+                }
+            }
+        }
+        closedir($handle);
+        return $sizeResult;
+    }
+    // 单位自动转换函数
+    public function getRealSize($size)
+    {
+        $kb = 1024;         // Kilobyte
+        $mb = 1024 * $kb;   // Megabyte
+        $gb = 1024 * $mb;   // Gigabyte
+        $tb = 1024 * $gb;   // Terabyte
+        if($size < $kb){
+            return $size." B";
+        }
+        else if($size < $mb){
+            return round($size/$kb,2)." KB";
+        }
+        else if($size < $gb){
+            return round($size/$mb,2)." MB";
+        }
+        else if($size < $tb){
+            return round($size/$gb,2)." GB";
+        }
+        else{
+            return round($size/$tb,2)." TB";
+        }
+    }
+    
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FsidetableAction.class.php ---
@@ -0,0 +1,384 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: sidetableAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2012-12-20
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 副表管理模块，静态模块
+// +----------------------------------------------------------------------
+
+//文档状态： 0=待审,9=终审,-1=回收站
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name 内容管理模块
+ *
+ */
+class FsidetableAction extends FbaseAction {
+
+	/**
+	 * 栏目表模型对象
+	 * @var object
+	 */
+	protected $_category = '';
+
+	/**
+	 * 栏目数据
+	 * @var array
+	 */
+	protected $category_data = '';
+    
+    
+    /**
+     * 
+     * 栏目副表表名及副表后缀
+     * @var string
+     * 
+     */
+    protected $table_db_name = 'sidetable_'; 
+    
+    protected $table_db_name_suffix = '';
+
+
+	/**
+	 * @name内容管理初始化，主要用户检查操作权限
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		if (strtolower(MODULE_NAME) == 'fsidetable') {
+			if ($in['catid']) { //检查栏目操作权限
+				$this->_category = D ('Category');
+				$this->category_data = $this->_category->find((int)$in['catid']);
+				$this->assign('cat',$this->category_data);
+				$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+                $this->table_db_name .= $this->category_data['model']['exttable'];
+                $this->table_db_name_suffix = $this->category_data['model']['exttable'];
+			} else {
+				$this->message('<font class="red">没有选择要操作的栏目~！</font>');
+			}
+		}
+	}
+
+	/**
+	 * 检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') {
+			return true;
+		}
+//		dump($userData);dump($permissions);
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+
+	/**
+	 * @name内容管理、列表
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$data = array ();
+		$_sidetable = M ( $this->table_db_name );		
+		//表前缀
+		$db_pre = C('DB_PREFIX');
+		//查询条件
+		$where = array ();
+		$where["{$db_pre}{$this->table_db_name}.catid"] = $in['catid'];
+		//统计模型数量
+		$data ['count'] = $_sidetable->where ( $where )->count ();
+		//初始化分页类
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+		//分页代码
+		$data ['pages'] = $Page->show ();
+        
+        //fangfa 2012-12-29 副表列表页字段自定义显示
+        $_field = M('ModelField');        
+		//当前页数据
+		$data ['info'] = $_sidetable->where ( $where )->order ("sort asc,id asc")->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();  
+        //查询字段自定义
+		$this->assign('category_data',$this->category_data);
+		$this->assign('tablename',$this->category_data['model']['tablename']);
+        $this->assign ('data', $data );
+		$this->display();
+	}
+
+	/**
+	 * @name录入要显示的内容
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) {
+			$this->_ajax_add();
+		}
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$_sidetable = M ($this->table_db_name);
+			//令牌验证
+			if (!$_sidetable->autoCheckToken($in)) $this->message('<font class="red">请不要非法提交或者重复刷新页面！</font>');
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+            //过滤时间参数
+            foreach($in['info'] as $k=>$v){
+                if(strpos($k,'_time')){
+                    $in['info'][$k] = strtotime($v);
+                }
+            } 
+			$return = $_sidetable->add($in['info']);
+			if (false !== $return) {				  
+				$this->message('<font class="green">内容保存成功！</font>',$in['forward']);
+				//应用扩展，实现ping(ping服务),clear_html(更新静态页面),由于tags参数不能传数组，请将数组参数格式化
+				//tag('after_content_add', serialize($_content->get($return,'all')));
+				exit;
+			} else {
+				$this->message('<font class="red">' . $_content->getError() . '内容保存失败！</font>');
+			}
+		}
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,array("catid"=>$in['catid'],"classify_select"=>$in['catid']));
+		$this->assign('form_data',$form);
+		$this->assign('catid',$in['catid']);
+		$this->display();
+	}
+
+	/**
+	 * @name添加内容时候的ajax请求
+	 */
+	protected function _ajax_add() {
+		$in = &$this->in;
+		$cat_data = $this->category_data;
+		switch ($in['ajax']) {
+			case 'check_title':
+				$_content = D ('Content');
+				if ($_content->titleExist($in['c_title'])) {
+					die('此标题已经被使用过！');
+				} else {
+					die('此标题还没有被使用过！');
+				}
+				break;
+			default:
+				break;
+		}
+	}
+
+	/**
+	 * @name更新内容
+	 */
+	public function edit() {
+		$in = &$this->in;		
+		if ($in['ajax']) $this->_ajax_edit();
+		if ($in['do']) $this->_do_edit();
+		$_sidetable = M ($this->table_db_name);
+		$cat_data = $this->category_data;
+		if ($this->ispost()) {  //录入内容
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['user_id'] = $_SESSION['userdata']['user_id'];
+            //过滤时间参数
+            foreach($in['info'] as $k=>$v){
+                if(strpos($k,'_time')){
+                    $in['info'][$k] = strtotime($v);
+                }
+            } 
+			if (false !== $_sidetable->data($in['info'])->where('id'.' = '.$in['info']['id'])->save()) {		
+            	$this->message('<font class="green">内容更新成功！</font>',$in['forward']);
+			} else {
+			echo $_sidetable->getLastSql();
+			exit;
+				$this->message('<font class="red">内容更新失败！</font>',$in['forward']);
+			}
+		}
+		//获取信息详细内容
+		$data = $_sidetable->where('id = '.$in[$this->table_db_name_suffix.'_id'])->find();
+		$_mField = D('ModelField');
+		$field_data = $_mField->where("`modelid`='{$cat_data['modelid']}'  AND `systype`<>'2'  AND `status`='1' ")->order(' `sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,$data,array('url'=>'readonly="readonly"'));
+		$this->assign('form_data',$form);
+		$this->assign('data',$data);
+        $this->assign('name_field',$this->category_data['model']['exttable'].'_name');
+		$this->display();
+	}
+
+	/**
+	 * @name 处理编辑的AJAX请求
+	 */
+	private function _ajax_edit() {
+		$in = &$this->in;		
+		switch ($in['ajax']) {
+			case 'sort':  //更新排序
+				$in['cid'] && $in['cid'] = substr($in['cid'],5);
+				$in['sort'] = intval($in['sort']);
+				if ($in['sort'] == '0' || !empty($in['sort'])) {					
+					$table = trim($in['sitetable']);
+					$_content = M ($table);
+					$data = $_content->find($in['id']);
+					if (is_array($data)) {
+						$data['sort'] = $in['sort'];
+						if (false !== $_content->save($data)) {
+							echo $data['sort'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			case 'savetitle':  //更新标题	
+				$in['cid'] && $in['cid'] = substr($in['cid'],6);
+				if (!empty($in['title'])) {
+					$table = trim($in['sitetable']);
+					$_content = M ($table);
+					$data = $_content->find($in['id']);
+					if (is_array($data)) {
+						$data['name'] = $in['title'];
+						if (false !== $_content->save($data)) {
+							echo $data['name'];
+							exit ();
+						}
+					}
+				}
+				echo '';
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name获取分类信息
+	 */
+	public function getclassify(){
+		$in = &$this->in;
+		if($in['dosubmit']){
+			if($in['topcatid'] && $in['catid']){
+				if(false !== D('Category')->settopcatid($in['catid'],$in['topcatid'])){
+						echo '<script>alert("提交成功!")</script>';
+						//$this->message('提交成功！');
+					}else{
+						echo '<script>alert("提交失败!")</script>';
+						//$this->message('提交失败！');
+					}
+			}
+			return false;
+		}
+		if($in['catid']){
+			$category = D('Category')->field("`modelid`")->where("`catid`=".$in['catid'])->find();
+			if(!empty($category)){
+				$classify = D('Category')->field("`catid` as 'id', `parentid`, `name`, `topcatid`")->where("`cattype`='cla' AND `modelid`=".$category['modelid'])->findAll();
+				if(empty($classify)) die('没有查到分类数据');
+				foreach($classify as $k=>$v){
+					if(!empty($classify[$k]['topcatid'])){
+						$tid_array = split(',',$classify[$k]['topcatid']);
+						if(in_array($in['catid'],$tid_array)){
+							$classify[$k]['checked'] = 'checked';
+						}
+					}
+				}
+				$this->assign('catid',$in['catid']);
+		 		$this->assign ( 'data', $classify );
+				$this->display('select_classify');
+			}
+			return false;
+		}
+		return false;
+	}
+
+	/**
+	 * @name操作
+	 */
+	protected function _do_edit() {
+		$in = &$this->in;
+		$_c = D ('Content');
+		if (!$in['cid'] && empty($in['info'])) $this->message('<font class="red">未选择操作项！</font>');
+		switch ($in['do']) {
+			case 'recycle':  //移动到回收站、即 status => '-1'
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,'-1')) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'restore': //从回收站还原，还原后为待审状态,sort为1
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,'0')) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'status': //标记为已审，待审
+				if (!in_array($in['dostatus'],array('0','9'))) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->status($idArr,$in['dostatus'])) {
+					$this->message('<font class="green">操作成功！</font>',U('fcontent/manage?catid='.$in['catid']),1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			case 'moveto': //移动到其它栏目
+				if (!$in['moveto']) $this->message('<font class="red">未选择操作项！</font>');
+				if ($in['cid']) {
+					$idArr = array($in['cid']);
+				} elseif ($in['info'] && !empty($in['info'])) {
+					$idArr = &$in['info']['cid'];
+				}
+				if ($_c->moveto($idArr,$in['moveto'])) {
+					$this->message('<font class="green">操作成功！</font>','',1);
+				} else {
+					$this->message('<font class="red">操作失败！</font>');
+				}
+				break;
+			default:
+				break;
+		}
+		exit ();
+	}
+
+	/**
+	 * @name彻底删除信息
+	 */
+	public function delete() {
+		$in = &$this->in;
+		if (!$in[$this->category_data['model']['exttable'].'_id']) $this->message('<font class="red">没有选择操作项！</font>');
+		$_sidetable = M($this->table_db_name);
+		if (is_numeric($in[$this->category_data['model']['exttable'].'_id'])) {
+			$mess = ($_sidetable->where( 'id' . ' = ' . $in[$this->category_data['model']['exttable'].'_id'])->delete()) ? "删除成功" : "删除失败";
+			$this->message('<font class="green">'.$mess.'！</font>');
+		} elseif ($in['all'] == '1') { //批量删除 
+            $array_id = implode(',',$in[$this->category_data['model']['exttable'].'_id']);
+			$mess = ($_sidetable->where( 'id' . ' in ( ' . $array_id . ' )')->delete()) ? "删除成功" : "删除失败";
+			$this->message('<font class="green">'.$mess.'！</font>');
+		}
+		//删除内容后的操作：包括更新相关列表页实体文件，删除详细页实体文件，更新首页实体文件
+		tag('after_content_delete');
+	}
+
+
+}
\ No newline at end of file

--- admin/Lib/Action/FsurveyAction.class.php ---
@@ -0,0 +1,368 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Fsurvey.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-07-26
+// +----------------------------------------------------------------------
+// | Author: fangfa <eddy0909@126.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 模块 问卷调查
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 问卷调查模块
+ *
+ */
+class FsurveyAction extends FbaseAction
+{
+
+	/**
+	 * 栏目表模型对象
+	 * @var unknown_type
+	 */
+	protected $_category = '';
+
+ 	/**
+	 * 栏目数据
+	 * @var unknown_type
+	 */
+	protected $category_data = '';
+
+	/**
+	 * @name 问卷调查
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'survey';
+
+		if ($in['catid']) {
+			$this->_category = D ('Category');
+			$this->category_data = $this->_category->find((int)$in['catid']);
+			$this->assign('cat',$this->category_data);
+			$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+		} else $this->message('<font class="red">没有选择要操作的栏目</font>');
+	}
+
+	/**
+	 * @name检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') return true;
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+	/**
+	 * @name问卷列表
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		parent::manage();	
+	}
+
+	/**
+	 * @name添加问卷
+	 *
+	 */
+	public function add()
+	{
+		$in =&$this->in;
+
+		if ($this->ispost()) {
+			$_model = M('Survey');
+			$in['_tablename'] = 'survey';
+			$in['info']['create_time'] = $in['info']['update_time'] = time();
+			$in['info']['userid'] = $_SESSION['userdata']['user_id'];
+			$in['info']['username'] = $_SESSION['userdata']['username'];
+			$in['info']['catid'] = $in['catid'];
+
+			$in['info']['allowedgroup'] = serialize($in['info']['groupidsvote']);
+			$in['info']['showgroup'] = serialize($in['info']['groupidsview']);
+			
+
+			$surid = $_model->add($in['info']);
+			if(is_numeric($surid))
+			{
+				$this->message('<font class="green">添加成功！</font>');
+			} else
+			{
+				$this->message('<font class="red">添加失败！</font>');
+			}
+
+		} else {
+			$this->assign('editer_html', Html::editor('info[description]', '', C('EDITOR_TYPE'), array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+			//获取用户组
+			$_role = D ( 'Role' );
+			$role_data = $_role->where ( "`status`='1' " )->getField('name,nickname');
+			$this->assign('role_data', $role_data);
+		}
+		$this->display();
+	}
+
+	/**
+	 * @name编辑问卷
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+
+		if ($in['ajax']) {
+			$this->_ajax_edit();
+			exit;
+		}
+		$_model = M('Survey');
+
+		if ($this->ispost() && $in['surid']) {
+			$in['info']['allowedgroup'] = serialize($in['info']['allowedgroup']);
+			$in['info']['showgroup'] = serialize($in['info']['showgroup']);
+			$in['info']['surid'] = $in['surid'];
+			$in['info']['update_time'] = time();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+
+			print_r($in['info']);
+
+			if ( $_model->where('surid=' . $in['surid'])->save ($in['info']) ) {
+
+				$this->message('<font class="green">编辑成功！</font>');
+
+			} else
+			{
+				$this->message('<font class="red">编辑失败！</font>', '', 3000);
+			}
+			
+		}
+		$data = $_model->find($in['surid']);
+		$data['allowedgroup'] = unserialize($data['allowedgroup']);
+		$data['showgroup'] = unserialize($data['showgroup']);
+
+		$this->assign('editer_html', Html::editor('info[description]', $data['description'], C('EDITOR_TYPE') , array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+		//获取用户组
+		$_role = D ( 'Role' );
+		$role_data = $_role->where ( "`status`='1' " )->getField('name,nickname');
+		$this->assign('role_data', $role_data);
+		$this->assign('data', $data);
+		$this->display();
+	}
+
+	/**
+	 * @name问卷主题列表
+	 */
+	public function survey_manage_subject()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+		$subject = $_model->find($in['subjectid']);
+
+		if ($in['ajax']) {
+			$data['subjectid'] = $in['subjectid'];
+			switch ($in['ajax']) {
+				case 'status':
+					$data['status'] = $in['status'];
+					$_model->save($data);
+					break;
+			}
+
+			redirect($this->forward);
+			exit;
+		}
+		//获取问卷主题列表
+		$subject['data'] = $_model->where('parentid='.$subject['subjectid'])->order('`sort` ASC')->findAll();
+
+		$this->assign('subject', $subject);
+		$this->display();
+	}
+
+	/**
+	 * @name管理问题
+	 */
+	public function manage_question()
+	{
+		$in = &$this->in;
+		$in['tpl'] = 'manage_question.html';
+		$in['_tablename'] = 'survey_option';
+		$this->assign("surid",$in['surid']);
+		parent::manage();		
+	}
+
+	/**
+	 * @name编辑问题
+	 */
+	public function edit_question()
+	{
+		$in = &$this->in;
+	}
+
+	/**
+	 * @name添加问题
+	 */
+	public function add_question()
+	{
+		$in = &$this->in;
+		$this->assign("surid",$in['surid']);
+		$in['tpl'] = 'add_question.html';
+		$in['_tablename'] = 'survey_option';
+		$_option = D ('survey_option');
+		$_keyid = $_option->getPk ();
+		$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+		$in['info']['create_time'] = $in['info']['update_time'] = time();
+
+		switch($in['info']['type'])
+		{
+			case '0':
+				foreach($in['info']['option'] as $k=>$v)
+				{
+					$arr[]=array('text'=>$v,'img'=>$in['info']['option'][$k]);
+				}
+				$in['info']['options'] = serialize($arr);
+				$in['info']['option_one'] = $in['option']['minval'];
+				$in['info']['option_two'] = $in['option']['maxval'];
+				$in['info']['option_three'] = $in['option']['fujia'];
+				break;
+			case '1':
+				$in['info']['options'] = serialize($arr);
+				$in['info']['option_one'] = $in['option']['minval'];
+				$in['info']['option_two'] = $in['option']['maxval'];
+				$in['info']['option_three'] = $in['option']['fujia'];		
+				break;
+			case '2':
+				$in['info']['options'] = serialize($array());
+				$in['info']['option_one'] = $in['option']['rows'];
+				$in['info']['option_two'] = $in['option']['cols'];
+				$in['info']['option_three'] = $in['option']['fujia'];		
+				break;
+		}
+		if ( $_option->create ( $in ['info'] ) ) 
+		{
+			if ($_option->add ()) 
+			{  
+				$this->message('<font class="green">添加成功！</font>');
+			} else
+			{
+				$this->message('<font class="red">添加失败！</font>');
+			}
+		} else $this->message('<font class="red">请不要重复提交！</font>');
+	}
+
+	/**
+	 * @name删除问题
+	 */
+	public function delete_question()
+	{
+		$in = $this->in;
+	}
+	
+	/**
+	 * @name问卷主题编辑
+	 */
+	public function survey_edit_subject()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+		$subject = $_model->find($in['subjectid']);
+
+		$option_model = M('vote_option');
+		$subject['option'] = $option_model->where('subjectid='.$in['subjectid'])->findAll();
+
+		if ($this->ispost()) {
+			$in['info']['subjectid'] = $in['subjectid'];
+			$in['info']['update_time'] = time();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_model->create ( $in ['info'] ) ) {
+				if ($_model->save ()) {  //更新选项值
+					//旧选项值
+					$old_option = $option_model->where('subjectid='.$in['subjectid'])->getField('optionid,`option`');
+					foreach ($in['info']['option'] AS $key=>$value) {
+						$option_model->subjectid = $in['subjectid'];
+						$option_model->option = $value;
+						$option_model->image = $in['info']['image'][$key];
+						if (!empty($in['info']['option_ids'][$key])) {
+							$option_model->optionid = $in['info']['option_ids'][$key];
+							$option_model->save();
+							unset($old_option[$in['info']['option_ids'][$key]]);
+						} else {
+							$option_model->optionid = '';
+							$option_model->add();
+						}
+					}
+					if (!empty($old_option)) $option_model->delete(implode(',', array_keys($old_option)));
+
+					$this->message('<font class="green">编辑成功！</font>');
+				} else $this->message('<font class="red">编辑失败！</font>', '', 3000);
+			} else $this->message('<font class="red">请不要重复提交！</font>');
+		}
+
+		$this->assign('subject', $subject);
+		$this->display();
+	}
+	/**
+	 * @name删除问卷
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+
+		$_model = D('Survey');
+
+		if (is_array($in['surid'])) {
+			$ids = implode(',', $in['surid']);
+		} elseif (is_numeric($in['surid'])) {
+			$ids = $in['surid'];
+		}
+		$_model->delete($ids);
+
+		//删除选项
+		//$option_model = M('vote_option');
+		//$option_model->where('subjectid IN('.$ids.')')->delete();
+
+		redirect($this->forward);
+	}
+
+	/**
+	 * @name AJAX请求
+	 */
+	protected function _ajax_edit()
+	{
+		$in = &$this->in;
+
+		$_model = M ('Survey');
+		$data = array();
+
+		switch ($in['ajax']) {
+			case 'status':
+				$data['status'] = $in['status'];
+				$_model->where('surid=' . $in['surid'])->save($data);
+				break;
+		}
+
+		redirect($this->forward);
+	}
+
+	/**
+	 * @name重置数据
+	 */
+	public function reset()
+	{
+		$in = &$this->in;
+
+		$vote_date_model = M('Survey');
+		$vote_date_model->where('surid='.$in['surid'])->delete();
+		$this->message('<font class="green">重置成功！</font>');
+	}
+}
\ No newline at end of file

--- admin/Lib/Action/FtagAction.class.php ---
@@ -0,0 +1,190 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FtagAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: tag维护
+// +----------------------------------------------------------------------
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+/**
+ * @name tag维护
+ *
+ */
+class FtagAction extends FbaseAction {
+	
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'tag';
+		if ($in['ajax']) {
+			$this->_ajax();
+		}
+	}
+	
+	/**
+	 * @name tag管理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name添加TAG
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($this->ispost()) {
+			if (! $in ['_tablename'])
+				$this->message ( '没有指定操作表！' );
+			$name = $in ['_tablename']; //数据表名
+			//		die($this->getInTableName($name));
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			//用create()创建数据对象，以可以使用系统内置的数据自动验证功能以及令牌验证功能
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if (! empty ( $in ['info'] [$_keyid] )) { //更新
+					$keyid = $_m->save ();
+				} else { //添加
+					$keyid = $_m->add ();
+					if ($keyid) $in['info'][$_keyid] = $keyid;
+				}
+				if (false !== $keyid) { //添加数据
+					if (method_exists ( $_m, 'cache' )) { //调用缓存处理;
+						$_m->cache ( ($in['info'][$_keyid] ? $in['info'][$_keyid] : $keyid), $in ['info'] );
+					}
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( $in ['info'], '记录保存成功！', 1, 'json' );
+					else if($in ['_tablename'] == 'menu')
+						$this->message ( '记录保存成功！', '', 0, false);
+					else
+						$this->message ( '记录保存成功！' );
+				} else {
+					//返回处理信息
+					if ($in ['ajax'])
+						$this->ajaxReturn ( '', $_m->getError () . '<br />数据保存失败！', 1, 'json' );
+					else
+						$this->message ( $_m->getError () . '<br />数据保存失败！' );
+				}
+			} else {
+				if ($in ['ajax'])
+					$this->ajaxReturn ( '', $_m->getError (), 1, 'json' );
+				else
+					$this->message ( $_m->getError ().'记录保存失败！' );
+			}
+		}
+		//获取数据
+		if (!empty($in['_tablename'])) {
+			$name = $in ['_tablename']; //数据表名
+			$_m = D ( parse_name($name,1) ); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			if ( $in [$_keyid] ) { //编辑
+				$keyid = $in [$_keyid] ;
+				$data = $_m->find ( $keyid );
+				if (isset($data['parentid']) && $data['parentid']>0) {
+					$this->assign('parent_data',$_m->find($data['parentid']));
+				}
+				$this->assign ( 'data', $data );
+			}
+		}
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+	
+	/**
+	 * @name编辑TAG
+	 */
+	public function edit() {
+		$this->add();
+	}
+	
+	/**
+	 * @name处理tag方面的ajax请求
+	 */
+	protected function _ajax() {		
+		$in = &$this->in;
+		switch($in['ajax']) {
+			case 'autocomplete':
+				$q = &$in['q'];  //查询的关键字
+				$q = urldecode($q);
+				//每次查询关联量最多前10条tag
+				$_tag = D ('Tag');
+				$data = $_tag->field("`name`")->where("`name` like '%{$q}%'")->limit(0,10)->findAll();
+				foreach ($data as $v) {
+					echo $v['name']."\n";
+				}
+				break;
+			case 'savename':
+				$in['tagid'] && $in['tagid'] = (int)substr($in['tagid'],4);
+				$_tag = D ('Tag');
+				if ($in['tagid'] && !empty($in['name'])) {
+					$data = array(
+						'tagid' => $in['tagid'],
+						'name' => $in['name']
+					);							
+					if (false !== $_tag->save($data)) {
+						die($data['name']);
+					}
+				}
+				echo '';
+				break;
+		}
+		exit ();
+	}
+
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FtplAction.class.php ---
@@ -0,0 +1,194 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FtagAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 网站模板维护
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 网站模板维护
+ *
+ */
+class FtplAction extends FbaseAction {
+	
+	protected $_theme = 'default';
+	
+	/**
+	 * 文件操作类实例对象
+	 * @var object
+	 */
+	protected $_dir = '';
+	
+	/**
+	 * 主题目录
+	 * @var unknown_type
+	 */
+	protected $_themePath = '';
+	
+	/**
+	 * @name网站模板初始化数据
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		$in = &$this->in;
+		if ($in['theme']) {
+			$this->_theme = $in['theme'];
+		}
+		$this->_themePath = FANGFACMS_ROOT . 'public/theme/' . $this->_theme . '/';
+		
+		$in['folder'] = urldecode($in['folder']);
+		if ($in['folder']) {
+			$this->assign('folder',$in['folder']);
+			$this->assign('theme',$this->_theme);
+			import('ORG.Io.Dir');
+			$this->_dir = new Dir($this->_themePath . $in['folder']);
+			//上一级
+			if (false !== strpos($in['folder'],'/')) {
+				$folders = explode('/',$in['folder']);
+				array_pop($folders);
+				$this->assign('pfolder',implode('/',$folders));
+			}
+		} else {
+			$this->assign('theme',$this->_theme);
+			import('ORG.Io.Dir');
+			$this->_dir = new Dir($this->_themePath );
+		}
+		define('TPLNOTE_PATH',ALL_CACHE_PATH . 'tplnote/');
+	}
+	
+	/**
+	 * @name模板管理
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$scanPath = $this->_themePath . $in['folder'];
+		if (file_exists($scanPath)) {			
+			$fileLists = $this->_dir->toArray();
+//			dump($fileLists);exit;
+			if (is_array($fileLists) && !empty($fileLists)) {
+				foreach ($fileLists as $k=>$v) {
+					if (!$v['isDir']) {
+						$fileLists[$k]['note'] = F ($v['filename'].'_'.md5($v['pathname']),'',TPLNOTE_PATH);
+					}
+				}
+			}
+			usort($fileLists, array($this, 'dirSort'));
+			$this->assign('data',$fileLists);
+			$this->display();
+		} else {
+			$this->message('<font class="red">目录不存在！</font>');
+		}
+	}
+	
+	/**
+	 * @name模板编辑
+	 */
+	public function edit() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_ajax_edit();
+		$in['filename'] = urldecode($in['filename']);
+		if ($this->ispost()) { //保存模板
+			$file = $in['info']['path'] . '/' . $in['info']['filename'];
+			$file = realpath($file);
+			$content = htmlspecialchars_decode($in['info']['content']);
+//			echo $content;exit;
+			file_put_contents($file,$content);
+			F ($in['info']['filename'].'_'.md5($file),$in['info']['note'] ? $in['info']['note'] : null,TPLNOTE_PATH);
+			$this->message('<font class="green">模板保存成功！</font>');
+		}
+		$file = realpath($this->_themePath . $in['filename']);
+		$this->assign('filename',$in['filename']);
+		if (filetype($file) == 'file') {			
+			$data['filename'] = basename($file);
+			$data['path'] = dirname($file);
+			$data['note'] = F ($data['filename'].'_'.md5($file),'',TPLNOTE_PATH);
+			$data['info'] = pathinfo($file);
+			$this->assign('data',$data);
+			$this->display();
+		} else {
+			$this->message('<font class="red">文件不存在！</font>');
+		}		
+	}
+	
+	/**
+	 * @name处理编辑模板时候的ajax请求
+	 */
+	protected function _ajax_edit () {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'savetplnote':  //保存模板说明，直接保存在缓存中
+				$file = realpath($this->_themePath . substr($in['filename'],4));
+				if ( F (basename($file).'_'.md5($file),$in['note'],TPLNOTE_PATH) ) {
+					echo $in['note'];
+				}
+				break;
+			case 'getcontent':
+				$file = realpath($this->_themePath . $in['filename']);				
+				$content = file_get_contents($file);
+				echo $content;
+				break;
+		}
+		exit ();
+	}
+	
+	
+	/**
+	 * @name删除模板
+	 */
+	public function delete() {
+		$in = &$this->in;
+		$file = realpath($this->_themePath . $in['filename']);
+		if (file_exists($file)) {
+			unlink($file);
+			$this->message('<font class="green">删除成功！</font>');
+		} else {
+			$this->message('<font class="red">删除失败！</font>');
+		}
+	}
+	
+	/**
+	 * @name清除模板缓存
+	 */
+	public function cache() {
+		import('ORG.Io.Dir');
+		$_dir = new Dir();
+		$_dir->clearDir(RUNTIME_PATH . 'templates_c');
+		$_dir->clearDir(ALL_CACHE_PATH . 'front/runtime/templates_c');
+		$this->message('<font class="green">模板缓存清除成功！</font>', U('ftpl/manage'));
+	}
+	
+	/**
+	 * @name标签生成向导
+	 */
+	public function create_tag() {
+		$in = &$this->in;
+		
+		$this->display();
+	}
+	
+	/**
+	 * @name对模板文件进行排序
+	 *
+	 * @param unknown_type $a
+	 * @param unknown_type $b
+	 * @return unknown
+	 */
+	protected function dirSort($a, $b)
+	{
+		if ($a['type'] == 'dir' && $b['type'] == 'file') {
+			return false;
+		} else if ($a['type'] == 'file' && $b['type'] == 'dir') {
+			return true;
+		} else {
+			return strcmp($a["filename"], $b["filename"]);
+		}
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FuploadAction.class.php ---
@@ -0,0 +1,409 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FuploadAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-4-28
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 文件上传处理
+// +----------------------------------------------------------------------
+
+defined ( 'IN_ADMIN' ) or die ( 'Access Denied' );
+
+//定义文件名输出编码： windows 输出gbk  其他*nx 输出 utf-8
+defined('OUT_ENCODE') or define('OUT_ENCODE', IS_WIN ? 'gbk' : 'utf-8');
+/**
+ * @name 文件上传处理
+ *
+ */
+class FuploadAction extends FbaseAction {
+	/**
+	 * 由于firefox在处理flash的session方面的BUG，我们需要单独处理flash的session，所以在基础类中不作权限判断
+	 *
+	 * @var boolean
+	 */
+	protected $needAuth = false;
+
+	/**
+	 * @name处理模型上传字段的上传动作，包括普通附件和图片
+	 */
+	public function fieldupload() {
+		$in = &$this->in;
+		$in ['fieldid'] = intval ( $in ['fieldid'] );
+		if (! $in ['fieldid']) {
+			return ;
+		}
+		$_field = D ( 'ModelField' );
+		$field_data = $_field->find ( $in ['fieldid'] );
+		//允许上传类型
+		$fileext = explode ( '|', ! empty ( $field_data ['setting'] ['upload_allowext'] ) ? $field_data ['setting'] ['upload_allowext'] : C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+		//允许上传大小
+		$allowSize = ! empty ( $field_data ['setting'] ['upload_maxsize'] ) ? $field_data ['setting'] ['upload_maxsize'] : C ( 'UPLOAD_MAXSIZE' );
+		$allowSize = intval ( $allowSize );
+		//字段定义的默认缩略图宽高
+		//print_r($field_data);
+		if ( in_array($field_data['formtype'], array('images', 'thumb'))) {//如果是图片
+			$this->assign('uploadImage',$uploadImage = true);
+			if ( $field_data['setting']['isthumb']) {//是否产生缩略图
+				$this->assign('width',$field_data['setting']['thumb_width']);
+				$this->assign('height',$field_data['setting']['thumb_height']);
+			}
+		}
+		if (! empty ( $_FILES )) { //处理上传
+			//判断类型，如果不是上传图片交给_filesUpload()处理
+			if(!$uploadImage) {
+				$this->_filesUpload ( $field_data );
+				exit;
+			}
+			//处理session
+			if ($in['sid'] != session_id()) {
+				session_destroy(); //情况当前session
+				session_id($in['sid']); //重新定义session
+				session_start();
+			}
+			//判断权限
+			if (!parent::checkRbac('','',true)) {
+				die(json_encode(
+					array(
+					'code' => 'n',
+					'info' => '没有权限进行此操作！'
+					)
+				));
+			}
+			import ( 'ORG.Net.UploadFile' );
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize*1024;  //转成Byte
+			$upload->allowExts = $fileext;
+			$upload->savePath = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) .'images/';
+			//文件保存命名规则
+			$upload->saveRule = C ( 'UPLOAD_FILE_RULE' );
+			if ($upload->upload ()) {
+				$fileinfo = $upload->getUploadFileInfo ();
+				$result = array (
+					'code' => 'y',
+					'info' => 'images/' . $fileinfo [0]['savename'],
+					'upload_dir' => __ROOT__ . '/' . C ( 'UPLOAD_DIR' ),
+					'type'	=>	'image',
+					'name'	=>	htmlspecialchars($fileinfo[0]['name']),
+				);
+                
+                $upload_dir = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' );
+		        $filepath = $upload_dir . 'images/' . $fileinfo [0]['savename'];
+                
+                import('ImageResize',INCLUDE_PATH);
+                $_imageResize = new ImageResize();
+                $_imageResize->load($filepath);
+                
+                $img = getimagesize($filepath);
+                
+                if(C("is_cut") == 1){
+                    
+                    $cutSize = C('CUT_SIZE') < 475?475:C('CUT_SIZE');
+                                                
+                    if($img[0] > $cutSize){
+                        $bl = round($cutSize/$img[0],2);
+                        $width = $cutSize;
+                        $height = ceil($bl*$img[1]);
+                        $_imageResize->resize($width,$height);
+                        $_imageResize->save($filepath,false);
+                    }     
+                
+                }                                
+				//缩略图、添加水印等
+				if ($field_data ['setting'] ['isthumb']) { //生成缩略图
+	                import ('ORG.Util.Image');
+	                $thumbMaxWidth = $field_data ['setting'] ['thumb_width'] ? $field_data ['setting'] ['thumb_width'] : C ( 'UPLOAD_THUMB_WIDTH' );
+					$thumbMaxHeight = $field_data ['setting'] ['thumb_height'] ? $field_data ['setting'] ['thumb_height'] : C ( 'UPLOAD_THUMB_HEIGHT' );
+					$imageFileName = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/' . $fileinfo[0]['savename'];
+					$thumbFileName = dirname($imageFileName) . '/thumb/' . basename($imageFileName);
+					$imageFileName = auto_charset($imageFileName, 'utf-8', OUT_ENCODE);
+					$thumbFileName = auto_charset($thumbFileName, 'utf-8', OUT_ENCODE);
+	                Image::thumb($imageFileName, $thumbFileName, $thumbMaxWidth, $thumbMaxHeight);
+				}
+				if ($field_data ['setting'] ['iswatermark']) {//加水印
+	                import ('ORG.Util.Image');
+					$waterPath = FANGFACMS_ROOT . 'public/' . (! empty ( $field_data ['setting'] ['water_path'] ) ? $field_data ['setting'] ['water_path'] : C ( 'UPLOAD_WATER_PATH' ) );
+					$waterPlace = $field_data ['setting'] ['water_palce'] ? $field_data ['setting'] ['water_palce'] : C ( 'UPLOAD_WATER_PLACE' );
+					$waterTrans = C ( 'UPLOAD_WATER_TRANS' );
+					$imageFileName = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/' . $fileinfo[0]['savename'];
+					$imageFileName = auto_charset($imageFileName, 'utf-8', OUT_ENCODE);
+					Image::waterMark($imageFileName, $waterPath, $waterTrans, 90 ,$waterPlace);
+				}
+			} else {
+				$result = array (
+					'code' => 'n',
+					'info' => $upload->getErrorMsg ()
+				);
+			}
+			die ( json_encode ( $result ) );
+		}
+		//判断权限
+		parent::checkRbac();
+		//给uploadify设定参数
+		if (is_array ( $fileext )) {
+			foreach ( $fileext as $k => $v ) {
+				$fileext [$k] = '*.' . $v;
+			}
+			$fileext = implode ( ';', $fileext );
+		} else {
+			return;
+		}
+		$args = array (
+			'm' => 'fupload',
+			'a' => 'fieldupload',
+			'fieldid' => $field_data ['fieldid'],
+			'dosubmit' => 1,
+			'sid' => session_id(),  //传递PHPSESSID
+			'upload_maxsize' => $allowSize,
+		);
+		$scriptData = json_encode ( $args );
+		$data = array (
+			'fileext' => $fileext,
+			'scriptData' => $scriptData,
+			'allowSize' => $allowSize,
+		);
+		$data['multi'] = isset($in['multi']) ? $in['multi'] : false;  //是否支持多文件或多图 true支持 false 不支持
+		$data['multi_name'] = (!empty($in ['multi_name']) ? $in ['multi_name'] : 'info['. $field_data['field'] .'][]'); //多图或多文件返回表单隐藏域name
+		if (!empty($in['opener_id'])) $data['opener_id'] = $in ['opener_id'];  //单图返回表单id
+		if (!empty($in['shower_id'])) $data['shower_id'] = $in ['shower_id']; //图片展示容器
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+
+	/**
+	 * @name文件上传处理
+	 * @param array $field_data 字段信息
+	 */
+	protected function _filesUpload($field_data) {
+		$in = &$this->in;
+		$m_path = ($field_data['formtype'] == 'video' ? 'media/' : 'files/');  //判断是视屏还是文件，存放在不同目录下
+
+		$fileext = explode ( '|', ! empty ( $field_data ['setting'] ['upload_allowext'] ) ? $field_data ['setting'] ['upload_allowext'] : C ( 'UPLOAD_ATTACHMENT_ALLOWEXT' ) );
+		//允许上传大小
+		$allowSize = ! empty ( $field_data ['setting'] ['upload_maxsize'] ) ? $field_data ['setting'] ['upload_maxsize'] : C ( 'UPLOAD_MAXSIZE' );
+		$allowSize = intval ( $allowSize ) * 1024;
+		if (! empty ( $_FILES )) { //处理上传
+			//处理session
+			if ($in['sid'] != session_id()) {
+				session_destroy(); //情况当前session
+				session_id($in['sid']); //重新定义session
+				session_start();
+			}
+			if (!parent::checkRbac('','',true)) {
+				die(json_encode(
+					array(
+					'code' => 'n',
+					'info' => '没有权限进行此操作！'
+					)
+				));
+			}
+			import ( 'ORG.Net.UploadFile' );
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize;
+			$upload->allowExts = $fileext;
+			$upload->savePath = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . $m_path;
+			//文件保存命名规则
+			$upload->saveRule = C ( 'UPLOAD_FILE_RULE' );
+
+			if ($upload->upload ()) {
+				$fileinfo = $upload->getUploadFileInfo ();
+				$result = array (
+					'code' => 'y',
+					'info' => $m_path . $fileinfo[0]['savename'],
+					'type' => 'file',
+					'name' => htmlspecialchars($fileinfo[0]['name']),
+					'size' => byte_format($fileinfo[0]['size']),
+					'size_input' => (isset($field_data['setting']['size_input']) ? $field_data['setting']['size_input'] : '')
+				);
+			} else {
+				$result = array (
+					'code' => 'n', 'info' => $upload->getErrorMsg ()
+				);
+			}
+			die ( json_encode ( $result ) );
+		}
+		//判断权限
+		parent::checkRbac();
+		exit ();
+	}
+
+	/**
+	 * @name普遍上传
+	 */
+	public function CommonUpload()
+	{
+		$in = &$this->in;
+
+		$savePath = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/';
+		if (!file_exists($savePath)) {
+			mk_dir($savePath);
+		}
+		//允许上传类型
+		$fileext = explode ( '|', ! empty ( $in['upload_allowext'] ) ? $in['upload_allowext'] : C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+		//允许上传大小
+		$allowSize = ! empty ( $in['upload_maxsize'] ) ? $in['upload_maxsize'] : C ( 'UPLOAD_MAXSIZE' );
+		$allowSize = intval ( $allowSize );
+		if (! empty ( $_FILES )) { //处理上传
+
+			$current_file = current($_FILES);  //判断是图片还是其他文件
+			if (!in_array(strtolower(strrchr($current_file['name'], '.')), array('.gif', '.jpeg', '.jpg', '.png', '.bmp'))) {
+				$this->_commonFilesUpload();
+				exit;
+			}
+
+			//处理session
+			if ($in['sid'] != session_id()) {
+				session_destroy(); //情况当前session
+				session_id($in['sid']); //重新定义session
+				session_start();
+			}
+
+			if (!parent::checkRbac('','',true)) {
+				die(json_encode(
+					array(
+					'code' => 'n',
+					'info' => '没有权限进行此操作！'
+					)
+				));
+			}
+
+			import ( 'ORG.Net.UploadFile' );
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize*1024;
+			$upload->allowExts = $fileext;
+			$upload->savePath = $savePath;
+			//文件保存命名规则
+			$upload->saveRule = C ( 'UPLOAD_FILE_RULE' );
+			if ($upload->upload ()) {
+				$fileinfo = $upload->getUploadFileInfo ();
+				$result = array (
+					'code' => 'y',
+					'upload_dir' => __ROOT__ . '/' . C ( 'UPLOAD_DIR' ) . '/',
+					'info' => 'images/' . $fileinfo [0]['savename'],
+					'type'	=>	'image',
+					'name'	=>	htmlspecialchars($fileinfo[0]['name']),
+				);
+				//缩略图、添加水印等
+				if (C('UPLOAD_THUMB_ISTHUMB')) { //生成缩略图
+	                import ('ORG.Util.Image');
+	                $thumbMaxWidth = C ( 'UPLOAD_THUMB_WIDTH' );
+					$thumbMaxHeight = C ( 'UPLOAD_THUMB_HEIGHT' );
+					$imageFileName = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/' . $fileinfo[0]['savename'];
+					$thumbFileName = dirname($imageFileName) . '/thumb/' . basename($imageFileName);
+					$imageFileName = auto_charset($imageFileName, 'utf-8', OUT_ENCODE);
+					$thumbFileName = auto_charset($thumbFileName, 'utf-8', OUT_ENCODE);
+	                Image::thumb($imageFileName, $thumbFileName, $thumbMaxWidth, $thumbMaxHeight);
+				}
+				if (C('UPLOAD_WATER_ISWATERMARK')) {//加水印
+	                import ('ORG.Util.Image');
+					$waterPath = FANGFACMS_ROOT . 'public/' . C ( 'UPLOAD_WATER_PATH' ) ;
+					$waterPlace = C ( 'UPLOAD_WATER_PLACE' );
+					$waterTrans = C ( 'UPLOAD_WATER_TRANS' );
+					$imageFileName = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) . 'images/' . $fileinfo[0]['savename'];
+					$imageFileName = auto_charset($imageFileName, 'utf-8', OUT_ENCODE);
+					Image::waterMark($imageFileName, $waterPath, $waterTrans, 90 ,$waterPlace);
+				}
+			} else {
+				$result = array (
+					'code' => 'n',
+					'info' => $upload->getErrorMsg ()
+				);
+			}
+			die ( json_encode ( $result ) );
+		}
+		//判断权限
+		parent::checkRbac();
+		//给uploadify设定参数
+		if (is_array ( $fileext )) {
+			foreach ( $fileext as $k => $v ) {
+				$fileext [$k] = '*.' . $v;
+			}
+			$fileext = implode ( ';', $fileext );
+		} else {
+			return;
+		}
+		$args = array (
+			'm' => 'fupload',
+			'a' => 'CommonUpload',
+			'dosubmit' => 1,
+			'sid' => session_id(),  //传递PHPSESSID
+		);
+		if (!empty($in['isthumb'])) $args['isthumb'] = $in['isthumb'];
+		if (!empty($in['thumb_width'])) $args['thumb_width'] = $in['thumb_width'];
+		if (!empty($in['thumb_height'])) $args['thumb_height'] = $in['thumb_height'];
+		if (!empty($in['iswatermark'])) $args['iswatermark'] = $in['iswatermark'];
+		if (!empty($in['water_path'])) $args['water_path'] = $in['water_path'];
+		if (!empty($in['water_place'])) $args['water_place'] = $in['water_place'];
+		if (!empty($in['upload_allowext'])) $args['upload_allowext'] = $in['upload_allowext'];
+
+		$scriptData = json_encode ( $args );
+		$data = array (
+			'fileext' => $fileext,
+			'scriptData' => $scriptData,
+			'allowSize' => $allowSize,
+		);
+		$data['multi'] = isset($in['multi']) ? $in['multi'] : false;  //是否支持多文件或多图 true支持 false 不支持
+		$data['multi_name'] = (!empty($in ['multi_name']) ? $in ['multi_name'] : 'files[]'); //多图或多文件返回表单隐藏域name
+		if (!empty($in['opener_id'])) $data['opener_id'] = $in ['opener_id'];  //单图返回表单id
+		if (!empty($in['shower_id'])) $data['shower_id'] = $in ['shower_id']; //图片展示容器
+		$this->assign ( 'data', $data );
+		$this->display ();
+	}
+
+	/**
+	 * @name普通的文件上传处理
+	 * @param array $field_data 字段信息
+	 */
+	protected function _commonFilesUpload() {
+		$in = &$this->in;
+		$fileext = explode ( '|', ! empty ( $in['upload_allowext'] ) ? $in['upload_allowext'] : C ( 'UPLOAD_ATTACHMENT_ALLOWEXT' ) );
+		//允许上传大小
+		$allowSize = ! empty ( $in['upload_maxsize'] ) ? $in['upload_maxsize'] : C ( 'UPLOAD_MAXSIZE' );
+		$allowSize = intval ( $allowSize ) * 1024;
+		if (! empty ( $_FILES )) { //处理上传
+			//处理session
+			if ($in['sid'] != session_id()) {
+				session_destroy(); //情况当前session
+				session_id($in['sid']); //重新定义session
+				session_start();
+			}
+			if (!parent::checkRbac('','',true)) {
+				die(json_encode(
+					array(
+					'code' => 'n',
+					'info' => '没有权限进行此操作！'
+					)
+				));
+			}
+			import ( 'ORG.Net.UploadFile' );
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize * 1024;
+			$upload->allowExts = $fileext;
+			$upload->savePath = FANGFACMS_ROOT . C ( 'UPLOAD_DIR' ) .'files/';
+			//文件保存命名规则
+			$upload->saveRule = C ( 'UPLOAD_FILE_RULE' );
+
+			if ($upload->upload ()) {
+				$fileinfo = $upload->getUploadFileInfo ();
+				$result = array (
+					'code' => 'y',
+					'info' => 'files/' . $fileinfo[0]['savename'],
+					'type'	=>	'file',
+					'name'	=>	htmlspecialchars($fileinfo[0]['name']),
+				);
+			} else {
+				$result = array (
+					'code' => 'n', 'info' => $upload->getErrorMsg ()
+				);
+			}
+			die ( json_encode ( $result ) );
+		}
+		//判断权限
+		parent::checkRbac();
+		exit ();
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FuserAction.class.php ---
@@ -0,0 +1,323 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FuserAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2011-1-30
+// +----------------------------------------------------------------------
+// | Author: 孙斌 <sunyichi@163.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  会员管理
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name RBAC访问控制设置
+ *
+ */
+class FuserAction extends FbaseAction {
+	
+	/**
+	 * User类对象
+	 * @var object
+	 */
+	protected $_user = '';
+	
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize() {
+		parent::_initialize();
+		import('User',INCLUDE_PATH);//导入User类
+		//所有会员角色
+		$this->_user = get_instance_of('User');
+		$roles = D('Role')->field("`role_id`,`nickname`")->where("`status`='1' and `isadmin`='0'")->order("`role_id` ASC ")->findAll();
+		$this->assign('roles',$roles);
+	}
+	
+	/**
+	 * @name 会员管理
+	 *
+	 */
+	public function manage() {
+		$in = &$this->in;
+		$where = array();
+		if (true !== C('USER_PASSPORT_ON')) {
+			$_user = M ('User');
+			//表前缀
+			$db_pre = C('DB_PREFIX');
+			$data = array ();
+			//查询条件
+			$where = array ();
+			$where["{$db_pre}user.isadmin"] = 0;
+			if ($in['role_id']) {
+				$where["{$db_pre}role_user.role_id"] = $in['role_id'];
+			}
+			if ($in['q'] && $in['q'] != '请输入关键字') {
+				if($in['type']=='rolename')$where["{$db_pre}role.name"] = $in['q'];
+				else if($in['type']=='rolenickname')$where["{$db_pre}role.nickname"] = $in['q'];
+				else $where["{$db_pre}user." . $in['type']] = $in['q'];
+			}
+			//排序条件
+			if ($in['order']) {
+				$order = "{$db_pre}user.`user_id` DESC";
+			} else {
+				$order = "{$db_pre}user.`user_id` DESC";
+			}
+			//left join 表 role_user 再 left join role 后 left join model
+			$join_role_user = "`{$db_pre}role_user`
+					 		  ON ({$db_pre}role_user.user_id={$db_pre}user.user_id)";
+			$join_role = "`{$db_pre}role`
+					 	 ON ({$db_pre}role_user.role_id={$db_pre}role.role_id)";
+			$join_model = "`{$db_pre}model`
+					 	 ON ({$db_pre}model.modelid={$db_pre}role.modelid)";
+			//查找字段
+			$field = "{$db_pre}user.*,
+					  {$db_pre}role.nickname AS `rolenickname`,
+					  {$db_pre}role.name AS `rolename`,
+					  {$db_pre}model.name AS `modelname`";
+			//统计会员数量
+			$data ['count'] = $_user->join($join_role_user)->join($join_role)->join($join_model)->where ( $where )->count ();			
+			//初始化分页类
+			$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+			$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );			
+			//分页代码
+			$data ['pages'] = $Page->show ();			
+			//当前页数据
+			$data ['info'] = $_user->field($field)->join($join_role_user)->join($join_role)->join($join_model)->where ( $where )->order ( $order )->limit ( $Page->firstRow . ',' . $Page->listRows )->select ();
+		} else { //处理通行证模式
+			//TODO
+		}
+		//IP->地址
+		if (is_array($data['info'])) {
+			import('ORG.Net.IpArea');
+			$_ipArea = new IpArea(INCLUDE_PATH . '/ipdata/QQWry.Dat');
+			foreach ($data['info'] as $k=>$v) {
+				$data['info'][$k]['last_login_location'] = $_ipArea->get($v['last_login_ip']);
+			}
+		}
+		$this->assign ('data', $data);
+		$this->assign('in', $this->in);
+		$this->display();
+	}
+	
+	/**
+	 * @name添加会员
+	 * 
+	 */
+	public function add() {
+		$in = &$this->in;
+		if ($in['ajax']) $this->_add_ajax();
+		if(!isset($in['step'])){
+			/* 需要先选择用户模型，在选择角色时使用以下代码
+			$models = array('' => '--选择--');
+			$_model = D ( 'Model' );
+			$where = "`status`='1' AND `moduleid`='{$in['moduleid']}' AND `exttable`<>'manager'";
+			$models += $_model->selectModel($where);
+			if (!$models)
+				$this->message ( '<font class="red">没有可用的用户模型！</font>' );
+			if (is_array ( $models )) {
+				foreach ( $models as $k => $v ) {
+					$models [$k] = array (
+						'title' => $v, 'value' => $k 
+					);
+				}
+			}
+			$this->assign ( 'models', $models );
+			*/
+			$this->assign ( 'step', 1 );
+		}
+		if ($this->ispost()) { //添加进数据库
+			$_user = &$this->_user;
+			if (!$_user->autoCheckToken($in)) { //令牌验证
+				$this->error ( '请不要非法提交或者重复提交页面！</font>' );
+			}
+			if(isset($in['step']) && $in['step']=='1'){
+				//获取要显示的字段，及其相关属性
+				$role_data = D('Role')->find($in['role_id']);
+				$field_data = D('ModelField')->where("`modelid`='{$role_data['modelid']}' AND `systype`<>'2' AND `status`='1'")->order('`sort` ASC')->findAll();
+				$form = D('Model')->getForm($field_data,array(),array("repassword"=>'equalTo="#info_password"', "username"=>'remote="'.U('fuser/add?ajax=checkusername').'"', "email"=>'remote="'.U('fuser/add?ajax=checkemail').'"'));
+				$this->assign( 'form_data', $form );
+				$this->assign ( 'step', 2 );
+				$this->assign ( 'role_id', $in['role_id'] );
+			}
+			elseif(isset($in['step']) && $in['step']=='2'){
+				if (false === $_user->insert($in['info'],(int)$in['info']['isadmin'])) {
+					$this->message('<font class="red">' . $_user->getError() . '会员添加失败！</font>');
+				} else {
+					$this->message('<font class="green">会员添加成功！</font>', U("fuser/manage") );
+				}
+			}
+		}
+		$this->assign ( 'moduleid', $in['moduleid'] );
+		//TODO
+		$this->display();
+	}
+
+	/**
+	 * @name处理添加用户时候的ajax请求
+	 * 
+	 */
+	protected function _add_ajax() {
+		$in = &$this->in;
+		switch ($in['ajax']) {
+			case 'checkusername':
+				$_user = D ('User');
+				if (true === $_user->validate($in['info'],'username')) {
+					die('true');
+				} else {
+					die('false');
+				}
+				break;
+			case 'checkemail':
+				$_user = D ('User');
+				if (true === $_user->validate($in['info'],'email')) {
+					die('true');
+				} else {
+					die('false');
+				}
+				break;
+			case 'getrole':
+				$roles = D('Role')->field("`role_id`,`nickname`")->where("`modelid`='{$in['modelid']}' and `status`='1' and `isadmin`='0'")->order("`role_id` ASC ")->findAll();
+				$selectrole = array();
+				if (is_array ( $roles )) {
+					foreach ( $roles as $v ) {
+						$selectrole [$v['role_id']] = array (
+							'title' => $v['nickname'], 'value' => $v['role_id']
+						);
+					}
+					echo Html::select('role_id', $selectrole,'','title="【所属会员角色】必须选择" class="required"');
+				}
+				break;
+			default:
+				;
+		}
+		exit();
+	}
+	
+	/**
+	 * @name编辑会员
+	 * 
+	 */
+	public function edit() {
+		$in = &$this->in;
+		$_user = &$this->_user;
+		if ($in['do'] == 'status') {
+			$this->status();
+		}
+		
+		if ($this->ispost()) {
+			if (!$in['info']['user_id']) {
+				$this->message('<font class="red">参数错误，没有选择要修改的会员！</font>');
+			}
+			if ($in['info']['user_id'] == '1') $this->message('<font class="red">操作终止，不能更改【会员】状态！</font>');
+			if (!$_user->autoCheckToken($in)) { //令牌验证
+				$this->error ( '<font class="red">请不要非法提交或者重复提交页面！</font>' );
+			}
+			if (false === $_user->update($in['info'],(int)$in['info']['isadmin'])) {
+				$this->message('<font class="red">' . $_user->getError() . '会员信息修改失败！</font>');
+			} else {
+				$this->message('<font class="greeen">会员信息修改成功！</font>', U('fuser/manage') );
+			}
+		}
+		if (!$in['user_id']) {
+			$this->message('<font class="red">参数错误，没有选择要修改的会员！</font>');
+		}
+		if ($in['user_id'] == 1) {
+			$this->message('<font class="red">操作终止，不能更改【会员】状态！</font>');
+		}
+		//获取会员详情
+		$data = $_user->getUserData($in['user_id'], true);
+		$data['password'] = '';
+		//获取要显示的字段，及其相关属性
+		$role_user_data = D('RoleUser')->where("`user_id`='{$in['user_id']}'")->find();
+		$role_data = D('Role')->find($role_user_data['role_id']);
+		$field_data = D('ModelField')->where("`modelid`='{$role_data['modelid']}' AND `systype`<>'2' AND `status`='1'")->order('`sort` ASC')->findAll();
+		$form = D('Model')->getForm($field_data,$data,array("repassword"=>'equalTo="#info_password"', "username"=>'readonly="readonly"', "email"=>'readonly="readonly"'));
+		$this->assign( 'form_data', $form );
+		//获取当前角色的所有同模型角色
+		$roles = D('Role')->field("`role_id`,`nickname`")->where("`status`='1' and `isadmin`='0' and `modelid`='{$role_data['modelid']}'")->order("`role_id` ASC ")->findAll();
+		$this->assign( 'roles',$roles );
+		$this->assign( 'data',$data );
+		$this->display();
+	}
+	
+	/**
+	 * @name修改会员状态
+	 * 
+	 */
+	protected function status() {
+	$in = &$this->in;
+		$_user = &$this->_user;
+		if (!$in['user_id']) {
+			 $this->message('<font class="red">参数错误，没有指定删除项！</font>');
+		}
+		if (is_numeric($in['user_id'])) {
+			if ($in['user_id'] == '1') $this->message('<font class="red">操作终止，不能更改【会员】状态！</font>');
+		}
+		if (is_array($in['user_id'])) {
+			if (in_array('1',$in['user_id']))  $this->message('<font class="red">操作终止，不能更改【会员】状态！</font>');
+		}
+		if (false === $_user->status($in['user_id'],$in['status'])) {
+			$this->message('<font class="red">' . $_user->getError() . '操作发生错误！</font>',U('fuser/manage'));
+		} else {
+			redirect(U('fuser/manage'));
+		}
+		exit ();
+	}
+	
+	/**
+	 * @name删除会员
+	 * 
+	 */
+	public function delete() {
+		$in = &$this->in;
+		$_user = &$this->_user;
+		if (!$in['user_id']) {
+			 $this->message('<font class="red">参数错误，没有指定删除项！</font>');
+		}
+		if (is_numeric($in['user_id'])) {
+			if ($in['user_id'] == '1') $this->message('<font class="red">操作终止，【会员】无法删除！</font>');
+		}
+		if (is_array($in['user_id'])) {
+			if (in_array('1',$in['user_id']))  $this->message('<font class="red">操作终止，【会员】无法删除！</font>');
+		}
+		if (true === $_user->delete($in['user_id'])) {
+			$this->message('<font class="red">操作成功！</font>',U('fuser/manage'));
+		} else {
+			$this->message('<font class="red">' . $_user->getError() . '操作发生错误！</font>',U('fuser/manage'));
+		}
+		//TODO
+		$this->display();
+	}
+
+	/**
+	* 递归转化$array数组为字符串
+	*
+	* @param $array 任何类型(主要是用于数组)
+	*/
+	protected function loop($array){
+		if(!is_array($array)){
+		   return $array;
+		}
+		//声明一条字符串，用来组合解析的所有值
+		$w_string_array = "Array (";
+		if(isset($array)){
+			//获得所有的key
+			$keys = array_keys($array);
+			//遍历所有的key
+			for($i=0;$i<count($keys);$i++){
+				//获得一个key
+				$key = $keys[$i];
+				//获得一个值
+				$value = $array[$key];
+				//递归追加
+				$w_string_array = $w_string_array." [$key] => ".$this->loop($value);
+			}
+		}
+		$w_string_array .= " )";
+		return $w_string_array;
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Action/FvoteAction.class.php ---
@@ -0,0 +1,515 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: FvoteAction.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-1-2
+// +----------------------------------------------------------------------
+// | Author: 成俊<cgjp123@163.com>
+// +----------------------------------------------------------------------
+// | 文件描述:  投票
+// +----------------------------------------------------------------------
+
+defined('IN_ADMIN') or die('Access Denied');
+/**
+ * @name 投票管理
+ *
+ */
+class FvoteAction extends FbaseAction
+{
+	protected $_category = '';
+	protected $category_data = '';
+
+	/**
+	 * @name初始化
+	 */
+	protected function _initialize()
+	{
+		parent::_initialize();
+		$in = &$this->in;
+		$in['_tablename'] = 'vote_subject';
+
+		if ($in['catid']) {
+			$this->_category = D ('Category');
+			$this->category_data = $this->_category->find((int)$in['catid']);
+			$this->assign('cat',$this->category_data);
+			$this->checkPermissions($_SESSION['userdata'],$this->category_data['permissions']['admin']);
+		} else $this->message('<font class="red">没有选择要操作的栏目</font>');
+	}
+
+	/**
+	 * @name检查权限
+	 * @param $userData
+	 * @param $permissions
+	 */
+	private function checkPermissions($userData,$permissions) {
+		if ($userData['username'] == 'developer') return true;
+		$has = false;
+		if (is_array($userData['roles'])) {
+			foreach ($userData['roles'] as $v) {  //如果有一个角色有权限   那就有权限
+				if (in_array($v,$permissions[ACTION_NAME])) $has = true;
+			}
+		}
+		if (!$has) {
+			$this->message('<font class="red">无权访问！</font>');
+		}
+		return true;
+	}
+
+	/**
+	 * @name投票列表
+	 */
+	public function manage()
+	{
+		$in = &$this->in;
+		$in ['where']['ismultiple'] = 0;
+		$in ['where']['parentid'] = 0;
+		$in ['where']['catid'] = $in['catid'];
+		$this->manageData();
+	}
+
+	/**
+	 * @name添加投票
+	 */
+	public function add()
+	{
+		$in =&$this->in;
+
+		if ($this->ispost()) {
+			$_model = M('vote_subject');
+			$in['_tablename'] = 'vote_subject';
+			$in['info']['create_time'] = $in['info']['update_time'] = time();
+			$in['info']['userid'] = $_SESSION['userdata']['user_id'];
+			$in['info']['optionnumber'] = count($in['info']['option']);
+			$in['info']['groupidsvote'] = serialize($in['info']['groupidsvote']);
+			$in['info']['groupidsview'] = serialize($in['info']['groupidsview']);
+			$in['info']['catid'] = $in['catid'];
+
+			$_m = D ('vote_subject'); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				$subjectid = $_m->add ();
+				if ($subjectid) {  //插入选项值
+					$option_model = M('vote_option');
+					foreach ($in['info']['option'] AS $key=>$value) {
+						$option_model->subjectid = $subjectid;
+						$option_model->option = $value;
+						$option_model->image = $in['info']['image'][$key];
+						$option_model->add();
+					}
+
+					$this->message('<font class="green">添加成功！</font>');
+				} else $this->message('<font class="red">添加失败！</font>');
+			} else $this->message('<font class="red">请不要重复提交！</font>');
+		} else {
+			$this->assign('editer_html', Html::editor('info[description]', '', C('EDITOR_TYPE'), array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+			//获取用户组
+			$_role = D ( 'Role' );
+			$role_data = $_role->where ( "`status`='1' " )->getField('name,nickname');
+			$this->assign('role_data', $role_data);
+		}
+
+		$this->display();
+	}
+
+	/**
+	 * @name编辑投票
+	 */
+	public function edit()
+	{
+		$in = &$this->in;
+
+		if ($in['ajax']) {
+			$this->_ajax_edit();
+			exit;
+		}
+		$_model = D('vote_subject');
+		$option_model = M('vote_option');
+
+		if ($this->ispost() && $in['subjectid']) {
+			$in['info']['optionnumber'] = count($in['info']['option']);
+			$in['info']['groupidsvote'] = serialize($in['info']['groupidsvote']);
+			$in['info']['groupidsview'] = serialize($in['info']['groupidsview']);
+			$in['info']['subjectid'] = $in['subjectid'];
+			$in['info']['update_time'] = time();
+
+			$_m = D ('vote_subject'); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if ($_m->save ()) {  //更新选项值
+					//旧选项值
+					$old_option = $option_model->where('subjectid='.$in['subjectid'])->getField('optionid,`option`');
+					foreach ($in['info']['option'] AS $key=>$value) {
+						$option_model->subjectid = $in['subjectid'];
+						$option_model->option = $value;
+						$option_model->image = $in['info']['image'][$key];
+						if (!empty($in['info']['option_ids'][$key])) {
+							$option_model->optionid = $in['info']['option_ids'][$key];
+							$option_model->save();
+							unset($old_option[$in['info']['option_ids'][$key]]);
+						} else {
+							$option_model->optionid = '';
+							$option_model->add();
+						}
+					}
+					if (!empty($old_option)) $option_model->delete(implode(',', array_keys($old_option)));
+
+					$this->message('<font class="green">编辑成功！</font>');
+				} else {
+                    $this->message('<font class="red">编辑失败！</font>');
+                }
+			} else $this->message('<font class="red">请不要重复提交！</font>');
+		}
+		$data = $_model->find($in['subjectid']);
+		$data['groupidsvote'] = unserialize($data['groupidsvote']);
+		$data['groupidsview'] = unserialize($data['groupidsview']);
+		$data['option'] = $option_model->where('subjectid='.$in['subjectid'])->findAll();
+
+		$this->assign('editer_html', Html::editor('info[description]', $data['description'], C('EDITOR_TYPE') , array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+		//获取用户组
+		$_role = D ( 'Role' );
+		$role_data = $_role->where ( "`status`='1' " )->getField('name,nickname');
+		$this->assign('role_data', $role_data);
+		$this->assign('data', $data);
+		$this->display();
+	}
+	
+	/**
+	 *@name 处理投票AJAX请求 
+	 */
+	protected function _ajax_edit()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+		$data = array();
+		$data['subjectid'] = $in['subjectid'];
+		switch ($in['ajax']) {
+			case 'status':
+				$data['status'] = $in['status'];
+				$_model->save($data);
+				break;
+		}
+
+		redirect($this->forward);
+	}
+
+	/**
+	 * @name删除问卷
+	 */
+	public function delete()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+
+		if (is_array($in['subjectid'])) {
+			$ids = implode(',', $in['subjectid']);
+		} elseif (is_numeric($in['subjectid'])) {
+			$ids = $in['subjectid'];
+		}
+		$_model->delete($ids);
+
+		//删除选项
+		$option_model = M('vote_option');
+		$option_model->where('subjectid IN('.$ids.')')->delete();
+
+		redirect($this->forward);
+	}
+
+	/**
+	 * @name查看问卷统计
+	 */
+	public function voteshow()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+		$_vote_data_model = M('vote_data');
+		$_option_model = M('vote_option');
+
+		$subject = $_model->find($in['subjectid']);
+		$subject['total_vote_num'] = 0;
+		if ($subject['ismultiple'] == 1) { //问卷
+			$subject_child = $_model->where('parentid='.$subject['subjectid'])->order('`sort` ASC')->findAll();
+		} else { //投票
+			$subject_child = array($subject);
+		}
+
+		$vote_data = $_vote_data_model->where('subjectid='.$subject['subjectid'])->findAll();
+		foreach ($subject_child AS &$sc) {
+			$sc['total_vote_num'] = 0;  //总投票数
+			$vote_option = $_option_model->where('subjectid='.$sc['subjectid'])->findAll();
+			foreach ($vote_option AS $vo) {
+				$vo['vote_num'] = 0;
+				$sc['options'][$vo['optionid']] = $vo;
+			}
+
+			if (is_array($vote_data)) {
+				foreach ($vote_data AS $vd) {
+					$vd['data'] = unserialize($vd['data']);
+					if (is_string($vd['data'][$sc['subjectid']])) $vd['data'][$sc['subjectid']] = array($vd['data'][$sc['subjectid']]);
+					foreach ($vd['data'][$sc['subjectid']] AS $o_id) {
+						if(array_key_exists($o_id, $sc['options'])) {
+							$sc['options'][$o_id]['vote_num']++;
+							$sc['total_vote_num']++;
+							$subject['total_vote_num']++;
+						}
+					}
+				}
+			}
+		}
+		$subject['child'] = $subject_child;
+
+		$this->assign('subject', $subject);
+		$this->display();
+	}
+	/**
+	 * @name问卷列表
+	 */
+	public function survey_manage()
+	{
+		$in = &$this->in;
+		$in['where']['ismultiple'] = 1;
+		$in['where']['parentid'] = 0;
+		$in['where']['catid'] = $in['catid'];
+		$this->manageData();
+	}
+
+	/**
+	 * @name添加问卷
+	 *
+	 */
+	public function survey_add()
+	{
+		$in =&$this->in;
+
+		if ($this->ispost()) {
+			$_model = M('vote_subject');
+			$in['_tablename'] = 'vote_subject';
+			$in['info']['create_time'] = $in['info']['update_time'] = time();
+			$in['info']['userid'] = $_SESSION['userdata']['user_id'];
+			$in['info']['catid'] = $in['catid'];
+
+			if (isset($in['info']['parentid'])) {
+				$in['info']['ismultiple'] = 0;
+				$in['info']['optionnumber'] = count($in['info']['option']);
+				$in['info']['groupidsvote'] = '';
+				$in['info']['groupidsview'] = '';
+			} else {
+				$in['info']['ismultiple'] = 1;
+				$in['info']['groupidsvote'] = serialize($in['info']['groupidsvote']);
+				$in['info']['groupidsview'] = serialize($in['info']['groupidsview']);
+			}
+
+
+			$_m = D ('vote_subject'); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				$subjectid = $_m->add ();
+				if ($subjectid) {  //插入选项值
+					if (is_array($in['info']['option'])) {
+						$option_model = M('vote_option');
+						foreach ($in['info']['option'] AS $key=>$value) {
+							$option_model->subjectid = $subjectid;
+							$option_model->option = $value;
+							$option_model->image = $in['info']['image'][$key];
+							$option_model->add();
+						}
+					}
+					$this->message('<font class="green">添加成功！</font>');
+				} else $this->message('<font class="red">添加失败！</font>');
+			} else $this->message('<font class="red">请不要重复提交！</font>');
+		} else {
+			$this->assign('editer_html', Html::editor('info[description]', '', C('EDITOR_TYPE'), array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+			//获取用户组
+			$_role = D ( 'Role' );
+			$role_data = $_role->where ( "`status`='1' " )->getField('name,nickname');
+			$this->assign('role_data', $role_data);
+		}
+		$this->display();
+	}
+
+	/**
+	 * @name编辑问卷
+	 */
+	public function survey_edit()
+	{
+		$in = &$this->in;
+
+		if ($in['ajax']) {
+			$this->_ajax_edit();
+			exit;
+		}
+		$_model = D('vote_subject');
+
+		if ($this->ispost() && $in['subjectid']) {
+			$in['info']['optionnumber'] = count($in['info']['option']);
+			$in['info']['groupidsvote'] = serialize($in['info']['groupidsvote']);
+			$in['info']['groupidsview'] = serialize($in['info']['groupidsview']);
+			$in['info']['subjectid'] = $in['subjectid'];
+			$in['info']['update_time'] = time();
+
+			$_m = D ('vote_subject'); //实例化表模型类
+			$_keyid = $_m->getPk ();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_m->create ( $in ['info'] ) ) {
+				if ($_m->save ()) {  //更新选项值
+
+					$this->message('<font class="green">编辑成功！</font>');
+				} else $this->message('<font class="red">编辑失败！</font>', '', 3000);
+			} else $this->message('<font class="red">请不要重复提交！</font>');
+		}
+		$data = $_model->find($in['subjectid']);
+		$data['groupidsvote'] = unserialize($data['groupidsvote']);
+		$data['groupidsview'] = unserialize($data['groupidsview']);
+
+		$this->assign('editer_html', Html::editor('info[description]', $data['description'], C('EDITOR_TYPE'), array('toolbar' => 'basic', 'width' => 500, 'height' => 250)));
+		//获取用户组
+		$_role = D ( 'Role' );
+		$role_data = $_role->where ( "`status`='1' " )->getField('name,nickname');
+		$this->assign('role_data', $role_data);
+		$this->assign('data', $data);
+		$this->display();
+	}
+
+	/**
+	 * @name问卷主题列表
+	 */
+	public function survey_manage_subject()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+		$subject = $_model->find($in['subjectid']);
+
+		if ($in['ajax']) {
+			$data['subjectid'] = $in['subjectid'];
+			switch ($in['ajax']) {
+				case 'status':
+					$data['status'] = $in['status'];
+					$_model->save($data);
+					break;
+			}
+
+			redirect($this->forward);
+			exit;
+		}
+		//获取问卷主题列表
+		$subject['data'] = $_model->where('parentid='.$subject['subjectid'])->order('`sort` ASC')->findAll();
+
+		$this->assign('subject', $subject);
+		$this->display();
+	}
+
+	/**
+	 * @name问卷主题编辑
+	 */
+	public function survey_edit_subject()
+	{
+		$in = &$this->in;
+
+		$_model = D('vote_subject');
+		$subject = $_model->find($in['subjectid']);
+
+		$option_model = M('vote_option');
+		$subject['option'] = $option_model->where('subjectid='.$in['subjectid'])->findAll();
+
+		if ($this->ispost()) {
+			$in['info']['subjectid'] = $in['subjectid'];
+			$in['info']['update_time'] = time();
+			$in['info'][C ('TOKEN_NAME')] = $in[C ('TOKEN_NAME')];
+			if ( $_model->create ( $in ['info'] ) ) {
+				if ($_model->save ()) {  //更新选项值
+					//旧选项值
+					$old_option = $option_model->where('subjectid='.$in['subjectid'])->getField('optionid,`option`');
+					foreach ($in['info']['option'] AS $key=>$value) {
+						$option_model->subjectid = $in['subjectid'];
+						$option_model->option = $value;
+						$option_model->image = $in['info']['image'][$key];
+						if (!empty($in['info']['option_ids'][$key])) {
+							$option_model->optionid = $in['info']['option_ids'][$key];
+							$option_model->save();
+							unset($old_option[$in['info']['option_ids'][$key]]);
+						} else {
+							$option_model->optionid = '';
+							$option_model->add();
+						}
+					}
+					if (!empty($old_option)) $option_model->delete(implode(',', array_keys($old_option)));
+
+					$this->message('<font class="green">编辑成功！</font>');
+				} else $this->message('<font class="red">编辑失败！</font>', '', 3000);
+			} else $this->message('<font class="red">请不要重复提交！</font>');
+		}
+
+		$this->assign('subject', $subject);
+		$this->display();
+	}
+
+	/**
+	 * @name重置数据
+	 */
+	public function reset()
+	{
+		$in = &$this->in;
+
+		$vote_date_model = M('vote_data');
+		$vote_date_model->where('subjectid='.$in['subjectid'])->delete();
+		$this->message('<font class="green">重置成功！</font>');
+	}
+	
+	/**
+	 * @name数据列表
+	 */
+	public function manageData() {
+		$in = &$this->in;
+		if (! $in ['_tablename'])
+			$this->message ( '没有指定操作表！' );
+		$name = $in ['_tablename']; //数据表名
+
+		$_m = D ( parse_name($name,1) ); //实例化表模型类
+		$_keyid = $_m->getPk ();
+		
+		//操作条件
+		$option = array ();
+		if ($in ['order']) {
+			$option['order'] = &$in['order'];
+		} else {
+			$option['order'] = "`{$_keyid}` DESC ";
+		}
+		if ( $in [$_keyid] ) { //主键筛选
+			$option ['where'] = array ($_keyid => $in [$_keyid] );
+		}
+		if ($in ['where']) {
+			$option['where'] = &$in['where'];
+		}
+
+		//获取数据
+		//初始化分页类
+		$data = array ();
+
+		//统计记录数
+		$data ['count'] = $_m->where ( $option['where'] )->count ();
+
+		$_GET ['p'] = &$in ['p']; //分页类中会用到$_GET
+		$Page = new Page ( $data ['count'], $this->getPageSize ( 'pagesize' ) );
+
+		//分页代码
+		$data ['pages'] = $Page->show ();
+
+		//当前页数据
+		$data ['info'] = $_m->limit ( $Page->firstRow . ',' . $Page->listRows )->select ($option);
+		$this->assign ( 'data', $data );
+		if (!empty($in['tpl'])) {
+			$this->display ( $in ['tpl'] );
+		} else {
+			$this->display();
+		}
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Model/ActivityModel.class.php ---
@@ -0,0 +1,202 @@
+<?php 
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: TagModel.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-7
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 活动报名Model
+// +----------------------------------------------------------------------
+
+class ActivityModel extends Model{
+	
+	protected function _before_insert(&$data, $options) {
+		empty($data['create_time']) && $data['create_time'] = time();
+		empty($data['update_time']) && $data['update_time'] = time();
+		!empty($data['start_time']) && $data['start_time'] = strtotime($data['start_time']);
+		!empty($data['end_time']) && $data['end_time'] = strtotime($data['end_time']);
+		!empty($data['in_time']) && $data['in_time'] = strtotime($data['in_time']);//2013-1-15 陈敏，后台中的报名开始时间
+		!empty($data['out_time']) && $data['out_time'] = strtotime($data['out_time']);//2013-1-15 陈敏，后台中的报名结束时间
+		//文档属性
+		$data['attr'] = empty($data['attr']) ? "" : implode(",", $data["attr"]);//2013-1-15 陈敏,后台文档属性的实现
+		//start url链接地址处理
+		if (empty($data['url'])) { 
+			$data['url'] = date('Ym/') . $data['aid'] . C ('URL_HTML_SUFFIX');
+		}
+		$data['url'] = str_replace('-', '.', $data['url']);
+		//end url
+		if (empty($data['seotitle'])) {
+			$data['seotitle'] = trim($data['title']) . ' - {stitle}';
+		}
+		if (empty($data['seokeywords'])) {
+			$data['seokeywords'] = $data['title'];
+		}
+		if (empty($data['seodescription'])) {
+			$data['seodescription'] = $data['description'];
+		}
+	}
+	protected function _after_insert(&$data, $options){
+		parent::execute("UPDATE ".C("DB_PREFIX")."activity set `url`='".date('Ym')."/" . $data['aid'] . C ('URL_HTML_SUFFIX') ."' WHERE `aid`='" . $data['aid'] . "' LIMIT 1");
+	}
+	
+	protected function _before_update(&$data, $options) {	
+	
+		empty($data['update_time']) && $data['update_time'] = time();
+		!empty($data['start_time']) && $data['start_time'] = strtotime($data['start_time']);
+		!empty($data['end_time']) && $data['end_time'] = strtotime($data['end_time']);
+		!empty($data['in_time']) && $data['in_time'] = strtotime($data['in_time']);//2013-1-15 陈敏 后台报名开始时间的转换
+		!empty($data['out_time']) && $data['out_time'] = strtotime($data['out_time']);//2013-1-15 陈敏 后台报名结束时间的转换
+		$data['attr'] = empty($data['attr']) ? "" : implode(",", $data["attr"]);//2013-1-15 陈敏 后台文档属性的定义
+
+		//start url链接地址处理
+		if (empty($data['url'])) { 
+			$data['url'] = date('Ym/') . $data['aid'] . C ('URL_HTML_SUFFIX');
+		}else {
+			$category_data = F ('category_'.$data['catid']);
+			$data['url'] = str_replace($category_data['url'], "", $data['url']);
+		}
+		//end url
+		if (empty($data['seotitle'])) {
+			$data['seotitle'] = trim($data['title']) . ' - {stitle}';
+		}
+		if (empty($data['seokeywords'])) {
+			$data['seokeywords'] = $data['title'];
+		}
+		if (empty($data['seodescription'])) {
+			$data['seodescription'] = $data['description'];
+		}
+	}
+	
+	public function _after_find(&$result, $options) {
+		if (!empty($result)) {
+			$category_data = F ('category_'.$result['catid']);
+			$result['url'] = $category_data['url'] . $result['url'];
+		}
+	}
+	
+	public function _after_select(&$resultSet, $options) {
+		if (!empty($resultSet)) {
+			foreach ($resultSet as $k=>$v) {
+				$this->_after_find($resultSet[$k], $options);
+			}
+		}
+	}
+
+	/**
+	 * 栏目设置、非直接操作，供栏目创建和修改的时候调用
+	 * 如果模块不需要进行特殊设置，则直接返回空字符串
+	 * @param array $data 栏目数据库记录信息
+	 * @param int $catid 栏目ID
+	 */
+	public function setting($data = array(),$catid = '',$parentid = '') {
+		$html = '';
+		if (empty ( $data ) && ( int ) $catid) {
+			$data = D ( 'Category' )->find ( $catid );
+		} elseif ($parentid) {
+			$data['parentid'] = $parentid;
+		}
+		$data ['controller'] = 'factivity';
+		//调用相应的widget
+		$html = W ( 'CategoryActivity', $data, true );
+		return $html;
+	}
+	
+	/**
+	 * 添加内容的时候进行数据验证
+	 * 
+	 * @param array $data  //提交的数据
+	 * @param int $catid  //栏目ID
+	 * @param string $field //验证的字段，为空则验证所有字段
+	 */
+	public function validate($data,$catid, $field = '') {
+		if (is_array($data)) {
+			foreach ($data as $k=>$v) {
+				
+			}
+		}
+		return true;
+	}
+
+     /**
+	 *author:陈敏
+	 *update_time:2013-1-15
+	 *后台中文档属性的更改
+	 * 改变指定ID信息的status
+	 * @param array $cidArr
+	 * @param int $status
+	 */
+	public function status($cidArr,$status = '1') {
+		if (!empty($cidArr) && is_array($cidArr)) {
+			$ids = implode(',',$cidArr);
+			$_c = D ('ActivityApply');
+			$data = array('status'=>$status);
+			$return = $_c->where("`mid` IN ({$ids})")->save($data);
+		} else {
+			$return = false;
+		}
+		return $return;
+	}
+
+/**
+	 * 删除信息记录：主表，扩展表，统计表，tag关联，实体文件
+	 *
+	 * @param array $cidArr
+	 */
+	public function delete($cidArr) {
+		if (is_array($cidArr) && !empty($cidArr)) {
+			$ids = implode(',',$cidArr);
+			$where = " `mid` IN ({$ids}) AND `status`='-1'";
+			$field = "`mid`";
+			$data = $this->field($field)->where($where)->findAll();
+		} elseif (strtolower($midArr) == 'all') {  //清空回收站
+			$where = "`status`='-1' AND `catid`=" . $catid;
+			$field = "`mid`,`catid`,`url`";
+			$data = $this->field($field)->where($where)->findAll();
+		}
+		if (is_array($data) && !empty($data)) {
+			foreach ($data as $v) {
+				//主表
+				parent::delete($v['mid']);
+				//扩展表
+				$category_data = array();
+				$category_data = F ('category_'.$v['catid']);
+				$model_data = array();
+				$model_data = F ('model_'.$category_data['modelid']);
+				$_extContent = '';
+				$_extContent = D (parse_name($model_data['tablename'], 1));
+				$_extContent->where("`mid`='{$v['mid']}'")->delete();
+				//统计表
+				$_contentCount = D ('ContentCount');
+				$_contentCount->where("`mid`='{$v['mid']}'")->delete();
+				//tag关联
+				$_contentTag = D ('ContentTag');
+				$_contentTag->where("`keyid`='c-{$v['mid']}'")->delete();
+			}
+		}
+		return true;
+	}
+
+		/**
+	 *陈敏
+	 *update_time:2013-1-15
+	 *后台中实现报名信息移动到回收站中
+	 * 移动指定ID信息到其他栏目
+	 * @param array $cidArr
+	 * @param int $catid
+	 */
+	public function moveto($cidArr,$catid = '') {
+		if (!empty($cidArr) && $catid && is_array($cidArr)) {
+			$ids = implode(',',$cidArr);
+			$_c = D ('ActivityApply');
+			$data = array('catid'=>$catid);
+			$return = $_c->where("`mid` IN ({$ids})")->save($data);
+		} else {
+			$return = false;
+		}
+		return $return;
+	}
+
+}
\ No newline at end of file

--- admin/Lib/Model/ActsModel.class.php ---
@@ -0,0 +1,202 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: TagModel.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-7
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: acts 数据表模型
+// +----------------------------------------------------------------------
+
+class ActsModel extends Model {
+
+	/**
+	 * 添加入库之前自动调用
+	 * @param unknown_type $data
+	 * @param unknown_type $options
+	 */
+	protected function _before_insert(&$data,$options) {
+		parent::_before_insert($data,$options);
+		if (is_array($data['allow'])){
+			$data['allow'] = implode(',',$data['allow']);
+		}
+		if (is_array($data['deny'])){
+			$data['deny'] = implode(',',$data['deny']);
+		}
+
+	}
+	/**
+	 * 更新入库之前自动调用
+	 * @param unknown_type $data
+	 * @param unknown_type $options
+	 */
+	protected function _before_update(&$data,$options) {
+		$this->_before_insert($data,$options);
+	}
+	/**
+	 * find之后自动调用
+	 * @param unknown_type $data
+	 * @param unknown_type $options
+	 */
+	protected function _after_find(&$result,$options) {
+		parent::_after_find($result,$options);
+		if (empty($result['allow'])) $result['allow'] = array();
+		else $result['allow'] = explode(',',$result['allow']);
+
+		if (empty($result['deny'])) $result['deny'] = array();
+		else $result['allow'] = explode(',',$result['allow']);
+	}
+	/**
+	 * findAll or select 之后自动调用
+	 * @param unknown_type $resultSet
+	 * @param unknown_type $options
+	 */
+	protected function _after_select(&$resultSet,$options) {
+		parent::_after_select($resultSet,$options);
+		if (is_array ( $resultSet )) {
+			foreach ( $resultSet as $k => $v ) {
+				if (isset($resultSet [$k] ['allow'])) {
+					if (empty($resultSet [$k] ['allow'])) $resultSet [$k] ['allow'] = array();
+					else $resultSet [$k] ['allow'] = explode(',',$resultSet [$k] ['allow']);
+				}
+				if (isset($resultSet [$k] ['deny'])) {
+					if (empty($resultSet [$k] ['deny'])) $resultSet [$k] ['deny'] = array();
+					else $resultSet [$k] ['deny'] = explode(',',$resultSet [$k] ['deny']);
+				}
+			}
+		}
+	}
+
+	/**
+	 * ajax方式保存授权，单个
+	 */
+	public function ajaxSave($data) {
+		if (empty($data['controller']) || empty($data['action'])
+			|| empty($data['do']) || !$data['role_id'] || empty($data['appname'])) return null;
+		//获取角色信息
+		$role_data = D('Role')->find((int)$data['role_id']);
+		if(is_array($role_data)) {
+			$where = array(
+				"appname" => $data['appname'],
+				"controller" => $data['controller'],
+				"action" => $data['action'],
+			);
+			$act_data = $this->where($where)->find();
+			if (is_array($act_data)) {
+				if ($data['do'] == 'add') {
+					if (!in_array($role_data['name'],$act_data['allow'])) {
+						array_push($act_data['allow'],$role_data['name']); //添加角色访问权限
+					}
+				} else if ($data['do'] == 'remove') {
+					if (in_array($role_data['name'],$act_data['allow'])) {
+						$key = array_search($role_data['name'],$act_data['allow']);
+						unset($act_data['allow'][$key]);
+					}
+				}
+				//print_r($act_data);
+				return $this->save($act_data);
+			}			
+		}
+		return false;
+	}
+	/**
+	 * 更改菜单操作的访问权限
+	 * 来源用户权限修改页面
+	 */
+	public function ajaxCategory($data) {
+		if (empty($data['cat_id']) || empty($data['action']) || empty($data['do']) || !$data['role_id'] || empty($data['field'])) return null;
+
+		if ($data['member'] == "administrator") { return false; }
+
+		//分析URL
+		preg_match_all('/\[\w+\]/',$data['field'],$match);
+		//dosubmit=2&role_id=1&cat_id=rule2&field=info[permissions][admin][add][]&action=member&do=add
+		$permissions = substr($match[0][0], 1, strlen($match[0][0])-2);//字段
+		$rule        = substr($match[0][1], 1, strlen($match[0][1])-2);//admin
+		$action      = substr($match[0][2], 1, strlen($match[0][2])-2);//操作add
+		
+		//获取栏目信息
+		$catid = substr($data['cat_id'],4);
+		$_cate = D('Category');
+		$category = $_cate->find((int)$catid);
+		if(is_array($category[$permissions])){
+			$permi = $category[$permissions];
+		}else {
+			$permi = eval("return {$category[$permissions]};");
+		}
+		$rule_array = $permi[$rule];
+		if(is_array($rule_array)) {
+			if (in_array($data['action'], $rule_array[$action]) && $data['do'] == "remove") {
+				$key = array_search($data['action'],$rule_array[$action]);
+				unset($rule_array[$action][$key]);
+				foreach ($rule_array[$action] as $t){
+					$new[] = $t;
+				}
+				$rule_array[$action] = $new;
+			}elseif (!in_array($data['action'], $rule_array[$action]) && $data['do'] == "add") {
+				array_push($rule_array[$action],$data['action']); 
+			}else {
+				return true;
+			}
+			$category[$permissions][$rule] = $rule_array;
+			$result = var_export ( $category[$permissions], true );
+			return $_cate->query('update '.C("DB_PREFIX").'category set '.$permissions.'="'.$result.'" where catid='.$catid);
+
+		}
+		return false;
+	} 
+
+	/**
+	 * 检查控制器和其动作是否已经被注册
+	 * @param array $data
+	 */
+	public function isActsExists($data) {
+		if (!is_array($data) || empty($data['appname']) || empty($data['controller']) || empty($data['action'])) return false;
+		$where = array(
+			"appname" => $data['appname'],
+			"controller" => $data['controller'],
+			"action" => $data['action']
+		);
+		$act_data = $this->where($where)->find();
+		if (is_array($act_data)) return true;
+		else return false;
+	}
+
+
+	/**
+	 * 缓存ACT文件
+	 */
+	public function cacheAct() {
+		$group = $this->field(array("DISTINCT appname AS `appname`"))->findAll();
+		foreach ($group as $g) {
+			$where = array("appname"=>$g['appname']);
+			$controller = $this->where($where)->group("controller")->findAll();
+			if (is_array($controller)) {
+				$data = array();
+				foreach ($controller as $v) {	//控制器的所有已经注册动作
+					$w = array(
+						'controller' => $v['controller'],
+						'appname' => $g['appname'],
+					);
+					$actions = $this->where($w)->findAll();
+					$module = ucfirst(strtolower($v['controller']));
+					$data[$module]['allow'] = 'RBAC_HAS_ROLE';
+					$data[$module]['actions'] = array();					
+					if (is_array($actions)) {
+						foreach ($actions as $a) {
+							$data[$module]['actions'][$a['action']]['allow'] = $a['allow'];
+							$data[$module]['actions'][$a['action']]['deny'] = $a['deny'];
+						}
+					}
+				}
+			}			
+			F ( $g['appname'] . '_act_cache', $data );
+		}
+		return true;
+	}
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Model/AdModel.class.php ---
@@ -0,0 +1,97 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: AdModel.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010 14:57:19
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 广告Model
+// +----------------------------------------------------------------------
+
+class AdModel extends Model {
+	
+	/**
+	 * 查询的后置方法，会在find()之后自动以引用方式调用
+	 */
+	protected function _after_find(&$result, $options = '') {
+		parent::_after_find ( $result, $options );
+		if (isset ( $result ['setting'] )) {
+			$result ['setting'] = @eval ( "return {$result ['setting']};" );			
+		}		
+	}
+	
+	/**
+	 * findAll 或者 select 之后自动调用的数据处理方法
+	 * @param unknown_type $resultSet
+	 */
+	protected function _after_select(&$resultSet, $options = '') {
+		parent::_after_select ( $resultSet, $options );
+		if (is_array ( $resultSet )) {
+			foreach ( $resultSet as $k => $v ) {
+				if (isset ( $resultSet [$k] ['setting'] )) {
+					$resultSet [$k] ['setting'] = @eval ( "return {$resultSet [$k] ['setting']};" );					
+				}				
+			}
+		}
+	}
+	
+	/**
+	 * add方法insert之前处理方法，会在insert之前自动以引用方式调用
+	 * @param unknown_type $data
+	 */
+	protected function _before_insert(&$data, $options) {
+		parent::_before_insert ( $data, $options );		
+		!empty($data ['setting']) && $data ['setting'] = var_export ( $data ['setting'], true );							
+		$data ['update_time'] = date('Y-m-d H:i:s');		
+		return true;
+	}
+	
+	/**
+	 * save方法update数据之前的处理方法，会在update数据之前自动以引用方式调用
+	 * @param unknown_type $data
+	 */
+	protected function _before_update(&$data, $options) {
+		parent::_before_update ( $data, $options );
+		return $this->_before_insert ( $data );
+	}
+	
+	/**
+	 * 缓存广告信息
+	 * @param int $aid
+	 * @param array $data
+	 */
+	public function cache($aid,$data = '') {
+		if ($data === null) { //删除缓存
+			F ( 'ad_' . $aid, null, ALL_CACHE_PATH . 'ads/' );
+			return true;
+		}		
+		$data = $this->find($aid);
+		if (is_array($data)) {
+			if ($data['aid'] == $aid) {
+				F ( 'ad_' . $aid, $data, ALL_CACHE_PATH . 'ads/' );
+				return true;
+			}
+		}
+		return false;
+	}
+	
+	/**
+	 * 缓存所有广告信息
+	 */
+	public function cacheAll() {
+		$data = $this->findAll();
+		if (is_array($data)) {
+			foreach ($data as $v) {
+				F('ad_'.$v['aid'],$v, ALL_CACHE_PATH . 'ads/' );
+			}
+			return true;
+		}
+		return false;
+	}
+	
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Model/AskModel.class.php ---
@@ -0,0 +1,31 @@
+<?php
+/**
+ * 问答 模型
+ *
+ */
+class AskModel extends Model 
+{
+	public function setting($data = array(),$catid = '',$parentid = '') {
+		$html = '';
+		if (empty ( $data ) && ( int ) $catid) {
+			$data = D ( 'Category' )->find ( $catid );		
+		} elseif ($parentid) {
+			$data['parentid'] = $parentid;
+		}
+		$data ['controller'] = 'fask';
+		//调用相应的widget
+		$html = W ( 'CategoryAskAdd', $data, true );
+		return $html;
+	}
+	
+	/**
+	 * 更新回答总数
+	 */
+	public function updateAnswerNum($ask_id)
+	{
+		$ask_answer_num = $this->where('parentid='.$ask_id)->count();
+		$data['ask_id'] = $ask_id;
+		$data['answernum'] = $ask_answer_num;
+		return $this->save($data);
+	}
+}
\ No newline at end of file

--- admin/Lib/Model/BrcodeModel.class.php ---
@@ -0,0 +1,22 @@
+<?php
+/**
+ * 二维码 模型
+ *
+ */
+class BrcodeModel extends Model 
+{
+	protected $_auto = array(
+		array('created', 'time', 1, 'function'),
+	);
+	
+	
+	protected function _after_select(&$resultSet,$options)
+	{
+		return $resultSet;
+	}
+	
+	//处理查询后logo地址
+	protected function _after_find(&$result,$options) {
+		return $result;
+	}
+}
\ No newline at end of file

--- admin/Lib/Model/CategoryModel.class.php ---
@@ -0,0 +1,1020 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: CategoryModel.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-13
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 栏目Model
+// +----------------------------------------------------------------------
+
+class CategoryModel extends RelationModel {
+
+	/**
+	 * 关联定义
+	 * @var unknown_type
+	 */
+	protected $_link = array (
+		'model' => array (
+			'mapping_type' => BELONGS_TO,
+			'class_name' => 'Model',
+			'foreign_key' => 'modelid',
+			'mapping_fields' => 'modelid,name'
+		)
+	);
+	/**
+	 * 栏目的子孙栏目
+	 * @var array
+	 */
+	protected $child_id_arr = array();
+
+	/**
+	 * 栏目的父辈栏目
+	 * @var array
+	 */
+	protected $parent_id_arr = array();
+
+	/**
+	 * 操作的栏目ID
+	 * @var unknown_type
+	 */
+	protected $_catid = '';
+
+	/**
+	 * 菜单数组
+	 * @var unknown_type
+	 */
+	protected $_data = array();
+
+	/**
+	 * 是否自动格式化数据（栏目URL）
+	 *
+	 * @var boolean
+	 */
+	public $auto_format = false;
+
+	protected $_topcatid = '';
+	/**
+	 * 验证数据有效性
+	 * 当$field 为空，$data为数组的时候验证所有字段的有效性
+	 * 当$field 不为空，则$field是要验证的字段名，$data 则是要验证的字段值
+	 * @param mixed $data
+	 */
+	public function validate($data, $field = '') {
+		if (empty($field) && is_array($data)) { 	//检查所有字段的有效性
+			$t = true;
+			foreach ($data as $k=>$v) {//进行递归验证
+				if (false === $this->validate($data,$k)) $t = false;
+			}
+			return $t;
+		} else if ($field == 'catdir') { //检查文件夹名称
+			if ($data['type'] == 'normal' || empty($data['type'])) {
+			    //检查是否与系统目录同名冲突
+    			$systemDir = C ('SYSTEM_DIR');
+    			if (in_array($data['catdir'],$systemDir)) {
+    				$this->error .= "栏目目录与系统目录冲突<br />";
+    				return false;
+    			}
+    			//不能以f开头，避免与控制器冲突
+    			if (strtolower ( substr ( $data['catdir'], 0, 1 ) ) == 'f' || !parent::regex($data['catdir'],'catdir')) {
+    				$this->error .= "栏目目录不能以f开头<br />";
+    				return false;
+    			}
+
+    			//正则验证
+    			if (!preg_match('/^[\w\-]+$/', $data['catdir'])) {
+    				$this->error .= "只能包含英文半角字母、数字、下划线以及减号<br />";
+    				return false;
+    			}
+
+    			//不能与前台的routes冲突
+    			$front_routes_conf = FANGFACMS_ROOT . '/front/Conf/routes.php';
+    			if (file_exists($front_routes_conf)) {
+    				$routes = include($front_routes_conf);
+    				if (isset($routes['catdir']) || isset($routes['catdir@'])) {
+    					$this->error .= "栏目目录与路由发生冲突<br />";
+    					return false;
+    				}
+    			}
+				//if (!empty($data['parentid'])) {
+				//	$parent_data = $this->field("`catdir`")->find($data['parentid']);
+				//	$catdir = $parent_data['catdir'] . $data['catdir'] .'/';
+				//}
+				$catdir = &$data['catdir'];
+				$category_data = $this->where ( "`catdir`='{$catdir}' " . ($data['catid'] ? ' AND catid!='.$data['catid'] : '') )->find ();
+				if (is_array ( $category_data )) {
+					$this->error .= "文件夹名称不符合要求或者已经就存在！<br />";
+					return false;
+				} else {
+					return true;
+				}
+			} else if($data['type'] == 'page') { //检查页面链接
+				$url = $data['url'] . C('URL_HTML_SUFFIX');
+				$category_data = $this->where ( "`url`='{$url}' " . ($data['catid'] ? ' AND catid!='.$data['catid'] : ''))->find ();
+				if (is_array ( $category_data )) {
+					$this->error .= "该名称的页面已经存在！<br />";
+					return false;
+				} else if (!preg_match('/^[A-Za-z0-9]+$/', $data['url'])) {
+					$this->error .= "链接格式不正确！<br />";
+					return false;
+				} else {
+					return true;
+				}
+			}
+			return true;
+		} else if ($field == 'type') {	//栏目类型
+			if (!in_array($data['type'],array('normal','page','link'))) {
+				$this->error .= '栏目类型错误！<br />';
+				return false;
+			}
+			return true;
+		} else if ($field == 'ishtml') {
+			;
+		} else if ($field == 'modelid') {	//检查模型是否存在切可用！
+			if ($data['modelid'] > 0) {
+				$_model = D ('Model');
+				$model_data = $_model->field("`modelid`,`name`")->find($data['modelid']);
+				if (!is_array($model_data)) {
+					$this->error .= '栏目模型不存在<br />';
+					return false;
+				}
+			}
+			return true;
+		} else if ($field == 'url') { //检查绑定的二级域名
+			return true;
+		}
+	}
+
+	/**
+	 * 查询的后置方法，会在find()之后自动以引用方式调用
+	 */
+	protected function _after_find(&$result, $options = '') {
+		parent::_after_find ( $result, $options );
+        
+        //mouselwh add 2012-12-25 获取所有model内容
+        $_model = D('Model');
+        $result['model'] = $_model->selectonesModel('modelid = '.$result['modelid']);
+        
+		if (isset ( $result ['setting'] )) {
+			$result ['setting'] = eval ( "return {$result ['setting']};" );
+		}
+		if (isset ( $result ['permissions'] )) {
+			$result ['permissions'] = eval ( "return {$result ['permissions']};" );
+		}
+		if ($this->auto_format && isset($result ['url'])) {
+		    if (substr(ltrim($result ['url'], ' \\/'), 0, 11) == 'HTTP_SERVER') {
+				$result ['url'] = str_replace('HTTP_SERVER', __ROOT__, $result ['url']);
+			} elseif (substr($result['url'],0,7) != 'http://') {
+				$result ['url'] = __ROOT__ . '/' . $result ['url'];
+			}
+		}
+	}
+
+	/**
+	 * findAll 或者 select 之后自动调用的数据处理方法
+	 *
+	 * @param array $resultSet
+	 */
+	protected function _after_select(&$resultSet, $options = '') {
+		parent::_after_select ( $resultSet, $options );
+		if (is_array ( $resultSet )) {
+			foreach ( $resultSet as $k => $v ) {
+				//添加栏目管理权限。根据菜单判断权限
+				if(isset($v['id'])){
+					$_menu = D("Menu");
+					$rolenames = $_menu->where("keyid='cat_".$v['id']."'")->getField("rolenames");
+					if(!empty($rolenames) && $_SESSION['userdata']['roles'][0] != 'developer' && !empty($_SESSION['userdata'])){
+						$rolenames = eval ( "return {$rolenames};" );
+						if (!in_array($_SESSION['userdata']['roles'][0],$rolenames)){
+							unset($resultSet[$k]);
+						}
+					}elseif(empty($rolenames)){
+						unset($resultSet[$k]);
+					}
+				}
+				if (isset ( $resultSet [$k] ['setting'] )) {
+					$resultSet [$k] ['setting'] = eval ( "return {$resultSet [$k] ['setting']};" );
+				}
+				if (isset ( $resultSet [$k] ['permissions'] )) {
+					$resultSet [$k] ['permissions'] = eval ( "return {$resultSet [$k] ['permissions']};" );
+				}
+				if ($this->auto_format && isset($resultSet [$k] ['url'])) {
+					if (substr(ltrim($resultSet[$k]['url'], ' \\/'), 0, 11) == 'HTTP_SERVER') {
+						$resultSet [$k] ['url'] = str_replace('HTTP_SERVER', __ROOT__, $resultSet[$k]['url']);
+					} elseif (substr($resultSet [$k]['url'],0,7) != 'http://') {
+				        $resultSet [$k] ['url'] = __ROOT__ . '/' . $resultSet  [$k] ['url'];
+				    }
+				}
+			}
+		}
+	}
+
+	/**
+	 * add方法insert之前处理方法，会在insert之前自动以引用方式调用
+	 *
+	 * @param array $data
+	 */
+	protected function _before_insert(&$data, $options) {
+		parent::_before_insert ( $data, $options );
+		//过滤与默认值设置
+		!empty($data ['name']) && $data ['name'] = htmlspecialchars ( trim ( $data ['name'] ) );
+		!empty($data ['thumb']) && $data ['thumb'] = htmlspecialchars ( trim ( $data ['thumb'] ) );
+		!empty($data ['catdir']) && $data ['catdir'] = htmlspecialchars ( trim ( $data ['catdir'] ) );
+		!empty($data ['url']) && $data ['url'] = htmlspecialchars ( trim ( $data ['url'] ) );
+		!empty($data ['template']) && $data ['template'] = htmlspecialchars ( trim ( $data ['template'] ) );
+		$data ['sort'] = (int)$data['sort']>0 ? intval($data['sort']) : 1;
+		!empty($data ['setting']) && $data ['setting'] = var_export ( $data ['setting'], true );
+		!empty($data ['permissions']) && $data ['permissions'] = var_export ( $data ['permissions'], true );
+		return true;
+	}
+	
+    /***
+	 * 插入后得到插入的catid，更新栏目的顶级栏目编号 topcatid 
+	 */
+	protected function _after_insert($data, $options) {
+		$this->gettopcatid($data['catid'], $data['parentid']);
+		$in['topcatid'] = $this->_topcatid;
+		$in['catid'] = $data['catid'];
+        //print_r($in);exit;
+		parent::query ("UPDATE `".C("DB_PREFIX")."category` SET `topcatid`='".$in['topcatid']."' WHERE catid='".$in['catid']."' ");
+      
+	}
+	/**
+	 * save方法update数据之前的处理方法，会在update数据之前自动以引用方式调用
+	 * @param array $data
+	 */
+	protected function _before_update(&$data, $options) {
+		parent::_before_update ( $data, $options );
+		$this->gettopcatid($data['catid'], $data['parentid']);
+		$data['topcatid'] = $this->_topcatid;
+		return $this->_before_insert ( $data );
+	}
+
+
+	/**
+	 * 添加栏目
+	 * @param unknown_type $data
+	 */
+	public function add($data = array()) {
+		if (! is_array ( $data ) || ($data ['type'] == 'normal' && ! $data ['modelid'])) {
+			$this->error .= '无效数据！<br />';
+			return false;
+		}
+		$data['url'] = $this->getUrl($data);
+		if($data ['cattype'] == 'cla'){
+			return $this->normalAdd($data);//添加分类
+		}
+        
+
+        
+		if ($this->{$data ['type'] . 'Add'} ( $data )) {  //添加菜单，更新缓存
+			$data = $this->_data;  //获取现在的栏目数据
+//			dump($data);
+			$_menu = D ( 'Menu' );
+			//查找父级菜单，确定要添加的菜单信息
+            
+            //mouselwh 2012-12-25 副表挂靠上级ID
+            if($data['controller'] == 'fsidetable'){
+                $menu_parentid = 10; //副表发布管理，固定ID
+            }else{
+                $menu_parentid = 4; //内容发布管理，固定ID
+            }
+			
+			if ($data ['parentid'] > 0) {
+				$menu_parent_data = $_menu->field ( "`menuid`" )->where ( "`keyid`='cat_" . $data ['parentid'] . "'" )->find ();
+				if ($menu_parent_data ['menuid']) {
+					$menu_parentid = $menu_parent_data ['menuid'];
+				}
+			}
+            
+
+            
+			//添加菜单
+			if ($data ['type'] == 'page') {
+				$data['controller'] = 'fpage';
+			}
+
+            $url = ($data['type'] == 'link' ? '#' : "?m={$data ['controller']}&a=manage&catid={$this->_catid}");
+
+			
+			$menu_data = array (
+				'parentid' => $menu_parentid,
+				'name' => $data ['name'],
+                'ename' => $data ['ename'],
+				'url' => $url,
+				'isshow' => '1',
+				'sort' => '1',
+				'isopen' => '0',
+				'keyid' => 'cat_' . $this->_catid ,
+				'rolenames' => array ( 0 => 'administrator',),
+			);
+			if (false === $_menu->add ( $menu_data )) {
+				$this->error .= '新增栏目内容管理菜单出错，栏目添加事务失败！<br />';
+				$this->rollback ();
+				return false;
+			}
+//			if ($data ['ishtml']) { //创建物理文件夹
+//				$dirpath = HTML_PATH . $data['catdir'];
+//				mk_dir($dirpath);
+//			}
+			//更新栏目缓存
+//			dump($catid);dump($data);
+
+			//校正URL
+			if ($data['type'] == 'normal' && strpos('http://', $data['url']) === false) {
+				$data['url'] = __ROOT__ . '/' . $data['url'];
+			}
+			$this->cache($this->_catid,$data);
+			if ($data['parentid']) { //更新所有父栏目缓存
+				$parent_id_arr = $this->getParentIdsArr($this->_catid,$data);
+				if (is_array($parent_id_arr)) {
+					foreach ($parent_id_arr as $v) {
+						$this->cache($v['catid']);
+					}
+				}
+			}
+			//更新菜单缓存
+			D('Menu')->cacheAll();
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	/**
+	 * 添加常规栏目，内部调用
+	 * @param unknown_type $data
+	 */
+	protected function normalAdd($data = array()) {
+		if (! $this->validate ( $data )) {
+			return false;
+		}
+		//根据父类信息，修改栏目自身的信息，包括	arrparentid,catdir,url
+//		if ($data ['parentid']) { //如果有父类，则先查找出父类的信息
+//			$parent_data = $this->find ( $data ['parentid'] );
+//		}
+		//controller
+		$_model = D ( 'Model' );
+		$model_data = $_model->relation ( true )->find ( $data ['modelid'] );
+		if (! is_array ( $model_data )) {
+			$this->error .= '模型不存在！<br />';
+			$result = false;
+		} else {
+			$data ['controller'] = $model_data ['module'] ['controller'];
+		}
+		//动态栏目只有一级虚拟的文件夹，没有子文件夹
+//		$controller = A ( ucfirst ( $data ['controller'] ), 'front' );
+		//seo信息
+		empty($data['seotitle']) && $data['seotitle'] = $data['name'] . ' - {stitle}';
+		empty($data['seokeywords']) && $data['seokeywords'] = $data['name'];
+		empty($data['seodescription']) && $data['seodescription'] = $data['description'] ? $data['description'] : $data['name'];
+		//导图处理
+		if (!empty($_FILES['thumb_img']['name'])) {
+			import ( 'ORG.Net.UploadFile' );
+			//允许上传类型
+			$fileext = explode ( '|', C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+			//允许上传大小
+			$allowSize = C ( 'UPLOAD_MAXSIZE' );
+			$allowSize = intval ( $allowSize ) * 1024; //KB
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize;
+			$upload->allowExts = $fileext;
+			$upload->savePath = C ( 'UPLOAD_DIR' ) .'images/';
+			if(!$upload->upload()) { // 上传错误提示错误信息
+				$this->error .= $upload->getErrorMsg() . '<br />';
+				return false;
+			}else{ // 上传成功获取上传文件信息
+				$thumbinfo =  $upload->getUploadFileInfo();
+				$data['thumb'] = 'images/' . $thumbinfo[0]['savename'];
+			 }
+		}
+		unset($data['catid']);
+		//添加记录
+		$catid = parent::add ( $data );
+		if (false !== $catid) {
+			$this->_catid = $catid;
+			$this->_data = $data;
+			return $catid;
+		}
+		$this->error .= '新增栏目记录失败！<br />';
+		return false;
+	}
+
+	/**
+	 * 添加单页栏目，内部调用
+	 * @param unknown_type $data
+	 */
+	protected function pageAdd($data = array()) {
+		if (! $this->validate ( $data )) {
+			return false;
+		}
+		//根据父类信息，修改栏目自身的信息，包括	arrparentid,catdir,url
+//		if ($data ['parentid']) { //如果有父类，则先查找出父类的信息
+//			$parent_data = $this->find ( $data ['parentid'] );
+//			$data['catdir'] = $parent_data['catdir'];
+//		}
+		$data ['controller'] = 'fpage';
+		$data ['type'] = 'page';
+		$data ['ishtml'] = '1';
+		//seo信息
+		//seo信息
+		empty($data['seotitle']) && $data['seotitle'] = $data['name'] . ' - {stitle}';
+		empty($data['seokeywords']) && $data['seokeywords'] = $data['name'];
+		empty($data['seodescription']) && $data['seodescription'] = $data['description'] ? $data['description'] : $data['name'];
+		//导图处理
+		if (!empty($_FILES['thumb_img']['name'])) {
+			import ( 'ORG.Net.UploadFile' );
+			//允许上传类型
+			$fileext = explode ( '|', C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+			//允许上传大小
+			$allowSize = C ( 'UPLOAD_MAXSIZE' );
+			$allowSize = intval ( $allowSize ) * 1024; //KB
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize;
+			$upload->allowExts = $fileext;
+			$upload->savePath = C ( 'UPLOAD_DIR' ) .'images/';
+			if(!$upload->upload()) { // 上传错误提示错误信息
+				$this->error .= $upload->getErrorMsg() . '<br />';
+				return false;
+			}else{ // 上传成功获取上传文件信息
+				$thumbinfo =  $upload->getUploadFileInfo();
+				$data['thumb'] = 'images/' . $thumbinfo[0]['savename'];
+			 }
+		}
+
+		//添加记录
+		$catid = parent::add ( $data );
+		if (false !== $catid) {
+			$this->_catid = $catid;
+			$this->_data = $data;
+			return $catid;
+		}
+		$this->error .= '新增栏目记录失败！<br />';
+		return false;
+	}
+
+	/**
+	 * 添加外链栏目，内部调用
+	 * @param unknown_type $data
+	 */
+	protected function linkAdd($data = array()) {
+		$data ['type'] = 'link';
+		$data ['ishtml'] = '0';
+		//导图处理
+		if (!empty($_FILES['thumb_img']['name'])) {
+			import ( 'ORG.Net.UploadFile' );
+			//允许上传类型
+			$fileext = explode ( '|', C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+			//允许上传大小
+			$allowSize = C ( 'UPLOAD_MAXSIZE' );
+			$allowSize = intval ( $allowSize ) * 1024; //KB
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize;
+			$upload->allowExts = $fileext;
+			$upload->savePath = C ( 'UPLOAD_DIR' ) .'images/';
+			if(!$upload->upload()) { // 上传错误提示错误信息
+				$this->error .= $upload->getErrorMsg() . '<br />';
+				return false;
+			}else{ // 上传成功获取上传文件信息
+				$thumbinfo =  $upload->getUploadFileInfo();
+				$data['thumb'] = 'images/' . $thumbinfo[0]['savename'];
+			 }
+		}
+		//添加记录
+		$catid = parent::add ( $data );
+		if (false !== $catid) {
+			$this->_catid = $catid;
+			$this->_data = $data;
+			return $catid;
+		}
+		$this->error .= '新增栏目记录失败！<br />';
+		return false;
+	}
+
+
+	/**
+	 * 更新栏目数据
+	 * @param unknown_type $data
+	 */
+	public function save($data = array()) {
+		if (! $data ['catid']) {
+			$this->error .= '未指定要更新的栏目！';
+			return false;
+		}
+		//检查数据有效性
+//        dump($data);
+		$category_data = $this->find ( $data ['catid'] );
+		if (!empty($_FILES['thumb_img']['name'])) { //处理导图上传
+			import ( 'ORG.Net.UploadFile' );
+			//允许上传类型
+			$fileext = explode ( '|', C ( 'UPLOAD_IMAGES_ALLOWEXT' ) );
+			//允许上传大小
+			$allowSize = C ( 'UPLOAD_MAXSIZE' );
+			$allowSize = intval ( $allowSize ) * 1024; //KB
+			$upload = get_instance_of ( 'UploadFile' ); // 实例化上传类
+			$upload->maxSize = $allowSize;
+			$upload->allowExts = $fileext;
+			$upload->savePath = C ( 'UPLOAD_DIR' ) .'images/';
+			if(!$upload->upload()) { // 上传错误提示错误信息
+				$this->error .= $upload->getErrorMsg() . '<br />';
+				return false;
+			}else{ // 上传成功获取上传文件信息
+				$thumbinfo =  $upload->getUploadFileInfo();
+				$data['thumb'] = 'images/' . $thumbinfo[0]['savename'];
+			 }
+		}
+		//修改部分字段信息
+		isset($data ['name']) && $category_data ['name'] = $data ['name'];
+        isset($data ['ename']) && $category_data ['ename'] = $data ['ename'];
+		isset($data ['thumb']) && $category_data ['thumb'] = $data ['thumb'];
+		isset($data ['parentid']) && $category_data ['parentid'] = $data ['parentid'];
+		isset($data ['description']) && $category_data ['description'] = $data ['description'];
+		isset($data ['seotitle']) && $category_data ['seotitle'] = trim($data ['seotitle']);
+		isset($data ['seokeywords']) && $category_data ['seokeywords'] = $data ['seokeywords'];
+		isset($data ['seodescription']) && $category_data ['seodescription'] = $data ['seodescription'];
+		isset($data ['template']) && $category_data ['template'] = $data ['template'];
+		isset($data ['permissions']) && $category_data ['permissions'] = $data ['permissions'];
+		isset($data ['setting']) && $category_data ['setting'] = $data ['setting'];
+		isset($data ['sort']) && $category_data ['sort'] = $data ['sort'];
+		$category_data ['islock'] = isset($data ['islock']) ? '1' : '0';
+		isset($data ['catdir']) && $category_data ['catdir'] = $data ['catdir'];
+		if ($category_data['type'] == 'normal' && $data['url']) {
+            $category_data ['url'] = $this->getUrl($data);
+        } else {
+            $data ['url'] && $category_data ['url'] = $data ['url'];
+        }
+		//更新栏目
+		if (false === parent::save($category_data)) {
+			return false;
+		}
+		//更新菜单
+		$_menu = D ('Menu');
+		$menu_data = $_menu->where(array("keyid"=>'cat_'.$category_data['catid']))->find();
+		$menu_data['name'] = $category_data['name'];
+		$_menu->save($menu_data);
+		$_menu->cache($menu_data['menuid'],$menu_data);
+		//更新栏目缓存
+
+		//校正URL
+		if ($category_data['type'] == 'normal' && strpos('http://', $category_data['url']) === false) {
+			$category_data['url'] = __ROOT__ . '/' . $category_data['url'];
+		}
+		$this->cache($category_data['catid'],$category_data);
+		return true;
+	}
+
+	/**
+	 * 删除目录，目录下面所有的记录信息业将删除
+	 * @param $catid
+	 */
+	public function delete($catid) {
+		$catid = intval ( $catid );
+		$category_data = F ( 'category_'.$catid );
+		if (is_array ( $category_data ) ) {
+			//子栏目
+			$child_id_arr = $category_data['childrenidarr_self'];
+			import ( 'ORG.Io.Dir' );
+			$_dir = get_instance_of ( 'Dir' );
+			//系统目录
+			$systemDir = C ('SYSTEM_DIR');
+			foreach ($child_id_arr as $v) {
+				$v_category_data = array();
+				$v_category_data = F ('category_'.$v);
+				//删除数据库记录
+				parent::delete ( $v_category_data['catid'] );
+				//删除栏目下的资料
+				if ($v_category_data['type']=="page") {
+					D("page") ->where("catid=".$v_category_data['catid'] )->delete();
+				}elseif ($v_category_data['type']=="normal" && in_array($v_category_data['modelid'],array(1,2,3,4,5))){
+					D("Content") ->execute ("delete from ".C("DB_PREFIX")."content where catid=".$v_category_data['catid']);
+				}
+				elseif ($v_category_data['modelid'] == "8" && $v_category_data['type']=="normal"){//留言删除
+					D("Guestbook") ->where("catid=".$v_category_data['catid'] )->delete();
+				}
+				elseif ($v_category_data['modelid'] == "13" && $v_category_data['type']=="normal"){//活动报名
+					D("Activity") ->where("catid=".$v_category_data['catid'] )->delete();
+				}
+				//
+				//删除物理目录及下面的实体静态文件
+				if ($v_category_data['type'] == 'normal') {  //内部栏目才需要删除实体目录
+				    if ($v_category_data['ishtml'] && !in_array($v_category_data ['catdir'],$systemDir) && !empty($v_category_data['catdir'])) {
+    					$catdir = HTML_PATH . $v_category_data ['catdir'];
+    					if (is_dir ( $catdir )) {
+    						$_dir->delDir ( $catdir );
+    					}
+    				}
+				} else {
+				    if (file_exists(FANGFACMS_ROOT . $v_category_data['url'])) {
+        				@unlink(FANGFACMS_ROOT . $v_category_data['url']);
+        			}
+				}
+				//删除菜单，更新菜单缓存
+				$_menu = D ( 'Menu' );
+				$_menu->where ( "`keyid`='cat_{$v_category_data['catid']}'" )->delete ();
+				$_menu->cacheAll();
+				//删除缓存
+				F('category_'.$v_category_data['catid'],NULL);
+				if ($v_category_data['parentid']>0) { //更新所有父栏目缓存
+					$parent_id_arr = $this->getParentIdsArr($v_category_data['catid'], $v_category_data);
+					if (is_array($parent_id_arr)) {
+						foreach ($parent_id_arr as $v) {
+							$this->cache($v['catid']);
+						}
+					}
+				}
+			}
+			return true;
+		}
+		return false;
+	}
+
+	/**
+	 * 删除栏目导图
+	 * @param int $catid
+	 */
+	public function delete_thumb($catid) {
+		$catid = intval ( $catid );
+		$category_data = $this->find ( $catid );
+		if ( is_array ( $category_data )) {
+			$thumb = $category_data ['thumb'];
+			$thumb = C ( 'UPLOAD_DIR' ) .  $thumb;
+			//更新记录
+			$category_data['thumb'] = '';
+			if (false !== parent::save($category_data)) {
+				//删除实体
+				if (file_exists ( $thumb )) {
+					@unlink ( $thumb );
+				}
+				//更新栏目缓存
+				$this->cache($catid);
+				return true;
+			}
+		}
+		return false;
+	}
+	
+	/*
+	*得到顶级栏目编号
+	*@param int $catid 分类ID
+	*@param int $parentid 父级栏目编号
+	*/
+	protected function gettopcatid($catid,$parentid){
+		$parentid = empty($parentid) ? 0 : $parentid;
+		if ($parentid != 0) {
+			$category = $this->where("catid=".$parentid)->find ();
+			if ($category['parentid'] == 0) {
+				$this->_topcatid = $category['catid'];
+			}else {
+				$this->gettopcatid($category['catid'],$category['parentid']);
+			}
+		}else {
+			$this->_topcatid = $catid;
+		}
+	}
+	
+	/*
+	*设置topcatid字段值
+	*@param int $catid 分类ID
+	*@param int $topcatid 需要绑定的栏目ID
+	*/
+	public function settopcatid($catid,$topcatid){
+		if(is_array($catid)){
+			foreach($catid as $k){
+				$category_data = $this->find ( $k );
+				if ( is_array ( $category_data )){
+					$o_tid = $category_data['topcatid'];
+					if($o_tid){
+						$o_tid_array = split(',',$o_tid);
+						if(!in_array($topcatid,$o_tid_array)){
+							$category_data['topcatid'] = ','.$topcatid;
+						}
+					}else{
+						$category_data['topcatid']=$topcatid;
+					}
+					if (false !== parent::save($category_data)){
+					//更新栏目缓存
+					$this->cache($k);
+					}
+				}
+			}
+			return true;
+		}else{
+			$catid = intval ( $catid );
+			if(!is_array($topcatid)) return false;
+			//$topcatid = intval ( $topcatid );
+			$category_data = $this->find ( $catid );
+			if ( is_array ( $category_data )) {
+				$tid = implode(',',$topcatid);
+				if(empty($topcatid)) $tid = '';
+				$category_data['topcatid'] =  $tid;
+				if (false !== parent::save($category_data)){
+					//更新栏目缓存
+					$this->cache($catid);
+					return true;
+				}
+			}
+			return false;
+		}
+	}
+	
+	
+
+	/**
+	 * 根据数组里面的信息组合出栏目的url地址
+	 *
+	 * $option = array(
+	 * 	'type' => 'normal'  // or 'page'   or  'link'
+	 * 	'parentid' => '',
+	 * 	'catdir' => '',
+	 * 	'catid' => ''
+	 * )
+	 */
+	public function getUrl($option) {
+	    $url = '';
+	    switch ($option['type']) {
+	        case 'normal':
+    			if ($option ['parentid'] > 0) {
+    				$parent_data = $this->find ( $option ['parentid'] );
+    				if (strpos('http://',$parent_data ['url'])) { // 二级域名
+    					$url = $parent_data['url']  . '/' . $option['catdir'] . '/';
+    				} else {
+    				    $url = $option ['catdir'] . '/';
+    				}
+    			} else {
+    			    $url = $option ['catdir'] . '/';
+    			}
+	            break;
+	        case 'page':
+    			$url = $option ['url'] . C ( 'URL_HTML_SUFFIX' );
+	            break;
+	        case 'link':
+	            $url = $option ['url'];
+	            break;
+	    }
+	    return $url;
+	}
+
+
+
+
+
+	/**
+	 * 更新栏目缓存
+	 *
+	 * @param int $catid
+	 */
+	public function cache($catid, $data) {
+		if (empty ( $data ) || !is_array ( $data )) {
+		    $this->auto_format = true;
+			$data = $this->find ( $catid );
+		}
+		$data ['catid'] = $catid;
+		//本栏目的父类、子类的array和ids表现形式
+		$data ['parentidarr'] = $this->getParentIdsArr ( $catid, $data );
+		$data ['childrenidarr'] = $this->getChildIdsArr ( $catid );
+		$data ['parentids'] = ! empty ( $data ['parentidarr'] ) ? implode ( ',', $data ['parentidarr'] ) : '';
+		$data ['childrenids'] = ! empty ( $data ['childrenidarr'] ) ? implode ( ',', $data ['childrenidarr'] ) : '';
+		//本栏目的父类、子类包括本身的array和ids表现形式
+		//本栏目的父类、子类包括本身的array和ids表现形式
+		$data ['parentidarr_self'] = $data ['parentidarr'];
+		$data ['childrenidarr_self'] = $data ['childrenidarr'];
+		array_push($data ['parentidarr_self'], $catid);
+		array_unshift($data ['childrenidarr_self'],$catid);
+		$data ['parentids_self'] = implode ( ',', $data ['parentidarr_self'] );
+		$data ['childrenids_self'] = implode ( ',', $data ['childrenidarr_self'] );
+
+		//格式化链接栏目url
+		if ($data['type']=='link' && substr(ltrim($data['url'], ' \\/'), 0, 11) == 'HTTP_SERVER') {
+			$data['url'] = str_replace('HTTP_SERVER', __ROOT__, $data['url']);
+		}
+
+		//缓存文件名  category_{$catid}.php
+		return F ( 'category_' . $catid, $data );
+	}
+
+	/**
+	 * 更新所有栏目缓存信息
+	 */
+	public function cacheAll() {
+	    $this->auto_format = true;
+		$data = $this->findAll ();
+		if (is_array ( $data )) {
+			foreach ( $data as $v ) {
+				$this->cache ( $v ['catid'], $v );
+			}
+		}
+		return true;
+	}
+
+
+	/**
+     * 获取指定栏目的所有子孙栏目IDS
+	 * @param int $catid
+	 */
+	public function getParentIdsArr($catid, $data) {
+		if (!empty($this->parent_id_arr)) {
+			$this->parent_id_arr = array();
+		}
+		return $this->getParentIdArr($catid, $data);
+	}
+
+	/**
+	 * 递归获取指定栏目的父辈栏目ID数组
+	 * @param unknown_type $catid
+	 * @param unknown_type $data
+	 */
+	private function getParentIdArr($catid, $data) {
+		$ids = array ();
+		$catid = intval ( $catid );
+		if (empty ( $data )) {
+			$data = $this->field ( "`catid`,`parentid`" )->find ( $catid );
+		}
+		$data['parentid'] >0 && $parend_data = $this->field ( "`catid`,`parentid`" )->where ( "`catid`='{$data['parentid']}'" )->findAll ();
+		if (is_array($parend_data)) {
+			foreach ($parend_data as $v) {
+				array_unshift ($this->parent_id_arr, $v['catid']);
+				$this->getParentIdArr($v['catid'],$v);
+			}
+		}
+		return $this->parent_id_arr;
+	}
+
+	/**
+	 * 获取指定栏目的所有子孙栏目IDS
+	 * @param int $catid
+	 */
+	public function getChildIdsArr($catid) {
+		if (!empty($this->child_id_arr)) {
+			$this->child_id_arr = array();
+		}
+		return $this->getChildrenIdArr($catid);
+	}
+	/**
+	 * 递归获取指定栏目的所有子孙栏目IDS
+	 * @param int $catid
+	 * @return array
+	 */
+	private function getChildrenIdArr($catid) {
+		$ids = array ();
+		$catid = intval ( $catid );
+		$catid >0 && $data = $this->field ( "`catid`,`parentid`" )->where ( "`parentid`='{$catid}'" )->findAll ();
+		if (is_array($data)) {
+			foreach ($data as $v) {
+				$this->child_id_arr[] = $v['catid'];
+				$this->getChildrenIdArr($v['catid']);
+			}
+		}
+		return $this->child_id_arr;
+	}
+	
+	/**
+	 * 递归获取指定栏目的所有子分类IDS
+	 * @param int $catid
+	 * @return array
+	 */
+	private function getClaChildrenIdArr($catid,$cattype='cla') {
+		$ids = array ();
+		$catid = intval ( $catid );
+		$catid >0 && $data = $this->field ( "`catid`,`parentid`" )->where ( "`parentid`='{$catid}' AND `cattype`='{$cattype}'" )->findAll ();
+		if (is_array($data)) {
+			foreach ($data as $v) {
+				$this->child_id_arr[] = $v['catid'];
+				$this->getClaChildrenIdArr($v['catid'],$cattype);
+			}
+		}
+		return $this->child_id_arr;
+	}
+
+
+	/**
+	 * 从缓存的数据获取$catid的所有同类模型的栏目
+	 * @param unknown_type $catid
+	 */
+	public function getSameCategorys($catid) {
+		$data = F ('category_'.$catid);
+		$sames = $this->field("`catid`,`modelid`")->where("`modelid`='{$data['modelid']}' AND `cattype`='cat'")->findAll();
+		$result = array();
+		foreach ($sames as $v) {
+			$result[] = F ('category_'.$v['catid']);
+		}
+		return $result;
+	}
+	
+	/**
+	 * $topcatid 分类的绑定目录ID，根据此获取顶级分类的ID
+	 * 从缓存的数据获取顶级分类数据
+	 * @param unknown_type $topcatid
+	 */
+	public function getTopclassify($topcatid) {
+		$categorys_all = D('Category')->field("`catid`,`topcatid`")->where("`parentid`=0 AND `cattype`='cla'")->findAll();
+		if(!empty($categorys_all)){
+			$array = array();
+			$cid_array = array();
+			foreach($categorys_all as $k=>$v){
+				if($v['topcatid']){
+					$array = split(',',$v['topcatid']);
+					if(in_array($topcatid,$array)){
+						$cid_array[] = $v['catid']; 
+					}
+				}
+			}
+		}else{
+			return false;
+		}
+		$categorys = array();
+		if(!empty($cid_array)){
+			foreach($cid_array as $k){
+				$categorys[] = D('Category')->field("`catid`")->where("`catid`={$k} AND `parentid`=0 AND `cattype`='cla'")->find();
+			}
+		}
+		
+		$data = array();
+		if(is_array($categorys) && !empty($categorys)){
+			foreach($categorys as $v){
+				$data[] = F ('category_'.$v['catid']);
+			}
+			
+			//$sames = $this->field("`catid`,`modelid`")->where("`modelid`='{$data['modelid']}' AND `cattype`='cla'")->findAll();
+			//$sames = $this->getClaChildrenIdArr($catid);
+			//$result = F ('category_'.$v);
+		}
+		return $data;
+		
+	}
+
+	/**
+	 * 获取指定栏目的子栏目树，不包括栏目本身
+	 * return array(
+	 * 	array(),  //child  1
+	 * 	array(),  //child  2
+	 * 	array(
+	 * 	  'catid'=>'',
+	 * 	  'modelid'=>'',
+	 * 	  'name'=>'',
+	 * 		...
+	 * 	  'child' = array(),
+	 *
+	 * 	),   //child 3
+	 * );
+	 *
+	 * @param int $parentid  栏目ID
+	 * @return array $data
+	 */
+	public function getTreeByParentId($parentid) {
+		//要返回的数据
+        $data = array();
+        if ($parentid > 0) {
+            $data[0] = F ('category_'.$parentid);
+            if (!empty($data[0]['childrenidarr'])) {
+                foreach ($data[0]['childrenidarr'] as $v) {
+                    $data[] = F ('category_'.$v);
+                }
+            }
+            $parent_id = $data[0]['parentid'];
+            $data = list_sort_by($data,'sort','asc');
+            $data = array_to_tree($data,'catid','parentid', 'child', false, $parent_id);
+            $return = $data[0];
+        } else {
+            $categorys = $this->field("`catid`")->order("`sort` ASC")->findAll();
+            if (is_array($categorys)) {
+                $data = array();
+                foreach ($categorys as $cat) {
+                    $data[] = F('category_'.$cat['catid']);
+                }
+            }
+            $return = array_to_tree($data,'catid','parentid');
+        }
+        return $return;
+	}
+    
+    /**
+     * 
+     * @name获取对应模型的栏目ID
+     * @return catidArray   
+     * 
+     */
+    
+    public function getCatidUseModelid($modelid){
+        
+        $data = array();
+        if(isset($modelid)){
+            if(is_array($modelid)){
+                $modelidstr = implode(',',$modelid);
+                $data = $this->where('modelid in ('.$modelidstr.')')->select();
+            }else{
+                $data = $this->where('modelid = '.$modelid)->select();
+            }
+            return $data;
+        }else{
+            return false;
+        }
+        
+
+    } 
+      
+
+}
+?>
\ No newline at end of file

--- admin/Lib/Model/CollectModel.class.php ---
@@ -0,0 +1,50 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: Fcollect.class.php
+// +----------------------------------------------------------------------
+// | Date: 2011-11-02
+// +----------------------------------------------------------------------
+// | Author: mark <376727439@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 信息采集管理
+// +----------------------------------------------------------------------
+
+class CollectModel extends Model {
+
+	protected function _before_insert(&$data){
+		$data['replace'] = var_export ( $data ['replace'], true );
+		$data['create_time'] = time();
+	}
+	protected function _after_select(&$data){
+		$_category = D("Category");
+		
+		foreach ($data as $k=>$t){
+			$data[$k]['catid_name'] = $_category->where("catid=".$t['into_catid'])->getField("name");
+			if (!empty($t['replace'])) {
+				$data[$k]['replace'] = eval("return {$t[replace]};");
+			}
+			$data[$k]['create_time'] = date("Y-m-d",$t['create_time']);
+			if(!empty($t['update_time']) && $t['update_time'] != 0){
+				$data[$k]['update_time'] = date("Y-m-d",$t['update_time']);
+			}else {
+				$data[$k]['update_time'] = "未采集";
+			}
+		}
+	}
+	protected function _after_find(&$data){
+		$_category = D("Category");
+		$data['catid_name'] = $_category->where("catid=".$data['into_catid'])->getField("name");
+		if (!empty($data['replace'])) {
+			$data['replace'] = eval("return {$data[replace]};");
+		}
+		$data['create_time'] = date("Y-m-d",$data['create_time']);
+		if(!empty($data['update_time']) && $data['update_time'] != 0){
+			$data['update_time'] = date("Y-m-d",$data['update_time']);
+		}
+	}
+	
+
+}
+?>
\ No newline at end of file

--- admin/Lib/Model/CommentModel.class.php ---
@@ -0,0 +1,36 @@
+<?php
+/**
+ * 评论板模块
+ */
+class CommentModel extends Model 
+{
+	public function _facade(&$data)
+	{
+		$data['create_time']   = strtotime($data['create_time']);
+		$data['replytime']   = strtotime($data['replytime']);
+		return $data;
+	}
+	
+	public function setting($data = array(),$catid = '', $parentid = '') {
+		$html = '';
+		if (empty ( $data ) && ( int ) $catid) {
+			$data = D ( 'Category' )->find ( $catid );		
+		} elseif ($parentid) {
+			$data['parentid'] = $parentid;
+		}
+		$data ['controller'] = 'fcomment';
+		//调用相应的widget
+		$html = W ( 'CategoryCommentAdd', $data, true );
+		return $html;
+//		$_model = D ( 'Model' );
+//		$module_data = $_model->relation ( true )->find ( $data ['modelid'] );
+//		if (is_array ( $module_data )) {
+//			$data ['controller'] = ucfirst ( $module_data ['module'] ['controller'] );
+//			//调用相应的widget
+//			$html = W ( 'CategoryGuestbookAdd', $data, true );
+//			return $html;
+//		} else {
+//			return false;
+//		}
+	}
+}
\ No newline at end of file

--- admin/Lib/Model/ContentModel.class.php ---
@@ -0,0 +1,579 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: TagModel.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-7
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 内容管理Model
+// +----------------------------------------------------------------------
+
+class ContentModel extends Model{
+
+	/**
+	 * 数据表名
+	 * @var string
+	 */
+	protected $tableName = 'content';
+
+	/**
+	 * 分类ID
+	 * @var int
+	 */
+	public $_catid = '';
+
+	/**
+	 * 模型ID
+	 * @var int
+	 */
+	public $_modelid = '';
+
+	/**
+	 * 模型的字段信息数组
+	 * @var array
+	 */
+	public $_field_data = array();
+
+
+	/**
+	 * 是否自动格式化数据
+	 *
+	 * @var unknown_type
+	 */
+	public $auto_format = false;
+	
+	
+
+	/**
+	 * 查询的后置方法，会在find()之后自动以引用方式调用
+	 */
+	protected function _after_find(&$result, $options = '') {
+		parent::_after_find ( $result, $options );
+		if ($this->auto_format) {
+			if (method_exists($this,'format')) {
+				$t = $this->format(array($result));
+				$result = $t [0];
+			}			
+		}
+		if (!empty($result['attr'])) {
+			$result['attr'] = explode(',', $result['attr']);
+		}
+	}
+
+	/**
+	 * findAll 或者 select 之后自动调用的数据处理方法
+	 * @param ref $resultSet
+	 */
+	protected function _after_select(&$resultSet, $options = '') {
+		parent::_after_select ( $resultSet, $options );
+		if ($this->auto_format) {
+			if (method_exists($this,'format')) {
+				 $resultSet = $this->format($resultSet);
+			}
+		}
+		foreach ($resultSet as $k=>$v) {
+			!empty($v['attr']) && $resultSet [$k]['attr'] = explode(',', $v['attr']);
+		}
+	}
+
+
+	/**
+	 * 初始化栏目模型信息，模型字段信息
+	 * @param int $catid
+	 */
+	public function init($catid) {
+		if (!$catid) return false;
+		$this->_catid = $catid;
+		$category_data = F ('category_'.$catid);
+		$modelid = $category_data['modelid'];
+		$this->_modelid = $modelid;
+		if (!$modelid) {
+			$this->error .= "ID为{$modelid}的模型缓存信息被破坏，请更新模型缓存！";
+			return false;
+		}
+		// 调用各字段类处理提交的内容
+		$fieldArr = D("ModelField")->field("`fieldid`")->where(" `status`='1' AND `modelid`='{$modelid}'")->findAll();
+		$field = array();  // 栏目模型所有字段的信息
+		foreach ($fieldArr as $k=>$v) {
+			$value = F ('modelField_'.$v['fieldid']);
+			if (is_array($value)) {  //组合成 array($formtype1=>'',$formtype2=>'',$formtype3=>'',)的形式
+				$field[$value['field']] = $value;
+			}
+		}
+		$this->_field_data = $field;
+	}
+
+
+
+	/**
+	 * 添加内容的时候进行数据验证
+	 * @param array $data  //提交的数据
+	 * @param int $catid  //栏目ID
+	 * @param string $field //验证的字段，为空则验证所有字段
+	 */
+	public function validate($data,$catid, $field = '') {
+		if ($this->_catid!=$catid || !is_array($this->_field_data)) {
+			$this->init($catid);
+		}
+		$field_data = $this->_field_data;
+		$return = true;
+		if (is_array($data)) {  //验证各个字段
+			foreach ($data as $k=>$v) {
+				if (!isset($field_data[$k])) continue;
+				if ($field_data[$k]['required']) {   //必填项
+					if (empty($v) && $v != '0') {
+						if (!empty($field_data[$k]['errortips'])) {
+							$this->error .= $field_data[$k]['errortips'] . "<br />";
+						} else {
+							$this->error .= $field_data[$k]['name'] . "必填<br />";
+						}
+						$return = false;
+					} else { // 验证必填项的 长度 minlength  maxlength
+						if ($field_data[$k]['minlength'] && (mb_strlen($v,'utf-8') < $field_data[$k]['minlength']) ) {
+							if (!empty($field_data[$v]['errortips'])) {  //minlength
+								$this->error .= $field_data[$v]['errortips'] . "<br />";
+							} else {
+								$this->error .= $field_data[$k]['name'] . "长度不能小于{$field_data[$k]['minlength']} <br />";
+							}
+							$return = false;
+						}
+						if ($field_data[$k]['maxlength'] && (mb_strlen($v,'utf-8') > $field_data[$k]['maxlength'])) {  //maxlength
+							if (!empty($field_data[$k]['errortips'])) {
+								$this->error .= $field_data[$k]['errortips'] . "<br />";
+							} else {
+								$this->error .= $field_data[$k]['name'] . "长度不能大于于{$field_data[$k]['maxlength']} <br />";
+							}
+							$return = false;
+						}
+					}
+				}
+				if (!empty($field_data[$k]['pattern'])) {  //正则
+					if (!parent::regex($v,$field_data[$k]['pattern'])) {
+						if (!empty($field_data[$k]['errortips'])) {
+							$this->error .= $field_data[$k]['errortips'] . "<br />";
+						} else {
+							$this->error .= $field_data[$k]['name'] . "填写不规范  <br />";
+						}
+						$return = false;
+					}
+				}
+			}
+		}
+		return $return;
+	}
+
+
+	/**
+	 * 检测标题是否已经存在
+	 * @param string $title
+	 */
+	public function titleExist($title) {
+		return null !== $this->where("`title`='{$title}'")->find();
+	}
+
+
+	/**
+	 * 处理内容模型栏目添加信息表单
+	 * @param unknown_type $data
+	 */
+	public function add($data) {
+		if (!$data['catid']) {
+			$this->error .= '没有选择栏目！';
+			return false;
+		}
+		if ($this->_catid !== $data['catid']) {
+			$this->init($data['catid']);
+		}
+		if (!$this->validate($data,$data['catid'])) {  //数据验证
+			return false;
+		}
+		$field_data = $this->_field_data;
+		import('Field',INCLUDE_PATH);  //进行处理
+
+		foreach ($data as $k=>$v) { //对数据进行处理
+            if(empty($field_data[$k]['dbname'])){
+                $data[$k] = Field::add($field_data[$k]['formtype'],$k,$v,$field_data[$k]['setting']);
+            }			
+		}
+
+		if (!empty($data['url'])) { //url链接地址处理
+			$data['url'] = date('Ym/') . $data['url'] . C ('URL_HTML_SUFFIX');
+		}
+		//摘要处理
+		if (empty($data['description'])) {
+			$text = html2txt(strip_tags(trim($data['content'])));
+			if (!empty($text)) {
+				$data['description'] = msubstr($text,0,160);
+			}
+		}
+		//默认seo信息处理
+		if (empty($data['seotitle'])) {
+			$data['seotitle'] = trim($data['title']) . ' - {stitle}';
+		}
+		if (empty($data['seokeywords'])) {
+			$data['seokeywords'] = $data['title'];
+		}
+		if (empty($data['seodescription'])) {
+			$data['seodescription'] = $data['description'];
+		}
+		//提交到基础表content
+		$cid = parent::add($data);
+		if (false !== $cid) {
+			//更新url
+			if (empty($data['url'])) {
+				parent::execute("UPDATE __TABLE__ set `url`='".date('Ym')."/{$cid}". C ('URL_HTML_SUFFIX') ."' WHERE `cid`='{$cid}' LIMIT 1");
+			}
+            //处理二维码
+            $this->_deal_brcode($data, $cid);
+			//添加到扩展表信息
+			$data['cid'] = $cid;
+			$modelData = F ('model_'.$this->_modelid);
+			$_extContentModel = D (parse_name( $modelData['tablename'], 1 ));
+			$_extContentModel->add($data);
+			//处理tag关联
+			if (!empty($data['tag'])) {
+				$_contentTag = D ('ContentTag');
+				$_tag = D ('Tag');
+				foreach ($data['tag'] as $tag) {  //保存关联信息
+					$tagid = '';
+					$contentTag = array();
+					$tagData = $_tag->where(array("name"=>$tag))->find();
+					if (null === $tagData) {  //新增tag
+						$tagid = $_tag->add(array('name'=>$tag));
+					} else {
+						$tagid = $tagData['tagid'];
+					}
+					if ($tagid) {
+						$contentTag = array(
+							'tagid' => $tagid,
+							'keyid' => 'c-' . $cid
+						);
+						$_contentTag->add($contentTag);
+					}	
+				}
+			}			
+			//初始统计表关联纪录
+			M('ContentCount')->add(array('cid'=>$cid));
+			return $cid;
+		}
+		return false;
+	}
+
+	/**
+	 * 更新内容
+	 * @param array $data
+	 */
+	public function update($data, $cid) {
+		if (!$data['cid']) {
+			$data['cid'] = $cid;
+		}
+		if (!$data['cid']) {
+			$this->error .= '数据接收错误，没有指定要修改的信息！';
+			return false;
+		}
+		if (!$data['catid']) {
+			$this->error .= '没有选择栏目！';
+			return false;
+		}
+		if ($this->_catid !== $data['catid']) {
+			$this->init($data['catid']);
+		}
+		if (!$this->validate($data,$data['catid'])) {  //数据验证
+			return false;
+		}
+		$field_data = $this->_field_data;
+		//文档属性为必须字段，当表单没有传递数据的时候，我们需要手动设定为空值
+		!isset($data['attr']) && $data['attr'] = '';
+		import('Field',INCLUDE_PATH);  // 进行处理
+		foreach ($data as $k=>$v) { // 对数据进行处理
+            if(empty($field_data[$k]['dbname'])){
+                $data[$k] = Field::add($field_data[$k]['formtype'],$k,$v,$field_data[$k]['setting']);
+            }
+		}		
+		//提交到基础表content
+		if(empty($data['update_time'])){
+			$data['update_time'] = time();  //更新时间
+		}
+		if (false !== parent::save($data)) {
+			//添加到扩展表信息
+			$modelData = F ('model_'.$this->_modelid);
+			$_extContentModel = D (parse_name($modelData['tablename'], 1));
+			$exist_record = $_extContentModel->field("`cid`")->where("`cid`='{$cid}'")->find();
+			if (!empty($exist_record)) {
+				$_extContentModel->where("`cid`='{$cid}'")->save($data);
+			} else {
+				$_extContentModel->where("`cid`='{$cid}'")->add($data);
+			}
+			//处理tag关联、先删除旧关联信息，然后重建tag_content关联信息
+			$_contentTag = D ('ContentTag');
+			$_contentTag->where("`keyid`='c-{$data['cid']}'")->delete();
+			if (!empty($data['tag'])) {
+				$_tag = D ('Tag');
+				foreach ($data['tag'] as $tag) {  //更新关联信息
+					$tagid = '';
+					$contentTag = array();
+					$tagData = $_tag->where(array("name"=>$tag))->find();
+					if (null === $tagData) {  //新增tag
+						$tagid = $_tag->add(array('name'=>$tag));
+					} else {
+						$tagid = $tagData['tagid'];
+					}
+					if ($tagid) { //建立关联
+						$contentTag = array(
+							'tagid' => $tagid,
+							'keyid' => 'c-' . $data['cid']
+						);
+						$_contentTag->add($contentTag);
+					}
+				}
+			}
+			return $cid;
+		} // done save
+		return false;
+	}
+
+
+	/**
+	 * 内容的数据表信息，取得url地址
+	 * @param array $data
+	 */
+	public function getUrl($data) {
+		$categoryData = F ('category_' . $data['catid']);
+		$link = $categoryData['url'];
+		$link .= $data['url'];
+		$link = str_replace('//','/',$link);
+		return $link;
+	}
+
+	/**
+	 * 根据数据存储的图片路径得到其缩略图路径，相对根目录的地址
+	 * @param string $image
+	 */
+	public function getThumb($image) {
+		//缩略图
+		$realImage = FANGFACMS_ROOT . 'public/uploads/' . $image;
+		$imageInfo = pathinfo($realImage);
+		$realThumb = $imageInfo['dirname'] . '/thumb/' . $imageInfo['basename'];
+		if (file_exists($realThumb)) { //存在缩略图，返回缩略图
+			$image = __ROOT__ . '/public/uploads/' . str_replace(FANGFACMS_ROOT . 'public/uploads/','',$realThumb);
+		} else $image = __ROOT__ . '/public/uploads/' . $image;  //不存在缩略图，返回原图
+		return $image;
+	}
+ 
+	/**
+	 * 根据数据存储的图片路径得到其二维码路径，相对根目录的地址
+	 * @param string $image
+	 */
+	public function getBrcode($image) {
+		//缩略图
+		$image = __ROOT__ . '/public/uploads/' . $image;  //返回二维码图片
+		return $image;
+	}
+
+	/**
+	 * 栏目设置、非直接操作，供栏目创建和修改的时候调用
+	 * 如果模块不需要进行特殊设置，则直接返回空字符串
+	 * @param array $data 栏目数据库记录信息
+	 * @param int $catid 栏目ID
+	 */
+	public function setting($data = array(),$catid = '',$parentid = '') {
+		$html = '';
+		if (empty ( $data ) && ( int ) $catid) {
+			$data = D ( 'Category' )->find ( $catid );
+		} elseif ($parentid) {
+			$data['parentid'] = $parentid;
+		}
+		$data ['controller'] = 'fcontent';
+		//   修改2011-10-10 ，用于子栏目集成父级栏目的模板设置
+		if ($parentid != '' && empty($data['setting'])) {
+			$parentid_data = D ( 'Category' )->find ( $parentid );
+			$data['setting'] = $parentid_data['setting'];
+		}
+		
+		//调用相应的widget
+		$html = W ( 'CategoryNormalAdd', $data, true );
+		return $html;
+	}
+
+	/**
+	 * 获取指定ID的详细内容
+	 * @param int or array $options  主键，或者  查询条件数组
+	 * @param int $catid  栏目ID
+	 * @param array $more  array('base','ext','tag');
+	 * 数组参数至少包含一个base 选项，其余可选，也可为all，全选
+	 */
+	public function get($options, $more = array('base')) {
+		if (is_string($more) && $more == 'all') {
+			$more = array('all');
+		}
+		//基本信息
+		$data = parent::find($options);
+		$catid = $data['catid'];
+		if (!$catid) return ;
+		if ($data['cid']) {
+			if (in_array('ext',$more) || in_array('all',$more)) {  //扩展表信息
+				$where = array('cid'=>$data['cid']);
+				$category_data = F ('category_'.$catid);
+				if ($category_data['modelid']) {
+					 $model_data = F('model_'.$category_data['modelid']);
+					 $ext_data = D($model_data['tablename'])->where($where)->find();
+					 unset($ext_data['cid']);
+					 @$data = array_merge($data,(array)$ext_data);
+				}
+			}
+			$this->init($data['catid']);			
+			if ((in_array('tag',$more) || in_array('all',$more)) ) {  //取得tag
+				//表前缀
+				$db_pre = C('DB_PREFIX');
+				//查询条件
+				$where = array ();
+				$where["{$db_pre}content_tag.keyid"] = 'c-'.$data['cid'];  //content的tag都有 "c-" 作为keyid标识
+				//排序条件
+				$order = "{$db_pre}tag.tagid DESC";
+				$join_tag = "{$db_pre}tag ON ({$db_pre}tag.tagid={$db_pre}content_tag.tagid)";
+				//查找字段
+				$field = "{$db_pre}tag.name";
+				//数据
+				$result_tag = D('ContentTag')->field($field)->join($join_tag)->where($where)->order($order)->select();
+				$arr_tag = array();
+				foreach ($result_tag as $v){
+					$arr_tag[] = $v['name'];
+				}
+				$data['tag'] = implode(" ", $arr_tag);
+			}
+		}
+		//格式化输出数据
+		//TODO
+		if (is_array($this->_field_data)) {
+			import('Field',INCLUDE_PATH);
+			foreach ($this->_field_data as $k=>$v)  {
+				Field::output($v['formtype'],$k, $v['setting'],$data);
+			}
+		}
+		return $data;
+	}
+
+
+	/**
+	 * 改变指定ID信息的status
+	 * @param array $cidArr
+	 * @param int $status
+	 */
+	public function status($cidArr,$status = '1') {
+		if (!empty($cidArr) && is_array($cidArr)) {
+			$ids = implode(',',$cidArr);
+			$_c = D ('Content');
+			$data = array('status'=>$status);
+			$return = $_c->where("`cid` IN ({$ids})")->save($data);
+		} else {
+			$return = false;
+		}
+		return $return;
+	}
+
+	/**
+	 * 移动指定ID信息到其他栏目
+	 * @param array $cidArr
+	 * @param int $catid
+	 */
+	public function moveto($cidArr,$catid = '') {
+		if (!empty($cidArr) && $catid && is_array($cidArr)) {
+			$ids = implode(',',$cidArr);
+			$_c = D ('Content');
+			$data = array('catid'=>$catid);
+			$return = $_c->where("`cid` IN ({$ids})")->save($data);
+		} else {
+			$return = false;
+		}
+		return $return;
+	}
+
+	/**
+	 * 删除信息记录：主表，扩展表，统计表，tag关联，实体文件
+	 *
+	 * @param array $cidArr
+	 */
+	public function delete($cidArr,$catid = '') {
+		if (is_array($cidArr) && !empty($cidArr)) {
+			$ids = implode(',',$cidArr);
+			$where = " `cid` IN ({$ids}) AND `status`='-1'";
+			$field = "`cid`,`catid`,`url`";
+			$data = $this->field($field)->where($where)->findAll();
+		} elseif (strtolower($cidArr) == 'all') {  //清空回收站
+			$where = "`status`='-1' AND `catid`=" . $catid;
+			$field = "`cid`,`catid`,`url`";
+			$data = $this->field($field)->where($where)->findAll();
+		}
+		if (is_array($data) && !empty($data)) {
+			foreach ($data as $v) {
+				//主表
+				parent::delete($v['cid']);
+				//扩展表
+				$category_data = array();
+				$category_data = F ('category_'.$v['catid']);
+				$model_data = array();
+				$model_data = F ('model_'.$category_data['modelid']);
+				$_extContent = '';
+				$_extContent = D (parse_name($model_data['tablename'], 1));
+				$_extContent->where("`cid`='{$v['cid']}'")->delete();
+				//统计表
+				$_contentCount = D ('ContentCount');
+				$_contentCount->where("`cid`='{$v['cid']}'")->delete();
+				//tag关联
+				$_contentTag = D ('ContentTag');
+				$_contentTag->where("`keyid`='c-{$v['cid']}'")->delete();
+			}
+		}
+		return true;
+	}
+
+	/**
+	 * 修改二维码 
+	 * @param array $data     //提交的数据
+	 * @param array $options  //选项
+	 * @return 返回二维码或者null
+	 */
+	protected function _before_update(&$data, $options) {
+		//开通二维码，并且启用了二维码字段时，添加数据时生成二维码.			
+		if (C("is_brcode") == 1 && isset($data["brcode"]) ) { 
+			$siteurl      = 'http://'.$_SERVER['HTTP_HOST'];
+			$categoryData = F ('category_' . $data['catid']);
+			$brcode_url   = $siteurl.str_replace('//','/',$categoryData['url'].$data['url']);
+            
+            //返回生成的二维码地址
+			$data["brcode"] = generate_brcode($brcode_url, C("brcode_size"));
+            $val = parent::field("brcode")->find($data['cid']);
+            
+             //删除以前的二维码
+			$filename = FANGFACMS_ROOT.C('UPLOAD_DIR').$val['brcode'];
+			if(!empty($val['brcode']) && file_exists( $filename ) ) unlink($filename);
+		}
+	}
+	
+     /**
+	 * 生成二维码 
+	 * @param array $data  //提交的数据
+	 * @param cid $options  //数据ID
+	 * @return boolean
+	 */
+	protected function _deal_brcode($data,$cid) {
+        //开通二维码，并且启用了二维码字段时，添加数据时自动生成二维码.	
+		if (C("is_brcode") == 1 && isset($data["brcode"])) { 
+            $list  = M('Content')->WHERE("cid='$cid'")->find();
+			if( empty($list) ) return;
+			$siteurl      = 'http://'.$_SERVER['HTTP_HOST'];
+			$categoryData = F ('category_' . $list['catid']);
+			$brcode_url   = $siteurl.str_replace('//','/',$categoryData['url'].$list['url']);
+			//返回生成的二维码地址
+			$pic_url      = generate_brcode($brcode_url, C("brcode_size"));
+            
+            if(isset($pic_url)) parent::execute("UPDATE __TABLE__ SET `brcode`='$pic_url' WHERE `cid`='{$cid}' LIMIT 1");
+ 			return true;
+		}
+        return false;
+	}
+}
+?>
\ No newline at end of file

--- admin/Lib/Model/DatabaseModel.class.php ---
@@ -0,0 +1,18 @@
+<?php
+// +----------------------------------------------------------------------
+// | FangFa Net [ http://www.fangfa.net ]
+// +----------------------------------------------------------------------
+// | File: DatabaseModel.class.php
+// +----------------------------------------------------------------------
+// | Date: 2010-5-6
+// +----------------------------------------------------------------------
+// | Author: fangfa <1364119331@qq.com>
+// +----------------------------------------------------------------------
+// | 文件描述: 数据库维护Model
+// +----------------------------------------------------------------------
+
+class DatabaseModel extends Model {
+	
+}
+
+?>
\ No newline at end of file

--- admin/Lib/Model/DbBackupModel.class.php ---
@@ -0,0 +1,262 @@
+<?php
+/**
+ * 数据库备份，还原，优化，修复
+ */
+class DbBackupModel extends Model {
+	/**
+     +----------------------------------------------------------
+     * 取得数据库的表信息
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+	public function getTables()
+	{
+		return parent::getDb()->getTables();
+	}
+	
+	/**
+     +----------------------------------------------------------
+     * 取得数据库表总共记录数
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+	public function getCount($table) 
+	{
+		$db = parent::getDb();
+		$result = $db->query('SELECT count(*) as total FROM `' . $table . '`');
+		return $result[0]['total'];
+	}
+	
+    /**
+     +----------------------------------------------------------
+     * 备份数据库
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     * @param tables array 需要备份的数据表
+     * @param fsize int 分卷大小
+     * @param fnum int 分卷序号
+     * @param nowtable string 正执行备份的表
+     * @param startpos int 记录数开始行号
+     * @param backup_last_string string 备份卷后缀字符
+     +----------------------------------------------------------
+     * @return array
+     +----------------------------------------------------------
+     */
+    public function doBackup($tables, $fsize=2048, $fnum=1, $nowtable='', $startpos=0, $prefix)
+    {
+    	 $db = parent::getDb();
+    	 $fsizeb = $fsize * 1000;
+    	 $bakStr = '';  //备份数据
+    	 
+    	 if (!is_array($tables)) {
+    	 	return array('code' => 'error', 'msg' => '没有需要备份的表');
+    	 }
+    	 //判断是否存在备份文件夹
+    	 if (is_dir(DB_BACKUP_PATH)) {
+    	 	mk_dir(DB_BACKUP_PATH, 0775);
+    	 }
+    	 if (!is_writable(DB_BACKUP_PATH)) {
+    	 	return array('code' => 'error', 'msg' => '请您将文件夹 ' . DB_BACKUP_PATH . ' 设置成775或777');
+    	 }
+    	 
+    	$bkfile = DB_BACKUP_PATH . $prefix . '_' . $fnum . ".txt"; //备份的文件
+		$mysql_version = substr(mysql_get_server_info ( parent::getDb()->getNlinkID()), 0, 3);
+		
+		$fp = fopen($bkfile, "w");
+		foreach($tables as $key=>$t)
+		{
+			if ($nowtable != $t && $startpos == 0) {   //如果不是表记录分卷
+				$bakStr .= "DROP TABLE IF EXISTS `$t`;\r\n";
+				$createTable = $this->doViewinfo($t);  //获取表结构
+				$bakStr .= ''.$createTable.";\r\n\r\n";
+				//fwrite($fp,''.$createTable.";\r\n\r\n");  //写入表结构到文件
+			}
+			
+			$j = 0;
+			$fs = '';
+    		//获取当前表结构
+    		$table_fields = $db->getFields($t);
+    		foreach ($table_fields AS $tf) {
+    			$fs[$j] = trim($tf['name']);
+				$j++;
+    		}
+			$fsd = $j-1;
+			
+			//获取当面表所有数据
+    		$data_list = $db->query("SELECT * FROM `$t`");
+			$intable = "INSERT INTO `$t` VALUES(";
+			
+			$m = 0;
+			foreach ($data_list AS $dl) {
+				if ($m < $startpos) {
+					$m++;
+					continue;
+				}
+				
+				//检测数据是否达到规定大小
+				if(strlen($bakStr) > $fsizeb)
+				{
+					fwrite($fp, $bakStr);
+					fclose($fp);
+					return array('code'   	=> 'incomplete',
+								 'tableName' 	=> implode(',', $tables), 
+								 'fsize'  	=> $fsize, 
+								 'fnum'   	=> $fnum+1, 
+								 'nowtable'	=> $t, 
+								 'startpos'	=> $m,
+								 'msg' 		=> "已完成第" . $fnum ."卷备份，正在备份下一卷...");
+				}
+				
+				//正常情况
+				$line = $intable;
+				for($j=0;$j<=$fsd;$j++)
+				{
+					if($j < $fsd)
+					{
+						$line .= "'" . $this->rpLine(addslashes($dl[$fs[$j]])) . "',";
+					}
+					else
+					{
+						$line .= "'" . $this->rpLine(addslashes($dl[$fs[$j]])) . "');\r\n";
+					}
+				}
+				$m++;
+				$bakStr .= $line;
+			}
+			
+			$startpos = 0;
+			$bakStr .= "\r\n";
+			unset($tables[$key]);
+		}
+		
+    	fwrite($fp, $bakStr);  //写入表结构到文件
+    	fclose($fp);
+    	return array('code' => 'success', 'msg' => '已完成第' . $fnum . '卷备份！<br />完成所有数据备份,共' . $fnum . '卷！');
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 数据还原
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function doRedat($backupFile)
+    {
+    	$tdata = '';
+		$fp = fopen($backupFile, 'r');
+		while(!feof($fp))
+		{
+			$tdata .= fgets($fp, 512*1024);
+		}
+		fclose($fp);
+		
+		$tdata = explode(";\r\n", $tdata);
+		foreach ($tdata AS $sql) {
+			parent::getDb()->execute($sql);
+		}
+		return true;
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 修复表
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function doRepair($tablename)
+    {
+    	return parent::getDb()->execute("REPAIR TABLE `$tablename` ");
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 优化表
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function doOpimize($tablename){
+    	return parent::getDb()->execute("OPTIMIZE TABLE `$tablename` ");
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 查看表结构
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function doViewinfo($tablename)
+    {
+    	$create = current(parent::getDb()->query('SHOW CREATE TABLE `' . $tablename . '`'));
+    	return $create['Create Table'];
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 取得已备份数据
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function getBackupFiles($backup_path) {
+    	$dh = dir($backup_path);
+		$i = 0;
+		$filelists = array();
+		while (false !== ($filename = $dh->read())) {
+			if(!preg_match('/txt$/i',$filename))
+			{
+				continue;
+			}
+			if( filesize($backup_path . "/$filename") > 0 )
+			{
+				$filelists[$i]['name'] = $filename;
+				$filelists[$i]['mtime'] = date('Y-m-d H:i:s', filemtime($backup_path . "/$filename"));
+				$filelists[$i]['size'] = byte_format(filesize($backup_path . "/$filename"));
+			}
+			$i++;
+		}
+		$dh->close();
+		
+		return $filelists;
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 分类排序备份文件
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function orderBackupFiles($backup_path)
+    {
+    	$files = $this->getBackupFiles($backup_path);
+    	$result = array();
+    	foreach ($files AS $f) {
+    		$prefix = substr($f['name'], 0, 21);
+    		$result[$prefix][substr(trim($f['name'], '.txt'), 22)] = $f;
+    	}
+    	ksort($result);
+    	return $result;
+    }
+    
+    /**
+     +----------------------------------------------------------
+     * 字符替换
+     +----------------------------------------------------------
+     * @access public
+     +----------------------------------------------------------
+     */
+    public function rpLine($str)
+	{
+		$str = str_replace("\r","\\r",$str);
+		$str = str_replace("\n","\\n",$str);
+		return $str;
+	}
+	
+}
\ No newline at end of file

--- admin/Lib/Model/FriendlinkModel.class.php ---
@@ -0,0 +1,22 @@
+<?php
+/**
+ * 友情链接 模型
+ *
+ */
+class FriendlinkModel extends Model 
+{
+	protected $_auto = array(
+		array('created', 'time', 1, 'function'),
+	);
+	
+	
+	protected function _after_select(&$resultSet,$options)
+	{
+		return $resultSet;
+	}
+	
+	//处理查询后logo地址
+	protected function _after_find(&$result,$options) {
+		return $result;
+	}
+}
\ No newline at end of file

--- admin/Lib/Model/GuestbookModel.class.php ---
@@ -0,0 +1,37 @@
+<?php
+/**
+ * 留言板模块
+ */
+class GuestbookModel extends Model 
+{
+	public function _facade(&$data)
+	{
+		$data['addtime']   = strtotime($data['addtime']);
+		$data['replytime'] = strtotime($data['replytime']);
+		
+		return $data;
+	}
+	
+	public function setting($data = array(),$catid = '', $parentid = '') {
+		$html = '';
+		if (empty ( $data ) && ( int ) $catid) {
+			$data = D ( 'Category' )->find ( $catid );		
+		} elseif ($parentid) {
+			$data['parentid'] = $parentid;
+		}
+		$data ['controller'] = 'fguestbook';
+		//调用相应的widget
+		$html = W ( 'CategoryGuestbookAdd', $data, true );
+		return $html;
+//		$_model = D ( 'Model' );
+//		$module_data = $_model->relation ( true )->find ( $data ['modelid'] );
+//		if (is_array ( $module_data )) {
+//			$data ['controller'] = ucfirst ( $module_data ['module'] ['controller'] );
+//			//调用相应的widget
+//			$html = W ( 'CategoryGuestbookAdd', $data, true );
+//			return $html;
+//		} else {
+//			return false;
+//		}
+	}
+}
\ No newline at end of file

--- admin/Lib/Model/JobModel.class.php ---
@@ -0,0 +1,41 @@
+<?php
+/**
+ * 人才招聘 模型
+ *
+ */
+class JobModel extends Model 
+{
+	protected function _after_select(&$resultSet,$options)
+	{
+		if (is_array($resultSet)) {
+			foreach ($resultSet AS &$v) {
+				$v['end_time'] = date('Y-m-d', $v['end_time']);
+				$v['create_time'] = date('Y-m-d', $v['create_time']);
+				$v['update_time'] = date('Y-m-d', $v['update_time']);
+			}
+		}
+		
+		return $resultSet;
+	}
+	
+	//处理查询后logo地址
+	protected function _after_find(&$result,$options) {
+		$result['end_time'] = date('Y-m-d', $result['end_time']);
+		$result['create_time'] = date('Y-m-d', $result['create_time']);
+		$result['update_time'] = date('Y-m-d', $result['update_time']);
+		return $result;
+	}
+	
+	public function setting($data = array(),$catid = '', $parentid = '') {
+		$html = '';
+		if (empty ( $data ) && ( int ) $catid) {
+			$data = D ( 'Category' )->find ( $catid );		
+		} elseif ($parentid) {
+			$data['parentid'] = $parentid;
+		}
+		$data ['controller'] = 'fjob';
+		//调用相应的widget
+		$html = W ( 'CategoryJobAdd', $data, true );
+		return $html;
+	}
+}
\ No newline at end of file

