--- .changeset/silent-wombats-roll.md ---
@@ -0,0 +1,6 @@
+---
+"@pnpm/npm-resolver": patch
+"pnpm": patch
+---
+
+Don't ever save mutated metadata to the metadata cache.

--- resolving/npm-resolver/src/pickPackage.ts ---
@@ -205,10 +205,12 @@ export async function pickPackage (
       // only save meta to cache, when it is fresh
       ctx.metaCache.set(spec.name, meta)
       if (!opts.dryRun) {
+        // We stringify this meta here to avoid saving any mutations that could happen to the meta object.
+        const stringifiedMeta = JSON.stringify(meta)
         // eslint-disable-next-line @typescript-eslint/no-floating-promises
         runLimited(pkgMirror, (limit) => limit(async () => {
           try {
-            await saveMeta(pkgMirror, meta)
+            await saveMeta(pkgMirror, stringifiedMeta)
           } catch (err: any) { // eslint-disable-line
             // We don't care if this file was not written to the cache
           }
@@ -285,14 +287,14 @@ async function loadMeta (pkgMirror: string): Promise<PackageMeta | null> {
 
 const createdDirs = new Set<string>()
 
-async function saveMeta (pkgMirror: string, meta: PackageMeta): Promise<void> {
+async function saveMeta (pkgMirror: string, meta: string): Promise<void> {
   const dir = path.dirname(pkgMirror)
   if (!createdDirs.has(dir)) {
     await fs.mkdir(dir, { recursive: true })
     createdDirs.add(dir)
   }
   const temp = pathTemp(pkgMirror)
-  await gfs.writeFile(temp, JSON.stringify(meta))
+  await gfs.writeFile(temp, meta)
   await renameOverwrite(temp, pkgMirror)
 }
 

--- resolving/npm-resolver/test/index.ts ---
@@ -92,6 +92,27 @@ test('resolveFromNpm()', async () => {
   expect(meta['dist-tags']).toBeTruthy()
 })
 
+test('resolveFromNpm() does not save mutated meta to the cache', async () => {
+  nock(registry)
+    .get('/is-positive')
+    .reply(200, isPositiveMeta)
+
+  const cacheDir = tempy.directory()
+  const { resolveFromNpm } = createResolveFromNpm({
+    cacheDir,
+  })
+  const resolveResult = await resolveFromNpm({ alias: 'is-positive', pref: '1.0.0' }, {
+    registry,
+  })
+
+  resolveResult!.manifest!.version = '1000'
+
+  // The resolve function does not wait for the package meta cache file to be saved
+  // so we must delay for a bit in order to read it
+  const meta = await retryLoadJsonFile<any>(path.join(cacheDir, 'metadata/registry.npmjs.org/is-positive.json')) // eslint-disable-line @typescript-eslint/no-explicit-any
+  expect(meta.versions['1.0.0'].version).toBe('1.0.0')
+})
+
 test('resolveFromNpm() should save metadata to a unique file when the package name has upper case letters', async () => {
   nock(registry)
     .get('/JSON')

