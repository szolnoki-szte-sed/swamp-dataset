--- app/Actions/ImportHtmlBookmarks.php ---
@@ -41,6 +41,10 @@ public function run(string $data, string $userId, bool $generateMeta = true): bo
         }
 
         foreach ($links as $link) {
+            if (filter_var($link['url'], FILTER_VALIDATE_URL) === false) {
+                // skip any links that are not a valid URL
+                continue;
+            }
             if (Link::whereUrl($link['url'])->first()) {
                 $this->skipped++;
                 continue;

--- tests/Controller/App/data/import_example.html ---
@@ -29,6 +29,9 @@
     <DT>
       <A HREF="https://astralapp.com/" ADD_DATE="1549404064" TAGS="favourites,Github,organization">Astral â€”
         Organize Your GitHub Stars With Ease</A>
-  <DD>Astral is the best way to manage your starred repositories on GitHub using tags, notes and a powerful search
+      <DD>Astral is the best way to manage your starred repositories on GitHub using tags, notes and a powerful search
     feature.
+    <DT>
+      <A HREF="javascript:alert('XSS 1 - Document Cookie: ' + document.cookie);" ADD_DATE="1549404064" TAGS="vulnerability">This is Scary</A>
+      <DD>Sit locus tuus salvus erit.
 </DL>

--- tests/Controller/Models/LinkControllerTest.php ---
@@ -9,6 +9,7 @@
 use App\Models\Tag;
 use App\Models\User;
 use Illuminate\Foundation\Testing\RefreshDatabase;
+use Illuminate\Http\Client\ConnectionException;
 use Illuminate\Support\Facades\Http;
 use Illuminate\Support\Facades\Queue;
 use Tests\TestCase;
@@ -186,14 +187,32 @@ public function testStoreRequestWithDuplicate(): void
         $flashMessages->contains('message', trans('link.duplicates_found'));
     }
 
+    public function testStoreRequestWithMaliciousUrl(): void
+    {
+        $response = $this->post('links', [
+            'url' => 'javascript:alert(document.cookie)',
+            'title' => null,
+            'description' => null,
+            'lists' => null,
+            'tags' => null,
+            'is_private' => '0',
+        ]);
+
+        $response->assertSessionHasErrors(['url' => 'The url format is invalid.']);
+
+        $this->assertDatabaseCount('links', 0);
+    }
+
     public function testStoreRequestWithBrokenUrl(): void
     {
         Http::fake([
-            'example.com' => Http::response('', 500),
+            'https://bad-example.com' => function () {
+                throw new ConnectionException('Unable to reach bad-example.com');
+            },
         ]);
 
         $response = $this->post('links', [
-            'url' => 'example.com',
+            'url' => 'https://bad-example.com',
             'title' => null,
             'description' => null,
             'lists' => null,
@@ -207,7 +226,7 @@ public function testStoreRequestWithBrokenUrl(): void
 
         $this->assertTrue($databaseLink->check_disabled);
         $this->assertEquals(Link::STATUS_BROKEN, $databaseLink->status);
-        $this->assertEquals('example.com', $databaseLink->title);
+        $this->assertEquals('bad-example.com', $databaseLink->title);
     }
 
     public function testStoreRequestWithHugeThumbnail(): void

