--- .golangci.yaml ---
@@ -433,6 +433,9 @@ issues:
         - tagliatelle
         - lll
       path: pkg/.*/config/config\.go
+    - linters:
+        - dupl
+      path: pkg/.*/response-handler/handler\.go
   # issues:
   #   # List of regexps of issue texts to exclude, empty list by default.
   #   # But independently from this option we use default exclude patterns,

--- .mise.toml ---
@@ -9,3 +9,5 @@ gotestsum = "v1.12.0"
 "go:go.uber.org/mock/mockgen" = "v0.5.0"
 # renovate: datasource=go depName=golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment
 # "go:golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment" = "v0.30.0"
+# renovate: datasource=github-tags depName=jmattheis/goverter
+"go:github.com/jmattheis/goverter/cmd/goverter" = "v1.7.0"

--- Makefile ---
@@ -33,6 +33,7 @@ HAS_CURL:=$(shell command -v curl;)
 HAS_MOCKGEN:=$(shell command -v mockgen;)
 HAS_GOTESTSUM:=$(shell command -v gotestsum;)
 HAS_FIELDALIGNMENT:=$(shell command -v fieldalignment;)
+HAS_GOVERTER := $(shell command -v goverter;)
 
 #
 ## Tool versions
@@ -200,6 +201,10 @@ endif
 ifndef HAS_FIELDALIGNMENT
 	@echo "=> Installing fieldalignment tool"
 	$(GO) install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@v0.30.0
+endif
+ifndef HAS_GOVERTER
+	@echo "=> Installing goverter tool"
+	$(GO) install github.com/jmattheis/goverter/cmd/goverter@v1.7.0
 endif
 	go mod download all
 	go mod tidy

--- go.mod ---
@@ -17,6 +17,7 @@ require (
 	github.com/go-resty/resty/v2 v2.16.5
 	github.com/gobwas/glob v0.2.3
 	github.com/johannesboyne/gofakes3 v0.0.0-20240701191259-edd0227ffc37
+	github.com/microcosm-cc/bluemonday v1.0.27
 	github.com/opentracing/opentracing-go v1.2.0
 	github.com/prometheus/client_golang v1.20.5
 	github.com/sirupsen/logrus v1.9.3
@@ -38,6 +39,7 @@ require (
 	github.com/HdrHistogram/hdrhistogram-go v1.1.2 // indirect
 	github.com/Masterminds/goutils v1.1.1 // indirect
 	github.com/Masterminds/semver/v3 v3.3.1 // indirect
+	github.com/aymerick/douceur v0.2.0 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/cespare/xxhash/v2 v2.3.0 // indirect
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
@@ -46,6 +48,7 @@ require (
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
 	github.com/google/uuid v1.6.0 // indirect
+	github.com/gorilla/css v1.0.1 // indirect
 	github.com/hashicorp/hcl v1.0.0 // indirect
 	github.com/huandu/xstrings v1.5.0 // indirect
 	github.com/inconshreveable/mousetrap v1.1.0 // indirect

--- go.sum ---
@@ -17,6 +17,8 @@ github.com/ajstarks/svgo v0.0.0-20180226025133-644b8db467af/go.mod h1:K08gAheRH3
 github.com/aws/aws-sdk-go v1.44.256/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=
 github.com/aws/aws-sdk-go v1.55.6 h1:cSg4pvZ3m8dgYcgqB97MrcdjUmZ1BeMYKUxMMB89IPk=
 github.com/aws/aws-sdk-go v1.55.6/go.mod h1:eRwEWoyTWFMVYVQzKMNHWP5/RV4xIUGMQfXQHfHkpNU=
+github.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=
+github.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
 github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=
@@ -70,6 +72,8 @@ github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
 github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=
+github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=
 github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=
 github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
 github.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=
@@ -97,6 +101,8 @@ github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
 github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
 github.com/magiconair/properties v1.8.9 h1:nWcCbLq1N2v/cpNsy5WvQ37Fb+YElfq20WJ/a8RkpQM=
 github.com/magiconair/properties v1.8.9/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
+github.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=
+github.com/microcosm-cc/bluemonday v1.0.27/go.mod h1:jFi9vgW+H7c3V0lb6nR74Ib/DIB5OBs92Dimizgw2cA=
 github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=
 github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=

--- pkg/s3-proxy/bucket/bucket-req-impl.go ---
@@ -14,6 +14,7 @@ import (
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/log"
 	responsehandler "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler"
+	responsehandlermodels "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/s3client"
 	utils "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/generalutils"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/templateutils"
@@ -310,7 +311,7 @@ func (bri *bucketReqImpl) manageGetFolder(ctx context.Context, key string, input
 		// Answer directly
 		resHan.FoldersFilesList(
 			bri.LoadFileContent,
-			make([]*responsehandler.Entry, 0),
+			make([]*responsehandlermodels.Entry, 0),
 		)
 
 		// Stop
@@ -604,7 +605,7 @@ func (bri *bucketReqImpl) Put(ctx context.Context, inp *PutInput) {
 	// Answer
 	resHan.Put(
 		bri.LoadFileContent,
-		&responsehandler.PutInput{
+		&responsehandlermodels.PutInput{
 			Key:          key,
 			ContentType:  inp.ContentType,
 			ContentSize:  inp.ContentSize,
@@ -692,7 +693,7 @@ func (bri *bucketReqImpl) Delete(ctx context.Context, requestPath string) {
 	// Answer
 	resHan.Delete(
 		bri.LoadFileContent,
-		&responsehandler.DeleteInput{
+		&responsehandlermodels.DeleteInput{
 			Key: key,
 		},
 	)
@@ -702,9 +703,9 @@ func transformS3Entries(
 	s3Entries []*s3client.ListElementOutput,
 	rctx *bucketReqImpl,
 	bucketRootPrefixKey string,
-) []*responsehandler.Entry {
+) []*responsehandlermodels.Entry {
 	// Prepare result
-	entries := make([]*responsehandler.Entry, 0)
+	entries := make([]*responsehandlermodels.Entry, 0)
 	// Loop over s3 entries
 	for _, item := range s3Entries {
 		// Store path
@@ -715,7 +716,7 @@ func transformS3Entries(
 			ePath += "/"
 		}
 		// Save new entry
-		entries = append(entries, &responsehandler.Entry{
+		entries = append(entries, &responsehandlermodels.Entry{
 			Type:         item.Type,
 			ETag:         item.ETag,
 			Name:         item.Name,
@@ -807,7 +808,7 @@ func (bri *bucketReqImpl) answerHead(
 	)
 
 	// Transform input
-	inp := &responsehandler.StreamInput{
+	inp := &responsehandlermodels.StreamInput{
 		CacheControl:       hOutput.CacheControl,
 		Expires:            hOutput.Expires,
 		ContentDisposition: hOutput.ContentDisposition,
@@ -848,7 +849,7 @@ func (bri *bucketReqImpl) streamFileForResponse(ctx context.Context, key string,
 	defer objOutput.Body.Close()
 
 	// Transform input
-	inp := &responsehandler.StreamInput{
+	inp := &responsehandlermodels.StreamInput{
 		Body:               objOutput.Body,
 		CacheControl:       objOutput.CacheControl,
 		Expires:            objOutput.Expires,

--- pkg/s3-proxy/bucket/bucket-req-impl_test.go ---
@@ -18,6 +18,7 @@ import (
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/log"
 	responsehandler "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler"
 	responsehandlermocks "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/mocks"
+	responsehandlermodels "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/s3client"
 	s3clientmocks "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/s3client/mocks"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/webhook"
@@ -36,7 +37,7 @@ func Test_transformS3Entries(t *testing.T) {
 	tests := []struct {
 		name string
 		args args
-		want []*responsehandler.Entry
+		want []*responsehandlermodels.Entry
 	}{
 		{
 			name: "Empty list",
@@ -45,7 +46,7 @@ func Test_transformS3Entries(t *testing.T) {
 				rctx:                &bucketReqImpl{},
 				bucketRootPrefixKey: "prefix/",
 			},
-			want: []*responsehandler.Entry{},
+			want: []*responsehandlermodels.Entry{},
 		},
 		{
 			name: "List",
@@ -65,7 +66,7 @@ func Test_transformS3Entries(t *testing.T) {
 				},
 				bucketRootPrefixKey: "prefix/",
 			},
-			want: []*responsehandler.Entry{
+			want: []*responsehandlermodels.Entry{
 				{
 					Type:         s3client.FileType,
 					ETag:         "etag",
@@ -95,7 +96,7 @@ func Test_transformS3Entries(t *testing.T) {
 				},
 				bucketRootPrefixKey: "/",
 			},
-			want: []*responsehandler.Entry{
+			want: []*responsehandlermodels.Entry{
 				{
 					Type:         s3client.FileType,
 					ETag:         "etag",
@@ -125,7 +126,7 @@ func Test_transformS3Entries(t *testing.T) {
 				},
 				bucketRootPrefixKey: "/",
 			},
-			want: []*responsehandler.Entry{
+			want: []*responsehandlermodels.Entry{
 				{
 					Type:         s3client.FileType,
 					ETag:         "etag",
@@ -155,7 +156,7 @@ func Test_transformS3Entries(t *testing.T) {
 				},
 				bucketRootPrefixKey: "/",
 			},
-			want: []*responsehandler.Entry{
+			want: []*responsehandlermodels.Entry{
 				{
 					Type:         s3client.FileType,
 					ETag:         "etag",
@@ -185,7 +186,7 @@ func Test_transformS3Entries(t *testing.T) {
 				},
 				bucketRootPrefixKey: "/",
 			},
-			want: []*responsehandler.Entry{
+			want: []*responsehandlermodels.Entry{
 				{
 					Type:         s3client.FolderType,
 					ETag:         "etag",
@@ -215,7 +216,7 @@ func Test_transformS3Entries(t *testing.T) {
 				},
 				bucketRootPrefixKey: "/",
 			},
-			want: []*responsehandler.Entry{
+			want: []*responsehandlermodels.Entry{
 				{
 					Type:         s3client.FolderType,
 					ETag:         "etag",
@@ -239,7 +240,7 @@ func Test_transformS3Entries(t *testing.T) {
 
 func Test_requestContext_Delete(t *testing.T) {
 	type responseHandlerDeleteMockResult struct {
-		input *responsehandler.DeleteInput
+		input *responsehandlermodels.DeleteInput
 		times int
 	}
 	type responseHandlerInternalServerErrorMockResult struct {
@@ -357,7 +358,7 @@ func Test_requestContext_Delete(t *testing.T) {
 				times: 1,
 			},
 			responseHandlerDeleteMockResultTimes: responseHandlerDeleteMockResult{
-				input: &responsehandler.DeleteInput{Key: "/file"},
+				input: &responsehandlermodels.DeleteInput{Key: "/file"},
 				times: 1,
 			},
 		},
@@ -399,7 +400,7 @@ func Test_requestContext_Delete(t *testing.T) {
 				times: 1,
 			},
 			responseHandlerDeleteMockResultTimes: responseHandlerDeleteMockResult{
-				input: &responsehandler.DeleteInput{Key: "/fake/file2"},
+				input: &responsehandlermodels.DeleteInput{Key: "/fake/file2"},
 				times: 1,
 			},
 		},
@@ -467,7 +468,7 @@ func Test_requestContext_Delete(t *testing.T) {
 
 func Test_requestContext_Put(t *testing.T) {
 	type responseHandlerPutMockResult struct {
-		input *responsehandler.PutInput
+		input *responsehandlermodels.PutInput
 		times int
 	}
 	type responseHandlerErrorsMockResult struct {
@@ -651,7 +652,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:          "/test/file",
 					Filename:     "file",
 					ContentType:  "content-type",
@@ -787,7 +788,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -865,7 +866,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:          "/test1/test2/file",
 					Filename:     "file",
 					ContentType:  "content-type",
@@ -944,7 +945,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -1024,7 +1025,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -1107,7 +1108,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -1186,7 +1187,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -1263,7 +1264,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -1341,7 +1342,7 @@ func Test_requestContext_Put(t *testing.T) {
 			},
 			s3clManagerClientForTargetMockInput: "name",
 			responseHandlerPutMockResultTimes: responseHandlerPutMockResult{
-				input: &responsehandler.PutInput{
+				input: &responsehandlermodels.PutInput{
 					Key:         "/test/file",
 					Filename:    "file",
 					ContentType: "content-type",
@@ -1438,12 +1439,12 @@ func Test_requestContext_Get(t *testing.T) {
 		times  int
 	}
 	type responseHandlerStreamFileMockResult struct {
-		input *responsehandler.StreamInput
+		input *responsehandlermodels.StreamInput
 		err   error
 		times int
 	}
 	type responseHandlerFoldersFilesListMockResult struct {
-		input2 []*responsehandler.Entry
+		input2 []*responsehandlermodels.Entry
 		times  int
 	}
 	type s3ClientListFilesAndDirectoriesMockResult struct {
@@ -1587,7 +1588,7 @@ func Test_requestContext_Get(t *testing.T) {
 				times: 1,
 			},
 			responseHandlerFoldersFilesListMockResult: responseHandlerFoldersFilesListMockResult{
-				input2: []*responsehandler.Entry{{
+				input2: []*responsehandlermodels.Entry{{
 					Type:         "FILE",
 					ETag:         "etag",
 					LastModified: fakeDate,
@@ -1657,7 +1658,7 @@ func Test_requestContext_Get(t *testing.T) {
 				times: 1,
 			},
 			responseHandlerStreamFileMockResult: responseHandlerStreamFileMockResult{
-				input: &responsehandler.StreamInput{
+				input: &responsehandlermodels.StreamInput{
 					Body:        body,
 					ContentType: "text/html; charset=utf-8",
 				},
@@ -1805,7 +1806,7 @@ func Test_requestContext_Get(t *testing.T) {
 				times:  1,
 			},
 			responseHandlerFoldersFilesListMockResult: responseHandlerFoldersFilesListMockResult{
-				input2: []*responsehandler.Entry{{
+				input2: []*responsehandlermodels.Entry{{
 					Type:         "FILE",
 					ETag:         "etag",
 					LastModified: fakeDate,
@@ -1973,7 +1974,7 @@ func Test_requestContext_Get(t *testing.T) {
 				times: 1,
 			},
 			responseHandlerStreamFileMockResult: responseHandlerStreamFileMockResult{
-				input: &responsehandler.StreamInput{
+				input: &responsehandlermodels.StreamInput{
 					Body:               body,
 					ContentDisposition: "disposition",
 					ContentType:        "type",
@@ -2143,7 +2144,7 @@ func Test_requestContext_Get(t *testing.T) {
 				times: 1,
 			},
 			responseHandlerStreamFileMockResult: responseHandlerStreamFileMockResult{
-				input: &responsehandler.StreamInput{
+				input: &responsehandlermodels.StreamInput{
 					Body:            body,
 					ContentEncoding: "encoding",
 					ContentType:     "type",
@@ -2181,7 +2182,7 @@ func Test_requestContext_Get(t *testing.T) {
 			},
 			responseHandlerFoldersFilesListMockResult: responseHandlerFoldersFilesListMockResult{
 				times:  1,
-				input2: []*responsehandler.Entry{},
+				input2: []*responsehandlermodels.Entry{},
 			},
 		},
 	}

--- pkg/s3-proxy/response-handler/client.go ---
@@ -2,55 +2,12 @@ package responsehandler
 
 import (
 	"context"
-	"io"
 	"net/http"
-	"time"
 
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
 )
 
-// Entry Entry with path for internal use (template).
-type Entry struct {
-	LastModified time.Time
-	Type         string
-	ETag         string
-	Name         string
-	Key          string
-	Path         string
-	Size         int64
-}
-
-// StreamInput represents a stream input file.
-type StreamInput struct {
-	LastModified       time.Time
-	Body               io.ReadCloser
-	Metadata           map[string]string
-	CacheControl       string
-	Expires            string
-	ContentDisposition string
-	ContentEncoding    string
-	ContentLanguage    string
-	ContentRange       string
-	ContentType        string
-	ETag               string
-	ContentLength      int64
-}
-
-// PutInput represents a put input.
-type PutInput struct {
-	Metadata     map[string]string
-	Key          string
-	ContentType  string
-	StorageClass string
-	Filename     string
-	ContentSize  int64
-}
-
-// DeleteInput represents a delete input.
-type DeleteInput struct {
-	Key string
-}
-
 // ResponseHandler will handle responses.
 //
 //go:generate mockgen -destination=./mocks/mock_ResponseHandler.go -package=mocks github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler ResponseHandler
@@ -60,12 +17,12 @@ type ResponseHandler interface {
 	// Put will answer for the put response.
 	Put(
 		loadFileContent func(ctx context.Context, path string) (string, error),
-		input *PutInput,
+		input *models.PutInput,
 	)
 	// Delete will answer for the delete response.
 	Delete(
 		loadFileContent func(ctx context.Context, path string) (string, error),
-		input *DeleteInput,
+		input *models.DeleteInput,
 	)
 	// NotModified will answer with a Not Modified status code.
 	NotModified()
@@ -79,12 +36,12 @@ type ResponseHandler interface {
 	// Error will be managed outside of this function because of the workflow in the caller function.
 	StreamFile(
 		loadFileContent func(ctx context.Context, path string) (string, error),
-		input *StreamInput,
+		input *models.StreamInput,
 	) error
 	// FoldersFilesList will answer with the folder list output coming from template.
 	FoldersFilesList(
 		loadFileContent func(ctx context.Context, path string) (string, error),
-		entries []*Entry,
+		entries []*models.Entry,
 	)
 	// NotFoundError will answer for not found error.
 	NotFoundError(

--- pkg/s3-proxy/response-handler/error-handlers.go ---
@@ -7,9 +7,11 @@ import (
 	"net/http"
 
 	"emperror.dev/errors"
-	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
+	authxmodels "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/log"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models/converter"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/templateutils"
 )
 
@@ -243,9 +245,9 @@ func (h *handler) handleGenericErrorTemplate(
 	logger.Error(err)
 
 	// Create data
-	data := &errorData{
-		Request: h.req,
-		User:    models.GetAuthenticatedUserFromContext(h.req.Context()),
+	data := &models.ErrorData{
+		Request: converter.ConvertAndSanitizeHTTPRequest(h.req),
+		User:    authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 		Error:   err,
 	}
 
@@ -303,9 +305,9 @@ func (h *handler) InternalServerError(
 		cfg.Templates.Helpers,
 	)
 	// Create data
-	data := errorData{
-		Request: h.req,
-		User:    models.GetAuthenticatedUserFromContext(h.req.Context()),
+	data := &models.ErrorData{
+		Request: converter.ConvertAndSanitizeHTTPRequest(h.req),
+		User:    authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 		Error:   err,
 	}
 

--- pkg/s3-proxy/response-handler/error-handlers_test.go ---
@@ -752,7 +752,7 @@ func Test_handler_handleGenericErrorTemplate(t *testing.T) {
 <html>
   <body>
     <h1>Internal Server Error</h1>
-    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *responsehandler.errorData</p>
+    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *models.ErrorData</p>
   </body>
 </html>`,
 		},
@@ -783,7 +783,7 @@ func Test_handler_handleGenericErrorTemplate(t *testing.T) {
 <html>
   <body>
     <h1>Internal Server Error</h1>
-    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *responsehandler.errorData</p>
+    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *models.ErrorData</p>
   </body>
 </html>`,
 		},
@@ -816,7 +816,7 @@ func Test_handler_handleGenericErrorTemplate(t *testing.T) {
 <html>
   <body>
     <h1>Internal Server Error</h1>
-    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *responsehandler.errorData</p>
+    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *models.ErrorData</p>
   </body>
 </html>`,
 		},
@@ -1408,7 +1408,7 @@ func Test_handler_InternalServerError(t *testing.T) {
 <html>
   <body>
     <h1>Internal Server Error</h1>
-    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type responsehandler.errorData</p>
+    <p>template: template-string-loaded:25:3: executing "template-string-loaded" at <.NotWorking>: can't evaluate field NotWorking in type *models.ErrorData</p>
   </body>
 </html>`,
 		},

--- pkg/s3-proxy/response-handler/handler.go ---
@@ -7,8 +7,10 @@ import (
 	"strings"
 
 	"emperror.dev/errors"
-	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
+	authxmodels "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models/converter"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/templateutils"
 )
 
@@ -45,7 +47,7 @@ func (h *handler) NotModified() {
 
 func (h *handler) Put(
 	loadFileContent func(ctx context.Context, path string) (string, error),
-	input *PutInput,
+	input *models.PutInput,
 ) {
 	// Get configuration
 	cfg := h.cfgManager.GetConfig()
@@ -71,9 +73,9 @@ func (h *handler) Put(
 	}
 
 	// Create data
-	data := &putData{
-		Request: h.req,
-		User:    models.GetAuthenticatedUserFromContext(h.req.Context()),
+	data := &models.PutData{
+		Request: converter.ConvertAndSanitizeHTTPRequest(h.req),
+		User:    authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 		PutData: input,
 	}
 
@@ -90,7 +92,7 @@ func (h *handler) Put(
 
 func (h *handler) Delete(
 	loadFileContent func(ctx context.Context, path string) (string, error),
-	input *DeleteInput,
+	input *models.DeleteInput,
 ) {
 	// Get configuration
 	cfg := h.cfgManager.GetConfig()
@@ -116,9 +118,9 @@ func (h *handler) Delete(
 	}
 
 	// Create data
-	data := &deleteData{
-		Request:    h.req,
-		User:       models.GetAuthenticatedUserFromContext(h.req.Context()),
+	data := &models.DeleteData{
+		Request:    converter.ConvertAndSanitizeHTTPRequest(h.req),
+		User:       authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 		DeleteData: input,
 	}
 
@@ -144,9 +146,9 @@ func (h *handler) TargetList() {
 	}
 
 	// Create data structure
-	data := targetListData{
-		Request: h.req,
-		User:    models.GetAuthenticatedUserFromContext(h.req.Context()),
+	data := &models.TargetListData{
+		Request: converter.ConvertAndSanitizeHTTPRequest(h.req),
+		User:    authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 		Targets: targets,
 	}
 
@@ -182,7 +184,7 @@ func (h *handler) RedirectWithTrailingSlash() {
 
 func (h *handler) StreamFile(
 	loadFileContent func(ctx context.Context, path string) (string, error),
-	input *StreamInput,
+	input *models.StreamInput,
 ) error {
 	// Get configuration
 	cfg := h.cfgManager.GetConfig()
@@ -214,9 +216,9 @@ func (h *handler) StreamFile(
 		}
 
 		// Create data structure
-		data := &streamFileHeaderData{
-			Request:    h.req,
-			User:       models.GetAuthenticatedUserFromContext(h.req.Context()),
+		data := &models.StreamFileHeaderData{
+			Request:    converter.ConvertAndSanitizeHTTPRequest(h.req),
+			User:       authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 			StreamFile: input,
 		}
 		// Manage headers
@@ -250,7 +252,7 @@ func (h *handler) StreamFile(
 
 func (h *handler) FoldersFilesList(
 	loadFileContent func(ctx context.Context, path string) (string, error),
-	entries []*Entry,
+	entries []*models.Entry,
 ) {
 	// Get config
 	cfg := h.cfgManager.GetConfig()
@@ -272,9 +274,9 @@ func (h *handler) FoldersFilesList(
 	}
 
 	// Create bucket list data for templating
-	data := &folderListingData{
-		Request:    h.req,
-		User:       models.GetAuthenticatedUserFromContext(h.req.Context()),
+	data := &models.FolderListingData{
+		Request:    converter.ConvertAndSanitizeHTTPRequest(h.req),
+		User:       authxmodels.GetAuthenticatedUserFromContext(h.req.Context()),
 		Entries:    entries,
 		BucketName: targetCfg.Bucket.Name,
 		Name:       targetCfg.Name,

--- pkg/s3-proxy/response-handler/internal-models.go ---
@@ -1,51 +0,0 @@
-package responsehandler
-
-import (
-	"net/http"
-
-	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
-)
-
-// folderListingData Folder listing data for templating.
-type folderListingData struct {
-	User       models.GenericUser
-	Request    *http.Request
-	BucketName string
-	Name       string
-	Entries    []*Entry
-}
-
-// errorData represents the structure used by error templating.
-type errorData struct {
-	Request *http.Request
-	User    models.GenericUser
-	Error   error
-}
-
-// targetListData represents the structure used by target list templating.
-type targetListData struct {
-	Request *http.Request
-	User    models.GenericUser
-	Targets map[string]interface{}
-}
-
-// streamFileHeaderData represents the structure used by stream file header templating.
-type streamFileHeaderData struct {
-	Request    *http.Request
-	User       models.GenericUser
-	StreamFile *StreamInput
-}
-
-// putData represents the structure used by put templating.
-type putData struct {
-	Request *http.Request
-	User    models.GenericUser
-	PutData *PutInput
-}
-
-// deleteData represents the structure used by delete templating.
-type deleteData struct {
-	Request    *http.Request
-	User       models.GenericUser
-	DeleteData *DeleteInput
-}

--- pkg/s3-proxy/response-handler/mocks/mock_ResponseHandler.go ---
@@ -14,14 +14,15 @@ import (
 	http "net/http"
 	reflect "reflect"
 
-	responsehandler "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler"
+	models "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
 	gomock "go.uber.org/mock/gomock"
 )
 
 // MockResponseHandler is a mock of ResponseHandler interface.
 type MockResponseHandler struct {
 	ctrl     *gomock.Controller
 	recorder *MockResponseHandlerMockRecorder
+	isgomock struct{}
 }
 
 // MockResponseHandlerMockRecorder is the mock recorder for MockResponseHandler.
@@ -42,51 +43,51 @@ func (m *MockResponseHandler) EXPECT() *MockResponseHandlerMockRecorder {
 }
 
 // BadRequestError mocks base method.
-func (m *MockResponseHandler) BadRequestError(arg0 func(context.Context, string) (string, error), arg1 error) {
+func (m *MockResponseHandler) BadRequestError(loadFileContent func(context.Context, string) (string, error), err error) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "BadRequestError", arg0, arg1)
+	m.ctrl.Call(m, "BadRequestError", loadFileContent, err)
 }
 
 // BadRequestError indicates an expected call of BadRequestError.
-func (mr *MockResponseHandlerMockRecorder) BadRequestError(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) BadRequestError(loadFileContent, err any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequestError", reflect.TypeOf((*MockResponseHandler)(nil).BadRequestError), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequestError", reflect.TypeOf((*MockResponseHandler)(nil).BadRequestError), loadFileContent, err)
 }
 
 // Delete mocks base method.
-func (m *MockResponseHandler) Delete(arg0 func(context.Context, string) (string, error), arg1 *responsehandler.DeleteInput) {
+func (m *MockResponseHandler) Delete(loadFileContent func(context.Context, string) (string, error), input *models.DeleteInput) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "Delete", arg0, arg1)
+	m.ctrl.Call(m, "Delete", loadFileContent, input)
 }
 
 // Delete indicates an expected call of Delete.
-func (mr *MockResponseHandlerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) Delete(loadFileContent, input any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResponseHandler)(nil).Delete), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResponseHandler)(nil).Delete), loadFileContent, input)
 }
 
 // FoldersFilesList mocks base method.
-func (m *MockResponseHandler) FoldersFilesList(arg0 func(context.Context, string) (string, error), arg1 []*responsehandler.Entry) {
+func (m *MockResponseHandler) FoldersFilesList(loadFileContent func(context.Context, string) (string, error), entries []*models.Entry) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "FoldersFilesList", arg0, arg1)
+	m.ctrl.Call(m, "FoldersFilesList", loadFileContent, entries)
 }
 
 // FoldersFilesList indicates an expected call of FoldersFilesList.
-func (mr *MockResponseHandlerMockRecorder) FoldersFilesList(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) FoldersFilesList(loadFileContent, entries any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FoldersFilesList", reflect.TypeOf((*MockResponseHandler)(nil).FoldersFilesList), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FoldersFilesList", reflect.TypeOf((*MockResponseHandler)(nil).FoldersFilesList), loadFileContent, entries)
 }
 
 // ForbiddenError mocks base method.
-func (m *MockResponseHandler) ForbiddenError(arg0 func(context.Context, string) (string, error), arg1 error) {
+func (m *MockResponseHandler) ForbiddenError(loadFileContent func(context.Context, string) (string, error), err error) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "ForbiddenError", arg0, arg1)
+	m.ctrl.Call(m, "ForbiddenError", loadFileContent, err)
 }
 
 // ForbiddenError indicates an expected call of ForbiddenError.
-func (mr *MockResponseHandlerMockRecorder) ForbiddenError(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) ForbiddenError(loadFileContent, err any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForbiddenError", reflect.TypeOf((*MockResponseHandler)(nil).ForbiddenError), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForbiddenError", reflect.TypeOf((*MockResponseHandler)(nil).ForbiddenError), loadFileContent, err)
 }
 
 // GetRequest mocks base method.
@@ -104,27 +105,27 @@ func (mr *MockResponseHandlerMockRecorder) GetRequest() *gomock.Call {
 }
 
 // InternalServerError mocks base method.
-func (m *MockResponseHandler) InternalServerError(arg0 func(context.Context, string) (string, error), arg1 error) {
+func (m *MockResponseHandler) InternalServerError(loadFileContent func(context.Context, string) (string, error), err error) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "InternalServerError", arg0, arg1)
+	m.ctrl.Call(m, "InternalServerError", loadFileContent, err)
 }
 
 // InternalServerError indicates an expected call of InternalServerError.
-func (mr *MockResponseHandlerMockRecorder) InternalServerError(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) InternalServerError(loadFileContent, err any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockResponseHandler)(nil).InternalServerError), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockResponseHandler)(nil).InternalServerError), loadFileContent, err)
 }
 
 // NotFoundError mocks base method.
-func (m *MockResponseHandler) NotFoundError(arg0 func(context.Context, string) (string, error)) {
+func (m *MockResponseHandler) NotFoundError(loadFileContent func(context.Context, string) (string, error)) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "NotFoundError", arg0)
+	m.ctrl.Call(m, "NotFoundError", loadFileContent)
 }
 
 // NotFoundError indicates an expected call of NotFoundError.
-func (mr *MockResponseHandlerMockRecorder) NotFoundError(arg0 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) NotFoundError(loadFileContent any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFoundError", reflect.TypeOf((*MockResponseHandler)(nil).NotFoundError), arg0)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFoundError", reflect.TypeOf((*MockResponseHandler)(nil).NotFoundError), loadFileContent)
 }
 
 // NotModified mocks base method.
@@ -152,27 +153,27 @@ func (mr *MockResponseHandlerMockRecorder) PreconditionFailed() *gomock.Call {
 }
 
 // Put mocks base method.
-func (m *MockResponseHandler) Put(arg0 func(context.Context, string) (string, error), arg1 *responsehandler.PutInput) {
+func (m *MockResponseHandler) Put(loadFileContent func(context.Context, string) (string, error), input *models.PutInput) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "Put", arg0, arg1)
+	m.ctrl.Call(m, "Put", loadFileContent, input)
 }
 
 // Put indicates an expected call of Put.
-func (mr *MockResponseHandlerMockRecorder) Put(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) Put(loadFileContent, input any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockResponseHandler)(nil).Put), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockResponseHandler)(nil).Put), loadFileContent, input)
 }
 
 // RedirectTo mocks base method.
-func (m *MockResponseHandler) RedirectTo(arg0 string) {
+func (m *MockResponseHandler) RedirectTo(url string) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "RedirectTo", arg0)
+	m.ctrl.Call(m, "RedirectTo", url)
 }
 
 // RedirectTo indicates an expected call of RedirectTo.
-func (mr *MockResponseHandlerMockRecorder) RedirectTo(arg0 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) RedirectTo(url any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectTo", reflect.TypeOf((*MockResponseHandler)(nil).RedirectTo), arg0)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectTo", reflect.TypeOf((*MockResponseHandler)(nil).RedirectTo), url)
 }
 
 // RedirectWithTrailingSlash mocks base method.
@@ -188,17 +189,17 @@ func (mr *MockResponseHandlerMockRecorder) RedirectWithTrailingSlash() *gomock.C
 }
 
 // StreamFile mocks base method.
-func (m *MockResponseHandler) StreamFile(arg0 func(context.Context, string) (string, error), arg1 *responsehandler.StreamInput) error {
+func (m *MockResponseHandler) StreamFile(loadFileContent func(context.Context, string) (string, error), input *models.StreamInput) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "StreamFile", arg0, arg1)
+	ret := m.ctrl.Call(m, "StreamFile", loadFileContent, input)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // StreamFile indicates an expected call of StreamFile.
-func (mr *MockResponseHandlerMockRecorder) StreamFile(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) StreamFile(loadFileContent, input any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamFile", reflect.TypeOf((*MockResponseHandler)(nil).StreamFile), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamFile", reflect.TypeOf((*MockResponseHandler)(nil).StreamFile), loadFileContent, input)
 }
 
 // TargetList mocks base method.
@@ -214,25 +215,25 @@ func (mr *MockResponseHandlerMockRecorder) TargetList() *gomock.Call {
 }
 
 // UnauthorizedError mocks base method.
-func (m *MockResponseHandler) UnauthorizedError(arg0 func(context.Context, string) (string, error), arg1 error) {
+func (m *MockResponseHandler) UnauthorizedError(loadFileContent func(context.Context, string) (string, error), err error) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "UnauthorizedError", arg0, arg1)
+	m.ctrl.Call(m, "UnauthorizedError", loadFileContent, err)
 }
 
 // UnauthorizedError indicates an expected call of UnauthorizedError.
-func (mr *MockResponseHandlerMockRecorder) UnauthorizedError(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) UnauthorizedError(loadFileContent, err any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnauthorizedError", reflect.TypeOf((*MockResponseHandler)(nil).UnauthorizedError), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnauthorizedError", reflect.TypeOf((*MockResponseHandler)(nil).UnauthorizedError), loadFileContent, err)
 }
 
 // UpdateRequestAndResponse mocks base method.
-func (m *MockResponseHandler) UpdateRequestAndResponse(arg0 *http.Request, arg1 http.ResponseWriter) {
+func (m *MockResponseHandler) UpdateRequestAndResponse(req *http.Request, res http.ResponseWriter) {
 	m.ctrl.T.Helper()
-	m.ctrl.Call(m, "UpdateRequestAndResponse", arg0, arg1)
+	m.ctrl.Call(m, "UpdateRequestAndResponse", req, res)
 }
 
 // UpdateRequestAndResponse indicates an expected call of UpdateRequestAndResponse.
-func (mr *MockResponseHandlerMockRecorder) UpdateRequestAndResponse(arg0, arg1 any) *gomock.Call {
+func (mr *MockResponseHandlerMockRecorder) UpdateRequestAndResponse(req, res any) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestAndResponse", reflect.TypeOf((*MockResponseHandler)(nil).UpdateRequestAndResponse), arg0, arg1)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestAndResponse", reflect.TypeOf((*MockResponseHandler)(nil).UpdateRequestAndResponse), req, res)
 }

--- pkg/s3-proxy/response-handler/models/converter/generated.go ---
@@ -0,0 +1,98 @@
+// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
+//go:build !goverter
+
+package converter
+
+import (
+	models "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
+	"net/http"
+	"net/url"
+)
+
+func init() {
+	ConvertAndSanitizeHTTPRequest = func(source *http.Request) *models.LightSanitizedRequest {
+		var pModelsLightSanitizedRequest *models.LightSanitizedRequest
+		if source != nil {
+			var modelsLightSanitizedRequest models.LightSanitizedRequest
+			modelsLightSanitizedRequest.URL = sanitizeURL((*source).URL)
+			modelsLightSanitizedRequest.Header = httpHeaderToHttpHeader((*source).Header)
+			modelsLightSanitizedRequest.Trailer = httpHeaderToHttpHeader((*source).Trailer)
+			modelsLightSanitizedRequest.RemoteAddr = sanitizeString((*source).RemoteAddr)
+			modelsLightSanitizedRequest.Method = sanitizeString((*source).Method)
+			modelsLightSanitizedRequest.Proto = sanitizeString((*source).Proto)
+			modelsLightSanitizedRequest.Pattern = sanitizeString((*source).Pattern)
+			modelsLightSanitizedRequest.RequestURI = sanitizeString((*source).RequestURI)
+			modelsLightSanitizedRequest.Host = sanitizeString((*source).Host)
+			if (*source).TransferEncoding != nil {
+				modelsLightSanitizedRequest.TransferEncoding = make([]string, len((*source).TransferEncoding))
+				for i := 0; i < len((*source).TransferEncoding); i++ {
+					modelsLightSanitizedRequest.TransferEncoding[i] = sanitizeString((*source).TransferEncoding[i])
+				}
+			}
+			modelsLightSanitizedRequest.ProtoMajor = (*source).ProtoMajor
+			modelsLightSanitizedRequest.ContentLength = (*source).ContentLength
+			modelsLightSanitizedRequest.ProtoMinor = (*source).ProtoMinor
+			pModelsLightSanitizedRequest = &modelsLightSanitizedRequest
+		}
+		return pModelsLightSanitizedRequest
+	}
+	sanitizeURL = func(source *url.URL) *url.URL {
+		var pUrlURL *url.URL
+		if source != nil {
+			var urlURL url.URL
+			urlURL.Scheme = sanitizeString((*source).Scheme)
+			urlURL.Opaque = sanitizeString((*source).Opaque)
+			urlURL.User = sanitizeURLUserInfo((*source).User)
+			urlURL.Host = sanitizeString((*source).Host)
+			urlURL.Path = sanitizeString((*source).Path)
+			urlURL.RawPath = sanitizeString((*source).RawPath)
+			urlURL.OmitHost = (*source).OmitHost
+			urlURL.ForceQuery = (*source).ForceQuery
+			urlURL.RawQuery = sanitizeString((*source).RawQuery)
+			urlURL.Fragment = sanitizeString((*source).Fragment)
+			urlURL.RawFragment = sanitizeString((*source).RawFragment)
+			pUrlURL = &urlURL
+		}
+		return pUrlURL
+	}
+}
+func httpHeaderToHttpHeader(source http.Header) http.Header {
+	var httpHeader http.Header
+	if source != nil {
+		httpHeader = make(http.Header, len(source))
+		for key, value := range source {
+			var stringList []string
+			if value != nil {
+				stringList = make([]string, len(value))
+				for i := 0; i < len(value); i++ {
+					stringList[i] = sanitizeString(value[i])
+				}
+			}
+			httpHeader[sanitizeString(key)] = stringList
+		}
+	}
+	return httpHeader
+}
+func init() {
+	ConvertSanitizedToHTTPRequest = func(source *models.LightSanitizedRequest) *http.Request {
+		var pHttpRequest *http.Request
+		if source != nil {
+			var httpRequest http.Request
+			httpRequest.Method = (*source).Method
+			httpRequest.URL = identity((*source).URL)
+			httpRequest.Proto = (*source).Proto
+			httpRequest.ProtoMajor = (*source).ProtoMajor
+			httpRequest.ProtoMinor = (*source).ProtoMinor
+			httpRequest.Header = identity((*source).Header)
+			httpRequest.ContentLength = (*source).ContentLength
+			httpRequest.TransferEncoding = identity((*source).TransferEncoding)
+			httpRequest.Host = (*source).Host
+			httpRequest.Trailer = identity((*source).Trailer)
+			httpRequest.RemoteAddr = (*source).RemoteAddr
+			httpRequest.RequestURI = (*source).RequestURI
+			httpRequest.Pattern = (*source).Pattern
+			pHttpRequest = &httpRequest
+		}
+		return pHttpRequest
+	}
+}

--- pkg/s3-proxy/response-handler/models/converter/interface.go ---
@@ -0,0 +1,66 @@
+package converter
+
+import (
+	"net/http"
+	"net/url"
+
+	"github.com/microcosm-cc/bluemonday"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
+)
+
+//go:generate goverter gen .
+
+// goverter:variables
+// goverter:output:format assign-variable
+// goverter:output:file ./generated.go
+// goverter:output:package github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models/converter
+// goverter:extend sanitizeString
+var (
+	ConvertAndSanitizeHTTPRequest func(source *http.Request) *models.LightSanitizedRequest
+	// goverter:map User | sanitizeURLUserInfo
+	sanitizeURL func(source *url.URL) *url.URL
+)
+
+// goverter:variables
+// goverter:output:format assign-variable
+// goverter:output:file ./generated.go
+// goverter:output:package github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models/converter
+var (
+	// goverter:map URL | identity
+	// goverter:map Header | identity
+	// goverter:map Trailer | identity
+	// goverter:map TransferEncoding | identity
+	// goverter:ignore Body
+	// goverter:ignore GetBody
+	// goverter:ignore Close
+	// goverter:ignore Form
+	// goverter:ignore PostForm
+	// goverter:ignore MultipartForm
+	// goverter:ignore TLS
+	// goverter:ignore Cancel
+	// goverter:ignore Response
+	// goverter:ignore ctx
+	// goverter:ignore pat
+	// goverter:ignore matches
+	// goverter:ignore otherValues
+	ConvertSanitizedToHTTPRequest func(source *models.LightSanitizedRequest) *http.Request
+)
+
+// Need to do this by hand since fields are private
+// Note: Only manage username to avoid potential password leak.
+func sanitizeURLUserInfo(user *url.Userinfo) *url.Userinfo {
+	// Check nil case
+	if user == nil {
+		return nil
+	}
+
+	return url.User(sanitizeString(user.Username()))
+}
+
+func identity[T any](input T) T {
+	return input
+}
+
+func sanitizeString(s string) string {
+	return bluemonday.StrictPolicy().Sanitize(s)
+}

--- pkg/s3-proxy/response-handler/models/converter/sanitize_test.go ---
@@ -0,0 +1,457 @@
+//go:build unit
+
+package converter
+
+import (
+	"net/http"
+	"net/url"
+	"testing"
+
+	models "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
+	"github.com/stretchr/testify/assert"
+)
+
+func TestConvertAndSanitizeHttpRequest(t *testing.T) {
+	type args struct {
+		buildSource func() (*http.Request, error)
+	}
+	tests := []struct {
+		name string
+		args args
+		want *models.LightSanitizedRequest
+	}{
+		{
+			name: "sanitize url path with img onerror",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/<img src="x" onerror="alert(1)">`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL: u,
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "/",
+				},
+			},
+		},
+		{
+			name: "sanitize url path with script",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/text-fake<script src="http://fake.com/fake.js"/>`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL: u,
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/text-fake",
+					RawPath: "/text-fake",
+				},
+			},
+		},
+		{
+			name: "sanitize method with script only",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: `<script src="http://fake.com/fake.js"/>`,
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+			},
+		},
+		{
+			name: "sanitize method with script and method",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: `GET<script src="http://fake.com/fake.js"/>`,
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+			},
+		},
+		{
+			name: "sanitize proto with script and proto",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Proto:  `HTTP1/1<script src="http://fake.com/fake.js"/>`,
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Proto:  "HTTP1/1",
+			},
+		},
+		{
+			name: "sanitize headers with script only has first value",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Header: http.Header{
+							"FAKE": []string{`<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Header: http.Header{
+					"FAKE": []string{""},
+				},
+			},
+		},
+		{
+			name: "sanitize headers with script and value has first value",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Header: http.Header{
+							"FAKE": []string{`fake<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Header: http.Header{
+					"FAKE": []string{"fake"},
+				},
+			},
+		},
+		{
+			name: "sanitize headers with script only has second value",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Header: http.Header{
+							"FAKE": []string{"fake", `<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Header: http.Header{
+					"FAKE": []string{"fake", ""},
+				},
+			},
+		},
+		{
+			name: "sanitize headers with script and value has second value",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Header: http.Header{
+							"FAKE": []string{"fake", `fake2<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Header: http.Header{
+					"FAKE": []string{"fake", "fake2"},
+				},
+			},
+		},
+		{
+			name: "sanitize headers with script only has first value on second header",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Header: http.Header{
+							"OK":   []string{"fake"},
+							"FAKE": []string{`<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Header: http.Header{
+					"OK":   []string{"fake"},
+					"FAKE": []string{""},
+				},
+			},
+		},
+		{
+			name: "sanitize headers with script and value has first value on second header",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Header: http.Header{
+							"EMAIL": []string{"fake@fake.com"},
+							"FAKE":  []string{`fake<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Header: http.Header{
+					"EMAIL": []string{"fake@fake.com"},
+					"FAKE":  []string{"fake"},
+				},
+			},
+		},
+		{
+			name: "sanitize transfer encoding with script only",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:              u,
+						TransferEncoding: []string{`<script src="http://fake.com/fake.js"/>`},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				TransferEncoding: []string{""},
+			},
+		},
+		{
+			name: "sanitize transfer encoding with script and value",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:              u,
+						TransferEncoding: []string{`fake<script src="http://fake.com/fake.js"/>`},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				TransferEncoding: []string{"fake"},
+			},
+		},
+		{
+			name: "sanitize transfer encoding with p and value",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:              u,
+						TransferEncoding: []string{`fake<p>fake</p>`},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				TransferEncoding: []string{"fakefake"},
+			},
+		},
+		{
+			name: "sanitize trailers with script and value has first value on second header",
+			args: args{
+				buildSource: func() (*http.Request, error) {
+					u, err := url.Parse(`http://fake.com/`)
+					if err != nil {
+						return nil, err
+					}
+
+					return &http.Request{
+						URL:    u,
+						Method: "GET",
+						Trailer: http.Header{
+							"OK":   []string{"fake"},
+							"FAKE": []string{`fake<script src="http://fake.com/fake.js"/>`},
+						},
+					}, nil
+				},
+			},
+			want: &models.LightSanitizedRequest{
+				URL: &url.URL{
+					Scheme:  "http",
+					Host:    "fake.com",
+					Path:    "/",
+					RawPath: "",
+				},
+				Method: "GET",
+				Trailer: http.Header{
+					"OK":   []string{"fake"},
+					"FAKE": []string{"fake"},
+				},
+			},
+		},
+	}
+	t.Parallel()
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			// Build req
+			req, err := tt.args.buildSource()
+
+			if assert.NoError(t, err) {
+				got := ConvertAndSanitizeHTTPRequest(req)
+
+				assert.Equal(t, tt.want, got)
+			}
+		})
+	}
+}

--- pkg/s3-proxy/response-handler/models/inputs.go ---
@@ -0,0 +1,48 @@
+package models
+
+import (
+	"io"
+	"time"
+)
+
+// Entry Entry with path for internal use (template).
+type Entry struct {
+	LastModified time.Time
+	Type         string
+	ETag         string
+	Name         string
+	Key          string
+	Path         string
+	Size         int64
+}
+
+// StreamInput represents a stream input file.
+type StreamInput struct {
+	LastModified       time.Time
+	Body               io.ReadCloser
+	Metadata           map[string]string
+	CacheControl       string
+	Expires            string
+	ContentDisposition string
+	ContentEncoding    string
+	ContentLanguage    string
+	ContentRange       string
+	ContentType        string
+	ETag               string
+	ContentLength      int64
+}
+
+// PutInput represents a put input.
+type PutInput struct {
+	Metadata     map[string]string
+	Key          string
+	ContentType  string
+	StorageClass string
+	Filename     string
+	ContentSize  int64
+}
+
+// DeleteInput represents a delete input.
+type DeleteInput struct {
+	Key string
+}

--- pkg/s3-proxy/response-handler/models/internal-models.go ---
@@ -0,0 +1,49 @@
+package models
+
+import (
+	authxmodels "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
+)
+
+// folderListingData Folder listing data for templating.
+type FolderListingData struct {
+	User       authxmodels.GenericUser
+	Request    *LightSanitizedRequest
+	BucketName string
+	Name       string
+	Entries    []*Entry
+}
+
+// errorData represents the structure used by error templating.
+type ErrorData struct {
+	Request *LightSanitizedRequest
+	User    authxmodels.GenericUser
+	Error   error
+}
+
+// targetListData represents the structure used by target list templating.
+type TargetListData struct {
+	Request *LightSanitizedRequest
+	User    authxmodels.GenericUser
+	Targets map[string]interface{}
+}
+
+// streamFileHeaderData represents the structure used by stream file header templating.
+type StreamFileHeaderData struct {
+	Request    *LightSanitizedRequest
+	User       authxmodels.GenericUser
+	StreamFile *StreamInput
+}
+
+// putData represents the structure used by put templating.
+type PutData struct {
+	Request *LightSanitizedRequest
+	User    authxmodels.GenericUser
+	PutData *PutInput
+}
+
+// deleteData represents the structure used by delete templating.
+type DeleteData struct {
+	Request    *LightSanitizedRequest
+	User       authxmodels.GenericUser
+	DeleteData *DeleteInput
+}

--- pkg/s3-proxy/response-handler/models/request.go ---
@@ -0,0 +1,22 @@
+package models
+
+import (
+	"net/http"
+	"net/url"
+)
+
+type LightSanitizedRequest struct {
+	URL              *url.URL
+	Header           http.Header
+	Trailer          http.Header
+	RemoteAddr       string
+	Method           string
+	Proto            string
+	Pattern          string
+	RequestURI       string
+	Host             string
+	TransferEncoding []string
+	ProtoMajor       int
+	ContentLength    int64
+	ProtoMinor       int
+}

--- pkg/s3-proxy/response-handler/utils.go ---
@@ -10,6 +10,7 @@ import (
 
 	"emperror.dev/errors"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
 	utils "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/generalutils"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/templateutils"
 )
@@ -101,7 +102,7 @@ func (h *handler) send(bodyBuf io.WriterTo, headers map[string]string, status in
 	return nil
 }
 
-func setHeadersFromObjectOutput(w http.ResponseWriter, obj *StreamInput) {
+func setHeadersFromObjectOutput(w http.ResponseWriter, obj *models.StreamInput) {
 	setStrHeader(w, "Cache-Control", obj.CacheControl)
 	setStrHeader(w, "Expires", obj.Expires)
 	setStrHeader(w, "Content-Disposition", obj.ContentDisposition)
@@ -118,7 +119,7 @@ func setHeadersFromObjectOutput(w http.ResponseWriter, obj *StreamInput) {
 	w.WriteHeader(httpStatus)
 }
 
-func determineHTTPStatus(obj *StreamInput) int {
+func determineHTTPStatus(obj *models.StreamInput) int {
 	contentRangeIsGiven := len(obj.ContentRange) > 0
 	// Check if content will be partial
 	if contentRangeIsGiven {
@@ -132,7 +133,7 @@ func determineHTTPStatus(obj *StreamInput) int {
 	return http.StatusOK
 }
 
-func totalFileSizeEqualToContentRange(obj *StreamInput) bool {
+func totalFileSizeEqualToContentRange(obj *models.StreamInput) bool {
 	totalSizeIsEqualToContentRange := false
 	// Calculate total file size
 	totalSize, err := strconv.ParseInt(getFileSizeAsString(obj), 10, 64)
@@ -149,7 +150,7 @@ func totalFileSizeEqualToContentRange(obj *StreamInput) bool {
 *
 See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range
 */
-func getFileSizeAsString(obj *StreamInput) string {
+func getFileSizeAsString(obj *models.StreamInput) string {
 	s := strings.Split(obj.ContentRange, "/")
 	totalSizeString := s[1]
 	totalSizeString = strings.TrimSpace(totalSizeString)

--- pkg/s3-proxy/response-handler/utils_test.go ---
@@ -10,6 +10,7 @@ import (
 	"time"
 
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/authx/models"
+	responsehandlermodels "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
 	"github.com/stretchr/testify/assert"
 )
 
@@ -182,7 +183,7 @@ func Test_setHeadersFromObjectOutput(t *testing.T) {
 	headerPartialInput.Add("Last-Modified", now.UTC().Format(http.TimeFormat))
 	// Structures
 	type args struct {
-		obj *StreamInput
+		obj *responsehandlermodels.StreamInput
 	}
 	tests := []struct {
 		name            string
@@ -193,15 +194,15 @@ func Test_setHeadersFromObjectOutput(t *testing.T) {
 		{
 			name: "Empty input",
 			args: args{
-				obj: &StreamInput{},
+				obj: &responsehandlermodels.StreamInput{},
 			},
 			expectedHeaders: headerEmpty,
 			expectedCode:    http.StatusOK,
 		},
 		{
 			name: "Full input",
 			args: args{
-				obj: &StreamInput{
+				obj: &responsehandlermodels.StreamInput{
 					CacheControl:       "cachecontrol",
 					Expires:            "expires",
 					ContentDisposition: "contentdisposition",
@@ -220,7 +221,7 @@ func Test_setHeadersFromObjectOutput(t *testing.T) {
 		{
 			name: "Partial input",
 			args: args{
-				obj: &StreamInput{
+				obj: &responsehandlermodels.StreamInput{
 					CacheControl:       "cachecontrol",
 					Expires:            "expires",
 					ContentDisposition: "contentdisposition",

--- pkg/s3-proxy/utils/templateutils/template.go ---
@@ -11,6 +11,8 @@ import (
 	"github.com/Masterminds/sprig/v3"
 	"github.com/dustin/go-humanize"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models"
+	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/response-handler/models/converter"
 	"github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/utils/generalutils"
 )
 
@@ -140,11 +142,20 @@ func s3ProxyFuncMap(t *template.Template) template.FuncMap {
 		return humanize.Bytes(uint64(fmt))
 	}
 	// Add request URI function
-	funcMap["requestURI"] = generalutils.GetRequestURI
+	funcMap["requestURI"] = func(input *models.LightSanitizedRequest) string {
+		// Convert light sanitized http request to http request to use generic functions
+		return generalutils.GetRequestURI(converter.ConvertSanitizedToHTTPRequest(input))
+	}
 	// Add request scheme function
-	funcMap["requestScheme"] = generalutils.GetRequestScheme
+	funcMap["requestScheme"] = func(input *models.LightSanitizedRequest) string {
+		// Convert light sanitized http request to http request to use generic functions
+		return generalutils.GetRequestScheme(converter.ConvertSanitizedToHTTPRequest(input))
+	}
 	// Add request host function
-	funcMap["requestHost"] = generalutils.GetRequestHost
+	funcMap["requestHost"] = func(input *models.LightSanitizedRequest) string {
+		// Convert light sanitized http request to http request to use generic functions
+		return generalutils.GetRequestHost(converter.ConvertSanitizedToHTTPRequest(input))
+	}
 	// Add the 'include' function here so we can close over t.
 	// Copied from Helm: https://github.com/helm/helm/blob/3d1bc72827e4edef273fb3d8d8ded2a25fa6f39d/pkg/engine/engine.go#L112
 	funcMap["include"] = func(name string, data interface{}) (string, error) {
@@ -185,3 +196,5 @@ func s3ProxyFuncMap(t *template.Template) template.FuncMap {
 	// Return result
 	return template.FuncMap(funcMap)
 }
+
+// func lightSanitizedRequestToHttpRequest()

