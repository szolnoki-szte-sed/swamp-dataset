--- app/src/main/java/com/gero/newpass/encryption/PasswordUtils.java ---
@@ -0,0 +1,61 @@
+package com.gero.newpass.encryption;
+
+import android.util.Base64;
+import android.util.Log;
+
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import java.util.Arrays;
+
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
+
+public class PasswordUtils {
+
+    private static final int SALT_LENGTH = 16;   // in bytes (at least 16 bytes)
+    private static final int HASH_LENGTH = 256; // in bits
+    private static final int ITERATIONS = 10000;
+
+    public static String hashPassword(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
+
+        SecureRandom random = new SecureRandom();
+        byte[] salt = new byte[SALT_LENGTH];
+        random.nextBytes(salt);
+
+
+        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, HASH_LENGTH);
+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
+        byte[] hash = keyFactory.generateSecret(spec).getEncoded();
+
+        String saltBase64 = Base64.encodeToString(salt, Base64.NO_WRAP);
+        String hashBase64 = Base64.encodeToString(hash, Base64.NO_WRAP);
+
+        return saltBase64 + ":" + hashBase64;
+    }
+
+    public static boolean verifyPassword(String password, String storedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException {
+
+        String[] parts = storedPassword.split(":");
+
+        if (parts.length != 2) {
+            throw new IllegalArgumentException("Stored password must have the format 'salt:hash'");
+        }
+
+        String saltBase64 = parts[0];
+        String hashBase64 = parts[1];
+
+        byte[] salt = Base64.decode(saltBase64, Base64.NO_WRAP);
+        byte[] hash = Base64.decode(hashBase64, Base64.NO_WRAP);
+
+        /*
+        The password provided by the user during the login attempt is hashed using the same algorithm,
+        the same number of iterations and the same salt retrieved from the database.
+         */
+        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, hash.length * 8);
+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
+        byte[] testHash = keyFactory.generateSecret(spec).getEncoded();
+
+        return java.util.Arrays.equals(hash, testHash);
+    }
+}

--- app/src/main/java/com/gero/newpass/view/activities/LoginActivity.java ---
@@ -39,6 +39,8 @@
 import com.gero.newpass.utilities.VibrationHelper;
 import com.gero.newpass.viewmodel.LoginViewModel;
 
+import java.security.NoSuchAlgorithmException;
+import java.security.spec.InvalidKeySpecException;
 import java.util.Locale;
 
 public class LoginActivity extends AppCompatActivity {
@@ -73,11 +75,11 @@ protected void onCreate(Bundle savedInstanceState) {
         });
 
         loginViewModel.getLoginSuccessLiveData().observe(this, success -> {
-            String savedPasswordSharedPreferences = encryptedSharedPreferences.getString("password", "");
+            String hashedPassword = encryptedSharedPreferences.getString("password", "");
 
             if (success) {
                 Intent intent = new Intent(LoginActivity.this, MainViewActivity.class);
-                StringHelper.setSharedString(savedPasswordSharedPreferences);
+                StringHelper.setSharedString(hashedPassword);
                 startActivity(intent);
                 finish();
             } else {
@@ -90,8 +92,8 @@ protected void onCreate(Bundle savedInstanceState) {
         //Determining whether to set dark or light mode based on shared preferences
         SharedPreferencesHelper.toggleDarkLightModeUI(this);
 
-        String password = encryptedSharedPreferences.getString("password", "");
-        Boolean isPasswordEmpty = password.isEmpty();
+        String hashedPassword = encryptedSharedPreferences.getString("password", "");
+        Boolean isPasswordEmpty = hashedPassword.isEmpty();
 
         if (!isPasswordEmpty) {
             textViewRegisterOrUnlock.setText(getString(R.string.unlock_newpass_button_text));
@@ -179,7 +181,11 @@ private void registerUser() {
 
         buttonRegisterOrUnlock.setOnClickListener(v -> {
             String passwordInput = passwordEntry.getText().toString();
-            loginViewModel.createUser(passwordInput, encryptedSharedPreferences);
+            try {
+                loginViewModel.createUser(passwordInput, encryptedSharedPreferences);
+            } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
+                throw new RuntimeException(e);
+            }
             VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Strong);
         });
     }
@@ -213,7 +219,11 @@ private void loginWithPassword(View view) {
                     return true;
                 case MotionEvent.ACTION_UP:
                     v.performClick();
-                    loginViewModel.loginUserWithPassword(passwordInput, encryptedSharedPreferences);
+                    try {
+                        loginViewModel.loginUserWithPassword(passwordInput, encryptedSharedPreferences);
+                    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
+                        throw new RuntimeException(e);
+                    }
                     VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Strong);
                     return true;
             }

--- app/src/main/java/com/gero/newpass/viewmodel/LoginViewModel.java ---
@@ -15,8 +15,11 @@
 import androidx.security.crypto.EncryptedSharedPreferences;
 
 import com.gero.newpass.R;
+import com.gero.newpass.encryption.PasswordUtils;
 import com.gero.newpass.repository.ResourceRepository;
 
+import java.security.NoSuchAlgorithmException;
+import java.security.spec.InvalidKeySpecException;
 import java.util.concurrent.Executor;
 
 public class LoginViewModel extends ViewModel {
@@ -40,11 +43,11 @@ public LiveData<Boolean> getLoginSuccessLiveData() {
 
 
 
-    public void loginUserWithPassword(String password, EncryptedSharedPreferences sharedPreferences) {
+    public void loginUserWithPassword(String password, EncryptedSharedPreferences sharedPreferences) throws NoSuchAlgorithmException, InvalidKeySpecException {
 
-        String savedPasswordSharedPreferences = sharedPreferences.getString("password", "");
+        String hashedPassword = sharedPreferences.getString("password", "");
 
-        if (savedPasswordSharedPreferences.equals(password)) {
+        if (PasswordUtils.verifyPassword(password, hashedPassword)) {
             loginSuccessLiveData.setValue(true);
             loginMessageLiveData.setValue(resourceRepository.getString(R.string.login_done));
         } else {
@@ -88,11 +91,13 @@ public void onAuthenticationFailed() {
     }
 
 
-    public void createUser(String password, EncryptedSharedPreferences sharedPreferences) {
+    public void createUser(String password, EncryptedSharedPreferences sharedPreferences) throws NoSuchAlgorithmException, InvalidKeySpecException {
 
         if (password.length() >= 4) {
             SharedPreferences.Editor editor = sharedPreferences.edit();
-            editor.putString("password", password);
+
+            String hashedPassword = PasswordUtils.hashPassword(password);
+            editor.putString("password", hashedPassword);
             editor.apply();
 
             loginSuccessLiveData.setValue(true);

