--- pkg/git/submodules/update.go ---
@@ -15,7 +15,7 @@ import (
 func Update(dir, owner, repo, version string, wt *git.Worktree) error {
 
 	// update the .gitmodule config file
-	submodules, err := updateConfigfile(dir, owner, repo, version)
+	submodules, err := updateConfigFile(dir, owner, repo, version)
 	if err != nil {
 		return errors.Wrap(err, "failed to update gitmodules file")
 	}
@@ -30,7 +30,7 @@ func Update(dir, owner, repo, version string, wt *git.Worktree) error {
 	return nil
 }
 
-func updateConfigfile(dir, owner, repo, version string) ([]string, error) {
+func updateConfigFile(dir, owner, repo, version string) ([]string, error) {
 	var submodules []string
 	filename := filepath.Join(dir, ".gitmodules")
 	data, err := os.ReadFile(filename)

--- pkg/git/submodules/update_test.go ---
@@ -10,17 +10,17 @@ import (
 	"github.com/stretchr/testify/assert"
 )
 
-func TestSubmodules_update(t *testing.T) {
+func TestSubmodules_updateConfigFile(t *testing.T) {
 
 	dir := t.TempDir()
 
-	data, err := os.ReadFile(filepath.Join("testdata", ".gitmodules"))
+	data, err := os.ReadFile(filepath.Join("testdata", "multiple_submodules", ".gitmodules"))
 	assert.NoError(t, err)
 
 	err = os.WriteFile(filepath.Join(dir, ".gitmodules"), data, 0666)
 	assert.NoError(t, err)
 
-	_, err = updateConfigfile(dir, "foo", "bar", "v1.2.4")
+	_, err = updateConfigFile(dir, "foo", "bar", "v1.2.4")
 	assert.NoError(t, err)
 
 	data, err = os.ReadFile(filepath.Join(dir, ".gitmodules"))

--- pkg/update/update.go ---
@@ -104,10 +104,19 @@ func (o *Options) Update() error {
 		defer os.Remove(tempDir)
 	}
 
-	repo, err := git.PlainClone(tempDir, false, &git.CloneOptions{
+	cloneOpts := &git.CloneOptions{
 		URL:      o.RepoURI,
 		Progress: os.Stdout,
-	})
+	}
+	gitToken := os.Getenv("GITHUB_TOKEN")
+	if gitToken != "" {
+		cloneOpts.Auth = &gitHttp.BasicAuth{
+			Username: "abc123",
+			Password: gitToken,
+		}
+	}
+
+	repo, err := git.PlainClone(tempDir, false, cloneOpts)
 	if err != nil {
 		return fmt.Errorf("failed to clone repository %s into %s: %w", o.RepoURI, tempDir, err)
 	}

