--- src/base/PluginTrait.php ---
@@ -28,6 +28,7 @@
 use verbb\formie\services\Tokens;
 use verbb\formie\web\assets\forms\FormsAsset;
 use verbb\base\BaseHelper;
+use verbb\base\services\Templates;
 
 use Craft;
 
@@ -182,6 +183,11 @@ public function getSyncs(): Syncs
         return $this->get('syncs');
     }
 
+    public function getTemplates(): Templates
+    {
+        return $this->get('templates');
+    }
+
     public function getTokens(): Tokens
     {
         return $this->get('tokens');
@@ -222,6 +228,10 @@ private function _registerComponents(): void
             'submissions' => Submissions::class,
             'subscriptions' => Subscriptions::class,
             'syncs' => Syncs::class,
+            'templates' => [
+                'class' => Templates::class,
+                'pluginClass' => Formie::class,
+            ],
             'tokens' => Tokens::class,
             'vite' => [
                 'class' => VitePluginService::class,

--- src/base/Webhook.php ---
@@ -1,6 +1,7 @@
 <?php
 namespace verbb\formie\base;
 
+use verbb\formie\Formie;
 use verbb\formie\elements\Submission;
 use verbb\formie\events\ModifyWebhookPayloadEvent;
 
@@ -87,7 +88,7 @@ protected function generatePayloadValues(Submission $submission): array
 
     protected function getWebhookUrl($url, Submission $submission): bool|string|null
     {
-        $url = Craft::$app->getView()->renderObjectTemplate($url, $submission);
+        $url = Formie::$plugin->getTemplates()->renderObjectTemplate($url, $submission);
 
         return App::parseEnv($url);
     }

--- src/controllers/FormsController.php ---
@@ -356,7 +356,7 @@ public function actionDeleteForm(): ?Response
 
         if ($this->request->getAcceptsJson()) {
             $url = $this->request->getValidatedBodyParam('redirect');
-            $url = Craft::$app->getView()->renderObjectTemplate($url, $form);
+            $url = Formie::$plugin->getTemplates()->renderObjectTemplate($url, $form);
 
             return $this->asJson([
                 'success' => false,

--- src/controllers/SubmissionsController.php ---
@@ -693,7 +693,7 @@ public function actionSubmit(): ?Response
             // Refresh, there's still more pages to complete. Or check if we should "redirect" to a template-defined
             // URL, which is set for every page (commonly the first one, once a submission is available)
             if ($settings->pageRedirectUrl) {
-                $url = $this->getView()->renderObjectTemplate($settings->pageRedirectUrl, $submission);
+                $url = Formie::$plugin->getTemplates()->renderObjectTemplate($settings->pageRedirectUrl, $submission);
 
                 return $this->redirect($url);
             }
@@ -1015,7 +1015,7 @@ private function _returnJsonResponse($success, $submission, $form, $nextPage, $e
             $redirect = $form->getRedirectUrl();
         }
 
-        $redirectUrl = Craft::$app->getView()->renderObjectTemplate($redirect, $submission);
+        $redirectUrl = Formie::$plugin->getTemplates()->renderObjectTemplate($redirect, $submission);
 
         $params = array_merge([
             'success' => $success,
@@ -1189,10 +1189,7 @@ private function _checkPageFieldErrors($submission, $form, $nextPage)
 
     private function _setTitle($submission, $form): void
     {
-        // Prevent users using long-hand Twig `{{` to prevent injection execution
-        $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $form->settings->submissionTitleFormat);
-
-        $submission->title = Variables::getParsedValue($submissionTitleFormat, $submission, $form);
+        $submission->title = Variables::getParsedValue($form->settings->submissionTitleFormat, $submission, $form);
 
         // Set the default title for the submission, so it can save correctly
         if (!$submission->title) {

--- src/elements/Submission.php ---
@@ -535,10 +535,7 @@ public function getCpEditUrl(): ?string
 
     public function updateTitle($form): void
     {
-        // Prevent users using long-hand Twig `{{` to prevent injection execution
-        $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $form->settings->submissionTitleFormat);
-
-        if ($customTitle = Variables::getParsedValue($submissionTitleFormat, $this, $form)) {
+        if ($customTitle = Variables::getParsedValue($form->settings->submissionTitleFormat, $this, $form)) {
             $this->title = $customTitle;
 
             // Rather than re-save, directly update the submission record

--- src/fields/formfields/Hidden.php ---
@@ -125,8 +125,6 @@ public function serializeValue(mixed $value, ?ElementInterface $element = null):
                 $value = $this->defaultValue;
             }
 
-            // Prevent users using long-hand Twig `{{` to prevent injection execution
-            $value = str_replace(['{{', '}}'], ['{', '}'], $value);
             $value = Variables::getParsedValue($value, $element);
 
             // Immediately update the value for the element, so integrations use the up-to-date value

--- src/gql/resolvers/mutations/SubmissionResolver.php ---
@@ -93,10 +93,7 @@ public function saveSubmission($source, array $arguments, $context, ResolveInfo
         if (!$submission->title) {
             $settings = $form->settings;
 
-            // Prevent users using long-hand Twig `{{` to prevent injection execution
-            $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $settings->submissionTitleFormat);
-
-            $submission->title = Variables::getParsedValue($submissionTitleFormat, $submission, $form);
+            $submission->title = Variables::getParsedValue($settings->submissionTitleFormat, $submission, $form);
 
             if (!$submission->title) {
                 $timeZone = Craft::$app->getTimeZone();

--- src/helpers/Variables.php ---
@@ -263,10 +263,8 @@ public static function getParsedValue(mixed $value, Submission $submission = nul
         $variables = Formie::$plugin->getRenderCache()->getVariables($cacheKey);
 
         // Try to parse submission + extra variables
-        $view = Craft::$app->getView();
-
         try {
-            return $view->renderObjectTemplate($value, $submission, $variables);
+            return Formie::$plugin->getTemplates()->renderObjectTemplate($value, $submission, $variables);
         } catch (Throwable $e) {
             Formie::error(Craft::t('formie', 'Failed to render dynamic string “{value}”. Template error: “{message}” {file}:{line}', [
                 'value' => $originalValue,

--- src/services/Emails.php ---
@@ -658,7 +658,7 @@ private function _attachPdfToEmail(Notification $notification, Message $message,
 
         // Generate the filename correctly.
         $filenameFormat = $template->filenameFormat ?? 'Submission-{submission.id}';
-        $fileName = Craft::$app->getView()->renderObjectTemplate($filenameFormat, $variables);
+        $fileName = Formie::$plugin->getTemplates()->renderObjectTemplate($filenameFormat, $variables);
 
         $message->attach($pdfPath, ['fileName' => $fileName . '.pdf', 'contentType' => 'application/pdf']);
 

--- src/services/Rendering.php ---
@@ -487,9 +487,9 @@ public function populateFormValues($element, $values = [], $force = false): void
             try {
                 $field = $form->getFieldByHandle($key);
 
-                // Prevent users using long-hand Twig `{{` to prevent injection execution. Only an issue for 
+                // Ensure that we protect against developers using Twig to populate values from query strings
                 if (is_string($value)) {
-                    $value = str_replace(['{{', '}}', '{%', '%}'], ['{', '}', '', ''], $value);
+                    $value = Formie::$plugin->getTemplates()->renderString($value);
                 }
 
                 if ($field) {

