diff --git a/.gitignore b/.gitignore
index eb5a316..612c5bc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,3 @@
 target
+.idea
+*.iml
diff --git a/extensions/crypto/sodium/src/main/java/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProvider.java b/extensions/crypto/sodium/src/main/java/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProvider.java
index b958c76..d42cbca 100644
--- a/extensions/crypto/sodium/src/main/java/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProvider.java
+++ b/extensions/crypto/sodium/src/main/java/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProvider.java
@@ -32,7 +32,7 @@ public class SodiumV2LocalCryptoProvider implements V2LocalCryptoProvider {
     private static final byte[] HEADER_BYTES = "v2.local.".getBytes(StandardCharsets.UTF_8);
 
     @Override
-    public byte[] blake2b(byte[] random, byte[] payload) {
+    public byte[] blake2b(byte[] payload, byte[] random) {
         return Blake2b.hash(24, payload, random);
     }
 
diff --git a/extensions/crypto/sodium/src/test/groovy/dev/paseto/jpaseto/crypto/sodium/Blake2bTest.groovy b/extensions/crypto/sodium/src/test/groovy/dev/paseto/jpaseto/crypto/sodium/Blake2bTest.groovy
new file mode 100644
index 0000000..d4904ca
--- /dev/null
+++ b/extensions/crypto/sodium/src/test/groovy/dev/paseto/jpaseto/crypto/sodium/Blake2bTest.groovy
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2019-Present paseto.dev
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dev.paseto.jpaseto.crypto.sodium
+
+import org.apache.commons.codec.binary.Hex
+import org.testng.annotations.Test
+
+import static org.hamcrest.MatcherAssert.assertThat
+import static org.hamcrest.Matchers.is
+
+class Blake2bTest {
+
+    @Test
+    void blake2bTest() {
+        // from https://github.com/BLAKE2/BLAKE2/blob/master/testvectors/blake2b-kat.txt
+        def payload = decode("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20")
+        def key = decode("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f")
+        def expectedHash = decode("5595e05c13a7ec4dc8f41fb70cb50a71bce17c024ff6de7af618d0cc4e9c32d9570d6d3ea45b86525491030c0d8f2b1836d5778c1ce735c17707df364d054347")
+
+        def result = Blake2b.hash(expectedHash.length, payload, key)
+        assertThat result, is(expectedHash)
+    }
+
+    private static byte[] decode(String input) {
+        return Hex.decodeHex(input)
+    }
+}
diff --git a/extensions/crypto/sodium/src/test/groovy/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProviderTest.groovy b/extensions/crypto/sodium/src/test/groovy/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProviderTest.groovy
new file mode 100644
index 0000000..61df031
--- /dev/null
+++ b/extensions/crypto/sodium/src/test/groovy/dev/paseto/jpaseto/crypto/sodium/SodiumV2LocalCryptoProviderTest.groovy
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2019-Present paseto.dev
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dev.paseto.jpaseto.crypto.sodium
+
+import org.apache.commons.codec.binary.Hex
+import org.hamcrest.MatcherAssert
+import org.testng.annotations.Test
+
+import static org.hamcrest.MatcherAssert.assertThat
+import static org.hamcrest.Matchers.is
+
+class SodiumV2LocalCryptoProviderTest {
+
+    @Test
+    void blake2bTest() {
+        // test vector with a 24 hash length
+        def payload = decode("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20")
+        def key = decode("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f")
+        def expectedHash = decode("46cbab86d3dd2e34f925259a0cf69cc92cf48f094cecd403")
+
+        def result = new SodiumV2LocalCryptoProvider().blake2b(payload, key)
+        assertThat result, is(expectedHash)
+    }
+
+    private static byte[] decode(String input) {
+        return Hex.decodeHex(input)
+    }
+}
diff --git a/impl/src/main/java/dev/paseto/jpaseto/impl/crypto/V2LocalCryptoProvider.java b/impl/src/main/java/dev/paseto/jpaseto/impl/crypto/V2LocalCryptoProvider.java
index b99b836..d05b3ac 100644
--- a/impl/src/main/java/dev/paseto/jpaseto/impl/crypto/V2LocalCryptoProvider.java
+++ b/impl/src/main/java/dev/paseto/jpaseto/impl/crypto/V2LocalCryptoProvider.java
@@ -19,7 +19,7 @@
 
 public interface V2LocalCryptoProvider {
 
-    byte[] blake2b(byte[] random, byte[] payload);
+    byte[] blake2b(byte[] payload, byte[] random);
 
     byte[] encrypt(byte[] payload, byte[] footer, byte[] nonce, SecretKey sharedSecret);
 
