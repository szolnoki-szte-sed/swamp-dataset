--- dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java ---
@@ -1,12 +1,16 @@
 package io.dropwizard.validation.selfvalidating;
 
+import javax.annotation.Nullable;
 import javax.validation.ConstraintValidatorContext;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.
  * It collects all the violations of the SelfValidation methods of an object.
  */
 public class ViolationCollector {
+    private static final Pattern ESCAPE_PATTERN = Pattern.compile("\\$\\{");
 
     private boolean violationOccurred = false;
     private ConstraintValidatorContext context;
@@ -17,14 +21,80 @@ public ViolationCollector(ConstraintValidatorContext context) {
     }
 
     /**
-     * Adds a new violation to this collector. This also sets violationOccurred to true.
+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.
      *
-     * @param msg the message of the violation
+     * @param message the message of the violation (any EL expression will be escaped and not parsed)
      */
-    public void addViolation(String msg) {
+    public void addViolation(String message) {
         violationOccurred = true;
-        context.buildConstraintViolationWithTemplate(msg)
-            .addConstraintViolation();
+        String messageTemplate = escapeEl(message);
+        context.buildConstraintViolationWithTemplate(messageTemplate)
+                .addConstraintViolation();
+    }
+
+    /**
+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.
+     *
+     * @param propertyName the name of the property
+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)
+     * @since 1.3.19
+     */
+    public void addViolation(String propertyName, String message) {
+        violationOccurred = true;
+        String messageTemplate = escapeEl(message);
+        context.buildConstraintViolationWithTemplate(messageTemplate)
+                .addPropertyNode(propertyName)
+                .addConstraintViolation();
+    }
+
+    /**
+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.
+     *
+     * @param propertyName the name of the property with the violation
+     * @param index        the index of the element with the violation
+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)
+     * @since 1.3.19
+     */
+    public void addViolation(String propertyName, Integer index, String message) {
+        violationOccurred = true;
+        String messageTemplate = escapeEl(message);
+        context.buildConstraintViolationWithTemplate(messageTemplate)
+                .addPropertyNode(propertyName)
+                .addBeanNode().inIterable().atIndex(index)
+                .addConstraintViolation();
+    }
+
+    /**
+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.
+     *
+     * @param propertyName the name of the property with the violation
+     * @param key          the key of the element with the violation
+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)
+     * @since 1.3.19
+     */
+    public void addViolation(String propertyName, String key, String message) {
+        violationOccurred = true;
+        String messageTemplate = escapeEl(message);
+        context.buildConstraintViolationWithTemplate(messageTemplate)
+                .addPropertyNode(propertyName)
+                .addBeanNode().inIterable().atKey(key)
+                .addConstraintViolation();
+    }
+
+    @Nullable
+    private String escapeEl(@Nullable String s) {
+        if (s == null || s.isEmpty()) {
+            return s;
+        }
+
+        final Matcher m = ESCAPE_PATTERN.matcher(s);
+        final StringBuffer sb = new StringBuffer(s.length() + 16);
+        while (m.find()) {
+            m.appendReplacement(sb, "\\\\\\${");
+        }
+        m.appendTail(sb);
+
+        return sb.toString();
     }
 
     /**

--- dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java ---
@@ -10,11 +10,11 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class SelfValidationTest {
-
     private static final String FAILED = "failed";
 
     @SelfValidating
     public static class FailingExample {
+        @SuppressWarnings("unused")
         @SelfValidation
         public void validateFail(ViolationCollector col) {
             col.addViolation(FAILED);
@@ -23,6 +23,7 @@ public void validateFail(ViolationCollector col) {
 
     @SelfValidating
     public static class DirectContextExample {
+        @SuppressWarnings("unused")
         @SelfValidation
         public void validateFail(ViolationCollector col) {
             col.getContext().buildConstraintViolationWithTemplate(FAILED).addConstraintViolation();
@@ -51,34 +52,44 @@ public void validateFailAdditionalParameters(ViolationCollector col, int a) {
             col.addViolation(FAILED);
         }
 
+        @SuppressWarnings("unused")
         @SelfValidation
         public boolean validateFailReturn(ViolationCollector col) {
             col.addViolation(FAILED);
             return true;
         }
 
+        @SuppressWarnings("unused")
         @SelfValidation
         private void validateFailPrivate(ViolationCollector col) {
             col.addViolation(FAILED);
         }
     }
 
-
     @SelfValidating
     public static class ComplexExample {
+        @SuppressWarnings("unused")
         @SelfValidation
         public void validateFail1(ViolationCollector col) {
             col.addViolation(FAILED + "1");
         }
 
+        @SuppressWarnings("unused")
         @SelfValidation
         public void validateFail2(ViolationCollector col) {
-            col.addViolation(FAILED + "2");
+            col.addViolation("p2", FAILED);
         }
 
+        @SuppressWarnings("unused")
         @SelfValidation
         public void validateFail3(ViolationCollector col) {
-            col.addViolation(FAILED + "3");
+            col.addViolation("p", 3, FAILED);
+        }
+
+        @SuppressWarnings("unused")
+        @SelfValidation
+        public void validateFail4(ViolationCollector col) {
+            col.addViolation("p", "four", FAILED);
         }
 
         @SuppressWarnings("unused")
@@ -91,42 +102,54 @@ public void validateCorrect(ViolationCollector col) {
     public static class NoValidations {
     }
 
+    @SelfValidating
+    public static class InjectionExample {
+        @SuppressWarnings("unused")
+        @SelfValidation
+        public void validateFail(ViolationCollector col) {
+            col.addViolation("${'value'}");
+            col.addViolation("${'property'}", "${'value'}");
+            col.addViolation("${'property'}", 1, "${'value'}");
+            col.addViolation("${'property'}", "${'key'}", "${'value'}");
+        }
+    }
+
     private final Validator validator = BaseValidator.newValidator();
 
     @Test
-    public void failingExample() throws Exception {
+    public void failingExample() {
         assertThat(ConstraintViolations.format(validator.validate(new FailingExample())))
             .containsOnly(" " + FAILED);
     }
 
     @Test
-    public void correctExample() throws Exception {
+    public void correctExample() {
         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))
             .isEmpty();
     }
 
     @Test
-    public void multipleTestingOfSameClass() throws Exception {
+    public void multipleTestingOfSameClass() {
         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))
-            .isEmpty();
+                .isEmpty();
         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))
             .isEmpty();
     }
 
     @Test
-    public void testDirectContextUsage() throws Exception {
+    public void testDirectContextUsage() {
         assertThat(ConstraintViolations.format(validator.validate(new DirectContextExample())))
             .containsOnly(" " + FAILED);
     }
 
     @Test
-    public void complexExample() throws Exception {
+    public void complexExample() {
         assertThat(ConstraintViolations.format(validator.validate(new ComplexExample())))
-            .containsOnly(
-                " " + FAILED + "1",
-                " " + FAILED + "2",
-                " " + FAILED + "3"
-            );
+                .containsExactly(
+                        " failed1",
+                        "p2 failed",
+                        "p[3] failed",
+                        "p[four] failed");
     }
 
     @Test
@@ -136,8 +159,18 @@ public void invalidExample() throws Exception {
     }
 
     @Test
-    public void giveWarningIfNoValidationMethods() throws Exception {
+    public void giveWarningIfNoValidationMethods() {
         assertThat(ConstraintViolations.format(validator.validate(new NoValidations())))
             .isEmpty();
     }
+
+    @Test
+    public void violationMessagesAreEscaped() {
+        assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(
+                " ${'value'}",
+                "${'property'} ${'value'}",
+                "${'property'}[${'key'}] ${'value'}",
+                "${'property'}[1] ${'value'}"
+        );
+    }
 }

