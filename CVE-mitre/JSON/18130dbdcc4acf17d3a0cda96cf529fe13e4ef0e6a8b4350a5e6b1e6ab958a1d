--- CHANGELOG.md ---
@@ -1,10 +1,12 @@
+## Unreleased (2022-01-30)
+
 ## <small>1.0.1 (2020-07-25)</small>
 
 - add prettier and `npm run build` ([1f34461](https://github.com/skratchdot/object-path-set/commit/1f34461))
 - adding contributors ([5bf6e83](https://github.com/skratchdot/object-path-set/commit/5bf6e83))
 - Bump eslint from 4.18.1 to 4.18.2 ([1756583](https://github.com/skratchdot/object-path-set/commit/1756583))
 - fix prototype pollution vulnerability ([55f06d7](https://github.com/skratchdot/object-path-set/commit/55f06d7))
-- formatting ([6bddc79](https://github.com/skratchdot/object-path-set/commit/6bddc79))
+- formatting ([577f529](https://github.com/skratchdot/object-path-set/commit/577f529))
 - rename tonic to runkit ([9c2f1ea](https://github.com/skratchdot/object-path-set/commit/9c2f1ea))
 - small readme tweaks ([9750b7a](https://github.com/skratchdot/object-path-set/commit/9750b7a))
 - travis runs node 6+ ([ac1969b](https://github.com/skratchdot/object-path-set/commit/ac1969b))

--- index.js ---
@@ -2,7 +2,12 @@
 
 // https://github.com/jonschlinkert/assign-deep/commit/90bf1c551d05940898168d04066bbf15060f50cc
 var isValidKey = function (key) {
-  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';
+  return (
+    typeof key === 'string' &&
+    key !== '__proto__' &&
+    key !== 'constructor' &&
+    key !== 'prototype'
+  );
 };
 
 var setPath = function (obj, path, value, delimiter) {

--- test.js ---
@@ -6,18 +6,18 @@ var getDefaultObject = function () {
   return {
     nested: {
       thing: {
-        foo: 'bar'
+        foo: 'bar',
       },
       is: {
-        cool: true
-      }
+        cool: true,
+      },
     },
     dataUndefined: undefined,
     dataDate: now,
     dataNumber: 42,
     dataString: 'foo',
     dataNull: null,
-    dataBoolean: true
+    dataBoolean: true,
   };
 };
 
@@ -51,13 +51,13 @@ describe('object-path-set', function () {
     expect(setPath(true, 'a', 42)).toEqual({ a: 42 });
     expect(setPath({ a: 123 }, 'a.b', 42)).toEqual({ a: { b: 42 } });
     expect(setPath(null, 'a.b.c.d', null)).toEqual({
-      a: { b: { c: { d: null } } }
+      a: { b: { c: { d: null } } },
     });
   });
   it('should be able to use custom delimiters', function () {
     expect(setPath({}, 'a|b|c|d', 42)).toEqual({ 'a|b|c|d': 42 });
     expect(setPath({}, 'a|b|c|d', 42, '|')).toEqual({
-      a: { b: { c: { d: 42 } } }
+      a: { b: { c: { d: 42 } } },
     });
     expect(setPath({}, 'a.b.c.d', 42, '|')).toEqual({ 'a.b.c.d': 42 });
   });
@@ -108,6 +108,14 @@ describe('object-path-set', function () {
     expect(obj.polluted).toBeUndefined();
     expect(obj2.polluted).toBeUndefined();
   });
+  it('should not pollute __proto__ when using arrays', function () {
+    var obj = {};
+    expect(obj.polluted).toBeUndefined();
+    setPath(obj, [['__proto__'], 'polluted'], 'yes');
+    var obj2 = {};
+    expect(obj.polluted).toBeUndefined();
+    expect(obj2.polluted).toBeUndefined();
+  });
   it('should not pollute constructor', function () {
     var obj = {};
     expect(obj.polluted).toBeUndefined();

