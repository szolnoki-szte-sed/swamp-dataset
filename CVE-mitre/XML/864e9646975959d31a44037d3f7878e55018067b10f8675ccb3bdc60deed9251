--- config/config-api/build.gradle ---
@@ -32,7 +32,6 @@ dependencies {
     transitive = false
   }
   api project.deps.cloning
-  api project.deps.jdom
   api project.deps.springWeb
   implementation project.deps.slf4jApi
   implementation project.deps.felix

--- config/config-api/src/main/java/com/thoughtworks/go/util/ValidatingSaxBuilder.java ---
@@ -15,21 +15,20 @@
  */
 package com.thoughtworks.go.util;
 
-import org.jdom2.input.SAXBuilder;
 import org.jdom2.input.sax.XMLReaders;
 
 import java.net.URISyntaxException;
 import java.net.URL;
 
-class ValidatingSaxBuilder extends SAXBuilder {
+class ValidatingSaxBuilder extends SafeSaxBuilder {
     public ValidatingSaxBuilder() {
+        super();
         this.setFeature("http://apache.org/xml/features/validation/schema", true);
-        this.setXMLReaderFactory(XMLReaders.DTDVALIDATING);
-        this.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+        this.setXMLReaderFactory(XMLReaders.XSDVALIDATING);
     }
 
-    public ValidatingSaxBuilder(URL resource) throws URISyntaxException {
+    public ValidatingSaxBuilder(URL schemaLocation) throws URISyntaxException {
         this();
-        this.setProperty("http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation", resource.toURI().toString());
+        this.setProperty("http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation", schemaLocation.toURI().toString());
     }
 }

--- config/config-api/src/main/java/com/thoughtworks/go/util/XmlUtils.java ---
@@ -18,49 +18,50 @@
 import org.jdom2.Document;
 import org.jdom2.Element;
 import org.jdom2.JDOMException;
-import org.jdom2.input.SAXBuilder;
 import org.jdom2.output.Format;
 import org.jdom2.output.XMLOutputter;
 
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
+import java.io.*;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.regex.Pattern;
 
 public class XmlUtils {
     public static void writeXml(Document document, OutputStream outputStream) throws IOException {
-        xmlOutputer().output(document, outputStream);
+        xmlOutputter().output(document, outputStream);
     }
 
-    private static XMLOutputter xmlOutputer() {
+    private static XMLOutputter xmlOutputter() {
         Format format = Format.getPrettyFormat().setEncoding("utf-8").setLineSeparator("\n");
         return new XMLOutputter(format);
     }
 
-
     public static void writeXml(Element element, OutputStream outputStream) throws IOException {
-        xmlOutputer().output(element, outputStream);
+        xmlOutputter().output(element, outputStream);
+    }
+
+    public static Document buildXmlDocument(InputStream inputStream) throws IOException, JDOMException {
+        return new SafeSaxBuilder().build(inputStream);
     }
 
-    public static Document buildXmlDocument(InputStream inputStream, URL resource) throws Exception {
-        return buildXmlDocument(inputStream, new ValidatingSaxBuilder(resource));
+    public static Document buildXmlDocument(File file) throws IOException, JDOMException {
+        return new SafeSaxBuilder().build(file);
     }
 
-    public static Document buildXmlDocument(String xmlContent, URL resource) throws Exception {
-        return buildXmlDocument(new ByteArrayInputStream(xmlContent.getBytes()), new ValidatingSaxBuilder(resource));
+    public static Document buildXmlDocument(String xmlContent) throws IOException, JDOMException {
+        return new SafeSaxBuilder().build(new StringReader(xmlContent));
     }
 
-    private static Document buildXmlDocument(InputStream inputStream, SAXBuilder builder) throws JDOMException, IOException {
+    public static Document buildValidatedXmlDocument(InputStream inputStream, URL schemaLocation) throws URISyntaxException, IOException, JDOMException {
+        ValidatingSaxBuilder builder = new ValidatingSaxBuilder(schemaLocation);
         XsdErrorTranslator errorHandler = new XsdErrorTranslator();
         builder.setErrorHandler(errorHandler);
 
-        Document cruiseRoot = builder.build(inputStream);
+        Document document = builder.build(inputStream);
         if (errorHandler.hasValidationError()) {
             throw new XsdValidationException(errorHandler.translate());
         }
-        return cruiseRoot;
+        return document;
     }
 
     public static boolean doesNotMatchUsingXsdRegex(Pattern pattern, String textToMatch) {

--- config/config-api/src/main/java/com/thoughtworks/go/util/XpathUtils.java ---
@@ -16,22 +16,26 @@
 package com.thoughtworks.go.util;
 
 import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
 
+import javax.xml.XMLConstants;
+import javax.xml.namespace.QName;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.xpath.XPathConstants;
 import javax.xml.xpath.XPathExpression;
 import javax.xml.xpath.XPathExpressionException;
 import javax.xml.xpath.XPathFactory;
 import java.io.*;
-import java.nio.charset.StandardCharsets;
 
 public class XpathUtils {
 
-    private static final XPathFactory XPATH = XPathFactory.newInstance();
+    private static final DocumentBuilderFactory DOC_BUILDER_FACTORY = createDocumentBuilderFactory();
 
     public static String evaluate(File file, String xpath) throws XPathExpressionException, IOException {
         try (InputStream stream = new FileInputStream(file)) {
             InputSource inputSource = new InputSource(stream);
-            return evaluate(inputSource, xpath);
+            return safeEvaluate(inputSource, xpath);
         }
     }
 
@@ -46,20 +50,49 @@ public static boolean nodeExists(InputStream stream, String xpath) throws XPathE
     }
 
     public static boolean nodeExists(InputSource inputSource, String xpath) throws XPathExpressionException {
-        XPathFactory factory = XPathFactory.newInstance();
-        XPathExpression expression = factory.newXPath().compile(xpath);
-        Boolean b = (Boolean) expression.evaluate(inputSource, XPathConstants.BOOLEAN);
-        return b != null && b;
+        return Boolean.TRUE.equals(safeEvaluate(inputSource, xpath, XPathConstants.BOOLEAN));
     }
 
-    public static boolean nodeExists(String xmlPartial, String xpath) throws XPathExpressionException {
-        return nodeExists(new ByteArrayInputStream(xmlPartial.getBytes(StandardCharsets.UTF_8)), xpath);
+    public static boolean nodeExists(String xmlContent, String xpath) throws XPathExpressionException {
+        return nodeExists(new InputSource(new StringReader(xmlContent)), xpath);
     }
 
-    private static String evaluate(InputSource inputSource, String xpath)
-        throws XPathExpressionException {
-        XPathExpression expression = XpathUtils.XPATH.newXPath().compile(xpath);
-        return expression.evaluate(inputSource).trim();
+    private static <T> T safeEvaluate(InputSource inputSource, String xpath, QName type) throws XPathExpressionException {
+        try {
+            return safeEvaluate(inputSource, compile(xpath), type);
+        } catch (SAXException | IOException | ParserConfigurationException e) {
+            throw new XPathExpressionException(e);
+        }
+    }
+
+    private static String safeEvaluate(InputSource inputSource, String xpath) throws XPathExpressionException {
+        try {
+            return safeEvaluate(inputSource, compile(xpath));
+        } catch (SAXException | IOException | ParserConfigurationException e) {
+            throw new XPathExpressionException(e);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private static <T> T safeEvaluate(InputSource inputSource, XPathExpression xpath, QName type) throws XPathExpressionException, SAXException, IOException, ParserConfigurationException {
+        return (T) xpath.evaluate(DOC_BUILDER_FACTORY.newDocumentBuilder().parse(inputSource), type);
     }
 
+    private static String safeEvaluate(InputSource inputSource, XPathExpression xpath) throws XPathExpressionException, SAXException, IOException, ParserConfigurationException {
+        return xpath.evaluate(DOC_BUILDER_FACTORY.newDocumentBuilder().parse(inputSource)).trim();
+    }
+
+    private static XPathExpression compile(String xpath) throws XPathExpressionException {
+        return XPathFactory.newInstance().newXPath().compile(xpath);
+    }
+
+    private static DocumentBuilderFactory createDocumentBuilderFactory() {
+        try {
+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+            return factory;
+        } catch (ParserConfigurationException e) {
+            throw new RuntimeException(e);
+        }
+    }
 }

--- config/config-server/src/main/java/com/thoughtworks/go/config/GoConfigMigration.java ---
@@ -17,15 +17,15 @@
 
 import com.thoughtworks.go.domain.GoConfigRevision;
 import com.thoughtworks.go.util.TimeProvider;
+import com.thoughtworks.go.util.XmlUtils;
 import org.apache.commons.io.FileUtils;
-import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.input.SAXBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
+import javax.xml.XMLConstants;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerConfigurationException;
 import javax.xml.transform.TransformerException;
@@ -40,7 +40,6 @@
 
 import static com.thoughtworks.go.util.ExceptionUtils.bomb;
 import static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;
-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;
 
 /**
  * Understands how to migrate from a previous version of config
@@ -105,17 +104,16 @@ public String upgrade(String content, int currentVersion, int targetVersion) {
     private void validate(String content) {
         int currentVersion = getCurrentSchemaVersion(content);
         try {
-            buildXmlDocument(new ByteArrayInputStream(content.getBytes()), GoConfigSchema.getResource(currentVersion));
+            XmlUtils.buildValidatedXmlDocument(new ByteArrayInputStream(content.getBytes()), GoConfigSchema.getResource(currentVersion));
         } catch (Exception e) {
             throw bomb("Cruise config file with version " + currentVersion + " is invalid. Unable to upgrade.", e);
         }
     }
 
     private String upgrade(String originalContent, URL upgradeScript) {
-        try (InputStream xslt = upgradeScript.openStream()) {
-            ByteArrayOutputStream convertedConfig = new ByteArrayOutputStream();
-            transformer(upgradeScript.getPath(), xslt)
-                    .transform(new StreamSource(new ByteArrayInputStream(originalContent.getBytes())), new StreamResult(convertedConfig));
+        try {
+            ByteArrayOutputStream convertedConfig = new ByteArrayOutputStream(originalContent.length());
+            transformer(upgradeScript).transform(new StreamSource(new StringReader(originalContent)), new StreamResult(convertedConfig));
             return convertedConfig.toString();
         } catch (TransformerException e) {
             throw bomb("Couldn't transform configuration file using upgrade script " + upgradeScript.getPath(), e);
@@ -125,7 +123,7 @@ private String upgrade(String originalContent, URL upgradeScript) {
     }
 
     private List<URL> upgradeScripts(int currentVersion, int targetVersion) {
-        ArrayList<URL> xsls = new ArrayList<>();
+        List<URL> xsls = new ArrayList<>();
         for (int i = currentVersion + 1; i <= targetVersion; i++) {
             String scriptFile = i + ".xsl";
             URL xsl = getResource("/upgrades/" + scriptFile);
@@ -139,29 +137,21 @@ private URL getResource(String script) {
         return GoConfigMigration.class.getResource(script);
     }
 
-    private Transformer transformer(String xsltName, InputStream xslt) {
-        try {
+    private Transformer transformer(URL upgradeScriptLocation) throws IOException {
+        try (InputStream xslt = upgradeScriptLocation.openStream()) {
             TransformerFactory factory = TransformerFactory.newInstance();
-            tryIncreaseXpathExpressionOperationLimit(factory);
+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
+            factory.setAttribute("jdk.xml.xpathExprOpLimit", XPATH_EXPRESSION_OPERATION_LIMIT);
             return factory.newTransformer(new StreamSource(xslt));
         } catch (TransformerConfigurationException tce) {
-            throw bomb("Couldn't parse XSL template " + xsltName, tce);
-        }
-    }
-
-    private void tryIncreaseXpathExpressionOperationLimit(TransformerFactory factory) {
-        try {
-            factory.setAttribute("jdk.xml.xpathExprOpLimit", XPATH_EXPRESSION_OPERATION_LIMIT);
-        } catch (IllegalArgumentException e) {
-            LOG.info("Cannot increase Xpath Expression Operation Limit, may not be supported on this JDK. Continuing... [{}]", e.getMessage());
+            throw bomb("Couldn't parse XSL template " + upgradeScriptLocation.getPath(), tce);
         }
     }
 
     private int getCurrentSchemaVersion(String content) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(new ByteArrayInputStream(content.getBytes()));
-            Element root = document.getRootElement();
+            Element root = XmlUtils.buildXmlDocument(content).getRootElement();
 
             String schemaVersion = "schemaVersion";
             String currentVersion = root.getAttributeValue(schemaVersion) == null ? "0" : root.getAttributeValue(schemaVersion);

--- config/config-server/src/main/java/com/thoughtworks/go/config/MagicalGoConfigXmlLoader.java ---
@@ -26,9 +26,8 @@
 import com.thoughtworks.go.domain.ConfigErrors;
 import com.thoughtworks.go.security.GoCipher;
 import com.thoughtworks.go.util.SystemEnvironment;
-import org.jdom2.Document;
+import com.thoughtworks.go.util.XmlUtils;
 import org.jdom2.Element;
-import org.jdom2.input.SAXBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -40,9 +39,6 @@
 
 import static com.thoughtworks.go.config.parser.GoConfigClassLoader.classParser;
 import static com.thoughtworks.go.util.CachedDigestUtils.md5Hex;
-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;
-import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.apache.commons.io.IOUtils.toInputStream;
 
 public class MagicalGoConfigXmlLoader {
     public static final List<GoConfigPreprocessor> PREPROCESSORS = List.of(
@@ -144,18 +140,20 @@ public CruiseConfig validateCruiseConfig(CruiseConfig config) {
     }
 
     private Element parseInputStream(InputStream inputStream) throws Exception {
-        Element rootElement = buildXmlDocument(inputStream, GoConfigSchema.getCurrentSchema()).getRootElement();
+        Element rootElement = XmlUtils.buildValidatedXmlDocument(inputStream, GoConfigSchema.getCurrentSchema()).getRootElement();
         validateDom(rootElement, registry);
         return rootElement;
     }
 
     public <T> T fromXmlPartial(String partial, Class<T> o) throws Exception {
-        return fromXmlPartial(toInputStream(partial, UTF_8), o);
+        return parse(o, XmlUtils.buildXmlDocument(partial).getRootElement());
     }
 
     public <T> T fromXmlPartial(InputStream inputStream, Class<T> o) throws Exception {
-        Document document = new SAXBuilder().build(inputStream);
-        Element element = document.getRootElement();
+        return parse(o, XmlUtils.buildXmlDocument(inputStream).getRootElement());
+    }
+
+    private <T> T parse(Class<T> o, Element element) {
         return classParser(element, o, configCache, new GoCipher(), registry, new ConfigReferenceElements()).parse();
     }
 

--- config/config-server/src/main/java/com/thoughtworks/go/config/MagicalGoConfigXmlWriter.java ---
@@ -38,7 +38,6 @@
 import static com.thoughtworks.go.config.ConfigCache.isAnnotationPresent;
 import static com.thoughtworks.go.util.ExceptionUtils.bomb;
 import static com.thoughtworks.go.util.ExceptionUtils.bombIf;
-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;
 import static java.text.MessageFormat.format;
 
 public class MagicalGoConfigXmlWriter {
@@ -98,7 +97,7 @@ public String toString(Document document) throws IOException {
     public void verifyXsdValid(Document document) throws Exception {
         try (ByteArrayOutputStream buffer = new ByteArrayOutputStream(32 * 1024)) {
             XmlUtils.writeXml(document, buffer);
-            buildXmlDocument(buffer.toInputStream(), GoConfigSchema.getCurrentSchema());
+            XmlUtils.buildValidatedXmlDocument(buffer.toInputStream(), GoConfigSchema.getCurrentSchema());
         }
     }
 

--- config/config-server/src/main/java/com/thoughtworks/go/config/validation/UniqueOnCancelValidator.java ---
@@ -19,6 +19,7 @@
 import com.thoughtworks.go.util.ConfigUtil;
 import org.jdom2.Element;
 import org.jdom2.filter.Filters;
+import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 
 import java.util.List;
@@ -27,12 +28,13 @@ public class UniqueOnCancelValidator implements GoConfigXMLValidator {
     @Override
     public void validate(Element element, ConfigElementImplementationRegistry registry) {
         XPathFactory xPathFactory = XPathFactory.instance();
+        XPathExpression<Element> onCancelExpression = xPathFactory.compile("oncancel", Filters.element());
+
         List<String> tasks = ConfigUtil.allTasks(registry);
         for (String task : tasks) {
             List<Element> taskNodes = xPathFactory.compile("//" + task, Filters.element()).evaluate(element);
             for (Element taskNode : taskNodes) {
-                List<Element> list = xPathFactory.compile("oncancel", Filters.element()).evaluate(taskNode);
-                if (list.size() > 1) {
+                if (onCancelExpression.evaluate(taskNode).size() > 1) {
                     throw new RuntimeException("Task [" + task + "] should not contain more than 1 oncancel task");
                 }
             }

--- config/config-server/src/test/java/com/thoughtworks/go/config/validation/UniqueOnCancelValidatorTest.java ---
@@ -19,12 +19,11 @@
 import com.thoughtworks.go.config.pluggabletask.PluggableTask;
 import com.thoughtworks.go.config.registry.ConfigElementImplementationRegistry;
 import com.thoughtworks.go.domain.Task;
+import com.thoughtworks.go.util.XmlUtils;
 import org.jdom2.Element;
 import org.jdom2.JDOMException;
-import org.jdom2.input.SAXBuilder;
 import org.junit.jupiter.api.Test;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -257,7 +256,6 @@ private List<Class<? extends Task>> tasks(Class<? extends Task>... taskClasses)
     }
 
     private Element elementFor(String content) throws JDOMException, IOException {
-        SAXBuilder builder = new SAXBuilder();
-        return builder.build(new ByteArrayInputStream(content.getBytes())).getRootElement();
+        return XmlUtils.buildXmlDocument(content).getRootElement();
     }
 }

--- config/config-server/src/test/java/com/thoughtworks/go/util/XmlUtilsTest.java ---
@@ -16,46 +16,28 @@
 package com.thoughtworks.go.util;
 
 import com.thoughtworks.go.config.GoConfigSchema;
-import org.apache.commons.io.FileUtils;
 import org.jdom2.input.JDOMParseException;
 import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
 
-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;
-import static java.nio.charset.StandardCharsets.UTF_8;
+import static com.thoughtworks.go.util.XmlUtils.buildValidatedXmlDocument;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 public class XmlUtilsTest {
 
     @Test
     public void shouldThrowExceptionWithTranslatedErrorMessage() {
         String xmlContent = "<foo name='invalid'/>";
-        InputStream inputStream = new ByteArrayInputStream(xmlContent.getBytes());
-        assertThatThrownBy(() -> buildXmlDocument(inputStream, GoConfigSchema.getCurrentSchema()))
+        assertThatThrownBy(() -> XmlUtils.buildValidatedXmlDocument(new ByteArrayInputStream(xmlContent.getBytes()), GoConfigSchema.getCurrentSchema()))
                 .isInstanceOf(XsdValidationException.class);
     }
 
     @Test
     public void shouldThrowExceptionWhenXmlIsMalformed() {
         String xmlContent = "<foo name='invalid'";
-        assertThatThrownBy(() -> buildXmlDocument(xmlContent, GoConfigSchema.getCurrentSchema()))
+        assertThatThrownBy(() -> buildValidatedXmlDocument(new ByteArrayInputStream(xmlContent.getBytes()), GoConfigSchema.getCurrentSchema()))
                 .isInstanceOf(JDOMParseException.class)
                 .hasMessageContaining("Error on line 1: XML document structures must start and end within the same entity");
     }
-
-    @Test
-    public void shouldDisableDocTypeDeclarationsWhenValidatingXmlDocuments() {
-        assertThatThrownBy(() -> buildXmlDocument(xxeFileContent(), GoConfigSchema.getCurrentSchema()))
-                .isInstanceOf(JDOMParseException.class)
-                .hasMessageContaining("DOCTYPE is disallowed when the feature \"http://apache.org/xml/features/disallow-doctype-decl\" set to true");
-    }
-
-    private String xxeFileContent() throws IOException {
-        return FileUtils.readFileToString(new File(this.getClass().getResource("/data/xml-with-xxe.xml").getFile()), UTF_8);
-    }
-
 }

--- domain/build.gradle ---
@@ -31,7 +31,6 @@ dependencies {
   implementation project.deps.commonsCollections4
   implementation project.deps.commonsText
   implementation project.deps.cloning
-  implementation project.deps.jdom
   implementation project.deps.jodaTime
   implementation project.deps.springTx
   api project.deps.semanticVersion

--- domain/src/main/java/com/thoughtworks/go/domain/UnitTestReportGenerator.java ---
@@ -23,6 +23,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.xml.XMLConstants;
 import javax.xml.transform.Source;
 import javax.xml.transform.Templates;
 import javax.xml.transform.TransformerFactory;
@@ -42,7 +43,9 @@ public class UnitTestReportGenerator {
 
     static {
         try (InputStream xslt = UnitTestReportGenerator.class.getResourceAsStream("unittests.xsl")) {
-            templates = TransformerFactory.newInstance().newTemplates(new StreamSource(xslt));
+            TransformerFactory factory = TransformerFactory.newInstance();
+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+            templates = factory.newTemplates(new StreamSource(xslt));
         } catch (Exception e) {
             LOG.error("Could not load unit test converters", e);
         }

--- domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgModificationSplitter.java ---
@@ -21,14 +21,13 @@
 import com.thoughtworks.go.domain.materials.Revision;
 import com.thoughtworks.go.util.DateUtils;
 import com.thoughtworks.go.util.ExceptionUtils;
+import com.thoughtworks.go.util.XmlUtils;
 import com.thoughtworks.go.util.command.ConsoleResult;
 import org.apache.commons.text.StringEscapeUtils;
 import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.input.SAXBuilder;
 
 import java.io.File;
-import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -45,9 +44,7 @@ public HgModificationSplitter(ConsoleResult result) {
 
     public List<Modification> modifications() {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(new StringReader(output));
-            return parseDOMTree(document);
+            return parseDOMTree(XmlUtils.buildXmlDocument(output));
         } catch (Exception e) {
             throw ExceptionUtils.bomb("Unable to parse hg log output: " + result.replaceSecretInfo(output), result.smudgedException(e));
         }

--- domain/src/main/java/com/thoughtworks/go/domain/materials/svn/SvnCommand.java ---
@@ -20,12 +20,12 @@
 import com.thoughtworks.go.domain.materials.Modifications;
 import com.thoughtworks.go.domain.materials.SCMCommand;
 import com.thoughtworks.go.domain.materials.ValidationBean;
+import com.thoughtworks.go.util.SafeSaxBuilder;
 import com.thoughtworks.go.util.SvnLogXmlParser;
 import com.thoughtworks.go.util.command.*;
 import org.apache.commons.lang3.StringUtils;
 import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.input.SAXBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,13 +49,12 @@ public class SvnCommand extends SCMCommand implements Subversion {
     private boolean checkExternals;
 
     private static final Logger LOG = LoggerFactory.getLogger(SvnCommand.class);
-    public static final String SVN_DATE_FORMAT_IN = "yyyy-MM-dd'T'HH:mm:ss'Z'";
     public static final String SVN_DATE_FORMAT_OUT = "yyyy-MM-dd'T'HH:mm:ss.SSS";
     private static final String ERR_SVN_NOT_FOUND = "Failed to find 'svn' on your PATH. Please ensure 'svn' is executable by the Go Server and on the Go Agents where this material will be used.";
 
 
     private final SvnLogXmlParser svnLogXmlParser;
-    private final static ThreadLocal<SAXBuilder> saxBuilderThreadLocal = new ThreadLocal<>();
+    private final static ThreadLocal<SafeSaxBuilder> saxBuilderThreadLocal = new ThreadLocal<>();
 
     public SvnCommand(String materialFingerprint, String repositoryUrl) {
         this(materialFingerprint, repositoryUrl, null, null, false);
@@ -94,10 +93,10 @@ public List<SvnExternal> getAllExternalURLs() {
                 .withArg(repositoryUrl);
         ConsoleResult result = executeCommand(svnExternalCommand);
         String svnExternalConsoleOut = result.outputAsString();
-        SvnInfo remoteInfo = remoteInfo(new SAXBuilder());
+        SvnInfo remoteInfo = remoteInfo(new SafeSaxBuilder());
         String repoUrl = remoteInfo.getUrl();
         String repoRoot = remoteInfo.getRoot();
-        List<SvnExternal> svnExternalList = null;
+        List<SvnExternal> svnExternalList;
         try {
             svnExternalList = new SvnExternalParser().parse(svnExternalConsoleOut, repoUrl, repoRoot);
         } catch (RuntimeException e) {
@@ -147,21 +146,21 @@ public List<Modification> modificationsSince(SubversionRevision subversionRevisi
     }
 
     private List<Modification> parseSvnLog(String output) {
-        SAXBuilder builder = getBuilder();
+        SafeSaxBuilder builder = getBuilder();
         SvnInfo svnInfo = remoteInfo(builder);
         return svnLogXmlParser.parse(output, svnInfo.getPath(), builder);
     }
 
-    private SAXBuilder getBuilder() {
-        SAXBuilder saxBuilder = saxBuilderThreadLocal.get();
+    private SafeSaxBuilder getBuilder() {
+        SafeSaxBuilder saxBuilder = saxBuilderThreadLocal.get();
         if (saxBuilder == null) {
-            saxBuilder = new SAXBuilder();
+            saxBuilder = new SafeSaxBuilder();
             saxBuilderThreadLocal.set(saxBuilder);
         }
         return saxBuilder;
     }
 
-    public SvnInfo remoteInfo(SAXBuilder builder) {
+    public SvnInfo remoteInfo(SafeSaxBuilder builder) {
         SvnInfo svnInfo = new SvnInfo();
         svnInfo.parse(executeCommand(svn(true)
                 .withArgs("info", "--xml", "--non-interactive")
@@ -311,7 +310,7 @@ static class SvnInfo {
         private String encodedUrl = "";
         private String root = "";
 
-        public void parse(String xmlOutput, SAXBuilder builder) {
+        public void parse(String xmlOutput, SafeSaxBuilder builder) {
             try {
                 Document document = builder.build(new StringReader(xmlOutput));
                 parseDOMTree(document);

--- domain/src/main/java/com/thoughtworks/go/util/SvnLogXmlParser.java ---
@@ -20,7 +20,6 @@
 import com.thoughtworks.go.domain.materials.svn.SvnCommand;
 import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.input.SAXBuilder;
 
 import java.io.StringReader;
 import java.text.DateFormat;
@@ -34,7 +33,7 @@ public class SvnLogXmlParser {
 
     private static final TimeZone UTC = TimeZone.getTimeZone("UTC");
 
-    public List<Modification> parse(String svnLogOutput, String path, SAXBuilder builder) {
+    public List<Modification> parse(String svnLogOutput, String path, SafeSaxBuilder builder) {
         try {
             Document document = builder.build(new StringReader(svnLogOutput));
             return parseDOMTree(document, path);
@@ -47,10 +46,7 @@ private List<Modification> parseDOMTree(Document document, String path) throws P
         List<Modification> modifications = new ArrayList<>();
 
         Element rootElement = document.getRootElement();
-        List logEntries = rootElement.getChildren("logentry");
-        for (Iterator iterator = logEntries.iterator(); iterator.hasNext();) {
-            Element logEntry = (Element) iterator.next();
-
+        for (Element logEntry : rootElement.getChildren("logentry")) {
             Modification modification = parseLogEntry(logEntry, path);
             if (modification != null) {
                 modifications.add(modification);
@@ -75,9 +71,7 @@ private Modification parseLogEntry(Element logEntry, String path) throws ParseEx
 
         Modification modification = new Modification(author, comment, null, modifiedTime, revision);
 
-        List paths = logEntryPaths.getChildren("path");
-        for (Iterator iterator = paths.iterator(); iterator.hasNext();) {
-            Element node = (Element) iterator.next();
+        for (Element node : logEntryPaths.getChildren("path")) {
             if (underPath(path, node.getText())) {
                 ModifiedAction action = convertAction(node.getAttributeValue("action"));
                 modification.createModifiedFile(node.getText(), null, action);
@@ -116,20 +110,16 @@ public static DateFormat getOutDateFormatter() {
     }
 
     private ModifiedAction convertAction(String action) {
-        if (action.equals("A")) {
-            return ModifiedAction.added;
-        }
-        if (action.equals("M")) {
-            return ModifiedAction.modified;
-        }
-        if (action.equals("D")) {
-            return ModifiedAction.deleted;
-        }
-        return ModifiedAction.unknown;
+        return switch (action) {
+            case "A" -> ModifiedAction.added;
+            case "M" -> ModifiedAction.modified;
+            case "D" -> ModifiedAction.deleted;
+            default -> ModifiedAction.unknown;
+        };
     }
 
-    public HashMap<String, String> parseInfoToGetUUID(String output, String queryURL, SAXBuilder builder) {
-        HashMap<String, String> uidToUrlMap = new HashMap<>();
+    public Map<String, String> parseInfoToGetUUID(String output, String queryURL, SafeSaxBuilder builder) {
+        Map<String, String> uidToUrlMap = new HashMap<>();
         try {
             Document document = builder.build(new StringReader(output));
             Element root = document.getRootElement();

--- domain/src/test/java/com/thoughtworks/go/domain/materials/svn/SvnCommandRemoteTest.java ---
@@ -18,11 +18,11 @@
 import com.thoughtworks.go.domain.materials.Modification;
 import com.thoughtworks.go.domain.materials.ValidationBean;
 import com.thoughtworks.go.helper.SvnRemoteRepository;
+import com.thoughtworks.go.util.SafeSaxBuilder;
 import com.thoughtworks.go.util.TempDirUtils;
 import com.thoughtworks.go.util.command.InMemoryStreamConsumer;
 import com.thoughtworks.go.util.command.ProcessOutputStreamConsumer;
 import org.apache.commons.io.FileUtils;
-import org.jdom2.input.SAXBuilder;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -63,7 +63,7 @@ public void stopRepo() throws Exception {
 
     @Test
     public void shouldSupportSvnInfo() {
-        SvnCommand.SvnInfo info = command.remoteInfo(new SAXBuilder());
+        SvnCommand.SvnInfo info = command.remoteInfo(new SafeSaxBuilder());
         assertThat(info.getUrl()).isEqualTo(repository.getUrl());
     }
 
@@ -249,21 +249,21 @@ public void shouldMaskPassword_modificationsSince() {
     @Test
     public void shouldMaskPassword_remoteInfo() {
         try {
-            badUserNameCommand().remoteInfo(new SAXBuilder());
+            badUserNameCommand().remoteInfo(new SafeSaxBuilder());
             fail("should have failed");
         } catch (Exception e) {
             assertThat(e.getMessage().contains(HARRYS_PASSWORD)).isFalse();
         }
 
         try {
-            badPasswordCommand().remoteInfo(new SAXBuilder());
+            badPasswordCommand().remoteInfo(new SafeSaxBuilder());
             fail("should have failed");
         } catch (Exception e) {
             assertThat(e.getMessage().contains("some_bad_password")).isFalse();
         }
 
         try {
-            badUrlCommand().remoteInfo(new SAXBuilder());
+            badUrlCommand().remoteInfo(new SafeSaxBuilder());
             fail("should have failed");
         } catch (Exception e) {
             assertThat(e.getMessage().contains(HARRYS_PASSWORD)).isFalse();

--- domain/src/test/java/com/thoughtworks/go/domain/materials/svn/SvnCommandTest.java ---
@@ -18,9 +18,9 @@
 import com.thoughtworks.go.config.materials.svn.SvnMaterial;
 import com.thoughtworks.go.domain.materials.*;
 import com.thoughtworks.go.helper.SvnTestRepo;
+import com.thoughtworks.go.util.SafeSaxBuilder;
 import com.thoughtworks.go.util.TempDirUtils;
 import com.thoughtworks.go.util.command.*;
-import org.jdom2.input.SAXBuilder;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.DisabledOnOs;
@@ -280,7 +280,7 @@ void shouldParseSvnInfoWithParthDifferentFromUrl() {
                 </entry>
                 </info>""";
         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();
-        svnInfo.parse(output, new SAXBuilder());
+        svnInfo.parse(output, new SafeSaxBuilder());
         assertThat(svnInfo.getPath()).isEqualTo("/bloresvn/TISSIP/branch/DEV/PurchaseDeliverables");
         assertThat(svnInfo.getUrl()).isEqualTo("http://svn.somewhere.com/someotherline/bloresvn/TISSIP/branch/DEV/PurchaseDeliverables");
     }
@@ -307,7 +307,7 @@ void shouldParseSvnInfo() {
                 </entry>
                 </info>""";
         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();
-        svnInfo.parse(output, new SAXBuilder());
+        svnInfo.parse(output, new SafeSaxBuilder());
         assertThat(svnInfo.getPath()).isEqualTo("/someotherline");
         assertThat(svnInfo.getUrl()).isEqualTo("http://svn.somewhere.com/svn/someotherline");
         assertThat(svnInfo.getRoot()).isEqualTo("http://svn.somewhere.com/svn");
@@ -335,7 +335,7 @@ void shouldParseSvnInfoWithUTF8ChineseNameInUrl() {
                 </entry>
                 </info>""";
         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();
-        svnInfo.parse(output, new SAXBuilder());
+        svnInfo.parse(output, new SafeSaxBuilder());
         assertThat(svnInfo.getPath()).isEqualTo("/司徒空在此");
         assertThat(svnInfo.getUrl()).isEqualTo("file:///home/cceuser/bigfs/projects/cruise/common/test-resources/unit/data/repos/svnrepo/end2end/%E5%8F%B8%E5%BE%92%E7%A9%BA%E5%9C%A8%E6%AD%A4");
     }
@@ -362,7 +362,7 @@ void shouldParseEncodedUrl() {
                 </entry>
                 </info>""";
         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();
-        svnInfo.parse(output, new SAXBuilder());
+        svnInfo.parse(output, new SafeSaxBuilder());
         assertThat(svnInfo.getUrl()).isEqualTo("https://217.45.214.17:8443/svn/Entropy%20System/Envoy%20Enterprise/trunk");
         assertThat(svnInfo.getPath()).isEqualTo("/Entropy System/Envoy Enterprise/trunk");
     }
@@ -389,7 +389,7 @@ void shouldParseEncodedUrlAndPath() {
                 </entry>
                 </info>""";
         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();
-        svnInfo.parse(output, new SAXBuilder());
+        svnInfo.parse(output, new SafeSaxBuilder());
         assertThat(svnInfo.getUrl()).isEqualTo("file:///C:/Documents%20and%20Settings/cceuser/Local%20Settings/Temp/testSvnRepo-1243722556125/end2end/unit-reports");
         assertThat(svnInfo.getPath()).isEqualTo("/unit-reports");
     }
@@ -416,7 +416,7 @@ void shouldParsePartlyEncodedUrlAndPath() {
                 </entry>
                 </info>""";
         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();
-        svnInfo.parse(output, new SAXBuilder());
+        svnInfo.parse(output, new SafeSaxBuilder());
         assertThat(svnInfo.getUrl()).isEqualTo("svn+ssh://hostname/foo%20bar%20baz/end2end");
         assertThat(svnInfo.getPath()).isEqualTo("/end2end");
     }

--- domain/src/test/java/com/thoughtworks/go/util/SvnLogXmlParserTest.java ---
@@ -18,14 +18,13 @@
 import com.thoughtworks.go.domain.materials.Modification;
 import com.thoughtworks.go.domain.materials.ModifiedAction;
 import com.thoughtworks.go.domain.materials.ModifiedFile;
-import org.jdom2.input.SAXBuilder;
 import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.text.ParseException;
-import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 
 import static com.thoughtworks.go.util.SvnLogXmlParser.convertDate;
@@ -72,7 +71,7 @@ public void shouldParseSvnLogContainingNullComments() throws IOException {
         try (InputStream is = Objects.requireNonNull(getClass().getResourceAsStream("jemstep_svn_log.xml"))) {
             String xml = new String(is.readAllBytes(), UTF_8);
             SvnLogXmlParser parser = new SvnLogXmlParser();
-            List<Modification> revisions = parser.parse(xml, "", new SAXBuilder());
+            List<Modification> revisions = parser.parse(xml, "", new SafeSaxBuilder());
 
             assertThat(revisions.size()).isEqualTo(43);
             assertThat(revisions.stream().filter(r -> r.getRevision().equals("7815")).findFirst().orElseThrow().getComment()).isNull();
@@ -82,7 +81,7 @@ public void shouldParseSvnLogContainingNullComments() throws IOException {
     @Test
     public void shouldParse() throws ParseException {
         SvnLogXmlParser parser = new SvnLogXmlParser();
-        List<Modification> materialRevisions = parser.parse(XML, "", new SAXBuilder());
+        List<Modification> materialRevisions = parser.parse(XML, "", new SafeSaxBuilder());
         assertThat(materialRevisions.size()).isEqualTo(1);
         Modification mod = materialRevisions.get(0);
         assertThat(mod.getRevision()).isEqualTo("3");
@@ -111,7 +110,7 @@ public void shouldParseLogEntryWithoutComment() {
                    action="A">/trunk/revision3.txt</path>
                 </paths>
                 </logentry>
-                </log>""", "", new SAXBuilder());
+                </log>""", "", new SafeSaxBuilder());
         assertThat(materialRevisions.size()).isEqualTo(1);
         Modification mod = materialRevisions.get(0);
         assertThat(mod.getRevision()).isEqualTo("3");
@@ -136,7 +135,7 @@ public void shouldParseLogWithEmptyRevision() {
                    action="A">/trunk/revision3.txt</path>
                 </paths>
                 </logentry>
-                </log>""", "", new SAXBuilder());
+                </log>""", "", new SafeSaxBuilder());
         assertThat(materialRevisions.size()).isEqualTo(1);
         Modification mod = materialRevisions.get(0);
         assertThat(mod.getRevision()).isEqualTo("3");
@@ -191,17 +190,17 @@ public void shouldParseBJCruiseLogCorrectly() {
                 </log>""";
 
         SvnLogXmlParser parser = new SvnLogXmlParser();
-        List<Modification> mods = parser.parse(firstChangeLog, ".", new SAXBuilder());
+        List<Modification> mods = parser.parse(firstChangeLog, ".", new SafeSaxBuilder());
         assertThat(mods.get(0).getUserName()).isEqualTo("yxchu");
 
-        List<Modification> mods2 = parser.parse(secondChangeLog, ".", new SAXBuilder());
+        List<Modification> mods2 = parser.parse(secondChangeLog, ".", new SafeSaxBuilder());
         assertThat(mods2.size()).isEqualTo(2);
     }
 
     @Test
     public void shouldFilterModifiedFilesByPath() {
         SvnLogXmlParser parser = new SvnLogXmlParser();
-        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, "/branch", new SAXBuilder());
+        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, "/branch", new SafeSaxBuilder());
 
         Modification mod = materialRevisions.get(0);
         List<ModifiedFile> files = mod.getModifiedFiles();
@@ -214,7 +213,7 @@ public void shouldFilterModifiedFilesByPath() {
     @Test
     public void shouldGetAllModifiedFilesUnderRootPath() {
         SvnLogXmlParser parser = new SvnLogXmlParser();
-        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, "", new SAXBuilder());
+        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, "", new SafeSaxBuilder());
 
         Modification mod = materialRevisions.get(0);
         List<ModifiedFile> files = mod.getModifiedFiles();
@@ -232,7 +231,7 @@ public void shouldGetAllModifiedFilesUnderRootPath() {
     @Test
     public void shouldReportSvnOutputWhenErrorsHappen() {
         SvnLogXmlParser parser = new SvnLogXmlParser();
-        assertThatThrownBy(() -> parser.parse("invalid xml", "", new SAXBuilder()))
+        assertThatThrownBy(() -> parser.parse("invalid xml", "", new SafeSaxBuilder()))
             .isInstanceOf(RuntimeException.class)
             .hasMessageContaining("invalid xml");
     }
@@ -259,14 +258,14 @@ public void shouldParseSvnInfoOutputToConstructUrlToRemoteUUIDMapping() {
                 </commit>
                 </entry>
                 </info>""";
-        final HashMap<String, String> map = svnLogXmlParser.parseInfoToGetUUID(svnInfoOutput, "http://gears.googlecode.com/svn/trunk", new SAXBuilder());
+        final Map<String, String> map = svnLogXmlParser.parseInfoToGetUUID(svnInfoOutput, "http://gears.googlecode.com/svn/trunk", new SafeSaxBuilder());
         assertThat(map.size()).isEqualTo(1);
         assertThat(map.get("http://gears.googlecode.com/svn/trunk")).isEqualTo("fe895e04-df30-0410-9975-d76d301b4276");
     }
 
     @Test
     public void shouldThrowUpWhenSvnInfoOutputIsInvalidToMapUrlToUUID() {
-        assertThatThrownBy(() -> new SvnLogXmlParser().parseInfoToGetUUID("Svn threw up and it's drunk", "does not matter", new SAXBuilder()))
+        assertThatThrownBy(() -> new SvnLogXmlParser().parseInfoToGetUUID("Svn threw up and it's drunk", "does not matter", new SafeSaxBuilder()))
             .isInstanceOf(RuntimeException.class);
     }
 }

--- plugin-infra/go-plugin-infra/src/main/java/com/thoughtworks/go/plugin/infra/plugininfo/GoPluginBundleDescriptorParser.java ---
@@ -16,16 +16,11 @@
 package com.thoughtworks.go.plugin.infra.plugininfo;
 
 import com.thoughtworks.go.plugin.infra.monitor.BundleOrPluginFileDetails;
-import jakarta.xml.bind.*;
+import jakarta.xml.bind.JAXBException;
 import org.xml.sax.SAXException;
 
-import javax.xml.XMLConstants;
-import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamReader;
-import javax.xml.validation.SchemaFactory;
 import java.io.File;
-import java.io.IOException;
 import java.io.InputStream;
 
 /* Parses an XML of this kind (see below). Also see @GoPluginDescriptorParser and gocd-bundle-descriptor.xsd.
@@ -83,16 +78,16 @@ private GoPluginBundleDescriptorParser() {
     }
 
     public static GoPluginBundleDescriptor parseXML(InputStream pluginXml,
-                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws IOException, JAXBException, XMLStreamException, SAXException {
+                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws JAXBException, XMLStreamException, SAXException {
         return parseXML(pluginXml, bundleOrPluginJarFile.file().getAbsolutePath(), bundleOrPluginJarFile.extractionLocation(), bundleOrPluginJarFile.isBundledPlugin());
     }
 
     static GoPluginBundleDescriptor parseXML(InputStream pluginXML,
                                              String pluginJarFileLocation,
                                              File pluginBundleLocation,
-                                             boolean isBundledPlugin) throws IOException, JAXBException, XMLStreamException, SAXException {
+                                             boolean isBundledPlugin) throws JAXBException, XMLStreamException, SAXException {
 
-        GoPluginBundleDescriptor bundle = deserializeXML(pluginXML, GoPluginBundleDescriptor.class);
+        GoPluginBundleDescriptor bundle = GoPluginDescriptorParser.deserializeXML(pluginXML, GoPluginBundleDescriptor.class, "/gocd-bundle-descriptor.xsd", "bundle.xml");
         bundle.pluginDescriptors().forEach(d -> {
             d.setBundleDescriptor(bundle);
             d.version(bundle.version());
@@ -103,26 +98,4 @@ static GoPluginBundleDescriptor parseXML(InputStream pluginXML,
         return bundle;
     }
 
-    @SuppressWarnings("SameParameterValue")
-    private static <T> T deserializeXML(InputStream pluginXML, Class<T> klass) throws JAXBException, XMLStreamException, SAXException {
-        JAXBContext ctx = JAXBContext.newInstance(klass);
-        XMLStreamReader data = XMLInputFactory.newInstance().createXMLStreamReader(pluginXML);
-        final Unmarshaller unmarshaller = ctx.createUnmarshaller();
-        unmarshaller.setSchema(SchemaFactory.
-                newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).
-                newSchema(GoPluginBundleDescriptorParser.class.getResource("/gocd-bundle-descriptor.xsd")));
-
-        try {
-            final JAXBElement<T> result = unmarshaller.unmarshal(data, klass);
-            return result.getValue();
-        } catch (UnmarshalException e) {
-            // there is no non-frustrating way to customize error messages (without other pitfalls anyway),
-            // and `UnmarshalException` instances are rarely informative; assume a validation error.
-            if (null == e.getMessage()) {
-                throw new ValidationException("XML Schema validation of Plugin Descriptor(bundle.xml) failed", e.getCause());
-            }
-            throw e;
-        }
-    }
-
 }

--- plugin-infra/go-plugin-infra/src/main/java/com/thoughtworks/go/plugin/infra/plugininfo/GoPluginDescriptorParser.java ---
@@ -23,9 +23,9 @@
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
 import java.io.File;
-import java.io.IOException;
 import java.io.InputStream;
 
 public final class GoPluginDescriptorParser {
@@ -53,40 +53,47 @@ private GoPluginDescriptorParser() {
     }
 
     public static GoPluginBundleDescriptor parseXML(InputStream pluginXml,
-                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws IOException, JAXBException, XMLStreamException, SAXException {
+                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws JAXBException, XMLStreamException, SAXException {
         return parseXML(pluginXml, bundleOrPluginJarFile.file().getAbsolutePath(), bundleOrPluginJarFile.extractionLocation(), bundleOrPluginJarFile.isBundledPlugin());
     }
 
     static GoPluginBundleDescriptor parseXML(InputStream pluginXML,
                                              String pluginJarFileLocation,
                                              File pluginBundleLocation,
-                                             boolean isBundledPlugin) throws IOException, JAXBException, XMLStreamException, SAXException {
-        GoPluginDescriptor plugin = deserializeXML(pluginXML, GoPluginDescriptor.class);
+                                             boolean isBundledPlugin) throws JAXBException, XMLStreamException, SAXException {
+        GoPluginDescriptor plugin = deserializeXML(pluginXML, GoPluginDescriptor.class, "/plugin-descriptor.xsd", "plugin.xml");
         plugin.pluginJarFileLocation(pluginJarFileLocation);
         plugin.bundleLocation(pluginBundleLocation);
         plugin.isBundledPlugin(isBundledPlugin);
         return new GoPluginBundleDescriptor(plugin);
     }
 
-    @SuppressWarnings("SameParameterValue")
-    private static <T> T deserializeXML(InputStream pluginXML, Class<T> klass) throws JAXBException, XMLStreamException, SAXException {
-        JAXBContext ctx = JAXBContext.newInstance(klass);
-        XMLStreamReader data = XMLInputFactory.newInstance().createXMLStreamReader(pluginXML);
-        final Unmarshaller unmarshaller = ctx.createUnmarshaller();
-        unmarshaller.setSchema(SchemaFactory.
-                newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).
-                newSchema(GoPluginDescriptorParser.class.getResource("/plugin-descriptor.xsd")));
+    static <T> T deserializeXML(InputStream pluginXML, Class<T> klass, String schemaResourcePath, String resourceType) throws JAXBException, XMLStreamException, SAXException {
+        XMLStreamReader data = streamReaderFor(pluginXML);
+        final Unmarshaller unmarshaller = JAXBContext.newInstance(klass).createUnmarshaller();
+        unmarshaller.setSchema(schemaFor(klass, schemaResourcePath));
 
         try {
-            final JAXBElement<T> result = unmarshaller.unmarshal(data, klass);
-            return result.getValue();
+            return unmarshaller.unmarshal(data, klass).getValue();
         } catch (UnmarshalException e) {
             // there is no non-frustrating way to customize error messages (without other pitfalls anyway),
             // and `UnmarshalException` instances are rarely informative; assume a validation error.
             if (null == e.getMessage()) {
-                throw new ValidationException("XML Schema validation of Plugin Descriptor(plugin.xml) failed", e.getCause());
+                throw new ValidationException("XML Schema validation of Plugin Descriptor(" + resourceType + ") failed", e.getCause());
             }
             throw e;
         }
     }
+
+    private static XMLStreamReader streamReaderFor(InputStream pluginXML) throws XMLStreamException {
+        XMLInputFactory factory = XMLInputFactory.newInstance();
+        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
+        return factory.createXMLStreamReader(pluginXML);
+    }
+
+    private static Schema schemaFor(Class<?> klass, String schemaResourcePath) throws SAXException {
+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
+        schemaFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+        return schemaFactory.newSchema(klass.getResource(schemaResourcePath));
+    }
 }

--- server/src/main/java/com/thoughtworks/go/config/ConfigCipherUpdater.java ---
@@ -26,7 +26,6 @@
 import org.jdom2.Document;
 import org.jdom2.Element;
 import org.jdom2.filter.Filters;
-import org.jdom2.input.SAXBuilder;
 import org.jdom2.xpath.XPathExpression;
 import org.jdom2.xpath.XPathFactory;
 import org.slf4j.Logger;
@@ -85,7 +84,7 @@ public void migrate() {
                 FileUtils.deleteQuietly(backupConfigFile);
                 return;
             }
-            Document document = new SAXBuilder().build(configFile);
+            Document document = XmlUtils.buildXmlDocument(configFile);
             List<String> encryptedAttributes = List.of("encryptedPassword", "encryptedManagerPassword");
             List<String> encryptedNodes = List.of("encryptedValue");
             XPathFactory xPathFactory = XPathFactory.instance();

--- server/src/test-fast/java/com/thoughtworks/go/domain/DirectoryEntriesTest.java ---
@@ -16,13 +16,12 @@
 package com.thoughtworks.go.domain;
 
 import com.thoughtworks.go.server.presentation.html.HtmlRenderer;
+import com.thoughtworks.go.util.XmlUtils;
 import org.jdom2.Element;
 import org.jdom2.JDOMException;
-import org.jdom2.input.SAXBuilder;
 import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
-import java.io.StringReader;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -98,7 +97,7 @@ public void shouldAddFile() {
 
     private Element getRenderedDocument(HtmlRenderer renderer) throws JDOMException, IOException {
         String renderedString = "<div>" + renderer.asString() + "</div>";
-        return new SAXBuilder().build(new StringReader(renderedString)).getRootElement();
+        return XmlUtils.buildXmlDocument(renderedString).getRootElement();
     }
 
 }

--- server/src/test-integration/java/com/thoughtworks/go/config/GoConfigMigrationIntegrationTest.java ---
@@ -27,14 +27,10 @@
 import com.thoughtworks.go.server.service.GoConfigService;
 import com.thoughtworks.go.serverhealth.ServerHealthService;
 import com.thoughtworks.go.service.ConfigRepository;
-import com.thoughtworks.go.util.ConfigElementImplementationRegistryMother;
-import com.thoughtworks.go.util.GoConfigFileHelper;
-import com.thoughtworks.go.util.SystemEnvironment;
-import com.thoughtworks.go.util.TimeProvider;
+import com.thoughtworks.go.util.*;
 import org.apache.commons.lang3.StringUtils;
 import org.jdom2.Document;
 import org.jdom2.filter.ElementFilter;
-import org.jdom2.input.SAXBuilder;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -48,7 +44,6 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.StringReader;
 import java.util.Objects;
 
 import static com.thoughtworks.go.config.PipelineConfig.LOCK_VALUE_LOCK_ON_FAILURE;
@@ -296,7 +291,7 @@ public void shouldRemoveAllLuauConfigurationFromConfig() throws Exception {
                         </cruise>""";
 
         String migratedContent = migrateXmlString(configString, 66);
-        Document document = new SAXBuilder().build(new StringReader(migratedContent));
+        Document document = XmlUtils.buildXmlDocument(migratedContent);
 
         assertThat(document.getDescendants(new ElementFilter("luau")).hasNext()).isFalse();
         assertThat(document.getDescendants(new ElementFilter("groups")).hasNext()).isFalse();

--- util/build.gradle ---
@@ -21,6 +21,7 @@ dependencies {
   api project.deps.springContext
   api project.deps.gson
   implementation project.deps.cloning
+  api project.deps.jdom
   testImplementation project(path: ':test:test-utils', configuration: 'runtimeElements')
   testImplementation project.deps.junit5Api
   testRuntimeOnly project.deps.junit5Engine

--- util/src/main/java/com/thoughtworks/go/util/SafeSaxBuilder.java ---
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2024 Thoughtworks, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.thoughtworks.go.util;
+
+import org.jdom2.input.SAXBuilder;
+
+public class SafeSaxBuilder extends SAXBuilder {
+    public SafeSaxBuilder() {
+        // Disable DTDs entirely, as we don't use/rely on them - rather than just disallowing external entities
+        this.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+    }
+}

--- util/src/test/java/com/thoughtworks/go/util/SafeSaxBuilderTest.java ---
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2024 Thoughtworks, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.thoughtworks.go.util;
+
+import org.jdom2.input.JDOMParseException;
+import org.junit.jupiter.api.Test;
+
+import java.io.InputStream;
+import java.util.Objects;
+
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+
+class SafeSaxBuilderTest {
+    @Test
+    public void shouldDisableDocTypeDeclarationsWhenValidatingXmlDocuments() throws Exception {
+        try (InputStream content = xxeFileContent()) {
+            assertThatThrownBy(() -> new SafeSaxBuilder().build(content))
+                .isInstanceOf(JDOMParseException.class)
+                .hasMessageContaining("DOCTYPE is disallowed when the feature \"http://apache.org/xml/features/disallow-doctype-decl\" set to true");
+        }
+    }
+
+    private InputStream xxeFileContent() {
+        return Objects.requireNonNull(this.getClass().getResourceAsStream("/data/xml-with-xxe.xml"));
+    }
+}
\ No newline at end of file

