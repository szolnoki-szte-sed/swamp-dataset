--- server/src/main/java/com/thoughtworks/go/server/newsecurity/filterchains/AuthorizeFilterChain.java ---
@@ -33,6 +33,9 @@ public AuthorizeFilterChain(AllowAllAccessFilter allowAllAccessFilter,
                                 BasicAuthenticationWithChallengeFailureResponseHandler apiAccessDeniedHandler,
                                 GenericAccessDeniedHandler genericAccessDeniedHandler) {
         super(FilterChainBuilder.newInstance()
+                // internal routes
+                .addFilterChain("/rails/**", new DenyAllAccessFilter())
+
                 // agent access
                 .addAuthorityFilterChain("/remoting/files/**", apiAccessDeniedHandler, ROLE_AGENT)
                 .addAuthorityFilterChain("/remoting/api/agent/**", apiAccessDeniedHandler, ROLE_AGENT)

--- server/src/main/webapp/WEB-INF/rails/app/controllers/admin/configuration_controller.rb ---
@@ -15,6 +15,7 @@
 #
 
 class Admin::ConfigurationController < AdminController
+  before_action :check_admin_user_and_403
   before_action :fetch_config , :only => [:show, :edit]
   before_action :tab_name, :page_title
 

--- server/src/main/webapp/WEB-INF/rails/app/controllers/admin/stages_controller.rb ---
@@ -16,7 +16,6 @@
 
 module Admin
   class StagesController < AdminController
-    include AuthorizationHelper
     before_action :check_admin_user_and_403
     layout "application"
 

--- server/src/main/webapp/WEB-INF/rails/spec/controllers/admin/configuration_controller_spec.rb ---
@@ -17,8 +17,6 @@
 require 'rails_helper'
 
 describe Admin::ConfigurationController do
-  include ExtraSpecAssertions
-
   before(:each) do
     @admin_service = double("admin_service")
     @config_repository = double("config_repository")
@@ -35,6 +33,7 @@
       expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
       expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
       expect(@config_repository).to receive(:getRevision).with('md5').and_return(cruise_config_revision)
+      login_as_admin
     end
 
     it "should set tab name for show" do
@@ -50,6 +49,7 @@
 
   describe "view_title" do
     before :each do
+      login_as_admin
       cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
       expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
       expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
@@ -89,145 +89,190 @@
     end
   end
 
-  describe "show" do
-    it "should render view with config" do
-      cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
-      expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
-      expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
-      expect(@config_repository).to receive(:getRevision).with('md5').and_return(cruise_config_revision)
-      get :show
-
-      expect(response).to render_template "show"
-      expect(assigns[:go_config].content).to eq("config-content")
-      expect(assigns[:go_config].md5).to eq("md5")
-      expect(assigns[:go_config].location).to eq("/foo/bar")
-      expect(assigns[:go_config_revision]).to eq(cruise_config_revision)
+  describe "actions" do
+    before :each do
+      login_as_admin
     end
-  end
 
-  describe "edit" do
-    it "should render edit" do
-      cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
-      expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
-      expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
-      expect(@config_repository).to receive(:getRevision).with('md5').and_return(cruise_config_revision)
-      get :edit
-
-      expect(response).to render_template "edit"
-      expect(assigns[:go_config].content).to eq("config-content")
-      expect(assigns[:go_config].md5).to eq("md5")
-      expect(assigns[:go_config].location).to eq("/foo/bar")
-      expect(assigns[:go_config_revision]).to eq(cruise_config_revision)
+    def assert_redirect(url)
+      expect(response.status).to eq(302)
+      expect(response.redirect_url).to match(%r{#{url}})
     end
-  end
-
-  describe "update" do
-    it "should update the configuration" do
-      param_map = {"content" => "config_content", "md5" => "md5"}
-      expect(@admin_service).to receive(:updateConfig).with(param_map, an_instance_of(HttpLocalizedOperationResult)).and_return(GoConfigValidity::valid())
 
-      put :update, params:{:go_config => param_map}
-
-      expect(flash[:success]).to eq('Saved successfully.')
-      assert_redirect config_view_path
+    describe "show" do
+      it "should render view with config" do
+        cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
+        expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
+        expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
+        expect(@config_repository).to receive(:getRevision).with('md5').and_return(cruise_config_revision)
+        get :show
+
+        expect(response).to render_template "show"
+        expect(assigns[:go_config].content).to eq("config-content")
+        expect(assigns[:go_config].md5).to eq("md5")
+        expect(assigns[:go_config].location).to eq("/foo/bar")
+        expect(assigns[:go_config_revision]).to eq(cruise_config_revision)
+      end
     end
 
-    it "should render edit page when config save fails" do
-      expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
-
-      current_config = GoConfigRevision.new("config-content", "current-md5", "loser", "2.3.0", TimeProvider.new)
-      expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(current_config)
-
-      submitted_copy = {"content" => "edited-content", "md5" => "md5"}
-      config_validity = double('config validity')
-      expect(config_validity).to receive(:isValid).and_return(false)
-      expect(config_validity).to receive(:errorMessage).and_return('Wrong config xml')
-      allow(controller).to receive(:switch_to_split_pane?).once.with(config_validity).and_return(false)
-      expect(@admin_service).to receive(:updateConfig).with(submitted_copy, an_instance_of(HttpLocalizedOperationResult)).and_return(config_validity)
-      cruise_config_revision = double('cruise config revision')
-      expect(@config_repository).to receive(:getRevision).with(submitted_copy['md5']).and_return(cruise_config_revision)
+    describe "edit" do
+      it "should render edit" do
+        cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
+        expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
+        expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
+        expect(@config_repository).to receive(:getRevision).with('md5').and_return(cruise_config_revision)
+        get :edit
+
+        expect(response).to render_template "edit"
+        expect(assigns[:go_config].content).to eq("config-content")
+        expect(assigns[:go_config].md5).to eq("md5")
+        expect(assigns[:go_config].location).to eq("/foo/bar")
+        expect(assigns[:go_config_revision]).to eq(cruise_config_revision)
+      end
+    end
 
-      put :update, params:{:go_config => submitted_copy}
+    describe "update" do
+      it "should update the configuration" do
+        param_map = {"content" => "config_content", "md5" => "md5"}
+        expect(@admin_service).to receive(:updateConfig).with(param_map, an_instance_of(HttpLocalizedOperationResult)).and_return(GoConfigValidity::valid())
+
+        put :update, params:{:go_config => param_map}
+
+        expect(flash[:success]).to eq('Saved successfully.')
+        assert_redirect config_view_path
+      end
+
+      it "should render edit page when config save fails" do
+        expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
+
+        current_config = GoConfigRevision.new("config-content", "current-md5", "loser", "2.3.0", TimeProvider.new)
+        expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(current_config)
+
+        submitted_copy = {"content" => "edited-content", "md5" => "md5"}
+        config_validity = double('config validity')
+        expect(config_validity).to receive(:isValid).and_return(false)
+        expect(config_validity).to receive(:errorMessage).and_return('Wrong config xml')
+        allow(controller).to receive(:switch_to_split_pane?).once.with(config_validity).and_return(false)
+        expect(@admin_service).to receive(:updateConfig).with(submitted_copy, an_instance_of(HttpLocalizedOperationResult)).and_return(config_validity)
+        cruise_config_revision = double('cruise config revision')
+        expect(@config_repository).to receive(:getRevision).with(submitted_copy['md5']).and_return(cruise_config_revision)
+
+        put :update, params:{:go_config => submitted_copy}
+
+        expect(response).to render_template "edit"
+        expect(flash.now[:error]).to eq('Save failed, see errors below')
+        expect(assigns[:errors][0]).to eq("Wrong config xml")
+        expect(assigns[:go_config].content).to eq("edited-content")
+        expect(assigns[:go_config].md5).to eq("md5")
+        expect(assigns[:go_config].location).to eq("/foo/bar")
+        expect(assigns[:go_config_revision]).to eq(cruise_config_revision)
+      end
+
+      it "should render split pane when config save fails because of merge conflict" do
+        expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
+
+        current_config = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
+        expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(current_config)
+        expect(@config_repository).to receive(:getRevision).with('md5').and_return(current_config)
+
+        submitted_copy = {"content" => "content-which-caused-conflict", "md5" => "md5"}
+
+        config_validity = double('config validity')
+        expect(config_validity).to receive(:isValid).and_return(false)
+        expect(config_validity).to receive(:errorMessage).and_return('Conflict in merging')
+        allow(controller).to receive(:switch_to_split_pane?).once.with(config_validity).and_return(true)
+        expect(@admin_service).to receive(:updateConfig).with(submitted_copy, an_instance_of(HttpLocalizedOperationResult)).and_return(config_validity)
+
+        put :update, params: {:go_config => submitted_copy}
+
+        expect(response).to render_template "split_pane"
+        expect(flash.now[:error]).to eq("Someone has modified the configuration and your changes are in conflict. Please review, amend and retry.")
+        expect(assigns[:errors][0]).to eq("Conflict in merging")
+        expect(assigns[:flash_help_link]).to eq("<a class='' href='#{CurrentGoCDVersion.docs_url('/configuration/configuration_reference.html')}' target='_blank'>Help Topic: Configuration</a>")
+        expect(assigns[:conflicted_config].content).to eq(submitted_copy['content'])
+        expect(assigns[:conflicted_config].md5).to eq(submitted_copy['md5'])
+        expect(assigns[:conflicted_config].location).to eq(submitted_copy['location'])
+        expect(assigns[:go_config].content).to eq(current_config.getContent)
+        expect(assigns[:go_config].md5).to eq(current_config.getMd5)
+        expect(assigns[:go_config].location).to eq('/foo/bar')
+        expect(assigns[:go_config_revision]).to eq(current_config)
+      end
+
+      it "should render display configuration merged successfully when a merge happens" do
+        submitted_copy = {"content" => "config_content_1", "md5" => "md5"}
+        config_validity = double('config_validity')
+        expect(config_validity).to receive(:isValid).and_return(true)
+        expect(config_validity).to receive(:wasMerged).and_return(true)
+        expect(@admin_service).to receive(:updateConfig).with(submitted_copy, an_instance_of(HttpLocalizedOperationResult)).and_return(config_validity)
+
+        put :update, params:{:go_config => submitted_copy}
+
+        expect(flash[:success]).to eq('Saved successfully. The configuration was modified by someone else, but your changes were merged successfully.')
+        assert_redirect config_view_path
+      end
+    end
 
-      expect(response).to render_template "edit"
-      expect(flash.now[:error]).to eq('Save failed, see errors below')
-      expect(assigns[:errors][0]).to eq("Wrong config xml")
-      expect(assigns[:go_config].content).to eq("edited-content")
-      expect(assigns[:go_config].md5).to eq("md5")
-      expect(assigns[:go_config].location).to eq("/foo/bar")
-      expect(assigns[:go_config_revision]).to eq(cruise_config_revision)
+    describe "switch_to_split_pane?" do
+      it "should return false when config validity is valid" do
+        config_validity = double('config validity')
+        expect(config_validity).to receive(:isValid).and_return(true)
+        expect(config_validity).to receive(:isMergeConflict).never
+        expect(config_validity).to receive(:isPostValidationError).never
+        actual = @controller.send(:switch_to_split_pane?, config_validity)
+        expect(actual).to eq(false)
+      end
+
+      it "should return true when config validity says a merge failure" do
+        config_validity = double('config validity')
+        expect(config_validity).to receive(:isValid).and_return(false)
+        expect(config_validity).to receive(:isMergeConflict).and_return(true)
+        expect(config_validity).to receive(:isPostValidationError).never
+        actual = @controller.send(:switch_to_split_pane?, config_validity)
+        expect(actual).to eq(true)
+      end
+
+      it "should return true when config validity says a post validation error" do
+        config_validity = double('config validity')
+        expect(config_validity).to receive(:isValid).and_return(false)
+        expect(config_validity).to receive(:isMergeConflict).and_return(false)
+        expect(config_validity).to receive(:isPostValidationError).and_return(true)
+        actual = @controller.send(:switch_to_split_pane?, config_validity)
+        expect(actual).to eq(true)
+      end
     end
+  end
 
-    it "should render split pane when config save fails because of merge conflict" do
+  describe "security" do
+    it 'should allow anyone, with security disabled' do
+      disable_security
+      cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
       expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
-
-      current_config = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
-      expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(current_config)
-      expect(@config_repository).to receive(:getRevision).with('md5').and_return(current_config)
-
-      submitted_copy = {"content" => "content-which-caused-conflict", "md5" => "md5"}
-
-      config_validity = double('config validity')
-      expect(config_validity).to receive(:isValid).and_return(false)
-      expect(config_validity).to receive(:errorMessage).and_return('Conflict in merging')
-      allow(controller).to receive(:switch_to_split_pane?).once.with(config_validity).and_return(true)
-      expect(@admin_service).to receive(:updateConfig).with(submitted_copy, an_instance_of(HttpLocalizedOperationResult)).and_return(config_validity)
-
-      put :update, params: {:go_config => submitted_copy}
-
-      expect(response).to render_template "split_pane"
-      expect(flash.now[:error]).to eq("Someone has modified the configuration and your changes are in conflict. Please review, amend and retry.")
-      expect(assigns[:errors][0]).to eq("Conflict in merging")
-      expect(assigns[:flash_help_link]).to eq("<a class='' href='#{CurrentGoCDVersion.docs_url('/configuration/configuration_reference.html')}' target='_blank'>Help Topic: Configuration</a>")
-      expect(assigns[:conflicted_config].content).to eq(submitted_copy['content'])
-      expect(assigns[:conflicted_config].md5).to eq(submitted_copy['md5'])
-      expect(assigns[:conflicted_config].location).to eq(submitted_copy['location'])
-      expect(assigns[:go_config].content).to eq(current_config.getContent)
-      expect(assigns[:go_config].md5).to eq(current_config.getMd5)
-      expect(assigns[:go_config].location).to eq('/foo/bar')
-      expect(assigns[:go_config_revision]).to eq(current_config)
+      expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
+      expect(controller).to allow_action(:get, :show)
     end
 
-    it "should render display configuration merged successfully when a merge happens" do
-      submitted_copy = {"content" => "config_content_1", "md5" => "md5"}
-      config_validity = double('config_validity')
-      expect(config_validity).to receive(:isValid).and_return(true)
-      expect(config_validity).to receive(:wasMerged).and_return(true)
-      expect(@admin_service).to receive(:updateConfig).with(submitted_copy, an_instance_of(HttpLocalizedOperationResult)).and_return(config_validity)
+    it 'should disallow anonymous users, with security enabled' do
+      enable_security
+      login_as_anonymous
+      expect(controller).to disallow_action(:get, :show)
+    end
 
-      put :update, params:{:go_config => submitted_copy}
+    it 'should disallow normal users, with security enabled' do
+      login_as_user
+      expect(controller).to disallow_action(:get, :show)
+    end
 
-      expect(flash[:success]).to eq('Saved successfully. The configuration was modified by someone else, but your changes were merged successfully.')
-      assert_redirect config_view_path
+    it 'should allow admin users, with security enabled' do
+      login_as_admin
+      cruise_config_revision = GoConfigRevision.new("config-content", "md5", "loser", "2.3.0", TimeProvider.new)
+      expect(@go_config_service).to receive(:fileLocation).and_return('/foo/bar')
+      expect(@go_config_service).to receive(:getConfigAtVersion).with('current').and_return(cruise_config_revision)
+      expect(controller).to allow_action(:get, :show)
     end
-  end
 
-  describe "switch_to_split_pane?" do
-    it "should return false when config validity is valid" do
-      config_validity = double('config validity')
-      expect(config_validity).to receive(:isValid).and_return(true)
-      expect(config_validity).to receive(:isMergeConflict).never
-      expect(config_validity).to receive(:isPostValidationError).never
-      actual = @controller.send(:switch_to_split_pane?, config_validity)
-      expect(actual).to eq(false)
-    end
-
-    it "should return true when config validity says a merge failure" do
-      config_validity = double('config validity')
-      expect(config_validity).to receive(:isValid).and_return(false)
-      expect(config_validity).to receive(:isMergeConflict).and_return(true)
-      expect(config_validity).to receive(:isPostValidationError).never
-      actual = @controller.send(:switch_to_split_pane?, config_validity)
-      expect(actual).to eq(true)
-    end
-
-    it "should return true when config validity says a post validation error" do
-      config_validity = double('config validity')
-      expect(config_validity).to receive(:isValid).and_return(false)
-      expect(config_validity).to receive(:isMergeConflict).and_return(false)
-      expect(config_validity).to receive(:isPostValidationError).and_return(true)
-      actual = @controller.send(:switch_to_split_pane?, config_validity)
-      expect(actual).to eq(true)
+    it 'should disallow pipeline group admin users, with security enabled' do
+      login_as_group_admin
+      expect(controller).to disallow_action(:get, :show)
     end
   end
 end

--- server/src/main/webapp/WEB-INF/rails/spec/support/extra_spec_assertions.rb ---
@@ -1,22 +0,0 @@
-#
-# Copyright 2024 Thoughtworks, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-module ExtraSpecAssertions
-  def assert_redirect(url)
-    expect(response.status).to eq(302)
-    expect(response.redirect_url).to match(%r{#{url}})
-  end
-end
\ No newline at end of file

