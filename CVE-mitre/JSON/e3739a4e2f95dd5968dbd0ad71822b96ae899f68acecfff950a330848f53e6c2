--- frontend/src/ResetPassword/ResetPasswordPage.jsx ---
@@ -2,6 +2,7 @@ import React from 'react';
 import { Link } from 'react-router-dom';
 import { toast } from 'react-hot-toast';
 import config from 'config';
+import { authenticationService } from '@/_services';
 
 class ResetPassword extends React.Component {
   constructor(props) {
@@ -34,13 +35,8 @@ class ResetPassword extends React.Component {
       this.setState({
         isLoading: true,
       });
-      fetch(`${config.apiUrl}/reset_password`, {
-        method: 'POST',
-        headers: {
-          'Content-Type': 'application/json',
-        },
-        body: JSON.stringify(this.state),
-      })
+      authenticationService
+        .resetPassword(this.state)
         .then((res) => res.json())
         .then((res) => {
           if (res.error) {

--- frontend/src/_services/authentication.service.js ---
@@ -14,6 +14,7 @@ export const authenticationService = {
     return currentUserSubject.value;
   },
   signInViaOAuth,
+  resetPassword,
 };
 
 function login(email, password) {
@@ -55,6 +56,19 @@ function signup(email) {
     });
 }
 
+function resetPassword(params) {
+  const { token, password } = params;
+  const body = JSON.stringify({ token, password });
+
+  const requestOptions = {
+    method: 'POST',
+    headers: { 'Content-Type': 'application/json' },
+    body,
+  };
+
+  return fetch(`${config.apiUrl}/reset_password`, requestOptions);
+}
+
 function logout() {
   // remove user from local storage to log user out
   localStorage.removeItem('currentUser');

--- frontend/src/_services/user.service.js ---
@@ -48,7 +48,7 @@ function setPasswordFromToken({ token, password, organization, role, newSignup,
 }
 
 function updateCurrentUser(firstName, lastName) {
-  const body = { firstName, lastName };
+  const body = { first_name: firstName, last_name: lastName };
   const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(body) };
   return fetch(`${config.apiUrl}/users/update`, requestOptions).then(handleResponse);
 }

--- server/jest.config.ts ---
@@ -12,6 +12,7 @@ module.exports = async () => {
     moduleNameMapper: {
       'dist/src/entities/(.*)': '<rootDir>/dist/src/entities/$1',
       '^src/(.*)': '<rootDir>/src/$1',
+      '@dto/(.*)': '<rootDir>/src/dto/$1',
       '@plugins/(.*)': '<rootDir>/plugins/$1',
       '@services/(.*)': '<rootDir>/src/services/$1',
       '@controllers/(.*)': '<rootDir>/src/controllers/$1',

--- server/package.json ---
@@ -32,6 +32,7 @@
     "@nestjs/config": "^1.0.0",
     "@nestjs/core": "^8.0.0",
     "@nestjs/jwt": "^8.0.0",
+    "@nestjs/mapped-types": "^1.0.1",
     "@nestjs/passport": "^8.2.1",
     "@nestjs/platform-express": "^8.0.0",
     "@nestjs/platform-ws": "^8.0.10",
@@ -47,6 +48,7 @@
     "@types/ws": "^8.2.0",
     "bcrypt": "^5.0.1",
     "bson": "^4.6.0",
+    "class-transformer": "^0.5.1",
     "class-validator": "^0.13.1",
     "dotenv": "^10.0.0",
     "futoin-hkdf": "^1.4.2",
@@ -65,6 +67,7 @@
     "reflect-metadata": "^0.1.13",
     "rimraf": "^3.0.2",
     "rxjs": "^7.2.0",
+    "sanitize-html": "^2.7.0",
     "semver": "^7.3.5",
     "tedious": "^11.2.0",
     "ts-node": "^10.0.0",
@@ -86,6 +89,7 @@
     "@types/node": "^16.0.0",
     "@types/nodemailer": "^6.4.4",
     "@types/passport-jwt": "^3.0.6",
+    "@types/sanitize-html": "^2.6.2",
     "@types/supertest": "^2.0.11",
     "@types/ws": "^8.2.2",
     "@typescript-eslint/eslint-plugin": "^4.31.1",

--- server/src/all-exceptions-filter.ts ---
@@ -5,13 +5,15 @@ import { Logger } from 'nestjs-pino';
 export class AllExceptionsFilter implements ExceptionFilter {
   constructor(private readonly logger: Logger) {}
 
-  catch(exception: Error, host: ArgumentsHost) {
+  catch(exception: any, host: ArgumentsHost) {
     const ctx = host.switchToHttp();
     const response = ctx.getResponse();
     const request = ctx.getRequest();
 
     const status = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;
 
+    const message = exception?.response?.message || exception.message;
+
     if (status === HttpStatus.INTERNAL_SERVER_ERROR) {
       this.logger.error(exception);
     }
@@ -20,7 +22,7 @@ export class AllExceptionsFilter implements ExceptionFilter {
       statusCode: status,
       timestamp: new Date().toISOString(),
       path: request.url,
-      message: exception.message,
+      message,
     });
   }
 }

--- server/src/controllers/app.controller.ts ---
@@ -1,4 +1,5 @@
-import { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';
+import { AppAuthenticationDto, AppForgotPasswordDto, AppPasswordResetDto } from '@dto/app-authentication.dto';
+import { Controller, Get, Request, Post, UseGuards, Body } from '@nestjs/common';
 import { PasswordLoginDisabledGuard } from 'src/modules/auth/password-login-disabled.guard';
 import { AuthService } from '../services/auth.service';
 
@@ -8,25 +9,25 @@ export class AppController {
 
   @UseGuards(PasswordLoginDisabledGuard)
   @Post('authenticate')
-  async login(@Request() req) {
-    return this.authService.login(req.body);
+  async login(@Body() appAuthDto: AppAuthenticationDto) {
+    return this.authService.login(appAuthDto);
   }
 
   @UseGuards(PasswordLoginDisabledGuard)
   @Post('signup')
-  async signup(@Request() req) {
-    return this.authService.signup(req.body);
+  async signup(@Body() appAuthDto: AppAuthenticationDto) {
+    return this.authService.signup(appAuthDto);
   }
 
   @Post('/forgot_password')
-  async forgotPassword(@Request() req) {
-    await this.authService.forgotPassword(req.body.email);
+  async forgotPassword(@Body() appAuthDto: AppForgotPasswordDto) {
+    await this.authService.forgotPassword(appAuthDto.email);
     return {};
   }
 
   @Post('/reset_password')
-  async resetPassword(@Request() req) {
-    const { token, password } = req.body;
+  async resetPassword(@Body() appAuthDto: AppPasswordResetDto) {
+    const { token, password } = appAuthDto;
     await this.authService.resetPassword(token, password);
     return {};
   }
@@ -35,10 +36,4 @@ export class AppController {
   async healthCheck(@Request() req) {
     return { works: 'yeah' };
   }
-
-  // TODO: Added to debug intermittent failures when paired with proxy
-  @Post('/health')
-  async postHealthCheck(@Request() req) {
-    return { works: 'yeah' };
-  }
 }

--- server/src/controllers/apps.controller.ts ---
@@ -19,6 +19,8 @@ import { AppAuthGuard } from 'src/modules/auth/app-auth.guard';
 import { FoldersService } from '@services/folders.service';
 import { App } from 'src/entities/app.entity';
 import { AppImportExportService } from '@services/app_import_export.service';
+import { AppUpdateDto } from '@dto/app-update.dto';
+import { VersionCreateDto } from '@dto/version-create.dto';
 
 @Controller('apps')
 export class AppsController {
@@ -39,9 +41,9 @@ export class AppsController {
     }
     const app = await this.appsService.create(req.user);
 
-    await this.appsService.update(req.user, app.id, {
-      slug: app.id,
-    });
+    const appUpdateDto = new AppUpdateDto();
+    appUpdateDto.slug = app.id;
+    await this.appsService.update(req.user, app.id, appUpdateDto);
 
     return decamelizeKeys(app);
   }
@@ -114,15 +116,15 @@ export class AppsController {
 
   @UseGuards(JwtAuthGuard)
   @Put(':id')
-  async update(@Request() req, @Param() params, @Body('app') appChanges) {
+  async update(@Request() req, @Param() params, @Body('app') appUpdateDto: AppUpdateDto) {
     const app = await this.appsService.find(params.id);
     const ability = await this.appsAbilityFactory.appsActions(req.user, params);
 
     if (!ability.can('updateParams', app)) {
       throw new ForbiddenException('You do not have permissions to perform this action');
     }
 
-    const result = await this.appsService.update(req.user, params.id, appChanges);
+    const result = await this.appsService.update(req.user, params.id, appUpdateDto);
     const response = decamelizeKeys(result);
 
     return response;
@@ -260,20 +262,20 @@ export class AppsController {
 
   @UseGuards(JwtAuthGuard)
   @Post(':id/versions')
-  async createVersion(
-    @Request() req,
-    @Param() params,
-    @Body('versionName') versionName,
-    @Body('versionFromId') versionFromId
-  ) {
+  async createVersion(@Request() req, @Param() params, @Body() versionCreateDto: VersionCreateDto) {
     const app = await this.appsService.find(params.id);
     const ability = await this.appsAbilityFactory.appsActions(req.user, params);
 
     if (!ability.can('createVersions', app)) {
       throw new ForbiddenException('You do not have permissions to perform this action');
     }
 
-    const appUser = await this.appsService.createVersion(req.user, app, versionName, versionFromId);
+    const appUser = await this.appsService.createVersion(
+      req.user,
+      app,
+      versionCreateDto.versionName,
+      versionCreateDto.versionFromId
+    );
     return decamelizeKeys(appUser);
   }
 
@@ -329,9 +331,9 @@ export class AppsController {
       throw new ForbiddenException('You do not have permissions to perform this action');
     }
 
-    const appUser = await this.appsService.update(req.user, params.id, {
-      icon,
-    });
+    const appUpdateDto = new AppUpdateDto();
+    appUpdateDto.icon = icon;
+    const appUser = await this.appsService.update(req.user, params.id, appUpdateDto);
     return decamelizeKeys(appUser);
   }
 }

--- server/src/controllers/data_queries.controller.ts ---
@@ -2,6 +2,7 @@ import {
   Controller,
   Get,
   Param,
+  Body,
   Post,
   Patch,
   Delete,
@@ -17,6 +18,7 @@ import { DataSourcesService } from '../../src/services/data_sources.service';
 import { QueryAuthGuard } from 'src/modules/auth/query-auth.guard';
 import { AppsAbilityFactory } from 'src/modules/casl/abilities/apps-ability.factory';
 import { AppsService } from '@services/apps.service';
+import { CreateDataQueryDto, UpdateDataQueryDto } from '@dto/data-query.dto';
 
 @Controller('data_queries')
 export class DataQueriesController {
@@ -57,8 +59,8 @@ export class DataQueriesController {
 
   @UseGuards(JwtAuthGuard)
   @Post()
-  async create(@Request() req) {
-    const { kind, name, options, app_id, app_version_id, data_source_id } = req.body;
+  async create(@Request() req, @Body() dataQueryDto: CreateDataQueryDto): Promise<object> {
+    const { kind, name, options, app_id, app_version_id, data_source_id } = dataQueryDto;
     const appId = app_id;
     const appVersionId = app_version_id;
     const dataSourceId = data_source_id;
@@ -94,8 +96,8 @@ export class DataQueriesController {
 
   @UseGuards(JwtAuthGuard)
   @Patch(':id')
-  async update(@Request() req, @Param() params) {
-    const { name, options } = req.body;
+  async update(@Request() req, @Param() params, @Body() updateDataQueryDto: UpdateDataQueryDto) {
+    const { name, options } = updateDataQueryDto;
     const dataQueryId = params.id;
 
     const dataQuery = await this.dataQueriesService.findOne(dataQueryId);
@@ -131,9 +133,9 @@ export class DataQueriesController {
 
   @UseGuards(QueryAuthGuard)
   @Post(':id/run')
-  async runQuery(@Request() req, @Param() params) {
+  async runQuery(@Request() req, @Param() params, @Body() updateDataQueryDto: UpdateDataQueryDto) {
     const dataQueryId = params.id;
-    const { options } = req.body;
+    const { options } = updateDataQueryDto;
 
     const dataQuery = await this.dataQueriesService.findOne(dataQueryId);
 
@@ -175,8 +177,8 @@ export class DataQueriesController {
 
   @UseGuards(JwtAuthGuard)
   @Post('/preview')
-  async previewQuery(@Request() req, @Param() params) {
-    const { options, query } = req.body;
+  async previewQuery(@Request() req, @Body() updateDataQueryDto: UpdateDataQueryDto) {
+    const { options, query } = updateDataQueryDto;
     const dataQueryEntity = {
       ...query,
       dataSource: await this.dataSourcesService.findOne(query['data_source_id']),

--- server/src/controllers/data_sources.controller.ts ---
@@ -1,10 +1,17 @@
-import { Controller, ForbiddenException, Get, Param, Post, Put, Query, Request, UseGuards } from '@nestjs/common';
+import { Controller, ForbiddenException, Body, Get, Param, Post, Put, Query, Request, UseGuards } from '@nestjs/common';
 import { JwtAuthGuard } from '../../src/modules/auth/jwt-auth.guard';
 import { decamelizeKeys } from 'humps';
 import { DataSourcesService } from '../../src/services/data_sources.service';
 import { AppsService } from '@services/apps.service';
 import { AppsAbilityFactory } from 'src/modules/casl/abilities/apps-ability.factory';
 import { DataQueriesService } from '@services/data_queries.service';
+import {
+  AuthorizeDataSourceOauthDto,
+  CreateDataSourceDto,
+  GetDataSourceOauthUrlDto,
+  TestDataSourceDto,
+  UpdateDataSourceDto,
+} from '@dto/data-source.dto';
 
 @Controller('data_sources')
 export class DataSourcesController {
@@ -35,10 +42,10 @@ export class DataSourcesController {
 
   @UseGuards(JwtAuthGuard)
   @Post()
-  async create(@Request() req) {
-    const { kind, name, options } = req.body;
-    const appId = req.body.app_id;
-    const appVersionId = req.body.app_version_id;
+  async create(@Request() req, @Body() createDataSourceDto: CreateDataSourceDto) {
+    const { kind, name, options, app_id, app_version_id } = createDataSourceDto;
+    const appId = app_id;
+    const appVersionId = app_version_id;
 
     const app = await this.appsService.find(appId);
     const ability = await this.appsAbilityFactory.appsActions(req.user, {
@@ -55,9 +62,9 @@ export class DataSourcesController {
 
   @UseGuards(JwtAuthGuard)
   @Put(':id')
-  async update(@Request() req, @Param() params) {
+  async update(@Request() req, @Param() params, @Body() updateDataSourceDto: UpdateDataSourceDto) {
     const dataSourceId = params.id;
-    const { name, options } = req.body;
+    const { name, options } = updateDataSourceDto;
 
     const dataSource = await this.dataSourcesService.findOne(dataSourceId);
 
@@ -76,23 +83,27 @@ export class DataSourcesController {
 
   @UseGuards(JwtAuthGuard)
   @Post('test_connection')
-  async testConnection(@Request() req) {
+  async testConnection(@Request() req, @Body() testDataSourceDto: TestDataSourceDto) {
     const { kind, options } = req.body;
     return await this.dataSourcesService.testConnection(kind, options);
   }
 
   @UseGuards(JwtAuthGuard)
   @Post('fetch_oauth2_base_url')
-  async getAuthUrl(@Request() req) {
-    const { provider } = req.body;
+  async getAuthUrl(@Request() req, @Body() getDataSourceOauthUrlDto: GetDataSourceOauthUrlDto) {
+    const { provider } = getDataSourceOauthUrlDto;
     return await this.dataSourcesService.getAuthUrl(provider);
   }
 
   @UseGuards(JwtAuthGuard)
   @Post(':id/authorize_oauth2')
-  async authorizeOauth2(@Request() req, @Param() params) {
+  async authorizeOauth2(
+    @Request() req,
+    @Param() params,
+    @Body() authorizeDataSourceOauthDto: AuthorizeDataSourceOauthDto
+  ) {
     const dataSourceId = params.id;
-    const { code } = req.body;
+    const { code } = authorizeDataSourceOauthDto;
 
     const dataSource = await this.dataSourcesService.findOne(dataSourceId);
 

--- server/src/controllers/folders.controller.ts ---
@@ -1,10 +1,11 @@
-import { Controller, Get, Post, Query, Request, UseGuards } from '@nestjs/common';
+import { Controller, Get, Post, Query, Request, UseGuards, Body } from '@nestjs/common';
 import { decamelizeKeys } from 'humps';
 import { JwtAuthGuard } from '../../src/modules/auth/jwt-auth.guard';
 import { FoldersService } from '../services/folders.service';
 import { ForbiddenException } from '@nestjs/common';
 import { FoldersAbilityFactory } from 'src/modules/casl/abilities/folders-ability.factory';
 import { Folder } from 'src/entities/folder.entity';
+import { CreateFolderDto } from '@dto/create-folder.dto';
 
 @Controller('folders')
 export class FoldersController {
@@ -19,7 +20,7 @@ export class FoldersController {
 
   @UseGuards(JwtAuthGuard)
   @Post()
-  async create(@Request() req) {
+  async create(@Request() req, @Body() createFolderDto: CreateFolderDto) {
     const ability = await this.foldersAbilityFactory.folderActions(req.user, {});
 
     if (!ability.can('createFolder', Folder)) {

--- server/src/controllers/group_permissions.controller.ts ---
@@ -1,12 +1,12 @@
-import { Controller, Post, Get, Put, Delete, Request, UseGuards, Param } from '@nestjs/common';
-
+import { Controller, Body, Post, Get, Put, Delete, Request, UseGuards, Param } from '@nestjs/common';
 import { decamelizeKeys } from 'humps';
 import { JwtAuthGuard } from '../../src/modules/auth/jwt-auth.guard';
 import { GroupPermissionsService } from '../services/group_permissions.service';
 import { PoliciesGuard } from 'src/modules/casl/policies.guard';
 import { CheckPolicies } from 'src/modules/casl/check_policies.decorator';
 import { AppAbility } from 'src/modules/casl/casl-ability.factory';
 import { User } from 'src/entities/user.entity';
+import { CreateGroupPermissionDto, UpdateGroupPermissionDto } from '@dto/group-permission.dto';
 
 @Controller('group_permissions')
 export class GroupPermissionsController {
@@ -15,8 +15,8 @@ export class GroupPermissionsController {
   @UseGuards(JwtAuthGuard, PoliciesGuard)
   @CheckPolicies((ability: AppAbility) => ability.can('accessGroupPermission', User))
   @Post()
-  async create(@Request() req) {
-    const groupPermission = await this.groupPermissionsService.create(req.user, req.body.group);
+  async create(@Request() req, @Body() createGroupPermissionDto: CreateGroupPermissionDto) {
+    const groupPermission = await this.groupPermissionsService.create(req.user, createGroupPermissionDto.group);
 
     return decamelizeKeys(groupPermission);
   }
@@ -33,12 +33,16 @@ export class GroupPermissionsController {
   @UseGuards(JwtAuthGuard, PoliciesGuard)
   @CheckPolicies((ability: AppAbility) => ability.can('accessGroupPermission', User))
   @Put(':id/app_group_permissions/:appGroupPermissionId')
-  async updateAppGroupPermission(@Request() req, @Param() params) {
+  async updateAppGroupPermission(
+    @Request() req,
+    @Param() params,
+    @Body() updateGroupPermissionDto: UpdateGroupPermissionDto
+  ) {
     const groupPermission = await this.groupPermissionsService.updateAppGroupPermission(
       req.user,
       params.id,
       params.appGroupPermissionId,
-      req.body.actions
+      updateGroupPermissionDto.actions
     );
 
     return decamelizeKeys(groupPermission);

--- server/src/controllers/metadata.controller.ts ---
@@ -1,15 +1,16 @@
-import { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';
+import { Controller, Get, Request, Post, UseGuards, Body } from '@nestjs/common';
 import { MetadataService } from '@services/metadata.service';
 import { JwtAuthGuard } from '../modules/auth/jwt-auth.guard';
+import { UserOnboardingDto } from '@dto/user-onboarding.dto';
 
 @Controller('metadata')
 export class MetadataController {
   constructor(private metadataService: MetadataService) {}
 
   @UseGuards(JwtAuthGuard)
   @Post('finish_installation')
-  async finishInstallation(@Request() req) {
-    const { name, email, org } = req.body;
+  async finishInstallation(@Request() req, @Body() userOnboardingDto: UserOnboardingDto) {
+    const { name, email, org } = userOnboardingDto;
     const installedVersion = globalThis.TOOLJET_VERSION;
 
     const metadata = await this.metadataService.getMetaData();

--- server/src/controllers/organization_users.controller.ts ---
@@ -1,10 +1,11 @@
-import { Controller, Param, Post, Request, UseGuards } from '@nestjs/common';
+import { Controller, Param, Post, Request, UseGuards, Body } from '@nestjs/common';
 import { OrganizationUsersService } from 'src/services/organization_users.service';
 import { decamelizeKeys } from 'humps';
 import { JwtAuthGuard } from '../../src/modules/auth/jwt-auth.guard';
 import { AppAbility } from 'src/modules/casl/casl-ability.factory';
 import { PoliciesGuard } from 'src/modules/casl/policies.guard';
 import { CheckPolicies } from 'src/modules/casl/check_policies.decorator';
+import { InviteNewUserDto } from '../dto/invite-new-user.dto';
 import { User } from 'src/entities/user.entity';
 
 @Controller('organization_users')
@@ -15,8 +16,8 @@ export class OrganizationUsersController {
   @UseGuards(JwtAuthGuard, PoliciesGuard)
   @CheckPolicies((ability: AppAbility) => ability.can('inviteUser', User))
   @Post()
-  async create(@Request() req, @Param() params) {
-    const result = await this.organizationUsersService.inviteNewUser(req.user, req.body);
+  async create(@Request() req, @Body() inviteNewUserDto: InviteNewUserDto) {
+    const result = await this.organizationUsersService.inviteNewUser(req.user, inviteNewUserDto);
     return decamelizeKeys({ users: result });
   }
 
@@ -36,6 +37,7 @@ export class OrganizationUsersController {
     return decamelizeKeys({ result });
   }
 
+  // Deprecated
   @UseGuards(JwtAuthGuard, PoliciesGuard)
   @CheckPolicies((ability: AppAbility) => ability.can('changeRole', User))
   @Post(':id/change_role')

--- server/src/controllers/users.controller.ts ---
@@ -2,22 +2,26 @@ import { Body, Controller, Post, Patch, Request, UseGuards } from '@nestjs/commo
 import { JwtAuthGuard } from 'src/modules/auth/jwt-auth.guard';
 import { PasswordRevalidateGuard } from 'src/modules/auth/password-revalidate.guard';
 import { UsersService } from 'src/services/users.service';
+import { CreateUserDto, UpdateUserDto } from '@dto/user.dto';
 
 @Controller('users')
 export class UsersController {
   constructor(private usersService: UsersService) {}
 
   @Post('set_password_from_token')
-  async create(@Request() req) {
-    const result = await this.usersService.setupAccountFromInvitationToken(req.body);
+  async create(@Body() userCreateDto: CreateUserDto) {
+    const result = await this.usersService.setupAccountFromInvitationToken(userCreateDto);
     return result;
   }
 
   @UseGuards(JwtAuthGuard)
   @Patch('update')
-  async update(@Request() req, @Body() body) {
-    const { firstName, lastName } = body;
-    await this.usersService.update(req.user.id, { firstName, lastName });
+  async update(@Request() req, @Body() updateUserDto: UpdateUserDto) {
+    const { first_name, last_name } = updateUserDto;
+    await this.usersService.update(req.user.id, {
+      firstName: first_name,
+      lastName: last_name,
+    });
     await req.user.reload();
     return {
       first_name: req.user.firstName,
@@ -29,6 +33,8 @@ export class UsersController {
   @Patch('change_password')
   async changePassword(@Request() req, @Body() body) {
     const { newPassword } = body;
-    return await this.usersService.update(req.user.id, { password: newPassword });
+    return await this.usersService.update(req.user.id, {
+      password: newPassword,
+    });
   }
 }

--- server/src/dto/app-authentication.dto.ts ---
@@ -0,0 +1,34 @@
+import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';
+
+export class AppAuthenticationDto {
+  @IsEmail()
+  @IsOptional()
+  @IsNotEmpty()
+  email: string;
+
+  @IsString()
+  @IsOptional()
+  @IsNotEmpty()
+  password: string;
+
+  @IsString()
+  @IsOptional()
+  @IsNotEmpty()
+  token: string;
+}
+
+export class AppForgotPasswordDto {
+  @IsEmail()
+  @IsNotEmpty()
+  email: string;
+}
+
+export class AppPasswordResetDto {
+  @IsString()
+  @IsNotEmpty()
+  password: string;
+
+  @IsString()
+  @IsNotEmpty()
+  token: string;
+}

--- server/src/dto/app-update.dto.ts ---
@@ -0,0 +1,29 @@
+import { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';
+import { Transform } from 'class-transformer';
+import { sanitizeInput } from '../helpers/utils.helper';
+
+export class AppUpdateDto {
+  @IsString()
+  @IsOptional()
+  current_version_id: string;
+
+  @IsBoolean()
+  @IsOptional()
+  is_public: boolean;
+
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  name: string;
+
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  slug: string;
+
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  icon: string;
+}

--- server/src/dto/create-comment.dto.ts ---
@@ -1,16 +1,22 @@
-import { IsUUID, IsString } from 'class-validator';
+import { Transform } from 'class-transformer';
+import { IsUUID, IsString, IsNotEmpty, IsOptional } from 'class-validator';
+import { sanitizeInput } from 'src/helpers/utils.helper';
 
 export class CreateCommentDTO {
   @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
   comment: string;
 
-  @IsString()
+  @IsUUID()
   threadId: string;
 
   @IsUUID()
+  @IsOptional()
   userId: string;
 
   @IsUUID()
+  @IsOptional()
   organizationId: string;
 
   @IsString()

--- server/src/dto/create-folder.dto.ts ---
@@ -0,0 +1,10 @@
+import { Transform } from 'class-transformer';
+import { IsString, IsNotEmpty } from 'class-validator';
+import { sanitizeInput } from 'src/helpers/utils.helper';
+
+export class CreateFolderDto {
+  @IsString()
+  @IsNotEmpty()
+  @Transform(({ value }) => sanitizeInput(value))
+  name: string;
+}

--- server/src/dto/create-thread.dto.ts ---
@@ -1,21 +1,23 @@
-import { IsBoolean, IsInt, IsString, IsUUID } from 'class-validator';
+import { IsBoolean, IsNumber, IsOptional, IsUUID } from 'class-validator';
 
 export class CreateThreadDTO {
-  @IsInt()
+  @IsNumber()
   x: number;
 
-  @IsInt()
+  @IsNumber()
   y: number;
 
   @IsUUID()
   appId: string;
 
   @IsUUID()
+  @IsOptional()
   organizationId: string;
 
-  @IsString()
+  @IsUUID()
   appVersionsId: string;
 
   @IsBoolean()
+  @IsOptional()
   isResolved: boolean;
 }

--- server/src/dto/data-query.dto.ts ---
@@ -0,0 +1,39 @@
+import { Transform } from 'class-transformer';
+import { IsUUID, IsString, IsOptional, IsObject, IsNotEmpty } from 'class-validator';
+import { sanitizeInput } from 'src/helpers/utils.helper';
+import { PartialType } from '@nestjs/mapped-types';
+
+export class CreateDataQueryDto {
+  @IsUUID()
+  app_id: string;
+
+  @IsUUID()
+  app_version_id: string;
+
+  @IsUUID()
+  @IsOptional()
+  data_source_id: string;
+
+  @IsUUID()
+  @IsOptional()
+  organizationId: string;
+
+  @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  kind: string;
+
+  @IsObject()
+  @IsOptional()
+  query: object;
+
+  @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  name: string;
+
+  @IsObject()
+  options: object;
+}
+
+export class UpdateDataQueryDto extends PartialType(CreateDataQueryDto) {}

--- server/src/dto/data-source.dto.ts ---
@@ -0,0 +1,40 @@
+import { Transform } from 'class-transformer';
+import { IsUUID, IsString, IsNotEmpty, IsDefined } from 'class-validator';
+import { sanitizeInput } from 'src/helpers/utils.helper';
+import { PartialType } from '@nestjs/mapped-types';
+
+export class CreateDataSourceDto {
+  @IsUUID()
+  app_id: string;
+
+  @IsUUID()
+  app_version_id: string;
+
+  @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  kind: string;
+
+  @IsString()
+  @IsNotEmpty()
+  @Transform(({ value }) => sanitizeInput(value))
+  name: string;
+
+  @IsDefined()
+  options: any;
+}
+
+export class UpdateDataSourceDto extends PartialType(CreateDataSourceDto) {}
+export class TestDataSourceDto extends PartialType(CreateDataSourceDto) {}
+
+export class GetDataSourceOauthUrlDto {
+  @IsString()
+  @IsNotEmpty()
+  provider: string;
+}
+
+export class AuthorizeDataSourceOauthDto {
+  @IsString()
+  @IsNotEmpty()
+  code: string;
+}

--- server/src/dto/group-permission.dto.ts ---
@@ -0,0 +1,13 @@
+import { IsString, IsNotEmpty, IsObject } from 'class-validator';
+
+export class CreateGroupPermissionDto {
+  @IsString()
+  @IsNotEmpty()
+  group: string;
+}
+
+export class UpdateGroupPermissionDto {
+  @IsObject()
+  @IsNotEmpty()
+  actions: object;
+}

--- server/src/dto/invite-new-user.dto.ts ---
@@ -0,0 +1,20 @@
+import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';
+import { Transform } from 'class-transformer';
+import { sanitizeInput } from '../helpers/utils.helper';
+
+export class InviteNewUserDto {
+  @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  @IsOptional()
+  first_name: string;
+
+  @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  @IsOptional()
+  last_name: string;
+
+  @IsEmail()
+  email: string;
+}

--- server/src/dto/user-onboarding.dto.ts ---
@@ -0,0 +1,20 @@
+import { IsString, IsOptional } from 'class-validator';
+import { Transform } from 'class-transformer';
+import { sanitizeInput } from 'src/helpers/utils.helper';
+
+export class UserOnboardingDto {
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  name: string;
+
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  email: string;
+
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  org: string;
+}

--- server/src/dto/user.dto.ts ---
@@ -0,0 +1,43 @@
+import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';
+import { Transform } from 'class-transformer';
+import { sanitizeInput } from 'src/helpers/utils.helper';
+import { PartialType } from '@nestjs/mapped-types';
+
+export class CreateUserDto {
+  @IsString()
+  @IsOptional()
+  @IsNotEmpty()
+  @Transform(({ value }) => sanitizeInput(value))
+  first_name: string;
+
+  @IsString()
+  @IsOptional()
+  @IsNotEmpty()
+  @Transform(({ value }) => sanitizeInput(value))
+  last_name: string;
+
+  @IsString()
+  @IsOptional()
+  @IsNotEmpty()
+  @Transform(({ value }) => sanitizeInput(value))
+  organization: string;
+
+  @IsString()
+  @IsNotEmpty()
+  password: string;
+
+  @IsString()
+  @IsNotEmpty()
+  token: string;
+
+  @IsString()
+  @IsOptional()
+  @Transform(({ value }) => sanitizeInput(value))
+  role: string;
+
+  @IsBoolean()
+  @IsOptional()
+  new_signup: boolean;
+}
+
+export class UpdateUserDto extends PartialType(CreateUserDto) {}

--- server/src/dto/version-create.dto.ts ---
@@ -0,0 +1,14 @@
+import { IsNotEmpty, IsOptional, IsString, IsUUID } from 'class-validator';
+import { Transform } from 'class-transformer';
+import { sanitizeInput } from '../helpers/utils.helper';
+
+export class VersionCreateDto {
+  @IsString()
+  @Transform(({ value }) => sanitizeInput(value))
+  @IsNotEmpty()
+  versionName: string;
+
+  @IsUUID()
+  @IsOptional()
+  versionFromId: string;
+}

--- server/src/helpers/utils.helper.ts ---
@@ -1,4 +1,5 @@
 import { QueryError } from 'src/modules/data_sources/query.errors';
+import * as sanitizeHtml from 'sanitize-html';
 
 export function parseJson(jsonString: string, errorMessage?: string): object {
   try {
@@ -29,3 +30,11 @@ export async function getCachedConnection(dataSourceId, dataSourceUpdatedAt): Pr
     }
   }
 }
+
+export function sanitizeInput(value: string) {
+  return sanitizeHtml(value, {
+    allowedTags: [],
+    allowedAttributes: {},
+    disallowedTagsMode: 'recursiveEscape',
+  });
+}

--- server/src/main.ts ---
@@ -5,6 +5,7 @@ import * as helmet from 'helmet';
 import { Logger } from 'nestjs-pino';
 import { urlencoded, json } from 'express';
 import { AllExceptionsFilter } from './all-exceptions-filter';
+import { ValidationPipe } from '@nestjs/common';
 
 const fs = require('fs');
 
@@ -20,6 +21,8 @@ async function bootstrap() {
 
   app.useLogger(app.get(Logger));
   app.useGlobalFilters(new AllExceptionsFilter(app.get(Logger)));
+  app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));
+
   if (process.env.COMMENT_FEATURE_ENABLE !== 'false') {
     app.useWebSocketAdapter(new WsAdapter(app));
   }

--- server/src/services/apps.service.ts ---
@@ -15,6 +15,7 @@ import { UsersService } from './users.service';
 import { AppImportExportService } from './app_import_export.service';
 import { DataSourcesService } from './data_sources.service';
 import { Credential } from 'src/entities/credential.entity';
+import { AppUpdateDto } from '@dto/app-update.dto';
 
 @Injectable()
 export class AppsService {
@@ -212,10 +213,10 @@ export class AppsService {
     return await viewableAppsQb.getMany();
   }
 
-  async update(user: User, appId: string, params: any) {
-    const currentVersionId = params['current_version_id'];
-    const isPublic = params['is_public'];
-    const { name, slug, icon } = params;
+  async update(user: User, appId: string, appUpdateDto: AppUpdateDto) {
+    const currentVersionId = appUpdateDto.current_version_id;
+    const isPublic = appUpdateDto.is_public;
+    const { name, slug, icon } = appUpdateDto;
 
     const updateableParams = {
       name,

--- server/src/services/auth.service.ts ---
@@ -6,6 +6,7 @@ import { User } from '../entities/user.entity';
 import { OrganizationUsersService } from './organization_users.service';
 import { EmailService } from './email.service';
 import { decamelizeKeys } from 'humps';
+import { AppAuthenticationDto } from '@dto/app-authentication.dto';
 const bcrypt = require('bcrypt');
 const uuid = require('uuid');
 
@@ -37,8 +38,8 @@ export class AuthService {
     return isVerified ? user : null;
   }
 
-  async login(params: any) {
-    const user = await this.validateUser(params.email, params.password);
+  async login(appAuthDto: AppAuthenticationDto) {
+    const user = await this.validateUser(appAuthDto.email, appAuthDto.password);
 
     if (user && (await this.usersService.status(user)) !== 'archived') {
       const payload = { username: user.id, sub: user.email };
@@ -58,13 +59,13 @@ export class AuthService {
     }
   }
 
-  async signup(params: any) {
+  async signup(appAuthDto: AppAuthenticationDto) {
     // Check if the installation allows user signups
     if (process.env.DISABLE_SIGNUPS === 'true') {
       return {};
     }
 
-    const { email } = params;
+    const { email } = appAuthDto;
     const existingUser = await this.usersService.findByEmail(email);
     if (existingUser) {
       throw new NotAcceptableException('Email already exists');

--- server/src/services/organization_users.service.ts ---
@@ -7,6 +7,7 @@ import { UsersService } from 'src/services/users.service';
 import { OrganizationUser } from 'src/entities/organization_user.entity';
 import { BadRequestException } from '@nestjs/common';
 import { EmailService } from './email.service';
+import { InviteNewUserDto } from '@dto/invite-new-user.dto';
 const uuid = require('uuid');
 
 @Injectable()
@@ -22,11 +23,11 @@ export class OrganizationUsersService {
     return await this.organizationUsersRepository.findOne({ where: { id } });
   }
 
-  async inviteNewUser(currentUser: User, params: any): Promise<OrganizationUser> {
+  async inviteNewUser(currentUser: User, inviteNewUserDto: InviteNewUserDto): Promise<OrganizationUser> {
     const userParams = <User>{
-      firstName: params['first_name'],
-      lastName: params['last_name'],
-      email: params['email'],
+      firstName: inviteNewUserDto.first_name,
+      lastName: inviteNewUserDto.last_name,
+      email: inviteNewUserDto.email,
     };
 
     const existingUser = await this.usersService.findByEmail(userParams.email);
@@ -60,7 +61,9 @@ export class OrganizationUsersService {
 
   async changeRole(user: User, id: string, role: string) {
     // eslint-disable-next-line @typescript-eslint/no-unused-vars
-    const organizationUser = await this.organizationUsersRepository.findOne({ where: { id } });
+    const organizationUser = await this.organizationUsersRepository.findOne({
+      where: { id },
+    });
     if (organizationUser.role == 'admin') {
       const lastActiveAdmin = await this.lastActiveAdmin(organizationUser.organizationId);
 
@@ -73,8 +76,12 @@ export class OrganizationUsersService {
 
   async archive(id: string) {
     await getManager().transaction(async (manager) => {
-      const organizationUser = await manager.findOne(OrganizationUser, { where: { id } });
-      const user = await manager.findOne(User, { where: { id: organizationUser.userId } });
+      const organizationUser = await manager.findOne(OrganizationUser, {
+        where: { id },
+      });
+      const user = await manager.findOne(User, {
+        where: { id: organizationUser.userId },
+      });
 
       await this.usersService.throwErrorIfRemovingLastActiveAdmin(user);
 
@@ -86,14 +93,19 @@ export class OrganizationUsersService {
   }
 
   async unarchive(user: User, id: string) {
-    const organizationUser = await this.organizationUsersRepository.findOne({ where: { id } });
+    const organizationUser = await this.organizationUsersRepository.findOne({
+      where: { id },
+    });
     if (organizationUser.status !== 'archived') return false;
 
     await getManager().transaction(async (manager) => {
       await manager.update(OrganizationUser, organizationUser.id, {
         status: 'invited',
       });
-      await manager.update(User, organizationUser.userId, { invitationToken: uuid.v4(), password: uuid.v4() });
+      await manager.update(User, organizationUser.userId, {
+        invitationToken: uuid.v4(),
+        password: uuid.v4(),
+      });
     });
 
     const updatedUser = await this.usersService.findOne(organizationUser.userId);

--- server/src/services/users.service.ts ---
@@ -9,6 +9,7 @@ import { AppGroupPermission } from 'src/entities/app_group_permission.entity';
 import { UserGroupPermission } from 'src/entities/user_group_permission.entity';
 import { GroupPermission } from 'src/entities/group_permission.entity';
 import { BadRequestException } from '@nestjs/common';
+import { CreateUserDto } from '@dto/user.dto';
 const uuid = require('uuid');
 const bcrypt = require('bcrypt');
 
@@ -124,11 +125,11 @@ export class UsersService {
     return { user, newUserCreated };
   }
 
-  async setupAccountFromInvitationToken(params: any) {
-    const { organization, password, token, role } = params; // TODO: organization is the name of the organization, this should be changed
-    const firstName = params['first_name'];
-    const lastName = params['last_name'];
-    const newSignup = params['new_signup'];
+  async setupAccountFromInvitationToken(userCreateDto: CreateUserDto) {
+    const { organization, password, token, role } = userCreateDto;
+    const firstName = userCreateDto.first_name;
+    const lastName = userCreateDto.last_name;
+    const newSignup = userCreateDto.new_signup;
 
     if (!token) {
       throw new BadRequestException('Invalid token');

--- server/test/controllers/app.e2e-spec.ts ---
@@ -1,10 +1,11 @@
 /* eslint-disable @typescript-eslint/no-unused-vars */
 import * as request from 'supertest';
 import { INestApplication } from '@nestjs/common';
-import { Repository } from 'typeorm';
+import { getManager, Repository } from 'typeorm';
 import { User } from 'src/entities/user.entity';
 import { clearDB, createUser, createNestAppInstance, authHeaderForUser } from '../test.helper';
 import { OrganizationUser } from 'src/entities/organization_user.entity';
+import { EmailService } from '@services/email.service';
 
 describe('Authentication', () => {
   let app: INestApplication;
@@ -94,7 +95,7 @@ describe('Authentication', () => {
       expect(response.statusCode).toBe(403);
     });
 
-    it('does authenticate if valid credentials', async () => {
+    it('does not authenticate if valid credentials', async () => {
       await request(app.getHttpServer())
         .post('/api/authenticate')
         .send({ email: 'admin@tooljet.io', password: 'password' })
@@ -106,6 +107,67 @@ describe('Authentication', () => {
     });
   });
 
+  describe('POST /api/forgot_password', () => {
+    it('should return error if required params are not present', async () => {
+      const response = await request(app.getHttpServer()).post('/api/forgot_password');
+
+      expect(response.statusCode).toBe(400);
+      expect(response.body.message).toStrictEqual(['email should not be empty', 'email must be an email']);
+    });
+
+    it('should set token and send email', async () => {
+      const emailServiceMock = jest.spyOn(EmailService.prototype, 'sendPasswordResetEmail');
+      emailServiceMock.mockImplementation();
+
+      const response = await request(app.getHttpServer())
+        .post('/api/forgot_password')
+        .send({ email: 'admin@tooljet.io' });
+
+      expect(response.statusCode).toBe(201);
+
+      const user = await getManager().findOne(User, {
+        where: { email: 'admin@tooljet.io' },
+      });
+
+      expect(emailServiceMock).toHaveBeenCalledWith(user.email, user.forgotPasswordToken);
+    });
+  });
+
+  describe('POST /api/reset_password', () => {
+    it('should return error if required params are not present', async () => {
+      const response = await request(app.getHttpServer()).post('/api/reset_password');
+
+      expect(response.statusCode).toBe(400);
+      expect(response.body.message).toStrictEqual([
+        'password should not be empty',
+        'password must be a string',
+        'token should not be empty',
+        'token must be a string',
+      ]);
+    });
+
+    it('should reset password', async () => {
+      const user = await getManager().findOne(User, {
+        where: { email: 'admin@tooljet.io' },
+      });
+
+      user.forgotPasswordToken = 'token';
+      await user.save();
+
+      const response = await request(app.getHttpServer()).post('/api/reset_password').send({
+        password: 'new_password',
+        token: 'token',
+      });
+
+      expect(response.statusCode).toBe(201);
+
+      await request(app.getHttpServer())
+        .post('/api/authenticate')
+        .send({ email: 'admin@tooljet.io', password: 'new_password' })
+        .expect(201);
+    });
+  });
+
   afterAll(async () => {
     await app.close();
   });

--- server/test/controllers/data_queries.e2e-spec.ts ---
@@ -349,6 +349,7 @@ describe('data queries controller', () => {
     });
 
     const requestBody = {
+      name: 'get query',
       app_id: application.id,
       kind: 'restapi',
       options: { method: 'get' },
@@ -402,11 +403,15 @@ describe('data queries controller', () => {
       user: adminUserData.user,
     });
 
+    const applicationVersion = await createApplicationVersion(app, application);
+
     let queryParams = {
+      name: 'get query',
       app_id: application.id,
       data_source_id: dataSource.id,
       kind: 'restapi',
       options: { method: 'get' },
+      app_version_id: applicationVersion.id,
     };
 
     // Create query if data source belongs to same app
@@ -418,10 +423,12 @@ describe('data queries controller', () => {
     expect(response.statusCode).toBe(201);
 
     queryParams = {
+      name: 'get query',
       app_id: anotherApplication.id,
       data_source_id: dataSource.id,
       kind: 'restapi',
       options: { method: 'get' },
+      app_version_id: applicationVersion.id,
     };
 
     // Fordbidden if data source belongs to another app

--- server/test/controllers/users.e2e-spec.ts ---
@@ -15,9 +15,12 @@ describe('users controller', () => {
     app = await createNestAppInstance();
   });
 
-  describe('change password', () => {
+  describe('PATCH /api/users/change_password', () => {
     it('should allow users to update their password', async () => {
-      const userData = await createUser(app, { email: 'admin@tooljet.io', role: 'admin' });
+      const userData = await createUser(app, {
+        email: 'admin@tooljet.io',
+        role: 'admin',
+      });
       const { user } = userData;
 
       const oldPassword = user.password;
@@ -29,48 +32,120 @@ describe('users controller', () => {
 
       expect(response.statusCode).toBe(200);
 
-      const updatedUser = await getManager().findOne(User, { where: { email: user.email } });
+      const updatedUser = await getManager().findOne(User, {
+        where: { email: user.email },
+      });
       expect(updatedUser.password).not.toEqual(oldPassword);
     });
 
     it('should not allow users to update their password if entered current password is wrong', async () => {
-      const userData = await createUser(app, { email: 'admin@tooljet.io', role: 'admin' });
+      const userData = await createUser(app, {
+        email: 'admin@tooljet.io',
+        role: 'admin',
+      });
       const { user } = userData;
 
       const oldPassword = user.password;
 
       const response = await request(app.getHttpServer())
         .patch('/api/users/change_password')
         .set('Authorization', authHeaderForUser(user))
-        .send({ currentPassword: 'wrong password', newPassword: 'new password' });
+        .send({
+          currentPassword: 'wrong password',
+          newPassword: 'new password',
+        });
 
       expect(response.statusCode).toBe(403);
 
-      const updatedUser = await getManager().findOne(User, { where: { email: user.email } });
+      const updatedUser = await getManager().findOne(User, {
+        where: { email: user.email },
+      });
       expect(updatedUser.password).toEqual(oldPassword);
     });
   });
 
-  describe('update user', () => {
+  describe('PATCH /api/users/update', () => {
     it('should allow users to update their firstName, lastName and password', async () => {
-      const userData = await createUser(app, { email: 'admin@tooljet.io', role: 'admin' });
+      const userData = await createUser(app, {
+        email: 'admin@tooljet.io',
+        role: 'admin',
+      });
       const { user } = userData;
 
-      const [firstName, lastName] = ['Daenerys', 'Targaryen', 'drogo666'];
+      const [firstName, lastName] = ['Daenerys', 'Targaryen'];
 
       const response = await request(app.getHttpServer())
         .patch('/api/users/update')
         .set('Authorization', authHeaderForUser(user))
-        .send({ firstName, lastName });
+        .send({ first_name: firstName, last_name: lastName });
 
       expect(response.statusCode).toBe(200);
 
-      const updatedUser = await getManager().findOne(User, { where: { email: user.email } });
+      const updatedUser = await getManager().findOne(User, {
+        where: { email: user.email },
+      });
       expect(updatedUser.firstName).toEqual(firstName);
       expect(updatedUser.lastName).toEqual(lastName);
     });
   });
 
+  describe('POST /api/users/set_password_from_token', () => {
+    it('should allow users to set password from token', async () => {
+      const adminUserData = await createUser(app, {
+        email: 'admin@tooljet.io',
+        role: 'admin',
+      });
+      const organization = adminUserData.organization;
+      const anotherUserData = await createUser(app, {
+        email: 'developer@tooljet.io',
+        groups: ['all_users'],
+        invitationToken: 'token',
+        organization,
+      });
+
+      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({
+        first_name: 'Khal',
+        last_name: 'Drogo',
+        token: 'token',
+        organization: 'Dothraki Pvt Limited',
+        password: 'Khaleesi',
+        new_signup: true,
+      });
+
+      expect(response.statusCode).toBe(201);
+
+      const updatedUser = await getManager().findOne(User, {
+        where: { email: anotherUserData.user.email },
+      });
+      expect(updatedUser.firstName).toEqual('Khal');
+      expect(updatedUser.lastName).toEqual('Drogo');
+    });
+
+    it('should return error if required params are not present', async () => {
+      const adminUserData = await createUser(app, {
+        email: 'admin@tooljet.io',
+        role: 'admin',
+      });
+      const organization = adminUserData.organization;
+      await createUser(app, {
+        email: 'developer@tooljet.io',
+        groups: ['all_users'],
+        invitationToken: 'token',
+        organization,
+      });
+
+      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token');
+
+      expect(response.statusCode).toBe(400);
+      expect(response.body.message).toStrictEqual([
+        'password should not be empty',
+        'password must be a string',
+        'token should not be empty',
+        'token must be a string',
+      ]);
+    });
+  });
+
   afterAll(async () => {
     await app.close();
   });

--- server/test/jest-e2e.json ---
@@ -9,6 +9,7 @@
   "moduleNameMapper": {
     "^src/(.*)": "<rootDir>/../src/$1",
     "@plugins/(.*)": "<rootDir>/../plugins/$1",
+    "@dto/(.*)": "<rootDir>/../src/dto/$1",
     "@services/(.*)": "<rootDir>/../src/services/$1",
     "@controllers/(.*)": "<rootDir>/../src/controllers/$1",
     "@ee/(.*)": "<rootDir>/../ee/$1"

--- server/test/test.helper.ts ---
@@ -6,7 +6,7 @@ import { OrganizationUser } from 'src/entities/organization_user.entity';
 import { Organization } from 'src/entities/organization.entity';
 import { User } from 'src/entities/user.entity';
 import { App } from 'src/entities/app.entity';
-import { INestApplication } from '@nestjs/common';
+import { INestApplication, ValidationPipe } from '@nestjs/common';
 import { Test } from '@nestjs/testing';
 import { AppModule } from 'src/app.module';
 import { AppVersion } from 'src/entities/app_version.entity';
@@ -37,6 +37,7 @@ export async function createNestAppInstance(): Promise<INestApplication> {
   app.setGlobalPrefix('api');
   app.useGlobalFilters(new AllExceptionsFilter(moduleRef.get(Logger)));
   app.useWebSocketAdapter(new WsAdapter(app));
+  app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));
   await app.init();
 
   return app;
@@ -61,6 +62,7 @@ export async function createNestAppInstanceWithEnvMock(): Promise<{
   app = moduleRef.createNestApplication();
   app.setGlobalPrefix('api');
   app.useGlobalFilters(new AllExceptionsFilter(moduleRef.get(Logger)));
+  app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));
   app.useWebSocketAdapter(new WsAdapter(app));
   await app.init();
 

