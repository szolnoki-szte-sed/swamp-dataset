--- packages/vega-selections/src/selectionResolve.js ---
@@ -1,6 +1,6 @@
 import {intersection, union} from 'd3-array';
 import {array, toNumber} from 'vega-util';
-import {$selectionId, And, Or, SelectionId, Union, VlMulti, VlPoint} from './constants';
+import {$selectionId, And, Or, SelectionId, Union, VlMulti, VlPoint} from './util';
 
 /**
  * Resolves selection for use as a scale domain or reads via the API.

--- packages/vega-selections/src/selectionTest.js ---
@@ -1,6 +1,6 @@
 import {bisector} from 'd3-array';
-import {$selectionId, Intersect} from './constants';
-import {field, inrange, isArray, isDate, toNumber} from 'vega-util';
+import {inrange, isArray, isDate, toNumber} from 'vega-util';
+import {$selectionId, Intersect, getter} from './util';
 
 const TYPE_ENUM = 'E',
     TYPE_RANGE_INC = 'R',
@@ -18,8 +18,7 @@ function testPoint(datum, entry) {
 
   for (; i<n; ++i) {
     f = fields[i];
-    f.getter = field.getter || field(f.field);
-    dval = f.getter(datum);
+    dval = getter(f)(datum);
 
     if (isDate(dval)) dval = toNumber(dval);
     if (isDate(values[i])) values[i] = toNumber(values[i]);

--- packages/vega-selections/src/selectionTuples.js ---
@@ -1,5 +1,5 @@
-import {extend, field} from 'vega-util';
-import {$selectionId, SelectionId} from './constants';
+import {extend} from 'vega-util';
+import {$selectionId, SelectionId, getter} from './util';
 
 /**
  * Maps an array of scene graph items to an array of selection tuples.
@@ -11,7 +11,7 @@ import {$selectionId, SelectionId} from './constants';
 export function selectionTuples(array, base) {
   return array.map(x => extend(
     base.fields ? {
-      values: base.fields.map(f => (f.getter || (f.getter = field(f.field)))(x.datum))
+      values: base.fields.map(f => getter(f)(x.datum))
     } : {
       [SelectionId]: $selectionId(x.datum)
     }, base));

--- packages/vega-selections/src/selectionVisitor.js ---
@@ -1,6 +1,6 @@
-import {Intersect} from './constants';
 import {Literal} from 'vega-expression';
 import {error, hasOwnProperty, peek} from 'vega-util';
+import {Intersect} from './util';
 
 const DataPrefix = ':',
       IndexPrefix = '@';

--- packages/vega-selections/src/util.js ---
@@ -1,5 +1,16 @@
 import {field} from 'vega-util';
 
+// Registers vega-util field accessors to protect against XSS attacks
+const SELECTION_GETTER = Symbol('vega_selection_getter');
+export function getter(f) {
+  if (!f.getter || !f.getter[SELECTION_GETTER]) {
+    f.getter = field(f.field);
+    f.getter[SELECTION_GETTER] = true;
+  }
+
+  return f.getter;
+}
+
 export const Intersect = 'intersect';
 export const Union = 'union';
 export const VlMulti = 'vlMulti';

