--- js/list.js ---
@@ -29,23 +29,15 @@ async function listEntries(last = 0) {
     const content = template.content.cloneNode(true);
     let $ = content.querySelector.bind(content);
 
-    $("article>h2").innerHTML = entry.title;
-    $("article>.meta time").innerHTML = entry.updated.toLocaleString();
+    $("article>h2").innerText = utils.html2txt(entry.title);
+    $("article>.meta time").innerText = entry.updated.toLocaleString();
+    $("article>div").innerText = utils.html2txt(entry.summary);
     $("article>.meta a.link").href = entry.link;
 
-    let sum = $("article>div");
-    sum.innerHTML = entry.summary;
-
-    // drop duplicate read more link in content
-    let a = $(`article>.summary a[href="${entry.link}"]`);
-    if (a) a.outerHTML = '';
-
-    utils.html2txt(sum);
-
     let showUrl = browser.runtime.getURL(`show.html?url=${encodeURI(entry.site)}`)
     let site = utils.getSiteTitle(entry.site);
     $("article>.meta a.site").href = showUrl;
-    $("article>.meta a.site").innerHTML = site;
+    $("article>.meta a.site").innerText = site;
     let $img = $("article>.meta img.icon");
     store.getIcon(site).then(src => $img.src = src);
 
@@ -75,7 +67,7 @@ async function listEntries(last = 0) {
   let more = document.querySelector("#more")
   if (num > 0) {
     more.dataset.done = true;
-    more.innerHTML = "There is no more feeds to load.";
+    more.innerText = "There is no more feeds to load.";
   }
 
   return firstId;

--- js/logs.js ---
@@ -73,12 +73,13 @@ or caused by a small timeout option.<p>
     let info = infos[type];
 
     $('.type').innerText = info.title;
-    $('.error').innerHTML = info.desc;
+    $('.error').innerHTML = info.desc; // none user input, safe to use
     let ol = $('.urls');
     for (const url of urls) {
       let li = document.createElement('li');
       let showUrl = browser.runtime.getURL(`show.html?url=${encodeURI(url)}`);
-      li.innerHTML = `<a href="${showUrl}" target="_blank">${url}</a>`;
+      li.innerHTML = `<a href="${showUrl}" target="_blank"></a>`;
+      li.querySelector('a').innerText = url;
       ol.appendChild(li);
     }
 

--- js/popup.js ---
@@ -2,7 +2,7 @@
 
 let browser = self.browser || self.chrome;
 
-import { findParent } from './utils.js';
+import * as utils from './utils.js';
 
 const feeds = JSON.parse(
   decodeURIComponent(window.location.search.substr(7))
@@ -16,7 +16,7 @@ const types = {
 };
 
 document.addEventListener("click", e => {
-  const el = findParent(e.target, ".items__item-link");
+  const el = utils.findParent(e.target, ".items__item-link");
   if (!el) return;
   e.preventDefault();
 
@@ -46,7 +46,7 @@ const items = feeds.map(feed => {
   }
 
   link.innerHTML =
-    (feed.title || feed.url) +
+    utils.html2txt(feed.title || feed.url) +
       (types[feed.type]
         ? ` <span style="opacity:0.6;">(${types[feed.type]})</span>`
         : "");

--- js/show.js ---
@@ -8,13 +8,13 @@ import * as store from './store.js';
 async function renderHTML(feed, resp) {
   let header = document.querySelector('body header');
 
-  header.querySelector('h1').innerHTML = feed.title;
+  header.querySelector('h1').innerText = utils.html2txt(feed.title);
   let h1 = header.querySelector('#site-link')
   h1.href = feed.link;
-  h1.innerHTML = utils.getSiteTitle(feed.link);
+  h1.innerText = utils.getSiteTitle(feed.link);
 
   let img = header.querySelector('#site-icon');
-  img.src = await store.getIcon(h1.innerHTML);
+  img.src = await store.getIcon(h1.innerText);
 
   let button = header.querySelector('subscribe-button')
   button.dataset.url = feed.url
@@ -23,14 +23,14 @@ async function renderHTML(feed, resp) {
 
   let bs = await browser.bookmarks.search({url:document.URL});
   if (bs.length > 0) {
-    button.innerHTML = "Unsubscribe";
+    button.innerText = "Unsubscribe";
   } else {
     if (resp.redirected) {
       let url = browser.runtime.getURL(`show.html?url=${encodeURI(resp.url)}`);
       document.location.href = url;
       return;
     }
-    button.innerHTML = "Subscribe";
+    button.innerText = "Subscribe";
   }
   button.style.display = "inline";
 
@@ -41,55 +41,32 @@ async function renderHTML(feed, resp) {
       alert("invalid feed");
       return;
     }
-    if (button.innerHTML == "Subscribe") {
+    if (button.innerText == "Subscribe") {
       await store.subscribe(e.target.dataset);
       await store.saveEntries(feed.url, feed.entries);
-      button.innerHTML = "Unsubscribe";
+      button.innerText = "Unsubscribe";
     } else {
       let bs = await browser.bookmarks.search({url:document.URL});
       await browser.bookmarks.remove(bs[0].id);
       await store.removeEntries(feed.url);
-      button.innerHTML = "Subscribe";
+      button.innerText = "Subscribe";
     }
   };
 
   const template = document.getElementById("feed-item");
 
   feed.entries.forEach(entry => {
     const content = template.content.cloneNode(true);
+    let $ = content.querySelector.bind(content);
 
     if (isNaN(entry.updated)) {
       invalid = true;
     }
 
-    content.querySelector("article>h2").innerHTML = entry.title;
-    content.querySelector("article>time").innerHTML = entry.updated.toLocaleString();
-
-    let sum = content.querySelector("article>div");
-    sum.innerHTML = entry.summary;
-
-    utils.html2txt(sum);
-
-    let link = utils.fixLink(entry.link, feed.url);
-    content.querySelector("article>a").href = link;
-
-    // drop duplicate read more link in content
-    let a = sum.querySelector(`a[href="${link}"]`);
-    if (a) a.outerHTML = '';
-
-    content.querySelectorAll("article>div img").forEach(img => {
-      if (img.dataset.src) {
-        img.src = img.dataset.src;
-      }
-      img.src = utils.fixLink(img.src, feed.url);
-      img.onerror = (e) => {
-        img.style.display = 'none';
-      };
-    });
-
-    content.querySelectorAll("article>div a").forEach(a => {
-      a.href = utils.fixLink(a.href, feed.url);
-    });
+    $("article>h2").innerText = utils.html2txt(entry.title);
+    $("article>time").innerText = entry.updated.toLocaleString();
+    $("article>div").innerText = utils.html2txt(entry.summary);
+    $("article>a").href = utils.fixLink(entry.link, feed.url);
 
     document.querySelector(".items").appendChild(content);
   });
@@ -120,12 +97,18 @@ async function main() {
     error.innerHTML = `
 <div>
   <p>Error while fetching feed</p>
-  <p style="color:red;">${e}</p>
-  <p><pre>${e.stack}</pre></p>
+  <p class="error" style="color:red;"></p>
+  <p><pre></pre></p>
   <p>You may go to the site to find the latest feed and unsubscribe this one.</p>
-  <a href="${url}">${url}</a>
+  <a href="#"></a>
 </div>
 `;
+    let $ = error.querySelector.bind(error);
+    $('p.error').innerText = e.message;
+    $('pre').innerText = e.stack;
+    $('a').href = url;
+    $('a').innerText = url;
+
     document.body.appendChild(error);
     return;
   }

--- js/utils.js ---
@@ -194,16 +194,13 @@ export async function syncAll() {
   }
 }
 
-// publisher may embed html code in <pre> or <code>
-// this should convert to text recursively.
-export async function html2txt(e) {
-  for (let i = 0; i < 10; i++) {
-    if (e.children) {
-      e.innerHTML = e.innerText;
-    } else {
-      break;
-    }
-  }
+// The return value may include html tags, so do not
+// assign it to innerHTML directly!
+export function html2txt(content) {
+  let e = document.createElement('div');
+  e.innerHTML = content;
+
+  return e.innerText;
 }
 
 export function getSiteTitle(link) {

