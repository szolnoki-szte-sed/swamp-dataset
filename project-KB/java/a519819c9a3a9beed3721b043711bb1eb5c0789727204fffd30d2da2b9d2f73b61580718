diff --git a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java
index 1d741b8514..1679d04b59 100644
--- a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java
+++ b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java
@@ -17,8 +17,10 @@
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.util.AXIOMUtil;
+import org.apache.axis2.util.XMLUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.Document;
 import org.wso2.carbon.context.PrivilegedCarbonContext;
 import org.wso2.carbon.databridge.commons.StreamDefinition;
 import org.wso2.carbon.event.output.adapter.core.OutputEventAdapterSchema;
@@ -41,16 +43,19 @@
 import org.wso2.carbon.registry.core.exceptions.RegistryException;
 import org.wso2.carbon.registry.core.service.RegistryService;
 import org.wso2.carbon.registry.core.utils.RegistryUtils;
+import org.xml.sax.InputSource;
 
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.stream.XMLStreamException;
 import java.io.File;
+import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import javax.xml.stream.XMLStreamException;
-
 public class CarbonEventPublisherService implements EventPublisherService {
 
     private static final Log log = LogFactory.getLog(CarbonEventPublisherService.class);
@@ -562,8 +567,13 @@ private void editEventPublisherConfiguration(String filename,
             throws EventPublisherConfigurationException {
         int tenantId = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId();
         try {
-            OMElement omElement = AXIOMUtil.stringToOM(eventPublisherConfigurationXml);
+            DocumentBuilderFactory dbf = EventPublisherUtil.getSecuredDocumentBuilder();
+            DocumentBuilder builder = dbf.newDocumentBuilder();
+            Document document = builder.parse(new InputSource(new StringReader(eventPublisherConfigurationXml)));
+
+            OMElement omElement = XMLUtils.toOM((document).getDocumentElement());
             omElement.build();
+
             EventPublisherConfigurationHelper.validateEventPublisherConfiguration(omElement);
             String mappingType = EventPublisherConfigurationHelper.getOutputMappingType(omElement);
             if (mappingType != null) {
@@ -582,7 +592,7 @@ private void editEventPublisherConfiguration(String filename,
             } else {
                 throw new EventPublisherConfigurationException("Mapping type of the Event Publisher " + originalEventPublisherName + " cannot be null");
             }
-        } catch (XMLStreamException e) {
+        } catch (Exception e) {
             throw new EventPublisherConfigurationException("Error while building XML configuration :" + e.getMessage(), e);
         }
     }
diff --git a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java
index 1193e7953c..c95ea071b2 100644
--- a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java
+++ b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java
@@ -15,6 +15,10 @@
 package org.wso2.carbon.event.publisher.core.internal.util;
 
 import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.xerces.impl.Constants;
+import org.apache.xerces.util.SecurityManager;
 import org.wso2.carbon.context.CarbonContext;
 import org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
 import org.wso2.carbon.event.publisher.core.config.EventPublisherConfiguration;
@@ -25,6 +29,8 @@
 import org.wso2.carbon.utils.multitenancy.MultitenantConstants;
 import org.wso2.siddhi.core.event.Event;
 
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
 import java.io.File;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
@@ -35,6 +41,8 @@ public class EventPublisherUtil {
 
     private static final String JVM_BIT_ARCH_SYSTEM_PROPERTY = "sun.arch.data.model";
     private static int referenceSize;
+    private static final int ENTITY_EXPANSION_LIMIT = 0;
+    private static final Log log = LogFactory.getLog(EventPublisherUtil.class);
 
     static {
         String arch = System.getProperty(JVM_BIT_ARCH_SYSTEM_PROPERTY);
@@ -231,4 +239,28 @@ public static void validateFilePath(String fileName) throws EventPublisherConfig
             throw new EventPublisherConfigurationException("File name contains restricted path elements. " + fileName);
         }
     }
+
+    public static DocumentBuilderFactory getSecuredDocumentBuilder() {
+
+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+        dbf.setNamespaceAware(true);
+        dbf.setXIncludeAware(false);
+        dbf.setExpandEntityReferences(false);
+
+        try {
+            dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);
+            dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);
+            dbf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);
+        } catch (ParserConfigurationException e) {
+            log.error(
+                    "Failed to load XML Processor Feature " + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + " or " +
+                            Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + " or " + Constants.LOAD_EXTERNAL_DTD_FEATURE);
+        }
+
+        SecurityManager securityManager = new SecurityManager();
+        securityManager.setEntityExpansionLimit(ENTITY_EXPANSION_LIMIT);
+        dbf.setAttribute(Constants.XERCES_PROPERTY_PREFIX + Constants.SECURITY_MANAGER_PROPERTY, securityManager);
+
+        return dbf;
+    }
 }
