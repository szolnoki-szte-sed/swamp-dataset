--- src/Core/Framework/DataAbstractionLayer/EntityDefinition.php ---
@@ -126,7 +126,7 @@ final public function getFields(): CompiledFieldCollection
 
             /** @var Field $field */
             foreach ($new as $field) {
-                $field->addFlags(new ApiAware(), new Extension());
+                $field->addFlags(new Extension());
 
                 if ($field instanceof AssociationField) {
                     $fields->add($field);

--- src/Core/Framework/DataAbstractionLayer/Field/Field.php ---
@@ -71,6 +71,9 @@ public function setFlags(Flag ...$flags): self
         foreach ($flags as $flag) {
             $this->flags[\get_class($flag)] = $flag;
         }
+        if (!$this->is(ApiAware::class)) {
+            $this->addFlags(new ApiAware(AdminApiSource::class));
+        }
 
         return $this;
     }

--- src/Core/Framework/Test/DataAbstractionLayer/Field/TestDefinition/AssociationExtension.php ---
@@ -3,6 +3,7 @@
 namespace Shopware\Core\Framework\Test\DataAbstractionLayer\Field\TestDefinition;
 
 use Shopware\Core\Framework\DataAbstractionLayer\EntityExtension;
+use Shopware\Core\Framework\DataAbstractionLayer\Field\Flag\ApiAware;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\OneToManyAssociationField;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\OneToOneAssociationField;
 use Shopware\Core\Framework\DataAbstractionLayer\FieldCollection;
@@ -12,11 +13,13 @@ class AssociationExtension extends EntityExtension
     public function extendFields(FieldCollection $collection): void
     {
         $collection->add(
-            new OneToManyAssociationField('toMany', ExtendedDefinition::class, 'extendable_id')
+            (new OneToManyAssociationField('toMany', ExtendedDefinition::class, 'extendable_id'))
+                ->addFlags(new ApiAware())
         );
 
         $collection->add(
-            new OneToOneAssociationField('toOne', 'id', 'extendable_id', ExtendedDefinition::class, false)
+            (new OneToOneAssociationField('toOne', 'id', 'extendable_id', ExtendedDefinition::class, false))
+                ->addFlags(new ApiAware())
         );
     }
 

