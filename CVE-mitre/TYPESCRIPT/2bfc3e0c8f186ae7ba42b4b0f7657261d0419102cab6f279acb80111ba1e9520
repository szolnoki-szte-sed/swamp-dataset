--- .changeset/healthy-crews-cover.md ---
@@ -0,0 +1,5 @@
+---
+'@directus/api': patch
+---
+
+Fixed unauthenticated data access on a public websocket

--- api/src/websocket/controllers/base.ts ---
@@ -21,6 +21,7 @@ import type { AuthenticationState, UpgradeContext, WebSocketAuthentication, WebS
 import { getExpiresAtForToken } from '../utils/get-expires-at-for-token.js';
 import { getMessageType } from '../utils/message.js';
 import { waitForAnyMessage, waitForMessageType } from '../utils/wait-for-message.js';
+import { createDefaultAccountability } from '../../permissions/utils/create-default-accountability.js';
 
 const TOKEN_CHECK_INTERVAL = 15 * 60 * 1000; // 15 minutes
 
@@ -149,7 +150,7 @@ export default abstract class SocketController {
 
 		this.server.handleUpgrade(request, socket, head, async (ws) => {
 			this.catchInvalidMessages(ws);
-			const state = { accountability: null, expires_at: null } as AuthenticationState;
+			const state = { accountability: createDefaultAccountability(), expires_at: null } as AuthenticationState;
 			this.server.emit('connection', ws, state);
 		});
 	}

--- api/src/websocket/controllers/graphql.ts ---
@@ -14,6 +14,7 @@ import type { AuthenticationState, GraphQLSocket, UpgradeContext, WebSocketClien
 import { getMessageType } from '../utils/message.js';
 import SocketController from './base.js';
 import { registerWebSocketEvents } from './hooks.js';
+import { createDefaultAccountability } from '../../permissions/utils/create-default-accountability.js';
 
 const logger = useLogger();
 
@@ -117,7 +118,7 @@ export class GraphQLSubscriptionController extends SocketController {
 
 	protected override async handleHandshakeUpgrade({ request, socket, head }: UpgradeContext) {
 		this.server.handleUpgrade(request, socket, head, async (ws) => {
-			this.server.emit('connection', ws, { accountability: null, expires_at: null });
+			this.server.emit('connection', ws, { accountability: createDefaultAccountability(), expires_at: null });
 			// actual enforcement is handled by the setTokenExpireTimer function
 		});
 	}

