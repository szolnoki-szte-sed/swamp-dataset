--- packages/backend/src/api/v1/datasets/index.ts ---
@@ -107,8 +107,15 @@ datasets.patch(
     }
 
     const [dataset] = await sql`
-    update dataset set slug = ${slug} where id = ${id} and project_id = ${projectId} returning *
-  `
+      update 
+        dataset 
+      set 
+        slug = ${slug} 
+      where 
+      id = ${id} 
+      and project_id = ${projectId} 
+      returning *
+    `
 
     ctx.body = dataset
   },
@@ -218,10 +225,25 @@ datasets.patch(
   checkAccess("datasets", "update"),
   async (ctx: Context) => {
     const { id } = ctx.params
+    const { projectId } = ctx.state
     const { messages } = ctx.request.body as {
       messages: string
     }
 
+    const [dataset] = await sql`
+      select 
+        d.id 
+      from 
+        dataset_prompt dp
+        left join dataset d on dp.dataset_id = d.id
+      where
+        d.project_id = ${projectId}
+    `
+
+    if (!dataset) {
+      ctx.throw(403, "Unauthorized")
+    }
+
     const [prompt] =
       await sql`update dataset_prompt set messages = ${messages} where id = ${id} returning *`
 

--- packages/backend/src/api/v1/external-users.ts ---
@@ -141,17 +141,32 @@ users.get("/runs/usage", checkAccess("users", "read"), async (ctx) => {
 
 users.get("/:id", checkAccess("users", "read"), async (ctx: Context) => {
   const { id } = ctx.params
+  const { projectId } = ctx.state
+
   const [row] = await sql`
-    select * from external_user where id = ${id} limit 1
+    select 
+      * 
+    from 
+      external_user 
+    where 
+      id = ${id} 
+      and project_id = ${projectId}
   `
 
   ctx.body = row
 })
 
 users.delete("/:id", checkAccess("users", "delete"), async (ctx: Context) => {
   const { id } = ctx.params
+  const { projectId } = ctx.state
 
-  await sql`delete from external_user where id = ${id}`
+  await sql`
+    delete 
+    from external_user 
+    where 
+      id = ${id}
+      and project_id = ${projectId}
+    `
 
   ctx.status = 204
 })

--- packages/backend/src/api/v1/templates.ts ---
@@ -4,6 +4,7 @@ import { clearUndefined } from "@/src/utils/ingest"
 import Context from "@/src/utils/koa"
 import { unCamelObject } from "@/src/utils/misc"
 import Router from "koa-router"
+import { z } from "zod"
 
 const templates = new Router({
   prefix: "/templates",
@@ -167,26 +168,44 @@ templates.post(
   "/:id/versions",
   checkAccess("prompts", "update"),
   async (ctx: Context) => {
-    const { content, extra, testValues, isDraft, notes } = ctx.request.body as {
-      content: any[]
-      extra: any
-      testValues: any
-      isDraft: boolean
-      notes: string
+    const paramsSchema = z.object({
+      id: z.coerce.number(),
+    })
+    const bodySchema = z.object({
+      content: z.array(z.any()),
+      extra: z.any(),
+      testValues: z.any(),
+      isDraft: z.boolean(),
+      notes: z.string().optional().nullable(),
+    })
+
+    const { projectId } = ctx.state
+    const { content, extra, testValues, isDraft, notes } = bodySchema.parse(
+      ctx.request.body,
+    )
+    const { id: templateId } = paramsSchema.parse(ctx.params)
+
+    const [template] =
+      await sql`select id from template where id = ${templateId} and project_id = ${projectId}
+    `
+
+    if (!template) {
+      ctx.throw(403, "Unauthorized")
     }
 
     const [templateVersion] = await sql`
-    insert into template_version ${sql(
-      clearUndefined({
-        templateId: ctx.params.id,
-        content: sql.json(content),
-        extra: sql.json(unCamelObject(extra)),
-        test_values: sql.json(testValues),
-        isDraft,
-        notes,
-      }),
-    )} returning *
-  `
+      insert into template_version ${sql(
+        clearUndefined({
+          templateId: ctx.params.id,
+          content: sql.json(content),
+          extra: sql.json(unCamelObject(extra)),
+          test_values: sql.json(testValues),
+          isDraft,
+          notes,
+        }),
+      )} 
+      returning *
+    `
 
     ctx.body = templateVersion
   },

