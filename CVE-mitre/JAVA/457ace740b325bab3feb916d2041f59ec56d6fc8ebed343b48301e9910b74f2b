--- src/main/java/com/github/junrar/Archive.java ---
@@ -45,6 +45,7 @@
 import com.github.junrar.rarfile.RARVersion;
 import com.github.junrar.rarfile.SignHeader;
 import com.github.junrar.rarfile.SubBlockHeader;
+import com.github.junrar.rarfile.SubBlockHeaderType;
 import com.github.junrar.rarfile.UnixOwnersHeader;
 import com.github.junrar.rarfile.UnrarHeadertype;
 import com.github.junrar.unpack.ComprDataIO;
@@ -449,7 +450,9 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                             final SubBlockHeader subHead = new SubBlockHeader(blockHead,
                                 subHeadbuffer);
                             subHead.print();
-                            switch (subHead.getSubType()) {
+                            SubBlockHeaderType subType = subHead.getSubType();
+                            if (subType == null) break;
+                            switch (subType) {
                                 case MAC_HEAD: {
                                     final byte[] macHeaderbuffer = safelyAllocate(MacInfoHeader.MacInfoHeaderSize, MAX_HEADER_SIZE);
                                     rawData.readFully(macHeaderbuffer, macHeaderbuffer.length);

--- src/test/java/com/github/junrar/AbnormalFilesTest.java ---
@@ -58,7 +58,8 @@ public void extractFromStream(String filePath, Class<?> expectedException) throw
     private static Stream<Arguments> provideFilesAndExpectedExceptionType() {
         return Stream.of(
             Arguments.of("abnormal/corrupt-header.rar", CorruptHeaderException.class),
-            Arguments.of("abnormal/mainHeaderNull.rar", BadRarArchiveException.class)
+            Arguments.of("abnormal/mainHeaderNull.rar", BadRarArchiveException.class),
+            Arguments.of("abnormal/loop.rar", CorruptHeaderException.class)
         );
     }
 }

