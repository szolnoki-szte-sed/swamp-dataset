--- .gitignore ---
@@ -2,6 +2,7 @@
 __pycache__/
 *.py[cod]
 *$py.class
+*.exe
 
 # Installer logs
 pip-log.txt

--- first-run.py ---
@@ -0,0 +1,48 @@
+#!/usr/bin/env python3
+# pylint: disable=C0116,W0613
+
+from os.path import exists
+
+HOOKS_FOLDER = ".git/hooks/"
+HOOK = "pre-commit"
+
+def prompt(question, default="yes"):
+    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
+    if default is None:
+        prompt = " [y/n] "
+    elif default == "yes":
+        prompt = " [Y/n] "
+    elif default == "no":
+        prompt = " [y/N] "
+    else:
+        raise ValueError("Invalid default answer: '%s'" % default)
+
+    while True:
+        print(question + prompt + "\r")
+        try:
+            choice = input().lower()
+            if default is not None and choice == "":
+                return valid[default]
+            elif choice in valid:
+                return valid[choice]
+            else:
+                print("Please respond with '[y]es' or '[n]o'")
+        except KeyboardInterrupt:
+            exit("Operation aborted. No files have been changed.")
+
+if exists(HOOKS_FOLDER+HOOK):
+    overwrite = prompt("pre-commit hook already exists. Overwrite?", None)
+    if overwrite == True:
+        try:
+            with open(HOOK, 'rb') as src, open(HOOKS_FOLDER+HOOK, 'wb') as dst: dst.write(src.read())
+            print(f"{HOOK} inside {HOOKS_FOLDER} was replaced successfully.")
+        except:
+            print(f"{HOOK} could not be written to {HOOKS_FOLDER}.")
+    else:
+        print("Operation aborted. No files have been changed.")
+else:
+    try:
+        with open(HOOK, 'rb') as src, open(HOOKS_FOLDER+HOOK, 'wb') as dst: dst.write(src.read())
+        print(f"{HOOK} hook was added successfully.")
+    except:
+            print(f"{HOOK} could not be written to {HOOKS_FOLDER}.")

--- gitleaks.toml ---
@@ -0,0 +1,4 @@
+[[rules]]
+id = "telegram-bot-token"
+description = "telegram bot token"
+regex = '''[0-9]{8,10}:[a-zA-Z0-9_-]{35}'''

--- main.py ---
@@ -49,7 +49,6 @@ def about_command(update: Update, context: CallbackContext) -> None:
     update.message.reply_animation(animation=about.ANIMATION,
     caption=about.TEXT)
 
-
 def help_command(update: Update, context: CallbackContext) -> None:
     """Send a message when the command /help is issued."""
     update.message.reply_text('Help!')
@@ -175,13 +174,6 @@ def unmute_command(update: Update, context: CallbackContext) -> None:
         # Should wrap this into a common function call "not_admin(update)"
         update.message.reply_text(messages.PERM_LACK + statuses.IS_ADMIN)
 
-# def get_commands_command(update: Update, context: CallbackContext) -> None:
-#     # bot = utils.get_bot() // return a Bot object
-#     bot = Bot("5016982005:AAG6YJFXVkvyVha7_3cghe8gj-PIGAL9aXE")
-#     commands = bot.get_my_commands()
-#     update.message.reply_text(commands)
-
-
 def ban_command(update: Update, context: CallbackContext) -> None:
     reply = update.message.reply_to_message.from_user
     # perms = {"can_send_messages": False}
@@ -193,7 +185,6 @@ def ban_command(update: Update, context: CallbackContext) -> None:
     else: 
         update.message.reply_text(messages.PERM_LACK + statuses.IS_ADMIN)
 
-
 def unban_command(update: Update, context: CallbackContext) -> None:
     reply = update.message.reply_to_message.from_user
     # perms = {"can_send_messages": False}

--- pre-commit ---
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+# pylint: disable=C0116,W0613
+
+import sys
+import subprocess
+
+def eprint(*args, **kwargs):
+    print(*args, file=sys.stderr, **kwargs)
+
+try:
+    subprocess.run(["gitleaks", "protect", "-v", "--staged", "-c", "gitleaks.toml"],
+                    check=True,
+                    universal_newlines=True,
+                    stdout=subprocess.PIPE,
+                    stderr=subprocess.STDOUT)
+except subprocess.CalledProcessError as e:
+    eprint("gitleaks has detected sensitive information in your changes. Commit aborted.")
+    print(e.output)
+    sys.exit(1)
+except FileNotFoundError:
+    eprint("gitleaks is not installed or in the PATH. Commit aborted.")
+    sys.exit(1)

