--- CHANGELOG.md ---
@@ -8,10 +8,14 @@ and this project adheres to
 
 ## [Unreleased][unreleased]
 
+## [7.0.1] - 2023-04-20
+
 ### Fixed
 
 - The doctor check for the `client` attribute uses the PATH to validate
   the value.
+- The debug connection logger for `kitchen converge` is properly
+  initialized.
 
 ## [7.0.0] - 2023-04-09
 
@@ -815,7 +819,8 @@ Free-As-In-Beer
 - Initial release
 
 [unreleased]:
-  https://github.com/newcontext/kitchen-terraform/compare/v7.0.0...HEAD
+  https://github.com/newcontext/kitchen-terraform/compare/v7.0.1...HEAD
+[7.0.1]: https://github.com/newcontext/kitchen-terraform/compare/v7.0.0...v7.0.1
 [7.0.0]: https://github.com/newcontext/kitchen-terraform/compare/v6.1.0...v7.0.0
 [6.1.0]: https://github.com/newcontext/kitchen-terraform/compare/v6.0.0...v6.1.0
 [6.0.0]: https://github.com/newcontext/kitchen-terraform/compare/v5.8.0...v6.0.0

--- README.md ---
@@ -111,7 +111,7 @@ example.
 ---
 
 ```sh
-gem install kitchen-terraform --version 7.0.0
+gem install kitchen-terraform --version 7.0.1
 ```
 
 ---

--- lib/kitchen/provisioner/terraform.rb ---
@@ -86,7 +86,7 @@ def call(state)
         ::Kitchen::Terraform::Provisioner::Converge.new(
           config: driver.send(:config),
           connection: transport.connection({}),
-          debug_connection: transport.connection(logger: ::Kitchen::Terraform::DebugLogger.new(logger: logger)),
+          debug_connection: transport.connection(logger: ::Kitchen::Terraform::DebugLogger.new(logger)),
           logger: logger,
           version_requirement: version_requirement,
           workspace_name: workspace_name,

--- lib/kitchen/terraform/debug_logger.rb ---
@@ -20,6 +20,19 @@ module Kitchen
   module Terraform
     # This class delegates to a logger but ensures the debug level is the default level used for logging messages.
     class DebugLogger < ::SimpleDelegator
+      class << self
+        # .new creates a new instance of the class.
+        #
+        # @return [Kitchen::Terraform::DebugLogger]
+        def new(obj)
+          if !obj.kind_of? ::Kitchen::Logger
+            raise ::TypeError, "delegate must be a Kitchen::Logger; recevied #{obj.class}"
+          end
+
+          super
+        end
+      end
+
       # This method overrides the #<< method of the delegate to call #debug.
       #
       # @param message [#to_s] the message to be logged.

--- lib/kitchen/terraform/version.rb ---
@@ -71,7 +71,7 @@ def temporarily_override(version:)
 
         # @api private
         def value
-          self.value = ::Gem::Version.new "7.0.0" if not @value
+          self.value = ::Gem::Version.new "7.0.1" if not @value
           @value
         end
 

--- spec/lib/kitchen/terraform/debug_logger_spec.rb ---
@@ -16,23 +16,30 @@
 
 require "kitchen"
 require "kitchen/terraform/debug_logger"
+require "support/kitchen/logger_context"
 
 ::RSpec.describe ::Kitchen::Terraform::DebugLogger do
-  subject do
-    described_class.new logger
+  describe ".new" do
+    specify "raises an error if the delegate is not a Kitchen::Logger" do
+      expect do
+        described_class.new ::Object.new
+      end.to raise_error ::TypeError
+    end
   end
 
-  let :logger do
-    instance_double ::Kitchen::Logger
+  subject do
+    described_class.new ::Kitchen.logger
   end
 
+  include_context "Kitchen::Logger"
+
   shared_examples "#debug" do
     after do
       subject << "message"
     end
 
     specify "forwards the message to #debug of the wrapped logger" do
-      expect(logger).to receive(:debug).with "message"
+      expect(::Kitchen.logger).to receive(:debug).with "message"
     end
   end
 

--- spec/lib/kitchen/terraform/version_spec.rb ---
@@ -24,7 +24,7 @@
   end
 
   let :version do
-    ::Gem::Version.new "7.0.0"
+    ::Gem::Version.new "7.0.1"
   end
 
   describe ".assign_plugin_version" do

--- spec/support/kitchen/terraform/configurable_examples.rb ---
@@ -26,7 +26,7 @@
 
   describe "@plugin_version" do
     it "equals the gem version" do
-      expect(described_class.instance_variable_get(:@plugin_version)).to eq "7.0.0"
+      expect(described_class.instance_variable_get(:@plugin_version)).to eq "7.0.1"
     end
   end
 

