--- managed/src/main/java/com/yugabyte/yw/commissioner/TaskExecutor.java ---
@@ -1017,9 +1017,9 @@ synchronized void updateTaskDetailsOnError(TaskInfo.State state, Throwable t) {
           "Task state must be one of " + TaskInfo.ERROR_STATES);
       taskInfo.refresh();
       ObjectNode taskDetails = taskInfo.getDetails().deepCopy();
-      // Method maskConfig does not modify the input as it makes a deep-copy.
-      String maskedTaskDetails = CommonUtils.maskConfig(taskDetails).toString();
       String errorString;
+      // Method getRedactedParams does not modify the input as it makes a deep-copy.
+      String redactedTaskParams = taskInfo.getRedactedParams().toString();
       if (state == TaskInfo.State.Aborted && isShutdown.get()) {
         errorString = "Platform shutdown";
       } else {
@@ -1032,14 +1032,14 @@ synchronized void updateTaskDetailsOnError(TaskInfo.State state, Throwable t) {
         errorString =
             String.format(
                 "Failed to execute task %s, hit error:\n\n %s.",
-                StringUtils.abbreviate(maskedTaskDetails, 500),
+                StringUtils.abbreviate(redactedTaskParams, 500),
                 StringUtils.abbreviateMiddle(cause.getMessage(), "...", 3000));
       }
       log.error(
           "Failed to execute task type {} UUID {} details {}, hit error.",
           taskInfo.getTaskType(),
           taskInfo.getTaskUUID(),
-          maskedTaskDetails,
+          redactedTaskParams,
           t);
 
       if (log.isDebugEnabled()) {
@@ -1330,7 +1330,14 @@ public void run() {
             throw e;
           }
 
-          log.warn("Task {} attempt {} has failed", getTask(), currentAttempt);
+          String redactedParams =
+              RedactingService.filterSecretFields(getTask().getTaskDetails(), RedactionTarget.LOGS)
+                  .toString();
+          log.warn(
+              "Task {} with params {} attempt {} has failed",
+              getTask().getName(),
+              redactedParams,
+              currentAttempt);
           if (!getTask().onFailure(getTaskInfo(), e)) {
             throw e;
           }

--- managed/src/main/java/com/yugabyte/yw/commissioner/tasks/upgrade/GFlagsUpgrade.java ---
@@ -4,12 +4,15 @@
 
 import static play.mvc.Http.Status.BAD_REQUEST;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.yugabyte.yw.commissioner.BaseTaskDependencies;
 import com.yugabyte.yw.commissioner.ITask.Abortable;
 import com.yugabyte.yw.commissioner.ITask.Retryable;
 import com.yugabyte.yw.commissioner.UpgradeTaskBase;
 import com.yugabyte.yw.commissioner.UserTaskDetails.SubTaskGroupType;
 import com.yugabyte.yw.common.PlatformServiceException;
+import com.yugabyte.yw.common.RedactingService;
+import com.yugabyte.yw.common.RedactingService.RedactionTarget;
 import com.yugabyte.yw.common.XClusterUniverseService;
 import com.yugabyte.yw.common.config.UniverseConfKeys;
 import com.yugabyte.yw.common.gflags.GFlagsUtil;
@@ -162,16 +165,37 @@ protected MastersAndTservers calculateNodesToBeRestarted() {
           GFlagsUtil.getBaseGFlags(ServerType.MASTER, newCluster, newClusters.values());
       Map<String, String> tserverGflags =
           GFlagsUtil.getBaseGFlags(ServerType.TSERVER, newCluster, newClusters.values());
+      ObjectMapper mapper = new ObjectMapper();
+      String redactedMasterNewFlags =
+          RedactingService.filterSecretFields(
+                  mapper.valueToTree(masterGflags), RedactionTarget.LOGS)
+              .toString();
+      String redactedMasterOldFlags =
+          RedactingService.filterSecretFields(
+                  mapper.valueToTree(
+                      GFlagsUtil.getBaseGFlags(ServerType.MASTER, curCluster, curClusters)),
+                  RedactionTarget.LOGS)
+              .toString();
       log.debug(
           "Cluster {} master: new flags {} old flags {}",
           curCluster.clusterType,
-          masterGflags,
-          GFlagsUtil.getBaseGFlags(ServerType.MASTER, curCluster, curClusters));
+          redactedMasterNewFlags,
+          redactedMasterOldFlags);
+      String redactedTsNewFlags =
+          RedactingService.filterSecretFields(
+                  mapper.valueToTree(tserverGflags), RedactionTarget.LOGS)
+              .toString();
+      String redactedTsOldFlags =
+          RedactingService.filterSecretFields(
+                  mapper.valueToTree(
+                      GFlagsUtil.getBaseGFlags(ServerType.TSERVER, curCluster, curClusters)),
+                  RedactionTarget.LOGS)
+              .toString();
       log.debug(
           "Cluster {} tserver: new flags {} old flags {}",
           curCluster.clusterType,
-          tserverGflags,
-          GFlagsUtil.getBaseGFlags(ServerType.TSERVER, curCluster, curClusters));
+          redactedTsNewFlags,
+          redactedTsOldFlags);
 
       boolean changedByMasterFlags =
           curCluster.clusterType == UniverseDefinitionTaskParams.ClusterType.PRIMARY

--- managed/src/main/java/com/yugabyte/yw/common/RedactingService.java ---
@@ -92,6 +92,7 @@ public class RedactingService {
           // LDAP - DB Universe Sync
           .add("$..dbuserPassword")
           .add("$..ldapBindPassword")
+          .add("$..ysql_hba_conf_csv")
           .build();
 
   // List of json paths to any secret fields we want to redact.

