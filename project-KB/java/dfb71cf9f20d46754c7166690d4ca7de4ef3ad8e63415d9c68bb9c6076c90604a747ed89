diff --git a/src/main/java/reactor/netty/http/HttpOperations.java b/src/main/java/reactor/netty/http/HttpOperations.java
index 25a9d8cc4b..435bea0b8b 100644
--- a/src/main/java/reactor/netty/http/HttpOperations.java
+++ b/src/main/java/reactor/netty/http/HttpOperations.java
@@ -23,6 +23,7 @@
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
+import java.util.regex.Pattern;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
@@ -335,7 +336,15 @@ public static String resolvePath(String uri) {
 			return uri;
 		}
 
-		String path = URI.create(uri.charAt(0) == '/' ? "http://localhost:8080" + uri : uri)
+		String tempUri = uri;
+		if (tempUri.charAt(0) == '/') {
+			tempUri = "http://localhost:8080" + tempUri;
+		}
+		else if (!SCHEME_PATTERN.matcher(tempUri).matches()) {
+			tempUri = "http://" + tempUri;
+		}
+
+		String path = URI.create(tempUri)
 		                 .getPath();
 		if (!path.isEmpty()) {
 			if(path.charAt(0) == '/'){
@@ -383,8 +392,11 @@ public static String resolvePath(String uri) {
 				}
 			}
 	);
+
 	static final Logger log = Loggers.getLogger(HttpOperations.class);
 
+	static final Pattern SCHEME_PATTERN = Pattern.compile("^(https?|wss?)://.*$");
+
 	protected static final class PostHeadersNettyOutbound implements NettyOutbound, Consumer<Throwable>, Runnable {
 
 		final Mono<Void> source;
diff --git a/src/test/java/reactor/netty/http/HttpOperationsTest.java b/src/test/java/reactor/netty/http/HttpOperationsTest.java
index b97f25b46f..fe6e6ee028 100644
--- a/src/test/java/reactor/netty/http/HttpOperationsTest.java
+++ b/src/test/java/reactor/netty/http/HttpOperationsTest.java
@@ -109,6 +109,19 @@ public void testIssue948() {
 		assertEquals("a", HttpOperations.resolvePath("http://localhost:8080/a?b#c"));
 		assertEquals("a b", HttpOperations.resolvePath("http://localhost:8080/a%20b"));
 
+		assertEquals("", HttpOperations.resolvePath("localhost:8080"));
+		assertEquals("", HttpOperations.resolvePath("localhost:8080/"));
+		assertEquals("", HttpOperations.resolvePath("localhost:8080//"));
+		assertEquals("/", HttpOperations.resolvePath("localhost:8080///"));
+		assertEquals("a", HttpOperations.resolvePath("localhost:8080/a"));
+		assertEquals("a", HttpOperations.resolvePath("localhost:8080/a/"));
+		assertEquals("", HttpOperations.resolvePath("localhost:8080/?b"));
+		assertEquals("a", HttpOperations.resolvePath("localhost:8080/a?b"));
+		assertEquals("", HttpOperations.resolvePath("localhost:8080/#b"));
+		assertEquals("a", HttpOperations.resolvePath("localhost:8080/a#b"));
+		assertEquals("a", HttpOperations.resolvePath("localhost:8080/a?b#c"));
+		assertEquals("a b", HttpOperations.resolvePath("localhost:8080/a%20b"));
+
 		assertEquals("", HttpOperations.resolvePath(""));
 		assertEquals("", HttpOperations.resolvePath("/"));
 		assertEquals("", HttpOperations.resolvePath("//"));
