--- Controller/DropzoneController.php ---
@@ -42,8 +42,8 @@ public function upload()
     protected function parseChunkedRequest(Request $request)
     {
         $totalChunkCount = $request->get('dztotalchunkcount');
-        $index = $request->get('dzchunkindex');
-        $last = ((int) $index + 1) === (int) $totalChunkCount;
+        $index = (int) $request->get('dzchunkindex');
+        $last = ($index + 1) === (int) $totalChunkCount;
         $uuid = $request->get('dzuuid');
 
         /**

--- Controller/FineUploaderController.php ---
@@ -40,11 +40,11 @@ public function upload()
 
     protected function parseChunkedRequest(Request $request)
     {
-        $index = $request->get('qqpartindex');
-        $total = $request->get('qqtotalparts');
+        $index = (int) $request->get('qqpartindex');
+        $total = (int) $request->get('qqtotalparts');
         $uuid = $request->get('qquuid');
         $orig = $request->get('qqfilename');
-        $last = ((int) $total - 1) === (int) $index;
+        $last = ($total - 1) === $index;
 
         return [$last, $uuid, $index, $orig];
     }

--- Controller/PluploadController.php ---
@@ -35,7 +35,7 @@ protected function parseChunkedRequest(Request $request)
         $session = $this->container->get('session');
 
         $orig = $request->get('name');
-        $index = $request->get('chunk');
+        $index = (int) $request->get('chunk');
         $last = (int) $request->get('chunks') - 1 === (int) $request->get('chunk');
 
         // it is possible, that two clients send a file with the

--- Uploader/Chunk/Storage/FilesystemStorage.php ---
@@ -38,6 +38,9 @@ public function clear($maxAge)
 
     public function addChunk($uuid, $index, UploadedFile $chunk, $original)
     {
+        // Prevent path traversal attacks
+        $uuid = basename($uuid);
+
         $filesystem = new Filesystem();
         $path = sprintf('%s/%s', $this->directory, $uuid);
         $name = sprintf('%s_%s', $index, $original);
@@ -106,6 +109,9 @@ public function cleanup($path)
 
     public function getChunks($uuid)
     {
+        // Prevent path traversal attacks
+        $uuid = basename($uuid);
+
         $finder = new Finder();
         $finder
             ->in(sprintf('%s/%s', $this->directory, $uuid))->files()->sort(function (\SplFileInfo $a, \SplFileInfo $b) {

--- Uploader/Chunk/Storage/FlysystemStorage.php ---
@@ -65,6 +65,9 @@ public function clear($maxAge, $prefix = null)
 
     public function addChunk($uuid, $index, UploadedFile $chunk, $original)
     {
+        // Prevent path traversal attacks
+        $uuid = basename($uuid);
+
         $this->unhandledChunk = [
             'uuid' => $uuid,
             'index' => $index,
@@ -136,6 +139,9 @@ public function cleanup($path)
 
     public function getChunks($uuid)
     {
+        // Prevent path traversal attacks
+        $uuid = basename($uuid);
+
         return $this->filesystem->listFiles($this->prefix.'/'.$uuid);
     }
 

--- Uploader/Chunk/Storage/GaufretteStorage.php ---
@@ -98,6 +98,9 @@ public function clear($maxAge, $prefix = null)
      */
     public function addChunk($uuid, $index, UploadedFile $chunk, $original)
     {
+        // Prevent path traversal attacks
+        $uuid = basename($uuid);
+
         $this->unhandledChunk = [
             'uuid' => $uuid,
             'index' => $index,
@@ -170,6 +173,9 @@ public function cleanup($path)
 
     public function getChunks($uuid)
     {
+        // Prevent path traversal attacks
+        $uuid = basename($uuid);
+
         $results = $this->filesystem->listKeys($this->prefix.'/'.$uuid);
 
         /* exclude files without an index, so if there is a completed file which

