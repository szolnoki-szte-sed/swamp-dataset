--- src/label_studio_sdk/_extensions/label_studio_tools/core/utils/io.py ---
@@ -37,6 +37,17 @@ def get_cache_dir():
     return cache_dir
 
 
+def safe_build_path(base_dir: str, user_path: str) -> str:
+    combined_path = os.path.join(base_dir, user_path)
+    absolute_path = os.path.abspath(combined_path)
+    base_dir_abs = os.path.abspath(base_dir)
+
+    if os.path.commonpath([absolute_path, base_dir_abs]) != base_dir_abs:
+        raise ValueError(f"Invalid path: {user_path}")
+
+    return absolute_path
+
+
 def get_local_path(
     url,
     cache_dir=None,
@@ -103,7 +114,7 @@ def get_local_path(
     # instead of downloading them from LS instance
     if is_local_storage_file:
         filepath = url.split("?d=")[1]
-        filepath = os.path.join(LOCAL_FILES_DOCUMENT_ROOT, filepath)
+        filepath = safe_build_path(LOCAL_FILES_DOCUMENT_ROOT, filepath)
         if os.path.exists(filepath):
             logger.debug(
                 f"Local Storage file path exists locally, use it as a local file: {filepath}"

--- src/label_studio_sdk/converter/utils.py ---
@@ -21,6 +21,7 @@
 from nltk.tokenize.treebank import TreebankWordTokenizer
 
 from label_studio_sdk._extensions.label_studio_tools.core.utils.params import get_env
+from label_studio_sdk._extensions.label_studio_tools.core.utils.io import safe_build_path
 
 logger = logging.getLogger(__name__)
 
@@ -148,7 +149,7 @@ def download(
     if is_uploaded_file:
         upload_dir = _get_upload_dir(project_dir, upload_dir)
         filename = urllib.parse.unquote(url.replace("/data/upload/", ""))
-        filepath = os.path.join(upload_dir, filename)
+        filepath = safe_build_path(upload_dir, filename)
         logger.debug(
             f"Copy {filepath} to {output_dir}".format(
                 filepath=filepath, output_dir=output_dir
@@ -165,7 +166,7 @@ def download(
     if is_local_file:
         filename, dir_path = url.split("/data/", 1)[-1].split("?d=")
         dir_path = str(urllib.parse.unquote(dir_path))
-        filepath = os.path.join(LOCAL_FILES_DOCUMENT_ROOT, dir_path)
+        filepath = safe_build_path(LOCAL_FILES_DOCUMENT_ROOT, dir_path)
         if not os.path.exists(filepath):
             raise FileNotFoundError(filepath)
         if download_resources:

--- tests/custom/label_studio_tools/test_get_local_path.py ---
@@ -1,11 +1,14 @@
 import pytest
+import os
+
 from unittest.mock import patch
 from label_studio_sdk._extensions.label_studio_tools.core.utils.io import (
     get_local_path,
     _DIR_APP_NAME,
 )
 
 
+
 def os_path_exists(url):
     return False
 
@@ -68,3 +71,26 @@ def test_get_local_path(mock_get_data_dir, mock_get_cache_dir, url, expected):
         )
         print("\n ==> get_local_path = ", x)
         assert x == expected
+
+
+@pytest.mark.parametrize(
+    "url, raises_error",
+    [
+        # Valid local file
+        ("/data/local-files?d=my_dir/1.jpg", False),
+        # Attempted directory traversal
+        ("/data/local-files?d=../../etc/passwd", True),
+    ],
+)
+@patch("label_studio_sdk._extensions.label_studio_tools.core.utils.io.get_data_dir", return_value="test-data-dir/")
+@patch("label_studio_sdk._extensions.label_studio_tools.core.utils.io.get_cache_dir", return_value="test-data-dir/.cache/label-studio")
+@patch("label_studio_sdk._extensions.label_studio_tools.core.utils.io.LOCAL_FILES_DOCUMENT_ROOT", "/my_files")
+def test_get_local_path_safe_build(mock_data_dir, mock_cache_dir, url, raises_error):
+    # Mock file-existence checks so the call proceeds to path-building logic
+    with patch("os.path.exists", return_value=True):
+        if raises_error:
+            with pytest.raises(ValueError, match="Invalid path"):
+                result = get_local_path(url, access_token="secret", hostname="http://app.heartex.com")
+        else:
+            local_path = get_local_path(url, access_token="secret", hostname="http://app.heartex.com")
+            assert "my_dir/1.jpg" in local_path

