--- bootstrap.inc.php ---
@@ -20,6 +20,7 @@
 require_once(BASE.'classes/Localization.class.php');
 require_once(BASE.'classes/Document.class.php');
 require_once(BASE.'classes/Session.class.php');
+require_once(BASE.'classes/SecurityFilters.class.php');
 
 // require external libraries
 require_once(BASE."libraries/parsedown-1.8.0-beta-6/Parsedown.php");

--- classes/SecurityFilters.class.php ---
@@ -0,0 +1,68 @@
+<?php
+/**
+ * SecurityFilters
+ *
+ * Collection of security filters for content sanitization
+ */
+class SecurityFilters {
+    /**
+     * Main filter method - applies all content filters
+     *
+     * @param string $content Content to filter
+     * @return string Filtered content
+     */
+    public static function filterContent($content) {
+        // apply katex filter
+        $content = self::filterKaTeX($content);
+        // add additional filters here as needed
+        return $content;
+    }
+
+    /**
+     * KaTeX Filter
+     */
+    private static function filterKaTeX($content) {
+        $blacklistedCommands = [
+            '\html',
+            '\htmlStyle',
+            '\href',
+            '\def',
+            '\newcommand',
+            '\renewcommand',
+            '\mathml',
+            '\style'
+        ];
+
+        $blacklistedTags = [
+            '<script',
+            '<img',
+            '<iframe',
+            '<object',
+            '<embed',
+            '<math',
+            '<svg',
+            'javascript:',
+            'data:',
+            'vbscript:'
+        ];
+
+        // extract and filter all katex blocks
+        $pattern = '/\$\$(.*?)\$\$|\$(.*?)\$/s';
+        return preg_replace_callback($pattern, function($matches) use ($blacklistedCommands, $blacklistedTags) {
+            $math = !empty($matches[1]) ? $matches[1] : $matches[2];
+            $isDisplay = !empty($matches[1]);
+            // remove blacklisted commands
+            foreach ($blacklistedCommands as $command) {
+                $math = str_replace($command, '\\text{BLOCKED}', $math);
+            }
+            // remove malicious tags
+            foreach ($blacklistedTags as $tag) {
+                $math = str_ireplace($tag, '&lt;blocked&gt;', $math);
+            }
+            // prevent math mode escaping
+            $math = preg_replace('/\\\\(?![\w\s{},\\\\_^])/u', '\\\\textbackslash', $math);
+            // return with appropriate delimiters
+            return $isDisplay ? "$$" . $math . "$$" : "$" . $math . "$";
+        }, $content);
+    }
+}

--- classes/Session.class.php ---
@@ -22,6 +22,14 @@ static function getInstance():Session{
 	}
 
 	function start(){
+		// set secure session cookie parameters
+		session_set_cookie_params([
+			'lifetime' => 0,
+			'path' => '/',
+			'domain' => $_SERVER['HTTP_HOST'],
+			'httponly' => true,                   // prevent javascript access
+			'samesite' => 'Strict'                // restrict to same-site requests
+		]);
 		// start php session
 		session_start();
 		// check for application session array
@@ -30,6 +38,14 @@ function start(){
 		if(!isset($_SESSION['wikidocs']['debug'])){$this->setDebug(false);}
 		// check for application session alerts array
 		if(!isset($_SESSION['wikidocs']['alerts']) || !is_array($_SESSION['wikidocs']['alerts'])){$_SESSION['wikidocs']['alerts']=array();}
+		// periodically regenerate session id to prevent fixation attacks
+		if (!isset($_SESSION['last_regeneration'])) {
+			$_SESSION['last_regeneration'] = time();
+		}
+		if (time() - $_SESSION['last_regeneration'] > 300) { // regenerate every 5 minutes
+			session_regenerate_id(true);
+			$_SESSION['last_regeneration'] = time();
+		}
 	}
 
 	public function destroy(){
@@ -57,9 +73,15 @@ public function isDebug():bool{
 		return boolval($_SESSION['wikidocs']['debug']);
 	}
 
-	public function privacyAgreement(bool $value){
-		setcookie('privacy',$value,time()+(60*60*24*30),'/');
-		header('Location:'.PATH.DOC);
+	public function privacyAgreement(bool $value) {
+		setcookie('privacy', $value, [
+			'expires' => time() + (60 * 60 * 24 * 30),
+			'path' => '/',
+			'domain' => $_SERVER['HTTP_HOST'],
+			'httponly' => true,
+			'samesite' => 'Strict'
+		]);
+		header('Location:' . PATH . DOC);
 	}
 
 	public function privacyAgreeded():bool{

--- index.php ---
@@ -5,6 +5,10 @@
  * @package WikiDocs
  * @repository https://github.com/Zavy86/wikidocs
  */
+// additional security headers
+header("X-Content-Type-Options: nosniff");
+header("X-XSS-Protection: 1; mode=block");
+
 require_once('bootstrap.inc.php');
 // mode definition
 $mode='view';
@@ -27,6 +31,7 @@
 $DOC=new Document(DOC);
 // initialize markdown parser
 $PARSER=new ParsedownPlus([
+	'safemode' => true,    // enable parsedown's built-in safe mode
 	'typographer' => true,
 	'toc' => true,
 	'sup' => true,

--- submit.php ---
@@ -98,6 +98,8 @@ function content_save(){
 		wdf_alert($TXT->SubmitDocumentContentCannotBeEmpty,"danger");
 		wdf_redirect(PATH.$p_document."?edit");
 	}
+	// apply security filters
+	$p_content = SecurityFilters::filterContent($p_content);
 	// initialize document
 	$DOC=new Document($p_document);
 	// debug

--- template.inc.php ---
@@ -347,11 +347,16 @@ function gtag(){dataLayer.push(arguments);}
 <script>renderMathInElement(document.body, {
     delimiters: [
       {left: '$$', right: '$$', display: true}, // math block using $$math$$
-      {left: '\\[', right: '\\]', display: true}, // math block using \[math\]
       {left: '$', right: '$', display: false}, // math inline using $math$
-      {left: '\\(', right: '\\)', display: false} // math inline using \(math\)
     ],
-    throwOnError : false
+    throwOnError: false,
+    trust: false, // disable html extension
+    strict: true, // strict mode
+    maxSize: 500, // limit size of expressions
+    maxExpand: 100, // limit macro expansion
+    errorCallback: function(msg) {
+        console.warn('KaTeX error:', msg);
+    }
   });</script>
 <script>hljs.highlightAll();</script>
 <script src="<?= $APP->PATH ?>helpers/mermaid-9.4.3/mermaid.min.js"></script>

