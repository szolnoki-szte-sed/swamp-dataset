--- src/index.js ---
@@ -45,13 +45,15 @@ const flatten = (obj, delimiter) => {
 const unflatten = (obj, delimiter) => {
   const result = {}
   const seperator = delimiter || defaultDelimiter
+  const proto = ['__proto__', 'constructor', 'prototype']
 
   if (typeof obj !== 'object' || isDate(obj)) return obj
 
   const unflat = (original) => {
     Object.keys(original).forEach((key) => {
       const newKeys = key.split(seperator)
       newKeys.reduce((o, k, i) => {
+        if (proto.includes(newKeys[i])) return o
         return o[k] || (o[k] = isNaN(Number(newKeys[i + 1])) ? (newKeys.length - 1 === i ? original[key] : {}) : [])
       }, result)
     })

--- test/unflatten.spec.js ---
@@ -150,3 +150,15 @@ test('it should handle date objects', (t) => {
 
   t.deepEqual(unflatten(original), expected)
 })
+
+test('it should not pollute the prototype', (t) => {
+  const original = {
+    '__proto__.polluted': 'Attempt to pollute the prototype',
+    'a.prototype.polluted': 'Attempt to pollute the prototype',
+    'a.b': 'This attribute is safe',
+    'c.constructor.polluted': 'Attempt to pollute the prototype',
+    'constructor.polluted': 'Attempt to pollute the prototype'
+  }
+  unflatten(original)
+  t.assert({}.polluted == null)
+})

