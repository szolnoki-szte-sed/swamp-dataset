--- interface/billing/sl_eob_invoice.php ---
@@ -603,8 +603,8 @@ function updateFields(payField, adjField, balField, coPayField, isFirstProcCode)
                         <thead>
                             <tr>
                                 <th><?php echo xlt('Code') ?></th>
-                                <th class="text-right"><?php echo xlt('Charge') ?></th>
-                                <th class="text-right"><?php echo xlt('Balance') ?>&nbsp;</th>
+                                <th class="text-left"><?php echo xlt('Charge') ?></th>
+                                <th class="text-left"><?php echo xlt('Balance') ?>&nbsp;</th>
                                 <th><?php echo xlt('By/Source') ?></th>
                                 <th><?php echo xlt('Date') ?></th>
                                 <th><?php echo xlt('Pay') ?></th>

--- library/js/utility.js ---
@@ -26,30 +26,33 @@ function xl(string) {
 // html escaping functions - special case when sending js string to html (see codebase for examples)
 //   jsText (equivalent to text() )
 //   jsAttr (equivalent to attr() )
-const htmlEscapesText = {
-    '&': '&amp;',
-    '<': '&lt;',
-    '>': '&gt;'
-};
-const htmlEscapesAttr = {
-    '&': '&amp;',
-    '<': '&lt;',
-    '>': '&gt;',
-    '"': '&quot;',
-    "'": '&#x27;'
-};
-const htmlEscaperText = /[&<>]/g;
-const htmlEscaperAttr = /[&<>"']/g;
-jsText = function(string) {
-    return ('' + string).replace(htmlEscaperText, function(match) {
-        return htmlEscapesText[match];
-    });
-};
-jsAttr = function(string) {
-    return ('' + string).replace(htmlEscaperAttr, function(match) {
-        return htmlEscapesAttr[match];
-    });
-};
+// must be careful assigning const in this script. can't reinit a constant
+if (typeof htmlEscapesText === 'undefined') {
+    const htmlEscapesText = {
+        '&': '&amp;',
+        '<': '&lt;',
+        '>': '&gt;'
+    };
+    const htmlEscapesAttr = {
+        '&': '&amp;',
+        '<': '&lt;',
+        '>': '&gt;',
+        '"': '&quot;',
+        "'": '&#x27;'
+    };
+    const htmlEscaperText = /[&<>]/g;
+    const htmlEscaperAttr = /[&<>"']/g;
+    jsText = function (string) {
+        return ('' + string).replace(htmlEscaperText, function (match) {
+            return htmlEscapesText[match];
+        });
+    };
+    jsAttr = function (string) {
+        return ('' + string).replace(htmlEscaperAttr, function (match) {
+            return htmlEscapesAttr[match];
+        });
+    };
+}
 
 // another useful function
 async function syncFetchFile(fileUrl, type = 'text') {
@@ -344,7 +347,7 @@ function oeSortable(callBackFn) {
         })
     }
 
-};
+}
 
 
 /*

--- src/OeUI/OemrUI.php ---
@@ -393,7 +393,7 @@ private function headerExpandJs($arrFiles = array())
     private function headerActionJs($arrAction = array())
     {
         $arrAction = $this->arrAction;
-        $page = str_replace(" ", "", $this->heading);
+        $page = attr(str_replace(" ", "", $this->heading));
 
         // Build the labels for when the icon is moused-over
         $labels = "";

