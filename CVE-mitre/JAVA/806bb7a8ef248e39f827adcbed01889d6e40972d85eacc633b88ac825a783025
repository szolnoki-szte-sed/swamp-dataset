--- eShop/.metadata/.log ---
@@ -3650,3 +3650,236 @@ java.lang.NullPointerException: Cannot set a null prefix table
 	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)
 	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)
 	at org.eclipse.equinox.launcher.Main.run(Main.java:1236)
+!SESSION 2013-01-13 17:51:13.371 -----------------------------------------------
+eclipse.buildId=unknown
+java.version=1.5.0_12
+java.vendor=Sun Microsystems Inc.
+BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=bg_BG
+Command-line arguments:  -os win32 -ws win32 -arch x86
+
+!ENTRY org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885
+!MESSAGE A handler conflict occurred.  This may disable some commands.
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)
+
+!ENTRY org.eclipse.ui.workbench 4 0 2013-01-13 20:22:29.167
+!MESSAGE Cannot set a null prefix table
+!STACK 0
+java.lang.NullPointerException: Cannot set a null prefix table
+	at org.eclipse.jface.bindings.CachedBindingSet.setPrefixTable(CachedBindingSet.java:346)
+	at org.eclipse.jface.bindings.BindingManager.recomputeBindings(BindingManager.java:1765)
+	at org.eclipse.jface.bindings.BindingManager.contextManagerChanged(BindingManager.java:689)
+	at org.eclipse.core.commands.contexts.ContextManager.fireContextManagerChanged(ContextManager.java:152)
+	at org.eclipse.core.commands.contexts.ContextManager.removeActiveContext(ContextManager.java:232)
+	at org.eclipse.ui.internal.contexts.ContextAuthority.updateContext(ContextAuthority.java:767)
+	at org.eclipse.ui.internal.contexts.ContextAuthority.deactivateContext(ContextAuthority.java:362)
+	at org.eclipse.ui.internal.contexts.ContextService.deactivateContext(ContextService.java:140)
+	at org.eclipse.ui.internal.contexts.ContextService.deactivateContexts(ContextService.java:154)
+	at org.eclipse.ui.internal.contexts.SlaveContextService.dispose(SlaveContextService.java:240)
+	at org.eclipse.ui.internal.services.ServiceLocator.dispose(ServiceLocator.java:142)
+	at org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:1627)
+	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:722)
+	at org.eclipse.ui.internal.WorkbenchWindow.access$0(WorkbenchWindow.java:698)
+	at org.eclipse.ui.internal.WorkbenchWindow$3.run(WorkbenchWindow.java:814)
+	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
+	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:812)
+	at org.eclipse.jface.window.WindowManager.close(WindowManager.java:109)
+	at org.eclipse.ui.internal.Workbench$16.run(Workbench.java:912)
+	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
+	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:909)
+	at org.eclipse.ui.internal.Workbench.access$15(Workbench.java:838)
+	at org.eclipse.ui.internal.Workbench$23.run(Workbench.java:1082)
+	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
+	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1080)
+	at org.eclipse.ui.internal.Workbench.restart(Workbench.java:2054)
+	at org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction.restart(OpenWorkspaceAction.java:237)
+	at org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction.access$0(OpenWorkspaceAction.java:229)
+	at org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction$WorkspaceMRUAction.run(OpenWorkspaceAction.java:94)
+	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
+	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:583)
+	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:500)
+	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:411)
+	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
+	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1003)
+	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3823)
+	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3422)
+	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2382)
+	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2346)
+	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2198)
+	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:493)
+	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:288)
+	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:488)
+	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
+	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
+	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:193)
+	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
+	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
+	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:386)
+	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
+	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
+	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
+	at java.lang.reflect.Method.invoke(Method.java:585)
+	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)
+	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)
+	at org.eclipse.equinox.launcher.Main.run(Main.java:1236)
+!SESSION 2013-01-13 20:54:10.803 -----------------------------------------------
+eclipse.buildId=unknown
+java.version=1.5.0_12
+java.vendor=Sun Microsystems Inc.
+BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=bg_BG
+Command-line arguments:  -os win32 -ws win32 -arch x86 -data D:\Drugi\Docs\PU\3 kurs\2 trimestur\Kursov Proekt 2\eShop\
+
+!ENTRY org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828
+!MESSAGE A handler conflict occurred.  This may disable some commands.
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828
+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5':
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,
+	handler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),
+	expression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)
+
+!ENTRY org.eclipse.ui.workbench 4 0 2013-01-13 21:27:29.686
+!MESSAGE Cannot set a null prefix table
+!STACK 0
+java.lang.NullPointerException: Cannot set a null prefix table
+	at org.eclipse.jface.bindings.CachedBindingSet.setPrefixTable(CachedBindingSet.java:346)
+	at org.eclipse.jface.bindings.BindingManager.recomputeBindings(BindingManager.java:1765)
+	at org.eclipse.jface.bindings.BindingManager.contextManagerChanged(BindingManager.java:689)
+	at org.eclipse.core.commands.contexts.ContextManager.fireContextManagerChanged(ContextManager.java:152)
+	at org.eclipse.core.commands.contexts.ContextManager.removeActiveContext(ContextManager.java:232)
+	at org.eclipse.ui.internal.contexts.ContextAuthority.updateContext(ContextAuthority.java:767)
+	at org.eclipse.ui.internal.contexts.ContextAuthority.deactivateContext(ContextAuthority.java:362)
+	at org.eclipse.ui.internal.contexts.ContextService.deactivateContext(ContextService.java:140)
+	at org.eclipse.ui.internal.contexts.ContextService.deactivateContexts(ContextService.java:154)
+	at org.eclipse.ui.internal.contexts.SlaveContextService.dispose(SlaveContextService.java:240)
+	at org.eclipse.ui.internal.services.ServiceLocator.dispose(ServiceLocator.java:142)
+	at org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:1627)
+	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:722)
+	at org.eclipse.ui.internal.WorkbenchWindow.access$0(WorkbenchWindow.java:698)
+	at org.eclipse.ui.internal.WorkbenchWindow$3.run(WorkbenchWindow.java:814)
+	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
+	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:812)
+	at org.eclipse.jface.window.WindowManager.close(WindowManager.java:109)
+	at org.eclipse.ui.internal.Workbench$16.run(Workbench.java:912)
+	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)
+	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:909)
+	at org.eclipse.ui.internal.Workbench.access$15(Workbench.java:838)
+	at org.eclipse.ui.internal.Workbench$23.run(Workbench.java:1082)
+	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
+	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1080)
+	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1052)
+	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:719)
+	at org.eclipse.ui.internal.WorkbenchWindow.access$0(WorkbenchWindow.java:698)
+	at org.eclipse.ui.internal.WorkbenchWindow$3.run(WorkbenchWindow.java:814)
+	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
+	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:812)
+	at org.eclipse.jface.window.Window.handleShellCloseEvent(Window.java:741)
+	at org.eclipse.jface.window.Window$3.shellClosed(Window.java:687)
+	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:92)
+	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
+	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1003)
+	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
+	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
+	at org.eclipse.swt.widgets.Decorations.closeWidget(Decorations.java:307)
+	at org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1643)
+	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3789)
+	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:337)
+	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1576)
+	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:1937)
+	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4528)
+	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
+	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2366)
+	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:477)
+	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3877)
+	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:337)
+	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1576)
+	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:1937)
+	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4528)
+	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
+	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2366)
+	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:477)
+	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3877)
+	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:337)
+	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1576)
+	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:1937)
+	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4528)
+	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
+	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2371)
+	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3420)
+	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2382)
+	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2346)
+	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2198)
+	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:493)
+	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:288)
+	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:488)
+	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
+	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
+	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:193)
+	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
+	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
+	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:386)
+	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
+	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
+	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
+	at java.lang.reflect.Method.invoke(Method.java:585)
+	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)
+	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)
+	at org.eclipse.equinox.launcher.Main.run(Main.java:1236)

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/0/00732ff1a25d00121890bdcc27f78f62 ---
@@ -0,0 +1,524 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+import java.lang.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/12/f0aff560a45d00121890bdcc27f78f62 ---
@@ -4,6 +4,7 @@ import java.awt.Dimension;
 import java.awt.EventQueue;
 import java.awt.FlowLayout;
 import java.awt.GridLayout;
+import java.awt.Insets;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.awt.event.WindowListener;
@@ -32,6 +33,7 @@ import com.jgoodies.forms.layout.ColumnSpec;
 import com.jgoodies.forms.layout.FormLayout;
 import com.jgoodies.forms.layout.RowSpec;
 
+
 public class mainWindow extends JFrame {
 
 	private final JMenuBar mainWindowMenu = new JMenuBar();
@@ -45,9 +47,17 @@ public class mainWindow extends JFrame {
 	
 	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
 	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
 	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
 	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
 	/**
 	 * Launch the application
 	 * @param args
@@ -110,17 +120,36 @@ public class mainWindow extends JFrame {
 		Operations.setText("��������");
 		Operations.setEnabled(false);
 		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
 		mainWindowMenu.add(Help);
 		Help.setText("�����");
 		
 		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
 		HelpAbout.setText("�������");
 		
 		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
 		mainWindowStatusPanel.setLayout(new FormLayout(
 			new ColumnSpec[] {
 				ColumnSpec.decode("149dlu"),
 				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
 				FormFactory.DEFAULT_COLSPEC},
 			new RowSpec[] {
 				FormFactory.RELATED_GAP_ROWSPEC,
@@ -132,9 +161,24 @@ public class mainWindow extends JFrame {
 		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
 		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
 		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
 		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
 		mainWindowStatusPanelSetEnabled(false);
 	}
 	
@@ -170,11 +214,41 @@ public class mainWindow extends JFrame {
 			fileDisconnectFromDb_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
 	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
 		public void actionPerformed(ActionEvent e) {
 			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
 
 	protected void this_windowClosing(WindowEvent e) {
 		
@@ -184,8 +258,7 @@ public class mainWindow extends JFrame {
 			
 			if (databaseConnectWindow.dbPortal.isConnected()) {
 				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
+				databaseConnectWindow.dbPortal.finalize();
 			}
 		}
 		this.dispose();
@@ -194,14 +267,13 @@ public class mainWindow extends JFrame {
 	
 	protected void fileExit_actionPerformed(ActionEvent e) {
 
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
 	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
 		
-		//databaseConnectWindow.main(null);
 		databaseConnectWindow dcw = new databaseConnectWindow();
 		dcw.setVisible(true);
 		dcw.addWindowListener(databaseConnectWindowClosing);
@@ -234,18 +306,20 @@ public class mainWindow extends JFrame {
 		
 		if (databaseConnectWindow.dbPortal != null) {
 			
-			databaseConnectWindow.dbPortal.finallize();
+			databaseConnectWindow.dbPortal.finalize();
 			
 			this.FileConnectToDb.setEnabled(true);
 			this.FileDisconnectFromDb.setEnabled(false);			
 			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
 		}
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
 		
 		operatorUserLoginWindow oul = new operatorUserLoginWindow();
 		oul.setVisible(true);
@@ -266,7 +340,60 @@ public class mainWindow extends JFrame {
 			}
 		}
 	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
 	
 	////////////////////////////////////////////////////////////////////////
 	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/18/10bfa35fa55d00121890bdcc27f78f62 ---
@@ -0,0 +1,523 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1b/10ee494fb45c00121e34961e0ace9d22 ---
@@ -1,62 +0,0 @@
-import java.awt.EventQueue;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.WindowConstants;
-import javax.swing.border.EtchedBorder;
-import javax.swing.border.TitledBorder;
-
-
-public class operatorUserLogin extends JFrame {
-
-	private final JPanel groupLoginPanel = new JPanel();
-	private final JPanel groupCreateNewUserPanel = new JPanel();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserLogin frame = new operatorUserLogin();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserLogin() {
-		super();
-		setBounds(100, 100, 518, 269);
-		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("���� �� ��������");
-		setName("operatorLogin");
-		setResizable(false);
-		setAlwaysOnTop(true);
-		
-		getContentPane().add(groupLoginPanel);
-		groupLoginPanel.setBorder(new TitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
-		groupLoginPanel.setBounds(10, 10, 243, 213);
-		
-		getContentPane().add(groupCreateNewUserPanel);
-		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
-		groupCreateNewUserPanel.setBounds(263, 10, 243, 213);
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1c/b065388fff5c00121f22d5fb8a5d79d9 ---
@@ -1,109 +0,0 @@
-import java.awt.EventQueue;
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-
-import database_management.MySQLdbManager;
-import md5_calculator.Md5hashcalc;
-
-public class operatorUserSettingsWindow extends JFrame {
-
-	private final JLabel usernameLabel = new JLabel();
-	private final JLabel passwordLabel = new JLabel();
-	private final JLabel passwordAgainLabel = new JLabel();
-	private final JLabel nameLabel = new JLabel();
-	private final JLabel lastNameLabel = new JLabel();
-	private final JButton updateButton = new JButton();
-	private final JTextField firstNameTextField = new JTextField();
-	private final JTextField lastNameTextField = new JTextField();
-	private final JPasswordField passwordPasswordField = new JPasswordField();
-	private final JPasswordField passwordAgainPasswordField = new JPasswordField();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserSettingsWindow() {
-		super();
-		setBounds(100, 100, 314, 214);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("��������� �� ����������");
-		setName("operatorUserSettings");
-		
-		getContentPane().add(usernameLabel);
-		usernameLabel.setText("����������:");
-		usernameLabel.setBounds(10, 0, 97, 16);
-		
-		getContentPane().add(passwordLabel);
-		passwordLabel.setText("������:");
-		passwordLabel.setBounds(10, 76, 97, 16);
-		
-		getContentPane().add(passwordAgainLabel);
-		passwordAgainLabel.setText("������ ������:");
-		passwordAgainLabel.setBounds(10, 95, 97, 16);
-		
-		getContentPane().add(nameLabel);
-		nameLabel.setText("���:");
-		nameLabel.setBounds(10, 32, 97, 16);
-		
-		getContentPane().add(lastNameLabel);
-		lastNameLabel.setText("�������:");
-		lastNameLabel.setBounds(10, 54, 97, 16);
-		
-		getContentPane().add(updateButton);
-		updateButton.setText("������");
-		updateButton.setBounds(93, 140, 106, 26);
-		
-		getContentPane().add(firstNameTextField);
-		firstNameTextField.setBounds(113, 30, 175, 20);
-		
-		getContentPane().add(lastNameTextField);
-		lastNameTextField.setBounds(113, 52, 175, 20);
-		
-		getContentPane().add(passwordPasswordField);
-		passwordPasswordField.setBounds(113, 74, 175, 20);
-		
-		getContentPane().add(passwordAgainPasswordField);
-		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
-		
-		getCurrentUserData();
-	}
-	
-	private void getCurrentUserData() {
-		
-		if (databaseConnectWindow.dbPortal == null) {
-			return;
-		}
-		if (databaseConnectWindow.dbPortal.isConnected() == false) {
-			return;
-		}
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1f/200b7592a45d00121890bdcc27f78f62 ---
@@ -3,15 +3,16 @@ import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowEvent;
 
-import javax.swing.JButton;
-
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JPasswordField;
 import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
 import javax.swing.JOptionPane;
 
 import database_management.MySQLdbManager;
+import md5_calculator.Md5hashcalc;
 
 public class databaseConnectWindow extends JFrame {
 
@@ -33,7 +34,7 @@ public class databaseConnectWindow extends JFrame {
 	 * @param args
 	 */
 	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
+		EventQueue.invokeLater(new Runnable() { 
 			public void run() {
 				try {
 					databaseConnectWindow frame = new databaseConnectWindow();
@@ -42,7 +43,7 @@ public class databaseConnectWindow extends JFrame {
 					e.printStackTrace();
 				}
 			}
-		});
+		});		
 	}
 
 	/**
@@ -51,7 +52,7 @@ public class databaseConnectWindow extends JFrame {
 	public databaseConnectWindow() {
 		super();
 		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		try {
 			jbInit();
 		} catch (Throwable e) {
@@ -115,6 +116,7 @@ public class databaseConnectWindow extends JFrame {
 			connectToDatabaseButton_actionPerformed(e);
 		}
 	}
+
 	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
 		
 		String password = "";
@@ -136,7 +138,7 @@ public class databaseConnectWindow extends JFrame {
 			dbPortal.disconnect(); //just in case
 			
 			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
+				dbPortal.finalize();
 				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
 						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
 				
@@ -152,11 +154,11 @@ public class databaseConnectWindow extends JFrame {
 					if (createNewDatabaseAndTables() == false) { //in case of fail do not close this window
 						
 						return;
-					}					
+					}
 				}
 				else {
 				
-					dbPortal.finallize();
+					dbPortal.finalize();
 					return;
 				}
 				
@@ -171,72 +173,79 @@ public class databaseConnectWindow extends JFrame {
 		
 		if (dbPortal.connect() == false) {
 			
-			JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
 					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
-			dbPortal.finallize();
+			dbPortal.finalize();
 			return false;
 		}
 		
-		if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText()) != 1) {
+		//FIXME prone??? to sql injection maybe??
+		
+		if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
 			
 			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
-			dbPortal.disconnect();
-			dbPortal.finallize();
+			dbPortal.finalize();
 			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
 					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
 			return false;
 		}
 		
-		if (dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
-				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL," + 
-				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)") != 1) {
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
 			
-			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.setMySqlActiveDatabase("");
 			dbPortal.disconnect();
-			dbPortal.finallize();
-			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ������� � ������ �����!\n��������� ����� �� ����� �� ����!",
-					"�� ���� �� �� ������� �������!", JOptionPane.ERROR_MESSAGE);
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
 			return false;
 		}
 		
-		if (dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
+		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
+				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
+		
+		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
 				"order_time datetime NOT NULL, order_operator_id int NOT NULL," +
-				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)") != 1) {
-			
-			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
-			dbPortal.disconnect();
-			dbPortal.finallize();
-			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ������� � ������ �����!\n��������� ����� �� ����� �� ����!",
-					"�� ���� �� �� ������� �������!", JOptionPane.ERROR_MESSAGE);
-			return false;
-		}
+				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)");
 
-		if (dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
-				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)") != 1) {
-			
-			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
-			dbPortal.disconnect();
-			dbPortal.finallize();
-			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ������� � ������ �����!\n��������� ����� �� ����� �� ����!",
-					"�� ���� �� �� ������� �������!", JOptionPane.ERROR_MESSAGE);
-			return false;
-		}
+		dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)");
 
-		if (dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
+		dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
 				"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, " +
 				"order_detail_product_quantity int NOT NULL," +
 				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
-				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)") != 1) {
-			
-			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
-			dbPortal.disconnect();
-			dbPortal.finallize();
-			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ������� � ������ �����!\n��������� ����� �� ����� �� ����!",
-					"�� ���� �� �� ������� �������!", JOptionPane.ERROR_MESSAGE);
-			return false;
+				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
 		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
 		
 		return true;
-	}
-
+	}	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1f/70700e07a55d00121890bdcc27f78f62 ---
@@ -0,0 +1,326 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				//FIXME prone to sql injection
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE" + 
+						" operator_username='" + loginUsernameTextField.getText() + "' AND operator_password='" +
+						Md5hashcalc.calculateMD5hash(password) + "'");
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/20/40886ce5fe5c00121f22d5fb8a5d79d9 ---
@@ -1,103 +0,0 @@
-import java.awt.EventQueue;
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-
-import database_management.MySQLdbManager;
-import md5_calculator.Md5hashcalc;
-
-public class operatorUserSettingsWindow extends JFrame {
-
-	private final JLabel usernameLabel = new JLabel();
-	private final JLabel passwordLabel = new JLabel();
-	private final JLabel passwordAgainLabel = new JLabel();
-	private final JLabel nameLabel = new JLabel();
-	private final JLabel lastNameLabel = new JLabel();
-	private final JButton updateButton = new JButton();
-	private final JTextField firstNameTextField = new JTextField();
-	private final JTextField lastNameTextField = new JTextField();
-	private final JPasswordField passwordPasswordField = new JPasswordField();
-	private final JPasswordField passwordAgainPasswordField = new JPasswordField();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserSettingsWindow() {
-		super();
-		setBounds(100, 100, 314, 214);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("��������� �� ����������");
-		setName("operatorUserSettings");
-		
-		getContentPane().add(usernameLabel);
-		usernameLabel.setText("����������:");
-		usernameLabel.setBounds(10, 0, 97, 16);
-		
-		getContentPane().add(passwordLabel);
-		passwordLabel.setText("������:");
-		passwordLabel.setBounds(10, 76, 97, 16);
-		
-		getContentPane().add(passwordAgainLabel);
-		passwordAgainLabel.setText("������ ������:");
-		passwordAgainLabel.setBounds(10, 95, 97, 16);
-		
-		getContentPane().add(nameLabel);
-		nameLabel.setText("���:");
-		nameLabel.setBounds(10, 32, 97, 16);
-		
-		getContentPane().add(lastNameLabel);
-		lastNameLabel.setText("�������:");
-		lastNameLabel.setBounds(10, 54, 97, 16);
-		
-		getContentPane().add(updateButton);
-		updateButton.setText("������");
-		updateButton.setBounds(93, 140, 106, 26);
-		
-		getContentPane().add(firstNameTextField);
-		firstNameTextField.setBounds(113, 30, 175, 20);
-		
-		getContentPane().add(lastNameTextField);
-		lastNameTextField.setBounds(113, 52, 175, 20);
-		
-		getContentPane().add(passwordPasswordField);
-		passwordPasswordField.setBounds(113, 74, 175, 20);
-		
-		getContentPane().add(passwordAgainPasswordField);
-		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
-		
-		getCurrentUserData();
-	}
-	
-	private void getCurrentUserData() {
-		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/25/50c3d407585b0012179f93dc572b551d ---
@@ -1,171 +0,0 @@
-import java.awt.EventQueue;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.awt.event.WindowEvent;
-
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-import javax.swing.JOptionPane;
-
-import database_management.MySQLdbManager;
-
-public class databaseConnectWindow extends JFrame {
-
-	private final JLabel label = new JLabel();
-	private final JLabel label_1 = new JLabel();
-	private final JLabel label_2 = new JLabel();
-	private final JLabel label_3 = new JLabel();
-	private final JLabel label_4 = new JLabel();
-	private final JButton connectToDatabaseButton = new JButton();
-	private final JTextField mysqlServerAddressTextField = new JTextField();
-	private final JTextField mysqlPortTextField = new JTextField();
-	private final JTextField mysqlDatabaseNameTextField = new JTextField();
-	private final JTextField mysqlUsernameTextField = new JTextField();
-	private final JPasswordField mysqlPasswordPasswordField = new JPasswordField();
-	public static MySQLdbManager dbPortal = null;
-	
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					databaseConnectWindow frame = new databaseConnectWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public databaseConnectWindow() {
-		super();
-		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setAlwaysOnTop(true);
-		setResizable(false);
-		setTitle("��������� � ������ �����");
-		setName("databaseConnectWindowFrame");
-		
-		getContentPane().add(label);
-		label.setText("����� �� MySQL �������:");
-		label.setBounds(10, 10, 165, 16);
-		
-		getContentPane().add(label_1);
-		label_1.setText("��� �� ������ �����:");
-		label_1.setBounds(10, 54, 165, 16);
-		
-		getContentPane().add(label_2);
-		label_2.setText("����:");
-		label_2.setBounds(10, 32, 156, 16);
-		
-		getContentPane().add(label_3);
-		label_3.setText("������������� ���:");
-		label_3.setBounds(10, 76, 165, 16);
-		
-		getContentPane().add(label_4);
-		label_4.setText("������:");
-		label_4.setBounds(10, 98, 156, 16);
-		
-		getContentPane().add(connectToDatabaseButton);
-		connectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());
-		connectToDatabaseButton.setText("������ ��!");
-		connectToDatabaseButton.setBounds(132, 135, 106, 26);
-		
-		getContentPane().add(mysqlServerAddressTextField);
-		mysqlServerAddressTextField.setText("127.0.0.1");
-		mysqlServerAddressTextField.setBounds(181, 8, 185, 20);
-		
-		getContentPane().add(mysqlPortTextField);
-		mysqlPortTextField.setText("3306");
-		mysqlPortTextField.setBounds(181, 30, 91, 20);
-		
-		getContentPane().add(mysqlDatabaseNameTextField);
-		mysqlDatabaseNameTextField.setText("shop");
-		mysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);
-		
-		getContentPane().add(mysqlUsernameTextField);
-		mysqlUsernameTextField.setText("root");
-		mysqlUsernameTextField.setBounds(181, 76, 180, 18);
-		
-		getContentPane().add(mysqlPasswordPasswordField);
-		mysqlPasswordPasswordField.setBounds(181, 96, 181, 20);
-	}
-	private class ConnectToDatabaseButtonActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			connectToDatabaseButton_actionPerformed(e);
-		}
-	}
-	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
-		
-		String password = "";
-		
-		char [] pass = mysqlPasswordPasswordField.getPassword();
-		for (int i = 0; i < pass.length; i++) {
-			
-			password += pass[i];
-		}
-		
-		dbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),
-				mysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),
-				mysqlUsernameTextField.getText(), password);		
-		
-		
-		if (dbPortal.connect() == false) { //now check for database name that is not existing
-			
-			dbPortal.setMySqlActiveDatabase("");
-			dbPortal.disconnect(); //just in case
-			
-			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
-				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
-						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
-				
-				return;
-			}
-			else { //will have to create new database
-				
-				if (JOptionPane.showConfirmDialog(this, "�� ���� ��������� ���� ���� ����� � ���: " + mysqlDatabaseNameTextField.getText() +
-						".\n������� �� ���?", "��������� �� ���� ���� �����?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
-					
-					
-				}
-				else {
-				
-					dbPortal.disconnect();
-					dbPortal.finallize();
-					return;
-				}
-				
-				this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
-			}			
-		}
-		
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	private void createNewDatabaseAndTables() {
-		
-		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/25/b05af020b65d001211398853d386ea7d ---
@@ -0,0 +1,248 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JButton;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserSettingsWindow extends JFrame {
+	private static final long serialVersionUID = 3004L;
+
+	private final JLabel usernameLabel = new JLabel();
+	private final JLabel passwordLabel = new JLabel();
+	private final JLabel passwordAgainLabel = new JLabel();
+	private final JLabel nameLabel = new JLabel();
+	private final JLabel lastNameLabel = new JLabel();
+	private final JButton updateButton = new JButton();
+	private final JButton deleteOperator = new JButton();
+	private final JTextField firstNameTextField = new JTextField();
+	private final JTextField lastNameTextField = new JTextField();
+	private final JPasswordField passwordPasswordField = new JPasswordField();
+	private final JPasswordField passwordAgainPasswordField = new JPasswordField();	
+	
+	private String currentOperatorPassword = "";
+	public static String operatorFirstNameLastNameCombination = "";	
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserSettingsWindow() {
+		super();
+		setBounds(100, 100, 314, 255);
+		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setResizable(false);
+		setAlwaysOnTop(true);
+		setTitle("��������� �� ����������");
+		setName("operatorUserSettings");
+		
+		getContentPane().add(usernameLabel);
+		usernameLabel.setText("����������:");
+		usernameLabel.setBounds(10, 0, 278, 16);
+		
+		getContentPane().add(passwordLabel);
+		passwordLabel.setText("������:");
+		passwordLabel.setBounds(10, 76, 97, 16);
+		
+		getContentPane().add(passwordAgainLabel);
+		passwordAgainLabel.setText("������ ������:");
+		passwordAgainLabel.setBounds(10, 95, 97, 16);
+		
+		getContentPane().add(nameLabel);
+		nameLabel.setText("���:");
+		nameLabel.setBounds(10, 32, 97, 16);
+		
+		getContentPane().add(lastNameLabel);
+		lastNameLabel.setText("�������:");
+		lastNameLabel.setBounds(10, 54, 97, 16);
+		
+		getContentPane().add(updateButton);
+		updateButton.addActionListener(new UpdateButtonActionListener());
+		updateButton.setText("������");
+		updateButton.setBounds(90, 130, 137, 26);
+		
+		getContentPane().add(firstNameTextField);
+		firstNameTextField.setBounds(113, 30, 175, 20);
+		
+		getContentPane().add(lastNameTextField);
+		lastNameTextField.setBounds(113, 52, 175, 20);
+		
+		getContentPane().add(passwordPasswordField);
+		passwordPasswordField.setBounds(113, 74, 175, 20);
+		
+		getContentPane().add(passwordAgainPasswordField);
+		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
+		
+		getCurrentUserData();
+		
+		getContentPane().add(deleteOperator);
+		deleteOperator.addActionListener(new DeleteOperatorActionListener());
+		deleteOperator.setText("������ ��������");
+		deleteOperator.setBounds(90, 189, 137, 26);
+	}
+	
+	private void getCurrentUserData() {
+		
+		if (databaseConnectWindow.dbPortal == null) {
+			return;
+		}
+		if (databaseConnectWindow.dbPortal.isConnected() == false) {
+			return;
+		}
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
+				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
+		
+		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
+			return;
+		}
+		
+		try {
+			
+			usernameLabel.setText("����������: " + rs.getString(1));
+			currentOperatorPassword = rs.getString(2);
+			firstNameTextField.setText(rs.getString(3));
+			lastNameTextField.setText(rs.getString(4));
+		}
+		catch (Exception ex) {			
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+	}
+	
+	private class UpdateButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			updateButton_actionPerformed(e);
+		}
+	}
+	private class DeleteOperatorActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			deleteOperator_actionPerformed(e);
+		}
+	}
+	protected void updateButton_actionPerformed(ActionEvent e) {
+		
+		char[] pass = passwordPasswordField.getPassword();
+		String password = "";
+		
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		char[] pass2 = passwordAgainPasswordField.getPassword();
+		String password2 = "";
+		
+		for (int j = 0; j < pass2.length; j++) {
+			
+			password2 += pass2[j];
+		}
+		
+		if (password.compareTo(password2) != 0) {
+			
+			JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (password.length() > 3) { //password update will be performed too
+			
+			try {
+				
+				password = Md5hashcalc.calculateMD5hash(password);
+				currentOperatorPassword = password;
+			}
+			catch (Exception ex) {
+				
+				JOptionPane.showMessageDialog(this, "������� � ���������� �� ���� �� �������� ����\n�� ����� �������� ������ �������� � ������������!", "������� ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			}			
+		}
+		else {
+			if (password.length() > 0) {
+				
+				JOptionPane.showMessageDialog(this, "�������� ������ �� � ���� 4 �������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		
+		if ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {
+			
+			JOptionPane.showMessageDialog(this, "��������� ������ ��� ��� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (databaseConnectWindow.dbPortal.executeParameterizedNonQuery("UPDATE operators SET operator_password=? " +
+				"operator_first_name=? operator_last_name=? WHERE operator_id=?", currentOperatorPassword, 
+				firstNameTextField.getText(), lastNameTextField.getText(), operatorUserLoginWindow.loggedUserId) != 1) {
+		
+			JOptionPane.showMessageDialog(this, "������ ��� ���������� �� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+		operatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	protected void deleteOperator_actionPerformed(ActionEvent e) {
+		
+		//we can not delete not existing operator
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		if (JOptionPane.showConfirmDialog(this, "����������� �� ��������� �� �������� �� ������ �����\n" + 
+				"� ������ ��������, ����� ��� � ��������.\n\n\t���������?", "���������� ��������� �� ��������", 
+				JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+			
+			if (databaseConnectWindow.dbPortal.executeNonQuery("DELETE FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+
+				JOptionPane.showMessageDialog(this, "����������� � ���������!", "��������� ��������� �� ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+			
+			operatorUserLoginWindow.loggedUserId = -1;
+			this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+		}
+		
+		return;
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/2d/10122d7aa45d00121890bdcc27f78f62 ---
@@ -0,0 +1,396 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.BoxLayout;
+import javax.swing.JButton;
+import javax.swing.JComponent;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JSeparator;
+import javax.swing.SpringLayout;
+import javax.swing.border.EtchedBorder;
+import org.jdesktop.layout.GroupLayout;
+import org.jdesktop.layout.LayoutStyle;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/2e/40e3e55f575b0012179f93dc572b551d ---
@@ -1,166 +0,0 @@
-import java.awt.EventQueue;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.awt.event.WindowEvent;
-
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-import javax.swing.JOptionPane;
-
-import database_management.MySQLdbManager;
-
-public class databaseConnectWindow extends JFrame {
-
-	private final JLabel label = new JLabel();
-	private final JLabel label_1 = new JLabel();
-	private final JLabel label_2 = new JLabel();
-	private final JLabel label_3 = new JLabel();
-	private final JLabel label_4 = new JLabel();
-	private final JButton connectToDatabaseButton = new JButton();
-	private final JTextField mysqlServerAddressTextField = new JTextField();
-	private final JTextField mysqlPortTextField = new JTextField();
-	private final JTextField mysqlDatabaseNameTextField = new JTextField();
-	private final JTextField mysqlUsernameTextField = new JTextField();
-	private final JPasswordField mysqlPasswordPasswordField = new JPasswordField();
-	public static MySQLdbManager dbPortal = null;
-	
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					databaseConnectWindow frame = new databaseConnectWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public databaseConnectWindow() {
-		super();
-		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setAlwaysOnTop(true);
-		setResizable(false);
-		setTitle("��������� � ������ �����");
-		setName("databaseConnectWindowFrame");
-		
-		getContentPane().add(label);
-		label.setText("����� �� MySQL �������:");
-		label.setBounds(10, 10, 165, 16);
-		
-		getContentPane().add(label_1);
-		label_1.setText("��� �� ������ �����:");
-		label_1.setBounds(10, 54, 165, 16);
-		
-		getContentPane().add(label_2);
-		label_2.setText("����:");
-		label_2.setBounds(10, 32, 156, 16);
-		
-		getContentPane().add(label_3);
-		label_3.setText("������������� ���:");
-		label_3.setBounds(10, 76, 165, 16);
-		
-		getContentPane().add(label_4);
-		label_4.setText("������:");
-		label_4.setBounds(10, 98, 156, 16);
-		
-		getContentPane().add(connectToDatabaseButton);
-		connectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());
-		connectToDatabaseButton.setText("������ ��!");
-		connectToDatabaseButton.setBounds(132, 135, 106, 26);
-		
-		getContentPane().add(mysqlServerAddressTextField);
-		mysqlServerAddressTextField.setText("127.0.0.1");
-		mysqlServerAddressTextField.setBounds(181, 8, 185, 20);
-		
-		getContentPane().add(mysqlPortTextField);
-		mysqlPortTextField.setText("3306");
-		mysqlPortTextField.setBounds(181, 30, 91, 20);
-		
-		getContentPane().add(mysqlDatabaseNameTextField);
-		mysqlDatabaseNameTextField.setText("shop");
-		mysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);
-		
-		getContentPane().add(mysqlUsernameTextField);
-		mysqlUsernameTextField.setText("root");
-		mysqlUsernameTextField.setBounds(181, 76, 180, 18);
-		
-		getContentPane().add(mysqlPasswordPasswordField);
-		mysqlPasswordPasswordField.setBounds(181, 96, 181, 20);
-	}
-	private class ConnectToDatabaseButtonActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			connectToDatabaseButton_actionPerformed(e);
-		}
-	}
-	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
-		
-		String password = "";
-		
-		char [] pass = mysqlPasswordPasswordField.getPassword();
-		for (int i = 0; i < pass.length; i++) {
-			
-			password += pass[i];
-		}
-		
-		dbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),
-				mysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),
-				mysqlUsernameTextField.getText(), password);		
-		
-		
-		if (dbPortal.connect() == false) { //now check for database name that is not existing
-			
-			dbPortal.setMySqlActiveDatabase("");
-			dbPortal.disconnect(); //just in case
-			
-			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
-				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
-						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
-				
-				return;
-			}
-			else { //will have to create new database
-				
-				if (JOptionPane.showConfirmDialog(this, "�� ���� ��������� ���� ���� ����� � ���: " + mysqlDatabaseNameTextField.getText() +
-						".\n������� �� ���?", "��������� �� ���� ���� �����?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
-					
-					
-				}
-				else {
-				
-					dbPortal.disconnect();
-					dbPortal.finallize();
-					return;
-				}
-				
-				this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
-			}			
-		}
-		
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/30/b092ea0ab45c00121e34961e0ace9d22 ---
@@ -1,35 +0,0 @@
-import java.awt.EventQueue;
-
-import javax.swing.JFrame;
-
-
-public class operatorUserLogin extends JFrame {
-
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserLogin frame = new operatorUserLogin();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserLogin() {
-		super();
-		setBounds(100, 100, 500, 375);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		//
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/32/1047046ea45d00121890bdcc27f78f62 ---
@@ -0,0 +1,524 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+import java.lang.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/33/b0a2eb76a45d00121890bdcc27f78f62 ---
@@ -2,8 +2,7 @@ import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
+import java.awt.Insets;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.awt.event.WindowListener;
@@ -32,6 +31,7 @@ import com.jgoodies.forms.layout.ColumnSpec;
 import com.jgoodies.forms.layout.FormLayout;
 import com.jgoodies.forms.layout.RowSpec;
 
+
 public class mainWindow extends JFrame {
 
 	private final JMenuBar mainWindowMenu = new JMenuBar();
@@ -45,9 +45,17 @@ public class mainWindow extends JFrame {
 	
 	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
 	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
 	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
 	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
 	/**
 	 * Launch the application
 	 * @param args
@@ -110,17 +118,36 @@ public class mainWindow extends JFrame {
 		Operations.setText("��������");
 		Operations.setEnabled(false);
 		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
 		mainWindowMenu.add(Help);
 		Help.setText("�����");
 		
 		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
 		HelpAbout.setText("�������");
 		
 		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
 		mainWindowStatusPanel.setLayout(new FormLayout(
 			new ColumnSpec[] {
 				ColumnSpec.decode("149dlu"),
 				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
 				FormFactory.DEFAULT_COLSPEC},
 			new RowSpec[] {
 				FormFactory.RELATED_GAP_ROWSPEC,
@@ -132,9 +159,24 @@ public class mainWindow extends JFrame {
 		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
 		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
 		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
 		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
 		mainWindowStatusPanelSetEnabled(false);
 	}
 	
@@ -170,11 +212,41 @@ public class mainWindow extends JFrame {
 			fileDisconnectFromDb_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
 	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
 		public void actionPerformed(ActionEvent e) {
 			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
 
 	protected void this_windowClosing(WindowEvent e) {
 		
@@ -184,8 +256,7 @@ public class mainWindow extends JFrame {
 			
 			if (databaseConnectWindow.dbPortal.isConnected()) {
 				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
+				databaseConnectWindow.dbPortal.finalize();
 			}
 		}
 		this.dispose();
@@ -194,14 +265,13 @@ public class mainWindow extends JFrame {
 	
 	protected void fileExit_actionPerformed(ActionEvent e) {
 
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
 	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
 		
-		//databaseConnectWindow.main(null);
 		databaseConnectWindow dcw = new databaseConnectWindow();
 		dcw.setVisible(true);
 		dcw.addWindowListener(databaseConnectWindowClosing);
@@ -234,16 +304,20 @@ public class mainWindow extends JFrame {
 		
 		if (databaseConnectWindow.dbPortal != null) {
 			
-			databaseConnectWindow.dbPortal.finallize();
+			databaseConnectWindow.dbPortal.finalize();
 			
 			this.FileConnectToDb.setEnabled(true);
 			this.FileDisconnectFromDb.setEnabled(false);			
 			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
 		}
 	}
 	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
 		
 		operatorUserLoginWindow oul = new operatorUserLoginWindow();
 		oul.setVisible(true);
@@ -255,12 +329,69 @@ public class mainWindow extends JFrame {
 			if (operatorUserLoginWindow.loggedUserId != -1) {
 				
 				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
 			}
 			else {
 				
 				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
 			}
 		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
 	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
 	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/34/b0d63c8da55c00121e34961e0ace9d22 ---
@@ -1,223 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-		mainWindowStatusPanel.setEnabled(false);
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				//FIXME mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.mainWindowStatusPanel.setEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				//FIXME mainWindowPointer.Operations.setEnabled(false);
-    				mainWindowPointer.mainWindowStatusPanel.setEnabled(false);
-    			}
-    		}            
-        }
-    };
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			
-			this.FileConnectToDb.setEnabled(true);
-			this.FileDisconnectFromDb.setEnabled(false);			
-			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanel.setEnabled(false);			
-		}
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/39/3051c538b75d001211398853d386ea7d ---
@@ -0,0 +1,260 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
+import javax.swing.JOptionPane;
+
+import database_management.MySQLdbManager;
+
+public class databaseConnectWindow extends JFrame {
+	private static final long serialVersionUID = 3002L;
+
+	private final JLabel label = new JLabel();
+	private final JLabel label_1 = new JLabel();
+	private final JLabel label_2 = new JLabel();
+	private final JLabel label_3 = new JLabel();
+	private final JLabel label_4 = new JLabel();
+	private final JButton connectToDatabaseButton = new JButton();
+	private final JTextField mysqlServerAddressTextField = new JTextField();
+	private final JTextField mysqlPortTextField = new JTextField();
+	private final JTextField mysqlDatabaseNameTextField = new JTextField();
+	private final JTextField mysqlUsernameTextField = new JTextField();
+	private final JPasswordField mysqlPasswordPasswordField = new JPasswordField();
+	public static MySQLdbManager dbPortal = null;
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() { 
+			public void run() {
+				try {
+					databaseConnectWindow frame = new databaseConnectWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});		
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public databaseConnectWindow() {
+		super();
+		setBounds(100, 100, 384, 203);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setAlwaysOnTop(true);
+		setResizable(false);
+		setTitle("��������� � ������ �����");
+		setName("databaseConnectWindowFrame");
+		
+		getContentPane().add(label);
+		label.setText("����� �� MySQL �������:");
+		label.setBounds(10, 10, 165, 16);
+		
+		getContentPane().add(label_1);
+		label_1.setText("��� �� ������ �����:");
+		label_1.setBounds(10, 54, 165, 16);
+		
+		getContentPane().add(label_2);
+		label_2.setText("����:");
+		label_2.setBounds(10, 32, 156, 16);
+		
+		getContentPane().add(label_3);
+		label_3.setText("������������� ���:");
+		label_3.setBounds(10, 76, 165, 16);
+		
+		getContentPane().add(label_4);
+		label_4.setText("������:");
+		label_4.setBounds(10, 98, 156, 16);
+		
+		getContentPane().add(connectToDatabaseButton);
+		connectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());
+		connectToDatabaseButton.setText("������ ��!");
+		connectToDatabaseButton.setBounds(132, 135, 106, 26);
+		
+		getContentPane().add(mysqlServerAddressTextField);
+		mysqlServerAddressTextField.setText("127.0.0.1");
+		mysqlServerAddressTextField.setBounds(181, 8, 185, 20);
+		
+		getContentPane().add(mysqlPortTextField);
+		mysqlPortTextField.setText("3306");
+		mysqlPortTextField.setBounds(181, 30, 91, 20);
+		
+		getContentPane().add(mysqlDatabaseNameTextField);
+		mysqlDatabaseNameTextField.setText("shop");
+		mysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);
+		
+		getContentPane().add(mysqlUsernameTextField);
+		mysqlUsernameTextField.setText("root");
+		mysqlUsernameTextField.setBounds(181, 76, 180, 18);
+		
+		getContentPane().add(mysqlPasswordPasswordField);
+		mysqlPasswordPasswordField.setBounds(181, 96, 181, 20);
+	}
+	private class ConnectToDatabaseButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			connectToDatabaseButton_actionPerformed(e);
+		}
+	}
+
+	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
+		
+		String password = "";
+		
+		char [] pass = mysqlPasswordPasswordField.getPassword();
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		dbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),
+				mysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),
+				mysqlUsernameTextField.getText(), password);		
+		
+		
+		if (dbPortal.connect() == false) { //now check for database name that is not existing
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect(); //just in case
+			
+			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
+				dbPortal.finalize();
+				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
+						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
+				
+				return;
+			}
+			else { //will have to create new database
+				
+				dbPortal.disconnect();
+				
+				if (JOptionPane.showConfirmDialog(this, "�� ���� ��������� ���� ���� ����� � ���: " + mysqlDatabaseNameTextField.getText() +
+						".\n������� �� ���?", "��������� �� ���� ���� �����?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+					
+					if (createNewDatabaseAndTables() == false) { //in case of fail do not close this window
+						
+						return;
+					}
+				}
+				else {
+				
+					dbPortal.finalize();
+					return;
+				}
+				
+				this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+			}			
+		}
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	private boolean createNewDatabaseAndTables() {
+		
+		if (dbPortal.connect() == false) {
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		//FIXME prone??? to sql injection maybe??
+		
+		if (dbPortal.executeParameterizedNonQuery("CREATE DATABASE ? COLLATE utf8_general_ci", mysqlDatabaseNameTextField.getText()) != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}
+
+		/*if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}/*
+		
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect();
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
+				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
+		
+		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"order_time datetime NOT NULL, order_operator_id int NOT NULL," +
+				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+
+		dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)");
+
+		dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, " +
+				"order_detail_product_quantity int NOT NULL," +
+				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
+				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
+		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
+		
+		return true;
+	}	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3b/a0275544a35d00121890bdcc27f78f62 ---
@@ -3,15 +3,16 @@ import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowEvent;
 
-import javax.swing.JButton;
-
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JPasswordField;
 import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
 import javax.swing.JOptionPane;
 
 import database_management.MySQLdbManager;
+import md5_calculator.Md5hashcalc;
 
 public class databaseConnectWindow extends JFrame {
 
@@ -33,7 +34,7 @@ public class databaseConnectWindow extends JFrame {
 	 * @param args
 	 */
 	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
+		EventQueue.invokeLater(new Runnable() { 
 			public void run() {
 				try {
 					databaseConnectWindow frame = new databaseConnectWindow();
@@ -42,7 +43,7 @@ public class databaseConnectWindow extends JFrame {
 					e.printStackTrace();
 				}
 			}
-		});
+		});		
 	}
 
 	/**
@@ -51,7 +52,7 @@ public class databaseConnectWindow extends JFrame {
 	public databaseConnectWindow() {
 		super();
 		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		try {
 			jbInit();
 		} catch (Throwable e) {
@@ -115,6 +116,7 @@ public class databaseConnectWindow extends JFrame {
 			connectToDatabaseButton_actionPerformed(e);
 		}
 	}
+
 	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
 		
 		String password = "";
@@ -136,7 +138,7 @@ public class databaseConnectWindow extends JFrame {
 			dbPortal.disconnect(); //just in case
 			
 			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
+				dbPortal.finalize();
 				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
 						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
 				
@@ -153,11 +155,10 @@ public class databaseConnectWindow extends JFrame {
 						
 						return;
 					}
-					
 				}
 				else {
 				
-					dbPortal.finallize();
+					dbPortal.finalize();
 					return;
 				}
 				
@@ -170,16 +171,44 @@ public class databaseConnectWindow extends JFrame {
 	
 	private boolean createNewDatabaseAndTables() {
 		
-		dbPortal.setMySqlActiveDatabase("");
-		
 		if (dbPortal.connect() == false) {
 			
-			dbPortal.finallize();
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}
+		
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect();
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
 			return false;
 		}
 		
 		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
-				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
 				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
 		
 		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
@@ -195,7 +224,26 @@ public class databaseConnectWindow extends JFrame {
 				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
 				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
 		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
+		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
+		
 		return true;
-	}
-
+	}	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3d/c05fc1fca35d00121890bdcc27f78f62 ---
@@ -4,6 +4,7 @@ import java.awt.Dimension;
 import java.awt.EventQueue;
 import java.awt.FlowLayout;
 import java.awt.GridLayout;
+import java.awt.Insets;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.awt.event.WindowListener;
@@ -32,6 +33,8 @@ import com.jgoodies.forms.layout.ColumnSpec;
 import com.jgoodies.forms.layout.FormLayout;
 import com.jgoodies.forms.layout.RowSpec;
 
+import database_management.MySQLdbManager;
+
 public class mainWindow extends JFrame {
 
 	private final JMenuBar mainWindowMenu = new JMenuBar();
@@ -47,7 +50,16 @@ public class mainWindow extends JFrame {
 	private final JPanel mainWindowStatusPanel = new JPanel();
 	private final JPanel panel = new JPanel();
 	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
 	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
 	/**
 	 * Launch the application
 	 * @param args
@@ -110,17 +122,36 @@ public class mainWindow extends JFrame {
 		Operations.setText("��������");
 		Operations.setEnabled(false);
 		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
 		mainWindowMenu.add(Help);
 		Help.setText("�����");
 		
 		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
 		HelpAbout.setText("�������");
 		
 		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
 		mainWindowStatusPanel.setLayout(new FormLayout(
 			new ColumnSpec[] {
 				ColumnSpec.decode("149dlu"),
 				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
 				FormFactory.DEFAULT_COLSPEC},
 			new RowSpec[] {
 				FormFactory.RELATED_GAP_ROWSPEC,
@@ -132,9 +163,24 @@ public class mainWindow extends JFrame {
 		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
 		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
 		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
 		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
 		mainWindowStatusPanelSetEnabled(false);
 	}
 	
@@ -170,11 +216,41 @@ public class mainWindow extends JFrame {
 			fileDisconnectFromDb_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
 	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
 		public void actionPerformed(ActionEvent e) {
 			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
 
 	protected void this_windowClosing(WindowEvent e) {
 		
@@ -184,8 +260,7 @@ public class mainWindow extends JFrame {
 			
 			if (databaseConnectWindow.dbPortal.isConnected()) {
 				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
+				databaseConnectWindow.dbPortal.finalize();
 			}
 		}
 		this.dispose();
@@ -194,14 +269,13 @@ public class mainWindow extends JFrame {
 	
 	protected void fileExit_actionPerformed(ActionEvent e) {
 
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
 	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
 		
-		//databaseConnectWindow.main(null);
 		databaseConnectWindow dcw = new databaseConnectWindow();
 		dcw.setVisible(true);
 		dcw.addWindowListener(databaseConnectWindowClosing);
@@ -234,18 +308,20 @@ public class mainWindow extends JFrame {
 		
 		if (databaseConnectWindow.dbPortal != null) {
 			
-			databaseConnectWindow.dbPortal.finallize();
+			databaseConnectWindow.dbPortal.finalize();
 			
 			this.FileConnectToDb.setEnabled(true);
 			this.FileDisconnectFromDb.setEnabled(false);			
 			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
 		}
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
 		
 		operatorUserLoginWindow oul = new operatorUserLoginWindow();
 		oul.setVisible(true);
@@ -257,14 +333,69 @@ public class mainWindow extends JFrame {
 			if (operatorUserLoginWindow.loggedUserId != -1) {
 				
 				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
 			}
 			else {
 				
 				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
 			}
 		}
 	};
 	
 	////////////////////////////////////////////////////////////////////////
 	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3f/404dcf53b35d001211398853d386ea7d ---
@@ -0,0 +1,544 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object... parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+			}
+			
+			sqlStatement.execute();
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object... parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery();
+			
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3f/a0c32771a35d00121890bdcc27f78f62 ---
@@ -0,0 +1,260 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
+import javax.swing.JOptionPane;
+
+import database_management.MySQLdbManager;
+import md5_calculator.Md5hashcalc;
+
+public class databaseConnectWindow extends JFrame {
+
+	private final JLabel label = new JLabel();
+	private final JLabel label_1 = new JLabel();
+	private final JLabel label_2 = new JLabel();
+	private final JLabel label_3 = new JLabel();
+	private final JLabel label_4 = new JLabel();
+	private final JButton connectToDatabaseButton = new JButton();
+	private final JTextField mysqlServerAddressTextField = new JTextField();
+	private final JTextField mysqlPortTextField = new JTextField();
+	private final JTextField mysqlDatabaseNameTextField = new JTextField();
+	private final JTextField mysqlUsernameTextField = new JTextField();
+	private final JPasswordField mysqlPasswordPasswordField = new JPasswordField();
+	public static MySQLdbManager dbPortal = null;
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() { 
+			public void run() {
+				try {
+					databaseConnectWindow frame = new databaseConnectWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});		
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public databaseConnectWindow() {
+		super();
+		setBounds(100, 100, 384, 203);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setAlwaysOnTop(true);
+		setResizable(false);
+		setTitle("��������� � ������ �����");
+		setName("databaseConnectWindowFrame");
+		
+		getContentPane().add(label);
+		label.setText("����� �� MySQL �������:");
+		label.setBounds(10, 10, 165, 16);
+		
+		getContentPane().add(label_1);
+		label_1.setText("��� �� ������ �����:");
+		label_1.setBounds(10, 54, 165, 16);
+		
+		getContentPane().add(label_2);
+		label_2.setText("����:");
+		label_2.setBounds(10, 32, 156, 16);
+		
+		getContentPane().add(label_3);
+		label_3.setText("������������� ���:");
+		label_3.setBounds(10, 76, 165, 16);
+		
+		getContentPane().add(label_4);
+		label_4.setText("������:");
+		label_4.setBounds(10, 98, 156, 16);
+		
+		getContentPane().add(connectToDatabaseButton);
+		connectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());
+		connectToDatabaseButton.setText("������ ��!");
+		connectToDatabaseButton.setBounds(132, 135, 106, 26);
+		
+		getContentPane().add(mysqlServerAddressTextField);
+		mysqlServerAddressTextField.setText("127.0.0.1");
+		mysqlServerAddressTextField.setBounds(181, 8, 185, 20);
+		
+		getContentPane().add(mysqlPortTextField);
+		mysqlPortTextField.setText("3306");
+		mysqlPortTextField.setBounds(181, 30, 91, 20);
+		
+		getContentPane().add(mysqlDatabaseNameTextField);
+		mysqlDatabaseNameTextField.setText("shop");
+		mysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);
+		
+		getContentPane().add(mysqlUsernameTextField);
+		mysqlUsernameTextField.setText("root");
+		mysqlUsernameTextField.setBounds(181, 76, 180, 18);
+		
+		getContentPane().add(mysqlPasswordPasswordField);
+		mysqlPasswordPasswordField.setBounds(181, 96, 181, 20);
+	}
+	private class ConnectToDatabaseButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			connectToDatabaseButton_actionPerformed(e);
+		}
+	}
+
+	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
+		
+		String password = "";
+		
+		char [] pass = mysqlPasswordPasswordField.getPassword();
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		dbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),
+				mysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),
+				mysqlUsernameTextField.getText(), password);		
+		
+		
+		if (dbPortal.connect() == false) { //now check for database name that is not existing
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect(); //just in case
+			
+			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
+				dbPortal.finalize();
+				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
+						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
+				
+				return;
+			}
+			else { //will have to create new database
+				
+				dbPortal.disconnect();
+				
+				if (JOptionPane.showConfirmDialog(this, "�� ���� ��������� ���� ���� ����� � ���: " + mysqlDatabaseNameTextField.getText() +
+						".\n������� �� ���?", "��������� �� ���� ���� �����?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+					
+					if (createNewDatabaseAndTables() == false) { //in case of fail do not close this window
+						
+						return;
+					}
+				}
+				else {
+				
+					dbPortal.finalize();
+					return;
+				}
+				
+				this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+			}			
+		}
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	private boolean createNewDatabaseAndTables() {
+		
+		if (dbPortal.connect() == false) {
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		//FIXME prone to sql injection
+		
+		if (dbPortal.executeParameterizedNonQuery("CREATE DATABASE ? COLLATE utf8_general_ci", mysqlDatabaseNameTextField.getText()) != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}
+		
+		/*if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}*/
+		
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect();
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
+				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
+		
+		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"order_time datetime NOT NULL, order_operator_id int NOT NULL," +
+				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+
+		dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)");
+
+		dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, " +
+				"order_detail_product_quantity int NOT NULL," +
+				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
+				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
+		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
+		
+		return true;
+	}	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/41/d0500513b75d001211398853d386ea7d ---
@@ -3,17 +3,18 @@ import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowEvent;
 
-import javax.swing.JButton;
-
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JPasswordField;
 import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
 import javax.swing.JOptionPane;
 
 import database_management.MySQLdbManager;
 
 public class databaseConnectWindow extends JFrame {
+	private static final long serialVersionUID = 3002L;
 
 	private final JLabel label = new JLabel();
 	private final JLabel label_1 = new JLabel();
@@ -33,7 +34,7 @@ public class databaseConnectWindow extends JFrame {
 	 * @param args
 	 */
 	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
+		EventQueue.invokeLater(new Runnable() { 
 			public void run() {
 				try {
 					databaseConnectWindow frame = new databaseConnectWindow();
@@ -42,7 +43,7 @@ public class databaseConnectWindow extends JFrame {
 					e.printStackTrace();
 				}
 			}
-		});
+		});		
 	}
 
 	/**
@@ -51,7 +52,7 @@ public class databaseConnectWindow extends JFrame {
 	public databaseConnectWindow() {
 		super();
 		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		try {
 			jbInit();
 		} catch (Throwable e) {
@@ -115,6 +116,7 @@ public class databaseConnectWindow extends JFrame {
 			connectToDatabaseButton_actionPerformed(e);
 		}
 	}
+
 	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
 		
 		String password = "";
@@ -136,7 +138,7 @@ public class databaseConnectWindow extends JFrame {
 			dbPortal.disconnect(); //just in case
 			
 			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
+				dbPortal.finalize();
 				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
 						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
 				
@@ -152,11 +154,11 @@ public class databaseConnectWindow extends JFrame {
 					if (createNewDatabaseAndTables() == false) { //in case of fail do not close this window
 						
 						return;
-					}					
+					}
 				}
 				else {
 				
-					dbPortal.finallize();
+					dbPortal.finalize();
 					return;
 				}
 				
@@ -171,59 +173,79 @@ public class databaseConnectWindow extends JFrame {
 		
 		if (dbPortal.connect() == false) {
 			
-			JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
 					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
-			dbPortal.finallize();
+			dbPortal.finalize();
 			return false;
 		}
 		
-		if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText()) != 1) {
+		//FIXME prone??? to sql injection maybe??
+		
+		if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
 			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
 			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
-					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);			
-			dbPortal.disconnect();
-			dbPortal.finallize();
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
 			return false;
 		}
 		
-		if (dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
-				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL," + 
-				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)") == 0) {
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
 			
+			dbPortal.setMySqlActiveDatabase("");
 			dbPortal.disconnect();
-			dbPortal.finallize();
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
 			return false;
 		}
 		
-		if (dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
+		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
+				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
+		
+		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
 				"order_time datetime NOT NULL, order_operator_id int NOT NULL," +
-				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)") == 0) {
-			
-			dbPortal.disconnect();
-			dbPortal.finallize();
-			return false;
-		}
+				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)");
 
-		if (dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
-				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)") == 0) {
-			
-			dbPortal.disconnect();
-			dbPortal.finallize();
-			return false;
-		}
+		dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)");
 
-		if (dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
+		dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
 				"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, " +
 				"order_detail_product_quantity int NOT NULL," +
 				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
-				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)") == 0) {
-			
-			dbPortal.disconnect();
-			dbPortal.finallize();
-			return false;
+				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
 		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
 		
 		return true;
-	}
-
+	}	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/42/203efae3ff5c00121f22d5fb8a5d79d9 ---
@@ -1,127 +0,0 @@
-import java.awt.EventQueue;
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-
-import java.sql.ResultSet;
-import database_management.MySQLdbManager;
-import md5_calculator.Md5hashcalc;
-
-public class operatorUserSettingsWindow extends JFrame {
-
-	private final JLabel usernameLabel = new JLabel();
-	private final JLabel passwordLabel = new JLabel();
-	private final JLabel passwordAgainLabel = new JLabel();
-	private final JLabel nameLabel = new JLabel();
-	private final JLabel lastNameLabel = new JLabel();
-	private final JButton updateButton = new JButton();
-	private final JTextField firstNameTextField = new JTextField();
-	private final JTextField lastNameTextField = new JTextField();
-	private final JPasswordField passwordPasswordField = new JPasswordField();
-	private final JPasswordField passwordAgainPasswordField = new JPasswordField();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserSettingsWindow() {
-		super();
-		setBounds(100, 100, 314, 214);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("��������� �� ����������");
-		setName("operatorUserSettings");
-		
-		getContentPane().add(usernameLabel);
-		usernameLabel.setText("����������:");
-		usernameLabel.setBounds(10, 0, 97, 16);
-		
-		getContentPane().add(passwordLabel);
-		passwordLabel.setText("������:");
-		passwordLabel.setBounds(10, 76, 97, 16);
-		
-		getContentPane().add(passwordAgainLabel);
-		passwordAgainLabel.setText("������ ������:");
-		passwordAgainLabel.setBounds(10, 95, 97, 16);
-		
-		getContentPane().add(nameLabel);
-		nameLabel.setText("���:");
-		nameLabel.setBounds(10, 32, 97, 16);
-		
-		getContentPane().add(lastNameLabel);
-		lastNameLabel.setText("�������:");
-		lastNameLabel.setBounds(10, 54, 97, 16);
-		
-		getContentPane().add(updateButton);
-		updateButton.setText("������");
-		updateButton.setBounds(93, 140, 106, 26);
-		
-		getContentPane().add(firstNameTextField);
-		firstNameTextField.setBounds(113, 30, 175, 20);
-		
-		getContentPane().add(lastNameTextField);
-		lastNameTextField.setBounds(113, 52, 175, 20);
-		
-		getContentPane().add(passwordPasswordField);
-		passwordPasswordField.setBounds(113, 74, 175, 20);
-		
-		getContentPane().add(passwordAgainPasswordField);
-		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
-		
-		getCurrentUserData();
-	}
-	
-	private void getCurrentUserData() {
-		
-		if (databaseConnectWindow.dbPortal == null) {
-			return;
-		}
-		if (databaseConnectWindow.dbPortal.isConnected() == false) {
-			return;
-		}
-		if (operatorUserLoginWindow.loggedUserId == -1) {
-			return;
-		}
-		
-		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
-				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
-		
-		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
-			return;
-		}
-		
-		try {
-			
-			
-		}
-		catch (Exception ex) {			
-		}		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/46/008349d2ab5d00121890bdcc27f78f62 ---
@@ -0,0 +1,334 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				//FIXME prone to sql injection
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					/*rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE" + 
+						" operator_username='" + loginUsernameTextField.getText() + "' AND operator_password='" +
+						Md5hashcalc.calculateMD5hash(password) + "'");*/
+					Object[] params = new Object[2];
+					params[0] = loginUsernameTextField.getText();
+					params[1] = Md5hashcalc.calculateMD5hash(password);
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username=? AND operator_password=?", params);
+							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/47/a0f5259eb55c00121e34961e0ace9d22 ---
@@ -1,254 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-		mainWindowStatusPanelSetEnabled(false);
-	}
-	
-	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
-		
-		Component[] comps = mainWindowStatusPanel.getComponents();
-		
-		for (int i = 0; i < comps.length; i++) {
-		
-			comps[i].setEnabled(enable);	
-		}
-		
-		mainWindowStatusPanel.setEnabled(enable);
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	////////////////////////////////////////////////////////////////////////
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				//FIXME mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				//FIXME mainWindowPointer.Operations.setEnabled(false);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
-    			}
-    		}            
-        }
-    };
-    
-    ////////////////////////////////////////////////////////////////////////
-    
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			
-			this.FileConnectToDb.setEnabled(true);
-			this.FileDisconnectFromDb.setEnabled(false);			
-			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
-		}
-	}
-	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
-		
-		operatorUserLogin oul = new operatorUserLogin();
-		oul.setVisible(true);
-//		oul.addWindowListener(l)
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/49/40fed919a55d00121890bdcc27f78f62 ---
@@ -0,0 +1,391 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.JButton;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.border.EtchedBorder;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+	private static final long serialVersionUID = 3001L;
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/4f/50d63551b65d001211398853d386ea7d ---
@@ -0,0 +1,248 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JButton;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserSettingsWindow extends JFrame {
+	private static final long serialVersionUID = 3004L;
+
+	private final JLabel usernameLabel = new JLabel();
+	private final JLabel passwordLabel = new JLabel();
+	private final JLabel passwordAgainLabel = new JLabel();
+	private final JLabel nameLabel = new JLabel();
+	private final JLabel lastNameLabel = new JLabel();
+	private final JButton updateButton = new JButton();
+	private final JButton deleteOperator = new JButton();
+	private final JTextField firstNameTextField = new JTextField();
+	private final JTextField lastNameTextField = new JTextField();
+	private final JPasswordField passwordPasswordField = new JPasswordField();
+	private final JPasswordField passwordAgainPasswordField = new JPasswordField();	
+	
+	private String currentOperatorPassword = "";
+	public static String operatorFirstNameLastNameCombination = "";	
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserSettingsWindow() {
+		super();
+		setBounds(100, 100, 314, 255);
+		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setResizable(false);
+		setAlwaysOnTop(true);
+		setTitle("��������� �� ����������");
+		setName("operatorUserSettings");
+		
+		getContentPane().add(usernameLabel);
+		usernameLabel.setText("����������:");
+		usernameLabel.setBounds(10, 0, 278, 16);
+		
+		getContentPane().add(passwordLabel);
+		passwordLabel.setText("������:");
+		passwordLabel.setBounds(10, 76, 97, 16);
+		
+		getContentPane().add(passwordAgainLabel);
+		passwordAgainLabel.setText("������ ������:");
+		passwordAgainLabel.setBounds(10, 95, 97, 16);
+		
+		getContentPane().add(nameLabel);
+		nameLabel.setText("���:");
+		nameLabel.setBounds(10, 32, 97, 16);
+		
+		getContentPane().add(lastNameLabel);
+		lastNameLabel.setText("�������:");
+		lastNameLabel.setBounds(10, 54, 97, 16);
+		
+		getContentPane().add(updateButton);
+		updateButton.addActionListener(new UpdateButtonActionListener());
+		updateButton.setText("������");
+		updateButton.setBounds(90, 130, 137, 26);
+		
+		getContentPane().add(firstNameTextField);
+		firstNameTextField.setBounds(113, 30, 175, 20);
+		
+		getContentPane().add(lastNameTextField);
+		lastNameTextField.setBounds(113, 52, 175, 20);
+		
+		getContentPane().add(passwordPasswordField);
+		passwordPasswordField.setBounds(113, 74, 175, 20);
+		
+		getContentPane().add(passwordAgainPasswordField);
+		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
+		
+		getCurrentUserData();
+		
+		getContentPane().add(deleteOperator);
+		deleteOperator.addActionListener(new DeleteOperatorActionListener());
+		deleteOperator.setText("������ ��������");
+		deleteOperator.setBounds(90, 189, 137, 26);
+	}
+	
+	private void getCurrentUserData() {
+		
+		if (databaseConnectWindow.dbPortal == null) {
+			return;
+		}
+		if (databaseConnectWindow.dbPortal.isConnected() == false) {
+			return;
+		}
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
+				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
+		
+		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
+			return;
+		}
+		
+		try {
+			
+			usernameLabel.setText("����������: " + rs.getString(1));
+			currentOperatorPassword = rs.getString(2);
+			firstNameTextField.setText(rs.getString(3));
+			lastNameTextField.setText(rs.getString(4));
+		}
+		catch (Exception ex) {			
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+	}
+	
+	private class UpdateButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			updateButton_actionPerformed(e);
+		}
+	}
+	private class DeleteOperatorActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			deleteOperator_actionPerformed(e);
+		}
+	}
+	protected void updateButton_actionPerformed(ActionEvent e) {
+		
+		char[] pass = passwordPasswordField.getPassword();
+		String password = "";
+		
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		char[] pass2 = passwordAgainPasswordField.getPassword();
+		String password2 = "";
+		
+		for (int j = 0; j < pass2.length; j++) {
+			
+			password2 += pass2[j];
+		}
+		
+		if (password.compareTo(password2) != 0) {
+			
+			JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (password.length() > 3) { //password update will be performed too
+			
+			try {
+				
+				password = Md5hashcalc.calculateMD5hash(password);
+				currentOperatorPassword = password;
+			}
+			catch (Exception ex) {
+				
+				JOptionPane.showMessageDialog(this, "������� � ���������� �� ���� �� �������� ����\n�� ����� �������� ������ �������� � ������������!", "������� ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			}			
+		}
+		else {
+			if (password.length() > 0) {
+				
+				JOptionPane.showMessageDialog(this, "�������� ������ �� � ���� 4 �������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		
+		if ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {
+			
+			JOptionPane.showMessageDialog(this, "��������� ������ ��� ��� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (databaseConnectWindow.dbPortal.executeParameterizedNonQuery("UPDATE operators SET operator_password=? " +
+				"operator_first_name=? operator_last_name=? WHERE operator_id=?", currentOperatorPassword, 
+				firstNameTextField.getText(), lastNameTextField.getText(), operatorUserLoginWindow.loggedUserId) != 1) {
+		
+			JOptionPane.showMessageDialog(this, "������ ��� ���������� �� �������!" + databaseConnectWindow.dbPortal.getLastError(), "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+		operatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	protected void deleteOperator_actionPerformed(ActionEvent e) {
+		
+		//we can not delete not existing operator
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		if (JOptionPane.showConfirmDialog(this, "����������� �� ��������� �� �������� �� ������ �����\n" + 
+				"� ������ ��������, ����� ��� � ��������.\n\n\t���������?", "���������� ��������� �� ��������", 
+				JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+			
+			if (databaseConnectWindow.dbPortal.executeNonQuery("DELETE FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+
+				JOptionPane.showMessageDialog(this, "����������� � ���������!", "��������� ��������� �� ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+			
+			operatorUserLoginWindow.loggedUserId = -1;
+			this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+		}
+		
+		return;
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/4f/f0d96297ff5c00121f22d5fb8a5d79d9 ---
@@ -1,127 +0,0 @@
-import java.awt.EventQueue;
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-
-import java.sql.ResultSet;
-import database_management.MySQLdbManager;
-import md5_calculator.Md5hashcalc;
-
-public class operatorUserSettingsWindow extends JFrame {
-
-	private final JLabel usernameLabel = new JLabel();
-	private final JLabel passwordLabel = new JLabel();
-	private final JLabel passwordAgainLabel = new JLabel();
-	private final JLabel nameLabel = new JLabel();
-	private final JLabel lastNameLabel = new JLabel();
-	private final JButton updateButton = new JButton();
-	private final JTextField firstNameTextField = new JTextField();
-	private final JTextField lastNameTextField = new JTextField();
-	private final JPasswordField passwordPasswordField = new JPasswordField();
-	private final JPasswordField passwordAgainPasswordField = new JPasswordField();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserSettingsWindow() {
-		super();
-		setBounds(100, 100, 314, 214);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("��������� �� ����������");
-		setName("operatorUserSettings");
-		
-		getContentPane().add(usernameLabel);
-		usernameLabel.setText("����������:");
-		usernameLabel.setBounds(10, 0, 97, 16);
-		
-		getContentPane().add(passwordLabel);
-		passwordLabel.setText("������:");
-		passwordLabel.setBounds(10, 76, 97, 16);
-		
-		getContentPane().add(passwordAgainLabel);
-		passwordAgainLabel.setText("������ ������:");
-		passwordAgainLabel.setBounds(10, 95, 97, 16);
-		
-		getContentPane().add(nameLabel);
-		nameLabel.setText("���:");
-		nameLabel.setBounds(10, 32, 97, 16);
-		
-		getContentPane().add(lastNameLabel);
-		lastNameLabel.setText("�������:");
-		lastNameLabel.setBounds(10, 54, 97, 16);
-		
-		getContentPane().add(updateButton);
-		updateButton.setText("������");
-		updateButton.setBounds(93, 140, 106, 26);
-		
-		getContentPane().add(firstNameTextField);
-		firstNameTextField.setBounds(113, 30, 175, 20);
-		
-		getContentPane().add(lastNameTextField);
-		lastNameTextField.setBounds(113, 52, 175, 20);
-		
-		getContentPane().add(passwordPasswordField);
-		passwordPasswordField.setBounds(113, 74, 175, 20);
-		
-		getContentPane().add(passwordAgainPasswordField);
-		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
-		
-		getCurrentUserData();
-	}
-	
-	private void getCurrentUserData() {
-		
-		if (databaseConnectWindow.dbPortal == null) {
-			return;
-		}
-		if (databaseConnectWindow.dbPortal.isConnected() == false) {
-			return;
-		}
-		if (operatorUserLoginWindow.loggedUserId == -1) {
-			return;
-		}
-		
-		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
-				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
-		
-		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
-			return;
-		}
-		
-		try {
-			
-		}
-		catch (Exception ex) {
-			
-		}		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/54/50455296a45d00121890bdcc27f78f62 ---
@@ -0,0 +1,392 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.JButton;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.border.EtchedBorder;
+import org.jdesktop.layout.GroupLayout;
+import org.jdesktop.layout.LayoutStyle;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/57/200bcdeeb45c00121e34961e0ace9d22 ---
@@ -1,65 +0,0 @@
-import java.awt.EventQueue;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.WindowConstants;
-import javax.swing.border.EtchedBorder;
-import javax.swing.border.TitledBorder;
-
-
-public class operatorUserLogin extends JFrame {
-
-	private final JPanel groupLoginPanel = new JPanel();
-	private final JPanel groupCreateNewUserPanel = new JPanel();
-	
-	public static int loggedUserId = -1;
-	
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserLogin frame = new operatorUserLogin();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserLogin() {
-		super();
-		setBounds(100, 100, 518, 269);
-		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("���� �� ��������");
-		setName("operatorLogin");
-		setResizable(false);
-		setAlwaysOnTop(true);
-		
-		getContentPane().add(groupLoginPanel);
-		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
-		groupLoginPanel.setBounds(10, 10, 243, 213);
-		
-		getContentPane().add(groupCreateNewUserPanel);
-		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
-		groupCreateNewUserPanel.setBounds(263, 10, 243, 213);
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/57/900cbfa3a55d00121890bdcc27f78f62 ---
@@ -0,0 +1,571 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/6/f02d9590ac5d00121890bdcc27f78f62 ---
@@ -0,0 +1,572 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery(query);
+			
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/61/2068ed71a45d00121890bdcc27f78f62 ---
@@ -0,0 +1,36 @@
+/*
+ * MD5 hash calculator wrapper
+ * ver.-1.00
+ * (C) 12.01.2013 zhgzhg
+ */
+
+package md5_calculator;
+
+import java.security.MessageDigest;
+import javax.crypto.*;
+
+public class Md5hashcalc {
+	
+	public static String calculateMD5hash(String word) throws Exception {
+		
+		MessageDigest md5;
+		String result = "D41D8CD98F00B204E9800998ECF8427E"; //empty string
+		
+		md5 = MessageDigest.getInstance("MD5");
+		md5.update(word.getBytes(), 0, word.getBytes().length);
+		
+		byte [] wordBytesHash = new byte[16];
+		wordBytesHash = md5.digest();
+		
+		if (wordBytesHash.length != 0) {
+			result = "";
+		
+			for (int i = 0; i < 16; i++) {
+				
+				result += Integer.toString((wordBytesHash[i] & 0xff) + 0x100, 16).substring(1);
+			}
+		}
+		
+		return result;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/63/f0911911ad5d00121890bdcc27f78f62 ---
@@ -0,0 +1,334 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				//FIXME prone to sql injection
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					/*rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE" + 
+						" operator_username='" + loginUsernameTextField.getText() + "' AND operator_password='" +
+						Md5hashcalc.calculateMD5hash(password) + "'");*/
+					Object[] params = new Object[2];
+					params[0] = loginUsernameTextField.getText();
+					params[1] = Md5hashcalc.calculateMD5hash(password);
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?", params);
+							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/69/20e7fe1cb45d001211398853d386ea7d ---
@@ -0,0 +1,324 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?", 
+							loginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					ResultSet rs = databaseConnectWindow.dbPortal.executeParameterizedQuery(
+							"SELECT COUNT(*) FROM operators WHERE operator_username=?",	newUsernameTextField.getText());
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/6d/500d2f6eb45d001211398853d386ea7d ---
@@ -0,0 +1,251 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JButton;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserSettingsWindow extends JFrame {
+	private static final long serialVersionUID = 3004L;
+
+	private final JLabel usernameLabel = new JLabel();
+	private final JLabel passwordLabel = new JLabel();
+	private final JLabel passwordAgainLabel = new JLabel();
+	private final JLabel nameLabel = new JLabel();
+	private final JLabel lastNameLabel = new JLabel();
+	private final JButton updateButton = new JButton();
+	private final JTextField firstNameTextField = new JTextField();
+	private final JTextField lastNameTextField = new JTextField();
+	private final JPasswordField passwordPasswordField = new JPasswordField();
+	private final JPasswordField passwordAgainPasswordField = new JPasswordField();
+	
+	private String currentOperatorPassword = "";
+	public static String operatorFirstNameLastNameCombination = "";
+	
+	private final JButton deleteOperator = new JButton();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserSettingsWindow() {
+		super();
+		setBounds(100, 100, 314, 255);
+		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setResizable(false);
+		setAlwaysOnTop(true);
+		setTitle("��������� �� ����������");
+		setName("operatorUserSettings");
+		
+		getContentPane().add(usernameLabel);
+		usernameLabel.setText("����������:");
+		usernameLabel.setBounds(10, 0, 278, 16);
+		
+		getContentPane().add(passwordLabel);
+		passwordLabel.setText("������:");
+		passwordLabel.setBounds(10, 76, 97, 16);
+		
+		getContentPane().add(passwordAgainLabel);
+		passwordAgainLabel.setText("������ ������:");
+		passwordAgainLabel.setBounds(10, 95, 97, 16);
+		
+		getContentPane().add(nameLabel);
+		nameLabel.setText("���:");
+		nameLabel.setBounds(10, 32, 97, 16);
+		
+		getContentPane().add(lastNameLabel);
+		lastNameLabel.setText("�������:");
+		lastNameLabel.setBounds(10, 54, 97, 16);
+		
+		getContentPane().add(updateButton);
+		updateButton.addActionListener(new UpdateButtonActionListener());
+		updateButton.setText("������");
+		updateButton.setBounds(90, 130, 137, 26);
+		
+		getContentPane().add(firstNameTextField);
+		firstNameTextField.setBounds(113, 30, 175, 20);
+		
+		getContentPane().add(lastNameTextField);
+		lastNameTextField.setBounds(113, 52, 175, 20);
+		
+		getContentPane().add(passwordPasswordField);
+		passwordPasswordField.setBounds(113, 74, 175, 20);
+		
+		getContentPane().add(passwordAgainPasswordField);
+		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
+		
+		getCurrentUserData();
+		
+		getContentPane().add(deleteOperator);
+		deleteOperator.addActionListener(new DeleteOperatorActionListener());
+		deleteOperator.setText("������ ��������");
+		deleteOperator.setBounds(90, 189, 137, 26);
+	}
+	
+	private void getCurrentUserData() {
+		
+		if (databaseConnectWindow.dbPortal == null) {
+			return;
+		}
+		if (databaseConnectWindow.dbPortal.isConnected() == false) {
+			return;
+		}
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
+				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
+		
+		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
+			return;
+		}
+		
+		try {
+			
+			usernameLabel.setText("����������: " + rs.getString(1));
+			currentOperatorPassword = rs.getString(2);
+			firstNameTextField.setText(rs.getString(3));
+			lastNameTextField.setText(rs.getString(4));
+		}
+		catch (Exception ex) {			
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+	}
+	
+	private class UpdateButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			updateButton_actionPerformed(e);
+		}
+	}
+	private class DeleteOperatorActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			deleteOperator_actionPerformed(e);
+		}
+	}
+	protected void updateButton_actionPerformed(ActionEvent e) {
+		
+		char[] pass = passwordPasswordField.getPassword();
+		String password = "";
+		
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		char[] pass2 = passwordAgainPasswordField.getPassword();
+		String password2 = "";
+		
+		for (int j = 0; j < pass2.length; j++) {
+			
+			password2 += pass2[j];
+		}
+		
+		if (password.compareTo(password2) != 0) {
+			
+			JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (password.length() > 3) { //password update will be performed too
+			
+			try {
+				
+				password = Md5hashcalc.calculateMD5hash(password);
+				currentOperatorPassword = password;
+			}
+			catch (Exception ex) {
+				
+				JOptionPane.showMessageDialog(this, "������� � ���������� �� ���� �� �������� ����\n�� ����� �������� ������ �������� � ������������!", "������� ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			}			
+		}
+		else {
+			if (password.length() > 0) {
+				
+				JOptionPane.showMessageDialog(this, "�������� ������ �� � ���� 4 �������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		
+		if ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {
+			
+			JOptionPane.showMessageDialog(this, "��������� ������ ��� ��� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		//FIXME prone to sql injection
+		if (databaseConnectWindow.dbPortal.executeNonQuery("UPDATE operators SET operator_password='" + currentOperatorPassword +
+				"', operator_first_name='" + firstNameTextField.getText() + "', operator_last_name='" + 
+				lastNameTextField.getText() + "' WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+		
+		//if (databaseConnectWindow.dbPortal.getLastError() != null) {
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ���������� �� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+		operatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	protected void deleteOperator_actionPerformed(ActionEvent e) {
+		
+		//we can not delete not existing operator
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		if (JOptionPane.showConfirmDialog(this, "����������� �� ��������� �� �������� �� ������ �����\n" + 
+				"� ������ ��������, ����� ��� � ��������.\n\n\t���������?", "���������� ��������� �� ��������", 
+				JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+			
+			if (databaseConnectWindow.dbPortal.executeNonQuery("DELETE FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+
+				JOptionPane.showMessageDialog(this, "����������� � ���������!", "��������� ��������� �� ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+			
+			operatorUserLoginWindow.loggedUserId = -1;
+			this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+		}
+		
+		return;
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/6d/c08119b3a05d00121890bdcc27f78f62 ---
@@ -0,0 +1,455 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address ot HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/70/d0bf4040fe5c00121f22d5fb8a5d79d9 ---
@@ -1,95 +0,0 @@
-import java.awt.EventQueue;
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-
-
-public class operatorUserSettingsWindow extends JFrame {
-
-	private final JLabel usernameLabel = new JLabel();
-	private final JLabel passwordLabel = new JLabel();
-	private final JLabel passwordAgainLabel = new JLabel();
-	private final JLabel nameLabel = new JLabel();
-	private final JLabel lastNameLabel = new JLabel();
-	private final JButton updateButton = new JButton();
-	private final JTextField textField = new JTextField();
-	private final JTextField textField_1 = new JTextField();
-	private final JPasswordField passwordField = new JPasswordField();
-	private final JPasswordField passwordField_1 = new JPasswordField();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserSettingsWindow() {
-		super();
-		setBounds(100, 100, 314, 214);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("��������� �� ����������");
-		setName("operatorUserSettings");
-		
-		getContentPane().add(usernameLabel);
-		usernameLabel.setText("����������:");
-		usernameLabel.setBounds(10, 0, 97, 16);
-		
-		getContentPane().add(passwordLabel);
-		passwordLabel.setText("������:");
-		passwordLabel.setBounds(10, 76, 97, 16);
-		
-		getContentPane().add(passwordAgainLabel);
-		passwordAgainLabel.setText("������ ������:");
-		passwordAgainLabel.setBounds(10, 95, 97, 16);
-		
-		getContentPane().add(nameLabel);
-		nameLabel.setText("���:");
-		nameLabel.setBounds(10, 32, 97, 16);
-		
-		getContentPane().add(lastNameLabel);
-		lastNameLabel.setText("�������:");
-		lastNameLabel.setBounds(10, 54, 97, 16);
-		
-		getContentPane().add(updateButton);
-		updateButton.setText("������");
-		updateButton.setBounds(93, 140, 106, 26);
-		
-		getContentPane().add(textField);
-		textField.setBounds(113, 30, 175, 20);
-		
-		getContentPane().add(textField_1);
-		textField_1.setBounds(113, 52, 175, 20);
-		
-		getContentPane().add(passwordField);
-		passwordField.setBounds(113, 74, 175, 20);
-		
-		getContentPane().add(passwordField_1);
-		passwordField_1.setBounds(113, 97, 175, 20);
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/7a/d0479e0ea45d00121890bdcc27f78f62 ---
@@ -0,0 +1,400 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.FlowLayout;
+import java.awt.GridLayout;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.BoxLayout;
+import javax.swing.JButton;
+import javax.swing.JComponent;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JSeparator;
+import javax.swing.SpringLayout;
+import javax.swing.border.BevelBorder;
+import javax.swing.border.EtchedBorder;
+import org.jdesktop.layout.GroupLayout;
+import org.jdesktop.layout.LayoutStyle;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+import database_management.MySQLdbManager;
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/7e/f03e2183a45d00121890bdcc27f78f62 ---
@@ -0,0 +1,394 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.JButton;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JSeparator;
+import javax.swing.SpringLayout;
+import javax.swing.border.EtchedBorder;
+import org.jdesktop.layout.GroupLayout;
+import org.jdesktop.layout.LayoutStyle;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/81/e0b4aac9b55c00121e34961e0ace9d22 ---
@@ -1,254 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-		mainWindowStatusPanelSetEnabled(false);
-	}
-	
-	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
-		
-		Component[] comps = mainWindowStatusPanel.getComponents();
-		
-		for (int i = 0; i < comps.length; i++) {
-		
-			comps[i].setEnabled(enable);	
-		}
-		
-		mainWindowStatusPanel.setEnabled(enable);
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	////////////////////////////////////////////////////////////////////////
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				//FIXME mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				//FIXME mainWindowPointer.Operations.setEnabled(false);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
-    			}
-    		}            
-        }
-    };
-    
-    ////////////////////////////////////////////////////////////////////////
-    
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			
-			this.FileConnectToDb.setEnabled(true);
-			this.FileDisconnectFromDb.setEnabled(false);			
-			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
-		}
-	}
-	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
-		
-		operatorUserLoginWindow oul = new operatorUserLoginWindow();
-		oul.setVisible(true);
-//		oul.addWindowListener(l)
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/82/50bb024db35d001211398853d386ea7d ---
@@ -0,0 +1,572 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object... parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute();
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object... parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery();
+			
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/83/c097dbfea45d00121890bdcc27f78f62 ---
@@ -3,12 +3,12 @@ import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowEvent;
 
-import javax.swing.JButton;
-
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JPasswordField;
 import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
 import javax.swing.JOptionPane;
 
 import database_management.MySQLdbManager;
@@ -33,7 +33,7 @@ public class databaseConnectWindow extends JFrame {
 	 * @param args
 	 */
 	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
+		EventQueue.invokeLater(new Runnable() { 
 			public void run() {
 				try {
 					databaseConnectWindow frame = new databaseConnectWindow();
@@ -42,7 +42,7 @@ public class databaseConnectWindow extends JFrame {
 					e.printStackTrace();
 				}
 			}
-		});
+		});		
 	}
 
 	/**
@@ -51,7 +51,7 @@ public class databaseConnectWindow extends JFrame {
 	public databaseConnectWindow() {
 		super();
 		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 		try {
 			jbInit();
 		} catch (Throwable e) {
@@ -115,6 +115,7 @@ public class databaseConnectWindow extends JFrame {
 			connectToDatabaseButton_actionPerformed(e);
 		}
 	}
+
 	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
 		
 		String password = "";
@@ -136,7 +137,7 @@ public class databaseConnectWindow extends JFrame {
 			dbPortal.disconnect(); //just in case
 			
 			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
+				dbPortal.finalize();
 				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
 						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
 				
@@ -152,11 +153,11 @@ public class databaseConnectWindow extends JFrame {
 					if (createNewDatabaseAndTables() == false) { //in case of fail do not close this window
 						
 						return;
-					}					
+					}
 				}
 				else {
 				
-					dbPortal.finallize();
+					dbPortal.finalize();
 					return;
 				}
 				
@@ -169,18 +170,46 @@ public class databaseConnectWindow extends JFrame {
 	
 	private boolean createNewDatabaseAndTables() {
 		
-		dbPortal.setMySqlActiveDatabase("");
-		
 		if (dbPortal.connect() == false) {
 			
-			dbPortal.finallize();
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
 			return false;
 		}
 		
+		//FIXME prone??? to sql injection maybe??
 		
+		if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}
+		
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect();
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
 		
 		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
-				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
 				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
 		
 		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
@@ -196,7 +225,26 @@ public class databaseConnectWindow extends JFrame {
 				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
 				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
 		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
+		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
+		
 		return true;
-	}
-
+	}	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/8b/20041debb45d001211398853d386ea7d ---
@@ -0,0 +1,251 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JButton;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserSettingsWindow extends JFrame {
+	private static final long serialVersionUID = 3004L;
+
+	private final JLabel usernameLabel = new JLabel();
+	private final JLabel passwordLabel = new JLabel();
+	private final JLabel passwordAgainLabel = new JLabel();
+	private final JLabel nameLabel = new JLabel();
+	private final JLabel lastNameLabel = new JLabel();
+	private final JButton updateButton = new JButton();
+	private final JButton deleteOperator = new JButton();
+	private final JTextField firstNameTextField = new JTextField();
+	private final JTextField lastNameTextField = new JTextField();
+	private final JPasswordField passwordPasswordField = new JPasswordField();
+	private final JPasswordField passwordAgainPasswordField = new JPasswordField();	
+	
+	private String currentOperatorPassword = "";
+	public static String operatorFirstNameLastNameCombination = "";	
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserSettingsWindow() {
+		super();
+		setBounds(100, 100, 314, 255);
+		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setResizable(false);
+		setAlwaysOnTop(true);
+		setTitle("��������� �� ����������");
+		setName("operatorUserSettings");
+		
+		getContentPane().add(usernameLabel);
+		usernameLabel.setText("����������:");
+		usernameLabel.setBounds(10, 0, 278, 16);
+		
+		getContentPane().add(passwordLabel);
+		passwordLabel.setText("������:");
+		passwordLabel.setBounds(10, 76, 97, 16);
+		
+		getContentPane().add(passwordAgainLabel);
+		passwordAgainLabel.setText("������ ������:");
+		passwordAgainLabel.setBounds(10, 95, 97, 16);
+		
+		getContentPane().add(nameLabel);
+		nameLabel.setText("���:");
+		nameLabel.setBounds(10, 32, 97, 16);
+		
+		getContentPane().add(lastNameLabel);
+		lastNameLabel.setText("�������:");
+		lastNameLabel.setBounds(10, 54, 97, 16);
+		
+		getContentPane().add(updateButton);
+		updateButton.addActionListener(new UpdateButtonActionListener());
+		updateButton.setText("������");
+		updateButton.setBounds(90, 130, 137, 26);
+		
+		getContentPane().add(firstNameTextField);
+		firstNameTextField.setBounds(113, 30, 175, 20);
+		
+		getContentPane().add(lastNameTextField);
+		lastNameTextField.setBounds(113, 52, 175, 20);
+		
+		getContentPane().add(passwordPasswordField);
+		passwordPasswordField.setBounds(113, 74, 175, 20);
+		
+		getContentPane().add(passwordAgainPasswordField);
+		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
+		
+		getCurrentUserData();
+		
+		getContentPane().add(deleteOperator);
+		deleteOperator.addActionListener(new DeleteOperatorActionListener());
+		deleteOperator.setText("������ ��������");
+		deleteOperator.setBounds(90, 189, 137, 26);
+	}
+	
+	private void getCurrentUserData() {
+		
+		if (databaseConnectWindow.dbPortal == null) {
+			return;
+		}
+		if (databaseConnectWindow.dbPortal.isConnected() == false) {
+			return;
+		}
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
+				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
+		
+		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
+			return;
+		}
+		
+		try {
+			
+			usernameLabel.setText("����������: " + rs.getString(1));
+			currentOperatorPassword = rs.getString(2);
+			firstNameTextField.setText(rs.getString(3));
+			lastNameTextField.setText(rs.getString(4));
+		}
+		catch (Exception ex) {			
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+	}
+	
+	private class UpdateButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			updateButton_actionPerformed(e);
+		}
+	}
+	private class DeleteOperatorActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			deleteOperator_actionPerformed(e);
+		}
+	}
+	protected void updateButton_actionPerformed(ActionEvent e) {
+		
+		char[] pass = passwordPasswordField.getPassword();
+		String password = "";
+		
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		char[] pass2 = passwordAgainPasswordField.getPassword();
+		String password2 = "";
+		
+		for (int j = 0; j < pass2.length; j++) {
+			
+			password2 += pass2[j];
+		}
+		
+		if (password.compareTo(password2) != 0) {
+			
+			JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (password.length() > 3) { //password update will be performed too
+			
+			try {
+				
+				password = Md5hashcalc.calculateMD5hash(password);
+				currentOperatorPassword = password;
+			}
+			catch (Exception ex) {
+				
+				JOptionPane.showMessageDialog(this, "������� � ���������� �� ���� �� �������� ����\n�� ����� �������� ������ �������� � ������������!", "������� ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			}			
+		}
+		else {
+			if (password.length() > 0) {
+				
+				JOptionPane.showMessageDialog(this, "�������� ������ �� � ���� 4 �������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		
+		if ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {
+			
+			JOptionPane.showMessageDialog(this, "��������� ������ ��� ��� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		//FIXME prone to sql injection
+		if (databaseConnectWindow.dbPortal.executeNonQuery("UPDATE operators SET operator_password='" + currentOperatorPassword +
+				"', operator_first_name='" + firstNameTextField.getText() + "', operator_last_name='" + 
+				lastNameTextField.getText() + "' WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+		
+		//if (databaseConnectWindow.dbPortal.getLastError() != null) {
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ���������� �� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+		operatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	protected void deleteOperator_actionPerformed(ActionEvent e) {
+		
+		//we can not delete not existing operator
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		if (JOptionPane.showConfirmDialog(this, "����������� �� ��������� �� �������� �� ������ �����\n" + 
+				"� ������ ��������, ����� ��� � ��������.\n\n\t���������?", "���������� ��������� �� ��������", 
+				JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+			
+			if (databaseConnectWindow.dbPortal.executeNonQuery("DELETE FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+
+				JOptionPane.showMessageDialog(this, "����������� � ���������!", "��������� ��������� �� ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+			
+			operatorUserLoginWindow.loggedUserId = -1;
+			this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+		}
+		
+		return;
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9a/40de69c5b25c00121e34961e0ace9d22 ---
@@ -1,241 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-		mainWindowStatusPanelSetEnabled(false);
-	}
-	
-	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
-		
-		Component[] comps = mainWindowStatusPanel.getComponents();
-		
-		for (int i = 0; i < comps.length; i++) {
-		
-			comps[i].setEnabled(enable);	
-		}
-		
-		mainWindowStatusPanel.setEnabled(enable);
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	////////////////////////////////////////////////////////////////////////
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				//FIXME mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				//FIXME mainWindowPointer.Operations.setEnabled(false);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
-    			}
-    		}            
-        }
-    };
-    
-    ////////////////////////////////////////////////////////////////////////
-    
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			
-			this.FileConnectToDb.setEnabled(true);
-			this.FileDisconnectFromDb.setEnabled(false);			
-			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
-		}
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9a/f086c342aa5d00121890bdcc27f78f62 ---
@@ -0,0 +1,327 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				//FIXME prone to sql injection
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE" + 
+						" operator_username='" + loginUsernameTextField.getText() + "' AND operator_password='" +
+						Md5hashcalc.calculateMD5hash(password) + "'");
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9c/80cc88dcb65d001211398853d386ea7d ---
@@ -0,0 +1,248 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JButton;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserSettingsWindow extends JFrame {
+	private static final long serialVersionUID = 3004L;
+
+	private final JLabel usernameLabel = new JLabel();
+	private final JLabel passwordLabel = new JLabel();
+	private final JLabel passwordAgainLabel = new JLabel();
+	private final JLabel nameLabel = new JLabel();
+	private final JLabel lastNameLabel = new JLabel();
+	private final JButton updateButton = new JButton();
+	private final JButton deleteOperator = new JButton();
+	private final JTextField firstNameTextField = new JTextField();
+	private final JTextField lastNameTextField = new JTextField();
+	private final JPasswordField passwordPasswordField = new JPasswordField();
+	private final JPasswordField passwordAgainPasswordField = new JPasswordField();	
+	
+	private String currentOperatorPassword = "";
+	public static String operatorFirstNameLastNameCombination = "";	
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserSettingsWindow() {
+		super();
+		setBounds(100, 100, 314, 255);
+		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setResizable(false);
+		setAlwaysOnTop(true);
+		setTitle("��������� �� ����������");
+		setName("operatorUserSettings");
+		
+		getContentPane().add(usernameLabel);
+		usernameLabel.setText("����������:");
+		usernameLabel.setBounds(10, 0, 278, 16);
+		
+		getContentPane().add(passwordLabel);
+		passwordLabel.setText("������:");
+		passwordLabel.setBounds(10, 76, 97, 16);
+		
+		getContentPane().add(passwordAgainLabel);
+		passwordAgainLabel.setText("������ ������:");
+		passwordAgainLabel.setBounds(10, 95, 97, 16);
+		
+		getContentPane().add(nameLabel);
+		nameLabel.setText("���:");
+		nameLabel.setBounds(10, 32, 97, 16);
+		
+		getContentPane().add(lastNameLabel);
+		lastNameLabel.setText("�������:");
+		lastNameLabel.setBounds(10, 54, 97, 16);
+		
+		getContentPane().add(updateButton);
+		updateButton.addActionListener(new UpdateButtonActionListener());
+		updateButton.setText("������");
+		updateButton.setBounds(90, 130, 137, 26);
+		
+		getContentPane().add(firstNameTextField);
+		firstNameTextField.setBounds(113, 30, 175, 20);
+		
+		getContentPane().add(lastNameTextField);
+		lastNameTextField.setBounds(113, 52, 175, 20);
+		
+		getContentPane().add(passwordPasswordField);
+		passwordPasswordField.setBounds(113, 74, 175, 20);
+		
+		getContentPane().add(passwordAgainPasswordField);
+		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
+		
+		getCurrentUserData();
+		
+		getContentPane().add(deleteOperator);
+		deleteOperator.addActionListener(new DeleteOperatorActionListener());
+		deleteOperator.setText("������ ��������");
+		deleteOperator.setBounds(90, 189, 137, 26);
+	}
+	
+	private void getCurrentUserData() {
+		
+		if (databaseConnectWindow.dbPortal == null) {
+			return;
+		}
+		if (databaseConnectWindow.dbPortal.isConnected() == false) {
+			return;
+		}
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
+				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
+		
+		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
+			return;
+		}
+		
+		try {
+			
+			usernameLabel.setText("����������: " + rs.getString(1));
+			currentOperatorPassword = rs.getString(2);
+			firstNameTextField.setText(rs.getString(3));
+			lastNameTextField.setText(rs.getString(4));
+		}
+		catch (Exception ex) {			
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+	}
+	
+	private class UpdateButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			updateButton_actionPerformed(e);
+		}
+	}
+	private class DeleteOperatorActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			deleteOperator_actionPerformed(e);
+		}
+	}
+	protected void updateButton_actionPerformed(ActionEvent e) {
+		
+		char[] pass = passwordPasswordField.getPassword();
+		String password = "";
+		
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		char[] pass2 = passwordAgainPasswordField.getPassword();
+		String password2 = "";
+		
+		for (int j = 0; j < pass2.length; j++) {
+			
+			password2 += pass2[j];
+		}
+		
+		if (password.compareTo(password2) != 0) {
+			
+			JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (password.length() > 3) { //password update will be performed too
+			
+			try {
+				
+				password = Md5hashcalc.calculateMD5hash(password);
+				currentOperatorPassword = password;
+			}
+			catch (Exception ex) {
+				
+				JOptionPane.showMessageDialog(this, "������� � ���������� �� ���� �� �������� ����\n�� ����� �������� ������ �������� � ������������!", "������� ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+			}			
+		}
+		else {
+			if (password.length() > 0) {
+				
+				JOptionPane.showMessageDialog(this, "�������� ������ �� � ���� 4 �������!", "������ ��� ������� �� ������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		
+		if ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {
+			
+			JOptionPane.showMessageDialog(this, "��������� ������ ��� ��� �������!", "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		if (databaseConnectWindow.dbPortal.executeParameterizedNonQuery("UPDATE operators SET operator_password=?, " +
+				"operator_first_name=?, operator_last_name=? WHERE operator_id=?", currentOperatorPassword, 
+				firstNameTextField.getText(), lastNameTextField.getText(), new Integer(operatorUserLoginWindow.loggedUserId)) != 1) {
+		
+			JOptionPane.showMessageDialog(this, "������ ��� ���������� �� �������!" + databaseConnectWindow.dbPortal.getLastError(), "������ ��� ������������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}
+		
+		operatorFirstNameLastNameCombination = firstNameTextField.getText() + " " + lastNameTextField.getText();
+		operatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	protected void deleteOperator_actionPerformed(ActionEvent e) {
+		
+		//we can not delete not existing operator
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		if (JOptionPane.showConfirmDialog(this, "����������� �� ��������� �� �������� �� ������ �����\n" + 
+				"� ������ ��������, ����� ��� � ��������.\n\n\t���������?", "���������� ��������� �� ��������", 
+				JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+			
+			if (databaseConnectWindow.dbPortal.executeNonQuery("DELETE FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId) != 1) {
+
+				JOptionPane.showMessageDialog(this, "����������� � ���������!", "��������� ��������� �� ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+			
+			operatorUserLoginWindow.loggedUserId = -1;
+			this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+		}
+		
+		return;
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9c/f096a4cba35d00121890bdcc27f78f62 ---
@@ -0,0 +1,263 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.WindowConstants;
+import javax.swing.JButton;
+import javax.swing.JOptionPane;
+
+import database_management.MySQLdbManager;
+import md5_calculator.Md5hashcalc;
+
+public class databaseConnectWindow extends JFrame {
+
+	private final JLabel label = new JLabel();
+	private final JLabel label_1 = new JLabel();
+	private final JLabel label_2 = new JLabel();
+	private final JLabel label_3 = new JLabel();
+	private final JLabel label_4 = new JLabel();
+	private final JButton connectToDatabaseButton = new JButton();
+	private final JTextField mysqlServerAddressTextField = new JTextField();
+	private final JTextField mysqlPortTextField = new JTextField();
+	private final JTextField mysqlDatabaseNameTextField = new JTextField();
+	private final JTextField mysqlUsernameTextField = new JTextField();
+	private final JPasswordField mysqlPasswordPasswordField = new JPasswordField();
+	public static MySQLdbManager dbPortal = null;
+	
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() { 
+			public void run() {
+				try {
+					databaseConnectWindow frame = new databaseConnectWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});		
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public databaseConnectWindow() {
+		super();
+		setBounds(100, 100, 384, 203);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setAlwaysOnTop(true);
+		setResizable(false);
+		setTitle("��������� � ������ �����");
+		setName("databaseConnectWindowFrame");
+		
+		getContentPane().add(label);
+		label.setText("����� �� MySQL �������:");
+		label.setBounds(10, 10, 165, 16);
+		
+		getContentPane().add(label_1);
+		label_1.setText("��� �� ������ �����:");
+		label_1.setBounds(10, 54, 165, 16);
+		
+		getContentPane().add(label_2);
+		label_2.setText("����:");
+		label_2.setBounds(10, 32, 156, 16);
+		
+		getContentPane().add(label_3);
+		label_3.setText("������������� ���:");
+		label_3.setBounds(10, 76, 165, 16);
+		
+		getContentPane().add(label_4);
+		label_4.setText("������:");
+		label_4.setBounds(10, 98, 156, 16);
+		
+		getContentPane().add(connectToDatabaseButton);
+		connectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());
+		connectToDatabaseButton.setText("������ ��!");
+		connectToDatabaseButton.setBounds(132, 135, 106, 26);
+		
+		getContentPane().add(mysqlServerAddressTextField);
+		mysqlServerAddressTextField.setText("127.0.0.1");
+		mysqlServerAddressTextField.setBounds(181, 8, 185, 20);
+		
+		getContentPane().add(mysqlPortTextField);
+		mysqlPortTextField.setText("3306");
+		mysqlPortTextField.setBounds(181, 30, 91, 20);
+		
+		getContentPane().add(mysqlDatabaseNameTextField);
+		mysqlDatabaseNameTextField.setText("shop");
+		mysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);
+		
+		getContentPane().add(mysqlUsernameTextField);
+		mysqlUsernameTextField.setText("root");
+		mysqlUsernameTextField.setBounds(181, 76, 180, 18);
+		
+		getContentPane().add(mysqlPasswordPasswordField);
+		mysqlPasswordPasswordField.setBounds(181, 96, 181, 20);
+	}
+	private class ConnectToDatabaseButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			connectToDatabaseButton_actionPerformed(e);
+		}
+	}
+
+	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
+		
+		String password = "";
+		
+		char [] pass = mysqlPasswordPasswordField.getPassword();
+		for (int i = 0; i < pass.length; i++) {
+			
+			password += pass[i];
+		}
+		
+		dbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),
+				mysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),
+				mysqlUsernameTextField.getText(), password);		
+		
+		
+		if (dbPortal.connect() == false) { //now check for database name that is not existing
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect(); //just in case
+			
+			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
+				dbPortal.finalize();
+				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
+						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
+				
+				return;
+			}
+			else { //will have to create new database
+				
+				dbPortal.disconnect();
+				
+				if (JOptionPane.showConfirmDialog(this, "�� ���� ��������� ���� ���� ����� � ���: " + mysqlDatabaseNameTextField.getText() +
+						".\n������� �� ���?", "��������� �� ���� ���� �����?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
+					
+					if (createNewDatabaseAndTables() == false) { //in case of fail do not close this window
+						
+						return;
+					}
+				}
+				else {
+				
+					dbPortal.finalize();
+					return;
+				}
+				
+				this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+			}			
+		}
+		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+	}
+	
+	private boolean createNewDatabaseAndTables() {
+		
+		if (dbPortal.connect() == false) {
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (1)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		//FIXME prone to sql injection
+		
+		Object[] dbName = new String[1];
+		dbName[0] = mysqlDatabaseNameTextField.getText(); 
+		
+		if (dbPortal.executeParameterizedNonQuery("CREATE DATABASE ? COLLATE utf8_general_ci", dbName) != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}
+		
+		/*if (dbPortal.executeNonQuery("CREATE DATABASE " + mysqlDatabaseNameTextField.getText() + " COLLATE utf8_general_ci") != 1) {
+			
+			dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+			dbPortal.finalize();
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������� ���� �����!\n��������� ����� �� ����� �� ����!", 
+					"�� ���� �� �� ������� ��!", JOptionPane.ERROR_MESSAGE);
+			return false;
+		}*/
+		
+		dbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());
+		dbPortal.disconnect();
+		
+		if (dbPortal.connect() == false) { //false positive for database creation
+			
+			dbPortal.setMySqlActiveDatabase("");
+			dbPortal.disconnect();
+			
+			if (dbPortal.connect()) {
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+			}			
+			
+			JOptionPane.showMessageDialog(this, "������ ��� ����������� (2)! ��������� ����������� � ���� MySQL ������ � ���������!", 
+					"������� � ��������!", JOptionPane.ERROR_MESSAGE);			
+			dbPortal.finalize();
+			return false;
+		}
+		
+		dbPortal.executeNonQuery("CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL," + 
+				"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)");
+		
+		dbPortal.executeNonQuery("CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"order_time datetime NOT NULL, order_operator_id int NOT NULL," +
+				"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+
+		dbPortal.executeNonQuery("CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,	product_price decimal(10,2) NOT NULL)");
+
+		dbPortal.executeNonQuery("CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key," + 
+				"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, " +
+				"order_detail_product_quantity int NOT NULL," +
+				"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE," +
+				"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)");
+		
+		/* for testing only; not needed any more
+		try {
+			if (dbPortal.executeNonQuery("INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)" + 
+					" VALUES ('operator1', '" + Md5hashcalc.calculateMD5hash("operator1")  + "', '��������1', '�������� ������')") != 1) {
+				
+				dbPortal.executeNonQuery("DROP DATABASE " + mysqlDatabaseNameTextField.getText());
+				dbPortal.disconnect();
+				dbPortal.finallize();
+				
+				JOptionPane.showMessageDialog(this, "������ ��� �������� �� ����� � ������ �����!\n��������� ������� �� ����������� � ��������.", "������ ��� �������� �� ����� � ��", JOptionPane.ERROR_MESSAGE);
+				
+				return false;
+			}
+		}
+		catch (Exception ex) {
+			JOptionPane.showMessageDialog(this, "�� ���� �� �� ������ ��������� ��������� MD5!", "������� ������", 
+					JOptionPane.ERROR_MESSAGE);
+			System.exit(-1);
+		}*/
+		
+		return true;
+	}	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9f/808cfa98a55d00121890bdcc27f78f62 ---
@@ -0,0 +1,571 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/a1/a03b43f5a45d00121890bdcc27f78f62 ---
@@ -0,0 +1,390 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.JButton;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.border.EtchedBorder;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/a5/90b2a96db55c00121e34961e0ace9d22 ---
@@ -1,250 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-		mainWindowStatusPanelSetEnabled(false);
-	}
-	
-	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
-		
-		Component[] comps = mainWindowStatusPanel.getComponents();
-		
-		for (int i = 0; i < comps.length; i++) {
-		
-			comps[i].setEnabled(enable);	
-		}
-		
-		mainWindowStatusPanel.setEnabled(enable);
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	////////////////////////////////////////////////////////////////////////
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				//FIXME mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				//FIXME mainWindowPointer.Operations.setEnabled(false);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
-    			}
-    		}            
-        }
-    };
-    
-    ////////////////////////////////////////////////////////////////////////
-    
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			
-			this.FileConnectToDb.setEnabled(true);
-			this.FileDisconnectFromDb.setEnabled(false);			
-			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
-		}
-	}
-	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/a8/40b444ccb35d001211398853d386ea7d ---
@@ -0,0 +1,325 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?", 
+							loginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/b8/60ea091bb35d001211398853d386ea7d ---
@@ -0,0 +1,572 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object... parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object... parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i + 1, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery(query);
+			
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/b9/8001c7c3a35c00121e34961e0ace9d22 ---
@@ -1,218 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				mainWindowPointer.Operations.setEnabled(false);
-    			}
-    		}            
-        }
-    };
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			this.Operations.setEnabled(false);
-			this.FileDisconnectFromDb.setEnabled(false);
-			this.FileConnectToDb.setEnabled(true);
-		}
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c2/9020359db35d001211398853d386ea7d ---
@@ -0,0 +1,332 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				//FIXME prone to sql injection
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					/*rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE" + 
+						" operator_username='" + loginUsernameTextField.getText() + "' AND operator_password='" +
+						Md5hashcalc.calculateMD5hash(password) + "'");*/
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?", 
+							loginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));
+							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c4/e0b4ec30a35c00121e34961e0ace9d22 ---
@@ -1,194 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(0, 20));
-		mainWindowStatusPanel.setBounds(0, 357, 666, 40);		
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				mainWindowPointer.Operations.setEnabled(false);
-    			}
-    		}            
-        }
-    };
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			this.Operations.setEnabled(false);
-			this.FileDisconnectFromDb.setEnabled(false);
-			this.FileConnectToDb.setEnabled(true);
-		}
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c5/a02137b1aa5d00121890bdcc27f78f62 ---
@@ -0,0 +1,334 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				//FIXME prone to sql injection
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					/*rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE" + 
+						" operator_username='" + loginUsernameTextField.getText() + "' AND operator_password='" +
+						Md5hashcalc.calculateMD5hash(password) + "'");*/
+					Object[] params = new String[2];
+					params[0] = loginUsernameTextField.getText();
+					params[1] = Md5hashcalc.calculateMD5hash(password);
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username=? AND operator_password=?", params);
+							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					//FIXME prone to sql injection
+					ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT COUNT(*) FROM operators WHERE operator_username='" +
+							newUsernameTextField.getText() + "'");
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						//FIXME prone to sql injection
+						if (databaseConnectWindow.dbPortal.executeNonQuery("INSERT INTO operators(operator_username, operator_password, " +
+								"operator_first_name, operator_last_name) VALUES('" + newUsernameTextField.getText() + "', '" +
+								encryptedPassword + "', '" + newFirstNameTextField.getText() + "', '" + newLastNameTextField.getText() + "')") != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c8/3006c73e005d00121f22d5fb8a5d79d9 ---
@@ -1,133 +0,0 @@
-import java.awt.EventQueue;
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-
-import java.sql.ResultSet;
-import database_management.MySQLdbManager;
-import md5_calculator.Md5hashcalc;
-
-public class operatorUserSettingsWindow extends JFrame {
-
-	private final JLabel usernameLabel = new JLabel();
-	private final JLabel passwordLabel = new JLabel();
-	private final JLabel passwordAgainLabel = new JLabel();
-	private final JLabel nameLabel = new JLabel();
-	private final JLabel lastNameLabel = new JLabel();
-	private final JButton updateButton = new JButton();
-	private final JTextField firstNameTextField = new JTextField();
-	private final JTextField lastNameTextField = new JTextField();
-	private final JPasswordField passwordPasswordField = new JPasswordField();
-	private final JPasswordField passwordAgainPasswordField = new JPasswordField();
-	
-	private String currentOperatorPassword;
-	
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					operatorUserSettingsWindow frame = new operatorUserSettingsWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public operatorUserSettingsWindow() {
-		super();
-		setBounds(100, 100, 314, 214);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setTitle("��������� �� ����������");
-		setName("operatorUserSettings");
-		
-		getContentPane().add(usernameLabel);
-		usernameLabel.setText("����������:");
-		usernameLabel.setBounds(10, 0, 97, 16);
-		
-		getContentPane().add(passwordLabel);
-		passwordLabel.setText("������:");
-		passwordLabel.setBounds(10, 76, 97, 16);
-		
-		getContentPane().add(passwordAgainLabel);
-		passwordAgainLabel.setText("������ ������:");
-		passwordAgainLabel.setBounds(10, 95, 97, 16);
-		
-		getContentPane().add(nameLabel);
-		nameLabel.setText("���:");
-		nameLabel.setBounds(10, 32, 97, 16);
-		
-		getContentPane().add(lastNameLabel);
-		lastNameLabel.setText("�������:");
-		lastNameLabel.setBounds(10, 54, 97, 16);
-		
-		getContentPane().add(updateButton);
-		updateButton.setText("������");
-		updateButton.setBounds(93, 140, 106, 26);
-		
-		getContentPane().add(firstNameTextField);
-		firstNameTextField.setBounds(113, 30, 175, 20);
-		
-		getContentPane().add(lastNameTextField);
-		lastNameTextField.setBounds(113, 52, 175, 20);
-		
-		getContentPane().add(passwordPasswordField);
-		passwordPasswordField.setBounds(113, 74, 175, 20);
-		
-		getContentPane().add(passwordAgainPasswordField);
-		passwordAgainPasswordField.setBounds(113, 97, 175, 20);
-		
-		getCurrentUserData();
-	}
-	
-	private void getCurrentUserData() {
-		
-		if (databaseConnectWindow.dbPortal == null) {
-			return;
-		}
-		if (databaseConnectWindow.dbPortal.isConnected() == false) {
-			return;
-		}
-		if (operatorUserLoginWindow.loggedUserId == -1) {
-			return;
-		}
-		
-		ResultSet rs = databaseConnectWindow.dbPortal.executeQuery("SELECT operator_username, operator_password, " + 
-				"operator_first_name, operator_last_name FROM operators WHERE operator_id=" + operatorUserLoginWindow.loggedUserId);
-		
-		if ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {
-			return;
-		}
-		
-		try {
-			
-			rs.getString(1);
-			currentOperatorPassword = rs.getString(2);
-			rs.getString(3);
-			rs.getString(4);
-		}
-		catch (Exception ex) {			
-		}		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c9/00c97468a45d00121890bdcc27f78f62 ---
@@ -2,8 +2,8 @@ import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.EventQueue;
-import java.awt.FlowLayout;
 import java.awt.GridLayout;
+import java.awt.Insets;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.awt.event.WindowListener;
@@ -32,6 +32,7 @@ import com.jgoodies.forms.layout.ColumnSpec;
 import com.jgoodies.forms.layout.FormLayout;
 import com.jgoodies.forms.layout.RowSpec;
 
+
 public class mainWindow extends JFrame {
 
 	private final JMenuBar mainWindowMenu = new JMenuBar();
@@ -45,9 +46,17 @@ public class mainWindow extends JFrame {
 	
 	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
 	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
 	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
 	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
 	/**
 	 * Launch the application
 	 * @param args
@@ -110,17 +119,36 @@ public class mainWindow extends JFrame {
 		Operations.setText("��������");
 		Operations.setEnabled(false);
 		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
 		mainWindowMenu.add(Help);
 		Help.setText("�����");
 		
 		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
 		HelpAbout.setText("�������");
 		
 		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
 		mainWindowStatusPanel.setLayout(new FormLayout(
 			new ColumnSpec[] {
 				ColumnSpec.decode("149dlu"),
 				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
 				FormFactory.DEFAULT_COLSPEC},
 			new RowSpec[] {
 				FormFactory.RELATED_GAP_ROWSPEC,
@@ -132,9 +160,24 @@ public class mainWindow extends JFrame {
 		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
 		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
 		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
 		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
 		mainWindowStatusPanelSetEnabled(false);
 	}
 	
@@ -170,11 +213,41 @@ public class mainWindow extends JFrame {
 			fileDisconnectFromDb_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
 	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
 		public void actionPerformed(ActionEvent e) {
 			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
 		}
 	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
 
 	protected void this_windowClosing(WindowEvent e) {
 		
@@ -184,8 +257,7 @@ public class mainWindow extends JFrame {
 			
 			if (databaseConnectWindow.dbPortal.isConnected()) {
 				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
+				databaseConnectWindow.dbPortal.finalize();
 			}
 		}
 		this.dispose();
@@ -194,14 +266,13 @@ public class mainWindow extends JFrame {
 	
 	protected void fileExit_actionPerformed(ActionEvent e) {
 
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
 	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
 		
-		//databaseConnectWindow.main(null);
 		databaseConnectWindow dcw = new databaseConnectWindow();
 		dcw.setVisible(true);
 		dcw.addWindowListener(databaseConnectWindowClosing);
@@ -234,18 +305,20 @@ public class mainWindow extends JFrame {
 		
 		if (databaseConnectWindow.dbPortal != null) {
 			
-			databaseConnectWindow.dbPortal.finallize();
+			databaseConnectWindow.dbPortal.finalize();
 			
 			this.FileConnectToDb.setEnabled(true);
 			this.FileDisconnectFromDb.setEnabled(false);			
 			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
 		}
 	}
 	
 	////////////////////////////////////////////////////////////////////////
 	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
 		
 		operatorUserLoginWindow oul = new operatorUserLoginWindow();
 		oul.setVisible(true);
@@ -257,14 +330,69 @@ public class mainWindow extends JFrame {
 			if (operatorUserLoginWindow.loggedUserId != -1) {
 				
 				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
 			}
 			else {
 				
 				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
 			}
 		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
 	}
 	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
 	////////////////////////////////////////////////////////////////////////
 	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
 }

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/ca/50c4b340ab5d00121890bdcc27f78f62 ---
@@ -0,0 +1,572 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedNonQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean - ok
+		// String  - ok
+		// char    - 
+		// byte    -
+		// short   -
+		// int     -
+		// long    -
+		// double  -
+		// float   -
+		// Date    -
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+				
+				/*if (parameters[i] instanceof Boolean) {
+					
+					sqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());
+					continue;
+				}
+				if (parameters[i] instanceof String) {
+					
+					sqlStatement.setString(i, ((String)parameters[i].toString()));
+					continue;
+				}
+				if (parameters[i] instanceof Character) {
+					
+					sqlStatement.set
+				}*/
+			}
+			
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Executes parameterized query and returns ResultSet with data. For SELECT...
+	 * @param query String
+	 * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet 
+		
+		PreparedStatement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				sqlStatement.setObject(i, parameters[i]);
+			}
+			
+			result = sqlStatement.executeQuery(query);
+			
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d/a085d459b55d001211398853d386ea7d ---
@@ -0,0 +1,324 @@
+import java.awt.EventQueue;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JTextField;
+import javax.swing.JButton;
+import javax.swing.WindowConstants;
+import javax.swing.border.TitledBorder;
+
+import java.sql.ResultSet;
+import md5_calculator.Md5hashcalc;
+
+public class operatorUserLoginWindow extends JFrame {
+	private static final long serialVersionUID = 3003L;
+
+	private final JPanel groupLoginPanel = new JPanel();
+	private final JPanel groupCreateNewUserPanel = new JPanel();
+	private final JLabel loginUsernameLabel = new JLabel();
+	private final JLabel loginPasswordLabel = new JLabel();
+	private final JButton loginButton = new JButton();
+	private final JTextField loginUsernameTextField = new JTextField();
+	private final JPasswordField loginPasswordPasswordField = new JPasswordField();
+	private final JLabel newUsernameLabel = new JLabel();
+	private final JLabel newPasswordLabel = new JLabel();
+	private final JLabel newUserFirstNameLabel = new JLabel();
+	private final JLabel newUserLastNameLabel = new JLabel();
+	private final JButton createNewOperatorButton = new JButton();
+	private final JTextField newUsernameTextField = new JTextField();
+	private final JTextField newFirstNameTextField = new JTextField();
+	private final JPasswordField newPasswordPasswordField = new JPasswordField();
+	private final JTextField newLastNameTextField = new JTextField();
+	
+	public static int loggedUserId = -1;
+	public static String loggedUserNames = "";
+	
+	private final JLabel newPasswordAgainLabel = new JLabel();
+	private final JPasswordField newPasswordPasswordAgainField = new JPasswordField();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					operatorUserLoginWindow frame = new operatorUserLoginWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public operatorUserLoginWindow() {
+		super();
+		setBounds(100, 100, 518, 242);
+		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//
+	}
+	private void jbInit() throws Exception {
+		getContentPane().setLayout(null);
+		setTitle("���� �� ��������");
+		setName("operatorLoginWindow");
+		setResizable(false);
+		setAlwaysOnTop(true);
+		
+		getContentPane().add(groupLoginPanel);
+		groupLoginPanel.setLayout(null);
+		groupLoginPanel.setBorder(new TitledBorder(null, "����:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupLoginPanel.setBounds(10, 10, 243, 133);
+		
+		groupLoginPanel.add(loginUsernameLabel);
+		loginUsernameLabel.setText("����������:");
+		loginUsernameLabel.setBounds(10, 31, 80, 16);
+		
+		groupLoginPanel.add(loginPasswordLabel);
+		loginPasswordLabel.setText("������:");
+		loginPasswordLabel.setBounds(10, 53, 80, 16);
+		
+		groupLoginPanel.add(loginButton);
+		loginButton.addActionListener(new LoginButtonActionListener());
+		loginButton.setText("����");
+		loginButton.setBounds(127, 93, 106, 26);
+		
+		groupLoginPanel.add(loginUsernameTextField);
+		loginUsernameTextField.setBounds(96, 29, 137, 20);
+		
+		groupLoginPanel.add(loginPasswordPasswordField);
+		loginPasswordPasswordField.setBounds(96, 51, 137, 20);
+		
+		getContentPane().add(groupCreateNewUserPanel);
+		groupCreateNewUserPanel.setLayout(null);
+		groupCreateNewUserPanel.setBorder(new TitledBorder(null, "��� ��������:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
+		groupCreateNewUserPanel.setBounds(259, 10, 243, 194);
+		
+		groupCreateNewUserPanel.add(newUsernameLabel);
+		newUsernameLabel.setText("��� ����������:");
+		newUsernameLabel.setBounds(10, 32, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordLabel);
+		newPasswordLabel.setText("������:");
+		newPasswordLabel.setBounds(10, 54, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserFirstNameLabel);
+		newUserFirstNameLabel.setText("���:");
+		newUserFirstNameLabel.setBounds(10, 98, 95, 16);
+		
+		groupCreateNewUserPanel.add(newUserLastNameLabel);
+		newUserLastNameLabel.setText("�������:");
+		newUserLastNameLabel.setBounds(10, 120, 95, 16);
+		
+		groupCreateNewUserPanel.add(createNewOperatorButton);
+		createNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());
+		createNewOperatorButton.setText("������");
+		createNewOperatorButton.setBounds(127, 158, 106, 26);
+		
+		groupCreateNewUserPanel.add(newUsernameTextField);
+		newUsernameTextField.setBounds(111, 30, 122, 20);
+		
+		groupCreateNewUserPanel.add(newFirstNameTextField);
+		newFirstNameTextField.setBounds(111, 96, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordField);
+		newPasswordPasswordField.setBounds(111, 52, 122, 20);
+		
+		groupCreateNewUserPanel.add(newLastNameTextField);
+		newLastNameTextField.setBounds(111, 118, 122, 20);
+		
+		groupCreateNewUserPanel.add(newPasswordAgainLabel);
+		newPasswordAgainLabel.setText("������ ������:");
+		newPasswordAgainLabel.setBounds(10, 76, 95, 16);
+		
+		groupCreateNewUserPanel.add(newPasswordPasswordAgainField);
+		newPasswordPasswordAgainField.setBounds(111, 75, 122, 20);
+	}
+	private class LoginButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			loginButton_actionPerformed(e);
+		}
+	}
+	private class CreateNewOperatorButtonActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			createNewOperatorButton_actionPerformed(e);
+		}
+	}
+	
+	protected void loginButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				String password = "";
+				
+				char[] pass = loginPasswordPasswordField.getPassword();
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				ResultSet rs = null;
+				
+				try {				
+					
+					rs = databaseConnectWindow.dbPortal.executeParameterizedQuery("SELECT operator_id, operator_first_name, " + "" +
+							"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?", 
+							loginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));							
+				}
+				catch (Exception ex) {
+					System.exit(-1);
+				}
+				
+				if (rs != null) {
+					
+					try {
+						
+						loggedUserId = rs.getInt(1);
+						loggedUserNames = rs.getString(2) + " " + rs.getString(3);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+								JOptionPane.ERROR_MESSAGE);
+						return;
+					}
+					
+					this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+				}
+				else {
+					JOptionPane.showMessageDialog(this, "������ ���������� ��� ������!", "������ ��� ����", 
+							JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+				return;
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			return;
+		}		
+	}
+	
+	protected void createNewOperatorButton_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				char[] pass = newPasswordPasswordField.getPassword();
+				String password = "";
+				String encryptedPassword = "";
+				for (int i = 0; i < pass.length; i++) {
+					
+					password += pass[i];
+				}
+				
+				char[] pass2 = newPasswordPasswordAgainField.getPassword();
+				
+				if (pass.length == pass2.length) {
+				
+						for (int i = 0; i < pass.length; i++) {
+							
+							if (pass[i] != pass2[i]) {
+								
+								JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+								return;
+							}
+						}
+				}
+				else {
+				
+					JOptionPane.showMessageDialog(this, "�������� �� ��������!", "������", JOptionPane.ERROR_MESSAGE);
+					return;
+				}
+								
+				if ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && 
+						(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {
+					
+					try {
+						
+						encryptedPassword = Md5hashcalc.calculateMD5hash(password);
+					}
+					catch (Exception ex) {
+						
+						JOptionPane.showMessageDialog(this, "������� ������ ��� ������������!", "������� ������", JOptionPane.ERROR_MESSAGE);
+						System.exit(-1);
+					}
+					
+					ResultSet rs = databaseConnectWindow.dbPortal.executeParameterizedQuery(
+							"SELECT COUNT(*) FROM operators WHERE operator_username=?",	newUsernameTextField.getText());
+					
+					int usersCount = 0;
+					try {
+						
+						usersCount = rs.getInt(1);
+					}
+					catch (Exception ex) {						
+					}					
+					
+					if ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {						
+						
+						//no such existing username so now we create it
+						if (databaseConnectWindow.dbPortal.executeParameterizedNonQuery(
+								"INSERT INTO operators(operator_username, operator_password, operator_first_name, " + 
+								"operator_last_name) VALUES(?, ?, ?, ?)", newUsernameTextField.getText(), encryptedPassword,
+								newFirstNameTextField.getText(), newLastNameTextField.getText()) != 1) {
+							
+							JOptionPane.showMessageDialog(this, "������ ��� ��������� �� ��� ����������!", "������", JOptionPane.ERROR_MESSAGE);
+						}
+						else { //everything ok so login now
+							
+							loginUsernameTextField.setText(newUsernameTextField.getText());
+							loginPasswordPasswordField.setText(password);
+							loginButton_actionPerformed(null);
+						}						
+					}
+					else {
+						
+						if (databaseConnectWindow.dbPortal.getLastError() != null) {
+							
+							JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);							
+						}
+						else {
+							
+							JOptionPane.showMessageDialog(this, "��������� �� ��� ������������� ��� ���� ����������.", "��������� �� ������������� ���", JOptionPane.ERROR_MESSAGE);							
+						}
+					}					
+				}
+				else {
+					
+					JOptionPane.showMessageDialog(this, "���������� � �� �������� ��-�������� �����!", "���������� �����", JOptionPane.ERROR_MESSAGE);
+				}
+			}
+			else {
+				
+				JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+			}
+		}
+		else {
+			
+			JOptionPane.showMessageDialog(this, "���� ������ � MySQL �������!", "������� � ��������", JOptionPane.ERROR_MESSAGE);
+		}		
+	}
+
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d1/f0b87e7ea45d00121890bdcc27f78f62 ---
@@ -0,0 +1,395 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.JButton;
+import javax.swing.JComponent;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.JSeparator;
+import javax.swing.SpringLayout;
+import javax.swing.border.EtchedBorder;
+import org.jdesktop.layout.GroupLayout;
+import org.jdesktop.layout.LayoutStyle;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d2/10685414a15d00121890bdcc27f78f62 ---
@@ -0,0 +1,511 @@
+/**
+ * <p> Title: MySQLdbManager </p>
+ * <p> Description: MySQL java database manager wrapper </p>
+ * @version 1.00
+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg
+ */
+
+package database_management;
+
+import java.sql.*;
+
+public class MySQLdbManager {
+	
+	private final String JDBCDRIVER = "com.mysql.jdbc.Driver";
+	private int mySqlServerPort = 3306;
+	private String mySqlServerAddress = null;	
+	private String mySqlDatabaseName = null;
+	private String mySqlUsername = null;
+	private String mySqlPassword = null;
+	private boolean useUTF8Encoding = true;
+	private Connection dbConnection = null;
+		
+	private String lastError = null;
+	
+	/**
+	 * Empty Constructor 
+	 */
+	
+	public MySQLdbManager() {
+		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server ip address or hostname
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.setMySqlServerPort(mySqlServerPort);
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;		
+	}
+	
+	/**
+	 * Constructor
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 * @param mySqlDatabaseName String MySQL database name (leave empty "" if you want to assign with no one)
+	 * @param mySqlUsername String MySQL database username
+	 * @param mySqlPassword String MySQL database username password. The default one is empty string.
+	 */
+	
+	public MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {
+		this.mySqlServerAddress = mySqlServerAddress;
+		this.mySqlDatabaseName = mySqlDatabaseName;
+		this.mySqlUsername = mySqlUsername;
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Sets MySQL server address. After done you need to call disconnect() and connect() again.
+	 * @param mySqlServerAddress String MySQL server IP address or HOSTNAME
+	 */
+	
+	public void setMySqlServerAddress(String mySqlServerAddress) {
+		this.mySqlServerAddress = mySqlServerAddress;
+	}
+	
+	/**
+	 * Returns MySQL server address.
+	 * @return String
+	 */
+	
+	public String getMySqlServerAddress() {
+		return mySqlServerAddress;
+	}
+	
+	/**
+	 * Sets MySQL database [name] to use. Leave empty "" if you want to assign with no one.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlDatabaseName String
+	 */
+	
+	public void setMySqlActiveDatabase(String mySqlDatabaseName) {
+		this.mySqlDatabaseName = mySqlDatabaseName;
+	}
+	
+	/**
+	 * Returns current active MySQL database name.
+	 * @return String
+	 */
+	
+	public String getMySqlActiveDatabase() {
+		return mySqlDatabaseName;
+	}
+	
+	/**
+	 * Sets MySQL server port. Must be between [1 and 65535].
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlServerPort int
+	 */
+	
+	public void setMySqlServerPort(int mySqlServerPort) {
+		
+		if (mySqlServerPort <= 0 || mySqlServerPort > 65535)
+		{ lastError = "Invalid mysql server port range! Must be between [1 and 65535]."; return; }
+		
+		this.mySqlServerPort = mySqlServerPort;
+	}
+	
+	/**
+	 * Returns MySQL server port.
+	 * @return int ([between 1 and 65535])
+	 */
+	
+	public int getMySqlServerPort() {
+		
+		return this.mySqlServerPort;
+	}
+	
+	/**
+	 * Sets MySQL database username.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlUsername String
+	 */
+	
+	public void setMySqlUsername(String mySqlUsername) {
+		
+		this.mySqlUsername = mySqlUsername;
+	}
+	
+	/**
+	 * Returns MySQL database username.
+	 * @return String
+	 */
+	
+	public String getMySqlUsername() {
+		
+		return mySqlUsername;
+	}
+	
+	/**
+	 * Sets MySQL database username password.
+	 * You need to call disconnect() and connect() after that.
+	 * @param mySqlPassword String
+	 */
+	
+	public void setMySqlPassword(String mySqlPassword) {
+		
+		this.mySqlPassword = mySqlPassword;
+	}
+	
+	/**
+	 * Returns current MySQL database username password.
+	 * @return String
+	 */
+	
+	public String getMySqlPassword() {
+		
+		return this.mySqlPassword;
+	}
+	
+	/**
+	 * Sets database input/output UTF8 data encoding on or off.
+	 * You need to call disconnect() and connect() after that.
+	 * @param on boolean
+	 */
+	
+	public void setUtf8EncodingOn(boolean on) {
+		
+		this.useUTF8Encoding = on;
+	}
+	
+	/**
+	 * Returns database input/output UTF8 is on or off.
+	 * @return boolean
+	 */
+	
+	public boolean isUtf8EncodingUsed() {
+		
+		return this.useUTF8Encoding;
+	}
+	
+	/**
+	 * Checks for active database connection and returns true if it is presented.
+	 * @return boolean
+	 */
+	
+	public boolean isConnected() {
+		
+		boolean result = true;
+		
+		lastError = null;
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				result = (!dbConnection.isClosed());
+			}			
+			catch (SQLException ex) {
+				
+				lastError = ex.getMessage(); 
+				result = false;
+			}
+		}
+		else {			
+			lastError = "Uninitialized database connection!";
+			result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Tries to connect to MySQL database and returns true in case of success.
+	 * @return boolean
+	 */
+	
+	public boolean connect() {
+		
+		boolean result = true;
+		
+		if (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { 
+			lastError = "Uninitialized server address, database name or database username!"; return false; }
+		else {
+			lastError = null; //new connect always clears the last error
+		}			
+		
+		if (dbConnection != null) {
+			
+			try {
+				
+				if (!dbConnection.isClosed()) {
+					dbConnection.close();
+				}
+			}
+			catch (SQLException ex) {
+				lastError = ex.getMessage();
+			}
+		}	
+		
+		try {
+			
+			Class.forName(JDBCDRIVER).newInstance();
+			dbConnection = DriverManager.getConnection("jdbc:mysql://" + mySqlServerAddress + ":" + mySqlServerPort + "/" + mySqlDatabaseName + 
+					"?user=" + mySqlUsername + (mySqlPassword != null ? "&password=" + mySqlPassword : "") + 
+					(useUTF8Encoding == true ? "&useUnicode=TRUE&characterEncoding=UTF-8" : ""));
+		}
+		catch (Exception ex) {
+			
+			if (lastError == null) { 
+				lastError = ex.getMessage(); 
+			}
+			else { 
+				lastError += ex.getMessage(); 
+			}
+			
+		    result = false;
+		}
+		
+		return result;
+	}
+	
+	/**
+	 * Close the active database connection if presented.
+	 */
+	
+	public void disconnect() {
+		
+			if (dbConnection != null) {
+			
+				try {
+					
+					if (!dbConnection.isClosed()) {
+						
+						dbConnection.close();
+					}
+				}
+				catch (SQLException ex) {
+					
+					lastError = ex.getMessage();
+				}
+				
+				dbConnection = null;
+		}		
+	}
+	
+	/**
+	 * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return int the number of affected things
+	 */
+	
+	public int executeNonQuery(String query) {
+		
+		Statement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...
+	 * @param query String
+	 * @param parameters Object (for variables like String, int, double ...)
+	 * @return int the number of affected things
+	 */
+	
+	public int executeParameterizedQuery(String query, Object[] parameters) {
+		
+		PreparedStatement sqlStatement;
+		int affectedCount = 0;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return affectedCount;			
+		}
+		else {			
+			lastError = null;
+		}
+		
+		//TODO...
+		// boolean
+		// String
+		// char[]
+		// byte
+		// short
+		// int
+		// long
+		// double
+		// float
+		// Date
+		// null ???
+		
+		try {
+			sqlStatement = dbConnection.prepareStatement(query);
+			
+			for (int i = 0; i < parameters.length; i++) {
+				
+				if (parameters[i] instanceof String) {
+					sqlStatement.set
+				}
+			}
+			
+			sqlStatement.
+			sqlStatement.execute(query);
+			affectedCount = sqlStatement.getUpdateCount();
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();			
+		}
+		
+		return affectedCount;
+	}
+	
+	/**
+	 * Executes query and returns ResultSet with data. For SELECT...
+	 * Warning! Prone to SQL injection!!!
+	 * @param query String
+	 * @return ResultSet
+	 */
+	
+	public ResultSet executeQuery(String query) { //executes query and returns ResultSet 
+		
+		Statement sqlStatement;
+		ResultSet result;
+		
+		if (!isConnected()) {
+			
+			lastError = "No connection!";
+			return null;
+		}
+		else {
+			lastError = null;
+		}
+		
+		try {
+			
+			sqlStatement = dbConnection.createStatement();
+			result = sqlStatement.executeQuery(query);
+			try {
+				
+				result.first();
+			}
+			catch (Exception ex) {
+				
+			}
+		}
+		catch (SQLException ex) {
+			
+			lastError = ex.getMessage();
+			return null;
+		}
+		
+		return result;		
+	}
+	
+	/**
+	 * Returns the text message exception error of the last called method. Returns null if no error.
+	 * @return String
+	 */
+	
+	public String getLastError() {
+		
+		return lastError;
+	}
+	
+	/**
+	 * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.
+	 */
+	
+	public void finalize() {
+		
+		disconnect();
+		mySqlServerAddress = null;	
+		mySqlDatabaseName = null;
+		mySqlUsername = null;
+		mySqlPassword = null;
+		lastError = null;
+	}
+}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d4/00fa639bb65c00121e34961e0ace9d22 ---
@@ -1,260 +0,0 @@
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.GridLayout;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import javax.swing.BoxLayout;
-import javax.swing.JButton;
-import javax.swing.JComponent;
-import java.awt.event.ActionListener;
-import java.awt.event.ActionEvent;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JMenuBar;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JSeparator;
-import javax.swing.SpringLayout;
-import javax.swing.border.BevelBorder;
-import javax.swing.border.EtchedBorder;
-import org.jdesktop.layout.GroupLayout;
-import org.jdesktop.layout.LayoutStyle;
-import com.jgoodies.forms.factories.FormFactory;
-import com.jgoodies.forms.layout.CellConstraints;
-import com.jgoodies.forms.layout.ColumnSpec;
-import com.jgoodies.forms.layout.FormLayout;
-import com.jgoodies.forms.layout.RowSpec;
-
-public class mainWindow extends JFrame {
-
-	private final JMenuBar mainWindowMenu = new JMenuBar();
-	private final JMenu File = new JMenu();
-	private final JMenuItem FileConnectToDb = new JMenuItem();
-	private final JMenu Operations = new JMenu();
-	private final JMenu Help = new JMenu();
-	private final JMenuItem HelpAbout = new JMenuItem();
-	private final JMenuItem FileExit = new JMenuItem();
-	private static mainWindow mainWindowPointer;
-	
-	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
-	private final JPanel mainWindowStatusPanel = new JPanel();
-	private final JPanel panel = new JPanel();
-	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
-	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					mainWindow frame = new mainWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public mainWindow() {
-		super();
-		setBounds(100, 100, 682, 438);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		mainWindowPointer = this;
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//		
-	}
-	private void jbInit() throws Exception {
-		addWindowListener(new ThisWindowListener());
-		getContentPane().setLayout(new BorderLayout());
-		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
-		setName("mainWindow");
-		
-		setJMenuBar(mainWindowMenu);
-		
-		mainWindowMenu.add(File);
-		File.setText("����");
-		
-		File.add(FileConnectToDb);
-		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
-		FileConnectToDb.setText("������ �� � ��");
-		
-		File.add(FileDisconnectFromDb);
-		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
-		FileDisconnectFromDb.setText("������� �������� � ��");
-		FileDisconnectFromDb.setEnabled(false);
-
-		File.addSeparator();
-		
-		File.add(FileExit);
-		FileExit.addActionListener(new FileExitActionListener());
-		FileExit.setText("�����");
-		
-		mainWindowMenu.add(Operations);
-		Operations.setText("��������");
-		Operations.setEnabled(false);
-		
-		mainWindowMenu.add(Help);
-		Help.setText("�����");
-		
-		Help.add(HelpAbout);
-		HelpAbout.setText("�������");
-		
-		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
-		mainWindowStatusPanel.setLayout(new FormLayout(
-			new ColumnSpec[] {
-				ColumnSpec.decode("149dlu"),
-				ColumnSpec.decode("72px"),
-				FormFactory.DEFAULT_COLSPEC},
-			new RowSpec[] {
-				FormFactory.RELATED_GAP_ROWSPEC,
-				RowSpec.decode("16px")}));
-		mainWindowStatusPanel.setSize(666, 25);
-		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
-		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
-		
-		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
-		
-		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));
-		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
-		mainWindowStatusPanelLoggedUserSettings.setText("����");
-		mainWindowStatusPanelSetEnabled(false);
-	}
-	
-	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
-		
-		Component[] comps = mainWindowStatusPanel.getComponents();
-		
-		for (int i = 0; i < comps.length; i++) {
-		
-			comps[i].setEnabled(enable);	
-		}
-		
-		mainWindowStatusPanel.setEnabled(enable);
-	}
-	
-	private class ThisWindowListener extends WindowAdapter {
-		public void windowClosing(WindowEvent e) {
-			this_windowClosing(e);
-		}
-	}
-	private class FileExitActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileExit_actionPerformed(e);
-		}
-	}
-	private class FileConnectToDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileConnectToDb_actionPerformed(e);
-		}
-	}
-	private class FileDisconnectFromDbActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			fileDisconnectFromDb_actionPerformed(e);
-		}
-	}
-	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
-		}
-	}
-
-	protected void this_windowClosing(WindowEvent e) {
-		
-		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			if (databaseConnectWindow.dbPortal.isConnected()) {
-				
-				databaseConnectWindow.dbPortal.disconnect();
-				databaseConnectWindow.dbPortal.finallize();
-			}
-		}
-		this.dispose();
-		//System.exit(0);
-	}
-	
-	protected void fileExit_actionPerformed(ActionEvent e) {
-
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	////////////////////////////////////////////////////////////////////////
-	
-	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
-		
-		//databaseConnectWindow.main(null);
-		databaseConnectWindow dcw = new databaseConnectWindow();
-		dcw.setVisible(true);
-		dcw.addWindowListener(databaseConnectWindowClosing);
-	}
-	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
-		
-        public void windowClosing(WindowEvent e) {
-            
-        	e.getWindow().dispose(); 
-        	
-        	if (databaseConnectWindow.dbPortal != null) {
-    			
-    			if (databaseConnectWindow.dbPortal.isConnected()) {
-    				
-    				//FIXME mainWindowPointer.Operations.setEnabled(true);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
-    				mainWindowPointer.FileConnectToDb.setEnabled(false);
-    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
-    			}
-    			else {
-    				//FIXME mainWindowPointer.Operations.setEnabled(false);
-    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
-    			}
-    		}            
-        }
-    };
-    
-    ////////////////////////////////////////////////////////////////////////
-    
-	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
-		
-		if (databaseConnectWindow.dbPortal != null) {
-			
-			databaseConnectWindow.dbPortal.finallize();
-			
-			this.FileConnectToDb.setEnabled(true);
-			this.FileDisconnectFromDb.setEnabled(false);			
-			this.Operations.setEnabled(false);
-			this.mainWindowStatusPanelSetEnabled(false);			
-		}
-	}
-	
-	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
-		
-		operatorUserLoginWindow oul = new operatorUserLoginWindow();
-		oul.setVisible(true);
-		oul.addWindowListener(operatorUserLoginWindowClosing);
-	}
-	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
-
-		public void windowClosing(WindowEvent e) {
-			
-		}
-	}
-	
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d5/10e72249585b0012179f93dc572b551d ---
@@ -1,178 +0,0 @@
-import java.awt.EventQueue;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.awt.event.WindowEvent;
-
-import javax.swing.JButton;
-
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-import javax.swing.JOptionPane;
-
-import database_management.MySQLdbManager;
-
-public class databaseConnectWindow extends JFrame {
-
-	private final JLabel label = new JLabel();
-	private final JLabel label_1 = new JLabel();
-	private final JLabel label_2 = new JLabel();
-	private final JLabel label_3 = new JLabel();
-	private final JLabel label_4 = new JLabel();
-	private final JButton connectToDatabaseButton = new JButton();
-	private final JTextField mysqlServerAddressTextField = new JTextField();
-	private final JTextField mysqlPortTextField = new JTextField();
-	private final JTextField mysqlDatabaseNameTextField = new JTextField();
-	private final JTextField mysqlUsernameTextField = new JTextField();
-	private final JPasswordField mysqlPasswordPasswordField = new JPasswordField();
-	public static MySQLdbManager dbPortal = null;
-	
-	/**
-	 * Launch the application
-	 * @param args
-	 */
-	public static void main(String args[]) {
-		EventQueue.invokeLater(new Runnable() {
-			public void run() {
-				try {
-					databaseConnectWindow frame = new databaseConnectWindow();
-					frame.setVisible(true);
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-			}
-		});
-	}
-
-	/**
-	 * Create the frame
-	 */
-	public databaseConnectWindow() {
-		super();
-		setBounds(100, 100, 384, 203);
-		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		try {
-			jbInit();
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		//
-	}
-	private void jbInit() throws Exception {
-		getContentPane().setLayout(null);
-		setAlwaysOnTop(true);
-		setResizable(false);
-		setTitle("��������� � ������ �����");
-		setName("databaseConnectWindowFrame");
-		
-		getContentPane().add(label);
-		label.setText("����� �� MySQL �������:");
-		label.setBounds(10, 10, 165, 16);
-		
-		getContentPane().add(label_1);
-		label_1.setText("��� �� ������ �����:");
-		label_1.setBounds(10, 54, 165, 16);
-		
-		getContentPane().add(label_2);
-		label_2.setText("����:");
-		label_2.setBounds(10, 32, 156, 16);
-		
-		getContentPane().add(label_3);
-		label_3.setText("������������� ���:");
-		label_3.setBounds(10, 76, 165, 16);
-		
-		getContentPane().add(label_4);
-		label_4.setText("������:");
-		label_4.setBounds(10, 98, 156, 16);
-		
-		getContentPane().add(connectToDatabaseButton);
-		connectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());
-		connectToDatabaseButton.setText("������ ��!");
-		connectToDatabaseButton.setBounds(132, 135, 106, 26);
-		
-		getContentPane().add(mysqlServerAddressTextField);
-		mysqlServerAddressTextField.setText("127.0.0.1");
-		mysqlServerAddressTextField.setBounds(181, 8, 185, 20);
-		
-		getContentPane().add(mysqlPortTextField);
-		mysqlPortTextField.setText("3306");
-		mysqlPortTextField.setBounds(181, 30, 91, 20);
-		
-		getContentPane().add(mysqlDatabaseNameTextField);
-		mysqlDatabaseNameTextField.setText("shop");
-		mysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);
-		
-		getContentPane().add(mysqlUsernameTextField);
-		mysqlUsernameTextField.setText("root");
-		mysqlUsernameTextField.setBounds(181, 76, 180, 18);
-		
-		getContentPane().add(mysqlPasswordPasswordField);
-		mysqlPasswordPasswordField.setBounds(181, 96, 181, 20);
-	}
-	private class ConnectToDatabaseButtonActionListener implements ActionListener {
-		public void actionPerformed(ActionEvent e) {
-			connectToDatabaseButton_actionPerformed(e);
-		}
-	}
-	protected void connectToDatabaseButton_actionPerformed(ActionEvent e) {
-		
-		String password = "";
-		
-		char [] pass = mysqlPasswordPasswordField.getPassword();
-		for (int i = 0; i < pass.length; i++) {
-			
-			password += pass[i];
-		}
-		
-		dbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),
-				mysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),
-				mysqlUsernameTextField.getText(), password);		
-		
-		
-		if (dbPortal.connect() == false) { //now check for database name that is not existing
-			
-			dbPortal.setMySqlActiveDatabase("");
-			dbPortal.disconnect(); //just in case
-			
-			if (dbPortal.connect() == false) { //connection settings problem or not running MySQL server
-				dbPortal.finallize();
-				JOptionPane.showMessageDialog(this, "������ ��� �����������! ��������� ����������� � ���� MySQL ������ � ���������!", 
-						"������� � ��������!", JOptionPane.ERROR_MESSAGE);
-				
-				return;
-			}
-			else { //will have to create new database
-				
-				dbPortal.disconnect();
-				
-				if (JOptionPane.showConfirmDialog(this, "�� ���� ��������� ���� ���� ����� � ���: " + mysqlDatabaseNameTextField.getText() +
-						".\n������� �� ���?", "��������� �� ���� ���� �����?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
-					
-					createNewDatabaseAndTables();
-				}
-				else {
-				
-					dbPortal.finallize();
-					return;
-				}
-				
-				this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
-			}			
-		}
-		
-		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));		
-	}
-	
-	private void createNewDatabaseAndTables() {
-		
-		dbPortal.setMySqlActiveDatabase("");
-		
-		if (dbPortal.connect() == false) {
-			
-			dbPortal.finallize();
-		}
-		
-	}
-
-}

--- eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d5/d0782d99a45d00121890bdcc27f78f62 ---
@@ -0,0 +1,391 @@
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.Insets;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+import javax.swing.JButton;
+import java.awt.event.ActionListener;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JMenuItem;
+import javax.swing.JOptionPane;
+import javax.swing.JPanel;
+import javax.swing.border.EtchedBorder;
+import org.jdesktop.layout.LayoutStyle;
+import com.jgoodies.forms.factories.FormFactory;
+import com.jgoodies.forms.layout.CellConstraints;
+import com.jgoodies.forms.layout.ColumnSpec;
+import com.jgoodies.forms.layout.FormLayout;
+import com.jgoodies.forms.layout.RowSpec;
+
+
+public class mainWindow extends JFrame {
+
+	private final JMenuBar mainWindowMenu = new JMenuBar();
+	private final JMenu File = new JMenu();
+	private final JMenuItem FileConnectToDb = new JMenuItem();
+	private final JMenu Operations = new JMenu();
+	private final JMenu Help = new JMenu();
+	private final JMenuItem HelpAbout = new JMenuItem();
+	private final JMenuItem FileExit = new JMenuItem();
+	private static mainWindow mainWindowPointer;
+	
+	private final JMenuItem FileDisconnectFromDb = new JMenuItem();
+	private final JPanel mainWindowStatusPanel = new JPanel();
+	private final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();
+	private final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();
+
+	private final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();
+	private final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();
+	private final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();
+	
+	private final JMenuItem operationsProductsManagement = new JMenuItem();
+	private final JMenuItem operationsOrdersManagement = new JMenuItem();
+	private final JMenuItem operationsNewOrder = new JMenuItem();
+	/**
+	 * Launch the application
+	 * @param args
+	 */
+	public static void main(String args[]) {
+		EventQueue.invokeLater(new Runnable() {
+			public void run() {
+				try {
+					mainWindow frame = new mainWindow();
+					frame.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+
+	/**
+	 * Create the frame
+	 */
+	public mainWindow() {
+		super();
+		setBounds(100, 100, 682, 438);
+		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		mainWindowPointer = this;
+		try {
+			jbInit();
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		//		
+	}
+	private void jbInit() throws Exception {
+		addWindowListener(new ThisWindowListener());
+		getContentPane().setLayout(new BorderLayout());
+		setTitle("eShop 1.00 (C) 2013 ����� ������ & ������ ������");
+		setName("mainWindow");
+		
+		setJMenuBar(mainWindowMenu);
+		
+		mainWindowMenu.add(File);
+		File.setText("����");
+		
+		File.add(FileConnectToDb);
+		FileConnectToDb.addActionListener(new FileConnectToDbActionListener());
+		FileConnectToDb.setText("������ �� � ��");
+		
+		File.add(FileDisconnectFromDb);
+		FileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());
+		FileDisconnectFromDb.setText("������� �������� � ��");
+		FileDisconnectFromDb.setEnabled(false);
+
+		File.addSeparator();
+		
+		File.add(FileExit);
+		FileExit.addActionListener(new FileExitActionListener());
+		FileExit.setText("�����");
+		
+		mainWindowMenu.add(Operations);
+		Operations.setText("��������");
+		Operations.setEnabled(false);
+		
+		Operations.add(operationsNewOrder);
+		operationsNewOrder.addActionListener(new OperationsNewOrderActionListener());
+		operationsNewOrder.setText("���� �������");
+
+		Operations.addSeparator();
+		
+		Operations.add(operationsProductsManagement);
+		operationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());
+		operationsProductsManagement.setText("���������� �� ��������");
+		
+		Operations.add(operationsOrdersManagement);
+		operationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());
+		operationsOrdersManagement.setText("���������� �� �������");
+		
+		mainWindowMenu.add(Help);
+		Help.setText("�����");
+		
+		Help.add(HelpAbout);
+		HelpAbout.addActionListener(new HelpAboutActionListener());
+		HelpAbout.setText("�������");
+		
+		getContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);
+		mainWindowStatusPanel.setLayout(new FormLayout(
+			new ColumnSpec[] {
+				ColumnSpec.decode("149dlu"),
+				ColumnSpec.decode("72px"),
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC,
+				FormFactory.DEFAULT_COLSPEC},
+			new RowSpec[] {
+				FormFactory.RELATED_GAP_ROWSPEC,
+				RowSpec.decode("16px")}));
+		mainWindowStatusPanel.setSize(666, 25);
+		mainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
+		mainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));
+		
+		mainWindowStatusPanelLoggedUserLabel.setText("����������:");
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints("1, 1, 1, 2, fill, fill"));
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());
+		mainWindowStatusPanelLoggedUserLogin.setText("����");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
+		mainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());
+		mainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));
+		mainWindowStatusPanelLoggedUserSettings.setText("���������");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));
+		mainWindowStatusPanelSeparatorLabel2.setText("   ");
+		
+		mainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));
+		mainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());
+		mainWindowStatusPanelLoggedUserLogout.setText("�����");
+		mainWindowStatusPanelSetEnabled(false);
+	}
+	
+	protected void mainWindowStatusPanelSetEnabled(boolean enable) {
+		
+		Component[] comps = mainWindowStatusPanel.getComponents();
+		
+		for (int i = 0; i < comps.length; i++) {
+		
+			comps[i].setEnabled(enable);	
+		}
+		
+		mainWindowStatusPanel.setEnabled(enable);
+	}
+	
+	private class ThisWindowListener extends WindowAdapter {
+		public void windowClosing(WindowEvent e) {
+			this_windowClosing(e);
+		}
+	}
+	private class FileExitActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileExit_actionPerformed(e);
+		}
+	}
+	private class FileConnectToDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileConnectToDb_actionPerformed(e);
+		}
+	}
+	private class FileDisconnectFromDbActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			fileDisconnectFromDb_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogin_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserSettings_actionPerformed(e);
+		}
+	}
+	private class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			mainWindowStatusPanelLoggedUserLogout_actionPerformed(e);
+		}
+	}
+	private class HelpAboutActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			helpAbout_actionPerformed(e);
+		}
+	}
+	private class OperationsProductsManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsProductsManagement_actionPerformed(e);
+		}
+	}
+	private class OperationsNewOrderActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsNewOrder_actionPerformed(e);
+		}
+	}
+	private class OperationsOrdersManagementActionListener implements ActionListener {
+		public void actionPerformed(ActionEvent e) {
+			operationsOrdersManagement_actionPerformed(e);
+		}
+	}
+
+	protected void this_windowClosing(WindowEvent e) {
+		
+		//JOptionPane.showMessageDialog(null, "aa", "aa", JOptionPane.INFORMATION_MESSAGE);
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			if (databaseConnectWindow.dbPortal.isConnected()) {
+				
+				databaseConnectWindow.dbPortal.finalize();
+			}
+		}
+		this.dispose();
+		//System.exit(0);
+	}
+	
+	protected void fileExit_actionPerformed(ActionEvent e) {
+
+		this.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void fileConnectToDb_actionPerformed(ActionEvent e) {
+		
+		databaseConnectWindow dcw = new databaseConnectWindow();
+		dcw.setVisible(true);
+		dcw.addWindowListener(databaseConnectWindowClosing);
+	}
+	private static WindowListener databaseConnectWindowClosing = new WindowAdapter() {
+		
+        public void windowClosing(WindowEvent e) {
+            
+        	e.getWindow().dispose(); 
+        	
+        	if (databaseConnectWindow.dbPortal != null) {
+    			
+    			if (databaseConnectWindow.dbPortal.isConnected()) {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(true);
+    				mainWindowPointer.FileConnectToDb.setEnabled(false);
+    				mainWindowPointer.FileDisconnectFromDb.setEnabled(true);
+    			}
+    			else {
+    				
+    				mainWindowPointer.mainWindowStatusPanelSetEnabled(false);
+    			}
+    		}            
+        }
+    };
+    
+    ////////////////////////////////////////////////////////////////////////
+    
+	protected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {
+		
+		if (databaseConnectWindow.dbPortal != null) {
+			
+			databaseConnectWindow.dbPortal.finalize();
+			
+			this.FileConnectToDb.setEnabled(true);
+			this.FileDisconnectFromDb.setEnabled(false);			
+			this.Operations.setEnabled(false);
+			this.mainWindowStatusPanelSetEnabled(false);	
+			this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			operatorUserLoginWindow.loggedUserId = -1;
+		}
+	}
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {
+		
+		operatorUserLoginWindow oul = new operatorUserLoginWindow();
+		oul.setVisible(true);
+		oul.addWindowListener(operatorUserLoginWindowClosing);
+	}
+	private static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {
+
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.Operations.setEnabled(true);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserLoginWindow.loggedUserNames);
+			}
+			else {
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+		
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {
+		
+		if (operatorUserLoginWindow.loggedUserId == -1) {
+			return;
+		}
+		
+		operatorUserSettingsWindow ousw = new operatorUserSettingsWindow();
+		ousw.setVisible(true);
+		ousw.addWindowListener(operatorUserSettingsWindowClosing);
+	}
+	
+	private static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {
+		
+		public void windowClosing(WindowEvent e) {
+			if (operatorUserLoginWindow.loggedUserId != -1) {
+				
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: " + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);
+			}
+			else { //if operator was deleted
+				
+				mainWindowPointer.Operations.setEnabled(false);
+				mainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+			}
+		}
+	};
+	
+	////////////////////////////////////////////////////////////////////////
+	
+	protected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {
+		
+		this.Operations.setEnabled(false);
+		this.mainWindowStatusPanelLoggedUserLabel.setText("����������: ");
+		operatorUserLoginWindow.loggedUserId = -1;
+	}
+	
+	protected void helpAbout_actionPerformed(ActionEvent e) {
+		
+		JOptionPane.showMessageDialog(this, "eShop ver.-1.00\n(C) 2013 ����� ������ & ������ ������", "�������", JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	protected void operationsProductsManagement_actionPerformed(ActionEvent e) {
+		//TODO...		
+	}
+	protected void operationsNewOrder_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	protected void operationsOrdersManagement_actionPerformed(ActionEvent e) {
+		//TODO...
+	}
+	
+	
+	
+	
+}

