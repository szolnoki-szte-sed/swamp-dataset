--- .travis.yml ---
@@ -1,5 +1,7 @@
 language: node_js
 node_js:
+  - "16"
+  - "14"
   - "12"
   - "10"
 before_script:

--- main.js ---
@@ -1,9 +1,9 @@
 'use strict';
 
-/* eslint-disable no-continue */
+/* eslint-disable no-continue, eqeqeq */
 
 const isObject = (val) => typeof val === 'object' || typeof val === 'function';
-const isProto = (val, obj) => val === '__proto__' || (val === 'constructor' && typeof obj.constructor === 'function');
+const isProto = (val, obj) => val == '__proto__' || (val == 'constructor' && typeof obj.constructor === 'function');
 const set = (obj, parts, length, val) => {
   let tmp = obj;
   let i = 0;

--- package.json ---
@@ -1,7 +1,7 @@
 {
   "name": "@strikeentco/set",
   "author": "Alexey Bystrov <strikeentco@gmail.com>",
-  "version": "1.0.1",
+  "version": "1.0.2",
   "description": "Set nested values on an object using a dot path or custom separator",
   "engines": {
     "node": ">=6.0.0"
@@ -50,12 +50,12 @@
     "url": "https://github.com/strikeentco/set/issues"
   },
   "devDependencies": {
-    "eslint": "^7.12.1",
-    "eslint-config-airbnb": "^18.2.0",
-    "eslint-plugin-import": "^2.22.1",
-    "eslint-plugin-jsx-a11y": "^6.4.1",
-    "eslint-plugin-react": "^7.21.5",
-    "mocha": "^8.2.0",
+    "eslint": "^7.32.0",
+    "eslint-config-airbnb": "^18.2.1",
+    "eslint-plugin-import": "^2.25.4",
+    "eslint-plugin-jsx-a11y": "^6.5.1",
+    "eslint-plugin-react": "^7.28.0",
+    "mocha": "^8.4.0",
     "nyc": "^15.1.0",
     "should": "^13.2.3"
   },

--- test.js ---
@@ -114,6 +114,9 @@ describe('set', () => {
 
     set(o, ['constructor', 'b'], 1);
     should(o.constructor.b).be.eql(undefined);
+
+    set(o, [['constructor'], 'b'], 1);
+    should(o.constructor.b).be.eql(undefined);
   });
 
   it('should not indirectly set Object properties', () => {
@@ -123,6 +126,9 @@ describe('set', () => {
 
     set(o, ['__proto__', 'b'], 1);
     should(o.b).be.eql(undefined);
+
+    set(o, [['__proto__'], 'b'], 1);
+    should(o.b).be.eql(undefined);
   });
 
   it('should not indirectly set Object properties', () => {
@@ -133,6 +139,9 @@ describe('set', () => {
 
     set(o, ['ob.constructor', 'b'], 1);
     should(ob.b).be.eql(undefined);
+
+    set(o, [['ob.constructor'], 'b'], 1);
+    should(ob.b).be.eql(undefined);
   });
 
   it('should not indirectly set Object properties', () => {
@@ -143,5 +152,8 @@ describe('set', () => {
 
     set(o, ['ob.__proto__', 'b'], 1);
     should(ob.b).be.eql(undefined);
+
+    set(o, [['ob.__proto__'], 'b'], 1);
+    should(ob.b).be.eql(undefined);
   });
 });

