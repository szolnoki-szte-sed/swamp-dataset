--- addons/project/static/src/components/subtask_kanban_list/subtask_kanban_create/subtask_kanban_create.js ---
@@ -12,10 +12,11 @@ export class SubtaskCreate extends Component {
         onBlur: { type: Function },
     };
     setup() {
-        this.placeholder = _t("Add Sub-tasks");
+        this.placeholder = _t("Write a task name");
         this.state = useState({
             inputSize: 1,
             name: this.props.name,
+            isFieldInvalid: false,
         });
         this.input = useRef("subtaskCreateInput");
         useAutofocus({ refName: "subtaskCreateInput" });
@@ -37,29 +38,30 @@ export class SubtaskCreate extends Component {
     _onInput(ev) {
         const value = ev.target.value;
         this.state.name = value;
+        this.state.isFieldInvalid = false;
     }
 
     _onClick() {
         this.input.el.focus();
     }
 
-    async _onBlur() {
-        this.props.onBlur();
-    }
-
     /**
      * @private
      * @param {InputEvent} ev
      */
     _onNameChanged(ev) {
         const value = ev.target.value.trim();
-        this.props.onSubtaskCreateNameChanged(value);
-        ev.target.blur();
+        if (value !== "") {
+            this.props.onSubtaskCreateNameChanged(value);
+            ev.target.blur();
+        }
     }
 
     _onSaveClick() {
-        if (this.input.el.value !== "") {
-            this.props.onSubtaskCreateNameChanged(this.input.el.value);
+        if (this.input.el.value.trim() === "") {
+            this.props.onSubtaskCreateNameChanged(this.input.el.value.trim());
+            this.state.isFieldInvalid = true;
+            this.state.name = "";
         }
     }
 }

--- addons/project/static/src/components/subtask_kanban_list/subtask_kanban_create/subtask_kanban_create.xml ---
@@ -2,13 +2,13 @@
 <templates>
     <div t-name="project.SubtaskCreate" class="subtask_create_input d-flex" owl="1">
         <input type="text" title="Rename" 
-            class='border-0 border-bottom py-1'
+            class='o_input border-0 border-bottom py-1'
+            t-att-class="{'o_field_invalid border-danger': state.isFieldInvalid}"
             t-ref='subtaskCreateInput'
             t-att-value="state.name"
             t-att-placeholder="placeholder"
             t-on-input="_onInput"
             t-on-click="_onClick"
-            t-on-blur="_onBlur"
             t-on-change="_onNameChanged"
             t-att-disabled="props.isReadonly"/>
         <button t-on-click="_onSaveClick" class="ms-auto fw-bold btn btn-link py-0 px-2">

--- addons/project/static/src/components/subtask_kanban_list/subtask_kanban_list.js ---
@@ -1,7 +1,9 @@
-import { Component, useState } from "@odoo/owl";
+import { Component, useState, markup } from "@odoo/owl";
 
 import { useService } from "@web/core/utils/hooks";
 import { registry } from "@web/core/registry";
+import { escape } from "@web/core/utils/strings";
+import { _t } from "@web/core/l10n/translation";
 
 import { Field, getPropertyFieldInfo } from "@web/views/fields/field";
 import { standardWidgetProps } from "@web/views/widgets/standard_widget_props";
@@ -24,20 +26,32 @@ export class SubtaskKanbanList extends Component {
     setup() {
         this.actionService = useService("action");
         this.orm = useService("orm");
+        this.notification = useService("notification");
         this.subtaskCreate = useState({
             open: false,
             name: "",
         });
+        this.state = useState({
+            subtasks: [],
+            isLoad: true,
+            prevSubtaskCount: 0,
+        });
     }
 
     get list() {
         return this.props.record.data.child_ids;
     }
 
     get closedList() {
-        return this.list.records.filter((child) => {
-            return !["1_done", "1_canceled"].includes(child.data.state);
-        });
+        const currentCount = this.list.records.length;
+        if (this.state.isLoad || currentCount !== this.state.prevSubtaskCount) {
+            this.state.prevSubtaskCount = currentCount;
+            this.state.isLoad = false;
+            this.state.subtasks = this.list.records
+                .filter((subtask) => !["1_done", "1_canceled"].includes(subtask.data.state))
+                .sort((a, b) => a.resId - b.resId);
+        }
+        return this.state.subtasks;
     }
 
     get fieldInfo() {
@@ -75,15 +89,25 @@ export class SubtaskKanbanList extends Component {
     }
 
     async _onSubtaskCreateNameChanged(name) {
-        await this.orm.create("project.task", [{
-            display_name: name,
-            parent_id: this.props.record.resId,
-            project_id: this.props.record.data.project_id[0],
-            user_ids: this.props.record.data.user_ids.resIds,
-        }]);
-        this.subtaskCreate.open = false;
-        this.subtaskCreate.name = "";
-        this.props.record.load();
+        if (name.trim() === "") {
+            this.notification.add(
+                markup(`<ul><li>${escape(_t("Display Name"))}</li></ul>`),
+                {
+                    title: _t("Invalid fields: "),
+                    type: "danger",
+                }
+            );
+        } else {
+            await this.orm.create("project.task", [{
+                display_name: name,
+                parent_id: this.props.record.resId,
+                project_id: this.props.record.data.project_id[0],
+                user_ids: this.props.record.data.user_ids.resIds,
+            }]);
+            this.subtaskCreate.open = false;
+            this.subtaskCreate.name = "";
+            this.props.record.load();
+        }
     }
 }
 

--- addons/project/static/src/components/subtask_kanban_list/subtask_kanban_list.xml ---
@@ -23,7 +23,8 @@
                         type="'project_task_state_selection'"
                         fieldInfo="fieldInfo.state"/>
                 </div>
-                <div class="subtask_create" t-on-click.stop="(ev) => this.onSubTaskCreated(ev)">
+                <div class="subtask_create" t-on-click.stop="(ev) => this.onSubTaskCreated(ev)"
+                    t-on-keydown="(ev) => ev.code === 'Escape' ? this._onBlur(ev) : ()=>{}">
                     <t t-if="subtaskCreate.open">
                         <SubtaskCreate
                             name="subtaskCreate.name"
@@ -32,7 +33,7 @@
                             onBlur.bind="_onBlur" />
                     </t>
                     <t t-else="">
-                        <i class="fa fa-plus my-2"/> New
+                        <i class="fa fa-plus my-2"/> Add Sub-task
                     </t>
                 </div>
             </div>

--- addons/project/static/tests/project_task_subtask.test.js ---
@@ -286,3 +286,30 @@ test("project.task (form): check focus on new subtask's name", async () => {
         message: "Upon clicking on 'Add a line', the new subtask's name should be focused.",
     });
 });
+
+test("project.task (kanban): check subtask creation when input is empty", async () => {
+    await mountView({
+        resModel: "project.task",
+        type: "kanban",
+    });
+    await click(".subtask_list_button");
+    await animationFrame();
+    await click(".subtask_create");
+    await animationFrame();
+    await click(".subtask_create_input input");
+    await edit("");
+    await click(".subtask_create_input button");
+    await animationFrame();
+    expect(".subtask_create_input input").toHaveClass("o_field_invalid", {
+        message: "input field should be displayed as invalid",
+    });
+    expect(".o_notification_content").toHaveInnerHTML("<ul><li>Display Name</li></ul>", {
+        message: "The content of the notification should contain 'Display Name'.",
+    });
+    expect(".o_notification_title").toHaveText("Invalid fields:", {
+        message: "The notification title should be 'Invalid fields'.",
+    });
+    expect(".o_notification_bar").toHaveClass("bg-danger", {
+        message: "The notification bar should have type 'danger'.",
+    });
+});

