--- lib/utils.js ---
@@ -30,12 +30,6 @@
       aPath = ("" + path).split(".");
       value = object;
       key = aPath.shift();
-      if (key === 'constructor' && typeof object[key] === 'function') {
-        return;
-      }
-      if (key === '__proto__') {
-        return;
-      }
       if (aPath.length === 0) {
         value = value[key.replace("%2E", ".")];
         if (value == null) {
@@ -64,17 +58,14 @@
       aPath = ("" + path).split(".");
       value = object;
       key = aPath.shift();
-      if (key === 'constructor' && typeof object[key] === 'function') {
-        return object;
-      }
-      if (key === '__proto__') {
-        return object;
-      }
       while (key) {
         key = key.replace("%2E", ".");
         if (value[key] == null) {
           value[key] = {};
         }
+        if (!value.hasOwnProperty(key)) {
+          return;
+        }
         if (aPath.length === 0) {
           if (defaultValue != null) {
             value[key] = defaultValue;

--- src/utils.coffee ---
@@ -31,11 +31,6 @@
         value = object
         key   = aPath.shift()
 
-        if key is 'constructor' and typeof object[key] is 'function'
-            return
-        if key is '__proto__'
-            return
-
         if aPath.length is 0
             # This is only a 1 deep check
             #
@@ -60,11 +55,6 @@
         value = object
         key   = aPath.shift()
 
-        if key is 'constructor' and typeof object[key] is 'function'
-            return object
-        if key is '__proto__'
-            return object
-
         while key
             key = key.replace( "%2E", "." )
 
@@ -73,6 +63,9 @@
             if not value[ key ]?
                 value[ key ] = {}
 
+            if not value.hasOwnProperty(key)
+                return
+
             if aPath.length is 0
                 # Assign the default value to the newly created key if supplied
                 #

--- test/prototype-pollution.coffee ---
@@ -5,8 +5,10 @@ describe( "Prototype pollution", () ->
     describe( "#setValue()", () ->
         it( "Should not pollute value", () ->
             objectUtils.setValue( '__proto__.polluted', {}, true )
-
             chai.expect( global.polluted ).to.eql( undefined )
+
+            objectUtils.setValue('this.constructor.prototype.polluted', {}, 'yes');
+            chai.expect( {}.polluted ).to.eql( undefined )
         )
     )
 )

