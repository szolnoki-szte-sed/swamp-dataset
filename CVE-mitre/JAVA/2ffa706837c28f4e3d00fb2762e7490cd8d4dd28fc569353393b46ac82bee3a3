--- server/src/main/java/com/thoughtworks/go/server/service/BackupRuntimeValidator.java ---
@@ -0,0 +1,70 @@
+/*
+ * Copyright 2024 Thoughtworks, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.thoughtworks.go.server.service;
+
+import com.thoughtworks.go.config.CruiseConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
+
+import static org.apache.commons.lang3.StringUtils.isBlank;
+
+public class BackupRuntimeValidator {
+    private final ArtifactsDirHolder artifactsDirHolder;
+
+    public BackupRuntimeValidator(ArtifactsDirHolder artifactsDirHolder) {
+        this.artifactsDirHolder = artifactsDirHolder;
+    }
+
+    void validatePostBackupScript(String postBackupScriptFile) {
+        if (isBlank(postBackupScriptFile)) {
+            return;
+        }
+
+        if (locatedInSensitiveDirectory(postBackupScriptFile, artifactsDirHolder)) {
+            throw new IllegalArgumentException("Post backup script cannot be executed when located within pipelines or artifact storage.");
+        }
+    }
+
+    private static boolean locatedInSensitiveDirectory(String postBackupScriptFile, ArtifactsDirHolder artifactsDirHolder) {
+        try {
+            Path canonicalScriptLocation = canonicalPath(postBackupScriptFile);
+            return insideNonBackupsArtifactDirectory(artifactsDirHolder, canonicalScriptLocation) || insidePipelinesStorage(canonicalScriptLocation);
+        } catch (IOException ignore) {
+            // Issue accessing canonical path, assume either script file or targetsit does not exist, so by definition not in a sensitive location
+            return false;
+        }
+    }
+
+    private static boolean insidePipelinesStorage(Path canonicalScriptLocation) throws IOException {
+        return canonicalScriptLocation.startsWith(canonicalPath(CruiseConfig.WORKING_BASE_DIR));
+    }
+
+    private static boolean insideNonBackupsArtifactDirectory(ArtifactsDirHolder artifactsDirHolder, Path canonicalScriptLocation) throws IOException {
+        return canonicalScriptLocation.startsWith(canonicalPath(artifactsDirHolder.getArtifactsDir())) &&
+                !canonicalScriptLocation.startsWith(canonicalPath(artifactsDirHolder.getBackupsDir()));
+    }
+
+    private static Path canonicalPath(File path) throws IOException {
+        return path.getCanonicalFile().toPath();
+    }
+
+    private static Path canonicalPath(String path) throws IOException {
+        return canonicalPath(new File(path));
+    }
+}

--- server/src/main/java/com/thoughtworks/go/server/service/BackupService.java ---
@@ -81,6 +81,7 @@ public enum BackupInitiator {
     private final SystemEnvironment systemEnvironment;
     private final ConfigRepository configRepository;
     private final Database databaseStrategy;
+    private final BackupRuntimeValidator validator;
     private volatile ServerBackup runningBackup;
     private static final String CONFIG_BACKUP_ZIP = "config-dir.zip";
     private static final String WRAPPER_CONFIG_BACKUP_ZIP = "wrapper-config-dir.zip";
@@ -106,6 +107,7 @@ public BackupService(ArtifactsDirHolder artifactsDirHolder,
         this.databaseStrategy = databaseStrategy;
         this.timeProvider = timeProvider;
         this.backupQueue = backupQueue;
+        this.validator = new BackupRuntimeValidator(artifactsDirHolder);
     }
 
     public void initialize() {
@@ -160,6 +162,7 @@ private ServerBackup performBackup(ServerBackup backup, List<BackupUpdateListene
         synchronized (BACKUP_MUTEX) {
             try {
                 runningBackup = backup;
+                validator.validatePostBackupScript(postBackupScriptFile());
                 notifyUpdateToListeners(backupUpdateListeners, BackupProgressStatus.CREATING_DIR);
                 if (!destDir.mkdirs()) {
                     notifyErrorToListeners(backupUpdateListeners, "Failed to perform backup. Reason: Could not create the backup directory.");

--- server/src/test-fast/java/com/thoughtworks/go/server/service/BackupRuntimeValidatorTest.java ---
@@ -0,0 +1,97 @@
+/*
+ * Copyright 2024 Thoughtworks, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.thoughtworks.go.server.service;
+
+import com.thoughtworks.go.config.ServerConfig;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.io.File;
+import java.nio.file.Paths;
+
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.mockito.Mockito.lenient;
+import static org.mockito.Mockito.when;
+
+@ExtendWith(MockitoExtension.class)
+class BackupRuntimeValidatorTest {
+
+    @Mock
+    ArtifactsDirHolder artifactsDirHolder;
+
+    @InjectMocks
+    BackupRuntimeValidator validator;
+
+    @BeforeEach
+    public void setUp() {
+        lenient().when(artifactsDirHolder.getBackupsDir()).thenReturn(new File(ServerConfig.SERVER_BACKUPS));
+    }
+
+    @Test
+    void shouldValidatePostBackupScriptWithAbsoluteArtifacts() {
+        when(artifactsDirHolder.getArtifactsDir()).thenReturn(new File("/godata/artifacts"));
+        validator.validatePostBackupScript("/usr/local/bin/post-backup.sh");
+    }
+
+    @Test
+    void shouldValidatePostBackupScriptWithRelativeArtifacts() {
+        when(artifactsDirHolder.getArtifactsDir()).thenReturn(new File("artifacts"));
+        validator.validatePostBackupScript("/usr/local/bin/post-backup.sh");
+    }
+
+    @Test
+    void shouldValidatePostBackupScriptWithMatchingPrefixesButDifferentDirectories() {
+        when(artifactsDirHolder.getArtifactsDir()).thenReturn(new File("artifacts"));
+        validator.validatePostBackupScript("artifacts-scripts/post-backup.sh");
+    }
+
+    @Test
+    void shouldValidatePostBackupScriptInsideBackupsDirectory() {
+        when(artifactsDirHolder.getArtifactsDir()).thenReturn(new File("artifacts"));
+        when(artifactsDirHolder.getBackupsDir()).thenReturn(new File("artifacts/serverBackups"));
+        validator.validatePostBackupScript("artifacts/serverBackups/post-backup.sh");
+    }
+
+    @Test
+    void shouldFailIfPostBackupScriptIsInsideArtifacts() {
+        shouldFailBackupScriptLocationFor("artifacts/post-backup.sh", "artifacts");
+        shouldFailBackupScriptLocationFor("/usr/local/bin/artifacts/post-backup.sh", "/usr/local/bin/artifacts");
+    }
+
+    @Test
+    void shouldFailIfPostBackupScriptIsInsideWorkingDir() {
+        shouldFailBackupScriptLocationFor("pipelines/post-backup.sh", "artifacts");
+        shouldFailBackupScriptLocationFor(Paths.get(System.getProperty("user.dir"), "artifacts").toString(), "artifacts");
+    }
+
+    @Test
+    void shouldFailIfPostBackupScriptIsInsideArtifactsAfterCanonicalization() {
+        shouldFailBackupScriptLocationFor(Paths.get(System.getProperty("user.dir"), "artifacts/post-backup.sh").toString(), "artifacts");
+        shouldFailBackupScriptLocationFor("artifacts/post-backup.sh", Paths.get(System.getProperty("user.dir"), "artifacts").toString());
+    }
+
+    private void shouldFailBackupScriptLocationFor(String backupScriptLocation, String artifactsDir) {
+        when(artifactsDirHolder.getArtifactsDir()).thenReturn(new File(artifactsDir));
+        assertThatThrownBy(() -> validator.validatePostBackupScript(backupScriptLocation))
+            .isInstanceOf(IllegalArgumentException.class)
+            .hasMessage("Post backup script cannot be executed when located within pipelines or artifact storage.");
+    }
+}
\ No newline at end of file

--- server/src/test-integration/java/com/thoughtworks/go/server/service/BackupServiceIntegrationTest.java ---
@@ -54,7 +54,6 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-import javax.sql.DataSource;
 import java.io.*;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -82,7 +81,6 @@ public class BackupServiceIntegrationTest {
     BackupService backupService;
     @Autowired
     GoConfigService goConfigService;
-    @Autowired DataSource dataSource;
     @Autowired ArtifactsDirHolder artifactsDirHolder;
     @Autowired DatabaseAccessHelper dbHelper;
     @Autowired
@@ -96,7 +94,7 @@ public class BackupServiceIntegrationTest {
     @Autowired Database databaseStrategy;
     @Autowired ServerBackupQueue backupQueue;
 
-    private GoConfigFileHelper configHelper = new GoConfigFileHelper();
+    private final GoConfigFileHelper configHelper = new GoConfigFileHelper();
 
     private File backupsDirectory;
     private byte[] originalCipher;
@@ -298,7 +296,7 @@ public void shouldNotSendEmailToAdminAfterTakingBackupIfEmailConfigIsNotSet() {
     }
 
     @Test
-    public void shouldSendEmailToAdminWhenTheBackupFails() throws Exception {
+    public void shouldSendEmailToAdminWhenTheBackupFails() {
         GoConfigService configService = mock(GoConfigService.class);
         ServerConfig serverConfig = new ServerConfig();
         serverConfig.setBackupConfig(new BackupConfig().setEmailOnFailure(true));
@@ -327,11 +325,11 @@ public void shouldSendEmailToAdminWhenTheBackupFails() throws Exception {
         verify(goMailSender).send(new SendEmailMessage("Server Backup Failed", body, "mail@admin.com"));
         verifyNoMoreInteractions(goMailSender);
 
-        assertThat(FileUtils.listFiles(backupsDirectory, TrueFileFilter.TRUE, TrueFileFilter.TRUE).isEmpty()).isTrue();
+        assertThat(FileUtils.listFiles(backupsDirectory, TrueFileFilter.TRUE, TrueFileFilter.TRUE)).isEmpty();
     }
 
     @Test
-    public void shouldNotSendEmailToAdminWhenTheBackupFailsAndEmailConfigIsNotSet() throws Exception {
+    public void shouldNotSendEmailToAdminWhenTheBackupFailsAndEmailConfigIsNotSet() {
         GoConfigService configService = mock(GoConfigService.class);
         ServerConfig serverConfig = new ServerConfig();
         serverConfig.setBackupConfig(new BackupConfig());
@@ -356,7 +354,7 @@ public void shouldNotSendEmailToAdminWhenTheBackupFailsAndEmailConfigIsNotSet()
         assertThat(backup.getMessage()).isEqualTo("Failed to perform backup. Reason: Oh no!");
         verifyNoMoreInteractions(goMailSender);
 
-        assertThat(FileUtils.listFiles(backupsDirectory, TrueFileFilter.TRUE, TrueFileFilter.TRUE).isEmpty()).isTrue();
+        assertThat(FileUtils.listFiles(backupsDirectory, TrueFileFilter.TRUE, TrueFileFilter.TRUE)).isEmpty();
     }
 
     @Test
@@ -449,6 +447,36 @@ public void completed(String message) {
         backupThd.join();
     }
 
+    @Test
+    public void shouldFailFastOnBadPostBackupScriptLocation() throws InterruptedException {
+        final Semaphore waitForBackupToComplete = new Semaphore(1);
+        GoConfigService configService = mock(GoConfigService.class);
+        ServerConfig serverConfig = new ServerConfig();
+        String badPostBackupScriptLocation = CruiseConfig.WORKING_BASE_DIR + "artifacts/should-not-be-here.sh";
+        serverConfig.setBackupConfig(new BackupConfig().setSchedule(null).setPostBackupScript(badPostBackupScriptLocation));
+        when(configService.serverConfig()).thenReturn(serverConfig);
+        GoMailSender goMailSender = mock(GoMailSender.class);
+        when(configService.getMailSender()).thenReturn(goMailSender);
+        when(configService.adminEmail()).thenReturn("mail@admin.com");
+        when(configService.isUserAdmin(admin)).thenReturn(true);
+        TimeProvider timeProvider = mock(TimeProvider.class);
+        DateTime now = new DateTime();
+        when(timeProvider.currentDateTime()).thenReturn(now);
+
+        final MessageCollectingBackupUpdateListener backupUpdateListener = new MessageCollectingBackupUpdateListener(waitForBackupToComplete);
+
+        waitForBackupToComplete.acquire();
+        backupService = new BackupService(artifactsDirHolder, configService, timeProvider, backupInfoRepository, systemEnvSpy, configRepository,
+            databaseStrategy, backupQueue);
+        Thread backupThd = new Thread(() -> backupService.startBackup(admin, backupUpdateListener));
+
+        backupThd.start();
+        waitForBackupToComplete.acquire();
+        assertThat(backupUpdateListener.messages).isEmpty();
+        assertThat(backupUpdateListener.errors).containsExactly("Failed to perform backup. Reason: Post backup script cannot be executed when located within pipelines or artifact storage.");
+        backupThd.join();
+    }
+
     @Test
     public void shouldExecutePostBackupScriptAndReturnResultOnSuccess() throws InterruptedException {
         final Semaphore waitForBackupToComplete = new Semaphore(1);
@@ -473,7 +501,7 @@ public void shouldExecutePostBackupScriptAndReturnResultOnSuccess() throws Inter
 
         backupThd.start();
         waitForBackupToComplete.acquire();
-        assertThat(backupUpdateListener.getMessages().contains(BackupProgressStatus.POST_BACKUP_SCRIPT_COMPLETE.getMessage())).isTrue();
+        assertThat(backupUpdateListener.messages).contains(BackupProgressStatus.POST_BACKUP_SCRIPT_COMPLETE.getMessage());
         backupThd.join();
     }
 
@@ -603,31 +631,30 @@ private File backedUpFile(final String filename) {
         return new ArrayList<>(FileUtils.listFiles(backupsDirectory, new NameFileFilter(filename), TrueFileFilter.TRUE)).get(0);
     }
 
-    private void cleanupBackups() throws IOException {
+    private void cleanupBackups() {
         FileUtils.deleteQuietly(artifactsDirHolder.getArtifactsDir());
     }
 
-    class MessageCollectingBackupUpdateListener implements BackupUpdateListener {
+    static class MessageCollectingBackupUpdateListener implements BackupUpdateListener {
 
-        private final List<String> messages;
+        private final List<String> messages = new ArrayList<>();
+        private final List<String> errors = new ArrayList<>();
 
         private final Semaphore backupComplete;
+
         MessageCollectingBackupUpdateListener(Semaphore backupComplete) {
             this.backupComplete = backupComplete;
-            this.messages = new ArrayList<>();
         }
 
         @Override
         public void updateStep(BackupProgressStatus step) {
             messages.add(step.getMessage());
         }
 
-        public List<String> getMessages() {
-            return messages;
-        }
-
         @Override
         public void error(String message) {
+            errors.add(message);
+            backupComplete.release();
         }
 
         @Override

