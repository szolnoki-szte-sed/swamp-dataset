diff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpoint.java b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpoint.java
index d07b06876e2..1de33c74f7e 100644
--- a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpoint.java
+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpoint.java
@@ -27,6 +27,8 @@
 import org.springframework.web.context.request.RequestContextHolder;
 import org.springframework.web.context.request.ServletRequestAttributes;
 
+import javax.mail.internet.AddressException;
+import javax.mail.internet.InternetAddress;
 import javax.servlet.http.HttpServletRequest;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -34,7 +36,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.regex.Pattern;
 
 import static org.cloudfoundry.identity.uaa.codestore.ExpiringCodeType.INVITATION;
 import static org.cloudfoundry.identity.uaa.constants.OriginKeys.ORIGIN;
@@ -51,7 +52,6 @@ public class InvitationsEndpoint {
     private static final int INVITATION_EXPIRY_DAYS = 7;
     public static final String USER_ID = "user_id";
     public static final String EMAIL = "email";
-    private static final Pattern emailPattern = Pattern.compile("^(.+)@(.+)\\.(.+)$");
 
     private final ScimUserProvisioning scimUserProvisioning;
     private final IdentityProviderProvisioning identityProviderProvisioning;
@@ -98,7 +98,7 @@ public ResponseEntity<InvitationsResponse> inviteUsers(@RequestBody InvitationsR
 
         for (String email : invitations.getEmails()) {
             try {
-                if (email != null && emailPattern.matcher(email).matches()) {
+                if (email != null && validateEmail(email)) {
                     List<IdentityProvider> providers = filter(activeProviders, client, email);
                     if (providers.size() == 1) {
                         ScimUser user = findOrCreateUser(email, providers.get(0).getOriginKey());
@@ -140,7 +140,7 @@ public ResponseEntity<InvitationsResponse> inviteUsers(@RequestBody InvitationsR
 
     private ScimUser findOrCreateUser(String email, String origin) {
         email = email.trim().toLowerCase();
-        List<ScimUser> results = scimUserProvisioning.query(String.format("email eq \"%s\" and origin eq \"%s\"", email, origin), IdentityZoneHolder.get().getId());
+        List<ScimUser> results = scimUserProvisioning.retrieveByEmailAndZone(email, origin, IdentityZoneHolder.get().getId());
         if (results == null || results.size() == 0) {
             ScimUser user = new ScimUser(null, email, "", "");
             user.setPrimaryEmail(email.toLowerCase());
@@ -155,4 +155,14 @@ private ScimUser findOrCreateUser(String email, String origin) {
         }
     }
 
+    private boolean validateEmail(String email) {
+        boolean valid = true;
+        try {
+            InternetAddress emailAddr = new InternetAddress(email);
+            emailAddr.validate();
+        } catch (AddressException e) {
+            valid = false;
+        }
+        return valid;
+    }
 }
diff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/scim/ScimUserProvisioning.java b/server/src/main/java/org/cloudfoundry/identity/uaa/scim/ScimUserProvisioning.java
index ef783136a3a..d1f8bec403f 100644
--- a/server/src/main/java/org/cloudfoundry/identity/uaa/scim/ScimUserProvisioning.java
+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/scim/ScimUserProvisioning.java
@@ -18,10 +18,13 @@
 import org.cloudfoundry.identity.uaa.scim.exception.InvalidScimResourceException;
 import org.cloudfoundry.identity.uaa.scim.exception.ScimResourceNotFoundException;
 
+import java.util.List;
+
 
 public interface ScimUserProvisioning extends ResourceManager<ScimUser>, Queryable<ScimUser> {
 
     ScimUser createUser(ScimUser user, String password, String zoneId) throws InvalidPasswordException, InvalidScimResourceException;
+    List<ScimUser> retrieveByEmailAndZone(String email, String origin, String zoneId);
 
     void changePassword(String id, String oldPassword, String newPassword, String zoneId) throws ScimResourceNotFoundException;
 
diff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java b/server/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java
index c8d857d214c..53bf1cf9b1f 100644
--- a/server/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java
+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java
@@ -93,6 +93,7 @@ public Logger getLogger() {
     public static final String READ_PASSWORD_CHANGE_REQUIRED_SQL = "select passwd_change_required from users where id=? and identity_zone_id=?";
 
     public static final String USER_BY_ID_QUERY = "select " + USER_FIELDS + " from users " + "where id=? and identity_zone_id=?";
+    public static final String USER_BY_EMAIL_QUERY = "select " + USER_FIELDS + " from users " + "where email=? and origin=? and identity_zone_id=?";
 
     public static final String ALL_USERS = "select " + USER_FIELDS + " from users";
 
@@ -140,6 +141,15 @@ public ScimUser retrieve(String id, String zoneId) {
         }
     }
 
+    @Override
+    public List<ScimUser> retrieveByEmailAndZone(String email, String origin, String zoneId) {
+        try {
+            return jdbcTemplate.query(USER_BY_EMAIL_QUERY, mapper, email, origin, zoneId);
+        } catch (EmptyResultDataAccessException e) {
+            throw new ScimResourceNotFoundException("User with email " + email + " does not exist");
+        }
+    }
+
     @Override
     protected String getBaseSqlQuery() {
         return ALL_USERS;
diff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioningTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioningTests.java
index 4cf1f3bf748..be553f298e8 100644
--- a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioningTests.java
+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioningTests.java
@@ -74,11 +74,13 @@ class JdbcScimUserProvisioningTests {
 
     @Autowired
     private JdbcTemplate jdbcTemplate;
+    private String joeEmail;
 
     @BeforeEach
     void setUp(@Autowired LimitSqlAdapter limitSqlAdapter) {
         generator = new RandomValueStringGenerator();
         joeId = "joeId-" + UUID.randomUUID().toString().substring("joeId-".length());
+        joeEmail = "joe@joe.com";
         String mabelId = "mabelId-" + UUID.randomUUID().toString().substring("mabelId-".length());
         pagingListFactory = new JdbcPagingListFactory(jdbcTemplate, limitSqlAdapter);
 
@@ -94,7 +96,7 @@ void setUp(@Autowired LimitSqlAdapter limitSqlAdapter) {
         filterConverter.setAttributeNameMapper(new SimpleAttributeNameMapper(replaceWith));
         jdbcScimUserProvisioning.setQueryConverter(filterConverter);
 
-        addUser(jdbcTemplate, joeId, "joe", passwordEncoder.encode("joespassword"), "joe@joe.com", "Joe", "User", "+1-222-1234567", currentIdentityZoneId);
+        addUser(jdbcTemplate, joeId, "joe", passwordEncoder.encode("joespassword"), joeEmail, "Joe", "User", "+1-222-1234567", currentIdentityZoneId);
         addUser(jdbcTemplate, mabelId, "mabel", passwordEncoder.encode("mabelspassword"), "mabel@mabel.com", "Mabel", "User", "", currentIdentityZoneId);
     }
 
@@ -103,6 +105,33 @@ void tearDown() {
         jdbcTemplate.execute("delete from users");
     }
 
+
+    @WithDatabaseContext
+    @Nested
+    class WhenFindingByEmailAndZone {
+        @Test
+        void canRetrieveExistingUser() {
+            List<ScimUser> found = jdbcScimUserProvisioning.retrieveByEmailAndZone(joeEmail, UAA, currentIdentityZoneId);
+            assertEquals(1, found.size());
+
+            ScimUser joe = found.get(0);
+            assertNotNull(joe);
+            assertEquals(joeId, joe.getId());
+            assertEquals("Joe", joe.getGivenName());
+            assertEquals("User", joe.getFamilyName());
+            assertEquals("joe@joe.com", joe.getPrimaryEmail());
+            assertEquals("joe", joe.getUserName());
+            assertEquals("+1-222-1234567", joe.getPhoneNumbers().get(0).getValue());
+            assertNull(joe.getGroups());
+        }
+
+        @Test
+        void cannotRetrieveNonexistentUser() {
+            List<ScimUser> found = jdbcScimUserProvisioning.retrieveByEmailAndZone("unknown@example.com", UAA, currentIdentityZoneId);
+            assertEquals(0, found.size());
+        }
+    }
+
     @Test
     void canCreateUserWithExclamationMarkInUsername() {
         String userName = "jo!!@foo.com";
diff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java
index 05c248e92df..3c4efae704d 100644
--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java
+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java
@@ -378,10 +378,10 @@ void inviteUserWithInvalidEmails() throws Exception {
 
         assertEquals("email.invalid", response.getFailedInvites().get(0).getErrorCode());
         assertEquals("email.invalid", response.getFailedInvites().get(1).getErrorCode());
-        assertEquals("email.invalid", response.getFailedInvites().get(2).getErrorCode());
+        assertEquals("provider.non-existent", response.getFailedInvites().get(2).getErrorCode());
         assertEquals(invalidEmail1 + " is invalid email.", response.getFailedInvites().get(0).getErrorMessage());
         assertEquals(invalidEmail2 + " is invalid email.", response.getFailedInvites().get(1).getErrorMessage());
-        assertEquals(invalidEmail3 + " is invalid email.", response.getFailedInvites().get(2).getErrorMessage());
+        assertEquals("No authentication provider found.", response.getFailedInvites().get(2).getErrorMessage());
     }
 
     @Test
