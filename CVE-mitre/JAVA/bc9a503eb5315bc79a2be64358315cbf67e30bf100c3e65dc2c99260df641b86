--- managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java ---
@@ -135,6 +135,11 @@ public Result create(UUID customerUUID, Http.Request request) {
       formData.setPassword(generatedPassword); // Password is not used.
     }
 
+    if (formData.getRole() == Users.Role.SuperAdmin) {
+      throw new PlatformServiceException(BAD_REQUEST, "Cannot create an user as SuperAdmin");
+    }
+
+    // Validate password.
     passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getPassword());
     Users user =
         Users.create(
@@ -232,7 +237,21 @@ public Result changeRole(UUID customerUUID, UUID userUUID, String role, Http.Req
     if (Role.SuperAdmin == user.getRole()) {
       throw new PlatformServiceException(BAD_REQUEST, "Cannot change super admin role.");
     }
-    user.setRole(Role.valueOf(role));
+
+    Users.Role userRole = null;
+    try {
+      userRole = Users.Role.valueOf(role);
+    } catch (IllegalArgumentException ex) {
+      throw new PlatformServiceException(BAD_REQUEST, "Role name provided is not supported");
+    }
+
+    if (userRole == null) {
+      throw new PlatformServiceException(BAD_REQUEST, "Role name provided is not supported");
+    } else if (userRole == Users.Role.SuperAdmin) {
+      throw new PlatformServiceException(BAD_REQUEST, "Cannot edit the user role to SuperAdmin");
+    }
+
+    user.setRole(userRole);
     user.save();
     auditService()
         .createAuditEntryWithReqBody(

--- managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java ---
@@ -114,6 +114,24 @@ public void testCreateUserWithValidToken() throws IOException {
     assertAuditEntry(1, customer1.getUuid());
   }
 
+  @Test
+  public void testCreateSuperAdminUserWithValidToken() throws IOException {
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authToken1).build();
+    ObjectNode params = Json.newObject();
+    params.put("email", "foo@bar.com");
+    params.put("password", "new-Password1");
+    params.put("confirmPassword", "new-Password1");
+    params.put("role", "SuperAdmin");
+    Result result =
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest("POST", String.format(baseRoute, customer1.getUuid()))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(BAD_REQUEST, result.status());
+  }
+
   @Test
   public void testDeleteUserWithValidToken() throws IOException {
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authToken1).build();
@@ -165,6 +183,24 @@ public void testRoleChangeSuperAdmin() throws IOException {
     assertEquals(result.status(), BAD_REQUEST);
   }
 
+  @Test
+  public void testRoleChangeToSuperAdmin() throws IOException {
+    Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);
+    assertEquals(testUser1.getRole(), Role.Admin);
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authToken1).build();
+    Result result =
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format(
+                                "%s/%s?role=SuperAdmin",
+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                        .cookie(validCookie)));
+    assertEquals(result.status(), BAD_REQUEST);
+  }
+
   @Test
   public void testPasswordChangeInvalid() throws IOException {
     Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);

