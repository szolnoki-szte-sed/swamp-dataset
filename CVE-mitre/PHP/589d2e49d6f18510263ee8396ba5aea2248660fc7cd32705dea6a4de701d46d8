--- src/Sulu/Bundle/SecurityBundle/Controller/ProfileController.php ---
@@ -118,7 +118,7 @@ public function putAction(Request $request)
     {
         $this->checkArguments($request);
         $user = $this->tokenStorage->getToken()->getUser();
-        $this->userManager->save($request->request->all(), $request->get('locale'), $user->getId(), true);
+        $this->userManager->save($this->getData($request), $request->get('locale'), $user->getId(), true);
 
         $user->setFirstName($request->get('firstName'));
         $user->setLastName($request->get('lastName'));
@@ -231,4 +231,20 @@ private function checkArguments(Request $request)
             throw new MissingArgumentException($this->userClass, 'locale');
         }
     }
+
+    /**
+     * @return array<string, mixed>
+     */
+    protected function getData(Request $request): array
+    {
+        $data = [];
+
+        foreach ($request->request->all() as $key => $value) {
+            if (\in_array($key, ['firstName', 'lastName', 'username', 'email', 'password', 'locale'], true)) {
+                $data[$key] = $value;
+            }
+        }
+
+        return $data;
+    }
 }

--- src/Sulu/Bundle/SecurityBundle/Tests/Functional/Controller/ProfileControllerTest.php ---
@@ -87,6 +87,30 @@ public function testPut()
         $this->assertEquals('de', $response->locale);
     }
 
+    public function testPutInvalidField()
+    {
+        $this->client->jsonRequest(
+            'PUT',
+            '/api/profile',
+            [
+                'firstName' => 'Hans',
+                'lastName' => 'Mustermann',
+                'username' => 'hansi',
+                'email' => 'hans.mustermann@muster.at',
+                'password' => 'testpassword',
+                'locale' => 'de',
+            ]
+        );
+
+        $response = \json_decode($this->client->getResponse()->getContent());
+        $this->assertHttpStatusCode(200, $this->client->getResponse());
+        $this->assertEquals('Hans', $response->firstName);
+        $this->assertEquals('Mustermann', $response->lastName);
+        $this->assertEquals('hansi', $response->username);
+        $this->assertEquals('hans.mustermann@muster.at', $response->email);
+        $this->assertEquals('de', $response->locale);
+    }
+
     public function testPutEmailNotUnique()
     {
         $existingContact = new Contact();

