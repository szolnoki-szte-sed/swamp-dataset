--- app/Http/Controllers/V1/Admin/Invoice/InvoicesController.php ---
@@ -102,7 +102,7 @@ public function delete(DeleteInvoiceRequest $request)
     {
         $this->authorize('delete multiple invoices');
 
-        Invoice::destroy($request->ids);
+        Invoice::deleteInvoices($request->ids);
 
         return response()->json([
             'success' => true,

--- app/Http/Controllers/V1/Admin/Payment/PaymentMethodsController.php ---
@@ -84,12 +84,14 @@ public function destroy(PaymentMethod $paymentMethod)
     {
         $this->authorize('delete', $paymentMethod);
 
-        $payments = $paymentMethod->payments;
-
-        if ($payments->count() > 0) {
+        if ($paymentMethod->payments()->exists()) {
             return respondJson('payments_attached', 'Payments Attached.');
         }
 
+        if ($paymentMethod->expenses()->exists()) {
+            return respondJson('expenses_attached', 'Expenses Attached.');
+        }
+
         $paymentMethod->delete();
 
         return response()->json([

--- app/Http/Controllers/V1/PDF/DownloadReceiptController.php ---
@@ -17,6 +17,8 @@ class DownloadReceiptController extends Controller
      */
     public function __invoke(Expense $expense)
     {
+        $this->authorize('view', $expense);
+
         if ($expense) {
             $media = $expense->getFirstMedia('receipts');
             if ($media) {

--- app/Models/Invoice.php ---
@@ -698,4 +698,19 @@ public function changeInvoiceStatus($amount)
 
         $this->save();
     }
+
+    public static function deleteInvoices($ids)
+    {
+        foreach ($ids as $id) {
+            $invoice = self::find($id);
+
+            if ($invoice->transactions()->exists()) {
+                $invoice->transactions()->delete();
+            }
+
+            $invoice->delete();
+        }
+
+        return true;
+    }
 }

--- app/Models/PaymentMethod.php ---
@@ -31,6 +31,11 @@ public function payments()
         return $this->hasMany(Payment::class);
     }
 
+    public function expenses()
+    {
+        return $this->hasMany(Expense::class);
+    }
+
     public function company()
     {
         return $this->belongsTo(Company::class);

