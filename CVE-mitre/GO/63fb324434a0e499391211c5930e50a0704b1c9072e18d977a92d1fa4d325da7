--- mesheryctl/pkg/utils/helpers.go ---
@@ -547,7 +547,10 @@ func ClearLine() {
 		clearCmd = exec.Command("cmd", "/c", "cls") // for Windows
 	}
 	clearCmd.Stdout = os.Stdout
-	_ = clearCmd.Run()
+	err := clearCmd.Run()
+	if err != nil {
+		log.Fatal(err)
+	}
 }
 
 // StringContainedInSlice returns the index in which a string is a substring in a list of strings

--- server/handlers/meshsync_handler.go ---
@@ -225,6 +225,7 @@ func (h *Handler) GetMeshSyncResourcesKinds(rw http.ResponseWriter, r *http.Requ
 		result = result.Offset(offset)
 	}
 
+	order = models.SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 	if order != "" {
 		if sort == "desc" {
 			result = result.Order(clause.OrderByColumn{Column: clause.Column{Name: order}, Desc: true})

--- server/models/events_persister.go ---
@@ -68,10 +68,11 @@ func (e *EventsPersister) GetAllEvents(eventsFilter *events.EventsFilter, userID
 		finder = finder.Where("status = ?", eventsFilter.Status)
 	}
 
+	sortOn := SanitizeOrderInput(eventsFilter.SortOn, []string{"created_at", "updated_at", "name"})
 	if eventsFilter.Order == "asc" {
-		finder = finder.Order(eventsFilter.SortOn)
+		finder = finder.Order(sortOn)
 	} else {
-		finder = finder.Order(clause.OrderByColumn{Column: clause.Column{Name: eventsFilter.SortOn}, Desc: true})
+		finder = finder.Order(clause.OrderByColumn{Column: clause.Column{Name: sortOn}, Desc: true})
 	}
 
 	var count int64

