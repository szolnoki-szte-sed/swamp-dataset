--- src/index.ts ---
@@ -147,7 +147,7 @@ namespace degenerator {
 		const r = function (this: any, ...args: A): Promise<R> {
 			try {
 				const p = fn.apply(this, args);
-				if (typeof p.then === 'function') {
+				if (typeof p?.then === 'function') {
 					return p;
 				}
 				return Promise.resolve(p);

--- test/test.ts ---
@@ -136,7 +136,7 @@ describe('degenerator()', () => {
 				'Expected a "function" to be returned for `foo`, but got "number"'
 			);
 		});
-		it('should be compile if branches', () => {
+		it('should compile if branches', () => {
 			function ifA(): string {
 				if (a()) {
 					return 'foo';
@@ -173,5 +173,12 @@ describe('degenerator()', () => {
 			}
 			assert.equal(err.message,'process is not defined')
 		});
+		it('should allow to return synchronous undefined', () => {
+			function u() {}
+			const fn = compile(`${u}`, 'u', ['']);
+			return fn().then(val => {
+				assert.strictEqual(val, undefined);
+			});
+		});
 	});
 });

