--- spring boot/common-user-management/pom.xml ---
@@ -99,9 +99,9 @@
 		</dependency>
 
 		<dependency>
-			<groupId>com.google.firebase</groupId>
-			<artifactId>firebase-admin</artifactId>
-			<version>9.2.0</version>
+			<groupId>org.apache.tika</groupId>
+			<artifactId>tika-core</artifactId>
+			<version>2.8.0</version>
 		</dependency>
 
 		<dependency>
@@ -114,6 +114,8 @@
 			<artifactId>spring-security-test</artifactId>
 			<scope>test</scope>
 		</dependency>
+
+
 	</dependencies>
 
 	<build>

--- spring boot/common-user-management/src/main/java/common/management/common/service/impl/FileSystemStorageService.java ---
@@ -4,6 +4,7 @@
 import jakarta.annotation.PostConstruct;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.io.FilenameUtils;
+import org.apache.tika.Tika;
 import org.imgscalr.Scalr;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.core.io.Resource;
@@ -41,14 +42,13 @@ public class FileSystemStorageService implements StorageService {
     private final HashSet<String> allowedFileType = new HashSet<>(List.of(
             "image/jpeg","image/jpg","image/png"
             ,"video/mp4"
-            ,"audio/wave","audio/wav","audio/x-wav","audio/x-pn-wav","audio/webm","audio/mpeg"
             ,"application/pdf"
             ,"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
             ,"application/msword"
     ));
 
     private final HashSet<String> imageType = new HashSet<>(List.of("jpeg","jpg","png","gif"));
-
+    private final HashSet<String> allowedFilesExt = new HashSet<>(List.of("pdf","mp4", "jpeg","jpg","png","gif"));
 
     @Override
     public boolean isImage(MultipartFile file){
@@ -59,6 +59,13 @@ private boolean isImage(String ext){
         return imageType.contains(ext);
     }
 
+    public boolean isAllowedFileType(MultipartFile file) throws IOException {
+        Tika tika = new Tika();
+        String mimeType = tika.detect(file.getInputStream());
+        return allowedFilesExt.contains(FilenameUtils.getExtension(file.getOriginalFilename()))
+        && allowedFileType.contains(mimeType);
+    }
+
 
     @PostConstruct
     public void init() {
@@ -70,17 +77,6 @@ public void init() {
         }
     }
 
-    public void saveChunkToFile(String encodedData,String fileNameWithExtension,String meetingId) throws IOException {
-        //append the data to the end of the file
-
-        OutputStream out = new FileOutputStream(rootLocation + "/upload/"+meetingId+ "/"+fileNameWithExtension,true);
-        byte[] decoded = Base64.getDecoder().decode(encodedData);
-        //append to the file
-        out.write(decoded);
-        out.close();
-    }
-
-
     @Override
     public int store(MultipartFile file, String nameAndExt) {
         Path location = Paths.get(rootLocation+"/");
@@ -95,6 +91,8 @@ public int store(MultipartFile file, String nameAndExt) {
                return OP_STATUS_INVALID_FILE_NAME;
             }
 
+            if(!isAllowedFileType(file)) return OP_STATUS_FILE_TYPE_NOT_ALLOWED;
+
             try (InputStream inputStream = file.getInputStream()) {
 
                 Files.copy(inputStream, location.resolve(nameAndExt),
@@ -120,17 +118,6 @@ private void createThumbnail(MultipartFile file, Integer width,String nameAndExt
         ImageIO.write(thumbImg, FilenameUtils.getExtension(file.getOriginalFilename()) ,new File(rootLocation,"thumb_"+nameAndExt));
     }
 
-    public Stream<Path> loadAll() {
-        try {
-            return Files.walk(this.rootPath, 1)
-                    .filter(path -> !path.equals(this.rootPath))
-                    .map(this.rootPath::relativize);
-        }
-        catch (IOException e) {
-            throw new RuntimeException("Failed to read stored files", e);
-        }
-
-    }
 
     public Path load(String filename,Path location) {
         return location.resolve(filename);

--- spring boot/common-user-management/src/main/java/common/management/common/util/OperationStatus.java ---
@@ -36,6 +36,7 @@ public class OperationStatus {
     public static final int OP_STATUS_FILETYPE_MISMATCH = -14;
     public static final int OP_STATUS_WRONG_PASSWORD = -15;
     public static final int OP_STATUS_REFRESH_TOKEN_INVALID = -16;
+    public static final int OP_STATUS_FILE_TYPE_NOT_ALLOWED= -36;
 
     public static final int OP_STATUS_EMAIL_ALREADY_USED_BY_ANOTHER_ACCOUNT = -17;
     public static final int OP_STATUS_PRIVILEGE_NOT_FOUND = -18;
@@ -109,6 +110,13 @@ public ResponseEntity<?> handle(int status) {
                 return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new BasicResponse(HttpStatus.NOT_FOUND.value(), messageSource.getMessage("OP_STATUS_CUSTOMER_NOT_FOUND", null, LocaleContextHolder.getLocale())));
             case OP_STATUS_NOT_FOUND:
                 return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new BasicResponse(HttpStatus.NOT_FOUND.value(), messageSource.getMessage("OP_STATUS_NOT_FOUND", null, LocaleContextHolder.getLocale())));
+            case OP_STATUS_FILE_EMPTY:
+                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new BasicResponse(HttpStatus.BAD_REQUEST.value(), messageSource.getMessage("OP_STATUS_FILE_EMPTY", null, LocaleContextHolder.getLocale())));
+            case OP_STATUS_INVALID_FILE_NAME:
+                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new BasicResponse(HttpStatus.BAD_REQUEST.value(), messageSource.getMessage("OP_STATUS_INVALID_FILE_NAME", null, LocaleContextHolder.getLocale())));
+            case OP_STATUS_FILE_TYPE_NOT_ALLOWED:
+                return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new BasicResponse(HttpStatus.FORBIDDEN.value(), messageSource.getMessage("OP_STATUS_FILE_TYPE_NOT_ALLOWED", null, LocaleContextHolder.getLocale())));
+
             default:
                 return ResponseEntity.internalServerError().body(new BasicResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Operation Failed"));
         }

--- spring boot/common-user-management/src/main/java/common/management/customer/service/impl/CustomerServiceImpl.java ---
@@ -45,6 +45,9 @@ public OpWrapper<Long> create(CreateCustomerRequest request) {
     @Override
     @Transactional
     public int updateProfilePicture(MultipartFile file) {
+        //make sure file is image
+        if(!storageService.isImage(file)) return OP_STATUS_FILE_TYPE_NOT_ALLOWED;
+
         var userId = userService.getAuthUserId();
         if(userId.isEmpty()) return OP_STATUS_FORBIDDEN;
         var customer  = customerRepository.findByUserId(userId.get());

--- spring boot/common-user-management/src/main/resources/messages.properties ---
@@ -20,6 +20,7 @@ OP_STATUS_INVALID_FILE_NAME=Invalid file name
 OP_STATUS_FILE_EMPTY=File is empty
 OP_STATUS_FILE_DATA_NOT_FOUND=File data not found
 OP_STATUS_FILETYPE_MISMATCH=File type mismatch
+OP_STATUS_FILE_TYPE_NOT_ALLOWED= File type not allowed
 
 OP_STATUS_EMAIL_ALREADY_USED_BY_ANOTHER_ACCOUNT=Email already used by another account
 OP_STATUS_INVALID_SECRET=Invalid secret code
@@ -30,4 +31,4 @@ OP_STATUS_STAFF_MEMBER_NOT_FOUND=STAFF_MEMBER_NOT_FOUND
 OP_STATUS_BAD_REQUEST=BAD_REQUEST
 OP_STATUS_GOVERNORATE_NOT_FOUND=GOVERNORATE_NOT_FOUND
 OP_STATUS_CUSTOMER_NOT_FOUND = CUSTOMER_NOT_FOUND
-OP_STATUS_NOT_FOUND = NOT_FOUND
\ No newline at end of file
+OP_STATUS_NOT_FOUND = NOT_FOUND

