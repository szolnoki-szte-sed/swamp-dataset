--- README.md ---
@@ -61,7 +61,8 @@ Generating the grammar sources
 
 If you edit the `.g` files in the grammars directory you'll need to regenerate the sources.
 
-    ./src/antlr3c/generate_grammar_sources.py
+    cd src/antlr3c
+    ./generate_grammar_sources.py
 
 Build options
 -------------

--- src/grammars/belle_sdpLexer.c ---
@@ -2,7 +2,7 @@
  *  This C source file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sdp.g
- *     -                            On : 2021-05-03 11:52:42
+ *     -                            On : 2021-05-13 15:53:02
  *     -                 for the lexer : belle_sdpLexerLexer
  *
  * Editing it, at least manually, is not wise.

--- src/grammars/belle_sdpLexer.h ---
@@ -2,7 +2,7 @@
  *  This C header file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sdp.g
- *     -                            On : 2021-05-03 11:52:42
+ *     -                            On : 2021-05-13 15:53:02
  *     -                 for the lexer : belle_sdpLexerLexer
  *
  * Editing it, at least manually, is not wise.

--- src/grammars/belle_sdpParser.c ---
@@ -2,7 +2,7 @@
  *  This C source file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sdp.g
- *     -                            On : 2021-05-03 11:52:42
+ *     -                            On : 2021-05-13 15:53:02
  *     -                for the parser : belle_sdpParserParser
  *
  * Editing it, at least manually, is not wise.

--- src/grammars/belle_sdpParser.h ---
@@ -2,7 +2,7 @@
  *  This C header file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sdp.g
- *     -                            On : 2021-05-03 11:52:42
+ *     -                            On : 2021-05-13 15:53:02
  *     -                for the parser : belle_sdpParserParser
  *
  * Editing it, at least manually, is not wise.

--- src/grammars/belle_sip_message.g ---
@@ -764,8 +764,10 @@ addr_spec[belle_sip_header_address_t* object]
 addr_spec_with_generic_uri[belle_sip_header_address_t* object]
   :  lws? (	uri {belle_sip_header_address_set_uri(object,$uri.ret);}
   	|
-  	generic_uri { if (   strcasecmp(belle_generic_uri_get_scheme($generic_uri.ret),"sip") != 0
-					 &&  strcasecmp(belle_generic_uri_get_scheme($generic_uri.ret),"sips") != 0 ) {
+  	generic_uri {
+		const char *scheme = belle_generic_uri_get_scheme($generic_uri.ret);
+		if ( scheme && strcasecmp(scheme,"sip") != 0
+					 &&  strcasecmp(scheme, "sips") != 0 ) {
 						 belle_sip_header_address_set_absolute_uri(object,$generic_uri.ret);
 					 } else {
 						 belle_sip_message("Cannot parse a sip/sips uri as a generic uri");
@@ -776,9 +778,11 @@ addr_spec_with_generic_uri[belle_sip_header_address_t* object]
   fast_addr_spec_with_generic_uri[belle_sip_header_address_t* object]
   :  lws? (	fast_uri {belle_sip_header_address_set_uri(object,$fast_uri.ret);}
   	|
-  	generic_uri { if (   strcasecmp(belle_generic_uri_get_scheme($generic_uri.ret),"sip") != 0
-					 &&  strcasecmp(belle_generic_uri_get_scheme($generic_uri.ret),"sips") != 0 ) {
-						 belle_sip_header_address_set_absolute_uri(object,$generic_uri.ret);
+  	generic_uri {
+		const char *scheme = belle_generic_uri_get_scheme($generic_uri.ret);
+		if ( scheme && strcasecmp(scheme, "sip") != 0
+					 &&  strcasecmp(scheme, "sips") != 0 ) {
+						 belle_sip_header_address_set_absolute_uri(object, $generic_uri.ret);
 					 } else {
 						 belle_sip_message("Cannot parse a sip/sips uri as a generic uri");
 						 belle_sip_object_unref($generic_uri.ret);

--- src/grammars/belle_sip_messageLexer.c ---
@@ -2,7 +2,7 @@
  *  This C source file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sip_message.g
- *     -                            On : 2021-05-03 11:52:47
+ *     -                            On : 2021-05-13 15:53:11
  *     -                 for the lexer : belle_sip_messageLexerLexer
  *
  * Editing it, at least manually, is not wise.
@@ -549,7 +549,7 @@ ANTLR3_API pbelle_sip_messageLexer belle_sip_messageLexerNewSSD
  * Functions to match the lexer grammar defined tokens from the input stream
  */
 
-//   Comes from: 1996:3: ( 'g' .. 'z' | 'G' .. 'Z' )
+//   Comes from: 1997:3: ( 'g' .. 'z' | 'G' .. 'Z' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start COMMON_CHAR
@@ -569,7 +569,7 @@ void mCOMMON_CHAR(pbelle_sip_messageLexer ctx)
     _type	    = COMMON_CHAR;
 
 
-    // ../grammars/belle_sip_message.g:1996:3: ( 'g' .. 'z' | 'G' .. 'Z' )
+    // ../grammars/belle_sip_message.g:1997:3: ( 'g' .. 'z' | 'G' .. 'Z' )
     // ../grammars/belle_sip_message.g:
     {
         if ( ((LA(1) >= 'G') && (LA(1) <= 'Z')) || ((LA(1) >= 'g') && (LA(1) <= 'z')) )
@@ -598,7 +598,7 @@ void mCOMMON_CHAR(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end COMMON_CHAR
 
-//   Comes from: 1998:9: ( 'a' .. 'f' | 'A' .. 'F' )
+//   Comes from: 1999:9: ( 'a' .. 'f' | 'A' .. 'F' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start HEX_CHAR
@@ -618,7 +618,7 @@ void mHEX_CHAR(pbelle_sip_messageLexer ctx)
     _type	    = HEX_CHAR;
 
 
-    // ../grammars/belle_sip_message.g:1998:9: ( 'a' .. 'f' | 'A' .. 'F' )
+    // ../grammars/belle_sip_message.g:1999:9: ( 'a' .. 'f' | 'A' .. 'F' )
     // ../grammars/belle_sip_message.g:
     {
         if ( ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
@@ -647,7 +647,7 @@ void mHEX_CHAR(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end HEX_CHAR
 
-//   Comes from: 1999:7: ( '0' .. '9' )
+//   Comes from: 2000:7: ( '0' .. '9' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start DIGIT
@@ -667,7 +667,7 @@ void mDIGIT(pbelle_sip_messageLexer ctx)
     _type	    = DIGIT;
 
 
-    // ../grammars/belle_sip_message.g:1999:7: ( '0' .. '9' )
+    // ../grammars/belle_sip_message.g:2000:7: ( '0' .. '9' )
     // ../grammars/belle_sip_message.g:
     {
         if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
@@ -696,7 +696,7 @@ void mDIGIT(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end DIGIT
 
-//   Comes from: 2000:3: ( '@' )
+//   Comes from: 2001:3: ( '@' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start AT
@@ -716,8 +716,8 @@ void mAT(pbelle_sip_messageLexer ctx)
     _type	    = AT;
 
 
-    // ../grammars/belle_sip_message.g:2000:3: ( '@' )
-    // ../grammars/belle_sip_message.g:2000:5: '@'
+    // ../grammars/belle_sip_message.g:2001:3: ( '@' )
+    // ../grammars/belle_sip_message.g:2001:5: '@'
     {
         MATCHC('@');
         if  (HASEXCEPTION())
@@ -737,7 +737,7 @@ void mAT(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end AT
 
-//   Comes from: 2001:4: ( '&' )
+//   Comes from: 2002:4: ( '&' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start AND
@@ -757,8 +757,8 @@ void mAND(pbelle_sip_messageLexer ctx)
     _type	    = AND;
 
 
-    // ../grammars/belle_sip_message.g:2001:4: ( '&' )
-    // ../grammars/belle_sip_message.g:2001:6: '&'
+    // ../grammars/belle_sip_message.g:2002:4: ( '&' )
+    // ../grammars/belle_sip_message.g:2002:6: '&'
     {
         MATCHC('&');
         if  (HASEXCEPTION())
@@ -778,7 +778,7 @@ void mAND(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end AND
 
-//   Comes from: 2002:8: ( '$' )
+//   Comes from: 2003:8: ( '$' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start DOLLARD
@@ -798,8 +798,8 @@ void mDOLLARD(pbelle_sip_messageLexer ctx)
     _type	    = DOLLARD;
 
 
-    // ../grammars/belle_sip_message.g:2002:8: ( '$' )
-    // ../grammars/belle_sip_message.g:2002:10: '$'
+    // ../grammars/belle_sip_message.g:2003:8: ( '$' )
+    // ../grammars/belle_sip_message.g:2003:10: '$'
     {
         MATCHC('$');
         if  (HASEXCEPTION())
@@ -819,7 +819,7 @@ void mDOLLARD(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end DOLLARD
 
-//   Comes from: 2003:6: ( '?' )
+//   Comes from: 2004:6: ( '?' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start QMARK
@@ -839,8 +839,8 @@ void mQMARK(pbelle_sip_messageLexer ctx)
     _type	    = QMARK;
 
 
-    // ../grammars/belle_sip_message.g:2003:6: ( '?' )
-    // ../grammars/belle_sip_message.g:2003:8: '?'
+    // ../grammars/belle_sip_message.g:2004:6: ( '?' )
+    // ../grammars/belle_sip_message.g:2004:8: '?'
     {
         MATCHC('?');
         if  (HASEXCEPTION())
@@ -860,7 +860,7 @@ void mQMARK(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end QMARK
 
-//   Comes from: 2004:6: ( '!' )
+//   Comes from: 2005:6: ( '!' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start EMARK
@@ -880,8 +880,8 @@ void mEMARK(pbelle_sip_messageLexer ctx)
     _type	    = EMARK;
 
 
-    // ../grammars/belle_sip_message.g:2004:6: ( '!' )
-    // ../grammars/belle_sip_message.g:2004:8: '!'
+    // ../grammars/belle_sip_message.g:2005:6: ( '!' )
+    // ../grammars/belle_sip_message.g:2005:8: '!'
     {
         MATCHC('!');
         if  (HASEXCEPTION())
@@ -901,7 +901,7 @@ void mEMARK(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end EMARK
 
-//   Comes from: 2005:5: ( '-' )
+//   Comes from: 2006:5: ( '-' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start DASH
@@ -921,8 +921,8 @@ void mDASH(pbelle_sip_messageLexer ctx)
     _type	    = DASH;
 
 
-    // ../grammars/belle_sip_message.g:2005:5: ( '-' )
-    // ../grammars/belle_sip_message.g:2005:7: '-'
+    // ../grammars/belle_sip_message.g:2006:5: ( '-' )
+    // ../grammars/belle_sip_message.g:2006:7: '-'
     {
         MATCHC('-');
         if  (HASEXCEPTION())
@@ -942,7 +942,7 @@ void mDASH(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end DASH
 
-//   Comes from: 2006:7: ( '\\r\\n' )
+//   Comes from: 2007:7: ( '\\r\\n' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start CRLF
@@ -962,8 +962,8 @@ void mCRLF(pbelle_sip_messageLexer ctx)
     _type	    = CRLF;
 
 
-    // ../grammars/belle_sip_message.g:2006:7: ( '\\r\\n' )
-    // ../grammars/belle_sip_message.g:2006:9: '\\r\\n'
+    // ../grammars/belle_sip_message.g:2007:7: ( '\\r\\n' )
+    // ../grammars/belle_sip_message.g:2007:9: '\\r\\n'
     {
         MATCHS(lit_1);
         if  (HASEXCEPTION())
@@ -990,7 +990,7 @@ void mCRLF(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end CRLF
 
-//   Comes from: 2007:7: ( '\t' )
+//   Comes from: 2008:7: ( '\t' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start HTAB
@@ -1010,8 +1010,8 @@ void mHTAB(pbelle_sip_messageLexer ctx)
     _type	    = HTAB;
 
 
-    // ../grammars/belle_sip_message.g:2007:7: ( '\t' )
-    // ../grammars/belle_sip_message.g:2007:9: '\t'
+    // ../grammars/belle_sip_message.g:2008:7: ( '\t' )
+    // ../grammars/belle_sip_message.g:2008:9: '\t'
     {
         MATCHC(0x9);
         if  (HASEXCEPTION())
@@ -1031,7 +1031,7 @@ void mHTAB(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end HTAB
 
-//   Comes from: 2008:4: ( '|' )
+//   Comes from: 2009:4: ( '|' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start OR
@@ -1051,8 +1051,8 @@ void mOR(pbelle_sip_messageLexer ctx)
     _type	    = OR;
 
 
-    // ../grammars/belle_sip_message.g:2008:4: ( '|' )
-    // ../grammars/belle_sip_message.g:2008:6: '|'
+    // ../grammars/belle_sip_message.g:2009:4: ( '|' )
+    // ../grammars/belle_sip_message.g:2009:6: '|'
     {
         MATCHC('|');
         if  (HASEXCEPTION())
@@ -1072,7 +1072,7 @@ void mOR(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end OR
 
-//   Comes from: 2009:8: ( '%' )
+//   Comes from: 2010:8: ( '%' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start PERCENT
@@ -1092,8 +1092,8 @@ void mPERCENT(pbelle_sip_messageLexer ctx)
     _type	    = PERCENT;
 
 
-    // ../grammars/belle_sip_message.g:2009:8: ( '%' )
-    // ../grammars/belle_sip_message.g:2009:10: '%'
+    // ../grammars/belle_sip_message.g:2010:8: ( '%' )
+    // ../grammars/belle_sip_message.g:2010:10: '%'
     {
         MATCHC('%');
         if  (HASEXCEPTION())
@@ -1113,7 +1113,7 @@ void mPERCENT(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end PERCENT
 
-//   Comes from: 2010:9: ( '\"' )
+//   Comes from: 2011:9: ( '\"' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start DQUOTE
@@ -1133,8 +1133,8 @@ void mDQUOTE(pbelle_sip_messageLexer ctx)
     _type	    = DQUOTE;
 
 
-    // ../grammars/belle_sip_message.g:2010:9: ( '\"' )
-    // ../grammars/belle_sip_message.g:2010:11: '\"'
+    // ../grammars/belle_sip_message.g:2011:9: ( '\"' )
+    // ../grammars/belle_sip_message.g:2011:11: '\"'
     {
         MATCHC('"');
         if  (HASEXCEPTION())
@@ -1154,7 +1154,7 @@ void mDQUOTE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end DQUOTE
 
-//   Comes from: 2011:9: ( '\\'' )
+//   Comes from: 2012:9: ( '\\'' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start SQUOTE
@@ -1174,8 +1174,8 @@ void mSQUOTE(pbelle_sip_messageLexer ctx)
     _type	    = SQUOTE;
 
 
-    // ../grammars/belle_sip_message.g:2011:9: ( '\\'' )
-    // ../grammars/belle_sip_message.g:2011:11: '\\''
+    // ../grammars/belle_sip_message.g:2012:9: ( '\\'' )
+    // ../grammars/belle_sip_message.g:2012:11: '\\''
     {
         MATCHC('\'');
         if  (HASEXCEPTION())
@@ -1195,7 +1195,7 @@ void mSQUOTE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end SQUOTE
 
-//   Comes from: 2012:7: ( '`' )
+//   Comes from: 2013:7: ( '`' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start BQUOTE
@@ -1215,8 +1215,8 @@ void mBQUOTE(pbelle_sip_messageLexer ctx)
     _type	    = BQUOTE;
 
 
-    // ../grammars/belle_sip_message.g:2012:7: ( '`' )
-    // ../grammars/belle_sip_message.g:2012:9: '`'
+    // ../grammars/belle_sip_message.g:2013:7: ( '`' )
+    // ../grammars/belle_sip_message.g:2013:9: '`'
     {
         MATCHC('`');
         if  (HASEXCEPTION())
@@ -1236,7 +1236,7 @@ void mBQUOTE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end BQUOTE
 
-//   Comes from: 2013:7: ( '\\\\' )
+//   Comes from: 2014:7: ( '\\\\' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start BSLASH
@@ -1256,8 +1256,8 @@ void mBSLASH(pbelle_sip_messageLexer ctx)
     _type	    = BSLASH;
 
 
-    // ../grammars/belle_sip_message.g:2013:7: ( '\\\\' )
-    // ../grammars/belle_sip_message.g:2013:9: '\\\\'
+    // ../grammars/belle_sip_message.g:2014:7: ( '\\\\' )
+    // ../grammars/belle_sip_message.g:2014:9: '\\\\'
     {
         MATCHC('\\');
         if  (HASEXCEPTION())
@@ -1277,7 +1277,7 @@ void mBSLASH(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end BSLASH
 
-//   Comes from: 2014:7: ( '{' )
+//   Comes from: 2015:7: ( '{' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start LBRACE
@@ -1297,8 +1297,8 @@ void mLBRACE(pbelle_sip_messageLexer ctx)
     _type	    = LBRACE;
 
 
-    // ../grammars/belle_sip_message.g:2014:7: ( '{' )
-    // ../grammars/belle_sip_message.g:2014:9: '{'
+    // ../grammars/belle_sip_message.g:2015:7: ( '{' )
+    // ../grammars/belle_sip_message.g:2015:9: '{'
     {
         MATCHC('{');
         if  (HASEXCEPTION())
@@ -1318,7 +1318,7 @@ void mLBRACE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end LBRACE
 
-//   Comes from: 2015:7: ( '}' )
+//   Comes from: 2016:7: ( '}' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start RBRACE
@@ -1338,8 +1338,8 @@ void mRBRACE(pbelle_sip_messageLexer ctx)
     _type	    = RBRACE;
 
 
-    // ../grammars/belle_sip_message.g:2015:7: ( '}' )
-    // ../grammars/belle_sip_message.g:2015:9: '}'
+    // ../grammars/belle_sip_message.g:2016:7: ( '}' )
+    // ../grammars/belle_sip_message.g:2016:9: '}'
     {
         MATCHC('}');
         if  (HASEXCEPTION())
@@ -1359,7 +1359,7 @@ void mRBRACE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end RBRACE
 
-//   Comes from: 2016:7: ( '_' )
+//   Comes from: 2017:7: ( '_' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start USCORE
@@ -1379,8 +1379,8 @@ void mUSCORE(pbelle_sip_messageLexer ctx)
     _type	    = USCORE;
 
 
-    // ../grammars/belle_sip_message.g:2016:7: ( '_' )
-    // ../grammars/belle_sip_message.g:2016:9: '_'
+    // ../grammars/belle_sip_message.g:2017:7: ( '_' )
+    // ../grammars/belle_sip_message.g:2017:9: '_'
     {
         MATCHC('_');
         if  (HASEXCEPTION())
@@ -1400,7 +1400,7 @@ void mUSCORE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end USCORE
 
-//   Comes from: 2017:6: ( '~' )
+//   Comes from: 2018:6: ( '~' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start TILDE
@@ -1420,8 +1420,8 @@ void mTILDE(pbelle_sip_messageLexer ctx)
     _type	    = TILDE;
 
 
-    // ../grammars/belle_sip_message.g:2017:6: ( '~' )
-    // ../grammars/belle_sip_message.g:2017:8: '~'
+    // ../grammars/belle_sip_message.g:2018:6: ( '~' )
+    // ../grammars/belle_sip_message.g:2018:8: '~'
     {
         MATCHC('~');
         if  (HASEXCEPTION())
@@ -1441,7 +1441,7 @@ void mTILDE(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end TILDE
 
-//   Comes from: 2018:4: ( '.' )
+//   Comes from: 2019:4: ( '.' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start DOT
@@ -1461,8 +1461,8 @@ void mDOT(pbelle_sip_messageLexer ctx)
     _type	    = DOT;
 
 
-    // ../grammars/belle_sip_message.g:2018:4: ( '.' )
-    // ../grammars/belle_sip_message.g:2018:6: '.'
+    // ../grammars/belle_sip_message.g:2019:4: ( '.' )
+    // ../grammars/belle_sip_message.g:2019:6: '.'
     {
         MATCHC('.');
         if  (HASEXCEPTION())
@@ -1482,7 +1482,7 @@ void mDOT(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end DOT
 
-//   Comes from: 2021:5: ( '+' )
+//   Comes from: 2022:5: ( '+' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start PLUS
@@ -1502,8 +1502,8 @@ void mPLUS(pbelle_sip_messageLexer ctx)
     _type	    = PLUS;
 
 
-    // ../grammars/belle_sip_message.g:2021:5: ( '+' )
-    // ../grammars/belle_sip_message.g:2021:7: '+'
+    // ../grammars/belle_sip_message.g:2022:5: ( '+' )
+    // ../grammars/belle_sip_message.g:2022:7: '+'
     {
         MATCHC('+');
         if  (HASEXCEPTION())
@@ -1523,7 +1523,7 @@ void mPLUS(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end PLUS
 
-//   Comes from: 2023:3: ( ':' )
+//   Comes from: 2024:3: ( ':' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start COLON
@@ -1543,8 +1543,8 @@ void mCOLON(pbelle_sip_messageLexer ctx)
     _type	    = COLON;
 
 
-    // ../grammars/belle_sip_message.g:2023:3: ( ':' )
-    // ../grammars/belle_sip_message.g:2023:5: ':'
+    // ../grammars/belle_sip_message.g:2024:3: ( ':' )
+    // ../grammars/belle_sip_message.g:2024:5: ':'
     {
         MATCHC(':');
         if  (HASEXCEPTION())
@@ -1564,7 +1564,7 @@ void mCOLON(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end COLON
 
-//   Comes from: 2026:3: ( ';' )
+//   Comes from: 2027:3: ( ';' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start SEMI
@@ -1584,8 +1584,8 @@ void mSEMI(pbelle_sip_messageLexer ctx)
     _type	    = SEMI;
 
 
-    // ../grammars/belle_sip_message.g:2026:3: ( ';' )
-    // ../grammars/belle_sip_message.g:2026:5: ';'
+    // ../grammars/belle_sip_message.g:2027:3: ( ';' )
+    // ../grammars/belle_sip_message.g:2027:5: ';'
     {
         MATCHC(';');
         if  (HASEXCEPTION())
@@ -1605,7 +1605,7 @@ void mSEMI(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end SEMI
 
-//   Comes from: 2029:3: ( ',' )
+//   Comes from: 2030:3: ( ',' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start COMMA
@@ -1625,8 +1625,8 @@ void mCOMMA(pbelle_sip_messageLexer ctx)
     _type	    = COMMA;
 
 
-    // ../grammars/belle_sip_message.g:2029:3: ( ',' )
-    // ../grammars/belle_sip_message.g:2029:5: ','
+    // ../grammars/belle_sip_message.g:2030:3: ( ',' )
+    // ../grammars/belle_sip_message.g:2030:5: ','
     {
         MATCHC(',');
         if  (HASEXCEPTION())
@@ -1646,7 +1646,7 @@ void mCOMMA(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end COMMA
 
-//   Comes from: 2032:3: ( '<' )
+//   Comes from: 2033:3: ( '<' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start LAQUOT
@@ -1666,8 +1666,8 @@ void mLAQUOT(pbelle_sip_messageLexer ctx)
     _type	    = LAQUOT;
 
 
-    // ../grammars/belle_sip_message.g:2032:3: ( '<' )
-    // ../grammars/belle_sip_message.g:2032:5: '<'
+    // ../grammars/belle_sip_message.g:2033:3: ( '<' )
+    // ../grammars/belle_sip_message.g:2033:5: '<'
     {
         MATCHC('<');
         if  (HASEXCEPTION())
@@ -1687,7 +1687,7 @@ void mLAQUOT(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end LAQUOT
 
-//   Comes from: 2035:3: ( '>' )
+//   Comes from: 2036:3: ( '>' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start RAQUOT
@@ -1707,8 +1707,8 @@ void mRAQUOT(pbelle_sip_messageLexer ctx)
     _type	    = RAQUOT;
 
 
-    // ../grammars/belle_sip_message.g:2035:3: ( '>' )
-    // ../grammars/belle_sip_message.g:2035:5: '>'
+    // ../grammars/belle_sip_message.g:2036:3: ( '>' )
+    // ../grammars/belle_sip_message.g:2036:5: '>'
     {
         MATCHC('>');
         if  (HASEXCEPTION())
@@ -1728,7 +1728,7 @@ void mRAQUOT(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end RAQUOT
 
-//   Comes from: 2039:3: ( ')' )
+//   Comes from: 2040:3: ( ')' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start RPAREN
@@ -1748,8 +1748,8 @@ void mRPAREN(pbelle_sip_messageLexer ctx)
     _type	    = RPAREN;
 
 
-    // ../grammars/belle_sip_message.g:2039:3: ( ')' )
-    // ../grammars/belle_sip_message.g:2039:5: ')'
+    // ../grammars/belle_sip_message.g:2040:3: ( ')' )
+    // ../grammars/belle_sip_message.g:2040:5: ')'
     {
         MATCHC(')');
         if  (HASEXCEPTION())
@@ -1769,7 +1769,7 @@ void mRPAREN(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end RPAREN
 
-//   Comes from: 2043:3: ( '(' )
+//   Comes from: 2044:3: ( '(' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start LPAREN
@@ -1789,8 +1789,8 @@ void mLPAREN(pbelle_sip_messageLexer ctx)
     _type	    = LPAREN;
 
 
-    // ../grammars/belle_sip_message.g:2043:3: ( '(' )
-    // ../grammars/belle_sip_message.g:2043:5: '('
+    // ../grammars/belle_sip_message.g:2044:3: ( '(' )
+    // ../grammars/belle_sip_message.g:2044:5: '('
     {
         MATCHC('(');
         if  (HASEXCEPTION())
@@ -1810,7 +1810,7 @@ void mLPAREN(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end LPAREN
 
-//   Comes from: 2046:3: ( ']' )
+//   Comes from: 2047:3: ( ']' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start RSBRAQUET
@@ -1830,8 +1830,8 @@ void mRSBRAQUET(pbelle_sip_messageLexer ctx)
     _type	    = RSBRAQUET;
 
 
-    // ../grammars/belle_sip_message.g:2046:3: ( ']' )
-    // ../grammars/belle_sip_message.g:2046:5: ']'
+    // ../grammars/belle_sip_message.g:2047:3: ( ']' )
+    // ../grammars/belle_sip_message.g:2047:5: ']'
     {
         MATCHC(']');
         if  (HASEXCEPTION())
@@ -1851,7 +1851,7 @@ void mRSBRAQUET(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end RSBRAQUET
 
-//   Comes from: 2050:3: ( '[' )
+//   Comes from: 2051:3: ( '[' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start LSBRAQUET
@@ -1871,8 +1871,8 @@ void mLSBRAQUET(pbelle_sip_messageLexer ctx)
     _type	    = LSBRAQUET;
 
 
-    // ../grammars/belle_sip_message.g:2050:3: ( '[' )
-    // ../grammars/belle_sip_message.g:2050:5: '['
+    // ../grammars/belle_sip_message.g:2051:3: ( '[' )
+    // ../grammars/belle_sip_message.g:2051:5: '['
     {
         MATCHC('[');
         if  (HASEXCEPTION())
@@ -1892,7 +1892,7 @@ void mLSBRAQUET(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end LSBRAQUET
 
-//   Comes from: 2054:3: ( '=' )
+//   Comes from: 2055:3: ( '=' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start EQUAL
@@ -1912,8 +1912,8 @@ void mEQUAL(pbelle_sip_messageLexer ctx)
     _type	    = EQUAL;
 
 
-    // ../grammars/belle_sip_message.g:2054:3: ( '=' )
-    // ../grammars/belle_sip_message.g:2054:5: '='
+    // ../grammars/belle_sip_message.g:2055:3: ( '=' )
+    // ../grammars/belle_sip_message.g:2055:5: '='
     {
         MATCHC('=');
         if  (HASEXCEPTION())
@@ -1933,7 +1933,7 @@ void mEQUAL(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end EQUAL
 
-//   Comes from: 2058:3: ( '/' )
+//   Comes from: 2059:3: ( '/' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start SLASH
@@ -1953,8 +1953,8 @@ void mSLASH(pbelle_sip_messageLexer ctx)
     _type	    = SLASH;
 
 
-    // ../grammars/belle_sip_message.g:2058:3: ( '/' )
-    // ../grammars/belle_sip_message.g:2058:5: '/'
+    // ../grammars/belle_sip_message.g:2059:3: ( '/' )
+    // ../grammars/belle_sip_message.g:2059:5: '/'
     {
         MATCHC('/');
         if  (HASEXCEPTION())
@@ -1974,7 +1974,7 @@ void mSLASH(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end SLASH
 
-//   Comes from: 2062:3: ( '*' )
+//   Comes from: 2063:3: ( '*' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start STAR
@@ -1994,8 +1994,8 @@ void mSTAR(pbelle_sip_messageLexer ctx)
     _type	    = STAR;
 
 
-    // ../grammars/belle_sip_message.g:2062:3: ( '*' )
-    // ../grammars/belle_sip_message.g:2062:5: '*'
+    // ../grammars/belle_sip_message.g:2063:3: ( '*' )
+    // ../grammars/belle_sip_message.g:2063:5: '*'
     {
         MATCHC('*');
         if  (HASEXCEPTION())
@@ -2015,7 +2015,7 @@ void mSTAR(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end STAR
 
-//   Comes from: 2065:3: ( ' ' )
+//   Comes from: 2066:3: ( ' ' )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start SP
@@ -2035,8 +2035,8 @@ void mSP(pbelle_sip_messageLexer ctx)
     _type	    = SP;
 
 
-    // ../grammars/belle_sip_message.g:2065:3: ( ' ' )
-    // ../grammars/belle_sip_message.g:2065:5: ' '
+    // ../grammars/belle_sip_message.g:2066:3: ( ' ' )
+    // ../grammars/belle_sip_message.g:2066:5: ' '
     {
         MATCHC(' ');
         if  (HASEXCEPTION())
@@ -2056,7 +2056,7 @@ void mSP(pbelle_sip_messageLexer ctx)
 }
 // $ANTLR end SP
 
-//   Comes from: 2067:7: ( . )
+//   Comes from: 2068:7: ( . )
 /** \brief Lexer rule generated by ANTLR3
  *
  * $ANTLR start OCTET
@@ -2076,8 +2076,8 @@ void mOCTET(pbelle_sip_messageLexer ctx)
     _type	    = OCTET;
 
 
-    // ../grammars/belle_sip_message.g:2067:7: ( . )
-    // ../grammars/belle_sip_message.g:2067:9: .
+    // ../grammars/belle_sip_message.g:2068:7: ( . )
+    // ../grammars/belle_sip_message.g:2068:9: .
     {
         MATCHANY();
         if  (HASEXCEPTION())

--- src/grammars/belle_sip_messageLexer.h ---
@@ -2,7 +2,7 @@
  *  This C header file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sip_message.g
- *     -                            On : 2021-05-03 11:52:47
+ *     -                            On : 2021-05-13 15:53:11
  *     -                 for the lexer : belle_sip_messageLexerLexer
  *
  * Editing it, at least manually, is not wise.

--- src/grammars/belle_sip_messageParser.h ---
@@ -2,7 +2,7 @@
  *  This C header file was generated by $ANTLR version 3.4
  *
  *     -  From the grammar source file : ../grammars/belle_sip_message.g
- *     -                            On : 2021-05-03 11:52:47
+ *     -                            On : 2021-05-13 15:53:10
  *     -                for the parser : belle_sip_messageParserParser
  *
  * Editing it, at least manually, is not wise.

--- tester/belle_sip_message_tester.c ---
@@ -410,6 +410,7 @@ static void testMalformedMessageWithWrongStart(void) {
 	BC_ASSERT_PTR_NULL(message);
 }
 
+
 void channel_parser_tester_recovery_from_error_base (const char* prelude,const char* raw_message) {
 
 	belle_sip_stack_t* stack = belle_sip_stack_new(NULL);
@@ -683,10 +684,75 @@ static void testMalformedFrom2(void){
 	belle_sip_object_unref(provider);
 	belle_sip_object_unref(stack);
 	belle_sip_object_unref(message);
+}
+
+
+static void testMalformedFrom3(void) {
+	belle_sip_stack_t*        stack = belle_sip_stack_new(NULL);
+	belle_sip_listening_point_t* lp = belle_sip_stack_create_listening_point(stack,
+							"127.0.0.1",
+							LISTENING_POINT_PORT,
+							"tcp");
+	belle_sip_provider_t* provider = belle_sip_provider_new(stack,lp);
+	belle_sip_listener_callbacks_t listener_cbs = {0};
 
+	const char* raw_message = "INVITE sip:us2@172.1.1.1 SIP/2.0\r\n"
+			"Via: SIP/2.0/TCP " LISTENING_POINT_HOSTPORT ";branch=z9hG4bK-edx-U_1zoIkaq72GJPqpSmDpJQ-ouBelFuLODzf9oS5J9MeFUA;rport\r\n"
+			"From: </coucou>\r\n" 
+			"To: <sip:us2@172.1.1.1;transport=tcp>\r\n"
+			"Contact: <sip:00_12_34_56_78_90@172.2.2.2>\r\n"
+			"Call-ID: 2b6fb0320-1384-179494-426025-23b6b0-2e3303331@172.16.42.1\r\n"
+			"Content-Type: application/sdp\r\n"
+			"Content-Length: 389\r\n"
+			"CSeq: 1 INVITE\r\n"
+			"Allow: INVITE, ACK, BYE, CANCEL, OPTIONS, INFO, UPDATE, REGISTER, MESSAGE, REFER, SUBSCRIBE, PRACK\r\n"
+			"Accept: application/sdp, application/dtmf-relay\r\n"
+			"Max-Forwards: 69\r\n"
+			"\r\n"
+			"v=0\r\n"
+			"o=- 1826 1826 IN IP4 172.16.42.1\r\n"
+			"s=Pouetpouet\r\n"
+			"c=IN IP4 172.16.42.1\r\n"
+			"t=0 0\r\n"
+			"m=audio 20506 RTP/AVP 0 8 13 101\r\n"
+			"a=rtpmap:0 PCMU/8000\r\n"
+			"a=rtpmap:8 PCMA/8000\r\n"
+			"a=rtpmap:13 CN/8000\r\n"
+			"a=rtpmap:101 telephone-event/8000\r\n"
+			"a=fmtp:101 0-15\r\n"
+			"m=video 24194 RTP/AVP 105 104\r\n"
+			"a=sendonly\r\n"
+			"a=rtpmap:105 H264/90000\r\n"
+			"a=fmtp:105 packetization-mode=0\r\n"
+			"a=rtpmap:104 H263-1998/90000\r\n"
+			"a=fmtp:104 CIF=1;J=1\r\n";
+
+	belle_sip_message_t* message = belle_sip_message_parse(raw_message);
+	belle_sip_listener_t* listener = NULL;
+
+	int called_times = 0;
+
+	listener_cbs.process_response_event = testMalformedFrom_process_response_cb;
+	listener = belle_sip_listener_create_from_callbacks(&listener_cbs, &called_times);
+	belle_sip_provider_add_sip_listener(provider, listener);
+
+	belle_sip_object_ref(message);
+	belle_sip_object_ref(message); /* double ref: originally the message is created with 0 refcount, and dispatch_message will unref() it.*/
+	belle_sip_provider_dispatch_message(provider, message);
+	// we expect the stack to send a 400 error
+	belle_sip_stack_sleep(stack,1000);
+
+	BC_ASSERT_EQUAL(called_times,1,int,"%d");
+	belle_sip_provider_remove_sip_listener(provider,listener);
+
+	belle_sip_object_unref(listener);
+	belle_sip_object_unref(provider);
+	belle_sip_object_unref(stack);
+	belle_sip_object_unref(message);
 }
 
 
+
 static void testMalformedMandatoryField(void){
 	belle_sip_stack_t*        stack = belle_sip_stack_new(NULL);
 	belle_sip_listening_point_t* lp = belle_sip_stack_create_listening_point(stack,
@@ -1120,6 +1186,7 @@ test_t message_tests[] = {
 	TEST_NO_TAG("Malformed mandatory field", testMalformedMandatoryField),
 	TEST_NO_TAG("Malformed invite with bad begin", testMalformedMessageWithWrongStart),
 	TEST_NO_TAG("Malformed register", testMalformedOptionnalHeaderInMessage),
+	TEST_NO_TAG("Malformed from 3", testMalformedFrom3),
 	TEST_NO_TAG("Channel parser error recovery", channel_parser_tester_recovery_from_error),
 	TEST_NO_TAG("Channel parser malformed start", channel_parser_malformed_start),
 	TEST_NO_TAG("Channel parser truncated start", channel_parser_truncated_start),

