--- changelog/_unreleased/2024-03-04-clear-cookies-on-404-pages.md ---
@@ -0,0 +1,9 @@
+---
+title: Clear cookies on 404 pages
+issue: NEXT-34113
+---
+
+# Core
+
+* Changed `\Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber` to remove all sessions cookies, added by `\Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler`
+

--- src/Storefront/DependencyInjection/services.xml ---
@@ -182,6 +182,7 @@
             <argument type="service" id="Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator"/>
             <argument type="service" id="Shopware\Core\Framework\Adapter\Cache\CacheInvalidator"/>
             <argument type="service" id="event_dispatcher"/>
+            <argument>%session.storage.options%</argument>
 
             <tag name="kernel.event_subscriber"/>
             <tag name="kernel.reset" method="reset"/>

--- src/Storefront/Framework/Routing/NotFound/NotFoundSubscriber.php ---
@@ -42,10 +42,13 @@ class NotFoundSubscriber implements EventSubscriberInterface, ResetInterface
      */
     private bool $handled = false;
 
+    private string $sessionName;
+
     /**
      * @internal
      *
      * @param AbstractCacheTracer<Response> $cacheTracer
+     * @param array{name?: string} $sessionOptions
      */
     public function __construct(
         private readonly HttpKernelInterface $httpKernel,
@@ -55,8 +58,10 @@ public function __construct(
         private readonly AbstractCacheTracer $cacheTracer,
         private readonly EntityCacheKeyGenerator $generator,
         private readonly CacheInvalidator $cacheInvalidator,
-        private readonly EventDispatcherInterface $eventDispatcher
+        private readonly EventDispatcherInterface $eventDispatcher,
+        array $sessionOptions = []
     ) {
+        $this->sessionName = $sessionOptions['name'] ?? 'session-';
     }
 
     public static function getSubscribedEvents(): array
@@ -123,6 +128,13 @@ public function onError(ExceptionEvent $event): void
                 $response->setContext(null);
             }
 
+            // Remove session cookie from 404 pages, injected by the Symfony session listener
+            foreach ($response->headers->getCookies() as $cookie) {
+                if ($cookie->getName() === $this->sessionName) {
+                    $response->headers->removeCookie($cookie->getName(), $cookie->getPath(), $cookie->getDomain());
+                }
+            }
+
             return $response;
         });
 

--- tests/unit/Storefront/Framework/Routing/NotFound/NotFoundPageCacheKeyEventTest.php ---
@@ -1,6 +1,6 @@
 <?php declare(strict_types=1);
 
-namespace Shopware\Storefront\Test\Framework\Routing\NotFound;
+namespace Shopware\Tests\Unit\Storefront\Framework\Routing\NotFound;
 
 use PHPUnit\Framework\TestCase;
 use Shopware\Core\Framework\Context;

--- tests/unit/Storefront/Framework/Routing/NotFound/NotFoundPageTagsEventTest.php ---
@@ -1,6 +1,6 @@
 <?php declare(strict_types=1);
 
-namespace Shopware\Storefront\Test\Framework\Routing\NotFound;
+namespace Shopware\Tests\Unit\Storefront\Framework\Routing\NotFound;
 
 use PHPUnit\Framework\TestCase;
 use Shopware\Core\Framework\Context;

--- tests/unit/Storefront/Framework/Routing/NotFound/NotFoundSubscriberTest.php ---
@@ -1,6 +1,6 @@
 <?php declare(strict_types=1);
 
-namespace Shopware\Storefront\Test\Framework\Routing\NotFound;
+namespace Shopware\Tests\Unit\Storefront\Framework\Routing\NotFound;
 
 use PHPUnit\Framework\TestCase;
 use Shopware\Core\Framework\Adapter\Cache\AbstractCacheTracer;
@@ -14,6 +14,7 @@
 use Symfony\Component\Cache\Adapter\ArrayAdapter;
 use Symfony\Component\Cache\Adapter\TagAwareAdapter;
 use Symfony\Component\EventDispatcher\EventDispatcher;
+use Symfony\Component\HttpFoundation\Cookie;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpFoundation\Response;
@@ -97,6 +98,63 @@ public function testErrorHandled(): void
         static::assertInstanceOf(Response::class, $response);
     }
 
+    public function testCookiesAreNotPersistedToNotFoundPages(): void
+    {
+        $httpKernel = $this->createMock(HttpKernelInterface::class);
+        $response = new Response();
+        $response->headers->setCookie(new Cookie('extension-cookie', '1'));
+        $response->headers->setCookie(new Cookie('session-', '1'));
+        $httpKernel
+            ->expects(static::once())
+            ->method('handle')
+            ->willReturn($response);
+
+        $cacheTracer = $this->createMock(AbstractCacheTracer::class);
+        $cacheTracer
+            ->expects(static::once())
+            ->method('trace')
+            ->willReturnCallback(fn (string $name, \Closure $closure) => $closure());
+
+        $requestStack = $this->createMock(RequestStack::class);
+        $requestStack->method('getMainRequest')->willReturn(new Request());
+
+        $arrayAdapter = new ArrayAdapter();
+        $subscriber = new NotFoundSubscriber(
+            $httpKernel,
+            $this->createMock(SalesChannelContextServiceInterface::class),
+            false,
+            new TagAwareAdapter($arrayAdapter, $arrayAdapter),
+            $cacheTracer,
+            $this->createMock(EntityCacheKeyGenerator::class),
+            $this->createMock(CacheInvalidator::class),
+            new EventDispatcher(),
+            []
+        );
+
+        $request = new Request();
+
+        $event = new ExceptionEvent(
+            $this->createMock(Kernel::class),
+            $request,
+            0,
+            new HttpException(Response::HTTP_NOT_FOUND)
+        );
+
+        $subscriber->onError($event);
+
+        $writtenCaches = array_values($arrayAdapter->getValues());
+
+        static::assertArrayHasKey(0, $writtenCaches);
+
+        $cacheItem = unserialize($writtenCaches[0]);
+        static::assertInstanceOf(Response::class, $cacheItem);
+
+        $cookies = $cacheItem->headers->getCookies();
+        static::assertCount(1, $cookies);
+
+        static::assertSame('extension-cookie', $cookies[0]->getName());
+    }
+
     public function testOtherExceptionsDoesNotGetCached(): void
     {
         $httpKernel = $this->createMock(HttpKernelInterface::class);

