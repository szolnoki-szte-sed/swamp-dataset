--- plugins/modbus/modbus_rtu.c ---
@@ -56,6 +56,7 @@ static const neu_plugin_intf_funs_t plugin_intf_funs = {
 
     .driver.validate_tag  = driver_validate_tag,
     .driver.group_timer   = driver_group_timer,
+    .driver.group_sync    = driver_group_timer,
     .driver.write_tag     = driver_write,
     .driver.tag_validator = driver_tag_validator,
     .driver.write_tags    = driver_write_tags,

--- plugins/modbus/modbus_tcp.c ---
@@ -58,6 +58,7 @@ static const neu_plugin_intf_funs_t plugin_intf_funs = {
 
     .driver.validate_tag  = driver_validate_tag,
     .driver.group_timer   = driver_group_timer,
+    .driver.group_sync    = driver_group_timer,
     .driver.write_tag     = driver_write,
     .driver.tag_validator = driver_tag_validator,
     .driver.write_tags    = driver_write_tags,

--- src/adapter/driver/driver.c ---
@@ -547,6 +547,7 @@ void neu_adapter_driver_read_group(neu_adapter_driver_t *driver,
             }
         } else {
             // sync read to update cache
+            stop_group_timer(driver, g);
             driver->adapter.module->intf_funs->driver.group_sync(
                 driver->adapter.plugin, &g->grp);
             // fetch updated data from cache
@@ -555,6 +556,7 @@ void neu_adapter_driver_read_group(neu_adapter_driver_t *driver,
                            NEU_DRIVER_TAG_CACHE_EXPIRE_TIME,
                        neu_adapter_get_tag_cache_type(&driver->adapter),
                        driver->cache, cmd->group, tags, resp.tags);
+            start_group_timer(driver, g);
         }
     } else {
         read_group(global_timestamp,
@@ -643,6 +645,7 @@ void neu_adapter_driver_read_group_paginate(neu_adapter_driver_t *driver,
             }
         } else {
             // sync read to update cache
+            stop_group_timer(driver, g);
             driver->adapter.module->intf_funs->driver.group_sync(
                 driver->adapter.plugin, &g->grp);
             // fetch updated data from cache
@@ -652,6 +655,7 @@ void neu_adapter_driver_read_group_paginate(neu_adapter_driver_t *driver,
                     NEU_DRIVER_TAG_CACHE_EXPIRE_TIME,
                 neu_adapter_get_tag_cache_type(&driver->adapter), driver->cache,
                 cmd->group, tags, resp.tags);
+            start_group_timer(driver, g);
         }
     } else {
         read_group_paginate(global_timestamp,

--- tests/ft/driver/test_modbus.py ---
@@ -858,31 +858,27 @@ def test_read_tags_fuzz(self, param):
         assert 200 == response.status_code
         assert 1 == len(response.json()["tags"])
 
-    @description(given="created modbus node and tags", when="read tags synchronously", then="read fail")
+    @description(given="created modbus node and tags", when="read tags synchronously", then="read success")
     def test_read_tags_sync(self, param):
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_register_bit[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_register_uint16[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_register_int16[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_register_uint32[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_register_int32[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_register_string[0]['name'], sync=True)
-
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_bit_1[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_bit_2[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_bit_3[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_bit_4[0]['name'], sync=True)
-        assert error.NEU_ERR_PLUGIN_NOT_SUPPORT_READ_SYNC == api.read_tag_error(
-            node=param[0], group='group', tag=input_bit_5[0]['name'], sync=True)
+        assert -123 == api.read_tag(
+            node=param[0], group='group', tag=hold_int16[0]['name'], sync=True)
+
+        assert -123 == api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_int16[0]['name'], sync=True)
+        assert 123 == api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_uint16[0]['name'], sync=True)
+        assert -1234 == api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_int32[0]['name'], sync=True)
+        assert 1234 == api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_uint32[0]['name'], sync=True)
+        assert compare_float(13.4121, api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_float[0]['name'], sync=True))
+        assert 'hello' == api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_string[0]['name'], sync=True)
+        bytes = api.read_tag_paginate(
+            node=param[0], group='group', tag=hold_bytes[0]['name'], sync=True)
+        assert len(bytes) == 10
+        assert bytes == [0x1, 0x2, 0x3, 0x4, 0, 0, 0, 0, 0, 0]
 
     @description(given="created modbus node, a tag with same name/address that in different groups", when="read tags", then="read success")
     def test_read_tag_in_diff_group(self, param):

--- tests/ft/neuron/api.py ---
@@ -179,6 +179,18 @@ def read_tag(node, group, tag, sync=False):
     finally:
         return x[0]['value']
 
+def read_tag_paginate(node, group, tag, sync=False):
+    response = read_tags_paginate(node, group, sync, query={"name": tag})
+    assert response.status_code == 200
+    tag_items = response.json()['items']
+    matching_tags = list(filter(lambda x: x['name'] == tag, tag_items))
+    assert len(matching_tags) == 1
+    matching_tag = matching_tags[0]
+    try:
+        value = matching_tag['value']
+    except KeyError:
+        print(matching_tag['error'])
+    return value
 
 def read_tag_error(node, group, tag, sync=False):
     response = read_tags(node, group, sync)

