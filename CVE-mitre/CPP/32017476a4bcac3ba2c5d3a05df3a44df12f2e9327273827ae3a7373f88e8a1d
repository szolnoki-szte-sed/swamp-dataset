--- tensorflow/core/kernels/fractional_avg_pool_op.cc ---
@@ -51,7 +51,7 @@ class FractionalAvgPoolOp : public OpKernel {
                       pooling_ratio_[i]));
     }
     OP_REQUIRES(
-        context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,
+        context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,
         errors::Unimplemented("Fractional average pooling is not yet "
                               "supported on the batch nor channel dimension."));
     OP_REQUIRES_OK(context, context->GetAttr("deterministic", &deterministic_));

--- tensorflow/core/kernels/fractional_max_pool_op.cc ---
@@ -53,7 +53,7 @@ class FractionalMaxPoolOp : public OpKernel {
     }
 
     OP_REQUIRES(
-        context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,
+        context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,
         errors::Unimplemented("Fractional max pooling is not yet "
                               "supported on the batch nor channel dimension."));
 

--- tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py ---
@@ -351,7 +351,7 @@ def testPoolingRatioHasMoreDimThanInput(self):
             name=None)
         self.evaluate(result)
 
-  def testPoolingRatioValueOutOfRange(self):
+  def testPoolingRatioIllegalSmallValue(self):
     with self.cached_session() as _:
       # Whether turn on `TF2_BEHAVIOR` generates different error messages
       with self.assertRaisesRegex(
@@ -368,6 +368,16 @@ def testPoolingRatioValueOutOfRange(self):
         )
         self.evaluate(result)
 
+  def testPoolingIllegalRatioForBatch(self):
+    with self.cached_session() as _:
+      with self.assertRaises(errors.UnimplementedError):
+        result = nn_ops.gen_nn_ops.fractional_avg_pool(
+            np.zeros([3, 30, 50, 3]),
+            [2, 3, 1.5, 1],
+            True,
+            True)
+        self.evaluate(result)
+
 
 class FractionalAvgPoolGradTest(test.TestCase):
   """Tests for FractionalAvgPoolGrad.

--- tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py ---
@@ -338,7 +338,7 @@ def testPoolingRatioHasMoreDimThanInput(self):
             name=None)
         self.evaluate(result)
 
-  def testPoolingRatioValueOutOfRange(self):
+  def testPoolingRatioIllegalSmallValue(self):
     with self.cached_session() as _:
       # Whether turn on `TF2_BEHAVIOR` generates different error messages
       with self.assertRaisesRegex(
@@ -355,6 +355,16 @@ def testPoolingRatioValueOutOfRange(self):
         )
         self.evaluate(result)
 
+  def testPoolingIllegalRatioForBatch(self):
+    with self.cached_session() as _:
+      with self.assertRaises(errors.UnimplementedError):
+        result = nn_ops.fractional_max_pool(
+            np.zeros([3, 30, 50, 3]),
+            [2, 3, 1.5, 1],
+            True,
+            True)
+        self.evaluate(result)
+
 
 class FractionalMaxPoolGradTest(test.TestCase):
   """Tests for FractionalMaxPoolGrad.

