diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java
index 08fb73fafa..1f74fb7029 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java
@@ -21,7 +21,6 @@
 import org.hibernate.validator.cfg.context.Cascadable;
 import org.hibernate.validator.cfg.context.GroupConversionTargetContext;
 import org.hibernate.validator.cfg.context.Unwrapable;
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
 
@@ -30,14 +29,14 @@
  *
  * @author Gunnar Morling
  */
-public abstract class CascadableConstraintMappingContextImplBase<C extends Cascadable<C> & Unwrapable<C>>
+abstract class CascadableConstraintMappingContextImplBase<C extends Cascadable<C> & Unwrapable<C>>
 		extends ConstraintMappingContextImplBase implements Cascadable<C>, Unwrapable<C> {
 
 	protected boolean isCascading;
 	protected Map<Class<?>, Class<?>> groupConversions = newHashMap();
 	private boolean unwrapValidatedValue;
 
-	public CascadableConstraintMappingContextImplBase(DefaultConstraintMapping mapping) {
+	CascadableConstraintMappingContextImplBase(DefaultConstraintMapping mapping) {
 		super( mapping );
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java
index c2cf601981..993546f499 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java
@@ -36,7 +36,7 @@
  *
  * @author Gunnar Morling
  */
-public class ConfiguredConstraint<A extends Annotation> {
+class ConfiguredConstraint<A extends Annotation> {
 
 	private static final Log log = LoggerFactory.make();
 
@@ -51,11 +51,11 @@ private ConfiguredConstraint(ConstraintDef<?, A> constraint, ConstraintLocation
 		this.elementType = elementType;
 	}
 
-	public static <A extends Annotation> ConfiguredConstraint<A> forType(ConstraintDef<?, A> constraint, Class<?> beanType) {
+	static <A extends Annotation> ConfiguredConstraint<A> forType(ConstraintDef<?, A> constraint, Class<?> beanType) {
 		return new ConfiguredConstraint<A>( constraint, ConstraintLocation.forClass( beanType ), ElementType.TYPE );
 	}
 
-	public static <A extends Annotation> ConfiguredConstraint<A> forProperty(ConstraintDef<?, A> constraint, Member member) {
+	static <A extends Annotation> ConfiguredConstraint<A> forProperty(ConstraintDef<?, A> constraint, Member member) {
 		return new ConfiguredConstraint<A>(
 				constraint,
 				ConstraintLocation.forProperty( member ),
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConstraintMappingContextImplBase.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConstraintMappingContextImplBase.java
index 8e0170fedd..a0988583a5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConstraintMappingContextImplBase.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConstraintMappingContextImplBase.java
@@ -21,7 +21,6 @@
 import java.util.Set;
 
 import org.hibernate.validator.cfg.context.TypeConstraintMappingContext;
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
 import org.hibernate.validator.internal.metadata.core.MetaConstraint;
 import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
@@ -34,12 +33,12 @@
  *
  * @author Gunnar Morling
  */
-public abstract class ConstraintMappingContextImplBase {
+abstract class ConstraintMappingContextImplBase {
 
 	protected final DefaultConstraintMapping mapping;
 	private final Set<ConfiguredConstraint<?>> constraints;
 
-	public ConstraintMappingContextImplBase(DefaultConstraintMapping mapping) {
+	ConstraintMappingContextImplBase(DefaultConstraintMapping mapping) {
 		this.mapping = mapping;
 		this.constraints = newHashSet();
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CrossParameterConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CrossParameterConstraintMappingContextImpl.java
index 8190666372..83718aacec 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CrossParameterConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CrossParameterConstraintMappingContextImpl.java
@@ -29,13 +29,13 @@
  *
  * @author Gunnar Morling
  */
-public final class CrossParameterConstraintMappingContextImpl
+final class CrossParameterConstraintMappingContextImpl
 		extends ConstraintMappingContextImplBase
 		implements CrossParameterConstraintMappingContext {
 
 	private final ExecutableConstraintMappingContextImpl executableContext;
 
-	public CrossParameterConstraintMappingContextImpl(ExecutableConstraintMappingContextImpl executableContext) {
+	CrossParameterConstraintMappingContextImpl(ExecutableConstraintMappingContextImpl executableContext) {
 		super( executableContext.getTypeContext().getConstraintMapping() );
 		this.executableContext = executableContext;
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/DefaultConstraintMapping.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java
similarity index 96%
rename from engine/src/main/java/org/hibernate/validator/internal/cfg/DefaultConstraintMapping.java
rename to engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java
index 27ec8d1bea..ba741d9fb0 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/DefaultConstraintMapping.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java
@@ -14,14 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.hibernate.validator.internal.cfg;
+package org.hibernate.validator.internal.cfg.context;
 
 import java.util.Set;
+
 import javax.validation.ParameterNameProvider;
 
 import org.hibernate.validator.cfg.ConstraintMapping;
 import org.hibernate.validator.cfg.context.TypeConstraintMappingContext;
-import org.hibernate.validator.internal.cfg.context.TypeConstraintMappingContextImpl;
 import org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
 import org.hibernate.validator.internal.metadata.raw.BeanConfiguration;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java
index a1920e0126..686827f86c 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java
@@ -49,7 +49,7 @@
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
  * @author Gunnar Morling
  */
-public class ExecutableConstraintMappingContextImpl
+class ExecutableConstraintMappingContextImpl
 		implements ConstructorConstraintMappingContext, MethodConstraintMappingContext {
 
 	private static final Log log = LoggerFactory.make();
@@ -60,11 +60,11 @@ public class ExecutableConstraintMappingContextImpl
 	private ReturnValueConstraintMappingContextImpl returnValueContext;
 	private CrossParameterConstraintMappingContextImpl crossParameterContext;
 
-	public ExecutableConstraintMappingContextImpl(TypeConstraintMappingContextImpl<?> typeContext, Constructor<?> constructor) {
+	ExecutableConstraintMappingContextImpl(TypeConstraintMappingContextImpl<?> typeContext, Constructor<?> constructor) {
 		this( typeContext, ExecutableElement.forConstructor( constructor ) );
 	}
 
-	public ExecutableConstraintMappingContextImpl(TypeConstraintMappingContextImpl<?> typeContext, Method method) {
+	ExecutableConstraintMappingContextImpl(TypeConstraintMappingContextImpl<?> typeContext, Method method) {
 		this( typeContext, ExecutableElement.forMethod( method ) );
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/GroupConversionTargetContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/GroupConversionTargetContextImpl.java
index 7e75c21f7a..fac6b93182 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/GroupConversionTargetContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/GroupConversionTargetContextImpl.java
@@ -23,13 +23,13 @@
  *
  * @author Gunnar Morling
  */
-public class GroupConversionTargetContextImpl<C> implements GroupConversionTargetContext<C> {
+class GroupConversionTargetContextImpl<C> implements GroupConversionTargetContext<C> {
 
 	private final C cascadableContext;
 	private final Class<?> from;
 	private final CascadableConstraintMappingContextImplBase<?> target;
 
-	public GroupConversionTargetContextImpl(Class<?> from, C cascadableContext, CascadableConstraintMappingContextImplBase<?> target) {
+	GroupConversionTargetContextImpl(Class<?> from, C cascadableContext, CascadableConstraintMappingContextImplBase<?> target) {
 		this.from = from;
 		this.cascadableContext = cascadableContext;
 		this.target = target;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ParameterConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ParameterConstraintMappingContextImpl.java
index 7c2e3efe06..54e9a5b121 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ParameterConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ParameterConstraintMappingContextImpl.java
@@ -38,14 +38,14 @@
  * @author Gunnar Morling
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
  */
-public final class ParameterConstraintMappingContextImpl
+final class ParameterConstraintMappingContextImpl
 		extends CascadableConstraintMappingContextImplBase<ParameterConstraintMappingContext>
 		implements ParameterConstraintMappingContext {
 
 	private final ExecutableConstraintMappingContextImpl executableContext;
 	private final int parameterIndex;
 
-	public ParameterConstraintMappingContextImpl(ExecutableConstraintMappingContextImpl executableContext, int parameterIndex) {
+	ParameterConstraintMappingContextImpl(ExecutableConstraintMappingContextImpl executableContext, int parameterIndex) {
 		super( executableContext.getTypeContext().getConstraintMapping() );
 
 		this.executableContext = executableContext;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/PropertyConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/PropertyConstraintMappingContextImpl.java
index 54255aba28..98ff38dff9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/PropertyConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/PropertyConstraintMappingContextImpl.java
@@ -41,14 +41,14 @@
  * @author Gunnar Morling
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
  */
-public final class PropertyConstraintMappingContextImpl
+final class PropertyConstraintMappingContextImpl
 		extends CascadableConstraintMappingContextImplBase<PropertyConstraintMappingContext>
 		implements PropertyConstraintMappingContext {
 
 	private final TypeConstraintMappingContextImpl<?> typeContext;
 	private final Member member;
 
-	public PropertyConstraintMappingContextImpl(TypeConstraintMappingContextImpl<?> typeContext, Member member) {
+	PropertyConstraintMappingContextImpl(TypeConstraintMappingContextImpl<?> typeContext, Member member) {
 		super( typeContext.getConstraintMapping() );
 		this.typeContext = typeContext;
 		this.member = member;
@@ -99,7 +99,7 @@ public MethodConstraintMappingContext method(String name, Class<?>... parameterT
 		return typeContext.method( name, parameterTypes );
 	}
 
-	public ConstrainedElement build(ConstraintHelper constraintHelper) {
+	ConstrainedElement build(ConstraintHelper constraintHelper) {
 		if ( member instanceof Field ) {
 			return new ConstrainedField(
 					ConfigurationSource.API,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ReturnValueConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ReturnValueConstraintMappingContextImpl.java
index d02daee846..56a5d5f1f6 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ReturnValueConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ReturnValueConstraintMappingContextImpl.java
@@ -31,13 +31,13 @@
  * @author Gunnar Morling
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
  */
-public final class ReturnValueConstraintMappingContextImpl
+final class ReturnValueConstraintMappingContextImpl
 		extends CascadableConstraintMappingContextImplBase<ReturnValueConstraintMappingContext>
 		implements ReturnValueConstraintMappingContext {
 
 	private final ExecutableConstraintMappingContextImpl executableContext;
 
-	public ReturnValueConstraintMappingContextImpl(ExecutableConstraintMappingContextImpl executableContext) {
+	ReturnValueConstraintMappingContextImpl(ExecutableConstraintMappingContextImpl executableContext) {
 		super( executableContext.getTypeContext().getConstraintMapping() );
 		this.executableContext = executableContext;
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java
index a37e414aa1..e1dc2a025c 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java
@@ -33,7 +33,6 @@
 import org.hibernate.validator.cfg.context.MethodConstraintMappingContext;
 import org.hibernate.validator.cfg.context.PropertyConstraintMappingContext;
 import org.hibernate.validator.cfg.context.TypeConstraintMappingContext;
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
 import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.ConstraintType;
 import org.hibernate.validator.internal.metadata.location.ConstraintLocation;
@@ -80,7 +79,7 @@ public final class TypeConstraintMappingContextImpl<C> extends ConstraintMapping
 	private List<Class<?>> defaultGroupSequence;
 	private Class<? extends DefaultGroupSequenceProvider<? super C>> defaultGroupSequenceProviderClass;
 
-	public TypeConstraintMappingContextImpl(DefaultConstraintMapping mapping, Class<C> beanClass) {
+	TypeConstraintMappingContextImpl(DefaultConstraintMapping mapping, Class<C> beanClass) {
 		super( mapping );
 		this.beanClass = beanClass;
 		mapping.getAnnotationProcessingOptions().ignoreAnnotationConstraintForClass( beanClass, Boolean.FALSE );
@@ -199,7 +198,7 @@ public ConstructorConstraintMappingContext constructor(Class<?>... parameterType
 		return context;
 	}
 
-	public BeanConfiguration<C> build(ConstraintHelper constraintHelper, ParameterNameProvider parameterNameProvider) {
+	BeanConfiguration<C> build(ConstraintHelper constraintHelper, ParameterNameProvider parameterNameProvider) {
 		return new BeanConfiguration<C>(
 				ConfigurationSource.API,
 				beanClass,
@@ -243,7 +242,7 @@ private DefaultGroupSequenceProvider<? super C> getDefaultGroupSequenceProvider(
 		) : null;
 	}
 
-	public Class<?> getBeanClass() {
+	Class<?> getBeanClass() {
 		return beanClass;
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java
index 74eb67cecc..c9cf885d4a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java
@@ -39,7 +39,7 @@
 
 import org.hibernate.validator.HibernateValidatorConfiguration;
 import org.hibernate.validator.cfg.ConstraintMapping;
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
+import org.hibernate.validator.internal.cfg.context.DefaultConstraintMapping;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorFactoryImpl;
 import org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver;
 import org.hibernate.validator.internal.engine.valuehandling.JavaFXPropertyValueUnwrapper;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java
index f7094c7191..764d43b243 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java
@@ -34,7 +34,7 @@
 import org.hibernate.validator.HibernateValidatorConfiguration;
 import org.hibernate.validator.HibernateValidatorContext;
 import org.hibernate.validator.HibernateValidatorFactory;
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
+import org.hibernate.validator.internal.cfg.context.DefaultConstraintMapping;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager;
 import org.hibernate.validator.internal.metadata.BeanMetaDataManager;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java
index 2cbbb56b23..af7f290f2e 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java
@@ -17,9 +17,10 @@
 package org.hibernate.validator.internal.metadata.provider;
 
 import java.util.Set;
+
 import javax.validation.ParameterNameProvider;
 
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
+import org.hibernate.validator.internal.cfg.context.DefaultConstraintMapping;
 import org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions;
 import org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/annotationfactory/AnnotationProxy.java b/engine/src/main/java/org/hibernate/validator/internal/util/annotationfactory/AnnotationProxy.java
index 25e6b2fabb..994113f8aa 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/annotationfactory/AnnotationProxy.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/annotationfactory/AnnotationProxy.java
@@ -56,7 +56,7 @@
  * @author Gunnar Morling
  * @see java.lang.annotation.Annotation
  */
-public class AnnotationProxy implements Annotation, InvocationHandler, Serializable {
+class AnnotationProxy implements Annotation, InvocationHandler, Serializable {
 
 	private static final long serialVersionUID = 6907601010599429454L;
 	private static final Log log = LoggerFactory.make();
@@ -65,7 +65,7 @@ public class AnnotationProxy implements Annotation, InvocationHandler, Serializa
 	private final Map<String, Object> values;
 	private final int hashCode;
 
-	public AnnotationProxy(AnnotationDescriptor<?> descriptor) {
+	AnnotationProxy(AnnotationDescriptor<?> descriptor) {
 		this.annotationType = descriptor.type();
 		values = Collections.unmodifiableMap( getAnnotationValues( descriptor ) );
 		this.hashCode = calculateHashCode();
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java
index 05792110ce..65c05e8649 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java
@@ -51,14 +51,14 @@
  *
  * @author Hardy Ferentschik
  */
-public class ConstrainedExecutableBuilder {
+class ConstrainedExecutableBuilder {
 
 	private static final Log log = LoggerFactory.make();
 
 	private ConstrainedExecutableBuilder() {
 	}
 
-	public static Set<ConstrainedExecutable> buildMethodConstrainedExecutable(List<MethodType> methods,
+	static Set<ConstrainedExecutable> buildMethodConstrainedExecutable(List<MethodType> methods,
 																			  Class<?> beanClass,
 																			  String defaultPackage,
 																			  ParameterNameProvider parameterNameProvider,
@@ -125,7 +125,7 @@ public static Set<ConstrainedExecutable> buildMethodConstrainedExecutable(List<M
 		return constrainedExecutables;
 	}
 
-	public static Set<ConstrainedExecutable> buildConstructorConstrainedExecutable(List<ConstructorType> constructors,
+	static Set<ConstrainedExecutable> buildConstructorConstrainedExecutable(List<ConstructorType> constructors,
 																				   Class<?> beanClass,
 																				   String defaultPackage,
 																				   ParameterNameProvider parameterNameProvider,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java
index 7721f9a7b6..21abe25999 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java
@@ -41,13 +41,13 @@
  *
  * @author Hardy Ferentschik
  */
-public class ConstrainedFieldBuilder {
+class ConstrainedFieldBuilder {
 	private static final Log log = LoggerFactory.make();
 
 	private ConstrainedFieldBuilder() {
 	}
 
-	public static Set<ConstrainedField> buildConstrainedFields(List<FieldType> fields,
+	static Set<ConstrainedField> buildConstrainedFields(List<FieldType> fields,
 															   Class<?> beanClass,
 															   String defaultPackage,
 															   ConstraintHelper constraintHelper,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java
index b4b4c6bf71..c94c2960b9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java
@@ -43,13 +43,13 @@
  *
  * @author Hardy Ferentschik
  */
-public class ConstrainedGetterBuilder {
+class ConstrainedGetterBuilder {
 	private static final Log log = LoggerFactory.make();
 
 	private ConstrainedGetterBuilder() {
 	}
 
-	public static Set<ConstrainedExecutable> buildConstrainedGetters(List<GetterType> getterList,
+	static Set<ConstrainedExecutable> buildConstrainedGetters(List<GetterType> getterList,
 																	 Class<?> beanClass,
 																	 String defaultPackage,
 																	 ConstraintHelper constraintHelper,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedParameterBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedParameterBuilder.java
index b0d5b0a452..4acbdfe291 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedParameterBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedParameterBuilder.java
@@ -40,12 +40,12 @@
  *
  * @author Hardy Ferentschik
  */
-public class ConstrainedParameterBuilder {
+class ConstrainedParameterBuilder {
 
 	private ConstrainedParameterBuilder() {
 	}
 
-	public static List<ConstrainedParameter> buildConstrainedParameters(List<ParameterType> parameterList,
+	static List<ConstrainedParameter> buildConstrainedParameters(List<ParameterType> parameterList,
 																		ExecutableElement executableElement,
 																		String defaultPackage,
 																		ConstraintHelper constraintHelper,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedTypeBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedTypeBuilder.java
index 09d7c8b8a7..9c92eed6d7 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedTypeBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedTypeBuilder.java
@@ -35,12 +35,12 @@
  *
  * @author Hardy Ferentschik
  */
-public class ConstrainedTypeBuilder {
+class ConstrainedTypeBuilder {
 
 	private ConstrainedTypeBuilder() {
 	}
 
-	public static ConstrainedType buildConstrainedType(ClassType classType,
+	static ConstrainedType buildConstrainedType(ClassType classType,
 													   Class<?> beanClass,
 													   String defaultPackage,
 													   ConstraintHelper constraintHelper,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java
index 023a909b36..85c993e4ec 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java
@@ -26,12 +26,12 @@
  *
  * @author Hardy Ferentschik
  */
-public class GroupConversionBuilder {
+class GroupConversionBuilder {
 
 	private GroupConversionBuilder() {
 	}
 
-	public static Map<Class<?>, Class<?>> buildGroupConversionMap(List<GroupConversionType> groupConversionTypes,
+	static Map<Class<?>, Class<?>> buildGroupConversionMap(List<GroupConversionType> groupConversionTypes,
 																  String defaultPackage) {
 		Map<Class<?>, Class<?>> groupConversionMap = newHashMap();
 		for ( GroupConversionType groupConversionType : groupConversionTypes ) {
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java
index c1f34af36e..2dede0871d 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java
@@ -45,7 +45,7 @@
  *
  * @author Hardy Ferentschik
  */
-public class MetaConstraintBuilder {
+class MetaConstraintBuilder {
 	private static final Log log = LoggerFactory.make();
 
 	private static final String MESSAGE_PARAM = "message";
@@ -56,7 +56,7 @@ private MetaConstraintBuilder() {
 	}
 
 	@SuppressWarnings("unchecked")
-	public static <A extends Annotation> MetaConstraint<A> buildMetaConstraint(ConstraintLocation constraintLocation,
+	static <A extends Annotation> MetaConstraint<A> buildMetaConstraint(ConstraintLocation constraintLocation,
 																			   ConstraintType constraint,
 																			   java.lang.annotation.ElementType type,
 																			   String defaultPackage,
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/ResourceLoaderHelper.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java
similarity index 94%
rename from engine/src/main/java/org/hibernate/validator/internal/util/ResourceLoaderHelper.java
rename to engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java
index 0a7ade05ca..7e4c083f38 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/ResourceLoaderHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java
@@ -14,7 +14,7 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-package org.hibernate.validator.internal.util;
+package org.hibernate.validator.internal.xml;
 
 import java.io.BufferedInputStream;
 import java.io.InputStream;
@@ -30,7 +30,7 @@
  *
  * @author Hardy Ferentschik
  */
-public final class ResourceLoaderHelper {
+final class ResourceLoaderHelper {
 	private static final Log log = LoggerFactory.make();
 
 	/**
@@ -44,7 +44,7 @@ public final class ResourceLoaderHelper {
 	 *
 	 * @see InputStream#markSupported()
 	 */
-	public static InputStream getResettableInputStreamForPath(String path) {
+	static InputStream getResettableInputStreamForPath(String path) {
 		//TODO not sure if it's the right thing to removing '/'
 		String inputPath = path;
 		if ( inputPath.startsWith( "/" ) ) {
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java
index 4305955aa7..f545fd6a28 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java
@@ -32,7 +32,6 @@
 import javax.validation.ValidationException;
 import javax.validation.spi.ValidationProvider;
 
-import org.hibernate.validator.internal.util.ResourceLoaderHelper;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.internal.util.privilegedactions.LoadClass;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
index 01ef0c27a9..228b4ca767 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
@@ -35,7 +35,6 @@
 import javax.xml.transform.stream.StreamSource;
 import javax.xml.validation.Schema;
 
-import org.hibernate.validator.internal.util.ResourceLoaderHelper;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.internal.util.privilegedactions.NewJaxbContext;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java b/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java
index 723b371284..5f5b1864fc 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java
@@ -146,7 +146,7 @@ private synchronized XMLEventReader createXmlEventReader(InputStream xmlStream)
 	 * @return the schema identified by the given resource name or {@code null} if the resource was not found or could
 	 *         not be loaded.
 	 */
-	public Schema getSchema(String schemaResource) {
+	Schema getSchema(String schemaResource) {
 		Schema schema = schemaCache.get( schemaResource );
 
 		if ( schema != null ) {
diff --git a/engine/src/main/java/org/hibernate/validator/resourceloading/PlatformResourceBundleLocator.java b/engine/src/main/java/org/hibernate/validator/resourceloading/PlatformResourceBundleLocator.java
index 28dfea8bca..9ae5e1f87a 100644
--- a/engine/src/main/java/org/hibernate/validator/resourceloading/PlatformResourceBundleLocator.java
+++ b/engine/src/main/java/org/hibernate/validator/resourceloading/PlatformResourceBundleLocator.java
@@ -35,7 +35,7 @@
  */
 public class PlatformResourceBundleLocator implements ResourceBundleLocator {
 	private static final Logger log = Logger.getLogger( PlatformResourceBundleLocator.class.getName() );
-	private String bundleName;
+	private final String bundleName;
 
 	public PlatformResourceBundleLocator(String bundleName) {
 		this.bundleName = bundleName;
@@ -49,6 +49,7 @@ public PlatformResourceBundleLocator(String bundleName) {
 	 *
 	 * @return the resource bundle or <code>null</code> if none is found.
 	 */
+	@Override
 	public ResourceBundle getResourceBundle(Locale locale) {
 		ResourceBundle rb = null;
 		ClassLoader classLoader = GetClassLoader.fromContext();
@@ -91,7 +92,7 @@ private ResourceBundle loadBundle(ClassLoader classLoader, Locale locale, String
 	private static class GetClassLoader implements PrivilegedAction<ClassLoader> {
 		private final Class<?> clazz;
 
-		public static ClassLoader fromContext() {
+		private static ClassLoader fromContext() {
 			final GetClassLoader action = new GetClassLoader( null );
 			if ( System.getSecurityManager() != null ) {
 				return AccessController.doPrivileged( action );
@@ -101,7 +102,7 @@ public static ClassLoader fromContext() {
 			}
 		}
 
-		public static ClassLoader fromClass(Class<?> clazz) {
+		private static ClassLoader fromClass(Class<?> clazz) {
 			if ( clazz == null ) {
 				throw new IllegalArgumentException( "Class is null" );
 			}
@@ -118,6 +119,7 @@ private GetClassLoader(Class<?> clazz) {
 			this.clazz = clazz;
 		}
 
+		@Override
 		public ClassLoader run() {
 			if ( clazz != null ) {
 				return clazz.getClassLoader();
diff --git a/engine/src/test/java/org/hibernate/validator/test/cfg/ConstraintMappingTest.java b/engine/src/test/java/org/hibernate/validator/test/cfg/ConstraintMappingTest.java
index 11a9c1dc0a..92567b07ea 100644
--- a/engine/src/test/java/org/hibernate/validator/test/cfg/ConstraintMappingTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/cfg/ConstraintMappingTest.java
@@ -22,6 +22,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.Set;
+
 import javax.validation.ConstraintViolation;
 import javax.validation.GroupDefinitionException;
 import javax.validation.GroupSequence;
@@ -35,7 +36,6 @@
 
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
-
 import org.hibernate.validator.HibernateValidator;
 import org.hibernate.validator.HibernateValidatorConfiguration;
 import org.hibernate.validator.cfg.ConstraintMapping;
@@ -48,7 +48,7 @@
 import org.hibernate.validator.cfg.defs.RangeDef;
 import org.hibernate.validator.cfg.defs.SizeDef;
 import org.hibernate.validator.group.GroupSequenceProvider;
-import org.hibernate.validator.internal.cfg.DefaultConstraintMapping;
+import org.hibernate.validator.internal.cfg.context.DefaultConstraintMapping;
 import org.hibernate.validator.internal.engine.DefaultParameterNameProvider;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
 import org.hibernate.validator.internal.metadata.raw.BeanConfiguration;
