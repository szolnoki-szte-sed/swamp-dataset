--- src/main/java/core/backend/aws/dynamodb/repository/DynamodbRepository.java ---
@@ -259,10 +259,14 @@ public DeployKey getDeployKeyById(String id) throws DeployKeyNotFoundException {
 
   public DeployKey getDeployKeyByValue(String value) throws DeployKeyNotFoundException {
     Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys("", 1, value).getEntities();
-    if (deployKeys == null || deployKeys.size() != 1) {
+    if (deployKeys == null || deployKeys.isEmpty()) {
       throw new DeployKeyNotFoundException("Could not find matching key");
     }
-    return deployKeys.stream().findFirst().orElseThrow(() -> new DeployKeyNotFoundException("Could not find matching key"));
+    return deployKeys
+      .stream()
+      .filter(deployKey -> deployKey.getKey().equals(value)) // Ensure exact match
+      .findFirst()
+      .orElseThrow(() -> new DeployKeyNotFoundException("Could not find matching key"));
   }
 
   public void deleteDeployKey(String id) {

--- src/main/java/core/backend/azure/cosmosdb/CosmosDbRepository.java ---
@@ -255,10 +255,15 @@ public DeployKey getDeployKeyById(String id) throws DeployKeyNotFoundException {
   public DeployKey getDeployKeyByValue(String value) throws DeployKeyNotFoundException {
       try {
           Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys("", 1, value).getEntities();
-          if (deployKeys == null || deployKeys.size() != 1) {
+          if (deployKeys == null || deployKeys.isEmpty() {
             throw new DeployKeyNotFoundException("Could not find matching key");
           }
-          return deployKeys.stream().findFirst().orElseThrow(() -> new DeployKeyNotFoundException("Could not find matching key"));
+
+          return deployKeys
+            .stream()
+            .filter(deployKey -> deployKey.getKey().equals(value)) // Ensure exact match
+            .findFirst()
+            .orElseThrow(() -> new DeployKeyNotFoundException("Could not find matching key"));
       } catch (Exception e) {
           throw new DeployKeyNotFoundException("Could not find matching key");
       }

--- src/main/java/core/backend/elasticsearch/ElasticSearchRepository.java ---
@@ -90,15 +90,19 @@ public DeployKey getDeployKeyById(String id) throws DeployKeyNotFoundException {
 
   @Override
   public DeployKey getDeployKeyByValue(String value) throws DeployKeyNotFoundException {
-      try {
-        Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys("", 1, value).getEntities();
-        if (deployKeys == null || deployKeys.size() != 1) {
-          throw new DeployKeyNotFoundException("Could not find matching key");
-        }
-        return deployKeys.stream().findFirst().orElseThrow(() -> new DeployKeyNotFoundException("Could not find matching key"));
-      } catch (Exception e) {
+    try {
+      Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys("", 1, value).getEntities();
+      if (deployKeys == null || deployKeys.isEmpty()) {
         throw new DeployKeyNotFoundException("Could not find matching key");
       }
+      // Ensure we match the key exactly
+      return deployKeys.stream()
+          .filter(deployKey -> deployKey.getKey().equals(value)) // Ensure it's an exact match
+          .findFirst()
+          .orElseThrow(() -> new DeployKeyNotFoundException("Could not find matching key"));
+    } catch (Exception e) {
+      throw new DeployKeyNotFoundException("Could not find matching key");
+    }
   }
 
   @Override

--- src/test/java/core/backend/aws/dynamodb/repository/DynamodbDeployKeyRepositoryTest.java ---
@@ -1,12 +1,18 @@
 package core.backend.aws.dynamodb.repository;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
+import java.util.Random;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
+
 import core.backend.AbstractDeployKeysBackendTest;
+import core.exceptions.DeployKeyNotFoundException;
 import core.tapir.DeployKey;
 import core.tapir.DeployKeyScope;
 import io.quarkus.test.junit.QuarkusTest;
-import org.junit.jupiter.api.AfterEach;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import org.junit.jupiter.api.Test;
 import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
 import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
 import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException;
@@ -37,4 +43,20 @@ void cannotOverwriteDeployKey() throws Exception {
     persistedDeployKey.setKey("changed");
     assertThrows(ConditionalCheckFailedException.class, () -> repository.saveDeployKey(persistedDeployKey));
   }
-}
\ No newline at end of file
+
+  @Test
+  void testGetDeployKeyByValue() throws Exception {
+
+    DeployKey deployKey = new DeployKey(DeployKeyScope.NAMESPACE, "", "double", "", "dcore");
+    repository.saveDeployKey(deployKey);
+
+    String deployKeyValue = deployKey.getKey();
+    Random random = new Random();
+    int end = random.nextInt(deployKeyValue.length());
+    String deployKeyValueSub = deployKeyValue.substring(0, end + 1); // +1 to include the end character
+
+    assertDoesNotThrow(() -> repository.getDeployKeyByValue(deployKeyValue));
+    assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue(deployKeyValueSub));
+    assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue("H0p3Fu11yf@k3k3y"));
+  }
+}

--- src/test/java/core/backend/elasticsearch/ElasticSearchDeployKeyRepositoryTest.java ---
@@ -1,23 +1,53 @@
 package core.backend.elasticsearch;
 
-import core.backend.AbstractDeployKeysBackendTest;
-import io.quarkus.test.junit.QuarkusTest;
-import jakarta.ws.rs.HttpMethod;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 import java.io.IOException;
+import java.util.Random;
+
 import org.elasticsearch.client.Request;
 import org.elasticsearch.client.RestClient;
 import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
+
+import core.backend.AbstractDeployKeysBackendTest;
+import core.exceptions.DeployKeyNotFoundException;
+import core.tapir.DeployKey;
+import core.tapir.DeployKeyScope;
+import io.quarkus.test.junit.QuarkusTest;
+import jakarta.ws.rs.HttpMethod;
 
 @QuarkusTest
 class ElasticSearchDeployKeyRepositoryTest extends AbstractDeployKeysBackendTest {
 
-  RestClient restClient;
-  public ElasticSearchDeployKeyRepositoryTest(ElasticSearchRepository repository, RestClient restClient) {
-    super(repository);
-    this.restClient = restClient;
-  }
-  @AfterEach
-  void tearDown() throws IOException {
-    restClient.performRequest(new Request(HttpMethod.DELETE, "/deploykeys"));
-  }
-}
\ No newline at end of file
+    ElasticSearchRepository repository;
+    RestClient restClient;
+
+    public ElasticSearchDeployKeyRepositoryTest(ElasticSearchRepository repository, RestClient restClient) {
+        super(repository);
+        this.repository = repository;
+        this.restClient = restClient;
+    }
+
+    @AfterEach
+    void tearDown() throws IOException {
+        restClient.performRequest(new Request(HttpMethod.DELETE, "/deploykeys"));
+    }
+
+    @Test
+    void testGetDeployKeyByValue() throws Exception {
+
+        DeployKey deployKey = new DeployKey(DeployKeyScope.NAMESPACE, "", "double", "", "dcore");
+        repository.saveDeployKey(deployKey);
+
+        String deployKeyValue = deployKey.getKey();
+        Random random = new Random();
+        int end = random.nextInt(deployKeyValue.length() - 1);
+        String deployKeyValueSub = deployKeyValue.substring(0, end);
+
+        assertDoesNotThrow(() -> repository.getDeployKeyByValue(deployKeyValue));
+        assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue(deployKeyValueSub));
+        assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue("H0p3Fu11yf@k3k3y"));
+    }
+}

