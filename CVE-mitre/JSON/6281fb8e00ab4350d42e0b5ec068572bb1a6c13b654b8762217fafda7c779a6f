--- managed/src/main/java/com/yugabyte/yw/common/RedactingService.java ---
@@ -34,6 +34,8 @@ public class RedactingService {
           .addAll(SECRET_PATHS_FOR_APIS)
           .add("$..password")
           .add("$..confirmPassword")
+          .add("$..newPassword")
+          .add("$..currentPassword")
           .add("$..['config.AWS_ACCESS_KEY_ID']")
           .add("$..['config.AWS_SECRET_ACCESS_KEY']")
           // GCP private key

--- managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java ---
@@ -20,12 +20,14 @@
 import com.yugabyte.yw.common.user.UserService;
 import com.yugabyte.yw.forms.PlatformResults;
 import com.yugabyte.yw.forms.PlatformResults.YBPSuccess;
+import com.yugabyte.yw.forms.UserPasswordChangeFormData;
 import com.yugabyte.yw.forms.UserProfileFormData;
 import com.yugabyte.yw.forms.UserRegisterFormData;
 import com.yugabyte.yw.models.Audit;
 import com.yugabyte.yw.models.Customer;
 import com.yugabyte.yw.models.Users;
 import com.yugabyte.yw.models.Users.UserType;
+import com.yugabyte.yw.models.common.YbaApi;
 import com.yugabyte.yw.models.extended.UserWithFeatures;
 import com.yugabyte.yw.models.rbac.ResourceGroup;
 import com.yugabyte.yw.models.rbac.Role;
@@ -46,6 +48,7 @@
 import java.util.*;
 import java.util.stream.Collectors;
 import javax.inject.Inject;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -57,6 +60,7 @@
 @Api(
     value = "User management",
     authorizations = @Authorization(AbstractPlatformController.API_KEY_AUTH))
+@Slf4j
 public class UsersController extends AuthenticatedController {
 
   public static final Logger LOG = LoggerFactory.getLogger(UsersController.class);
@@ -441,9 +445,8 @@ public Result changeRole(UUID customerUUID, UUID userUUID, String role, Http.Req
    * @return JSON response on whether role change was successful or not.
    */
   @ApiOperation(
-      value = "Change a user's password",
-      nickname = "updateUserPassword",
-      response = YBPSuccess.class)
+      notes = "<b style=\"color:#ff0000\">Deprecated since YBA version 2024.1.0.0.</b></p>",
+      value = "Change password - deprecated")
   @ApiImplicitParams({
     @ApiImplicitParam(
         name = "Users",
@@ -459,36 +462,64 @@ public Result changeRole(UUID customerUUID, UUID userUUID, String role, Http.Req
                   resourceType = ResourceType.USER,
                   action = Action.UPDATE_PROFILE),
           resourceLocation = @Resource(path = Util.USERS, sourceType = SourceType.ENDPOINT)))
+  @YbaApi(visibility = YbaApi.YbaApiVisibility.DEPRECATED, sinceYBAVersion = "2.20.4.0")
+  @Deprecated
   public Result changePassword(UUID customerUUID, UUID userUUID, Http.Request request) {
-    Users user = Users.getOrBadRequest(customerUUID, userUUID);
-    if (UserType.ldap == user.getUserType()) {
-      throw new PlatformServiceException(BAD_REQUEST, "Can't change password for LDAP user.");
-    }
+    throw new PlatformServiceException(
+        MOVED_PERMANENTLY, String.format("Moved to /customers/%s/reset_password", customerUUID));
+  }
+
+  /**
+   * PUT endpoint for changing the password of an existing user.
+   *
+   * @return JSON response on whether role change was successful or not.
+   */
+  @ApiOperation(
+      value = "Reset the user's password",
+      nickname = "resetUserPassword",
+      response = YBPSuccess.class)
+  @ApiImplicitParams({
+    @ApiImplicitParam(
+        name = "Users",
+        value = "User data containing the current, new password",
+        required = true,
+        dataType = "com.yugabyte.yw.forms.UserPasswordChangeFormData",
+        paramType = "body")
+  })
+  @AuthzPath(
+      @RequiredPermissionOnResource(
+          requiredPermission =
+              @PermissionAttribute(
+                  resourceType = ResourceType.USER,
+                  action = Action.UPDATE_PROFILE),
+          resourceLocation = @Resource(path = Util.USERS, sourceType = SourceType.REQUEST_CONTEXT)))
+  public Result resetPassword(UUID customerUUID, Http.Request request) {
+    Users user = getLoggedInUser(request);
+    Form<UserPasswordChangeFormData> form =
+        formFactory.getFormDataOrBadRequest(request, UserPasswordChangeFormData.class);
+    UserPasswordChangeFormData formData = form.get();
 
-    if (!checkUpdateProfileAccessForPasswordChange(userUUID, request)) {
+    if (user.getUserType() == UserType.ldap) {
       throw new PlatformServiceException(
-          BAD_REQUEST, "Only the User can change his/her own password.");
+          BAD_REQUEST, "Reset password not supported for LDAP users");
     }
 
-    Form<UserRegisterFormData> form =
-        formFactory.getFormDataOrBadRequest(request, UserRegisterFormData.class);
-
-    UserRegisterFormData formData = form.get();
-    passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getPassword());
-    if (formData.getEmail().equals(user.getEmail())) {
-      if (formData.getPassword().equals(formData.getConfirmPassword())) {
-        user.setPassword(formData.getPassword());
-        user.save();
-        auditService()
-            .createAuditEntry(
-                request,
-                Audit.TargetType.User,
-                userUUID.toString(),
-                Audit.ActionType.ChangeUserPassword);
-        return YBPSuccess.empty();
-      }
+    user = Users.authWithPassword(user.getEmail(), formData.getCurrentPassword());
+    if (user == null) {
+      throw new PlatformServiceException(UNAUTHORIZED, "Incorrect current password provided");
     }
-    throw new PlatformServiceException(BAD_REQUEST, "Invalid user credentials.");
+
+    passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getNewPassword());
+    user.setPassword(formData.getNewPassword());
+    user.save();
+    auditService()
+        .createAuditEntryWithReqBody(
+            request,
+            Audit.TargetType.User,
+            user.getUuid().toString(),
+            Audit.ActionType.ChangeUserPassword,
+            Json.toJson(formData));
+    return YBPSuccess.empty();
   }
 
   private Users getLoggedInUser(Http.Request request) {
@@ -542,21 +573,11 @@ public Result updateProfile(UUID customerUUID, UUID userUUID, Http.Request reque
 
     // Password validation for both old RBAC and new RBAC is same.
     if (StringUtils.isNotEmpty(formData.getPassword())) {
-      if (UserType.ldap == user.getUserType()) {
-        throw new PlatformServiceException(BAD_REQUEST, "Can't change password for LDAP user.");
-      }
-
-      if (!checkUpdateProfileAccessForPasswordChange(userUUID, request)) {
-        throw new PlatformServiceException(
-            BAD_REQUEST, "Only the User can change his/her own password.");
-      }
-
-      passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getPassword());
-      if (!formData.getPassword().equals(formData.getConfirmPassword())) {
-        throw new PlatformServiceException(
-            BAD_REQUEST, "Password and confirm password do not match.");
-      }
-      user.setPassword(formData.getPassword());
+      throw new PlatformServiceException(
+          FORBIDDEN,
+          String.format(
+              "API does not support password change. Use /customers/%s/reset_password",
+              customerUUID));
     }
 
     if (useNewAuthz) {
@@ -606,6 +627,11 @@ public Result updateProfile(UUID customerUUID, UUID userUUID, Http.Request reque
               BAD_REQUEST, "Can't Assign the role of SuperAdmin to another user.");
         }
 
+        if (loggedInUser.getUuid().equals(user.getUuid())) {
+          throw new PlatformServiceException(
+              FORBIDDEN, "User cannot modify their own role privileges");
+        }
+
         if (user.getUserType() == UserType.ldap && user.isLdapSpecifiedRole() == true) {
           throw new PlatformServiceException(BAD_REQUEST, "Cannot change role for LDAP user.");
         }

--- managed/src/main/java/com/yugabyte/yw/forms/UserPasswordChangeFormData.java ---
@@ -0,0 +1,20 @@
+package com.yugabyte.yw.forms;
+
+import io.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModelProperty;
+import lombok.Getter;
+import lombok.Setter;
+
+@ApiModel(
+    value = "UserPasswordChangeFormData",
+    description = "User registration data. The API and UI use this to validate form data.")
+@Getter
+@Setter
+public class UserPasswordChangeFormData {
+
+  @ApiModelProperty(value = "Current Password", example = "Test@1234")
+  private String currentPassword;
+
+  @ApiModelProperty(value = "New Password", example = "Test@1234")
+  private String newPassword;
+}

--- managed/src/main/java/com/yugabyte/yw/rbac/enums/SourceType.java ---
@@ -4,7 +4,8 @@
 public enum SourceType {
   ENDPOINT("endpoint"),
   REQUEST_BODY("requestBody"),
-  DB("db");
+  DB("db"),
+  REQUEST_CONTEXT("requestContext");
 
   private final String type;
 

--- managed/src/main/java/com/yugabyte/yw/rbac/handlers/AuthorizationHandler.java ---
@@ -5,6 +5,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.inject.Inject;
 import com.typesafe.config.Config;
+import com.yugabyte.yw.common.Util;
 import com.yugabyte.yw.common.config.GlobalConfKeys;
 import com.yugabyte.yw.common.config.RuntimeConfigCache;
 import com.yugabyte.yw.controllers.JWTVerifier;
@@ -44,7 +45,6 @@ public class AuthorizationHandler extends Action<AuthzPath> {
   public static final String API_TOKEN_HEADER = "X-AUTH-YW-API-TOKEN";
   public static final String API_JWT_HEADER = "X-AUTH-YW-API-JWT";
   public static final String COOKIE_PLAY_SESSION = "PLAY_SESSION";
-  private static final String CUSTOMERS = "customers";
 
   private final Config config;
   private final RuntimeConfigCache runtimeConfigCache;
@@ -81,12 +81,13 @@ public CompletionStage<Result> call(Http.Request request) {
       return CompletableFuture.completedFuture(Results.unauthorized("Unable To authenticate User"));
     }
     UserWithFeatures userWithFeatures = new UserWithFeatures().setUser(user);
-    RequestContext.put(TokenAuthenticator.CUSTOMER, Customer.get(user.getCustomerUUID()));
+    Customer customer = Customer.get(user.getCustomerUUID());
+    RequestContext.put(TokenAuthenticator.CUSTOMER, customer);
     RequestContext.put(TokenAuthenticator.USER, userWithFeatures);
 
     String endpoint = request.uri();
     UUID customerUUID = null;
-    Pattern custPattern = Pattern.compile(String.format(".*/%s/" + UUID_PATTERN, CUSTOMERS));
+    Pattern custPattern = Pattern.compile(String.format(".*/%s/" + UUID_PATTERN, Util.CUSTOMERS));
     Matcher custMatcher = custPattern.matcher(endpoint);
     if (custMatcher.find()) {
       customerUUID = UUID.fromString(custMatcher.group(1));
@@ -149,7 +150,7 @@ public CompletionStage<Result> call(Http.Request request) {
             Matcher matcher = pattern.matcher(endpoint);
             if (matcher.find()) {
               resourceUUID = UUID.fromString(matcher.group(3));
-            } else if (resource.path().equals(CUSTOMERS)) {
+            } else if (resource.path().equals(Util.CUSTOMERS)) {
               resourceUUID = user.getCustomerUUID();
             }
             isPermissionPresentOnResource =
@@ -233,6 +234,46 @@ public CompletionStage<Result> call(Http.Request request) {
             }
             break;
           }
+        case REQUEST_CONTEXT:
+          {
+            switch (resource.path()) {
+              case Util.USERS:
+                {
+                  isPermissionPresentOnResource =
+                      checkResourcePermission(applicableRoleBindings, attribute, user.getUuid());
+                  if (!isPermissionPresentOnResource) {
+                    log.debug(
+                        "User {} does not have role bindings for the permission {}",
+                        user.getUuid(),
+                        attribute);
+                    return CompletableFuture.completedFuture(
+                        Results.unauthorized("Unable to authorize user"));
+                  }
+                  break;
+                }
+              case Util.CUSTOMERS:
+                {
+                  isPermissionPresentOnResource =
+                      checkResourcePermission(
+                          applicableRoleBindings, attribute, customer.getUuid());
+                  if (!isPermissionPresentOnResource) {
+                    log.debug(
+                        "User {} does not have role bindings for the permission {}",
+                        user.getUuid(),
+                        attribute);
+                    return CompletableFuture.completedFuture(
+                        Results.unauthorized("Unable to authorize user"));
+                  }
+                  break;
+                }
+              default:
+                {
+                  return CompletableFuture.completedFuture(
+                      Results.unauthorized("Unable to authorize user"));
+                }
+            }
+            break;
+          }
         default:
           {
             log.debug("Authorization logic {} not supported", resource.sourceType());

--- managed/src/main/resources/swagger-strict.json ---
@@ -14087,6 +14087,22 @@
       },
       "type" : "object"
     },
+    "UserPasswordChangeFormData" : {
+      "description" : "User registration data. The API and UI use this to validate form data.",
+      "properties" : {
+        "currentPassword" : {
+          "description" : "Current Password",
+          "example" : "Test@1234",
+          "type" : "string"
+        },
+        "newPassword" : {
+          "description" : "New Password",
+          "example" : "Test@1234",
+          "type" : "string"
+        }
+      },
+      "type" : "object"
+    },
     "UserProfileData" : {
       "description" : "User profile data. The API and UI use this to validate form data.",
       "properties" : {
@@ -21668,6 +21684,52 @@
         "tags" : [ "Release management" ]
       }
     },
+    "/api/v1/customers/{cUUID}/reset_password" : {
+      "put" : {
+        "description" : "",
+        "operationId" : "resetUserPassword",
+        "parameters" : [ {
+          "format" : "uuid",
+          "in" : "path",
+          "name" : "cUUID",
+          "required" : true,
+          "type" : "string"
+        }, {
+          "in" : "query",
+          "name" : "request",
+          "required" : false
+        }, {
+          "description" : "User data containing the current, new password",
+          "in" : "body",
+          "name" : "Users",
+          "required" : true,
+          "schema" : {
+            "$ref" : "#/definitions/UserPasswordChangeFormData"
+          }
+        } ],
+        "responses" : {
+          "200" : {
+            "description" : "successful operation",
+            "schema" : {
+              "$ref" : "#/definitions/YBPSuccess"
+            }
+          }
+        },
+        "responsesObject" : {
+          "200" : {
+            "description" : "successful operation",
+            "schema" : {
+              "$ref" : "#/definitions/YBPSuccess"
+            }
+          }
+        },
+        "security" : [ {
+          "apiKeyAuth" : [ ]
+        } ],
+        "summary" : "Reset the user's password",
+        "tags" : [ "User management" ]
+      }
+    },
     "/api/v1/customers/{cUUID}/restore" : {
       "post" : {
         "description" : "",
@@ -26085,58 +26147,6 @@
         "tags" : [ "Audit" ]
       }
     },
-    "/api/v1/customers/{cUUID}/users/{uUUID}/change_password" : {
-      "put" : {
-        "description" : "",
-        "operationId" : "updateUserPassword",
-        "parameters" : [ {
-          "format" : "uuid",
-          "in" : "path",
-          "name" : "cUUID",
-          "required" : true,
-          "type" : "string"
-        }, {
-          "format" : "uuid",
-          "in" : "path",
-          "name" : "uUUID",
-          "required" : true,
-          "type" : "string"
-        }, {
-          "in" : "query",
-          "name" : "request",
-          "required" : false
-        }, {
-          "description" : "User data containing the new password",
-          "in" : "body",
-          "name" : "Users",
-          "required" : true,
-          "schema" : {
-            "$ref" : "#/definitions/UserRegistrationData"
-          }
-        } ],
-        "responses" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPSuccess"
-            }
-          }
-        },
-        "responsesObject" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPSuccess"
-            }
-          }
-        },
-        "security" : [ {
-          "apiKeyAuth" : [ ]
-        } ],
-        "summary" : "Change a user's password",
-        "tags" : [ "User management" ]
-      }
-    },
     "/api/v1/customers/{cUUID}/users/{uUUID}/oidc_auth_token" : {
       "get" : {
         "description" : "",

--- managed/src/main/resources/swagger.json ---
@@ -14205,6 +14205,22 @@
       },
       "type" : "object"
     },
+    "UserPasswordChangeFormData" : {
+      "description" : "User registration data. The API and UI use this to validate form data.",
+      "properties" : {
+        "currentPassword" : {
+          "description" : "Current Password",
+          "example" : "Test@1234",
+          "type" : "string"
+        },
+        "newPassword" : {
+          "description" : "New Password",
+          "example" : "Test@1234",
+          "type" : "string"
+        }
+      },
+      "type" : "object"
+    },
     "UserProfileData" : {
       "description" : "User profile data. The API and UI use this to validate form data.",
       "properties" : {
@@ -22463,6 +22479,52 @@
         "tags" : [ "Release management" ]
       }
     },
+    "/api/v1/customers/{cUUID}/reset_password" : {
+      "put" : {
+        "description" : "",
+        "operationId" : "resetUserPassword",
+        "parameters" : [ {
+          "format" : "uuid",
+          "in" : "path",
+          "name" : "cUUID",
+          "required" : true,
+          "type" : "string"
+        }, {
+          "in" : "query",
+          "name" : "request",
+          "required" : false
+        }, {
+          "description" : "User data containing the current, new password",
+          "in" : "body",
+          "name" : "Users",
+          "required" : true,
+          "schema" : {
+            "$ref" : "#/definitions/UserPasswordChangeFormData"
+          }
+        } ],
+        "responses" : {
+          "200" : {
+            "description" : "successful operation",
+            "schema" : {
+              "$ref" : "#/definitions/YBPSuccess"
+            }
+          }
+        },
+        "responsesObject" : {
+          "200" : {
+            "description" : "successful operation",
+            "schema" : {
+              "$ref" : "#/definitions/YBPSuccess"
+            }
+          }
+        },
+        "security" : [ {
+          "apiKeyAuth" : [ ]
+        } ],
+        "summary" : "Reset the user's password",
+        "tags" : [ "User management" ]
+      }
+    },
     "/api/v1/customers/{cUUID}/restore" : {
       "post" : {
         "description" : "",
@@ -27453,8 +27515,9 @@
     },
     "/api/v1/customers/{cUUID}/users/{uUUID}/change_password" : {
       "put" : {
-        "description" : "",
-        "operationId" : "updateUserPassword",
+        "deprecated" : true,
+        "description" : "<b style=\"color:#ff0000\">Deprecated since YBA version 2024.1.0.0.</b></p>",
+        "operationId" : "changePassword",
         "parameters" : [ {
           "format" : "uuid",
           "in" : "path",
@@ -27481,25 +27544,19 @@
           }
         } ],
         "responses" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPSuccess"
-            }
+          "default" : {
+            "description" : "successful operation"
           }
         },
         "responsesObject" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPSuccess"
-            }
+          "default" : {
+            "description" : "successful operation"
           }
         },
         "security" : [ {
           "apiKeyAuth" : [ ]
         } ],
-        "summary" : "Change a user's password",
+        "summary" : "Change password - deprecated",
         "tags" : [ "User management" ]
       }
     },

--- managed/src/main/resources/v1.routes ---
@@ -480,6 +480,8 @@ PUT    /customers/:cUUID/users/:uUUID                                          c
 PUT    /customers/:cUUID/users/:uUUID/change_password                          com.yugabyte.yw.controllers.UsersController.changePassword(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)
 PUT    /customers/:cUUID/users/:uUUID/update_profile                           com.yugabyte.yw.controllers.UsersController.updateProfile(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)
 DELETE /customers/:cUUID/users/:uUUID                                          com.yugabyte.yw.controllers.UsersController.delete(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)
+PUT    /customers/:cUUID/reset_password                                        com.yugabyte.yw.controllers.UsersController.resetPassword(cUUID: java.util.UUID, request: Request)
+
 + forceAudit
 GET    /customers/:cUUID/users/:uUUID/oidc_auth_token                          com.yugabyte.yw.controllers.UsersController.retrieveOidcAuthToken(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)
 

--- managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java ---
@@ -3,10 +3,13 @@
 package com.yugabyte.yw.controllers;
 
 import static com.yugabyte.yw.common.AssertHelper.assertAuditEntry;
+import static com.yugabyte.yw.common.AssertHelper.assertErrorResponse;
+import static com.yugabyte.yw.common.AssertHelper.assertOk;
 import static com.yugabyte.yw.common.AssertHelper.assertPlatformException;
 import static com.yugabyte.yw.models.Users.Role;
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
 import static play.mvc.Http.Status.*;
 import static play.test.Helpers.contentAsString;
 import static play.test.Helpers.fakeRequest;
@@ -20,11 +23,23 @@
 import com.yugabyte.yw.common.ModelFactory;
 import com.yugabyte.yw.common.encryption.HashBuilder;
 import com.yugabyte.yw.common.encryption.bc.BcOpenBsdHasher;
+import com.yugabyte.yw.common.rbac.Permission;
+import com.yugabyte.yw.common.rbac.PermissionInfo.Action;
+import com.yugabyte.yw.common.rbac.PermissionInfo.ResourceType;
 import com.yugabyte.yw.models.Customer;
+import com.yugabyte.yw.models.RuntimeConfigEntry;
 import com.yugabyte.yw.models.Users;
 import com.yugabyte.yw.models.extended.UserWithFeatures;
+import com.yugabyte.yw.models.rbac.ResourceGroup;
+import com.yugabyte.yw.models.rbac.ResourceGroup.ResourceDefinition;
+import com.yugabyte.yw.models.rbac.Role.RoleType;
+import com.yugabyte.yw.models.rbac.RoleBinding;
+import com.yugabyte.yw.models.rbac.RoleBinding.RoleBindingType;
 import java.io.IOException;
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
+import java.util.UUID;
 import org.junit.Before;
 import org.junit.Test;
 import play.libs.Json;
@@ -37,13 +52,30 @@ public class UsersControllerTest extends FakeDBApplication {
   private Customer customer1, customer2;
   private Users user1;
   private String authToken1;
+  private com.yugabyte.yw.models.rbac.Role role;
+  private ResourceDefinition rd1;
   private HashBuilder hashBuilder = new BcOpenBsdHasher();
 
+  Permission permission1 = new Permission(ResourceType.USER, Action.UPDATE_PROFILE);
+
   @Before
   public void setUp() {
     customer1 = ModelFactory.testCustomer("tc1", "Test Customer 1");
     customer2 = ModelFactory.testCustomer("tc2", "Test Customer 2");
     user1 = ModelFactory.testUser(customer1, "tc1@test.com");
+    role =
+        com.yugabyte.yw.models.rbac.Role.create(
+            customer1.getUuid(),
+            "FakeRole1",
+            "testDescription",
+            RoleType.Custom,
+            new HashSet<>(Arrays.asList(permission1)));
+    rd1 =
+        ResourceDefinition.builder()
+            .resourceType(ResourceType.USER)
+            .resourceUUIDSet(new HashSet<>(Arrays.asList(user1.getUuid())))
+            .build();
+
     authToken1 = user1.createAuthToken();
   }
 
@@ -247,44 +279,115 @@ public void testPasswordChangeValid() throws IOException {
     params.put("confirmPassword", "new-Password1");
     params.put("role", "Admin");
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
+    Result result =
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format(
+                                "%s/%s/change_password",
+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(result.status(), MOVED_PERMANENTLY);
+    assertErrorResponse(
+        result, String.format("Moved to /customers/%s/reset_password", customer1.getUuid()));
+  }
+
+  @Test
+  public void testResetPassword() {
+    Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);
+    String authTokenTest = testUser1.createAuthToken();
+    assertEquals(testUser1.getRole(), Role.Admin);
+    ObjectNode params = Json.newObject();
+    params.put("currentPassword", "password");
+    params.put("newPassword", "Password#123");
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
     Result result =
         route(
             fakeRequest(
-                    "PUT",
-                    String.format(
-                        "%s/%s/change_password",
-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                    "PUT", String.format("/api/customers/%s/reset_password", customer1.getUuid()))
                 .cookie(validCookie)
                 .bodyJson(params));
     testUser1 = Users.get(testUser1.getUuid());
+    assertOk(result);
+    assertAuditEntry(1, customer1.getUuid());
+    Users returnUser = Users.authWithPassword(testUser1.getEmail(), "Password#123");
+    assertNotNull(returnUser);
+  }
+
+  @Test
+  public void testResetPasswordForNonLocalUser() {
+    Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);
+    testUser1.setUserType(Users.UserType.ldap);
+    testUser1.save();
+    String authTokenTest = testUser1.createAuthToken();
     assertEquals(testUser1.getRole(), Role.Admin);
-    assertTrue(hashBuilder.isValid("new-Password1", testUser1.getPasswordHash()));
+    ObjectNode params = Json.newObject();
+    params.put("currentPassword", "password");
+    params.put("newPassword", "Password#123");
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
+    Result result =
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format("/api/customers/%s/reset_password", customer1.getUuid()))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(result.status(), BAD_REQUEST);
+    assertErrorResponse(result, "Reset password not supported for LDAP users");
+  }
+
+  @Test
+  public void testResetPasswordWithNewRbac() {
+    RuntimeConfigEntry.upsertGlobal("yb.rbac.use_new_authz", "true");
+    ResourceGroup rG = new ResourceGroup(new HashSet<>(Arrays.asList(rd1)));
+    RoleBinding.create(user1, RoleBindingType.Custom, role, rG);
+    String authTokenTest = user1.createAuthToken();
+    assertEquals(user1.getRole(), Role.Admin);
+    ObjectNode params = Json.newObject();
+    params.put("currentPassword", "password");
+    params.put("newPassword", "Password#123");
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
+    Result result =
+        route(
+            fakeRequest(
+                    "PUT", String.format("/api/customers/%s/reset_password", customer1.getUuid()))
+                .cookie(validCookie)
+                .bodyJson(params));
+    user1 = Users.get(user1.getUuid());
+    assertOk(result);
     assertAuditEntry(1, customer1.getUuid());
+    Users returnUser = Users.authWithPassword(user1.getEmail(), "Password#123");
+    assertNotNull(returnUser);
   }
 
   @Test
-  public void testPasswordChangeInvalidPassword() throws IOException {
+  public void testResetPasswordInvalidPassword() throws IOException {
     Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);
     String authTokenTest = testUser1.createAuthToken();
     assertEquals(testUser1.getRole(), Role.Admin);
     ObjectNode params = Json.newObject();
-    params.put("email", "tc3@test.com");
-    params.put("password", "new-password");
-    params.put("confirmPassword", "new-password");
-    params.put("role", "Admin");
+    params.put("currentPassword", "password");
+    params.put("newPassword", "new-password");
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
     Result result =
         assertPlatformException(
             () ->
                 route(
                     fakeRequest(
                             "PUT",
-                            String.format(
-                                "%s/%s/change_password",
-                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                            String.format("/api/customers/%s/reset_password", customer1.getUuid()))
                         .cookie(validCookie)
                         .bodyJson(params)));
     assertEquals(result.status(), BAD_REQUEST);
+    assertErrorResponse(
+        result,
+        "Password should contain at least 1 upper case letters; Password should contain at least 1"
+            + " digits");
   }
 
   @Test
@@ -315,10 +418,8 @@ public void testUpdateUserProfileValid() throws IOException {
     assertEquals(testUser1.getRole(), Role.Admin);
     ObjectNode params = Json.newObject();
     params.put("email", "tc3@test.com");
-    params.put("password", "new-Password1!");
-    params.put("confirmPassword", "new-Password1!");
-    params.put("role", "ReadOnly");
     params.put("timezone", testTimezone2);
+    params.put("role", "Admin");
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
     Result result =
         route(
@@ -331,8 +432,6 @@ public void testUpdateUserProfileValid() throws IOException {
                 .bodyJson(params));
     testUser1 = Users.get(testUser1.getUuid());
     assertEquals(testUser1.getTimezone(), testTimezone2);
-    assertTrue(hashBuilder.isValid("new-Password1!", testUser1.getPasswordHash()));
-    assertEquals(testUser1.getRole(), Role.ReadOnly);
     assertAuditEntry(1, customer1.getUuid());
   }
 
@@ -368,27 +467,25 @@ public void testUpdateUserProfileNullifyTimezone() throws IOException {
     testUser1.setTimezone(testTimezone1);
     String authTokenTest = testUser1.createAuthToken();
     assertEquals(testUser1.getRole(), Role.Admin);
+    UUID testUser1UUID = testUser1.getUuid();
     ObjectNode params = Json.newObject();
     params.put("email", "tc3@test.com");
-    params.put("password", "new-Password1!");
-    params.put("confirmPassword", "new-Password1!");
-    params.put("role", "ReadOnly");
     params.put("timezone", "");
+    params.put("role", "ReadOnly");
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
     Result result =
-        route(
-            fakeRequest(
-                    "PUT",
-                    String.format(
-                        "%s/%s/update_profile",
-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
-                .cookie(validCookie)
-                .bodyJson(params));
-    testUser1 = Users.get(testUser1.getUuid());
-    assertEquals(testUser1.getTimezone(), "");
-    assertTrue(hashBuilder.isValid("new-Password1!", testUser1.getPasswordHash()));
-    assertEquals(testUser1.getRole(), Role.ReadOnly);
-    assertAuditEntry(1, customer1.getUuid());
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format(
+                                "/api/customers/%s/users/%s/update_profile",
+                                customer1.getUuid(), testUser1UUID))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(result.status(), FORBIDDEN);
+    assertErrorResponse(result, "User cannot modify their own role privileges");
   }
 
   @Test
@@ -420,7 +517,7 @@ public void testUpdateUserProfileInvalid() throws IOException {
     Users resultTestUser1 = Users.get(testUser1.getUuid());
     assertEquals(resultTestUser1.getTimezone(), testTimezone1);
     assertEquals(resultTestUser1.getRole(), Role.Admin);
-    assertEquals(result.status(), BAD_REQUEST);
+    assertEquals(result.status(), FORBIDDEN);
   }
 
   @Test
@@ -437,16 +534,22 @@ public void testUpdateUserProfileValidOnlyPassword() throws IOException {
     params.put("timezone", testTimezone1);
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
     Result result =
-        route(
-            fakeRequest(
-                    "PUT",
-                    String.format(
-                        "%s/%s/update_profile",
-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
-                .cookie(validCookie)
-                .bodyJson(params));
-    testUser1 = Users.get(testUser1.getUuid());
-    assertTrue(hashBuilder.isValid("new-Password1!", testUser1.getPasswordHash()));
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format(
+                                "%s/%s/update_profile",
+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(result.status(), FORBIDDEN);
+    assertErrorResponse(
+        result,
+        String.format(
+            "API does not support password change. Use /customers/%s/reset_password",
+            customer1.getUuid()));
   }
 
   @Test
@@ -474,7 +577,12 @@ public void testUpdateUserProfileInvalidPassword() throws IOException {
                                 String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
                         .cookie(validCookie)
                         .bodyJson(params)));
-    assertEquals(result.status(), BAD_REQUEST);
+    assertEquals(result.status(), FORBIDDEN);
+    assertErrorResponse(
+        result,
+        String.format(
+            "API does not support password change. Use /customers/%s/reset_password",
+            customer1.getUuid()));
   }
 
   @Test
@@ -518,17 +626,22 @@ public void testUpdateUserProfileReadOnlyUserPasswordChange() throws IOException
     params.put("timezone", testTimezone1);
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authTokenTest).build();
     Result result =
-        route(
-            fakeRequest(
-                    "PUT",
-                    String.format(
-                        "%s/%s/update_profile",
-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
-                .cookie(validCookie)
-                .bodyJson(params));
-    testUser1 = Users.get(testUser1.getUuid());
-    assertTrue(hashBuilder.isValid("new-Password1!", testUser1.getPasswordHash()));
-    assertAuditEntry(1, customer1.getUuid());
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format(
+                                "%s/%s/update_profile",
+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(result.status(), FORBIDDEN);
+    assertErrorResponse(
+        result,
+        String.format(
+            "API does not support password change. Use /customers/%s/reset_password",
+            customer1.getUuid()));
   }
 
   public void testUpdateUserProfileReadOnlyUserTZChange() throws IOException {

