diff --git a/core/src/main/java/io/undertow/server/handlers/HttpContinueReadHandler.java b/core/src/main/java/io/undertow/server/handlers/HttpContinueReadHandler.java
index 2c482d7979..1d91cd233e 100644
--- a/core/src/main/java/io/undertow/server/handlers/HttpContinueReadHandler.java
+++ b/core/src/main/java/io/undertow/server/handlers/HttpContinueReadHandler.java
@@ -25,11 +25,14 @@
 
 import io.undertow.server.ConduitWrapper;
 import io.undertow.server.Connectors;
+import io.undertow.server.ResponseCommitListener;
 import io.undertow.server.protocol.http.HttpContinue;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.ConduitFactory;
 import io.undertow.util.StatusCodes;
+
+import org.xnio.IoUtils;
 import org.xnio.channels.StreamSinkChannel;
 import org.xnio.conduits.AbstractStreamSourceConduit;
 import org.xnio.conduits.StreamSourceConduit;
@@ -62,6 +65,17 @@ public HttpContinueReadHandler(final HttpHandler handler) {
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if (HttpContinue.requiresContinueResponse(exchange)) {
             exchange.addRequestWrapper(WRAPPER);
+            exchange.addResponseCommitListener(new ResponseCommitListener() {
+                @Override
+                public void beforeCommit(HttpServerExchange exchange) {
+                    //we are writing the response, and have not read the request then we mark this as non-persistent
+                    if (!HttpContinue.isContinueResponseSent(exchange)) {
+                        exchange.setPersistent(false);
+                        //we also kill the request channel, because it is unusable now
+                        IoUtils.safeClose(exchange.getRequestChannel());
+                    }
+                }
+            });
         }
         handler.handleRequest(exchange);
     }
diff --git a/core/src/main/java/io/undertow/server/protocol/http/HttpContinue.java b/core/src/main/java/io/undertow/server/protocol/http/HttpContinue.java
index 06da87e081..67a704a1f5 100644
--- a/core/src/main/java/io/undertow/server/protocol/http/HttpContinue.java
+++ b/core/src/main/java/io/undertow/server/protocol/http/HttpContinue.java
@@ -91,6 +91,9 @@ public static boolean requiresContinueResponse(HeaderMap requestHeaders) {
         return false;
     }
 
+    public static boolean isContinueResponseSent(HttpServerExchange exchange) {
+        return exchange.getAttachment(ALREADY_SENT) != null;
+    }
 
     /**
      * Sends a continuation using async IO, and calls back when it is complete.
diff --git a/core/src/main/java/io/undertow/server/protocol/http/HttpResponseConduit.java b/core/src/main/java/io/undertow/server/protocol/http/HttpResponseConduit.java
index 41a5959529..0be90bbd3a 100644
--- a/core/src/main/java/io/undertow/server/protocol/http/HttpResponseConduit.java
+++ b/core/src/main/java/io/undertow/server/protocol/http/HttpResponseConduit.java
@@ -18,18 +18,16 @@
 
 package io.undertow.server.protocol.http;
 
-import io.undertow.UndertowMessages;
-import io.undertow.server.Connectors;
-import io.undertow.server.HttpServerExchange;
-import io.undertow.util.HeaderMap;
-import io.undertow.util.HeaderValues;
-import io.undertow.util.HttpString;
-import io.undertow.util.Protocols;
-import io.undertow.util.StatusCodes;
+import static org.xnio.Bits.allAreClear;
+import static org.xnio.Bits.allAreSet;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.FileChannel;
+
 import org.xnio.Buffers;
 import org.xnio.IoUtils;
-import io.undertow.connector.ByteBufferPool;
-import io.undertow.connector.PooledByteBuffer;
 import org.xnio.XnioWorker;
 import org.xnio.channels.StreamSourceChannel;
 import org.xnio.conduits.AbstractStreamSinkConduit;
@@ -37,13 +35,16 @@
 import org.xnio.conduits.Conduits;
 import org.xnio.conduits.StreamSinkConduit;
 
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.nio.channels.ClosedChannelException;
-import java.nio.channels.FileChannel;
-
-import static org.xnio.Bits.allAreClear;
-import static org.xnio.Bits.allAreSet;
+import io.undertow.UndertowMessages;
+import io.undertow.connector.ByteBufferPool;
+import io.undertow.connector.PooledByteBuffer;
+import io.undertow.server.Connectors;
+import io.undertow.server.HttpServerExchange;
+import io.undertow.util.HeaderMap;
+import io.undertow.util.HeaderValues;
+import io.undertow.util.HttpString;
+import io.undertow.util.Protocols;
+import io.undertow.util.StatusCodes;
 
 /**
  * @author <a href="mailto:david.lloyd@redhat.com">David M. Lloyd</a>
@@ -290,6 +291,13 @@ private void bufferDone() {
         }
     }
 
+    public void freeContinueResponse() {
+        if (pooledBuffer != null) {
+            pooledBuffer.close();
+            pooledBuffer = null;
+        }
+    }
+
     private static void writeString(ByteBuffer buffer, String string) {
         int length = string.length();
         for (int charIndex = 0; charIndex < length; charIndex++) {
diff --git a/core/src/main/java/io/undertow/server/protocol/http/HttpServerConnection.java b/core/src/main/java/io/undertow/server/protocol/http/HttpServerConnection.java
index 1b78c0681f..179b0b9774 100644
--- a/core/src/main/java/io/undertow/server/protocol/http/HttpServerConnection.java
+++ b/core/src/main/java/io/undertow/server/protocol/http/HttpServerConnection.java
@@ -111,7 +111,15 @@ public HttpServerExchange sendOutOfBandResponse(HttpServerExchange exchange) {
             @Override
             public StreamSinkConduit wrap(ConduitFactory<StreamSinkConduit> factory, HttpServerExchange exchange) {
 
-                ServerFixedLengthStreamSinkConduit fixed = new ServerFixedLengthStreamSinkConduit(new HttpResponseConduit(getSinkChannel().getConduit(), getByteBufferPool(), HttpServerConnection.this, exchange), false, false);
+                HttpResponseConduit httpResponseConduit = new HttpResponseConduit(getSinkChannel().getConduit(), getByteBufferPool(), HttpServerConnection.this, exchange);
+                exchange.addExchangeCompleteListener(new ExchangeCompletionListener() {
+                    @Override
+                    public void exchangeEvent(HttpServerExchange exchange, NextListener nextListener) {
+                        httpResponseConduit.freeContinueResponse();
+                        nextListener.proceed();
+                    }
+                });
+                ServerFixedLengthStreamSinkConduit fixed = new ServerFixedLengthStreamSinkConduit(httpResponseConduit, false, false);
                 fixed.reset(0, exchange);
                 return fixed;
             }
diff --git a/core/src/test/java/io/undertow/server/handlers/HttpContinueConduitWrappingHandlerBufferLeakTestCase.java b/core/src/test/java/io/undertow/server/handlers/HttpContinueConduitWrappingHandlerBufferLeakTestCase.java
index 840848ff94..9d924b7ba9 100644
--- a/core/src/test/java/io/undertow/server/handlers/HttpContinueConduitWrappingHandlerBufferLeakTestCase.java
+++ b/core/src/test/java/io/undertow/server/handlers/HttpContinueConduitWrappingHandlerBufferLeakTestCase.java
@@ -50,9 +50,11 @@ public static void setup() {
             @Override
             public void handleRequest(final HttpServerExchange exchange) {
                 try {
-                    exchange.getRequestChannel();
-                    exchange.setStatusCode(StatusCodes.EXPECTATION_FAILED);
-                    exchange.getOutputStream().close();
+                    if (exchange.getQueryParameters().containsKey("reject")) {
+                        exchange.getRequestChannel();
+                        exchange.setStatusCode(StatusCodes.EXPECTATION_FAILED);
+                        exchange.getOutputStream().close();
+                    }
                 } catch (IOException e) {
                     throw new RuntimeException(e);
                 }
@@ -69,6 +71,21 @@ public void before() {
     public void testHttpContinueRejectedBodySentAnywayNoBufferLeak() throws IOException {
         persistentSocket = new Socket(DefaultServer.getHostAddress(), DefaultServer.getHostPort());
 
+        String message = "POST /path?reject=true HTTP/1.1\r\n" +
+                "Expect: 100-continue\r\n" +
+                "Content-Length: 16\r\n" +
+                "Content-Type: text/plain; charset=ISO-8859-1\r\n" +
+                "Host: localhost:7777\r\n" +
+                "Connection: Keep-Alive\r\n\r\nMy HTTP Request!";
+        persistentSocket.getOutputStream().write(message.getBytes(StandardCharsets.UTF_8));
+        persistentSocket.getOutputStream().flush();
+        persistentSocket.getInputStream().read();
+    }
+
+    @Test
+    public void testHttpContinueBodySentAnywayNoLeak() throws IOException {
+        persistentSocket = new Socket(DefaultServer.getHostAddress(), DefaultServer.getHostPort());
+
         String message = "POST /path HTTP/1.1\r\n" +
                 "Expect: 100-continue\r\n" +
                 "Content-Length: 16\r\n" +
diff --git a/servlet/src/test/java/io/undertow/servlet/test/handlers/HttpContinueServletTestCase.java b/servlet/src/test/java/io/undertow/servlet/test/handlers/HttpContinueServletTestCase.java
new file mode 100644
index 0000000000..fd0075fc37
--- /dev/null
+++ b/servlet/src/test/java/io/undertow/servlet/test/handlers/HttpContinueServletTestCase.java
@@ -0,0 +1,191 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2014 Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.undertow.servlet.test.handlers;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpParams;
+import org.junit.Assert;
+import org.junit.Assume;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import io.undertow.servlet.Servlets;
+import io.undertow.servlet.test.util.DeploymentUtils;
+import io.undertow.testutils.DefaultServer;
+import io.undertow.testutils.HttpClientUtils;
+import io.undertow.testutils.TestHttpClient;
+import io.undertow.util.StatusCodes;
+
+/**
+ * @author Stuart Douglas
+ */
+@RunWith(DefaultServer.class)
+public class HttpContinueServletTestCase {
+
+    private static volatile boolean accept = false;
+
+    @BeforeClass
+    public static void setup() {
+        DeploymentUtils.setupServlet(Servlets.servlet(ContinueConsumeServlet.class).addMappings("/path"),
+                Servlets.servlet(ContinueIgnoreServlet.class).addMappings("/ignore"));
+    }
+
+    @Before
+    public void before() {
+        Assume.assumeFalse(DefaultServer.isAjp());
+    }
+
+    @Test
+    public void testHttpContinueRejected() throws IOException {
+        accept = false;
+        String message = "My HTTP Request!";
+        HttpParams httpParams = new BasicHttpParams();
+        httpParams.setParameter("http.protocol.wait-for-continue", Integer.MAX_VALUE);
+
+        TestHttpClient client = new TestHttpClient();
+        client.setParams(httpParams);
+        try {
+            HttpPost post = new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/path");
+            post.addHeader("Expect", "100-continue");
+            post.setEntity(new StringEntity(message));
+
+            HttpResponse result = client.execute(post);
+            Assert.assertEquals(StatusCodes.EXPECTATION_FAILED, result.getStatusLine().getStatusCode());
+        } finally {
+            client.getConnectionManager().shutdown();
+        }
+    }
+
+    @Test
+    public void testHttpContinueAccepted() throws IOException {
+        accept = true;
+        String message = "My HTTP Request!";
+        HttpParams httpParams = new BasicHttpParams();
+        httpParams.setParameter("http.protocol.wait-for-continue", Integer.MAX_VALUE);
+
+        TestHttpClient client = new TestHttpClient();
+        client.setParams(httpParams);
+        try {
+            HttpPost post = new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/path");
+            post.addHeader("Expect", "100-continue");
+            post.setEntity(new StringEntity(message));
+
+            HttpResponse result = client.execute(post);
+            Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
+            Assert.assertEquals(message, HttpClientUtils.readResponse(result));
+        } finally {
+            client.getConnectionManager().shutdown();
+        }
+    }
+
+    @Test
+    public void testHttpContinueIgnored() throws IOException {
+        accept = true;
+        String message = "My HTTP Request!";
+        HttpParams httpParams = new BasicHttpParams();
+        httpParams.setParameter("http.protocol.wait-for-continue", Integer.MAX_VALUE);
+
+        TestHttpClient client = new TestHttpClient();
+        client.setParams(httpParams);
+        try {
+            HttpPost post = new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/ignore");
+            post.addHeader("Expect", "100-continue");
+            post.setEntity(new StringEntity(message));
+
+            HttpResponse result = client.execute(post);
+            Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
+            Assert.assertEquals("", HttpClientUtils.readResponse(result));
+        } finally {
+            client.getConnectionManager().shutdown();
+        }
+    }
+    //UNDERTOW-162
+    @Test
+    public void testHttpContinueAcceptedWithChunkedRequest() throws IOException {
+        accept = true;
+        String message = "My HTTP Request!";
+        HttpParams httpParams = new BasicHttpParams();
+        httpParams.setParameter("http.protocol.wait-for-continue", Integer.MAX_VALUE);
+
+        TestHttpClient client = new TestHttpClient();
+        client.setParams(httpParams);
+        try {
+            HttpPost post = new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/path");
+            post.addHeader("Expect", "100-continue");
+            post.setEntity(new StringEntity(message) {
+                @Override
+                public long getContentLength() {
+                    return -1;
+                }
+            });
+
+            HttpResponse result = client.execute(post);
+            Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
+            Assert.assertEquals(message, HttpClientUtils.readResponse(result));
+        } finally {
+            client.getConnectionManager().shutdown();
+        }
+    }
+
+    public static class ContinueConsumeServlet extends HttpServlet {
+        @Override
+        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+            try {
+                if (!accept) {
+                    resp.setStatus(StatusCodes.EXPECTATION_FAILED);
+                    return;
+                }
+                byte[] buffer = new byte[1024];
+                final ByteArrayOutputStream b = new ByteArrayOutputStream();
+                int r = 0;
+                final OutputStream outputStream = resp.getOutputStream();
+                final InputStream inputStream = req.getInputStream();
+                while ((r = inputStream.read(buffer)) > 0) {
+                    b.write(buffer, 0, r);
+                }
+                outputStream.write(b.toByteArray());
+                outputStream.close();
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    public static class ContinueIgnoreServlet extends HttpServlet {
+
+        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+
+        }
+    }
+}
