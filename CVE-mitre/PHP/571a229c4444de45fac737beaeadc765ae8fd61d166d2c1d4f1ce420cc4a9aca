--- lib/Mail.php ---
@@ -22,6 +22,7 @@
 use Pimcore\Event\Model\MailEvent;
 use Pimcore\Helper\Mail as MailHelper;
 use Pimcore\Mail\Mailer;
+use Symfony\Component\DomCrawler\Crawler;
 use Symfony\Component\Mailer\Exception\TransportExceptionInterface;
 use Symfony\Component\Mailer\MailerInterface;
 use Symfony\Component\Mime\Address;
@@ -760,15 +761,16 @@ public function getBodyTextRendered()
             //creating text version from html email
             try {
                 $htmlContent = $this->getBodyHtmlRendered();
-                $html = str_get_html($htmlContent);
+                $html = new Crawler($htmlContent);
+
                 if ($html) {
-                    $body = $html->find('body', 0);
+                    $body = $html->filter('body')->eq(0);
                     if ($body) {
-                        $style = $body->find('style', 0);
+                        $style = $body->filter('style')->eq(0);
                         if ($style) {
                             $style->clear();
                         }
-                        $htmlContent = $body->innertext;
+                        $htmlContent = $body->html();
                     }
 
                     $html->clear();

--- lib/Templating/Renderer/IncludeRenderer.php ---
@@ -22,6 +22,7 @@
 use Pimcore\Targeting\Document\DocumentTargetingConfigurator;
 use Pimcore\Tool\DeviceDetector;
 use Pimcore\Tool\Frontend;
+use Symfony\Component\DomCrawler\Crawler;
 
 class IncludeRenderer
 {
@@ -171,16 +172,15 @@ protected function modifyEditmodeContent(PageSnippet $include, $content)
 
         // this is if the content that is included does already contain markup/html
         // this is needed by the editmode to highlight included documents
-        if ($html = str_get_html($content)) {
-            $childs = $html->find('*');
-            if (is_array($childs)) {
-                foreach ($childs as $child) {
-                    $child->class = $child->class . $editmodeClass;
-                    $child->pimcore_type = $include->getType();
-                    $child->pimcore_id = $include->getId();
-                }
+        if ($html = new Crawler($content)) {
+            $childs = $html->filter('body > div');
+            /** @var \DOMElement $child */
+            foreach ($childs as $child) {
+                $child->setAttribute('class' , $child->getAttribute('class') . $editmodeClass);
+                $child->setAttribute('pimcore_type', $include->getType());
+                $child->setAttribute('pimcore_id', $include->getId());
             }
-            $content = $html->save();
+            $content = $html->filter('body')->html();
 
             $html->clear();
             unset($html);

--- lib/Tool/Glossary/Processor.php ---
@@ -22,6 +22,7 @@
 use Pimcore\Model\Document;
 use Pimcore\Model\Glossary;
 use Pimcore\Model\Site;
+use Symfony\Component\DomCrawler\Crawler;
 
 class Processor
 {
@@ -90,12 +91,9 @@ public function process(string $content, array $options): string
         // because if you want to replace the terms "Donec vitae" and "Donec" you will get nested links, so the content of the html must be reloaded every searchterm to ensure that there is no replacement within a blocked tag
         // kind of a hack but,
         // changed to this because of that: http://www.pimcore.org/issues/browse/PIMCORE-687
-        $html = str_get_html($content);
-        if (!$html) {
-            return $content;
-        }
+        $html = new Crawler($content);
 
-        $es = $html->find('text');
+        $es = $html->filter('body');
 
         $tmpData = [
             'search' => [],
@@ -128,12 +126,13 @@ public function process(string $content, array $options): string
             $tmpData['replace'][] = $entry['replace'];
         }
 
+        $result = '';
         $data = $tmpData;
         $data['count'] = array_fill(0, count($data['search']), 0);
 
-        foreach ($es as $e) {
-            $text = $e->innertext;
-            if (!in_array((string)$e->parent()->tag, $this->blockedTags) && strlen(trim($text))) {
+        foreach ($es->children() as $e) {
+            $text = $e->ownerDocument->saveHTML($e);
+            if (!in_array((string)$e->parentNode->tagName, $this->blockedTags) && strlen(trim($text))) {
                 if ($options['limit'] < 0) {
                     $text = preg_replace($data['search'], $data['replace'], $text);
                 } else {
@@ -145,13 +144,10 @@ public function process(string $content, array $options): string
                         }
                     }
                 }
-
-                $e->innertext = $text;
             }
+            $result .= $text;
         }
 
-        $result = $html->save();
-
         $html->clear();
         unset($html);
 

--- lib/Tool/Newsletter.php ---
@@ -27,6 +27,7 @@
 use Pimcore\Model\DataObject;
 use Pimcore\Model\Document;
 use Pimcore\Tool;
+use Symfony\Component\DomCrawler\Crawler;
 use Symfony\Component\EventDispatcher\GenericEvent;
 
 class Newsletter
@@ -80,16 +81,16 @@ public static function prepareMail(
 
         // render the document and rewrite the links (if analytics is enabled)
         if ($contentHTML && $newsletterDocument->getEnableTrackingParameters()) {
-            $html = str_get_html($contentHTML);
+            $html = new Crawler($contentHTML);
             if ($html) {
-                $links = $html->find('a');
+                $links = $html->filter('a');
                 foreach ($links as $link) {
-                    if (preg_match('/^(mailto|#)/i', trim($link->href))) {
+                    if (preg_match('/^(mailto|#)/i', trim($link->getAttribute('href')))) {
                         // No tracking for mailto and hash only links
                         continue;
                     }
 
-                    $urlParts = parse_url($link->href);
+                    $urlParts = parse_url($link->getAttribute('href'));
                     $glue = '?';
                     $params = sprintf(
                         'utm_source=%s&utm_medium=%s&utm_campaign=%s',
@@ -102,14 +103,15 @@ public static function prepareMail(
                         $glue = '&';
                     }
 
-                    $link->href = preg_replace('/[#].+$/', '', $link->href).$glue.$params;
+                    $href = preg_replace('/[#].+$/', '', $link->getAttribute('href')).$glue.$params;
 
                     if (isset($urlParts['fragment'])) {
-                        $link->href .= '#'.$urlParts['fragment'];
+                        $href .= '#'.$urlParts['fragment'];
                     }
-                }
 
-                $contentHTML = $html->save();
+                    $link->setAttribute('href', $href);
+                }
+                $contentHTML = $html->html();
 
                 $html->clear();
                 unset($html);

--- lib/Tool/Text.php ---
@@ -14,6 +14,7 @@
 
 namespace Pimcore\Tool;
 
+use Symfony\Component\DomCrawler\Crawler;
 use Onnov\DetectEncoding\EncodingDetector;
 use Pimcore\Model\Asset;
 use Pimcore\Model\DataObject\Concrete;
@@ -186,12 +187,12 @@ public static function wysiwygText($text, $params = [])
     public static function replaceWysiwygTextRelationIds($idMapping, $text)
     {
         if (!empty($text)) {
-            $html = str_get_html($text);
+            $html = new Crawler($text);
             if (!$html) {
                 return $text;
             }
 
-            $s = $html->find('a[pimcore_id],img[pimcore_id]');
+            $s = $html->filter('a[pimcore_id], img[pimcore_id]');
 
             foreach ($s as $el) {
                 $type = null;
@@ -202,10 +203,10 @@ public static function replaceWysiwygTextRelationIds($idMapping, $text)
                 }
 
                 // link
-                if ($el->href) {
-                    if ($el->pimcore_type == 'asset') {
+                if ($el->getAttribute('href')) {
+                    if ($el->getAttribute('pimcore_type') == 'asset') {
                         $type = 'asset';
-                    } elseif ($el->pimcore_type == 'document') {
+                    } elseif ($el->getAttribute('pimcore_type') == 'document') {
                         $type = 'document';
                     }
                 }
@@ -222,16 +223,16 @@ public static function replaceWysiwygTextRelationIds($idMapping, $text)
 
                     //TODO
 
-                    $el->pimcore_id = $newId;
-                    $el->src = $pimcoreElement->getFullPath();
+                    $el->setAttribute('pimcore_id', $newId);
+                    $el->setAttribute('src', $pimcoreElement->getFullPath());
                 } else {
                     //remove relation, not found in mapping
-                    $el->pimcore_id = null;
-                    $el->src = null;
+                    $el->setAttribute('pimcore_id', null);
+                    $el->setAttribute('src', null);
                 }
             }
 
-            $return = $html->save();
+            $return = $html->html();
 
             $html->clear();
             unset($html);

--- lib/Translation/Escaper/Xliff12Escaper.php ---
@@ -14,6 +14,8 @@
 
 namespace Pimcore\Translation\Escaper;
 
+use Symfony\Component\DomCrawler\Crawler;
+
 class Xliff12Escaper
 {
     const SELFCLOSING_TAGS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];
@@ -92,15 +94,15 @@ public function unescapeXliff(string $content): string
         $content = $this->parseInnerXml($content);
 
         if (preg_match("/<\/?(bpt|ept)/", $content)) {
-            $xml = str_get_html($content);
+            $xml = new Crawler($content);
             if ($xml) {
-                $els = $xml->find('bpt,ept,ph');
+                $els = $xml->filter('bpt, ept, ph');
                 foreach ($els as $el) {
                     $content = html_entity_decode($el->innertext, null, 'UTF-8');
                     $el->outertext = $content;
                 }
             }
-            $content = $xml->save();
+            $content = $xml->html();
         }
 
         return $content;

--- models/DataObject/ClassDefinition/Data/Wysiwyg.php ---
@@ -21,6 +21,7 @@
 use Pimcore\Model\DataObject\ClassDefinition\Data;
 use Pimcore\Model\Element;
 use Pimcore\Tool\Text;
+use Symfony\Component\DomCrawler\Crawler;
 
 class Wysiwyg extends Data implements ResourcePersistenceAwareInterface, QueryResourcePersistenceAwareInterface, TypeDeclarationSupportInterface, EqualComparisonInterface, VarExporterInterface
 {
@@ -366,26 +367,24 @@ public function getDiffVersionPreview($data, $object = null, $params = [])
     public function rewriteIds($object, $idMapping, $params = [])
     {
         $data = $this->getDataFromObjectParam($object, $params);
-        $html = str_get_html($data);
+        $html = new Crawler($data);
         if ($html) {
-            $s = $html->find('a[pimcore_id],img[pimcore_id]');
-
-            if ($s) {
-                foreach ($s as $el) {
-                    if ($el->href || $el->src) {
-                        $type = $el->pimcore_type;
-                        $id = (int) $el->pimcore_id;
-
-                        if (array_key_exists($type, $idMapping)) {
-                            if (array_key_exists($id, $idMapping[$type])) {
-                                $el->outertext = str_replace('="' . $el->pimcore_id . '"', '="' . $idMapping[$type][$id] . '"', $el->outertext);
-                            }
+            $es = $html->filter('body > a[pimcore_id], img[pimcore_id]');
+
+            foreach ($es as $el) {
+                if ($el->hasAttribute('href') || $el->hasAttribute('src')) {
+                    $type = $el->getAttribute('pimcore_type');
+                    $id = (int) $el->getAttribute('pimcore_id');
+
+                    if (array_key_exists($type, $idMapping)) {
+                        if (array_key_exists($id, $idMapping[$type])) {
+                            $el->ownerDocument->textContent = str_replace('="' . $el->pimcore_id . '"', '="' . $idMapping[$type][$id] . '"', $el->parentNode->outerHtml());
                         }
                     }
                 }
             }
 
-            $data = $html->save();
+            $data = $html->filter('body')->html();
 
             $html->clear();
             unset($html);

--- models/Document/Editable/Wysiwyg.php ---
@@ -19,6 +19,7 @@
 
 use Pimcore\Model;
 use Pimcore\Tool\Text;
+use Symfony\Component\DomCrawler\Crawler;
 
 /**
  * @method \Pimcore\Model\Document\Editable\Dao getDao()
@@ -158,39 +159,34 @@ public function getCacheTags($ownerDocument, $blockedTags = [])
      *
      * @param array $idMapping
      *
-     * @return string|void
+     * @return void
      *
-     * @todo: no rewriteIds method ever returns anything, why this one?
      */
     public function rewriteIds($idMapping)
     {
-        $html = str_get_html($this->text);
-        if (!$html) {
-            return $this->text;
-        }
+        $html = new Crawler($this->text);
 
-        $s = $html->find('a[pimcore_id],img[pimcore_id]');
+        if ($html) {
+            $elements = $html->filter('a[pimcore_id], img[pimcore_id]');
 
-        if ($s) {
-            foreach ($s as $el) {
-                if ($el->href || $el->src) {
-                    $type = $el->pimcore_type;
-                    $id = (int) $el->pimcore_id;
+            /** @var \DOMElement $el */
+            foreach ($elements as $el) {
+                if ($el->hasAttribute('href') || $el->hasAttribute('src')) {
+                    $type = $el->getAttribute('pimcore_type');
+                    $id = (int)$el->getAttribute('pimcore_id');
 
                     if (array_key_exists($type, $idMapping)) {
                         if (array_key_exists($id, $idMapping[$type])) {
-                            $el->outertext = str_replace('="' . $el->pimcore_id . '"', '="' . $idMapping[$type][$id] . '"', $el->outertext);
+                            $el->setAttribute('pimcore_id', strtr($el->getAttribute('pimcore_id'), $idMapping[$type]));
                         }
                     }
                 }
             }
-        }
 
-        $this->text = $html->save();
+            $this->text = $html->filter('body')->html();
 
-        $html->clear();
-        unset($html);
-
-        return;
+            $html->clear();
+            unset($html);
+        }
     }
 }

