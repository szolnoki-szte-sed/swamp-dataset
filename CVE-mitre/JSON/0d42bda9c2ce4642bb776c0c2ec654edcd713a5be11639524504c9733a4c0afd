--- bower.json ---
@@ -1,6 +1,6 @@
 {
   "name": "url-js",
-  "version": "2.0.0",
+  "version": "2.1.0",
   "description": "Simple URL parser, similar to DOM URL",
   "main": "url.js",
   "authors": [

--- package-lock.json ---
@@ -1,6 +1,6 @@
 {
   "name": "url-js",
-  "version": "2.0.0",
+  "version": "2.1.0",
   "lockfileVersion": 2,
   "requires": true,
   "packages": {

--- package.json ---
@@ -1,6 +1,6 @@
 {
   "name": "url-js",
-  "version": "2.0.0",
+  "version": "2.1.0",
   "description": "Simple URL parser, similar to DOM URL",
   "main": "dist/url.js",
   "module": "url.js",

--- test.js ---
@@ -31,6 +31,18 @@ describe('URL', function() {
             expect(String(m)).toBe('https://www.example.com/path/xyz?var=123');
             expect(String(n)).toBe('https://www.example.com/path/zyx?u');
 
+            // Potential vulnerbility
+            var v = new URLJS('http://\\\\localhost\\');
+
+            expect(String(v)).toBe('http://localhost/');
+            expect(v.hostname).toBe('localhost');
+            expect(v.pathname).toBe('/');
+
+            v = new URLJS('http://\\\\localhost/\\');
+
+            expect(String(v)).toBe('http://localhost//');
+            expect(v.pathname).toBe('//');
+
             // // Rebuild .search from .query and .hostname from .host
             // delete m.search;
             // delete m.hostname;

--- url.d.ts ---
@@ -2,7 +2,7 @@
  *  URL parser module.
  *
  *  @license MIT
- *  @version 2.0.0
+ *  @version 2.1.0
  *  @author Dumitru Uzun (DUzun.Me)
  *  @umd AMD, Browser, CommonJs, noDeps
  */

--- url.js ---
@@ -2,7 +2,7 @@
  *  URL parser module.
  *
  *  @license MIT
- *  @version 2.0.0
+ *  @version 2.1.0
  *  @author Dumitru Uzun (DUzun.Me)
  *  @umd AMD, Browser, CommonJs, noDeps
  */

--- url/URL.d.ts ---
@@ -2,7 +2,7 @@
  *  URL parser.
  *
  *  @license MIT
- *  @version 2.0.0
+ *  @version 2.1.0
  *  @author Dumitru Uzun (DUzun.Me)
  *  @umd AMD, Browser, CommonJs, noDeps
  */

--- url/URL.js ---
@@ -8,7 +8,7 @@ import { NIL, defProp, is_domain, is_url, getDomainName } from './helpers';
  *  URL parser.
  *
  *  @license MIT
- *  @version 2.0.0
+ *  @version 2.1.0
  *  @author Dumitru Uzun (DUzun.Me)
  *  @umd AMD, Browser, CommonJs, noDeps
  */
@@ -34,7 +34,7 @@ export default function URLJS(url, baseURL, parseQuery) {
             }
             return parseUrl.call(URLJS, _url.origin + _path, undefined, parseQuery);
         }
-        throw new SyntaxError(`Failed to construct 'URL': Invalid URL`);
+        throw new SyntaxError(`Failed to construct 'URLJS': Invalid URL`);
     }
 }
 

--- url/parseUrl.js ---
@@ -3,11 +3,14 @@ import toObject from './toObject';
 
 /*globals URL*/
 
+// const _hostname_norm_exp = /^\\/g;
+const _pathname_norm_exp = /\\+/;
+
 const _parse_url_exp = new RegExp([
     '^([\\w.+\\-\\*]+:)//'          // protocol
     , '(([^:/?#]*)(?::([^/?#]*))?@|)' // username:password
-    , '(([^:/?#]*)(?::(\\d+))?)'      // host == hostname:port
-    , '(/[^?#]*|)'                    // pathname
+    , '\\\\*(([^:/\\\\?#]*)(?::(\\d+))?)' // host == hostname:port
+    , '([/\\\\][^?#]*|)'              // pathname
     , '(\\?([^#]*)|)'                 // search & query
     , '(#.*|)$'                       // hash
 ].join(NIL));
@@ -32,13 +35,25 @@ export default function parseUrl(href, part, parseQuery) {
         , i, ret = false
         ;
     if (match) {
+        // if (i = match[map.hostname]) {
+        //     match[map.hostname] = i.replace(_hostname_norm_exp, '');
+        // }
+        if (i = match[map.pathname]) {
+            match[map.pathname] = i.replace(_pathname_norm_exp, '/');
+        }
+
         if (part && part in map) {
             ret = match[map[part]] || NIL;
-            if (part == 'pathname') {
-                if (!ret) ret = '/';
-            }
-            if (parseQuery && part == 'query') {
-                ret = toObject(ret || NIL);
+            switch (part) {
+                case 'pathname':
+                    if (!ret) ret = '/';
+                break;
+
+                case 'query':
+                    if (parseQuery) {
+                        ret = toObject(ret || NIL);
+                    }
+                break;
             }
         }
         else {

