--- addons/html_editor/static/src/core/selection_plugin.js ---
@@ -16,7 +16,7 @@ import {
 } from "@html_editor/utils/dom_traversal";
 import { getActiveHotkey } from "@web/core/hotkeys/hotkey_service";
 import { Plugin } from "../plugin";
-import { DIRECTIONS, boundariesIn, endPos, leftPos, nodeSize, rightPos } from "../utils/position";
+import { DIRECTIONS, endPos, leftPos, nodeSize, rightPos } from "../utils/position";
 import {
     getAdjacentCharacter,
     normalizeCursorPosition,
@@ -193,7 +193,8 @@ export class SelectionPlugin extends Plugin {
         const selection = this.getEditableSelection();
         const containerSelector = "#wrap > *, .oe_structure > *, [contenteditable]";
         const container = selection && closestElement(selection.anchorNode, containerSelector);
-        const [anchorNode, anchorOffset, focusNode, focusOffset] = boundariesIn(container);
+        const [anchorNode, anchorOffset] = getDeepestPosition(container, 0);
+        const [focusNode, focusOffset] = getDeepestPosition(container, nodeSize(container));
         this.setSelection({ anchorNode, anchorOffset, focusNode, focusOffset });
     }
 

--- addons/html_editor/static/tests/banner.test.js ---
@@ -54,9 +54,9 @@ test("press 'ctrl+a' inside a banner should select all the banner content", asyn
         unformat(
             `<p><br></p><div class="o_editor_banner user-select-none o_not_editable lh-1 d-flex align-items-center alert alert-info pb-0 pt-3" role="status" contenteditable="false">
                     <i class="o_editor_banner_icon mb-3 fst-normal" aria-label="Banner Info">ðŸ’¡</i>
-                    <div class="w-100 px-3 o_editable" contenteditable="true">[
-                        <p>Test</p><p>Test1</p><p>Test2<br></p>
-                    ]</div>
+                    <div class="w-100 px-3 o_editable" contenteditable="true">
+                        <p>[Test</p><p>Test1</p><p>Test2]<br></p>
+                    </div>
                 </div><p><br></p>`
         )
     );
@@ -79,9 +79,9 @@ test("remove all content should preserve the first paragraph tag inside the bann
         unformat(
             `<p><br></p><div class="o_editor_banner user-select-none o_not_editable lh-1 d-flex align-items-center alert alert-info pb-0 pt-3" role="status" contenteditable="false">
                     <i class="o_editor_banner_icon mb-3 fst-normal" aria-label="Banner Info">ðŸ’¡</i>
-                    <div class="w-100 px-3 o_editable" contenteditable="true">[
-                        <p>Test</p><p>Test1</p><p>Test2<br></p>
-                    ]</div>
+                    <div class="w-100 px-3 o_editable" contenteditable="true">
+                        <p>[Test</p><p>Test1</p><p>Test2]<br></p>
+                    </div>
                 </div><p><br></p>`
         )
     );
@@ -132,7 +132,7 @@ test("Everything gets selected with ctrl+a, including a contenteditable=false as
                 <div class="w-100 px-3 o_editable" contenteditable="true">
                     <p><br></p>
                 </div>
-            </div><p placeholder='Type "/" for commands' class="o-we-hint"><br></p>]`
+            </div><p placeholder='Type "/" for commands' class="o-we-hint">]<br></p>`
     );
 });
 
@@ -149,12 +149,12 @@ test("Everything gets selected with ctrl+a, including a banner", async () => {
     await insertText(editor, "Test2");
     await press(["ctrl", "a"]);
     expect(getContent(el)).toBe(
-        `[<p><br></p><div class="o_editor_banner user-select-none o_not_editable lh-1 d-flex align-items-center alert alert-info pb-0 pt-3" role="status" contenteditable="false">
+        `<p>[<br></p><div class="o_editor_banner user-select-none o_not_editable lh-1 d-flex align-items-center alert alert-info pb-0 pt-3" role="status" contenteditable="false">
                 <i class="o_editor_banner_icon mb-3 fst-normal" aria-label="Banner Info">ðŸ’¡</i>
                 <div class="w-100 px-3 o_editable" contenteditable="true">
                     <p>test</p>
                 </div>
-            </div><p>Test1</p><p>Test2<br></p>]`,
+            </div><p>Test1</p><p>Test2]<br></p>`,
         { message: "should select everything" }
     );
     await press("Backspace");
@@ -169,7 +169,7 @@ test("Everything gets selected with ctrl+a, including a contenteditable=false as
     );
     await press(["ctrl", "a"]);
     expect(getContent(el)).toBe(
-        '[<div contenteditable="false">a</div><div contenteditable="false">b</div><p>cd</p>]'
+        '[<div contenteditable="false">a</div><div contenteditable="false">b</div><p>cd]</p>'
     );
 
     await press("Backspace");

--- addons/html_editor/static/tests/format/font_size.test.js ---
@@ -202,16 +202,14 @@ test("should add style to br except line-break br", async () => {
     const { editor, el } = await setupEditor("<p>[]abc<br><br></p>");
     await press(["ctrl", "a"]);
     execCommand(editor, "formatFontSize", { size: "36px" });
-    expect(getContent(el)).toBe(
-        `<p><span style="font-size: 36px;">[abc</span><br><span style="font-size: 36px;">]<br></span></p>`
-    );
+    expect(getContent(el)).toBe(`<p><span style="font-size: 36px;">[abc]</span><br><br></p>`);
 });
 
 test("should add style to br except line-break br (2)", async () => {
     const { editor, el } = await setupEditor("<p>[]abc<br><br><br></p>");
     await press(["ctrl", "a"]);
     execCommand(editor, "formatFontSize", { size: "36px" });
     expect(getContent(el)).toBe(
-        `<p><span style="font-size: 36px;">[abc</span><br><span style="font-size: 36px;"><br>]<br></span></p>`
+        `<p><span style="font-size: 36px;">[abc</span><br><span style="font-size: 36px;"><br>]</span><br></p>`
     );
 });

--- addons/html_editor/static/tests/tags.test.js ---
@@ -507,9 +507,9 @@ describe("to blockquote", () => {
     test("setTag should work after control+a", async () => {
         const { el, editor } = await setupEditor("<p>[]abcd</p>");
         await press(["ctrl", "a"]);
-        expect(getContent(el)).toBe("[<p>abcd</p>]");
+        expect(getContent(el)).toBe("<p>[abcd]</p>");
         setTag("h1")(editor);
-        expect(getContent(el)).toBe("[<h1>abcd</h1>]");
+        expect(getContent(el)).toBe("<h1>[abcd]</h1>");
     });
 });
 

