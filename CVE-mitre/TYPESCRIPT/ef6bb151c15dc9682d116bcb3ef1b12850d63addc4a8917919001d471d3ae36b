--- .gitignore ---
@@ -26,6 +26,7 @@ yarn-error.log*
 .pnpm-debug.log*
 
 # local env files
+docker.env
 .env
 .env.local
 .env.development.local

--- apps/backend/api/src/api.ts ---
@@ -4,7 +4,7 @@ import {
   createOpenApiNodeHttpHandler,
   CreateOpenApiNodeHttpHandlerOptions
 } from "trpc-openapi/dist/adapters/node-http/core";
-import corsPlugin from "@fastify/cors";
+import corsPlugin, { OriginFunction } from "@fastify/cors";
 import { OpenApiRouter } from "trpc-openapi";
 import { AnyRouter } from "@trpc/server";
 import { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
@@ -55,36 +55,38 @@ const fastifyTRPCOpenApiPlugin = <TRouter extends AnyRouter>(
   done();
 };
 const apiService = publicPlugin(async (fastify) => {
+  const originCallback: OriginFunction = (origin, callback) => {
+    if (!origin || origin === "null") {
+      callback(null, true);
+
+      return;
+    }
+
+    const { hostname } = new URL(origin);
+    const appHostname = new URL(fastify.config.PUBLIC_APP_URL).hostname;
+
+    if (
+      hostname === "localhost" ||
+      hostname.endsWith(appHostname) ||
+      (fastify.config.VRITE_CLOUD && hostname.endsWith("swagger.io"))
+    ) {
+      callback(null, true);
+
+      return;
+    }
+
+    callback(new Error("Not allowed"), false);
+  };
+
   await fastify.register(rateLimitPlugin, {
     max: 500,
     timeWindow: "1 minute",
     redis: fastify.redis
   });
   await fastify.register(corsPlugin, {
+    origin: true,
     credentials: true,
-    methods: ["GET", "DELETE", "PUT", "POST"],
-    origin(origin, callback) {
-      if (!origin || origin === "null") {
-        callback(null, true);
-
-        return;
-      }
-
-      const { hostname } = new URL(origin);
-      const appHostname = new URL(fastify.config.PUBLIC_APP_URL).hostname;
-
-      if (
-        hostname === "localhost" ||
-        hostname.endsWith(appHostname) ||
-        (fastify.config.VRITE_CLOUD && hostname.endsWith("swagger.io"))
-      ) {
-        callback(null, true);
-
-        return;
-      }
-
-      callback(new Error("Not allowed"), false);
-    }
+    methods: ["GET", "DELETE", "PUT", "POST"]
   });
   await fastify.register(fastifyTRPCOpenApiPlugin, {
     basePath: "/",

--- apps/backend/api/src/index.ts ---
@@ -3,15 +3,22 @@ import { generateOpenApiDocument } from "trpc-openapi";
 import { createServer, appRouter } from "@vrite/backend";
 
 (async () => {
-  const server = await createServer();
+  const server = await createServer({
+    database: true,
+    pubSub: true,
+    auth: true,
+    email: true,
+    gitSync: true,
+    search: true
+  });
 
   await server.register(apiService);
   server.get("/swagger.json", (req, res) => {
     res.send(
       generateOpenApiDocument(appRouter, {
         baseUrl: server.config.PUBLIC_API_URL,
         title: "Vrite API",
-        version: "0.2.0"
+        version: "0.3.0"
       })
     );
   });

--- apps/backend/app/src/app.ts ---
@@ -1,11 +1,10 @@
-import { appRouter, errors, publicPlugin, trpcPlugin } from "@vrite/backend";
+import { errors, publicPlugin, trpcPlugin, processAuth } from "@vrite/backend";
 import staticPlugin from "@fastify/static";
 import websocketPlugin from "@fastify/websocket";
 import axios from "axios";
 import viewPlugin from "@fastify/view";
 import handlebars from "handlebars";
 import { FastifyReply } from "fastify";
-import { processAuth } from "@vrite/backend/src/lib/auth";
 import { nanoid } from "nanoid";
 import multipartPlugin from "@fastify/multipart";
 import mime from "mime-types";
@@ -15,7 +14,7 @@ import path from "path";
 
 const appService = publicPlugin(async (fastify) => {
   const renderPage = async (reply: FastifyReply): Promise<void> => {
-    return reply.view("index.html", {
+    return reply.header("X-Frame-Options", "SAMEORIGIN").view("index.html", {
       PUBLIC_APP_URL: fastify.config.PUBLIC_APP_URL,
       PUBLIC_API_URL: fastify.config.PUBLIC_API_URL,
       PUBLIC_COLLAB_URL: fastify.config.PUBLIC_COLLAB_URL,
@@ -51,57 +50,6 @@ const appService = publicPlugin(async (fastify) => {
   fastify.setNotFoundHandler(async (_request, reply) => {
     return renderPage(reply);
   });
-  fastify.get<{ Querystring: { url: string } }>("/proxy*", async (request, reply) => {
-    const filterOutRegex =
-      /(localhost|\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)(?::\d{0,4})?\b)/;
-
-    if (request.headers.origin) {
-      reply.header("Access-Control-Allow-Origin", fastify.config.PUBLIC_APP_URL);
-      reply.header("Access-Control-Allow-Methods", "GET");
-      reply.header(
-        "Access-Control-Allow-Headers",
-        request.headers["access-control-request-headers"]
-      );
-    } else if (
-      fastify.config.NODE_ENV !== "development" &&
-      !fastify.config.PUBLIC_APP_URL.includes("localhost")
-    ) {
-      // Prevent proxy abuse in production
-      return reply.status(400).send("Invalid Origin");
-    }
-
-    if (
-      filterOutRegex.test(request.query.url) &&
-      !request.query.url.includes(fastify.config.PUBLIC_ASSETS_URL)
-    ) {
-      return reply.status(400).send("Invalid URL");
-    }
-
-    if (request.method === "OPTIONS") {
-      // CORS Preflight
-      reply.send();
-    } else {
-      const targetURL = request.query.url;
-
-      try {
-        const response = await axios.get(targetURL, {
-          responseType: "arraybuffer"
-        });
-
-        if (!`${response.headers["content-type"]}`.includes("image")) {
-          return reply.status(400).send("Invalid Content-Type");
-        }
-
-        reply.header("content-type", response.headers["content-type"]);
-        reply.send(Buffer.from(response.data, "binary"));
-      } catch (error) {
-        // eslint-disable-next-line no-console
-        console.error(error);
-
-        return reply.status(500).send("Could not fetch");
-      }
-    }
-  });
   fastify.post<{
     Body: Buffer;
   }>("/upload", async (req, res) => {

--- apps/backend/app/src/index.ts ---
@@ -2,7 +2,15 @@ import { appService } from "./app";
 import { createServer } from "@vrite/backend";
 
 (async () => {
-  const server = await createServer();
+  const server = await createServer({
+    database: true,
+    pubSub: true,
+    auth: true,
+    email: true,
+    gitSync: true,
+    search: true,
+    storage: true
+  });
 
   await server.register(appService);
   server.listen({ host: server.config.HOST, port: server.config.PORT }, (err) => {

--- apps/backend/assets/src/assets.ts ---
@@ -46,7 +46,10 @@ const assetsService = publicPlugin(async (fastify) => {
       await reply.header("Content-Type", sourceContentType).send(sourceAsset);
     };
 
-    reply.header("Access-Control-Allow-Origin", fastify.config.PUBLIC_APP_URL);
+    reply.header(
+      "Access-Control-Allow-Origin",
+      fastify.config.NODE_ENV === "development" ? "*" : fastify.config.PUBLIC_APP_URL
+    );
     reply.header("Access-Control-Allow-Methods", "GET");
 
     if (!sourceAsset) return reply.status(404).send();

--- apps/backend/assets/src/index.ts ---
@@ -1,8 +1,10 @@
-import { assetsService } from "./api";
+import { assetsService } from "./assets";
 import { createServer } from "@vrite/backend";
 
 (async () => {
-  const server = await createServer();
+  const server = await createServer({
+    storage: true
+  });
 
   await server.register(assetsService);
 

--- apps/backend/collaboration/src/extensions/git-sync.ts ---
@@ -1,27 +1,21 @@
 import { Extension, onChangePayload, onDisconnectPayload } from "@hocuspocus/server";
 import {
-  GitData,
-  ObjectId,
   createGenericOutputContentProcessor,
   docToJSON,
   getContentPiecesCollection,
   getGitDataCollection,
-  jsonToBuffer
+  jsonToBuffer,
+  publishGitDataEvent
 } from "@vrite/backend";
-import { createEventPublisher } from "@vrite/backend/src/lib/pub-sub";
 import { FastifyInstance } from "fastify";
+import { ObjectId } from "mongodb";
 import crypto from "node:crypto";
 
 interface Configuration {
   debounce: number | false | null;
   debounceMaxWait: number;
 }
 
-type GitDataEvent = {
-  action: "update";
-  data: Partial<GitData>;
-};
-
 class GitSync implements Extension {
   private configuration: Configuration = {
     debounce: 5000,
@@ -36,10 +30,6 @@ class GitSync implements Extension {
 
   private debounced: Map<string, { timeout: NodeJS.Timeout; start: number }> = new Map();
 
-  private publishGitDataEvent = createEventPublisher<GitDataEvent>((workspaceId) => {
-    return `gitData:${workspaceId}`;
-  });
-
   public constructor(fastify: FastifyInstance, configuration?: Partial<Configuration>) {
     this.fastify = fastify;
     this.configuration = {
@@ -121,7 +111,7 @@ class GitSync implements Extension {
         }
       }
     );
-    this.publishGitDataEvent({ fastify: this.fastify }, `${details.context.workspaceId}`, {
+    publishGitDataEvent({ fastify: this.fastify }, `${details.context.workspaceId}`, {
       action: "update",
       data: {
         records: gitData.records.map((record: any) => {

--- apps/backend/collaboration/src/extensions/search-indexing.ts ---
@@ -1,6 +1,7 @@
 import { Extension, onChangePayload, onDisconnectPayload } from "@hocuspocus/server";
-import { ObjectId, docToBuffer, getContentPiecesCollection } from "@vrite/backend";
+import { docToBuffer, getContentPiecesCollection } from "@vrite/backend";
 import { FastifyInstance } from "fastify";
+import { ObjectId } from "mongodb";
 
 interface Configuration {
   debounce: number | false | null;

--- apps/backend/collaboration/src/index.ts ---
@@ -2,7 +2,12 @@ import { writingPlugin } from "./writing";
 import { createServer } from "@vrite/backend";
 
 (async () => {
-  const server = await createServer();
+  const server = await createServer({
+    database: true,
+    auth: true,
+    pubSub: true,
+    search: true
+  });
 
   await server.register(writingPlugin);
 })();

--- apps/backend/collaboration/src/writing.ts ---
@@ -1,10 +1,14 @@
-import { publicPlugin, getContentsCollection, getContentVariantsCollection } from "@vrite/backend";
+import {
+  publicPlugin,
+  getContentsCollection,
+  getContentVariantsCollection,
+  errors,
+  SessionData
+} from "@vrite/backend";
 import { Server } from "@hocuspocus/server";
 import { Database } from "@hocuspocus/extension-database";
 import { Redis } from "@hocuspocus/extension-redis";
 import { ObjectId, Binary } from "mongodb";
-import { SessionData } from "@vrite/backend/src/lib/session";
-import { unauthorized } from "@vrite/backend/src/lib/errors";
 import { SearchIndexing } from "#extensions/search-indexing";
 import { GitSync } from "#extensions/git-sync";
 
@@ -18,13 +22,13 @@ const writingPlugin = publicPlugin(async (fastify) => {
       const cookies = fastify.parseCookie(data.requestHeaders.cookie || "");
 
       if (!cookies.accessToken) {
-        throw unauthorized();
+        throw errors.unauthorized();
       }
 
       const token = fastify.unsignCookie(cookies.accessToken || "")?.value || "";
 
       if (!token) {
-        throw unauthorized();
+        throw errors.unauthorized();
       }
 
       const { sessionId } = fastify.jwt.verify<{ sessionId: string }>(token);

--- apps/backend/extensions/package.json ---
@@ -10,12 +10,34 @@
   },
   "dependencies": {
     "@fastify/cors": "^8.3.0",
+    "@prettier/sync": "^0.3.0",
     "@trpc/server": "^10.35.0",
+    "@types/hast": "^3.0.1",
+    "@types/html-to-text": "^9.0.1",
+    "@types/js-yaml": "^4.0.6",
+    "@types/mdast": "^4.0.1",
     "@vrite/backend": "workspace:*",
     "@vrite/sdk": "workspace:*",
+    "dayjs": "^1.11.9",
     "fastify": "^4.20.0",
+    "hast-util-to-html": "^9.0.0",
+    "html-to-text": "^9.0.5",
+    "js-yaml": "^4.1.0",
+    "mdast-util-from-markdown": "^2.0.0",
+    "mdast-util-frontmatter": "^2.0.1",
+    "mdast-util-gfm": "^3.0.0",
+    "mdast-util-mdx": "^3.0.0",
+    "mdast-util-to-hast": "^13.0.2",
+    "micromark-extension-frontmatter": "^2.0.0",
+    "micromark-extension-gfm": "^3.0.0",
+    "micromark-extension-mdxjs": "^2.0.0",
     "openai": "^4.0.0",
-    "trpc-openapi": "^1.2.0"
+    "prettier": "^3.0.2",
+    "remark": "^15.0.1",
+    "remark-mdx": "^2.3.0",
+    "remark-parse": "^11.0.0",
+    "trpc-openapi": "^1.2.0",
+    "unist-util-visit": "^5.0.0"
   },
   "devDependencies": {
     "@vrite/scripts": "workspace:*"

--- apps/backend/extensions/src/extensions.ts ---
@@ -1,13 +1,13 @@
 import { extensionsRouter } from "./routes";
-import { publicPlugin, createContext } from "@vrite/backend";
+import { publicPlugin, createFastifyContext } from "@vrite/backend";
 import {
   createOpenApiNodeHttpHandler,
   CreateOpenApiNodeHttpHandlerOptions
 } from "trpc-openapi/dist/adapters/node-http/core";
-import corsPlugin from "@fastify/cors";
 import { OpenApiRouter } from "trpc-openapi";
 import { AnyRouter } from "@trpc/server";
 import { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
+import corsPlugin from "@fastify/cors";
 
 type CreateOpenApiFastifyPluginOptions<TRouter extends OpenApiRouter> =
   CreateOpenApiNodeHttpHandlerOptions<TRouter, any, any> & {
@@ -56,15 +56,15 @@ const fastifyTRPCOpenApiPlugin = <TRouter extends AnyRouter>(
 };
 const extensionsService = publicPlugin(async (fastify) => {
   await fastify.register(corsPlugin, {
-    credentials: true,
     methods: ["GET", "DELETE", "PUT", "POST"],
+    credentials: true,
     origin: true
   });
   await fastify.register(fastifyTRPCOpenApiPlugin, {
     basePath: "/",
     router: extensionsRouter,
     createContext({ req, res }: { req: FastifyRequest; res: FastifyReply }) {
-      return createContext({ req, res }, fastify);
+      return createFastifyContext({ req, res }, fastify);
     }
   });
 });

--- apps/backend/extensions/src/index.ts ---
@@ -1,8 +1,8 @@
 import { extensionsService } from "./extensions";
-import { createServer, z } from "@vrite/backend";
+import { createServer } from "@vrite/backend";
 
 (async () => {
-  const server = await createServer();
+  const server = await createServer({});
 
   await server.register(extensionsService);
 

--- apps/backend/extensions/src/routes/dev/transformer.ts ---
@@ -111,7 +111,7 @@ const devOutputTransformer = createOutputTransformer<string>((contentNode) => {
   };
   const transformContentNode = (
     nodeWalker: JSONContentNodeWalker<
-      JSONContentNode["listItem" | "blockquote" | "doc" | "wrapper"]
+      JSONContentNode["listItem" | "blockquote" | "doc" | "element"]
     >
   ): string => {
     return nodeWalker.children
@@ -150,9 +150,9 @@ const devOutputTransformer = createOutputTransformer<string>((contentNode) => {
             return `\n\`\`\`${child.node.attrs?.lang || ""}\n${transformTextNode(
               child as JSONContentNodeWalker<JSONContentNode["codeBlock"]>
             )}\n\`\`\`\n`;
-          case "wrapper":
+          case "element":
             return `\n${transformContentNode(
-              child as JSONContentNodeWalker<JSONContentNode["wrapper"]>
+              child as JSONContentNodeWalker<JSONContentNode["element"]>
             )}\n`;
           case "blockquote":
             return `\n${transformContentNode(

--- apps/backend/extensions/src/routes/hashnode/transformer.ts ---
@@ -111,7 +111,7 @@ const hashnodeOutputTransformer = createOutputTransformer<string>((contentNode)
   };
   const transformContentNode = (
     nodeWalker: JSONContentNodeWalker<
-      JSONContentNode["listItem" | "blockquote" | "doc" | "wrapper"]
+      JSONContentNode["listItem" | "blockquote" | "doc" | "element"]
     >
   ): string => {
     return nodeWalker.children
@@ -150,9 +150,9 @@ const hashnodeOutputTransformer = createOutputTransformer<string>((contentNode)
             return `\n\`\`\`${child.node.attrs?.lang || ""}\n${transformTextNode(
               child as JSONContentNodeWalker<JSONContentNode["codeBlock"]>
             )}\n\`\`\`\n`;
-          case "wrapper":
+          case "element":
             return `\n${transformContentNode(
-              child as JSONContentNodeWalker<JSONContentNode["wrapper"]>
+              child as JSONContentNodeWalker<JSONContentNode["element"]>
             )}\n`;
           case "blockquote":
             return `\n${transformContentNode(

--- apps/backend/extensions/src/routes/index.ts ---
@@ -2,13 +2,15 @@ import { devRouter } from "./dev";
 import { hashnodeRouter } from "./hashnode";
 import { gptRouter } from "./gpt";
 import { mediumRouter } from "./medium";
+import { mdxRouter } from "./mdx";
 import { router } from "@vrite/backend";
 
 const extensionsRouter = router({
   dev: devRouter,
   hashnode: hashnodeRouter,
   medium: mediumRouter,
-  gpt: gptRouter
+  gpt: gptRouter,
+  mdx: mdxRouter
 });
 
 type Router = typeof extensionsRouter;

--- apps/backend/extensions/src/routes/mdx/index.ts ---
@@ -0,0 +1,62 @@
+import { mdxAsyncInputTransformer } from "./input-transformer";
+import { mdxAsyncOutputTransformer } from "./output-transformer";
+import { procedure, router, z } from "@vrite/backend";
+import { InputTransformer } from "@vrite/sdk/transformers";
+
+const basePath = "/mdx";
+const mdxRouter = router({
+  input: procedure
+    .meta({
+      openapi: {
+        method: "POST",
+        path: `${basePath}/input`
+      }
+    })
+    .input(z.object({ data: z.array(z.string()) }))
+    .output(
+      z.array(
+        z.object({
+          content: z.string(),
+          contentPiece: z.any()
+        })
+      )
+    )
+    .mutation(async ({ input }) => {
+      const output: Array<ReturnType<InputTransformer>> = [];
+
+      for await (const content of input.data) {
+        output.push(await mdxAsyncInputTransformer(content));
+      }
+
+      return output;
+    }),
+  output: procedure
+    .meta({
+      openapi: {
+        method: "POST",
+        path: `${basePath}/output`
+      }
+    })
+    .input(
+      z.object({
+        data: z.array(
+          z.object({
+            content: z.any(),
+            metadata: z.any()
+          })
+        )
+      })
+    )
+    .output(z.array(z.string()))
+    .mutation(async ({ ctx, input }) => {
+      const output: string[] = [];
+
+      for await (const { content, metadata } of input.data) {
+        output.push(await mdxAsyncOutputTransformer(content, metadata));
+      }
+
+      return output;
+    })
+});
+
+export { mdxRouter };

--- apps/backend/extensions/src/routes/mdx/input-transformer.ts ---
@@ -0,0 +1,201 @@
+import { InputTransformer } from "@vrite/sdk/transformers";
+import { mdxjs } from "micromark-extension-mdxjs";
+import { fromMarkdown } from "mdast-util-from-markdown";
+import { MdxJsxAttribute, MdxJsxExpressionAttribute, mdxFromMarkdown } from "mdast-util-mdx";
+import { frontmatter } from "micromark-extension-frontmatter";
+import { frontmatterFromMarkdown } from "mdast-util-frontmatter";
+import { gfmFromMarkdown } from "mdast-util-gfm";
+import { gfm } from "micromark-extension-gfm";
+import { toHtml } from "hast-util-to-html";
+import { toHast, defaultHandlers } from "mdast-util-to-hast";
+import babelPlugin from "prettier/plugins/babel";
+import estreePlugin from "prettier/plugins/estree";
+import { format } from "prettier/standalone";
+import { load } from "js-yaml";
+import dayjs from "dayjs";
+import type { Plugin } from "prettier";
+import type { RootContentMap } from "mdast";
+import type { Element, Text } from "hast";
+
+const attributeProcessingPromises: Array<Promise<any>> = [];
+const processAttribute = async (value: string): Promise<any> => {
+  try {
+    const processedValue = await format(value, {
+      parser: "json-stringify",
+      plugins: [babelPlugin, estreePlugin as Plugin]
+    });
+
+    return JSON.parse(processedValue);
+  } catch (error) {
+    try {
+      return JSON.parse(value);
+    } catch (error) {
+      return value;
+    }
+  }
+};
+const attributesToJSON = async (
+  attributes: Array<MdxJsxAttribute | MdxJsxExpressionAttribute>
+): Promise<Record<string, any>> => {
+  const output: Record<string, any> = {};
+
+  for await (const attribute of attributes) {
+    if (attribute.type === "mdxJsxAttribute") {
+      if (typeof attribute.value === "string") {
+        output[attribute.name] = attribute.value;
+      } else if (attribute.value === null) {
+        output[attribute.name] = true;
+      } else if (attribute.value?.value) {
+        const value = await processAttribute(attribute.value.value);
+
+        output[attribute.name] = value;
+      }
+    }
+  }
+
+  return output;
+};
+const mdxAsyncInputTransformer = async (input: string): Promise<ReturnType<InputTransformer>> => {
+  const mdast = fromMarkdown(input, {
+    extensions: [gfm(), frontmatter(), mdxjs()],
+    mdastExtensions: [gfmFromMarkdown(), frontmatterFromMarkdown(), mdxFromMarkdown()]
+  });
+  const hast = toHast(mdast, {
+    handlers: {
+      mdxjsEsm(state, node: RootContentMap["mdxjsEsm"]) {
+        const result: Element = {
+          tagName: "div",
+          type: "element",
+          properties: {
+            "data-element": "true",
+            "data-type": "Import"
+          },
+          children: state.all({
+            children: [{ type: "code", lang: "mdx", value: node.value.trim() }],
+            type: "root"
+          })
+        };
+
+        state.patch(node, result);
+
+        return state.applyData(node, result);
+      },
+      paragraph(state, node: RootContentMap["paragraph"]) {
+        if (node.children.length === 1 && node.children[0].type === "image") {
+          return defaultHandlers.image(state, node.children[0]);
+        } else if (node.children.length === 1 && node.children[0].type === "mdxJsxTextElement") {
+          return state.all({ type: "root", children: [node.children[0]] })[0];
+        }
+
+        return defaultHandlers.paragraph(state, node);
+      },
+      code(state, node: RootContentMap["code"]) {
+        const result = defaultHandlers.code(state, { ...node, value: node.value.trim() });
+        const meta: string[] = [];
+
+        let title = "";
+
+        (node.meta || "").split(" ").forEach((item) => {
+          if (item.startsWith("title=")) {
+            const match = item.match(/title="(.+?)"/);
+
+            if (match) {
+              title = match[1] || title;
+            }
+          } else {
+            meta.push(item);
+          }
+        });
+
+        const codeElement = result.children[0] as Element;
+        const textElement = codeElement.children[0] as Text;
+
+        result.properties["data-title"] = title;
+        result.properties["data-meta"] = meta.join(" ");
+        textElement.value = textElement.value.trim();
+
+        return result;
+      },
+      list(state, node: RootContentMap["list"]) {
+        const result = defaultHandlers.list(state, node);
+        const className = `${result.properties.className || ""}`;
+
+        if (className.includes("contains-task-list")) {
+          result.properties.className = className.replace("contains-task-list", "").trim();
+          if (!result.properties.className) delete result.properties.className;
+
+          result.properties["data-type"] = "taskList";
+        }
+
+        return result;
+      },
+      mdxFlowExpression() {
+        return undefined;
+      },
+      mdxJsxTextElement(state, node: RootContentMap["mdxJsxTextElement"], parent) {
+        if (parent?.children.length === 1) {
+          return state.all({
+            type: "root",
+            children: [
+              {
+                type: "mdxJsxFlowElement",
+                name: node.name,
+                attributes: node.attributes,
+                children: [{ type: "paragraph", children: node.children }]
+              }
+            ]
+          })[0];
+        }
+
+        return undefined;
+      },
+      mdxTextExpression() {
+        return undefined;
+      },
+      mdxJsxFlowElement(state, node: RootContentMap["mdxJsxFlowElement"]) {
+        const result: Element = {
+          tagName: "div",
+          type: "element",
+          properties: {
+            "data-element": "true",
+            "data-type": node.name
+          },
+          children: state.all(node)
+        };
+        const promise = attributesToJSON(node.attributes).then((attributes) => {
+          result.properties["data-props"] = JSON.stringify(attributes);
+        });
+
+        attributeProcessingPromises.push(promise);
+        state.patch(node, result);
+
+        return state.applyData(node, result);
+      }
+    }
+  });
+  const frontmatterYAML = mdast.children.find(
+    (child) => child.type === "yaml"
+  ) as RootContentMap["yaml"];
+  const { canonicalLink, coverUrl, description, date, slug, title, ...customData } = (
+    frontmatterYAML ? load(frontmatterYAML.value) : {}
+  ) as Record<string, any>;
+
+  await Promise.all(attributeProcessingPromises);
+
+  const content = toHtml(hast);
+
+  return {
+    content,
+    contentPiece: {
+      ...(canonicalLink && { canonicalLink }),
+      ...(coverUrl && { coverUrl }),
+      ...(description && { description: `<p>${description}</p>` }),
+      ...(date && { date: dayjs(date).toISOString() }),
+      ...(slug && { slug }),
+      ...(title && { title }),
+      customData
+    }
+  };
+};
+
+export { mdxAsyncInputTransformer };

--- apps/backend/extensions/src/routes/mdx/output-transformer.ts ---
@@ -0,0 +1,315 @@
+/* eslint-disable no-use-before-define */
+import {
+  createContentWalker,
+  JSONContentNodeWalker,
+  JSONContentNode,
+  GenericJSONContentNode
+} from "@vrite/sdk/transformers";
+import { format } from "prettier/standalone";
+import babelPlugin from "prettier/plugins/babel";
+import estreePlugin from "prettier/plugins/estree";
+import markdownPlugin from "prettier/plugins/markdown";
+import { ContentPiece } from "@vrite/sdk/api";
+import { convert as convertToText } from "html-to-text";
+import { dump } from "js-yaml";
+import dayjs from "dayjs";
+import type { Plugin } from "prettier";
+
+const processCode = async (code: string, hasContent?: boolean): Promise<string> => {
+  const codeTagClosed = code?.trim().replace(/>$/, "/>") || "";
+  const formattedCode = await format(codeTagClosed, {
+    parser: "babel-ts",
+    plugins: [babelPlugin, estreePlugin as Plugin],
+    printWidth: 60,
+    trailingComma: "none",
+    singleQuote: false
+  });
+
+  return formattedCode.replace(/ *?\/>;/gm, hasContent ? ">" : "/>").trim();
+};
+const mdxAsyncOutputTransformer = async (
+  contentNode: GenericJSONContentNode,
+  contentPiece?: Pick<
+    ContentPiece<Record<string, any>>,
+    | "date"
+    | "title"
+    | "description"
+    | "tags"
+    | "members"
+    | "slug"
+    | "filename"
+    | "coverUrl"
+    | "coverAlt"
+    | "customData"
+    | "canonicalLink"
+    | "coverWidth"
+  >
+): Promise<string> => {
+  const contentWalker = createContentWalker(contentNode);
+  const transformText = (textWalker: JSONContentNodeWalker<JSONContentNode["text"]>): string => {
+    let output = "";
+
+    if (textWalker.node.type === "text") {
+      output = textWalker.node.text;
+      textWalker.node.marks?.forEach((mark) => {
+        switch (mark.type) {
+          case "link":
+            output = `[${output}](${mark.attrs.href})`;
+            break;
+          case "bold":
+            output = `**${output}**`;
+            break;
+          case "code":
+            output = `\`${output}\``;
+            break;
+          case "italic":
+            output = `_${output}_`;
+            break;
+          case "strike":
+            output = `~~${output}~~`;
+            break;
+          default:
+            break;
+        }
+      });
+    }
+
+    return output;
+  };
+  const transformTextNode = (
+    paragraphWalker: JSONContentNodeWalker<JSONContentNode["paragraph" | "heading" | "codeBlock"]>
+  ): string => {
+    return `${paragraphWalker.children
+      .map((child) => {
+        if (child.node.type === "text") {
+          return transformText(child as JSONContentNodeWalker<JSONContentNode["text"]>);
+        }
+
+        return "\n";
+      })
+      .join("")}`;
+  };
+  const transformTable = (tableWalker: JSONContentNodeWalker<JSONContentNode["table"]>): string => {
+    let output = "";
+
+    tableWalker.children.forEach((tableRowWalker, rowIndex) => {
+      let isHeader = false;
+
+      const columns = tableRowWalker.children.map((tableCellWalker) => {
+        if (tableCellWalker.node.type === "tableHeader") {
+          isHeader = true;
+        }
+
+        return tableCellWalker.children.map(transformTextNode).join("\n");
+      });
+
+      if (rowIndex === tableWalker.children.length - 1) {
+        output += `| ${columns.map((row) => row.replace(/\n/g, " ")).join(" | ")} |`;
+      } else {
+        output += `| ${columns.map((row) => row.replace(/\n/g, " ")).join(" | ")} |\n`;
+      }
+
+      if (isHeader && rowIndex === 0) {
+        output += `| ${columns.map(() => "---").join(" | ")} |\n`;
+      }
+    });
+
+    return output;
+  };
+  const transformCodeBlock = (
+    codeBlockWalker: JSONContentNodeWalker<JSONContentNode["codeBlock"]>
+  ): string => {
+    const attrs = codeBlockWalker.node.attrs || {};
+
+    let openingTag = `${attrs?.lang || ""}`;
+
+    if (attrs?.title) {
+      openingTag += ` title="${attrs.title}"`;
+    }
+
+    if (attrs?.meta) {
+      openingTag += ` ${attrs.meta}`;
+    }
+
+    return `\`\`\`${openingTag}\n${transformTextNode(codeBlockWalker)}\n\`\`\``;
+  };
+  const transformElement = async (
+    elementWalker: JSONContentNodeWalker<JSONContentNode["element"]>
+  ): Promise<string> => {
+    const { attrs } = elementWalker.node;
+
+    if (attrs.type === "Import" && elementWalker.children[0]?.node?.type === "codeBlock") {
+      return `${transformTextNode(
+        elementWalker.children[0] as JSONContentNodeWalker<JSONContentNode["codeBlock"]>
+      ).trim()}`;
+    }
+
+    const keyValueProps = Object.entries(attrs.props).map(([key, value]) => {
+      if (value === true) return key;
+
+      const useBrackets = typeof value !== "string" || value.includes("\n") || value.includes(`"`);
+
+      return `${key}=${useBrackets ? "{" : ""}${JSON.stringify(value)}${useBrackets ? "}" : ""}`;
+    });
+    const openingTag = await processCode(
+      `<${attrs.type}${keyValueProps.length ? " " : ""}${keyValueProps.join(" ")}>`,
+      elementWalker.children.length > 0
+    );
+
+    if (elementWalker.children.length > 0) {
+      return `${openingTag}\n${(
+        await transformContentNode(
+          elementWalker as JSONContentNodeWalker<JSONContentNode["element"]>
+        )
+      )
+        .split("\n")
+        .map((line) => `  ${line}`)
+        .join("\n")}\n</${attrs.type}>`;
+    }
+
+    return openingTag;
+  };
+  const transformContentNode = async (
+    nodeWalker: JSONContentNodeWalker<
+      JSONContentNode["listItem" | "taskItem" | "blockquote" | "doc" | "element"]
+    >
+  ): Promise<string> => {
+    const output: string[] = [];
+
+    for await (const child of nodeWalker.children) {
+      const processChildNode = async (): Promise<string> => {
+        const nodeType = child.node.type;
+        const previousSibling = child.previousSibling();
+        const isPreviousSiblingList = ["bulletList", "orderedList", "taskList"].includes(
+          previousSibling?.node.type || ""
+        );
+
+        switch (nodeType) {
+          case "paragraph":
+            return `\n${transformTextNode(
+              child as JSONContentNodeWalker<JSONContentNode["paragraph"]>
+            )}\n`;
+          case "bulletList":
+          case "orderedList":
+          case "taskList":
+            return `${isPreviousSiblingList ? "\n" : ""}${await transformList(
+              child as JSONContentNodeWalker<
+                JSONContentNode["bulletList" | "orderedList" | "taskList"]
+              >
+            )}\n`;
+          case "table":
+            return `\n${transformTable(
+              child as JSONContentNodeWalker<JSONContentNode["table"]>
+            )}\n`;
+          case "horizontalRule":
+            return "\n---\n";
+          case "image":
+            return `\n![${child.node.attrs?.alt || ""}](${child.node.attrs?.src || ""})\n`;
+          case "heading":
+            return `\n${"#".repeat(child.node.attrs?.level || 1)} ${transformTextNode(
+              child as JSONContentNodeWalker<JSONContentNode["heading"]>
+            )}\n`;
+          case "codeBlock":
+            return `\n${transformCodeBlock(
+              child as JSONContentNodeWalker<JSONContentNode["codeBlock"]>
+            )}\n`;
+          case "element":
+            return `${child.node.attrs.type === "Import" ? "" : "\n"}${await transformElement(
+              child as JSONContentNodeWalker<JSONContentNode["element"]>
+            )}\n`;
+          case "blockquote":
+            return `\n${(
+              await transformContentNode(
+                child as JSONContentNodeWalker<JSONContentNode["blockquote"]>
+              )
+            )
+              .split("\n")
+              .map((line) => `> ${line}`)
+              .join("\n")}\n`;
+          default:
+            return "";
+        }
+      };
+
+      output.push(await processChildNode());
+    }
+
+    return output.join("").trim();
+  };
+  const transformList = async (
+    listWalker: JSONContentNodeWalker<JSONContentNode["bulletList" | "orderedList" | "taskList"]>
+  ): Promise<string> => {
+    const listItems: Array<{ content: string; node: JSONContentNode["listItem" | "taskItem"] }> =
+      [];
+
+    for await (const nodeWalker of listWalker.children) {
+      listItems.push({
+        content: await transformContentNode(nodeWalker),
+        node: nodeWalker.node
+      });
+    }
+
+    return listItems
+      .map(({ content, node }, index) => {
+        let prefix = "";
+        let indent = 0;
+
+        if (listWalker.node.type === "taskList" && node.type === "taskItem") {
+          prefix = `${node.attrs?.checked ? "- [x] " : "- [ ] "} `;
+          indent = 2;
+        }
+
+        if (listWalker.node.type === "orderedList") {
+          const start = listWalker.node.attrs?.start || 1;
+
+          prefix = `${start + index}. `;
+          indent = prefix.length;
+        }
+
+        if (listWalker.node.type === "bulletList") {
+          prefix = "- ";
+          indent = prefix.length;
+        }
+
+        return content
+          .split("\n")
+          .map((line, lineIndex) => {
+            if (lineIndex === 0) {
+              return `${prefix}${line}`;
+            }
+
+            return `${" ".repeat(indent)}${line}`;
+          })
+          .join("\n");
+      })
+      .join("\n");
+  };
+  const content = await transformContentNode(
+    contentWalker as JSONContentNodeWalker<JSONContentNode["doc"]>
+  );
+  const frontmatter = dump(
+    {
+      ...(contentPiece?.canonicalLink && { canonicalLink: contentPiece.canonicalLink }),
+      ...(contentPiece?.coverUrl && { coverUrl: contentPiece.coverUrl }),
+      ...(contentPiece?.description && {
+        description: convertToText(contentPiece.description, { wordwrap: false })
+      }),
+      ...(contentPiece?.date && { date: dayjs(contentPiece.date).format("YYYY-MM-DD") }),
+      ...(contentPiece?.slug && { slug: contentPiece.slug }),
+      ...(contentPiece?.title && { title: contentPiece.title }),
+      ...(contentPiece?.customData || {})
+    },
+    { skipInvalid: true, forceQuotes: true, quotingType: '"' }
+  );
+
+  return (
+    await format(
+      `${frontmatter ? "---" : ""}\n${frontmatter.trim()}\n${
+        frontmatter ? "---" : ""
+      }\n\n${content.trim()}`,
+      { plugins: [markdownPlugin], parser: "mdx" }
+    )
+  ).trim();
+};
+
+export { mdxAsyncOutputTransformer };

--- apps/backend/extensions/src/routes/medium/transformer.ts ---
@@ -63,7 +63,7 @@ const mediumOutputTransformer = createOutputTransformer<string>((contentNode) =>
   };
   const transformContentNode = (
     nodeWalker: JSONContentNodeWalker<
-      JSONContentNode["listItem" | "blockquote" | "doc" | "wrapper"]
+      JSONContentNode["listItem" | "blockquote" | "doc" | "element"]
     >
   ): string => {
     return nodeWalker.children
@@ -98,9 +98,9 @@ const mediumOutputTransformer = createOutputTransformer<string>((contentNode) =>
             return `\n\`\`\`${child.node.attrs?.lang || ""}\n${transformTextNode(
               child as JSONContentNodeWalker<JSONContentNode["codeBlock"]>
             )}\n\`\`\`\n`;
-          case "wrapper":
+          case "element":
             return `\n${transformContentNode(
-              child as JSONContentNodeWalker<JSONContentNode["wrapper"]>
+              child as JSONContentNodeWalker<JSONContentNode["element"]>
             )}\n`;
           case "blockquote":
             return `\n${transformContentNode(

--- apps/docs/.astro/types.d.ts ---
@@ -1,3 +1,13 @@
+declare module 'astro:content' {
+	interface Render {
+		'.mdx': Promise<{
+			Content: import('astro').MarkdownInstance<{}>['Content'];
+			headings: import('astro').MarkdownHeading[];
+			remarkPluginFrontmatter: Record<string, any>;
+		}>;
+	}
+}
+
 declare module 'astro:content' {
 	interface Render {
 		'.md': Promise<{
@@ -176,74 +186,83 @@ declare module 'astro:content' {
 		"docs": {
 "javascript-sdk/javascript-sdk.md": {
 	id: "javascript-sdk/javascript-sdk.md";
-  slug: "javascript-sdk/javascript-sdk";
+  slug: "javascript-sdk/introduction";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "self-hosting/configuration.md": {
 	id: "self-hosting/configuration.md";
   slug: "self-hosting/configuration";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "self-hosting/docker.md": {
 	id: "self-hosting/docker.md";
   slug: "self-hosting/docker";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/configuring-vrite.md": {
 	id: "usage-guide/configuring-vrite.md";
   slug: "usage-guide/configuring-vrite";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/content-editor.md": {
 	id: "usage-guide/content-editor.md";
-  slug: "usage-guide/content-editor";
+  slug: "/usage-guide/content-editor";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/getting-started.md": {
 	id: "usage-guide/getting-started.md";
-  slug: "usage-guide/getting-started";
+  slug: "/usage-guide/getting-started";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/kanban-dashboard.md": {
 	id: "usage-guide/kanban-dashboard.md";
-  slug: "usage-guide/kanban-dashboard";
+  slug: "/usage-guide/kanban-dashboard";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/metadata.md": {
 	id: "usage-guide/metadata.md";
-  slug: "usage-guide/metadata";
+  slug: "/usage-guide/metadata";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/publishing.md": {
 	id: "usage-guide/publishing.md";
-  slug: "usage-guide/publishing";
+  slug: "/usage-guide/publishing";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
 "usage-guide/vrite-extensions.md": {
 	id: "usage-guide/vrite-extensions.md";
-  slug: "usage-guide/vrite-extensions";
+  slug: "/usage-guide/vrite-extensions";
   body: string;
   collection: "docs";
-  data: any
+  data: InferEntrySchema<"docs">
 } & { render(): Render[".md"] };
+};
+"recipes": {
+"test.mdx": {
+	id: "test.mdx";
+  slug: "/recipes/content-pieces";
+  body: string;
+  collection: "recipes";
+  data: InferEntrySchema<"recipes">
+} & { render(): Render[".mdx"] };
 };
 
 	};

--- apps/docs/astro.config.mjs ---
@@ -2,6 +2,8 @@ import { defineConfig } from "astro/config";
 import solidJs from "@astrojs/solid-js";
 import unocss from "unocss/astro";
 import robotsTxt from "astro-robots-txt";
+import mdx from "@astrojs/mdx";
+import autoImport from "astro-auto-import";
 
 export default defineConfig({
   markdown: {
@@ -10,6 +12,9 @@ export default defineConfig({
     }
   },
   integrations: [
+    autoImport({
+      imports: [{ "#components/content": ["Card", "CardGrid", "Warning", "Info"] }]
+    }),
     unocss({ injectReset: true }),
     solidJs(),
     robotsTxt({
@@ -18,7 +23,8 @@ export default defineConfig({
           userAgent: "*"
         }
       ]
-    })
+    }),
+    mdx()
   ],
   build: {
     redirects: false

--- apps/docs/package.json ---
@@ -11,23 +11,31 @@
     "astro": "astro"
   },
   "dependencies": {
+    "@astrojs/mdx": "^1.1.1",
     "@astrojs/sitemap": "^3.0.0",
     "@astrojs/solid-js": "^3.0.1",
     "@mdi/js": "^7.2.96",
+    "@solid-primitives/scheduled": "^1.4.0",
     "@types/marked": "^5.0.1",
     "@unocss/reset": "^0.55.7",
     "@vrite/components": "workspace:*",
+    "@vrite/sdk": "workspace:*",
     "astro": "^3.1.0",
+    "astro-auto-import": "^0.3.1",
+    "astro-icon": "^0.8.1",
     "clsx": "^2.0.0",
     "curl-string": "^3.1.0",
     "marked": "^9.0.0",
     "mini-svg-data-uri": "^1.4.4",
     "nanoid": "^5.0.1",
     "plausible-tracker": "^0.3.8",
+    "seamless-scroll-polyfill": "^2.3.4",
     "shiki": "^0.14.4",
     "solid-js": "^1.7.11",
+    "tinykeys": "^2.1.0",
     "typescript": "^5.2.2",
     "unocss": "^0.55.7",
+    "url-slug": "^4.0.1",
     "vite": "^4.4.9"
   },
   "devDependencies": {

--- apps/docs/src/components/content/card-grid.astro ---
@@ -0,0 +1,18 @@
+---
+import clsx from "clsx";
+interface Props {
+  cols?: 2 | 3 | 4;
+}
+
+const { props } = Astro;
+---
+
+<div
+  class={clsx("grid grid-reset-margin gap-2 my-4", {
+    "sm:grid-cols-2": !props.cols || props.cols === 2,
+    "sm:grid-cols-3": props.cols === 3,
+    "sm:grid-cols-4": props.cols === 4
+  })}
+>
+  <slot />
+</div>

--- apps/docs/src/components/content/card.astro ---
@@ -0,0 +1,44 @@
+---
+import { Card as BaseCard, Heading, IconButton } from "#components/primitives";
+import { Icon } from "astro-icon";
+import clsx from "clsx";
+
+interface Props {
+  icon: string;
+  label: string;
+  gradient?: boolean;
+  link: string;
+}
+
+const { props } = Astro;
+---
+
+<a href={props.link} class="not-prose cursor-pointer block my-4"
+  ><BaseCard
+    class={clsx(
+      "w-full flex flex-col m-0 p-0 gap-2 items-start h-full",
+      props.gradient ? "hover:bg-gradient-to-bl" : "!hover:bg-gray-200"
+    )}
+    color={props.gradient ? "primary" : "contrast"}
+  >
+    <div class="flex justify-center items-center pl-3 pr-4 pt-3 w-full">
+      <div class="pr-1 py-1">
+        <Icon
+          name={props.icon}
+          class={clsx("h-6 w-6", props.gradient ? "fill-current" : "fill-[url(#gradient)]")}
+        />
+      </div>
+      <Heading level={2} class="pl-1 flex-1">
+        {props.label}
+      </Heading>
+    </div>
+    <div
+      class={clsx(
+        "flex flex-col justify-center items-start gap-2 w-full px-4 pb-4",
+        props.gradient ? "" : "text-gray-500 dark:text-gray-400"
+      )}
+    >
+      <slot />
+    </div>
+  </BaseCard></a
+>

--- apps/docs/src/components/content/index.ts ---
@@ -0,0 +1,4 @@
+export { default as Card } from "./card.astro";
+export { default as CardGrid } from "./card-grid.astro";
+export { default as Warning } from "./warning.astro";
+export { default as Info } from "./info.astro";

--- apps/docs/src/components/content/info.astro ---
@@ -0,0 +1,9 @@
+---
+import { Card, Icon } from "#components/primitives";
+import { mdiInformationSlabCircleOutline } from "@mdi/js";
+---
+
+<Card class="flex items-center justify-start mx-0 my-4" color="contrast">
+  <Icon path={mdiInformationSlabCircleOutline} class="w-6 h-6 mr-2 fill-[url(#gradient)]" />
+  <div class="flex-1 not-prose"><slot /></div>
+</Card>

--- apps/docs/src/components/content/warning.astro ---
@@ -0,0 +1,9 @@
+---
+import { Card, Icon } from "#components/primitives";
+import { mdiAlertCircleOutline } from "@mdi/js";
+---
+
+<Card class="flex items-center justify-start m-0 my-4" color="primary">
+  <Icon path={mdiAlertCircleOutline} class="w-6 h-6 mr-2" />
+  <div class="flex-1 not-prose"><slot /></div>
+</Card>

--- apps/docs/src/components/fragments/endpoint-card-sections.tsx ---
@@ -1,35 +0,0 @@
-import { ParentComponent, createSignal } from "solid-js";
-import { Button } from "#components/primitives";
-
-interface EndpointCardSectionsProps {
-  sections: Array<{ label: string; id: string }>;
-}
-
-const EndpointCardSections: ParentComponent<EndpointCardSectionsProps> = (props) => {
-  const [activeSection, setActiveSection] = createSignal(props.sections[0].id);
-
-  return (
-    <>
-      <div class="flex w-full gap-2">
-        {props.sections.map((section) => {
-          return (
-            <Button
-              variant={section.id === activeSection() ? "solid" : "text"}
-              text={section.id === activeSection() ? "base" : "soft"}
-              color="contrast"
-              class="py-1 m-0 text-xl font-semibold"
-              onClick={() => {
-                setActiveSection(section.id);
-              }}
-            >
-              {section.label}
-            </Button>
-          );
-        })}
-      </div>
-      <div data-active-section={activeSection()}>{props.children}</div>
-    </>
-  );
-};
-
-export { EndpointCardSections };

--- apps/docs/src/components/fragments/endpoint-card.astro ---
@@ -1,125 +0,0 @@
----
-import { Code } from "astro:components";
-import { Button, Card, IconButton } from "#components/primitives";
-import curlString from "curl-string";
-import { mdiAsterisk } from "@mdi/js";
-import { EndpointCardSections } from "./endpoint-card-sections";
-
-interface Props {
-    method: string;
-    endpoint: string;
-    parameters?: Array<{
-        name: string;
-        required?: boolean;
-        description?: string;
-        example?:string;
-        schema: { type: string; default?:string };
-    }>;
-    example?: Record<string, any>;
-    requestBody?: string;
-    response?: string;
-}
-
-const body = JSON.stringify( {}, null, 2);
-const sections: Array<{ label: string; id: string }> = [];
-
-if (Astro.props.parameters && Astro.props.parameters.length) {
-    sections.push({ label: "Parameters", id: "parameters" });
-}
-
-if (Astro.props.requestBody) {
-    sections.push({ label: "Body", id: "body" });
-}
-
-sections.push({ label: "Response", id: "response" });
-
-const queryString = new URLSearchParams(
-    (Astro.props.parameters||[]).map((parameter) => {
-        return [parameter.name, parameter.example]
-    }) as string[][]
-).toString();
-const url = `https://api.vrite.io${Astro.props.endpoint}${queryString ? `?${queryString}` : ""}`;
-const parsedBody = JSON.parse(body);
-const curl = curlString(
-    `"${url}"`,
-    {
-        method: Astro.props.method,
-        headers: {
-            Authorization: `Bearer ${"<YOUR-TOKEN>"}`,
-            ...(body === "{}"
-                ? {}
-                : {
-                      "Content-Type": "application/json"
-                  }),
-            Accept: "application/json"
-        },
-        ...(body === "{}"
-            ? {}
-            : {
-                  body: parsedBody
-              })
-    },
-    { colorJson: false, jsonIndentWidth: 4 }
-);
-const code = `${curl}\n`;
----
-
-<Card class="relative p-4 m-0 gap-2 flex flex-col text-gray-700 dark:text-gray-300 my-4 bg-gray-100 dark:bg-gray-900">
-    <div class="flex">
-        <Button badge class="m-0 font-mono font-semibold" size="large" color="contrast">
-            {Astro.props.method}
-            {" "}{Astro.props.endpoint}
-        </Button>
-    </div>
-    <div class="code-block-contrast">
-        <Code code={code} lang="shell" />
-    </div>
-    <EndpointCardSections client:load sections={sections}>
-        {
-            Astro.props.parameters && Astro.props.parameters.length ? (
-                <div class="flex flex-col gap-2 parameters-section">
-                    {(Astro.props.parameters || []).map((parameter) => {
-                        return (
-                            <Card class="m-0 bg-gray-50 dark:bg-gray-800">
-                                <div class="flex items-center">
-                                    <Button badge text="soft" class="m-0 font-mono font-semibold">
-                                        {parameter.name}
-                                    </Button>
-                                    <span class="!bg-transparent text-sm font-mono px-2 flex-1">
-                                        {parameter.schema.type}
-                                    </span>
-                                    {parameter.required && (
-                                        <IconButton
-                                            class="m-0"
-                                            path={mdiAsterisk}
-                                            color="primary"
-                                            badge
-                                            label="Required"
-                                        />
-                                    )}
-                                </div>
-                                {parameter.description && (
-                                    <p class="pl-1 m-0 mt-2">{parameter.description}</p>
-                                )}
-                            </Card>
-                        );
-                    })}
-                </div>
-            ): <></>
-        }
-        {
-            Astro.props.requestBody && (
-                <div class="code-block-contrast body-section">
-                    <Code code={Astro.props.requestBody} lang="typescript"  />
-                </div>
-            )
-        }
-        {
-            Astro.props.response && (
-                <div class="code-block-contrast response-section">
-                    <Code code={Astro.props.response} lang="typescript" />
-                </div>
-            )
-        }
-    </EndpointCardSections>
-</Card>

--- apps/docs/src/components/fragments/footer.tsx ---
@@ -2,18 +2,19 @@ import { mdiChevronLeft, mdiChevronRight } from "@mdi/js";
 import { Component, Show } from "solid-js";
 import { IconButton } from "#components/primitives";
 
-interface NavigateProps {
-  nextEntry?: { label: string; link: string };
-  previousEntry?: { label: string; link: string };
+interface FooterProps {
+  nextEntry?: { label: string; link: string } | null;
+  previousEntry?: { label: string; link: string } | null;
 }
 
-const Navigation: Component<NavigateProps> = (props) => {
+const Footer: Component<FooterProps> = (props) => {
   return (
     <div class="flex flex-col lg:flex-row w-full gap-2 lg:gap-4 pt-16">
       <div class="flex-1">
         <Show when={props.previousEntry}>
           <IconButton
             label={props.previousEntry!.label}
+            text="soft"
             path={mdiChevronLeft}
             iconProps={{ class: "min-w-8" }}
             size="large"
@@ -26,6 +27,7 @@ const Navigation: Component<NavigateProps> = (props) => {
         <Show when={props.nextEntry}>
           <IconButton
             label={<span class="pr-2">{props.nextEntry!.label}</span>}
+            text="soft"
             path={mdiChevronRight}
             iconProps={{ class: "min-w-8" }}
             size="large"
@@ -38,4 +40,4 @@ const Navigation: Component<NavigateProps> = (props) => {
   );
 };
 
-export { Navigation };
+export { Footer };

--- apps/docs/src/components/fragments/header.tsx ---
@@ -1,33 +1,103 @@
-import { mdiAppleKeyboardCommand, mdiMagnify } from "@mdi/js";
-import type { Component } from "solid-js";
-import { Icon, IconButton } from "#components/primitives";
-import { logoIcon } from "#assets/icons";
+import { SearchPaletteProvider, useSearchPalette } from "./search-palette";
+import { mdiAppleKeyboardCommand, mdiGithub, mdiMagnify } from "@mdi/js";
+import { For, type Component, Show } from "solid-js";
+import clsx from "clsx";
+import { Button, Icon, IconButton, Tooltip } from "#components/primitives";
+import { discordIcon, logoIcon } from "#assets/icons";
 
 const isAppleDevice = (): boolean => {
   const platform = typeof navigator === "object" ? navigator.platform : "";
   const appleDeviceRegex = /Mac|iPod|iPhone|iPad/;
 
   return appleDeviceRegex.test(platform);
 };
+const externalLinks = [
+  {
+    label: "GitHub",
+    icon: mdiGithub,
+    href: "https://github.com/vriteio/vrite"
+  },
+  {
+    label: "Discord",
+    icon: discordIcon,
+    href: "https://discord.gg/yYqDWyKnqE"
+  }
+];
 const Header: Component = () => {
+  const { opened, setOpened } = useSearchPalette();
+
   return (
-    <div class="top-0 bg-gray-50 dark:bg-gray-800 border-b-2 border-gray-200 dark:border-gray-700 left-0 z-50 items-center justify-center w-full flex py-2 px-4 md:px-3">
+    <div
+      class={clsx(
+        "top-0 gap-2 h-12 fixed bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 border-b-2 right-0 z-1 items-center justify-center w-full flex py-2 px-4 md:px-8",
+        "!pr-[max(1rem,calc((100%-(1536px))/2))]"
+      )}
+    >
+      <div class="flex md:hidden items-center justify-start px-1">
+        <IconButton
+          path={logoIcon}
+          color="primary"
+          link="/"
+          class="bg-gradient-to-tr from-red-500 to-orange-500 m-0 mr-1"
+        />
+        <span class="flex-1 text-2xl font-extrabold text-gray-600 dark:text-gray-200">rite</span>
+      </div>
       <div class="flex-1" />
+      <For each={externalLinks}>
+        {(link) => {
+          return (
+            <a
+              class="flex justify-start items-center group cursor-pointer"
+              target="_blank"
+              href={link.href}
+            >
+              <Tooltip text={link.label} class="mt-1">
+                <IconButton
+                  path={link.icon}
+                  class="m-0 h-8 min-w-8"
+                  iconProps={{ class: "h-5 w-5" }}
+                  text="soft"
+                />
+              </Tooltip>
+            </a>
+          );
+        }}
+      </For>
       <IconButton
         path={mdiMagnify}
         label={
-          <div class="hidden xl:flex w-full items-center min-w-48">
-            <span class="pl-1 flex-1 text-start">Search</span>
-            <kbd class="bg-gray-300 dark:bg-gray-700 group-hover:bg-gray-200 dark:group-hover:bg-gray-800 flex justify-center items-center rounded-md px-1 h-5 text-sm">
-              {isAppleDevice() ? <Icon path={mdiAppleKeyboardCommand} class="h-3 w-3" /> : "Ctrl "}K
-            </kbd>
+          <div class="hidden md:flex w-full items-center">
+            <span class="pl-1 flex-1 text-start pr-3">Search</span>
+            <Show when={typeof window === "object"}>
+              <kbd class="bg-gray-300 dark:bg-gray-700 group-hover:bg-gray-200 dark:group-hover:bg-gray-800 flex justify-center items-center rounded-md px-1 h-5 text-sm">
+                {isAppleDevice() ? (
+                  <Icon path={mdiAppleKeyboardCommand} class="h-3 w-3" />
+                ) : (
+                  "Ctrl "
+                )}
+                K
+              </kbd>
+            </Show>
           </div>
         }
         text="soft"
-        class="@xl:min-w-48 justify-start m-0 group !hidden"
+        class="lg:min-w-48 justify-start m-0 group"
+        onClick={() => {
+          setOpened(!opened());
+        }}
       />
+      <Button color="primary" class="m-0" link="https://app.vrite.io">
+        Sign in
+      </Button>
     </div>
   );
 };
+const HeaderWrapper: Component = () => {
+  return (
+    <SearchPaletteProvider>
+      <Header />
+    </SearchPaletteProvider>
+  );
+};
 
-export { Header };
+export { HeaderWrapper as Header };

--- apps/docs/src/components/fragments/index.ts ---
@@ -4,4 +4,6 @@ export * from "./header";
 export * from "./side-bar";
 export * from "./on-this-page";
 export * from "./svg-defs";
-export * from "./navigation";
+export * from "./footer";
+export * from "./search-palette";
+export * from "./footer";

--- apps/docs/src/components/fragments/on-this-page.tsx ---
@@ -1,6 +1,15 @@
-import { Component, For, onMount, onCleanup, createSignal, createMemo } from "solid-js";
+import {
+  Component,
+  For,
+  onMount,
+  onCleanup,
+  createSignal,
+  createMemo,
+  createEffect
+} from "solid-js";
 import { mdiListBox } from "@mdi/js";
 import clsx from "clsx";
+import { scroll } from "seamless-scroll-polyfill";
 import type { MarkdownHeading } from "astro";
 import { Button, IconButton } from "#components/primitives";
 
@@ -12,14 +21,42 @@ const OnThisPage: Component<OnThisPageProps> = (props) => {
   const [activeHeading, setActiveHeading] = createSignal(props.headings[0]?.slug || "");
   const headings = createMemo(() => {
     return props.headings.filter((heading) => {
-      return heading.depth === 2;
+      return heading.depth === 2 || heading.depth === 3;
     });
   });
+  const scrollToActiveHeading = (smooth?: boolean): void => {
+    const heading = activeHeading();
+    const element = document.getElementById(heading);
+
+    if (!element) return;
+
+    const rect = element.getBoundingClientRect();
+    const y = rect.top + window.scrollY - 60;
+
+    scroll(window, {
+      top: y,
+      behavior: smooth === false ? "instant" : "smooth"
+    });
+  };
+  const handleClick = (event: MouseEvent): void => {
+    const target = event.target as HTMLElement;
+
+    if (target.matches("h2, h3")) {
+      const { id } = target;
+
+      if (id) {
+        setActiveHeading(id);
+        scrollToActiveHeading();
+        history.replaceState(null, "", `#${id}`);
+        navigator.clipboard.writeText(window.location.href);
+      }
+    }
+  };
 
   onMount(() => {
     if (!headings().length) return;
 
-    const observedElements: HTMLElement[] = [];
+    const hash = location.hash.slice(1);
     const setCurrent: IntersectionObserverCallback = (entries) => {
       for (const entry of entries) {
         if (entry.isIntersecting) {
@@ -59,17 +96,24 @@ const OnThisPage: Component<OnThisPageProps> = (props) => {
       )
       .forEach((h) => headingsObserver.observe(h));
     container?.addEventListener("scroll", handleScroll);
+    document.body.addEventListener("click", handleClick);
     onCleanup(() => {
       headingsObserver.disconnect();
       container?.removeEventListener("scroll", handleScroll);
+      document.body.removeEventListener("click", handleClick);
     });
+
+    if (hash) {
+      setActiveHeading(hash);
+      scrollToActiveHeading(false);
+    }
   });
 
   return (
     <>
       <div
         class={clsx(
-          "w-56 flex-col justify-start top-0 pt-16 fixed right-0 hidden xl:flex gap-2",
+          "w-56 flex-col justify-start top-0 pt-24 xl:fixed right-0 hidden xl:flex gap-2",
           "mr-[max(0px,calc((100%-(1536px))/2))]"
         )}
       >
@@ -89,13 +133,11 @@ const OnThisPage: Component<OnThisPageProps> = (props) => {
                 variant="text"
                 text={activeHeading() === heading.slug ? "base" : "soft"}
                 color={activeHeading() === heading.slug ? "primary" : "base"}
-                class="text-start m-0"
+                class={clsx("text-start m-0", heading.depth === 3 && "ml-6")}
+                size={heading.depth === 2 ? "medium" : "small"}
                 onClick={() => {
-                  document.getElementById(heading.slug)?.scrollIntoView({
-                    block: "start",
-                    inline: "nearest"
-                  });
                   setActiveHeading(heading.slug);
+                  scrollToActiveHeading();
                 }}
               >
                 {heading.text}

--- apps/docs/src/components/fragments/search-palette.tsx ---
@@ -0,0 +1,502 @@
+import {
+  Accessor,
+  Component,
+  For,
+  Match,
+  ParentComponent,
+  Setter,
+  Show,
+  Switch,
+  createEffect,
+  createSignal,
+  on,
+  onCleanup,
+  useContext
+} from "solid-js";
+import {
+  mdiChevronRight,
+  mdiCreationOutline,
+  mdiFileDocumentOutline,
+  mdiHeadSnowflakeOutline,
+  mdiInformationOutline,
+  mdiKeyboardEsc,
+  mdiKeyboardReturn,
+  mdiMagnify,
+  mdiSwapVertical
+} from "@mdi/js";
+import clsx from "clsx";
+import { scrollIntoView } from "seamless-scroll-polyfill";
+import { createContext } from "solid-js";
+import { debounce } from "@solid-primitives/scheduled";
+import { convert as convertToSlug } from "url-slug";
+import { marked } from "marked";
+import { createClient, SearchResult } from "@vrite/sdk/api";
+import {
+  Button,
+  Card,
+  Icon,
+  IconButton,
+  Input,
+  Loader,
+  Overlay,
+  Tooltip
+} from "#components/primitives";
+
+interface SearchPaletteProps {
+  opened: boolean;
+  setOpened(opened: boolean): void;
+}
+interface SearchPaletteContextData {
+  opened: Accessor<boolean>;
+  setOpened: Setter<boolean>;
+}
+
+const SearchPaletteContext = createContext<SearchPaletteContextData>();
+const SearchPalette: Component<SearchPaletteProps> = (props) => {
+  const client = createClient({
+    token: import.meta.env.PUBLIC_VRITE_SEARCH_TOKEN
+  });
+  const [inputRef, setInputRef] = createSignal<HTMLInputElement | null>(null);
+  const [abortControllerRef, setAbortControllerRef] = createSignal<AbortController | null>(null);
+  const [mode, setMode] = createSignal<"search" | "ask">("search");
+  const [searchResults, setSearchResults] = createSignal<SearchResult[]>([]);
+  const [answer, setAnswer] = createSignal<string>("");
+  const [loading, setLoading] = createSignal(false);
+  const [mouseHoverEnabled, setMouseHoverEnabled] = createSignal(false);
+  const [selectedIndex, setSelectedIndex] = createSignal(0);
+  const [query, setQuery] = createSignal("");
+  const ask = async (): Promise<void> => {
+    let content = "";
+
+    client.useSignal(abortControllerRef()?.signal || null).ask({
+      query: query(),
+      onError(error) {
+        setLoading(false);
+        throw error;
+      },
+      onChunk(chunk) {
+        content += chunk;
+        setAnswer(marked.parse(content, { gfm: true }));
+      },
+      onEnd() {
+        setLoading(false);
+      }
+    });
+    setLoading(false);
+  };
+  const search = debounce(async () => {
+    setSearchResults([]);
+
+    if (abortControllerRef()) abortControllerRef()?.abort();
+
+    if (!query()) {
+      setLoading(false);
+      setSearchResults([]);
+
+      return;
+    }
+
+    setAbortControllerRef(new AbortController());
+
+    try {
+      const search = await client
+        .useSignal(abortControllerRef()?.signal || null)
+        .search({ query: query() });
+
+      setSearchResults(search);
+      setLoading(false);
+
+      return;
+    } catch (error) {
+      const trpcError = error as any;
+      const causeErrorName = trpcError.cause?.name?.toLowerCase() || "";
+
+      if (!causeErrorName.includes("aborterror") && abortControllerRef()?.signal.aborted) {
+        setLoading(false);
+      }
+    }
+  }, 150);
+  const scrollToSelectedResult = (smooth?: boolean): void => {
+    const selectedResultElement = document.querySelector("[data-selected=true]");
+
+    if (selectedResultElement) {
+      scrollIntoView(selectedResultElement, {
+        behavior: smooth ? "smooth" : "instant",
+        block: "center"
+      });
+    }
+  };
+  const goToContentPiece = (searchResult: SearchResult): void => {
+    // eslint-disable-next-line no-console
+    props.setOpened(false);
+
+    const { slug } = searchResult.contentPiece;
+    const [title, subHeading1, subHeading2] = searchResult.breadcrumb;
+
+    window.location.href = `/${slug.startsWith("/") ? slug.slice(1) : slug}#${convertToSlug(
+      subHeading2 || subHeading1
+    )}`;
+  };
+
+  createEffect(
+    on(
+      query,
+      () => {
+        if (mode() === "search") {
+          search.clear();
+          search();
+        }
+      },
+      { defer: true }
+    )
+  );
+  createEffect(
+    on(mode, () => {
+      setMouseHoverEnabled(false);
+      setSelectedIndex(0);
+      setLoading(false);
+      setAnswer("");
+      setSearchResults([]);
+      setQuery("");
+    })
+  );
+  createEffect(() => {
+    if (inputRef() && props.opened && mode()) {
+      setTimeout(() => {
+        inputRef()?.focus();
+      }, 300);
+    }
+  });
+  createEffect(() => {
+    import("tinykeys").then(({ createKeybindingsHandler }) => {
+      const keyShortcutHandler = createKeybindingsHandler({
+        "$mod+KeyK": (event) => {
+          props.setOpened(!props.opened);
+        },
+        "escape": (event) => {
+          if (!props.opened) return;
+
+          props.setOpened(false);
+        },
+        "ArrowUp": (event) => {
+          if (!props.opened) return;
+
+          setMouseHoverEnabled(false);
+          event.preventDefault();
+          event.stopPropagation();
+
+          if (selectedIndex() > 0) {
+            setSelectedIndex(selectedIndex() - 1);
+            scrollToSelectedResult();
+          } else if (mode() === "search") {
+            setSelectedIndex(searchResults().length - 1);
+            scrollToSelectedResult(true);
+          }
+        },
+        "ArrowDown": (event) => {
+          if (!props.opened) return;
+
+          setMouseHoverEnabled(false);
+          event.preventDefault();
+          event.stopPropagation();
+
+          if (mode() === "search" && selectedIndex() < searchResults().length - 1) {
+            setSelectedIndex(selectedIndex() + 1);
+            scrollToSelectedResult();
+          } else {
+            setSelectedIndex(0);
+            scrollToSelectedResult(true);
+          }
+        },
+        "Enter": (event) => {
+          if (!props.opened) return;
+
+          if (mode() === "search") {
+            goToContentPiece(searchResults()[selectedIndex()]);
+          }
+        }
+      });
+
+      window.addEventListener("keydown", keyShortcutHandler);
+      onCleanup(() => {
+        window.removeEventListener("keydown", keyShortcutHandler);
+      });
+    });
+  });
+
+  const getIcon = (): string => {
+    switch (mode()) {
+      case "search":
+        return mdiMagnify;
+      case "ask":
+        return mdiHeadSnowflakeOutline;
+    }
+  };
+  const getLabel = (): string => {
+    switch (mode()) {
+      case "ask":
+        return "Just ask";
+      case "search":
+      default:
+        return "Search";
+    }
+  };
+
+  return (
+    <Overlay
+      opened={props.opened}
+      class="items-start"
+      shadeClass="bg-opacity-50"
+      wrapperClass="mt-32"
+      onOverlayClick={() => {
+        props.setOpened(false);
+      }}
+    >
+      <Card
+        class="w-2xl max-w-[calc(100vw-2rem)] max-h-[calc(100vh-16rem)] flex flex-col p-0 overflow-hidden shadow-xl"
+        color="base"
+        onPointerMove={() => {
+          setMouseHoverEnabled(true);
+        }}
+      >
+        <div class="flex w-full justify-center items-center p-2 border-b-2 dark:border-gray-700">
+          <IconButton path={getIcon()} text="soft" variant="text" badge hover={false} class="m-0" />
+          <Input
+            value={query()}
+            setValue={(value) => {
+              if (mode() === "search") {
+                setLoading(true);
+              }
+
+              setQuery(value);
+            }}
+            ref={setInputRef}
+            tabIndex={0}
+            placeholder={getLabel()}
+            wrapperClass="flex-1 m-0"
+            class="m-0 bg-transparent"
+            onEnter={() => {
+              if (mode() === "ask") {
+                setLoading(true);
+                setAnswer("");
+                ask();
+              }
+            }}
+            onKeyDown={(event) => {
+              if (event.key === "Backspace" && !query()) {
+                setMode("search");
+              }
+            }}
+            adornment={() => (
+              <Show when={mode() === "search" || mode() === "ask"}>
+                <Tooltip text="Ask" side="left" class="-ml-1">
+                  <IconButton
+                    path={mdiCreationOutline}
+                    class="m-0"
+                    text={mode() === "ask" ? "base" : "soft"}
+                    color={mode() === "ask" ? "primary" : "base"}
+                    onClick={() => {
+                      setMode((mode) => (mode === "ask" ? "search" : "ask"));
+                    }}
+                    variant="text"
+                  />
+                </Tooltip>
+              </Show>
+            )}
+          />
+        </div>
+        <div class="relative overflow-hidden">
+          <div class="flex-1 flex flex-col overflow-auto  max-h-[calc(100vh-21.5rem)] scrollbar-sm">
+            <Switch>
+              <Match when={mode() === "search"}>
+                <Show
+                  when={!loading()}
+                  fallback={
+                    <div class="flex justify-center items-center p-4">
+                      <Loader />
+                    </div>
+                  }
+                >
+                  <For
+                    each={searchResults()}
+                    fallback={
+                      <span class="p-4 text-center text-gray-500 dark:text-gray-400">
+                        <Show when={query()} fallback="Type to search">
+                          No results
+                        </Show>
+                      </span>
+                    }
+                  >
+                    {(result, index) => {
+                      return (
+                        <Card
+                          class={clsx(
+                            "flex justify-start items-center py-2 px-3 m-0 rounded-none border-none",
+                            index() === selectedIndex() &&
+                              "bg-gray-300 dark:bg-gray-700 cursor-pointer",
+                            index() !== selectedIndex() && "bg-transparent"
+                          )}
+                          color="base"
+                          onClick={() => {
+                            goToContentPiece(result);
+                          }}
+                          onPointerEnter={() => {
+                            if (!mouseHoverEnabled()) return;
+
+                            setSelectedIndex(index());
+                          }}
+                        >
+                          <div class="flex w-full">
+                            <Icon
+                              path={mdiFileDocumentOutline}
+                              class="h-6 w-6 mr-2 justify-start items-center"
+                            />
+                            <div class="flex flex-col justify-start flex-1">
+                              <p class="flex items-center justify-start flex-wrap font-semibold">
+                                <For each={result.breadcrumb}>
+                                  {(breadcrumb, index) => {
+                                    return (
+                                      <>
+                                        <Show when={index()}>
+                                          <Icon
+                                            path={mdiChevronRight}
+                                            class="flex-inline h-5 w-5 text-gray-500 dark:text-gray-400"
+                                          />
+                                        </Show>
+                                        {breadcrumb}
+                                      </>
+                                    );
+                                  }}
+                                </For>
+                              </p>
+                              <p class="prose flex-1 text-sm clamp-2 whitespace-pre-wrap text-gray-500 dark:text-gray-400">
+                                {result.content}
+                              </p>
+                            </div>
+                          </div>
+                        </Card>
+                      );
+                    }}
+                  </For>
+                </Show>
+              </Match>
+              <Match when={mode() === "ask"}>
+                <Show
+                  when={answer()}
+                  fallback={
+                    <Show
+                      when={!loading()}
+                      fallback={
+                        <div class="flex justify-center items-center p-4">
+                          <Loader />
+                        </div>
+                      }
+                    >
+                      <span class="p-4 text-center text-gray-500 dark:text-gray-400">
+                        What do you want to know?
+                      </span>
+                    </Show>
+                  }
+                >
+                  <Card
+                    class={clsx(
+                      "flex flex-col items-center py-2 px-3 m-0 rounded-none border-none"
+                    )}
+                    color="base"
+                  >
+                    <div
+                      class="flex flex-col w-full prose whitespace-pre-wrap"
+                      innerHTML={answer()}
+                    />
+                    <Show when={!loading()}>
+                      <IconButton
+                        color="contrast"
+                        text="soft"
+                        size="small"
+                        badge
+                        class="mt-4"
+                        path={mdiInformationOutline}
+                        label="The information produced may be inaccurate."
+                      />
+                    </Show>
+                  </Card>
+                </Show>
+              </Match>
+            </Switch>
+          </div>
+        </div>
+        <div class="border-t-2 dark:border-gray-700 px-2 py-1 flex gap-2 bg-gray-100 dark:bg-gray-800">
+          <div class="hidden md:flex gap-2">
+            <IconButton
+              path={mdiSwapVertical}
+              hover={false}
+              badge
+              label="Select"
+              size="small"
+              variant="text"
+              text="soft"
+            />
+            <IconButton
+              path={mdiKeyboardReturn}
+              hover={false}
+              badge
+              label="Open"
+              size="small"
+              variant="text"
+              text="soft"
+            />
+            <IconButton
+              path={mdiKeyboardEsc}
+              hover={false}
+              badge
+              label="Close"
+              size="small"
+              variant="text"
+              text="soft"
+            />
+          </div>
+          <div class="flex-1" />
+          <Button
+            size="small"
+            variant="text"
+            color={mode() === "ask" ? "primary" : "base"}
+            text={mode() === "ask" ? "base" : "soft"}
+            onClick={() => {
+              setMode((mode) => (mode === "search" ? "ask" : "search"));
+            }}
+          >
+            Ask a question
+          </Button>
+        </div>
+      </Card>
+    </Overlay>
+  );
+};
+const SearchPaletteProvider: ParentComponent = (props) => {
+  const [opened, setOpened] = createSignal(false);
+
+  createEffect(() => {
+    if (opened()) {
+      document.body.style.overflow = "hidden";
+    } else {
+      document.body.style.overflow = "auto";
+    }
+  });
+
+  return (
+    <SearchPaletteContext.Provider
+      value={{
+        opened,
+        setOpened
+      }}
+    >
+      {props.children}
+      <SearchPalette opened={opened()} setOpened={setOpened} />
+    </SearchPaletteContext.Provider>
+  );
+};
+const useSearchPalette = (): SearchPaletteContextData => {
+  return useContext(SearchPaletteContext)!;
+};
+
+export { SearchPaletteProvider, useSearchPalette };

--- apps/docs/src/components/fragments/side-bar.tsx ---
@@ -1,50 +1,40 @@
-import { mdiMenu, mdiClose, mdiGithub, mdiChevronDown, mdiCodeJson } from "@mdi/js";
+import { mdiMenu, mdiClose, mdiChevronDown } from "@mdi/js";
 import clsx from "clsx";
-import { Component, For, JSX, createSignal } from "solid-js";
+import { Component, For, JSX, createEffect, createSignal } from "solid-js";
 import { menuOpened, setMenuOpened } from "#lib/state";
 import { Card, Button, IconButton } from "#components/primitives";
-import { discordIcon } from "#assets/icons";
 import { logoIcon } from "#assets/icons/logo";
 
 interface SideBarProps {
-  menu: Array<{
+  currentSection: string;
+  sections: Array<{
     label: string;
-    menu: Array<{ label: string; link: string }>;
+    icon: string;
+    link: string;
+    id: string;
   }>;
+  menu: Record<
+    string,
+    Array<{
+      label: string;
+      menu: Array<{ label: string; link?: string; menu?: Array<{ label: string; link: string }> }>;
+    }>
+  >;
   currentPath: string;
 }
-
-const externalLinks = [
-  {
-    label: "GitHub",
-    icon: mdiGithub,
-    href: "https://github.com/vriteio/vrite"
-  },
-  {
-    label: "Discord",
-    icon: discordIcon,
-    href: "https://discord.gg/yYqDWyKnqE"
-  },
-  {
-    label: "Vrite Cloud",
-    icon: logoIcon,
-    href: "https://app.vrite.io"
-  },
-  {
-    label: "API Reference",
-    icon: mdiCodeJson,
-    href: "https://generator.swagger.io/?url=https://api.vrite.io/swagger.json#"
-  }
-];
-const SideBarNestedMenu: Component<{
-  menu: Array<{ label: string; link: string; menu?: Array<{ label: string; link: string }> }>;
+interface SideBarNestedMenuProps {
+  menu: Array<{ label: string; link?: string; menu?: Array<{ label: string; link: string }> }>;
   currentPath: string;
   children: JSX.Element;
-}> = (props) => {
+  openedByDefault?: boolean;
+}
+
+const SideBarNestedMenu: Component<SideBarNestedMenuProps> = (props) => {
   const [opened, setOpened] = createSignal(
-    props.menu.filter((item) => {
-      return props.currentPath.includes(item.link);
-    }).length > 0
+    props.openedByDefault ||
+      props.menu.filter((item) => {
+        return item.link && props.currentPath.includes(item.link);
+      }).length > 0
   );
 
   return (
@@ -87,7 +77,7 @@ const SideBarNestedMenu: Component<{
               }
 
               const active = (): boolean => {
-                return props.currentPath.includes(item.link);
+                return Boolean(item.link && props.currentPath.includes(item.link));
               };
 
               return (
@@ -109,6 +99,14 @@ const SideBarNestedMenu: Component<{
   );
 };
 const SideBar: Component<SideBarProps> = (props) => {
+  createEffect(() => {
+    if (menuOpened()) {
+      document.body.style.overflow = "hidden";
+    } else {
+      document.body.style.overflow = "auto";
+    }
+  });
+
   return (
     <>
       <div class={clsx("h-full fixed top-0 left-0 z-1", "pl-[max(0px,calc((100%-1536px)/2))]")}>
@@ -117,7 +115,7 @@ const SideBar: Component<SideBarProps> = (props) => {
             "top-0 h-full z-50 min-w-80 w-full md:max-w-80 m-0 bg-gray-100 dark:bg-gray-900",
             "flex-col gap-2 justify-start items-start border-0 md:border-r-2 rounded-none flex fixed md:relative",
             "transform md:transition-transform duration-300 ease-in-out scrollbar-sm-contrast overflow-auto",
-            menuOpened() ? "" : "translate-y-full md:translate-y-0"
+            menuOpened() ? "" : "translate-y-[100vh] md:translate-y-0"
           )}
         >
           <div class="flex items-center justify-start px-1 pb-4 pt-2">
@@ -135,31 +133,35 @@ const SideBar: Component<SideBarProps> = (props) => {
             </span>
           </div>
           <div class="flex flex-col gap-2 pl-1 w-full py-4">
-            <For each={externalLinks}>
-              {(link) => {
+            <For each={props.sections}>
+              {(section) => {
                 return (
                   <a
                     class="flex justify-start items-center group w-full cursor-pointer"
-                    target="_blank"
-                    href={link.href}
+                    target={section.link.startsWith("http") ? "_blank" : "_self"}
+                    href={section.link}
                   >
                     <IconButton
-                      path={link.icon}
+                      path={section.icon}
                       class="m-0 group-hover:bg-gray-300 dark:group-hover:bg-gray-700 h-8 w-8"
                       iconProps={{ class: "h-5 w-5" }}
-                      color="contrast"
-                      text="soft"
+                      color={section.id === props.currentSection ? "primary" : "contrast"}
+                      text={section.id === props.currentSection ? "primary" : "soft"}
                     />
-                    <span class=" ml-2 text-gray-500 dark:text-gray-400">{link.label}</span>
+                    <span class=" ml-2 text-gray-500 dark:text-gray-400">{section.label}</span>
                   </a>
                 );
               }}
             </For>
           </div>
-          <For each={props.menu}>
+          <For each={props.menu[props.currentSection]}>
             {(menuItem) => {
               return (
-                <SideBarNestedMenu currentPath={props.currentPath} menu={menuItem.menu}>
+                <SideBarNestedMenu
+                  currentPath={props.currentPath}
+                  menu={menuItem.menu}
+                  openedByDefault
+                >
                   <Button
                     variant="text"
                     class="justify-start w-full font-bold m-0"

--- apps/docs/src/components/layouts/default.astro ---
@@ -1,35 +1,107 @@
 ---
-import { Header, BaseHead, SideBar, SVGDefs, OnThisPage } from "#components/fragments";
+import { Header, BaseHead, SideBar, SVGDefs, OnThisPage, Footer } from "#components/fragments";
 import type { MarkdownHeading } from "astro";
 import menu from "./menu.json";
+import { Button } from "#components/primitives";
+import { mdiBookOpenBlankVariant, mdiConsoleLine, mdiTextBoxMultiple } from "@mdi/js";
 
 const image = "https://docs.vrite.io/meta-image.png";
 const title = "Vrite － developer content platform";
 const description =
   "Open-Source, collaborative developer content platform for documentation, technical blogs, and more.";
+const flattenMenu = (
+  menu: Array<{
+    label: string;
+    link?: string;
+    menu?: Array<{ label: string; link: string }>;
+  }>,
+  section: string,
+  labels: string[]
+): Array<{ label: string; link: string; section: string; labels: string[] }> => {
+  return menu.flatMap((item) => {
+    if (item.link) {
+      return [{ label: item.label, link: item.link, section, labels: [...labels, item.label] }];
+    }
+    if (item.menu) {
+      return flattenMenu(item.menu, section, [...labels, item.label]);
+    }
+    return [];
+  });
+};
+const sections = [
+  {
+    label: "Documentation",
+    link: "/usage-guide/getting-started",
+    icon: mdiBookOpenBlankVariant,
+    id: "docs"
+  },
+  {
+    label: "API reference",
+    link: "https://generator.swagger.io/?url=https://api.vrite.io/swagger.json",
+    icon: mdiConsoleLine,
+    id: "api"
+  }
+  /*{
+    label: "Recipes",
+    link: "/self-hosting/docker",
+    icon: mdiTextBoxMultiple,
+    id: "recipes"
+  }*/
+];
+const flatMenu = [
+  ...flattenMenu(menu.docs, "docs", []),
+  ...flattenMenu(menu.recipes, "recipes", [])
+];
+const currentEntry = flatMenu.find((item) => item.link === Astro.url.pathname);
+const nextEntry = currentEntry ? flatMenu[flatMenu.indexOf(currentEntry) + 1] : null;
+const prevEntry = currentEntry ? flatMenu[flatMenu.indexOf(currentEntry) - 1] : null;
 
 type Props = {
   headings: MarkdownHeading[];
   title: string;
+  description?: string;
 };
 ---
 
 <!DOCTYPE html>
 <html lang="en">
   <head>
-    <BaseHead description={description} title={title} image={image} />
+    <BaseHead
+      description={Astro.props.description || description}
+      title={Astro.props.title ? `${Astro.props.title} | Vrite Documentation` : title}
+      image={image}
+    />
   </head>
   <body class="overflow-x-hidden overscroll-none">
     <SVGDefs />
     <main class="flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-800">
       <div class="flex-1 flex justify-center items-center flex-1 w-full max-w-screen-2xl relative">
-        <SideBar menu={menu} currentPath={Astro.url.pathname} client:load />
-        <div class="flex overflow-hidden w-full relative h-full">
-          <div class="flex-1 flex overflow-y-auto overflow-x-hidden justify-center" id="container">
+        <Header client:load />
+        <SideBar
+          menu={menu}
+          sections={sections}
+          currentSection={currentEntry?.section || "docs"}
+          currentPath={Astro.url.pathname}
+          client:load
+        />
+        <div class="flex overflow-hidden w-full relative h-full pt-12">
+          <div
+            class="flex-1 flex overflow-y-auto overflow-x-hidden justify-center min-h-[calc(100vh-3rem)]"
+            id="container"
+          >
             <div
-              class="flex-1 prose max-w-screen-md w-full text-lg px-4 pt-4 pb-24 h-fit xl:w-[calc(100%-15rem)]"
+              class="flex-1 prose max-w-screen-md w-full text-lg px-4 md:px-8 pt-4 pb-24 h-fit xl:w-[calc(100%-15rem)]"
             >
+              {
+                (currentEntry?.labels.length || 0) > 1 && (
+                  <Button badge color="primary" variant="text" class="m-0 pl-1 py-0" hover={false}>
+                    {currentEntry?.labels.at(-2)}
+                  </Button>
+                )
+              }
+              <h1>{Astro.props.title}</h1>
               <slot />
+              <Footer nextEntry={nextEntry} previousEntry={prevEntry} />
             </div>
             <OnThisPage headings={Astro.props.headings} client:load />
           </div>

--- apps/docs/src/components/layouts/menu.json ---
@@ -1,53 +1,60 @@
-[
-  {
-    "label": "Usage Guide",
-    "menu": [
-      {
-        "label": "Getting Started",
-        "link": "/usage-guide/getting-started"
-      },
-      {
-        "label": "Managing Content with Kanban",
-        "link": "/usage-guide/kanban-dashboard"
-      },
-      {
-        "label": "Managing metadata",
-        "link": "/usage-guide/metadata"
-      },
-      {
-        "label": "Writing in the Vrite Editor",
-        "link": "/usage-guide/content-editor"
-      },
-      {
-        "label": "Configuring Vrite",
-        "link": "/usage-guide/configuring-vrite"
-      },
-      {
-        "label": "Publishing content",
-        "link": "/usage-guide/publishing"
-      }
-    ]
-  },
-  {
-    "label": "JavaScript SDK",
-    "menu": [
-      {
-        "label": "Introduction",
-        "link": "/javascript-sdk/javascript-sdk"
-      }
-    ]
-  },
-  {
-    "label": "Self-Hosting",
-    "menu": [
-      {
-        "label": "Docker",
-        "link": "/self-hosting/docker"
-      },
-      {
-        "label": "Configuration",
-        "link": "/self-hosting/configuration"
-      }
-    ]
-  }
-]
+{
+  "docs": [
+    {
+      "label": "Usage Guide",
+      "menu": [
+        {
+          "label": "Getting Started",
+          "link": "/usage-guide/getting-started"
+        },
+        {
+          "label": "Managing Content with Kanban",
+          "link": "/usage-guide/kanban-dashboard"
+        },
+        {
+          "label": "Managing metadata",
+          "link": "/usage-guide/metadata"
+        },
+        {
+          "label": "Writing in the Vrite Editor",
+          "link": "/usage-guide/content-editor"
+        },
+        {
+          "label": "Configuring Vrite",
+          "link": "/usage-guide/configuring-vrite"
+        },
+        {
+          "label": "Publishing content",
+          "link": "/usage-guide/publishing"
+        },
+        {
+          "label": "Vrite Extensions",
+          "link": "/usage-guide/vrite-extensions"
+        }
+      ]
+    },
+    {
+      "label": "JavaScript SDK",
+      "menu": [
+        {
+          "label": "Introduction",
+          "link": "/javascript-sdk/introduction"
+        }
+      ]
+    },
+    {
+      "label": "Self-Hosting",
+      "menu": [
+        {
+          "label": "Docker",
+          "link": "/self-hosting/docker"
+        },
+        {
+          "label": "Configuration",
+          "link": "/self-hosting/configuration"
+        }
+      ]
+    }
+  ],
+  "recipes": []
+}

--- apps/docs/src/content/config.ts ---
@@ -1,10 +1,22 @@
 import { z, defineCollection } from "astro:content";
 
 const docsCollection = defineCollection({
-  type: "content"
+  type: "content",
+  schema: z.object({
+    title: z.string().optional(),
+    description: z.string().optional()
+  })
+});
+const recipesCollection = defineCollection({
+  type: "content",
+  schema: z.object({
+    title: z.string().optional(),
+    description: z.string().optional()
+  })
 });
 const collections = {
-  docs: docsCollection
+  docs: docsCollection,
+  recipes: recipesCollection
 };
 
 export { collections };

--- apps/docs/src/content/docs/javascript-sdk/javascript-sdk.md ---
@@ -1,3 +1,8 @@
+---
+title: "Introduction"
+slug: "javascript-sdk/introduction"
+---
+
 [Vrite JavaScript SDK](https://github.com/vriteio/vrite/tree/main/packages/sdk/javascript) is a one-stop-shop when building any kind of Vrite-powered website or web app.
 
 Currently it includes the following parts:

--- apps/docs/src/content/docs/self-hosting/configuration.md ---
@@ -1,3 +1,8 @@
+---
+title: "Configuring Self-Hosted Vrite"
+slug: "self-hosting/configuration"
+---
+
 To properly host Vrite, you first have to configure a couple of environment variables. This guide aims to give you an overview of the available options.
 
 ## Security

--- apps/docs/src/content/docs/self-hosting/docker.md ---
@@ -1,3 +1,8 @@
+---
+title: "Self-Hosting Vrite with Docker"
+slug: "self-hosting/docker"
+---
+
 Vrite aims to provide the best and most accessible technical writing experience. To do so, we provide both a ready, [easy-to-use “Vrite Cloud” instance](https://app.vrite.io/), as well as an option for you to **self-host Vrite** on your own servers.
 
 The recommended way to self-host Vrite is with [Docker](https://docs.docker.com/engine/install/) and [Docker Compose](https://docs.docker.com/compose/install/) - both of which you need to have installed on your machine.

--- apps/docs/src/content/docs/usage-guide/configuring-vrite.md ---
@@ -1,3 +1,8 @@
+---
+title: "Configuring Vrite"
+slug: "usage-guide/configuring-vrite"
+---
+
 Everything related to configuring Vrite can be done from the settings side panel. From managing API tokens to customizing the editing experience — all can be managed in the settings.
 
 It’s worth noting that there are 2 categories of settings in Vrite:

--- apps/docs/src/content/docs/usage-guide/content-editor.md ---
@@ -1,3 +1,8 @@
+---
+title: "Writing in Vrite Editor"
+slug: "/usage-guide/content-editor"
+---
+
 The content editor is the core part of Vrite — this is where you can create your next technical masterpiece. And, thanks to all the features, formatting options, and content blocks Vrite supports - it should be a breeze!
 
 ## Editing Menus

--- apps/docs/src/content/docs/usage-guide/getting-started.md ---
@@ -1,3 +1,8 @@
+---
+title: "Getting Started"
+slug: "/usage-guide/getting-started"
+---
+
 **Vrite** (Public Beta) is a headless CMS, made with technical, programming-related content in mind. Combining great project management frameworks like Kanban with a state-of-the-art WYSIWYG editor and support for real-time collaboration, Vrite is a CMS unlike any other.
 
 ## Vrite’s Features

--- apps/docs/src/content/docs/usage-guide/kanban-dashboard.md ---
@@ -1,3 +1,8 @@
+---
+title: "Managing Content in Kanban"
+slug: "/usage-guide/kanban-dashboard"
+---
+
 Managing content using traditional CMS tools is hard. Basic lists or tables just don’t cut it. It's especially difficult when working in teams or depending on a complex content production pipeline. You end up using many different tools, switching and copy-pasting between them, experiencing degraded UX, and losing time.
 
 That's why Vrite approaches content management differently — by implementing a **Kanban dashboard** many developers and project managers are familiar with and enjoy using.

--- apps/docs/src/content/docs/usage-guide/metadata.md ---
@@ -1,3 +1,8 @@
+---
+title: "Managing Metadata"
+slug: "/usage-guide/metadata"
+---
+
 After the actual content, **metadata** is probably some of the most important information you have to manage in your CMS. In Vrite, metadata — part of a content piece — can be managed from the **metadata side panel**.
 
 ## Metadata Side Panel

--- apps/docs/src/content/docs/usage-guide/publishing.md ---
@@ -1,3 +1,8 @@
+---
+title: "Publishing Content"
+slug: "/usage-guide/publishing"
+---
+
 With Vrite’s unique features like Kanban-based content management, the actual publishing flow is quite unique. All you have to do to publish a piece can be just drag and drop.
 
 ## Dedicated Content Group

--- apps/docs/src/content/docs/usage-guide/vrite-extensions.md ---
@@ -1,3 +1,8 @@
+---
+title: "Vrite Extensions"
+slug: "/usage-guide/vrite-extensions"
+---
+
 Vrite Extensions are meant to make Vrite both more customizable and easier to use. With direct access to Vrite API and the ability to extend Vrite’s UI, they have the ability to vastly improve your experience with Vrite.
 
 The Extensions specification and related APIs are in the early stages and we continue to stabilize and improve them. The goal is to create a platform that all users can build on. However, for now, only first-party extensions are available, which include:

--- apps/docs/src/content/recipes/test.mdx ---
@@ -0,0 +1,6 @@
+---
+title: "Content Pieces API"
+slug: "/recipes/content-pieces"
+---
+
+Content

--- apps/docs/src/env.d.ts ---
@@ -1,2 +1,9 @@
 /// <reference path="../.astro/types.d.ts" />
 /// <reference types="astro/client" />
+interface ImportMetaEnv {
+  readonly PUBLIC_VRITE_SEARCH_TOKEN: string;
+}
+
+interface ImportMeta {
+  readonly env: ImportMetaEnv;
+}

--- apps/docs/src/pages/[...slug].astro ---
@@ -13,14 +13,21 @@ const { Content, headings } = await entry.render();
 
 export const prerender = true;
 export async function getStaticPaths() {
-  const blogEntries = await getCollection("docs");
-  return blogEntries.map((entry) => ({
-    params: { slug: entry.slug },
-    props: { entry }
-  }));
+  const docsEntries = await getCollection("docs");
+  const recipesEntries = await getCollection("recipes");
+  return [
+    ...docsEntries.map((entry) => ({
+      params: { slug: entry.slug },
+      props: { entry }
+    })),
+    ...recipesEntries.map((entry) => ({
+      params: { slug: entry.slug },
+      props: { entry }
+    }))
+  ];
 }
 ---
 
-<DefaultLayout headings={headings} title={entry.data.title}>
+<DefaultLayout headings={headings} title={entry.data.title} description={entry.data.description}>
   <Content />
 </DefaultLayout>

--- apps/docs/src/styles/base.css ---
@@ -176,3 +176,31 @@ h2 {
     scrollbar-color: #1e293b #0f172a;
   }
 }
+
+.clamp-1 {
+  overflow: hidden;
+  text-overflow: ellipsis;
+  display: -webkit-box;
+  overflow-wrap: break-word;
+  -webkit-line-clamp: 1;
+  line-clamp: 1;
+  -webkit-box-orient: vertical;
+}
+.clamp-2 {
+  overflow: hidden;
+  text-overflow: ellipsis;
+  display: -webkit-box;
+  overflow-wrap: break-word;
+  -webkit-line-clamp: 2;
+  line-clamp: 2;
+  -webkit-box-orient: vertical;
+}
+.clamp-3 {
+  overflow: hidden;
+  text-overflow: ellipsis;
+  display: -webkit-box;
+  overflow-wrap: break-word;
+  -webkit-line-clamp: 3;
+  line-clamp: 3;
+  -webkit-box-orient: vertical;
+}

--- apps/docs/src/styles/styles.scss ---
@@ -6,14 +6,23 @@
     @apply border-transparent dark:border-transparent;
   }
 }
-
+.font-jetbrains {
+  font-family: "JetBrainsMonoVariable", monospace;
+}
 kbd {
   font-family: "JetBrainsMonoVariable", monospace;
 }
 #side-panel > div {
   height: 100%;
 }
-
+svg > path {
+  fill: inherit;
+}
+.grid-reset-margin {
+  & > * {
+    margin: 0;
+  }
+}
 .resize-cursor {
   cursor: ew-resize;
   cursor: col-resize;
@@ -101,64 +110,23 @@ kbd {
 
   font-kerning: none;
   :where(h1, h2, h3, h4, h5, h6):not(:where(.not-prose, .not-prose *)) {
-    &::before,
-    &::before,
-    &::before,
-    &::before,
-    &::before,
-    &::before,
-    .open-slash-menu > button {
-      @apply font-bold dark:bg-gray-900 dark:border-gray-700;
-      position: absolute;
-      left: -2.5rem;
-      background: #f9fafb;
-      height: 2rem;
-      width: 2rem;
-      justify-content: center;
-      display: flex;
-      align-items: center;
-      color: #6b7280;
-      border-radius: 25%;
-      font-size: 1rem;
-      line-height: 1rem;
-      text-align: center;
-      top: 50%;
-      transform: translateY(-50%);
-      //border: 2px solid #e5e7eb;
-      @apply border-2;
-      opacity: 1;
-    }
+    @apply relative;
+    margin: 0 !important;
   }
-
-  h1,
-  h2,
-  h3,
-  h4,
-  h5,
-  h6,
-  .open-slash-menu {
-    @apply m-0 relative;
-    & > button {
-      @apply mt-4;
+  :where(h2, h3):not(:where(.not-prose, .not-prose *)) {
+    @apply hover:cursor-pointer;
+    &::before {
+      @apply hidden md:block absolute pr-6 -left-6 transform scale-90 text-gray-500 dark:text-gray-400 opacity-0;
+      content: "#";
     }
-  }
-  .open-slash-menu {
-    button {
-      font-size: 1.25em;
-      line-height: 1.25em;
-      font-weight: 600;
+    &:hover::before {
+      @apply opacity-100;
     }
   }
-  :where(h4):not(:where(.not-prose, .not-prose *)) {
-    line-height: 2.1rem;
-  }
-  :where(h5):not(:where(.not-prose, .not-prose *)) {
-    line-height: 2.1rem;
-  }
-  :where(h6):not(:where(.not-prose, .not-prose *)) {
-    font-size: 0.875em;
-    line-height: 2.1rem;
+  h3:not(:where(.not-prose, .not-prose *))::before {
+    @apply pr-5 -left-5;
   }
+
   :where(ul p, ol p):not(:where(.not-prose, .not-prose *)) {
     @apply m-0;
   }

--- apps/web/package.json ---
@@ -58,7 +58,7 @@
     "dompurify": "^3.0.5",
     "marked": "^5.1.2",
     "minisearch": "^6.1.0",
-    "monaco-editor": "^0.40.0",
+    "monaco-editor": "^0.43.0",
     "nanoevents": "^8.0.0",
     "nanoid": "^4.0.2",
     "prettier": "^3.0.2",

--- apps/web/public/sandbox.js ---
@@ -143,8 +143,8 @@
           var string = "";
           var bitsNeeded = this.bitsNeeded;
           var codePoint = this.codePoint;
-          for (var i2 = 0; i2 < octets.length; i2 += 1) {
-            var octet = octets[i2];
+          for (var i = 0; i < octets.length; i += 1) {
+            var octet = octets[i];
             if (bitsNeeded !== 0) {
               if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {
                 bitsNeeded = 0;
@@ -417,8 +417,8 @@
         function HeadersPolyfill(all) {
           var map = /* @__PURE__ */ Object.create(null);
           var array = all.split("\r\n");
-          for (var i2 = 0; i2 < array.length; i2 += 1) {
-            var line = array[i2];
+          for (var i = 0; i < array.length; i += 1) {
+            var line = array[i];
             var parts = line.split(": ");
             var name = parts.shift();
             var value = parts.join(": ");
@@ -539,8 +539,8 @@
           var typeListeners = this._listeners[event.type];
           if (typeListeners != void 0) {
             var length = typeListeners.length;
-            for (var i2 = 0; i2 < length; i2 += 1) {
-              var listener = typeListeners[i2];
+            for (var i = 0; i < length; i += 1) {
+              var listener = typeListeners[i];
               try {
                 if (typeof listener.handleEvent === "function") {
                   listener.handleEvent(event);
@@ -562,8 +562,8 @@
             listeners[type] = typeListeners;
           }
           var found = false;
-          for (var i2 = 0; i2 < typeListeners.length; i2 += 1) {
-            if (typeListeners[i2] === listener) {
+          for (var i = 0; i < typeListeners.length; i += 1) {
+            if (typeListeners[i] === listener) {
               found = true;
             }
           }
@@ -577,9 +577,9 @@
           var typeListeners = listeners[type];
           if (typeListeners != void 0) {
             var filtered = [];
-            for (var i2 = 0; i2 < typeListeners.length; i2 += 1) {
-              if (typeListeners[i2] !== listener) {
-                filtered.push(typeListeners[i2]);
+            for (var i = 0; i < typeListeners.length; i += 1) {
+              if (typeListeners[i] !== listener) {
+                filtered.push(typeListeners[i]);
               }
             }
             if (filtered.length === 0) {
@@ -722,10 +722,10 @@
           var onProgress = function(textChunk) {
             if (currentState === OPEN) {
               var n = -1;
-              for (var i2 = 0; i2 < textChunk.length; i2 += 1) {
-                var c = textChunk.charCodeAt(i2);
+              for (var i = 0; i < textChunk.length; i += 1) {
+                var c = textChunk.charCodeAt(i);
                 if (c === "\n".charCodeAt(0) || c === "\r".charCodeAt(0)) {
-                  n = i2;
+                  n = i;
                 }
               }
               var chunk = (n !== -1 ? textBuffer : "") + textChunk.slice(0, n + 1);
@@ -879,8 +879,8 @@
             var requestURL = url;
             if (url.slice(0, 5) !== "data:" && url.slice(0, 5) !== "blob:") {
               if (lastEventId !== "") {
-                var i2 = url.indexOf("?");
-                requestURL = i2 === -1 ? url : url.slice(0, i2 + 1) + url.slice(i2 + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p, paramName) {
+                var i = url.indexOf("?");
+                requestURL = i === -1 ? url : url.slice(0, i + 1) + url.slice(i + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p, paramName) {
                   return paramName === lastEventIdQueryParameterName ? "" : p;
                 });
                 requestURL += (url.indexOf("?") === -1 ? "?" : "&") + lastEventIdQueryParameterName + "=" + encodeURIComponent(lastEventId);
@@ -957,7 +957,7 @@
     "../../node_modules/.pnpm/unfetch@4.2.0/node_modules/unfetch/dist/unfetch.js"(exports, module) {
       module.exports = function(e, n) {
         return n = n || {}, new Promise(function(t, r) {
-          var s = new XMLHttpRequest(), o = [], u2 = [], i2 = {}, a = function() {
+          var s = new XMLHttpRequest(), o = [], u2 = [], i = {}, a = function() {
             return { ok: 2 == (s.status / 100 | 0), statusText: s.statusText, status: s.status, url: s.responseURL, text: function() {
               return Promise.resolve(s.responseText);
             }, json: function() {
@@ -969,14 +969,14 @@
             }, entries: function() {
               return u2;
             }, get: function(e2) {
-              return i2[e2.toLowerCase()];
+              return i[e2.toLowerCase()];
             }, has: function(e2) {
-              return e2.toLowerCase() in i2;
+              return e2.toLowerCase() in i;
             } } };
           };
           for (var l2 in s.open(n.method || "get", e, true), s.onload = function() {
             s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e2, n2, t2) {
-              o.push(n2 = n2.toLowerCase()), u2.push([n2, t2]), i2[n2] = i2[n2] ? i2[n2] + "," + t2 : t2;
+              o.push(n2 = n2.toLowerCase()), u2.push([n2, t2]), i[n2] = i[n2] ? i[n2] + "," + t2 : t2;
             }), t(a());
           }, s.onerror = r, s.withCredentials = "include" == n.credentials, n.headers)
             s.setRequestHeader(l2, n.headers[l2]);
@@ -996,74 +996,83 @@
   // ../../packages/sdk/javascript/dist/api.mjs
   var api_exports = {};
   __export(api_exports, {
-    createClient: () => B
+    createClient: () => M
   });
-  var import_eventsource, i, w, $, U, f, g, L, d, S, D, O, E, R, C, x, m, I, h, j, v, k, q, l, A, u, z, B;
+  var import_eventsource, l, U, E, S, f, h, L, m, D, O, R, T, x, C, I, u, v, k, j, q, G, A, b, z, y, B, M;
   var init_api = __esm({
     "../../packages/sdk/javascript/dist/api.mjs"() {
       import_eventsource = __toESM(require_browser(), 1);
-      i = "/content-groups";
-      w = (t) => ({ get: (e) => t("GET", `${i}`, { params: e }), list: (e) => t("GET", `${i}/list`, { params: e }), create: (e) => t("POST", `${i}`, { body: e }), update: (e) => t("PUT", `${i}`, { body: e }), delete: (e) => t("DELETE", `${i}`, { params: e }) });
-      $ = "/content-pieces";
-      U = (t) => ({ get: (e) => t("GET", `${$}`, { params: e }), create: (e) => t("POST", `${$}`, { body: e }), update: (e) => t("PUT", `${$}`, { body: e }), delete: (e) => t("DELETE", `${$}`, { params: e }), list: (e) => t("GET", `${$}/list`, { params: e }) });
+      l = "/content-groups";
+      U = (t) => ({ get: (e) => t("GET", `${l}`, { params: e }), list: (e) => t("GET", `${l}/list`, { params: e }), create: (e) => t("POST", `${l}`, { body: e }), update: (e) => t("PUT", `${l}`, { body: e }), delete: (e) => t("DELETE", `${l}`, { params: e }) });
+      E = "/content-pieces";
+      S = (t) => ({ get: (e) => t("GET", `${E}`, { params: e }), create: (e) => t("POST", `${E}`, { body: e }), update: (e) => t("PUT", `${E}`, { body: e }), delete: (e) => t("DELETE", `${E}`, { params: e }), list: (e) => t("GET", `${E}/list`, { params: e }) });
       f = (t) => {
-        let e = t.baseURL || "https://api.vrite.io", n = t.extensionId || "", c = t.headers || {}, { token: s } = t;
-        return { sendRequest: async (a, p, r) => {
+        let e = t.baseURL || "https://api.vrite.io", c = t.extensionId || "", i = t.headers || {}, $ = null, { token: p } = t;
+        return { sendRequest: async (s, a, n) => {
           try {
-            const { default: o } = await Promise.resolve().then(() => __toESM(require_browser2(), 1)), y = await o(`${e}${p}/?${encodeURI(Object.entries(r?.params || {}).filter(([, b]) => b).map(([b, G]) => `${b}=${G}`).join("&"))}`, { headers: { Authorization: `Bearer ${s}`, Accept: "application/json", ...r?.body ? { "Content-Type": "application/json" } : {}, ...n ? { "X-Vrite-Extension-ID": n } : {}, ...c }, body: r?.body ? JSON.stringify(r.body) : null, method: a });
-            let T = null;
+            const { default: o } = await Promise.resolve().then(() => __toESM(require_browser2(), 1)), d = await o(`${e}${a}/?${encodeURI(Object.entries(n?.params || {}).filter(([, g]) => g).map(([g, w]) => `${g}=${w}`).join("&"))}`, { headers: { Authorization: `Bearer ${p}`, Accept: "application/json", ...n?.body ? { "Content-Type": "application/json" } : {}, ...c ? { "X-Vrite-Extension-ID": c } : {}, ...i }, body: n?.body ? JSON.stringify(n.body) : null, signal: $, method: s });
+            $ = null;
+            let r = null;
             try {
-              if (T = await y.json(), !T)
+              if (r = await d.json(), !r)
                 return;
             } catch {
               return;
             }
-            if (!y.ok)
-              throw T;
-            return T;
+            if (!d.ok)
+              throw r;
+            return r;
           } catch (o) {
             throw console.error(o), o;
           }
-        }, reconfigure: (a) => {
-          e = a.baseURL || e, s = a.token || s, n = a.extensionId || n, c = a.headers || c;
-        }, getConfig: () => ({ baseURL: e, token: s, extensionId: n, headers: c }) };
+        }, reconfigure: (s) => {
+          e = s.baseURL || e, p = s.token || p, c = s.extensionId || c, i = s.headers || i;
+        }, useSignal: (s) => {
+          $ = s;
+        }, getConfig: () => ({ baseURL: e, token: p, extensionId: c, headers: i }), getSignal: () => $ };
       };
-      g = "/user-settings";
-      L = (t) => ({ get: () => t("GET", `${g}`), update: (e) => t("PUT", `${g}`, { body: e }) });
-      d = "/tags";
-      S = (t) => ({ get: (e) => t("GET", `${d}`, { params: e }), update: (e) => t("PUT", `${d}`, { body: e }), create: (e) => t("PUT", `${d}`, { body: e }), delete: (e) => t("DELETE", `${d}`, { params: e }), list: (e) => t("GET", `${d}/list`, { params: e }) });
-      D = "/profile";
-      O = (t) => ({ get: () => t("GET", `${D}`) });
-      E = "/webhooks";
-      R = (t) => ({ get: (e) => t("GET", `${E}`, { params: e }), create: (e) => t("POST", `${E}`, { body: e }), update: (e) => t("PUT", `${E}`, { body: e }), delete: (e) => t("DELETE", `${E}`, { params: e }), list: (e) => t("GET", `${E}/list`, { params: e }) });
+      h = "/user-settings";
+      L = (t) => ({ get: () => t("GET", `${h}`), update: (e) => t("PUT", `${h}`, { body: e }) });
+      m = "/tags";
+      D = (t) => ({ get: (e) => t("GET", `${m}`, { params: e }), update: (e) => t("PUT", `${m}`, { body: e }), create: (e) => t("PUT", `${m}`, { body: e }), delete: (e) => t("DELETE", `${m}`, { params: e }), list: (e) => t("GET", `${m}/list`, { params: e }) });
+      O = "/profile";
+      R = (t) => ({ get: () => t("GET", `${O}`) });
+      T = "/webhooks";
+      x = (t) => ({ get: (e) => t("GET", `${T}`, { params: e }), create: (e) => t("POST", `${T}`, { body: e }), update: (e) => t("PUT", `${T}`, { body: e }), delete: (e) => t("DELETE", `${T}`, { params: e }), list: (e) => t("GET", `${T}/list`, { params: e }) });
       C = "/workspace";
-      x = (t) => ({ get: () => t("GET", `${C}`) });
-      m = "/roles";
-      I = (t) => ({ get: (e) => t("GET", `${m}`, { params: e }), create: (e) => t("POST", `${m}`, { body: e }), update: (e) => t("PUT", `${m}`, { body: e }), delete: (e) => t("DELETE", `${m}`, { params: e }), list: (e) => t("GET", `${m}/list`, { params: e }) });
-      h = "/workspace-settings";
-      j = (t) => ({ get: () => t("GET", `${h}`), update: (e) => t("PUT", `${h}`, { body: e }) });
-      v = (t) => ({ listMembers: (e) => t("GET", "/workspace-memberships/list-members", { params: e }), listWorkspaces: (e) => t("GET", "/workspace-memberships/list-workspaces", { params: e }), create: (e) => t("POST", "/workspace-memberships", { body: e }), update: (e) => t("PUT", "/workspace-memberships", { body: e }), delete: (e) => t("DELETE", "/workspace-memberships", { params: e }) });
-      k = "/extension";
-      q = (t) => ({ get: () => t("GET", `${k}`), updateContentPieceData: (e) => t("POST", `${k}/content-piece-data`, { body: e }) });
-      l = "/variants";
-      A = (t) => ({ create: (e) => t("POST", `${l}`, { body: e }), update: (e) => t("PUT", `${l}`, { body: e }), delete: (e) => t("DELETE", `${l}`, { params: e }), list: () => t("GET", `${l}/list`) });
-      u = "/transformers";
-      z = (t) => ({ create: (e) => t("POST", `${u}`, { body: e }), delete: (e) => t("DELETE", `${u}`, { params: e }), list: () => t("GET", `${u}/list`) });
-      B = (t) => {
-        const { sendRequest: e, reconfigure: n, getConfig: c } = f(t);
-        return { contentGroups: w(e), contentPieces: U(e), tags: S(e), profile: O(e), userSettings: L(e), webhooks: R(e), workspace: x(e), roles: I(e), workspaceSettings: j(e), workspaceMemberships: v(e), extension: q(e), variants: A(e), transformers: z(e), search(s) {
-          return e("GET", "/search", { params: s });
-        }, async ask(s) {
-          let a = "";
-          const p = new import_eventsource.default(`${c().baseURL}/search/ask?query=${encodeURIComponent(s.query)}`, { headers: { Authorization: `Bearer ${c().token}` } });
-          p.addEventListener("error", (r) => {
-            const o = r;
-            return o.message ? s.onError?.(o.message) : (p.close(), s.onEnd?.(a));
-          }), p.addEventListener("message", (r) => {
-            const o = decodeURIComponent(r.data);
-            a += o, s.onChunk?.(o, a);
-          });
-        }, reconfigure: n };
+      I = (t) => ({ get: () => t("GET", `${C}`) });
+      u = "/roles";
+      v = (t) => ({ get: (e) => t("GET", `${u}`, { params: e }), create: (e) => t("POST", `${u}`, { body: e }), update: (e) => t("PUT", `${u}`, { body: e }), delete: (e) => t("DELETE", `${u}`, { params: e }), list: (e) => t("GET", `${u}/list`, { params: e }) });
+      k = "/workspace-settings";
+      j = (t) => ({ get: () => t("GET", `${k}`), update: (e) => t("PUT", `${k}`, { body: e }) });
+      q = (t) => ({ listMembers: (e) => t("GET", "/workspace-memberships/list-members", { params: e }), listWorkspaces: (e) => t("GET", "/workspace-memberships/list-workspaces", { params: e }), create: (e) => t("POST", "/workspace-memberships", { body: e }), update: (e) => t("PUT", "/workspace-memberships", { body: e }), delete: (e) => t("DELETE", "/workspace-memberships", { params: e }) });
+      G = "/extension";
+      A = (t) => ({ get: () => t("GET", `${G}`), updateContentPieceData: (e) => t("POST", `${G}/content-piece-data`, { body: e }) });
+      b = "/variants";
+      z = (t) => ({ create: (e) => t("POST", `${b}`, { body: e }), update: (e) => t("PUT", `${b}`, { body: e }), delete: (e) => t("DELETE", `${b}`, { params: e }), list: () => t("GET", `${b}/list`) });
+      y = "/transformers";
+      B = (t) => ({ create: (e) => t("POST", `${y}`, { body: e }), delete: (e) => t("DELETE", `${y}`, { params: e }), list: () => t("GET", `${y}/list`) });
+      M = (t) => {
+        const { sendRequest: e, reconfigure: c, getConfig: i, getSignal: $, useSignal: p } = f(t), s = { contentGroups: U(e), contentPieces: S(e), tags: D(e), profile: R(e), userSettings: L(e), webhooks: x(e), workspace: I(e), roles: v(e), workspaceSettings: j(e), workspaceMemberships: q(e), extension: A(e), variants: z(e), transformers: B(e), search(a) {
+          return e("GET", "/search", { params: a });
+        }, async ask(a) {
+          let n = "";
+          const o = new import_eventsource.default(`${i().baseURL}/search/ask?query=${encodeURIComponent(a.query)}`, { headers: { Authorization: `Bearer ${i().token}` } });
+          o.addEventListener("error", (d) => {
+            const r = d;
+            return r.message ? a.onError?.(r.message) : (o.close(), a.onEnd?.(n));
+          }), o.addEventListener("message", (d) => {
+            const r = decodeURIComponent(d.data);
+            n += r, a.onChunk?.(r, n);
+          }), $()?.addEventListener("abort", () => {
+            o.close();
+          }), p(null);
+        }, useSignal(a) {
+          return p(a), s;
+        }, reconfigure(a) {
+          return c(a), s;
+        } };
+        return s;
       };
     }
   });

--- apps/web/src/assets/json/light-theme.json ---
@@ -1,469 +1,37 @@
 {
-  "inherit": false,
-  "base": "vs-dark",
-  "colors": {
-    "focusBorder": "#2188ff",
-    "foreground": "#444d56",
-    "descriptionForeground": "#6a737d",
-    "errorForeground": "#cb2431",
-    "textLink.foreground": "#0366d6",
-    "textLink.activeForeground": "#005cc5",
-    "textBlockQuote.background": "#fafbfc",
-    "textBlockQuote.border": "#e1e4e8",
-    "textCodeBlock.background": "#f6f8fa",
-    "textPreformat.foreground": "#586069",
-    "textSeparator.foreground": "#d1d5da",
-    "button.background": "#159739",
-    "button.foreground": "#ffffff",
-    "button.hoverBackground": "#138934",
-    "checkbox.background": "#fafbfc",
-    "checkbox.border": "#d1d5da",
-    "dropdown.background": "#fafbfc",
-    "dropdown.border": "#e1e4e8",
-    "dropdown.foreground": "#2f363d",
-    "dropdown.listBackground": "#ffffff",
-    "input.background": "#fafbfc",
-    "input.border": "#e1e4e8",
-    "input.foreground": "#2f363d",
-    "input.placeholderForeground": "#959da5",
-    "badge.foreground": "#005cc5",
-    "badge.background": "#dbedff",
-    "progressBar.background": "#2188ff",
-    "titleBar.activeForeground": "#2f363d",
-    "titleBar.activeBackground": "#ffffff",
-    "titleBar.inactiveForeground": "#6a737d",
-    "titleBar.inactiveBackground": "#f6f8fa",
-    "titleBar.border": "#e1e4e8",
-    "activityBar.foreground": "#2f363d",
-    "activityBar.inactiveForeground": "#959da5",
-    "activityBar.background": "#ffffff",
-    "activityBarBadge.foreground": "#ffffff",
-    "activityBarBadge.background": "#2188ff",
-    "activityBar.activeBorder": "#f9826c",
-    "activityBar.border": "#e1e4e8",
-    "sideBar.foreground": "#586069",
-    "sideBar.background": "#f6f8fa",
-    "sideBar.border": "#e1e4e8",
-    "sideBarTitle.foreground": "#2f363d",
-    "sideBarSectionHeader.foreground": "#2f363d",
-    "sideBarSectionHeader.background": "#f6f8fa",
-    "sideBarSectionHeader.border": "#e1e4e8",
-    "list.hoverForeground": "#2f363d",
-    "list.inactiveSelectionForeground": "#2f363d",
-    "list.activeSelectionForeground": "#2f363d",
-    "list.hoverBackground": "#ebf0f4",
-    "list.inactiveSelectionBackground": "#e8eaed",
-    "list.activeSelectionBackground": "#e2e5e9",
-    "list.inactiveFocusBackground": "#dbedff",
-    "list.focusBackground": "#cce5ff",
-    "tree.indentGuidesStroke": "#e1e4e8",
-    "notificationCenterHeader.foreground": "#6a737d",
-    "notificationCenterHeader.background": "#e1e4e8",
-    "notifications.foreground": "#2f363d",
-    "notifications.background": "#fafbfc",
-    "notifications.border": "#e1e4e8",
-    "notificationsErrorIcon.foreground": "#d73a49",
-    "notificationsWarningIcon.foreground": "#e36209",
-    "notificationsInfoIcon.foreground": "#005cc5",
-    "pickerGroup.border": "#e1e4e8",
-    "pickerGroup.foreground": "#2f363d",
-    "quickInput.background": "#fafbfc",
-    "quickInput.foreground": "#2f363d",
-    "statusBar.foreground": "#586069",
-    "statusBar.background": "#ffffff",
-    "statusBar.border": "#e1e4e8",
-    "statusBar.noFolderBackground": "#ffffff",
-    "statusBar.debuggingBackground": "#f9826c",
-    "statusBar.debuggingForeground": "#ffffff",
-    "editorGroupHeader.tabsBackground": "#f6f8fa",
-    "editorGroupHeader.tabsBorder": "#e1e4e8",
-    "editorGroup.border": "#e1e4e8",
-    "tab.activeForeground": "#2f363d",
-    "tab.inactiveForeground": "#6a737d",
-    "tab.inactiveBackground": "#f6f8fa",
-    "tab.activeBackground": "#ffffff",
-    "tab.hoverBackground": "#ffffff",
-    "tab.unfocusedHoverBackground": "#ffffff",
-    "tab.border": "#e1e4e8",
-    "tab.unfocusedActiveBorderTop": "#e1e4e8",
-    "tab.activeBorder": "#ffffff",
-    "tab.unfocusedActiveBorder": "#ffffff",
-    "tab.activeBorderTop": "#f9826c",
-    "breadcrumb.foreground": "#6a737d",
-    "breadcrumb.focusForeground": "#2f363d",
-    "breadcrumb.activeSelectionForeground": "#586069",
-    "breadcrumbPicker.background": "#fafbfc",
-    "editor.foreground": "#24292e",
-    "editor.background": "#f9fafb",
-    "editorWidget.background": "#f3f4f6",
-    "editorWidget.border": "#e5e7eb",
-    "editor.foldBackground": "#fafbfc",
-    "editor.lineHighlightBackground": "#f6f8fa",
-    "editorLineNumber.foreground": "#1b1f234d",
-    "editorLineNumber.activeForeground": "#24292e",
-    "editorIndentGuide.background": "#eff2f6",
-    "editorIndentGuide.activeBackground": "#d7dbe0",
-    "editorWhitespace.foreground": "#d1d5da",
-    "editorCursor.foreground": "#044289",
-    "editor.findMatchBackground": "#ffdf5d",
-    "editor.findMatchHighlightBackground": "#ffdf5d66",
-    "editor.inactiveSelectionBackground": "#0366d611",
-    "editor.selectionBackground": "#0366d625",
-    "editor.selectionHighlightBackground": "#34d05840",
-    "editor.selectionHighlightBorder": "#34d05800",
-    "editor.wordHighlightBackground": "#34d05800",
-    "editor.wordHighlightStrongBackground": "#34d05800",
-    "editor.wordHighlightBorder": "#24943e99",
-    "editor.wordHighlightStrongBorder": "#24943e50",
-    "editorBracketMatch.background": "#34d05840",
-    "editorBracketMatch.border": "#34d05800",
-    "editorGutter.modifiedBackground": "#2188ff",
-    "editorGutter.addedBackground": "#28a745",
-    "editorGutter.deletedBackground": "#d73a49",
-    "diffEditor.insertedTextBackground": "#34d05822",
-    "diffEditor.removedTextBackground": "#d73a4922",
-    "scrollbar.shadow": "#6a737d33",
-    "scrollbarSlider.background": "#959da533",
-    "scrollbarSlider.hoverBackground": "#959da544",
-    "scrollbarSlider.activeBackground": "#959da588",
-    "editorOverviewRuler.border": "#ffffff",
-    "panel.background": "#f6f8fa",
-    "panel.border": "#e1e4e8",
-    "panelTitle.activeBorder": "#f9826c",
-    "panelTitle.activeForeground": "#2f363d",
-    "panelTitle.inactiveForeground": "#6a737d",
-    "panelInput.border": "#e1e4e8",
-    "terminal.foreground": "#586069",
-    "gitDecoration.addedResourceForeground": "#28a745",
-    "gitDecoration.modifiedResourceForeground": "#005cc5",
-    "gitDecoration.deletedResourceForeground": "#d73a49",
-    "gitDecoration.untrackedResourceForeground": "#28a745",
-    "gitDecoration.ignoredResourceForeground": "#959da5",
-    "gitDecoration.conflictingResourceForeground": "#e36209",
-    "gitDecoration.submoduleResourceForeground": "#959da5",
-    "debugToolBar.background": "#ffffff",
-    "editor.stackFrameHighlightBackground": "#fffbdd",
-    "editor.focusedStackFrameHighlightBackground": "#fff5b1",
-    "settings.headerForeground": "#2f363d",
-    "settings.modifiedItemIndicator": "#2188ff",
-    "welcomePage.buttonBackground": "#f6f8fa",
-    "welcomePage.buttonHoverBackground": "#e1e4e8"
-  },
+  "base": "vs",
+  "inherit": true,
   "rules": [
     {
-      "foreground": "#6a737d",
-      "token": "comment"
-    },
-    {
-      "foreground": "#6a737d",
-      "token": "punctuation.definition.comment"
-    },
-    {
-      "foreground": "#6a737d",
-      "token": "string.comment"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "constant"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "entity.name.constant"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "variable.other.constant"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "variable.language"
-    },
-    {
-      "foreground": "#6f42c1",
-      "token": "entity"
-    },
-    {
-      "foreground": "#6f42c1",
-      "token": "entity.name"
-    },
-    {
-      "foreground": "#24292e",
-      "token": "variable.parameter.function"
-    },
-    {
-      "foreground": "#22863a",
-      "token": "entity.name.tag"
-    },
-    {
-      "foreground": "#d73a49",
-      "token": "keyword"
-    },
-    {
-      "foreground": "#d73a49",
-      "token": "storage"
-    },
-    {
-      "foreground": "#d73a49",
-      "token": "storage.type"
-    },
-    {
-      "foreground": "#24292e",
-      "token": "storage.modifier.package"
-    },
-    {
-      "foreground": "#24292e",
-      "token": "storage.modifier.import"
-    },
-    {
-      "foreground": "#24292e",
-      "token": "storage.type.java"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "punctuation.definition.string"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string punctuation.section.embedded source"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "support"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "meta.property-name"
-    },
-    {
-      "foreground": "#e36209",
-      "token": "variable"
-    },
-    {
-      "foreground": "#24292e",
-      "token": "variable.other"
-    },
-    {
-      "fontStyle": "italic",
-      "foreground": "#b31d28",
-      "token": "invalid.broken"
-    },
-    {
-      "fontStyle": "italic",
-      "foreground": "#b31d28",
-      "token": "invalid.deprecated"
-    },
-    {
-      "fontStyle": "italic",
-      "foreground": "#b31d28",
-      "token": "invalid.illegal"
-    },
-    {
-      "fontStyle": "italic",
-      "foreground": "#b31d28",
-      "token": "invalid.unimplemented"
-    },
-    {
-      "fontStyle": "italic underline",
-      "background": "#d73a49",
-      "foreground": "#fafbfc",
-      "content": "^M",
-      "token": "carriage-return"
-    },
-    {
-      "foreground": "#b31d28",
-      "token": "message.error"
-    },
-    {
-      "foreground": "#24292e",
-      "token": "string source"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "string variable"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "source.regexp"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string.regexp"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string.regexp.character-class"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string.regexp constant.character.escape"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string.regexp source.ruby.embedded"
-    },
-    {
-      "foreground": "#032f62",
-      "token": "string.regexp string.regexp.arbitrary-repitition"
-    },
-    {
-      "fontStyle": "bold",
-      "foreground": "#22863a",
-      "token": "string.regexp constant.character.escape"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "support.constant"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "support.variable"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "meta.module-reference"
-    },
-    {
-      "foreground": "#e36209",
-      "token": "punctuation.definition.list.begin.markdown"
-    },
-    {
-      "fontStyle": "bold",
-      "foreground": "#005cc5",
-      "token": "markup.heading"
-    },
-    {
-      "fontStyle": "bold",
-      "foreground": "#005cc5",
-      "token": "markup.heading entity.name"
-    },
-    {
-      "foreground": "#22863a",
-      "token": "markup.quote"
-    },
-    {
-      "fontStyle": "italic",
-      "foreground": "#24292e",
-      "token": "markup.italic"
-    },
-    {
-      "fontStyle": "bold",
-      "foreground": "#24292e",
-      "token": "markup.bold"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "markup.raw"
-    },
-    {
-      "background": "#ffeef0",
-      "foreground": "#b31d28",
-      "token": "markup.deleted"
-    },
-    {
-      "background": "#ffeef0",
-      "foreground": "#b31d28",
-      "token": "meta.diff.header.from-file"
-    },
-    {
-      "background": "#ffeef0",
-      "foreground": "#b31d28",
-      "token": "punctuation.definition.deleted"
-    },
-    {
-      "background": "#f0fff4",
-      "foreground": "#22863a",
-      "token": "markup.inserted"
-    },
-    {
-      "background": "#f0fff4",
-      "foreground": "#22863a",
-      "token": "meta.diff.header.to-file"
-    },
-    {
-      "background": "#f0fff4",
-      "foreground": "#22863a",
-      "token": "punctuation.definition.inserted"
-    },
-    {
-      "background": "#ffebda",
-      "foreground": "#e36209",
-      "token": "markup.changed"
-    },
-    {
-      "background": "#ffebda",
-      "foreground": "#e36209",
-      "token": "punctuation.definition.changed"
-    },
-    {
-      "foreground": "#f6f8fa",
-      "background": "#005cc5",
-      "token": "markup.ignored"
-    },
-    {
-      "foreground": "#f6f8fa",
-      "background": "#005cc5",
-      "token": "markup.untracked"
-    },
-    {
-      "foreground": "#6f42c1",
-      "fontStyle": "bold",
-      "token": "meta.diff.range"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "meta.diff.header"
-    },
-    {
-      "fontStyle": "bold",
-      "foreground": "#005cc5",
-      "token": "meta.separator"
-    },
-    {
-      "foreground": "#005cc5",
-      "token": "meta.output"
-    },
-    {
-      "foreground": "#586069",
-      "token": "brackethighlighter.tag"
-    },
-    {
-      "foreground": "#586069",
-      "token": "brackethighlighter.curly"
-    },
-    {
-      "foreground": "#586069",
-      "token": "brackethighlighter.round"
-    },
-    {
-      "foreground": "#586069",
-      "token": "brackethighlighter.square"
-    },
-    {
-      "foreground": "#586069",
-      "token": "brackethighlighter.angle"
-    },
-    {
-      "foreground": "#586069",
-      "token": "brackethighlighter.quote"
-    },
-    {
-      "foreground": "#b31d28",
-      "token": "brackethighlighter.unmatched"
-    },
-    {
-      "foreground": "#032f62",
-      "fontStyle": "underline",
-      "token": "constant.other.reference.link"
-    },
-    {
-      "foreground": "#032f62",
-      "fontStyle": "underline",
-      "token": "string.other.link"
+      "token": "",
+      "settings": {
+        "foreground": "#000000",
+        "background": "#FFFFFF"
+      }
     }
   ],
-  "encodedTokensColors": []
+  "colors": {
+    "editor.background": "#f9fafb",
+    "editorWidget.background": "#f3f4f6",
+    "editor.foreground": "#000000",
+    "editor.inactiveSelectionBackground": "#E5EBF1",
+    "editorIndentGuide.background": "#D3D3D3",
+    "editorIndentGuide.activeBackground": "#939393",
+    "editor.selectionHighlightBackground": "#ADD6FF80",
+    "editorSuggestWidget.background": "#F3F3F3",
+    "activityBarBadge.background": "#007ACC",
+    "sideBarTitle.foreground": "#6F6F6F",
+    "list.hoverBackground": "#E8E8E8",
+    "input.placeholderForeground": "#767676",
+    "searchEditor.textInputBorder": "#CECECE",
+    "settings.textInputBorder": "#CECECE",
+    "settings.numberInputBorder": "#CECECE",
+    "statusBarItem.remoteForeground": "#FFF",
+    "statusBarItem.remoteBackground": "#16825D",
+    "sideBarSectionHeader.background": "#0000",
+    "sideBarSectionHeader.border": "#61616130",
+    "tab.lastPinnedBorder": "#61616130",
+    "notebook.cellBorderColor": "#E8E8E8",
+    "statusBarItem.errorBackground": "#c72e0f"
+  }
 }

--- apps/web/src/components/fragments/mini-code-editor.tsx ---
@@ -81,7 +81,6 @@ const MiniCodeEditor: Component<MiniCodeEditorProps> = (props) => {
         model: null,
         wordWrap: props.wrap ? "on" : "off",
         readOnly: typeof props.readOnly === "boolean" ? props.readOnly : false,
-        theme: "dark-contrast",
         scrollbar: {
           alwaysConsumeMouseWheel: false
         }
@@ -140,11 +139,6 @@ const MiniCodeEditor: Component<MiniCodeEditorProps> = (props) => {
           }
         )
       );
-      createEffect(() => {
-        props.monaco.editor.setTheme(
-          `${codeEditorTheme()}${props.color === "contrast" ? "-contrast" : ""}`
-        );
-      });
       onCleanup(() => {
         codeEditor.getModel()?.dispose();
         codeEditor.dispose();
@@ -157,7 +151,8 @@ const MiniCodeEditor: Component<MiniCodeEditorProps> = (props) => {
       <div
         ref={setEditorContainerRef}
         class={clsx(
-          "w-full bg-gray-100 border-2 not-prose dark:bg-gray-900 rounded-2xl dark:border-gray-700 rounded",
+          "w-full bg-gray-100 border-2 not-prose dark:bg-gray-900 rounded-2xl dark:border-gray-700 rounded-editor-2xl customized-editor box-content",
+          props.color === "contrast" && "customized-editor-contrast",
           props.class
         )}
       ></div>

--- apps/web/src/context/appearance.tsx ---
@@ -13,7 +13,7 @@ interface AppearanceContextData {
 const AppearanceContext = createContext<AppearanceContextData>();
 const AppearanceProvider: ParentComponent = (props) => {
   const {
-    userSettings = () => ({ accentColor: "energy", codeEditorTheme: "dark", uiTheme: "auto" })
+    userSettings = () => ({ accentColor: "energy", codeEditorTheme: "auto", uiTheme: "auto" })
   } = useAuthenticatedUserData() || {};
   const prefersDark = createPrefersDark();
   const uiTheme = (): BaseTheme => {

--- apps/web/src/context/authenticated-user-data.tsx ---
@@ -184,32 +184,6 @@ const AuthenticatedUserDataProvider: ParentComponent = (props) => {
               ...workspaceSettings!,
               ...data
             }));
-          } else if (action === "createWrapper") {
-            setWorkspaceSettings((workspaceSettings) => ({
-              ...workspaceSettings!,
-              wrappers: [...(workspaceSettings?.wrappers || []), data]
-            }));
-          } else if (action === "deleteWrapper") {
-            setWorkspaceSettings((workspaceSettings) => ({
-              ...workspaceSettings!,
-              wrappers: (workspaceSettings?.wrappers || []).filter(
-                (wrapper) => wrapper.key !== data.key
-              )
-            }));
-          } else if (action === "updateWrapper") {
-            setWorkspaceSettings((workspaceSettings) => ({
-              ...workspaceSettings!,
-              wrappers: (workspaceSettings?.wrappers || []).map((wrapper) => {
-                if (wrapper.key === data.key) {
-                  return {
-                    ...wrapper,
-                    ...data
-                  };
-                }
-
-                return wrapper;
-              })
-            }));
           }
         }
       });

--- apps/web/src/context/client.tsx ---
@@ -61,7 +61,7 @@ const refreshTokenLink = (closeConnection: () => void): TRPCLink<App.Router> =>
                 return;
               }
 
-              if (error.data?.code === "UNAUTHORIZED") {
+              if (error.data?.code === "UNAUTHORIZED" && window.location.pathname !== "/auth") {
                 attempt();
               } else {
                 observer.error(error);

--- apps/web/src/context/extensions.tsx ---
@@ -36,7 +36,8 @@ const officialExtensions = {
   "dev": () => import("@vrite/extensions/dev.json"),
   "hashnode": () => import("@vrite/extensions/hashnode.json"),
   "medium": () => import("@vrite/extensions/medium.json"),
-  "gpt-3.5": () => import("@vrite/extensions/gpt-3.5.json")
+  "gpt-3.5": () => import("@vrite/extensions/gpt-3.5.json"),
+  "mdx": () => import("@vrite/extensions/mdx.json")
 };
 const isOfficialExtension = (id: string): boolean => {
   return id in officialExtensions;

--- apps/web/src/layout/toolbar/index.tsx ---
@@ -435,7 +435,7 @@ const Toolbar: Component<{ class?: string }> = (props) => {
   return (
     <div
       class={clsx(
-        ":base-2: p-1 w-full flex items-center border-b-2 absolute h-12 border-gray-200 dark:border-gray-700 justify-end @container z-1",
+        ":base-2: p-1 w-full flex items-center border-b-2 absolute h-12 border-gray-200 dark:border-gray-700 justify-end @container z-10",
         props.class
       )}
     >

--- apps/web/src/lib/code-editor/format.ts ---
@@ -4,15 +4,16 @@ import type { Options, Plugin } from "prettier";
 const languageParserMap = {
   javascript: "babel",
   typescript: "babel-ts",
-  json: "yaml",
+  json: "json-stringify",
   graphql: "graphql",
   html: "html",
   vue: "vue",
   markdown: "markdown",
   yaml: "yaml",
   css: "css",
   less: "less",
-  scss: "scss"
+  scss: "scss",
+  mdx: "mdx"
 } as const;
 
 type SupportedLanguages = keyof typeof languageParserMap;
@@ -24,6 +25,7 @@ const loadParserPlugins = async (language: string): Promise<Plugin[] | null> =>
   switch (language as SupportedLanguages) {
     case "javascript":
     case "typescript":
+    case "json":
       return [
         await import("prettier/plugins/babel"),
         (await import("prettier/plugins/estree")) as Plugin
@@ -34,9 +36,9 @@ const loadParserPlugins = async (language: string): Promise<Plugin[] | null> =>
     case "vue":
       return [await import("prettier/plugins/html")];
     case "markdown":
+    case "mdx":
       return [await import("prettier/plugins/markdown")];
     case "yaml":
-    case "json":
       return [await import("prettier/plugins/yaml")];
     case "css":
     case "less":
@@ -54,11 +56,7 @@ const formatCode = async (code: string, language: string, options?: Options): Pr
     return format(code, {
       ...(options || {}),
       parser,
-      plugins: parserPlugins,
-      ...(language === "json" && {
-        trailingComma: "none",
-        singleQuote: false
-      })
+      plugins: parserPlugins
     });
   }
 

--- apps/web/src/lib/code-editor/suggest-language.ts ---
@@ -14,10 +14,7 @@ const getLanguageIds = (
       return { id: language.id };
     });
 };
-const useSuggestLanguage = (
-  languages: monaco.languages.ILanguageExtensionPoint[]
-): ((query: string) => string[]) => {
-  const languageIds = getLanguageIds(languages);
+const useSuggestLanguage = (): ((query: string) => string[]) => {
   const engine =
     searchEngine() ||
     new MiniSearch({
@@ -28,7 +25,11 @@ const useSuggestLanguage = (
     });
 
   if (!searchEngine()) {
-    engine.addAll(languageIds);
+    import("#lib/monaco").then(({ monaco }) => {
+      const languageIds = getLanguageIds(monaco.languages.getLanguages());
+
+      engine.addAll(languageIds);
+    });
     setSearchEngine(engine);
   }
 

--- apps/web/src/lib/editor/editing.ts ---
@@ -1,4 +1,4 @@
-import { CodeBlock, Embed, Image, Wrapper } from "./extensions";
+import { CodeBlock, Embed, Image, Element } from "./extensions";
 import { SlashMenuItem } from "./extensions/slash-menu/component";
 import { Editor, Node as NodeExtension, Mark as MarkExtension } from "@tiptap/core";
 import { DOMOutputSpec, DOMSerializer, Mark, Node } from "@tiptap/pm/model";
@@ -118,7 +118,7 @@ const createExtensions = (
     codeBlock: CodeBlock.configure({ provider }),
     horizontalRule: HorizontalRule,
     image: Image,
-    wrapper: Wrapper,
+    element: Element,
     table: [Table, TableCell, TableHeader, TableRow]
   };
   const getHeadingLevels = (settings: App.WorkspaceSettings): Level[] => {
@@ -285,13 +285,13 @@ const createBlockMenuOptions = (settings?: App.WorkspaceSettings): SlashMenuItem
       }
     },
     {
-      label: "Wrapper",
+      label: "Element",
       group: "Blocks",
-      block: "wrapper",
+      block: "element",
       icon: mdiCubeOutline,
       ref: createRef<HTMLElement | null>(null),
       command({ editor, range }) {
-        return editor.chain().focus().deleteRange(range).setWrapper().run();
+        return editor.chain().focus().deleteRange(range).setElement().run();
       }
     },
     {

--- apps/web/src/lib/editor/extensions/block-action-menu/component.tsx ---
@@ -125,7 +125,7 @@ const BlockActionMenu: Component<BlockActionMenuProps> = (props) => {
               class={clsx(
                 blockAction.blocks.length !== 0 &&
                   !blockAction.blocks.some((block) => {
-                    return node()?.hasMarkup(props.state.editor.schema.nodes[block]);
+                    return node()?.type.name === props.state.editor.schema.nodes[block].name;
                   }) &&
                   "hidden"
               )}

--- apps/web/src/lib/editor/extensions/block-action-menu/plugin.tsx ---
@@ -111,7 +111,7 @@ const BlockActionMenuPlugin = Extension.create({
 
         rangeFrom = p.start - 1;
         rangeTo = p.start + p.node.nodeSize - 1;
-      } catch (e) {
+      } catch (error) {
         box.style.display = "none";
       }
     }

--- apps/web/src/lib/editor/extensions/code-block/menu.tsx ---
@@ -1,57 +1,129 @@
 import { CodeBlockAttributes } from "./node";
-import { useSolidNodeView } from "@vrite/tiptap-solid";
-import { mdiCodeTagsCheck } from "@mdi/js";
+import { SolidNodeViewProps } from "@vrite/tiptap-solid";
+import { mdiCodeTags, mdiCodeTagsCheck, mdiFileOutline } from "@mdi/js";
 import { Component, createEffect, createMemo, createSignal, on, Show } from "solid-js";
-import type { monaco } from "#lib/monaco";
-import { IconButton, Input, Tooltip } from "#components/primitives";
+import { debounce } from "@solid-primitives/scheduled";
+import { Card, IconButton, Input, Tooltip } from "#components/primitives";
 import { useSuggestLanguage, isFormattable } from "#lib/code-editor";
+import { createRef } from "#lib/utils";
 
 interface CodeBlockMenuProps {
-  monaco: typeof monaco;
+  state: SolidNodeViewProps<CodeBlockAttributes>;
+  changeLanguage(lang: string | null): void;
   format(): void;
-  changeLanguage(languageId: string | null): void;
 }
 
 const CodeBlockMenu: Component<CodeBlockMenuProps> = (props) => {
-  const { state } = useSolidNodeView();
-  const attrs = (): CodeBlockAttributes => state().node.attrs;
+  const [mode, setMode] = createSignal<"title" | "lang">("lang");
+  const [menuRef, setMenuRef] = createRef<HTMLElement | null>(null);
+  const [left, setLeft] = createSignal(0);
   const [suggestions, setSuggestions] = createSignal<string[]>([]);
-  const suggestLanguage = useSuggestLanguage(props.monaco.languages.getLanguages());
-  const formattingAvailable = createMemo(() => {
-    return isFormattable(attrs().lang || "");
-  });
+  const attrs = (): CodeBlockAttributes => props.state.node.attrs;
+  const suggestLanguage = useSuggestLanguage();
+  const formattingAvailable = createMemo(() => isFormattable(attrs().lang?.split(" ")?.[0] || ""));
+  const updateAttribute = debounce((attributes: CodeBlockAttributes) => {
+    return props.state.updateAttributes(attributes);
+  }, 200);
+  const currentValue = (): string => {
+    if (mode() === "lang") {
+      return [attrs().lang, attrs().meta].filter(Boolean).join(" ");
+    }
+
+    return attrs().title || "";
+  };
 
   createEffect(
-    on(attrs, () => {
-      setSuggestions(suggestLanguage(attrs().lang || ""));
-      props.changeLanguage(attrs().lang || null);
+    on(attrs, (attrs) => {
+      setSuggestions(suggestLanguage(attrs.lang || ""));
+      props.changeLanguage(attrs.lang?.split(" ")?.[0] || null);
     })
   );
+  createEffect(
+    on(
+      () => props.state.selected,
+      () => {
+        const element = menuRef();
+
+        if (!element || !element.parentElement) return;
+
+        const { left, width } = element.parentElement.getBoundingClientRect();
+        const right = window.innerWidth - left - width;
+
+        setLeft(-Math.abs((right - left) / 2));
+      }
+    )
+  );
 
   return (
-    <div class="flex p-0 transition-shadow duration-200 border-0 rounded-xl">
-      <Input
-        wrapperClass="flex-1 max-w-full"
-        placeholder="Language"
-        value={attrs().lang || ""}
-        suggestions={suggestions()}
-        color="contrast"
-        disabled={!state().editor.isEditable}
-        setValue={(value) => {
-          state().updateAttributes({ lang: value });
-        }}
-      />
-      <Show when={state().editor.isEditable}>
-        <Tooltip text={formattingAvailable() ? "Format" : "Formatting unavailable"}>
+    <div
+      class="pointer-events-auto flex bg-gray-50 dark:bg-gray-900 !md:bg-transparent border-gray-200 dark:border-gray-700 border-y-2 md:border-0 backdrop-blur-sm md:gap-2 w-screen md:w-auto !md:left-unset relative md:rounded-2xl"
+      style={{ left: `${left()}px` }}
+      ref={setMenuRef}
+    >
+      <Card class="flex py-0 m-0 border-0 md:border-2 px-1 gap-1">
+        <Tooltip text="Title">
           <IconButton
-            path={mdiCodeTagsCheck}
-            color="contrast"
-            text="soft"
-            disabled={!formattingAvailable()}
-            onClick={props.format}
+            path={mdiFileOutline}
+            color={mode() === "title" ? "primary" : "contrast"}
+            text={mode() === "title" ? "primary" : "soft"}
+            variant={mode() === "title" ? "solid" : "text"}
+            class="m-0"
+            onClick={() => {
+              setMode("title");
+            }}
           ></IconButton>
         </Tooltip>
-      </Show>
+        <Tooltip text="Language">
+          <IconButton
+            path={mdiCodeTags}
+            color={mode() === "lang" ? "primary" : "contrast"}
+            text={mode() === "lang" ? "primary" : "soft"}
+            variant={mode() === "lang" ? "solid" : "text"}
+            class="m-0"
+            onClick={() => {
+              setMode("lang");
+            }}
+          ></IconButton>
+        </Tooltip>
+      </Card>
+      <Card class="flex m-0 border-0 md:border-2 p-1 gap-1 flex-1">
+        <Input
+          wrapperClass="flex-1 max-w-full md:w-72"
+          placeholder={mode() === "title" ? "Snippet title" : "Language meta"}
+          value={currentValue()}
+          suggestions={mode() === "lang" ? suggestions() : []}
+          suggestionsBoxClass="mt-3 mx-0 mb-0"
+          class="m-0 !bg-transparent text-lg"
+          color="contrast"
+          disabled={!props.state.editor.isEditable}
+          setValue={(value) => {
+            updateAttribute.clear();
+
+            if (mode() === "lang") {
+              const [lang, ...meta] = value.split(" ");
+
+              updateAttribute({ meta: meta.join(" "), lang });
+            } else {
+              updateAttribute({ title: value });
+            }
+          }}
+        />
+      </Card>
+      <Card class="flex m-0 border-0 md:border-2 p-1">
+        <Show when={props.state.editor.isEditable}>
+          <Tooltip text={formattingAvailable() ? "Format" : "Formatting unavailable"} class="mt-1">
+            <IconButton
+              path={mdiCodeTagsCheck}
+              color="contrast"
+              text="soft"
+              variant="text"
+              class="m-0"
+              disabled={!formattingAvailable()}
+              onClick={props.format}
+            ></IconButton>
+          </Tooltip>
+        </Show>
+      </Card>
     </div>
   );
 };

--- apps/web/src/lib/editor/extensions/code-block/node.tsx ---
@@ -75,7 +75,7 @@ const CodeBlock = BaseCodeBlock.extend<CodeBlockOptions>({
         });
 
         return (
-          <NodeViewWrapper class="my-5">
+          <NodeViewWrapper>
             <Show when={!loading()}>
               <CodeBlockView
                 monaco={monacoRef()!}

--- apps/web/src/lib/editor/extensions/code-block/view.tsx ---
@@ -2,18 +2,12 @@ import { CodeBlockAttributes, CodeBlockOptions } from "./node";
 import { CodeBlockMenu } from "./menu";
 import { useSolidNodeView } from "@vrite/tiptap-solid";
 import clsx from "clsx";
-import { Component, createEffect, createSignal, onMount } from "solid-js";
+import { Component, createEffect, createSignal, on, onMount } from "solid-js";
 import { nanoid } from "nanoid";
 import type { monaco } from "#lib/monaco";
 import { formatCode } from "#lib/code-editor";
-import { Card } from "#components/primitives";
 import { createRef, selectionClasses } from "#lib/utils";
-import {
-  useAppearance,
-  useAuthenticatedUserData,
-  useNotifications,
-  useLocalStorage
-} from "#context";
+import { useAppearance, useAuthenticatedUserData, useNotifications } from "#context";
 
 interface CodeBlockViewProps {
   monaco: typeof monaco;
@@ -51,6 +45,7 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
   const [codeEditor, setCodeEditor] = createSignal<monaco.editor.IStandaloneCodeEditor | null>(
     null
   );
+  const [codeEditorActive, setCodeEditorActive] = createSignal(false);
   const [currentModelValue, setCurrentModelValue] = createRef("");
   const selected = (): boolean => {
     return state().selected;
@@ -65,7 +60,7 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
 
       notify({ text: "Formatting code", type: "loading", promise: formattingCode });
 
-      const formattedCode = await formattingCode;
+      const formattedCode = (await formattingCode).trim();
 
       props.setUpdatingRef(true);
 
@@ -106,7 +101,7 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
   };
   const updateEditorHeight = (monacoEditor: monaco.editor.IStandaloneCodeEditor): void => {
     const container = monacoEditor.getContainerDomNode();
-    const contentHeight = Math.max(200, monacoEditor.getContentHeight());
+    const contentHeight = Math.max(20, monacoEditor.getContentHeight());
     const editorContainer = editorContainerRef();
 
     if (editorContainer) {
@@ -129,7 +124,6 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
         model: null,
         fontSize: 13,
         fontFamily: "JetBrainsMonoVariable",
-        theme: "dark",
         tabSize: 2,
         insertSpaces: true,
         readOnly: !state().editor.isEditable,
@@ -193,6 +187,10 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
       codeEditor.onDidContentSizeChange(() => updateEditorHeight(codeEditor));
       codeEditor.onDidBlurEditorText(() => {
         options().provider?.awareness?.setLocalStateField("vscSelection", null);
+        setCodeEditorActive(false);
+      });
+      codeEditor.onDidFocusEditorText(() => {
+        setCodeEditorActive(true);
       });
       codeEditor.onDidChangeCursorSelection(() => {
         const model = codeEditor.getModel();
@@ -277,11 +275,18 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
       });
     }
   });
+  createEffect(
+    on(codeEditorActive, (active) => {
+      if (active) {
+        state().editor.commands.setNodeSelection(state().getPos());
+      }
+    })
+  );
 
   return (
     <div
       class={clsx(
-        "relative rounded-2xl not-prose text-base leading-4",
+        "relative rounded-2xl text-base leading-4 not-prose",
         selected() && "ring ring-primary ring-2"
       )}
       contentEditable={selected() ? false : undefined}
@@ -291,20 +296,18 @@ const CodeBlockView: Component<CodeBlockViewProps> = (props) => {
         ref={setEditorContainerRef}
         spellcheck={false}
         class={clsx(
-          "w-full bg-gray-50 dark:bg-gray-900 h-72 not-prose rounded-t-2xl rounded",
-          codeEditorTheme() === "light" && "border-2 border-b-0 dark:border-0"
+          "bg-gray-50 dark:bg-gray-900 h-72 rounded-2xl rounded-editor-2xl border-2 border-gray-300 dark:border-gray-700 box-content customized-editor"
         )}
       />
-      <Card
+      <div
         class={clsx(
-          "m-0 rounded-t-none",
-          codeEditorTheme() === "dark" && "border-t-0 dark:border-0 dark:border-t-2",
-          codeEditorTheme() === "light" && "dark:border-t-0"
+          "absolute w-full justify-center items-center -bottom-14 z-1 pointer-events-none",
+          selected() ? "grid" : "hidden"
         )}
-        contentEditable={false}
       >
-        <CodeBlockMenu monaco={props.monaco} format={format} changeLanguage={changeLanguage} />
-      </Card>
+        <CodeBlockMenu changeLanguage={changeLanguage} format={format} state={state()} />
+      </div>
+      <div data-type="draggable-item" />
     </div>
   );
 };

--- apps/web/src/lib/editor/extensions/collab-cursor.tsx ---
@@ -66,16 +66,28 @@ const CollabCursor = (provider: HocuspocusProvider): Extension => {
         }>(null);
 
         onMount(() => {
-          if (container.parentElement?.classList.contains("ProseMirror")) {
+          if (
+            container.parentElement?.classList.contains("ProseMirror") ||
+            container.parentElement?.classList.contains("content") ||
+            container.parentElement?.tagName === "TH" ||
+            container.parentElement?.tagName === "TD" ||
+            container.parentElement?.tagName === "LI" ||
+            container.parentElement?.tagName === "BLOCKQUOTE"
+          ) {
             const rect = container.previousElementSibling?.getBoundingClientRect();
-            const parentPos = document.getElementById("pm-container")?.getBoundingClientRect();
+
+            let parentPos = document.getElementById("pm-container")?.getBoundingClientRect();
+
+            if (container.parentElement?.classList.contains("content")) {
+              parentPos = container.parentElement?.getBoundingClientRect();
+            }
 
             if (!parentPos || !rect) return;
 
             setBlockSelection({
               h: rect.height,
               w: rect.width,
-              top: rect.top - parentPos.top - 20
+              top: rect.top - parentPos.top
             });
           }
         });

--- apps/web/src/lib/editor/extensions/element-menu/component.tsx ---
@@ -0,0 +1,97 @@
+import { ElementMenuEditor } from "./editor";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { Component, Show, createEffect, createSignal } from "solid-js";
+import { Node as PMNode } from "@tiptap/pm/model";
+
+interface ElementMenuProps {
+  state: {
+    pos: number;
+    node: PMNode | null;
+    container: HTMLElement | null;
+    editor: SolidEditor;
+    active: boolean;
+  };
+}
+
+const ElementMenu: Component<ElementMenuProps> = (props) => {
+  const [attributes, setAttributes] = createSignal({ type: "", props: {} as Record<string, any> });
+
+  createEffect(() => {
+    setAttributes((attributes) => {
+      if (!props.state.node) {
+        return { type: "", props: {} };
+      }
+
+      const newAttributes = props.state.node.attrs;
+
+      if (
+        newAttributes.type !== attributes.type ||
+        JSON.stringify(newAttributes.props) !== JSON.stringify(attributes.props)
+      ) {
+        return { type: newAttributes.type, props: newAttributes.props };
+      }
+
+      return attributes;
+    });
+  });
+
+  return (
+    <Show when={props.state.editor.isEditable}>
+      <div class="flex">
+        <ElementMenuEditor
+          state={{
+            editor: props.state.editor,
+            type: attributes()?.type || "",
+            props: attributes()?.props || {},
+            active: props.state.active,
+            contentSize: props.state.node?.content.size || 0,
+
+            removeElement() {
+              props.state.editor.commands.command(({ tr, dispatch }) => {
+                if (!dispatch) return false;
+
+                const lastPos = props.state.pos;
+
+                if (typeof lastPos === "number" && props.state.node) {
+                  tr.delete(lastPos, lastPos + props.state.node.nodeSize);
+
+                  return true;
+                }
+
+                return false;
+              });
+            },
+            setElement(element) {
+              props.state.editor.commands.command(({ tr, dispatch }) => {
+                if (!dispatch) return false;
+
+                const lastPos = props.state.pos;
+
+                if (lastPos !== null) {
+                  tr.setNodeAttribute(lastPos, "type", element.type);
+                  tr.setNodeAttribute(lastPos, "props", element.props);
+
+                  if (element.content && !props.state.node?.content.size) {
+                    tr.replaceWith(
+                      lastPos + 1,
+                      lastPos + props.state.node!.content.size + 1,
+                      props.state.editor.schema.node("paragraph")
+                    );
+                  } else if (!element.content && props.state.node?.content.size) {
+                    tr.delete(lastPos + 1, lastPos + props.state.node!.content.size + 1);
+                  }
+
+                  return true;
+                }
+
+                return false;
+              });
+            }
+          }}
+        />
+      </div>
+    </Show>
+  );
+};
+
+export { ElementMenu };

--- apps/web/src/lib/editor/extensions/element-menu/editor.tsx ---
@@ -0,0 +1,303 @@
+import {
+  createEffect,
+  createMemo,
+  createRenderEffect,
+  createSignal,
+  lazy,
+  on,
+  onCleanup,
+  onMount
+} from "solid-js";
+import { createRef } from "@vrite/components/src/ref";
+import clsx from "clsx";
+import { nanoid } from "nanoid";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { scrollIntoView } from "seamless-scroll-polyfill";
+import { monaco } from "#lib/monaco";
+import { useAppearance } from "#context";
+import { formatCode } from "#lib/code-editor";
+
+interface ElementMenuEditorProps {
+  state: {
+    type: string;
+    active: boolean;
+    props: Record<string, any>;
+    editor: SolidEditor;
+    contentSize: number;
+    removeElement(): void;
+    setElement(element: { type: string; props: Record<string, any>; content: boolean }): void;
+  };
+}
+
+const codeEditorOptions: monaco.editor.IStandaloneEditorConstructionOptions = {
+  automaticLayout: true,
+  minimap: { enabled: false },
+  contextmenu: false,
+  fontSize: 17.5,
+  fontFamily: "JetBrainsMonoVariable",
+  scrollBeyondLastLine: false,
+  model: null,
+  wordWrap: "on",
+  theme: "dark",
+  suggestFontSize: 13,
+  codeLensFontSize: 13,
+  lineHeight: 26,
+  suggestLineHeight: 21,
+  overviewRulerBorder: false,
+  overviewRulerLanes: 0,
+  hideCursorInOverviewRuler: true,
+  lineNumbers: "off",
+  glyphMargin: false,
+  folding: false,
+  quickSuggestions: false,
+  lightbulb: { enabled: false },
+  hover: { enabled: false },
+  lineDecorationsWidth: 0,
+  lineNumbersMinChars: 0,
+  renderLineHighlightOnlyWhenFocus: true,
+  renderLineHighlight: "none",
+  scrollbar: {
+    vertical: "hidden",
+    horizontal: "hidden",
+    alwaysConsumeMouseWheel: false
+  }
+};
+const ElementMenuEditor = lazy(async () => {
+  const { monaco } = await import("#lib/monaco");
+
+  return {
+    default: (props: ElementMenuEditorProps) => {
+      const { codeEditorTheme = () => "dark" } = useAppearance() || {};
+      const [editorContainerRef, setEditorContainerRef] = createRef<HTMLElement | null>(null);
+      const [coords, setCoords] = createSignal({ x: 0, y: 0 });
+      const [visible, setVisible] = createSignal(true);
+      const type = createMemo(() => props.state.type);
+      const processCode = async (code: string): Promise<string> => {
+        const codeTagClosed = code?.trim().replace(/>$/, "/>") || "";
+        const formattedCode = await formatCode(codeTagClosed, "typescript", {
+          printWidth: 60,
+          trailingComma: "none",
+          singleQuote: false
+        });
+
+        return formattedCode.replace(/ *?\/>;/gm, props.state.contentSize ? ">" : "/>").trim();
+      };
+      const propsValue = createMemo((previous) => {
+        if (!previous || JSON.stringify(previous) !== JSON.stringify(props.state.props)) {
+          return props.state.props;
+        }
+
+        return previous;
+      });
+      const editorCode = createMemo(() => {
+        const keyValueProps = Object.entries(propsValue()).map(([key, value]) => {
+          if (value === true) return key;
+
+          const useBrackets =
+            typeof value !== "string" || value.includes("\n") || value.includes(`"`);
+
+          return `${key}=${useBrackets ? "{" : ""}${JSON.stringify(value)}${
+            useBrackets ? "}" : ""
+          }`;
+        });
+
+        return `<${type()}${keyValueProps.length ? " " : ""}${keyValueProps.join(" ")}>`;
+      });
+      const saveLastCoords = (event: MouseEvent): void => {
+        setCoords({ x: event.clientX, y: event.clientY });
+      };
+      const onSave = async (code: string): Promise<void> => {
+        const tagRegex = /^<(\w+?)(?:\s|\n|\/|>)/;
+        const attributeRegex =
+          /\s(\w+?)(?:=(?:(?:{((?:.|\n|\s)+?)})|(?:"((?:.|\n|\s)+?)")|(?:'((?:.|\n|\s)+?)')))?(?=(?:(?:\s|\n)+\w+=?)|(?:(?:\s|\n)*\/?>))/g;
+        const [, tag] = tagRegex.exec(code.trim()) || [];
+        const attributes: Record<string, any> = {};
+        const processAttributes = async (): Promise<void> => {
+          const match = attributeRegex.exec(code.trim());
+
+          if (!match) return;
+
+          const [, key] = match;
+          const value = (match[2] || match[3] || match[4] || "true").trim();
+
+          try {
+            const processedValue = await formatCode(value, "json", {
+              trailingComma: "none"
+            });
+
+            attributes[key] = JSON.parse(processedValue);
+          } catch (e) {
+            try {
+              attributes[key] = JSON.parse(value);
+            } catch (e) {
+              if (!props.state.props[key] || typeof props.state.props[key] === "string") {
+                attributes[key] = value;
+              } else {
+                attributes[key] = props.state.props[key];
+              }
+            }
+          }
+
+          await processAttributes();
+        };
+
+        await processAttributes();
+
+        if (tag && tag !== "undefined") {
+          props.state.setElement({
+            type: tag,
+            props: attributes,
+            content: !code.endsWith("/>")
+          });
+        } else {
+          props.state.removeElement();
+        }
+      };
+
+      onMount(() => {
+        const editorContainer = editorContainerRef()!;
+        const codeEditor = monaco.editor.create(editorContainer, codeEditorOptions);
+        const updateEditorHeight = (): void => {
+          const container = codeEditor.getContainerDomNode();
+          const contentHeight = Math.max(26, codeEditor.getContentHeight());
+
+          if (editorContainer) {
+            editorContainer.style.height = `${contentHeight}px`;
+          }
+
+          container.style.height = `${contentHeight}px`;
+          codeEditor.layout({
+            width: container.clientWidth,
+            height: contentHeight
+          });
+        };
+
+        codeEditor.onDidContentSizeChange(updateEditorHeight);
+        codeEditor.onDidChangeModelContent(() => {
+          const element = document.querySelector(".selected-element-tag") as HTMLElement;
+
+          if (element) {
+            element.textContent = codeEditor.getValue() || "";
+            element.style.height = `${codeEditor.getContentHeight()}px`;
+          }
+        });
+        codeEditor.onDidBlurEditorText(async () => {
+          const element = document.querySelector(".selected-element-tag") as HTMLElement;
+
+          if (element) {
+            element.textContent = await processCode(editorCode());
+          }
+
+          await onSave(codeEditor.getValue());
+        });
+        codeEditor.onKeyDown((event) => {
+          if (event.code === "Escape") {
+            props.state.editor.commands.focus();
+            event.preventDefault();
+            event.stopPropagation();
+          }
+        });
+        codeEditor.setModel(
+          monaco.editor.createModel(
+            editorCode(),
+            "javascript",
+            monaco.Uri.parse(`file:///${nanoid()}`)
+          )
+        );
+        createEffect(() => {
+          monaco.editor.setTheme(codeEditorTheme());
+        });
+        createEffect(
+          on(
+            () => props.state.active,
+            (active, _, prevElement) => {
+              const element: HTMLElement | null =
+                (prevElement as HTMLElement) ||
+                (document.querySelector(".selected-element-tag") as HTMLElement);
+
+              if (element) {
+                setTimeout(() => {
+                  if (active) {
+                    element.style.height = `${codeEditor.getContentHeight()}px`;
+
+                    return element;
+                  } else {
+                    element.style.height = "unset";
+
+                    return null;
+                  }
+                }, 0);
+              }
+
+              return element || null;
+            }
+          )
+        );
+        createEffect(
+          on(editorCode, async (code) => {
+            if (code === "<>") return codeEditor.setValue("");
+
+            const selection = codeEditor.getSelection();
+            const formattedCode = await processCode(code);
+
+            codeEditor.setValue(formattedCode);
+            if (selection) codeEditor.setSelection(selection);
+          })
+        );
+        createEffect(
+          on(type, (type, _previousType, handle) => {
+            if (typeof handle === "number") clearTimeout(handle);
+
+            if (type) {
+              return window.setTimeout(() => {
+                setVisible(true);
+
+                const { position } =
+                  codeEditor?.getTargetAtClientPoint(coords().x, coords().y) || {};
+
+                if (position) {
+                  codeEditor?.setSelection(monaco.Range.fromPositions(position, position));
+                }
+
+                scrollIntoView(editorContainer, { behavior: "smooth", block: "nearest" });
+                codeEditor?.focus();
+              }, 100);
+            }
+          })
+        );
+        onCleanup(() => {
+          codeEditor.getModel()?.dispose();
+          codeEditor.dispose();
+        });
+      });
+      createRenderEffect(
+        on(type, (type, previousType) => {
+          if (type !== previousType) setVisible(false);
+        })
+      );
+      window.addEventListener("pointerdown", saveLastCoords);
+      onCleanup(() => {
+        window.removeEventListener("pointerdown", saveLastCoords);
+      });
+
+      return (
+        <div
+          class={clsx(
+            "w-full flex items-center justify-start",
+            !visible() && "opacity-0 transition-opacity duration-200"
+          )}
+          contentEditable={false}
+        >
+          <div class="relative w-full">
+            <div
+              ref={setEditorContainerRef}
+              class="w-full not-prose customized-editor customized-editor-contrast customized-editor-show-keyboard-hidden"
+            ></div>
+          </div>
+        </div>
+      );
+    }
+  };
+});
+
+export { ElementMenuEditor };

--- apps/web/src/lib/editor/extensions/element-menu/index.ts ---
@@ -0,0 +1 @@
+export * from "./plugin";

--- apps/web/src/lib/editor/extensions/element-menu/plugin.tsx ---
@@ -0,0 +1,105 @@
+import { ElementMenu } from "./component";
+import { Extension } from "@tiptap/core";
+import { SolidEditor, SolidRenderer } from "@vrite/tiptap-solid";
+import { CellSelection } from "@tiptap/pm/tables";
+import { createNanoEvents } from "nanoevents";
+import { NodeSelection } from "@tiptap/pm/state";
+import { Node as PMNode } from "@tiptap/pm/model";
+
+const emitter = createNanoEvents();
+const generalMenuContainer = document.createElement("div");
+
+let generalMenu: SolidRenderer<{
+  editor: SolidEditor;
+  pos: number;
+  node: PMNode | null;
+  container: HTMLElement | null;
+  active: boolean;
+}> | null = null;
+
+const handleUpdate = (editor: SolidEditor): void => {
+  const { selection } = editor.state;
+  const selectedNode = selection.$from.nodeAfter;
+  const isNodeSelection = selection instanceof NodeSelection;
+
+  if (!isNodeSelection || !selectedNode || selectedNode.type.name !== "element") {
+    generalMenuContainer.style.display = "none";
+    generalMenu?.setState((state) => ({ ...state, active: false }));
+
+    return;
+  }
+
+  const { view } = editor;
+  const node = view.nodeDOM(selection.$from.pos);
+
+  if (!node) return;
+
+  const blockParent = node as HTMLElement;
+  const parentPos = document.getElementById("pm-container")?.getBoundingClientRect();
+  const childPos = blockParent?.getBoundingClientRect();
+
+  if (!parentPos || !childPos) return;
+
+  const relativePos = {
+    top: childPos.top - parentPos.top,
+    right: childPos.right - parentPos.right,
+    bottom: childPos.bottom - parentPos.bottom,
+    left: childPos.left - parentPos.left
+  };
+
+  Object.assign(generalMenuContainer.style, {
+    width: `${Math.min(childPos?.width || parentPos.width, parentPos.width)}px`,
+    top: `${relativePos.top}px`,
+    left: `${relativePos.left}px`,
+    position: "absolute",
+    display: "block"
+  });
+  generalMenu?.setState(() => ({
+    pos: selection.$from.pos,
+    node: selectedNode,
+    container: blockParent,
+    editor,
+    active: true
+  }));
+};
+const ElementMenuPlugin = Extension.create({
+  name: "elementMenu",
+  onCreate() {
+    generalMenu = new SolidRenderer(ElementMenu, {
+      editor: this.editor as SolidEditor,
+      state: {
+        pos: 0,
+        node: null as PMNode | null,
+        container: null as HTMLElement | null,
+        editor: this.editor as SolidEditor,
+        active: false as boolean
+      }
+    });
+    generalMenuContainer.appendChild(generalMenu.element);
+    document.getElementById("pm-container")?.appendChild(generalMenuContainer);
+  },
+  onBlur() {
+    const menuActive = document.activeElement?.contains(generalMenuContainer);
+
+    if (!menuActive) {
+      generalMenuContainer.style.display = "none";
+      generalMenu?.setState((state) => ({ ...state, active: false }));
+    }
+  },
+  onFocus() {
+    const isCellSelection = this.editor.state.selection instanceof CellSelection;
+
+    if (this.editor.isActive("element") && !isCellSelection) {
+      generalMenuContainer.style.display = "block";
+      generalMenu?.setState((state) => ({ ...state, active: true }));
+    }
+  },
+  onUpdate() {
+    handleUpdate(this.editor as SolidEditor);
+  },
+  onSelectionUpdate() {
+    handleUpdate(this.editor as SolidEditor);
+  }
+});
+
+export { ElementMenuPlugin, emitter };

--- apps/web/src/lib/editor/extensions/element/node.tsx ---
@@ -0,0 +1,181 @@
+import { Element as BaseElement, ElementAttributes } from "@vrite/editor";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { NodeView } from "@tiptap/core";
+import { keymap } from "@tiptap/pm/keymap";
+import { Node } from "@tiptap/pm/model";
+import { EditorState } from "@tiptap/pm/state";
+import { Node as PMNode } from "@tiptap/pm/model";
+import { formatCode } from "#lib/code-editor";
+
+const getOpeningTag = async (node: PMNode): Promise<string> => {
+  const keyValueProps = Object.entries(node.attrs.props).map(([key, value]) => {
+    if (value === true) return key;
+
+    const useBrackets = typeof value !== "string" || value.includes("\n") || value.includes(`"`);
+
+    return `${key}=${useBrackets ? "{" : ""}${JSON.stringify(value)}${useBrackets ? "}" : ""}`;
+  });
+  const c = `<${node.attrs.type}${keyValueProps.length ? " " : ""}${keyValueProps.join(" ")}>`;
+  const codeTagClosed = c.trim().replace(/>$/, "/>") || "";
+  const formattedCode = await formatCode(codeTagClosed, "typescript", {
+    printWidth: 60,
+    trailingComma: "none",
+    singleQuote: false
+  });
+
+  return formattedCode.replace(/ *?\/>;/gm, node.content.size ? ">" : "/>").trim();
+};
+const getClosingTag = (node: PMNode): string => node.attrs.type;
+const Element = BaseElement.extend({
+  addProseMirrorPlugins() {
+    const handleDeleteElement = (state: EditorState): boolean => {
+      if (this.editor.isActive("element")) {
+        const currentDepth = state.selection.$from.depth;
+
+        let node: Node | null = null;
+        let pos: number | null = null;
+
+        for (let i = currentDepth; i >= 0; i--) {
+          const currentNode = state.selection.$from.node(i);
+
+          if (currentNode.type.name === "element") {
+            node = currentNode;
+            pos = i > 0 ? state.selection.$from.before(i) : 0;
+            break;
+          }
+        }
+
+        if (
+          node &&
+          !node.textContent &&
+          node.content.childCount === 1 &&
+          node.content.firstChild?.type.name === "paragraph" &&
+          typeof pos === "number"
+        ) {
+          this.editor
+            .chain()
+            .deleteRange({
+              from: pos,
+              to: pos + node.nodeSize
+            })
+            .focus()
+            .run();
+
+          return true;
+        }
+      }
+
+      return false;
+    };
+
+    return [
+      keymap({
+        Delete: handleDeleteElement,
+        Backspace: handleDeleteElement
+      })
+    ];
+  },
+  addNodeView() {
+    return (props) => {
+      let node = props.node as Node;
+
+      const editor = this.editor as SolidEditor;
+      const referenceView = new NodeView(() => {}, props);
+      const dom = document.createElement("div");
+      const contentContainer = document.createElement("div");
+      const content = document.createElement("div");
+      const code = document.createElement("code");
+      const bottomCode = document.createElement("code");
+      const bottomCodeStart = document.createElement("span");
+      const bottomCodeKey = document.createElement("span");
+      const bottomCodeEnd = document.createElement("span");
+      const handleCodeClick = (event: MouseEvent): void => {
+        if (typeof props.getPos === "function") {
+          editor.commands.setTextSelection(props.getPos());
+          editor.commands.setNodeSelection(props.getPos());
+        }
+
+        event.preventDefault();
+        event.stopPropagation();
+      };
+
+      getOpeningTag(props.node).then((openingTag) => (code.textContent = openingTag));
+      bottomCodeKey.textContent = getClosingTag(node);
+      contentContainer.setAttribute(
+        "class",
+        "px-3 w-full border-gray-300 dark:border-gray-700 border-l-2 ml-1 py-0 content"
+      );
+      dom.setAttribute("class", "flex flex-col justify-center items-center relative");
+      dom.setAttribute("data-element", "true");
+      content.setAttribute("class", "relative content");
+      contentContainer.append(content);
+      dom.append(code, contentContainer, bottomCode);
+      code.setAttribute(
+        "class",
+        "!whitespace-pre-wrap leading-[26px] min-h-6.5 block w-full !p-0 !bg-transparent !rounded-0 !text-gray-400 !dark:text-gray-400 cursor-pointer"
+      );
+      bottomCode.setAttribute(
+        "class",
+        "block w-full !p-0 leading-[26px] min-h-6.5 !rounded-0 !bg-transparent !text-gray-400 !dark:text-gray-400 cursor-pointer"
+      );
+      code.contentEditable = "false";
+      bottomCode.contentEditable = "false";
+      bottomCode.append(bottomCodeStart, bottomCodeKey, bottomCodeEnd);
+      bottomCodeStart.textContent = "</";
+      bottomCodeEnd.textContent = ">";
+      code.addEventListener("click", handleCodeClick);
+      bottomCode.addEventListener("click", handleCodeClick);
+
+      if (!node.content.size) {
+        bottomCode.classList.add("!hidden");
+      }
+
+      return {
+        dom,
+        contentDOM: content,
+        ignoreMutation(mutation: MutationRecord | { type: "selection"; target: Element }) {
+          if (mutation.type === "selection") {
+            return true;
+          }
+
+          return referenceView.ignoreMutation(mutation);
+        },
+        selectNode() {
+          contentContainer.classList.add("!border-primary");
+          code.classList.add("selected-element-tag");
+          bottomCode.classList.remove("!text-gray-400", "!dark:text-gray-400");
+          bottomCode.classList.add("!text-[#000000]", "!dark:text-[#DCDCDC]");
+          bottomCodeKey.classList.add("!text-[#008080]", "!dark:text-[#3dc9b0]");
+        },
+        deselectNode() {
+          contentContainer.classList.remove("!border-primary");
+          code.classList.remove("selected-element-tag");
+          bottomCode.classList.add("!text-gray-400", "!dark:text-gray-400");
+          bottomCode.classList.remove("!text-[#000000]", "!dark:text-[#DCDCDC]");
+          bottomCodeKey.classList.remove("!text-[#008080]", "!dark:text-[#3dc9b0]");
+        },
+        stopEvent(event) {
+          return referenceView.stopEvent(event);
+        },
+        update(newNode) {
+          if (newNode.type.name !== "element") return false;
+
+          node = newNode as Node;
+          getOpeningTag(node).then((openingTag) => (code.textContent = openingTag));
+          bottomCodeKey.textContent = getClosingTag(node);
+
+          if (node.content.size) {
+            bottomCode.classList.remove("!hidden");
+          } else {
+            bottomCode.classList.add("!hidden");
+          }
+
+          return true;
+        }
+      };
+    };
+  }
+});
+
+export { Element };
+export type { ElementAttributes };

--- apps/web/src/lib/editor/extensions/embed/menu.tsx ---
@@ -1,9 +1,8 @@
 import { EmbedAttributes } from "./node";
 import { SolidNodeViewProps, Attrs } from "@vrite/tiptap-solid";
-import { Component } from "solid-js";
-import { mdiDotsGrid } from "@mdi/js";
-import { IconButton, Input, Tooltip } from "#components/primitives";
-import { EmbedType, getEmbedId, getEmbedSrc } from "#lib/utils";
+import { Component, createEffect, createSignal, on } from "solid-js";
+import { Card, Input } from "#components/primitives";
+import { EmbedType, createRef, getEmbedId, getEmbedSrc } from "#lib/utils";
 
 interface ImageMenuProps {
   state: SolidNodeViewProps<Attrs>;
@@ -22,6 +21,8 @@ const getInputPlaceholder = (embedType?: EmbedType): string => {
   }
 };
 const EmbedMenu: Component<ImageMenuProps> = (props) => {
+  const [menuRef, setMenuRef] = createRef<HTMLElement | null>(null);
+  const [left, setLeft] = createSignal(0);
   const attrs = (): EmbedAttributes => props.state.node.attrs;
   const getSrc = (input: string): string => {
     return getEmbedSrc(
@@ -30,18 +31,40 @@ const EmbedMenu: Component<ImageMenuProps> = (props) => {
     );
   };
 
+  createEffect(
+    on(
+      () => props.state.selected,
+      () => {
+        const element = menuRef();
+
+        if (!element || !element.parentElement) return;
+
+        const { left, width } = element.parentElement.getBoundingClientRect();
+        const right = window.innerWidth - left - width;
+
+        setLeft(-Math.abs((right - left) / 2));
+      }
+    )
+  );
+
   return (
-    <div class="flex p-0 transition-shadow duration-200 border-0 rounded-xl">
-      <Input
-        wrapperClass="flex-1 max-w-full"
-        color="contrast"
-        placeholder={getInputPlaceholder(attrs().embed as EmbedType)}
-        value={attrs().input || ""}
-        disabled={!props.state.editor.isEditable}
-        setValue={(value) => {
-          props.state.updateAttributes({ input: value, src: getSrc(value) });
-        }}
-      />
+    <div
+      class="pointer-events-auto flex bg-gray-50 dark:bg-gray-900 !md:bg-transparent border-gray-200 dark:border-gray-700 border-y-2 md:border-0 backdrop-blur-sm md:gap-2 w-screen md:w-auto !md:left-unset relative md:rounded-2xl"
+      style={{ left: `${left()}px` }}
+      ref={setMenuRef}
+    >
+      <Card class="flex m-0 border-0 md:border-2 p-1">
+        <Input
+          wrapperClass="max-w-full min-w-unset md:w-96 flex-1"
+          class="w-full bg-transparent m-0 flex-1 text-lg"
+          placeholder={getInputPlaceholder(attrs().embed as EmbedType)}
+          value={attrs().input || ""}
+          disabled={!props.state.editor.isEditable}
+          setValue={(value) => {
+            props.state.updateAttributes({ input: value, src: getSrc(value) });
+          }}
+        />
+      </Card>
     </div>
   );
 };

--- apps/web/src/lib/editor/extensions/embed/view.tsx ---
@@ -4,7 +4,7 @@ import { NodeViewWrapper, useSolidNodeView } from "@vrite/tiptap-solid";
 import { Component, createSignal, Show } from "solid-js";
 import clsx from "clsx";
 import { mdiCodepen, mdiYoutube } from "@mdi/js";
-import { Card, Icon } from "#components/primitives";
+import { Icon } from "#components/primitives";
 import { codeSandboxIcon } from "#assets/icons";
 import { EmbedType } from "#lib/utils";
 
@@ -31,14 +31,14 @@ const EmbedView: Component = () => {
   };
 
   return (
-    <NodeViewWrapper class="my-5">
+    <NodeViewWrapper>
       <div class={clsx("relative rounded-2xl", selected() && "ring ring-primary ring-2")}>
         <Show
           when={attrs().src}
           fallback={
             <div
               class={clsx(
-                "pt-[35%] w-full rounded-t-2xl bg-gradient-to-tr flex justify-center items-center relative"
+                "pt-[35%] w-full rounded-2xl bg-gradient-to-tr flex justify-center items-center relative border-2 border-gray-300 dark:border-gray-700"
               )}
             >
               <div class="absolute flex flex-col items-center justify-center font-bold text-white transform -translate-y-1/2 top-1/2">
@@ -55,13 +55,18 @@ const EmbedView: Component = () => {
         >
           <iframe
             src={attrs().src || ""}
-            class="object-contain w-full m-0 transition-opacity duration-300 border-2 border-gray-200 dark:border-gray-700 aspect-video min-h-96 rounded-t-2xl"
+            class="object-contain w-full m-0 transition-opacity duration-300 border-2 border-gray-300 dark:border-gray-700 aspect-video min-h-96 rounded-2xl"
           />
         </Show>
-
-        <Card class="m-0 border-t-0 rounded-t-none">
+        <div
+          class={clsx(
+            "absolute w-full justify-center items-center -bottom-14 z-1 pointer-events-none",
+            selected() ? "grid" : "hidden"
+          )}
+        >
           <EmbedMenu state={state()} />
-        </Card>
+        </div>
+        <div data-type="draggable-item" />
       </div>
     </NodeViewWrapper>
   );

--- apps/web/src/lib/editor/extensions/image/menu.tsx ---
@@ -1,87 +1,120 @@
 import { ImageAttributes, ImageOptions } from "./node";
 import { SolidNodeViewProps } from "@vrite/tiptap-solid";
 import { mdiLinkVariant, mdiText, mdiUpload } from "@mdi/js";
-import { Component, createSignal, Show } from "solid-js";
+import { Component, createEffect, createSignal, on, onMount } from "solid-js";
 import { nanoid } from "nanoid";
 import { debounce } from "@solid-primitives/scheduled";
-import { uploadFile as uploadFileUtil } from "#lib/utils";
-import { Button, IconButton, Input, Loader, Tooltip } from "#components/primitives";
+import clsx from "clsx";
+import { createRef, uploadFile as uploadFileUtil } from "#lib/utils";
+import { Card, IconButton, Input, Tooltip } from "#components/primitives";
 
 interface ImageMenuProps {
   state: SolidNodeViewProps<ImageAttributes>;
 }
 
 const ImageMenu: Component<ImageMenuProps> = (props) => {
   const { storage } = props.state.extension;
+  const [menuRef, setMenuRef] = createRef<HTMLElement | null>(null);
   const [inputMode, setInputMode] = createSignal<"alt" | "src">("src");
   const [uploading, setUploading] = createSignal(false);
+  const [left, setLeft] = createSignal(0);
   const attrs = (): ImageAttributes => props.state.node.attrs;
   const options = (): ImageOptions => props.state.extension.options;
+  const placeholder = (): string => {
+    if (inputMode() === "src") {
+      return options().cover ? "Cover image URL" : "Image URL";
+    }
+
+    return options().cover ? "Cover alt description" : "Alt description";
+  };
   const updateAttribute = debounce((attribute: "src" | "alt", value: string) => {
     return props.state.updateAttributes({ [attribute]: value });
   }, 200);
-  const inputId = nanoid();
   const uploadFile = async (file?: File | null): Promise<void> => {
     if (file && file.type.includes("image")) {
       setUploading(true);
 
       const uploadedUrl = await uploadFileUtil(file);
 
-      if (uploadedUrl) {
-        props.state.updateAttributes({ src: uploadedUrl });
-      }
+      if (uploadedUrl) props.state.updateAttributes({ src: uploadedUrl });
 
       setUploading(false);
     }
   };
-  const getPlaceholder = (): string => {
-    if (inputMode() === "src") {
-      return options().cover ? "Cover image URL" : "Image URL";
-    }
-
-    return options().cover ? "Cover alt description" : "Alt description";
-  };
+  const inputId = nanoid();
 
   if (storage.droppedFile()) {
     uploadFile(storage.droppedFile());
     storage.setDroppedFile(null);
   }
 
+  createEffect(
+    on(
+      () => props.state.selected,
+      () => {
+        const element = menuRef();
+
+        if (!element || !element.parentElement) return;
+
+        const { left, width } = element.parentElement.getBoundingClientRect();
+        const right = window.innerWidth - left - width;
+
+        setLeft(-Math.abs((right - left) / 2));
+      }
+    )
+  );
+
   return (
-    <div class="flex p-0 transition-shadow duration-200 border-0 rounded-xl">
-      <Tooltip text="Alt">
-        <IconButton
-          path={mdiText}
-          color={inputMode() === "alt" ? "primary" : "contrast"}
-          text={inputMode() === "alt" ? "primary" : "soft"}
-          onClick={() => {
-            setInputMode("alt");
+    <div
+      class={clsx(
+        "pointer-events-auto flex bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-700 border-y-2 backdrop-blur-sm relative !md:left-unset",
+        options().cover && "w-full border-t-0",
+        !options().cover &&
+          "md:gap-2 w-screen md:w-auto md:border-0 md:rounded-2xl !md:bg-transparent"
+      )}
+      style={{ left: `${left()}px` }}
+      ref={setMenuRef}
+    >
+      <Card class={clsx("flex py-0 m-0 border-0  px-1 gap-1", !options().cover && "md:border-2")}>
+        <Tooltip text="Alt">
+          <IconButton
+            path={mdiText}
+            color={inputMode() === "alt" ? "primary" : "contrast"}
+            text={inputMode() === "alt" ? "primary" : "soft"}
+            variant={inputMode() === "alt" ? "solid" : "text"}
+            class="m-0"
+            onClick={() => {
+              setInputMode("alt");
+            }}
+          ></IconButton>
+        </Tooltip>
+        <Tooltip text="Image URL">
+          <IconButton
+            path={mdiLinkVariant}
+            color={inputMode() === "src" ? "primary" : "contrast"}
+            text={inputMode() === "src" ? "primary" : "soft"}
+            variant={inputMode() === "src" ? "solid" : "text"}
+            class="m-0"
+            onClick={() => {
+              setInputMode("src");
+            }}
+          ></IconButton>
+        </Tooltip>
+      </Card>
+      <Card class={clsx("p-1 m-0 border-0 flex-1", !options().cover && "md:border-2")}>
+        <Input
+          wrapperClass={clsx("max-w-full min-w-unset flex-1", !options().cover && "md:w-96 ")}
+          class="w-full bg-transparent m-0 flex-1 text-lg"
+          placeholder={placeholder()}
+          value={attrs()[inputMode()] || ""}
+          disabled={!props.state.editor.isEditable}
+          setValue={(value) => {
+            updateAttribute.clear();
+            updateAttribute(inputMode(), value);
           }}
-        ></IconButton>
-      </Tooltip>
-      <Tooltip text="Image URL">
-        <IconButton
-          path={mdiLinkVariant}
-          color={inputMode() === "src" ? "primary" : "contrast"}
-          text={inputMode() === "src" ? "primary" : "soft"}
-          onClick={() => {
-            setInputMode("src");
-          }}
-        ></IconButton>
-      </Tooltip>
-      <Input
-        color="contrast"
-        wrapperClass="flex-1 max-w-full min-w-unset"
-        class="w-full"
-        placeholder={getPlaceholder()}
-        value={attrs()[inputMode()] || ""}
-        disabled={!props.state.editor.isEditable}
-        setValue={(value) => {
-          updateAttribute.clear();
-          updateAttribute(inputMode(), value);
-        }}
-      />
-      <Show when={props.state.editor.isEditable}>
+        />
+      </Card>
+      <Card class={clsx("p-1 m-0 border-0", !options().cover && "md:border-2")}>
         <input
           type="file"
           hidden
@@ -95,20 +128,19 @@ const ImageMenu: Component<ImageMenuProps> = (props) => {
           }}
         />
         <label for={inputId} class="flex items-center justify-center">
-          <Tooltip text={uploading() ? "Uploading" : "Upload image"}>
-            <Show
-              when={!uploading()}
-              fallback={
-                <Button badge color="contrast" class="flex items-center justify-center w-8 h-8">
-                  <Loader class="w-6 h-6" />
-                </Button>
-              }
-            >
-              <IconButton path={mdiUpload} color="contrast" text="soft" badge></IconButton>
-            </Show>
+          <Tooltip text={uploading() ? "Uploading" : "Upload image"} class="mt-1">
+            <IconButton
+              loading={uploading()}
+              path={mdiUpload}
+              color="contrast"
+              class="m-0"
+              text="soft"
+              badge
+              variant="text"
+            ></IconButton>
           </Tooltip>
         </label>
-      </Show>
+      </Card>
     </div>
   );
 };

--- apps/web/src/lib/editor/extensions/image/view.tsx ---
@@ -6,14 +6,14 @@ import clsx from "clsx";
 import { mdiAlertCircle, mdiImage } from "@mdi/js";
 import { debounce } from "@solid-primitives/scheduled";
 import { createRef, validateURL } from "#lib/utils";
-import { Card, Icon, Loader } from "#components/primitives";
+import { Icon, Loader } from "#components/primitives";
 
 const ImageView: Component = () => {
   const { state } = useSolidNodeView<ImageAttributes>();
   const [error, setError] = createSignal(false);
   const [loading, setLoading] = createSignal(false);
   const [objectURL, setObjectURL] = createSignal("");
-  const [currentSrc, setCurrentSrc] = createRef("");
+  const [currentSrc, setCurrentSrc] = createSignal("");
   const [imageContainerRef, setImageContainerRef] = createRef<HTMLElement | null>(null);
   const updateWidth = debounce((width: string) => state().updateAttributes({ width }), 250);
   const updateAspectRatio = debounce(
@@ -38,7 +38,7 @@ const ImageView: Component = () => {
     }
   });
   const removeImage = (): void => {
-    if (objectURL()) {
+    if (currentSrc()) {
       URL.revokeObjectURL(objectURL());
       setCurrentSrc("");
       setObjectURL("");
@@ -56,42 +56,21 @@ const ImageView: Component = () => {
 
     removeImage();
 
-    try {
-      if (!src) {
-        setError(false);
-        setLoading(false);
-
-        return;
-      }
-
-      if (!validateURL(src)) {
-        setError(true);
-        setLoading(false);
-
-        return;
-      }
-
-      const response = await fetch(
-        src.startsWith(window.env.PUBLIC_ASSETS_URL) ? src : `/proxy?url=${encodeURIComponent(src)}`
-      );
-
-      if (!response.ok) {
-        setError(true);
-        setLoading(false);
-
-        return;
-      }
+    if (!src) {
+      setError(false);
+      setLoading(false);
 
-      const blob = await response.blob();
-      const objectURL = URL.createObjectURL(blob);
+      return;
+    }
 
-      setCurrentSrc(src);
-      setObjectURL(objectURL);
-    } catch (error) {
+    if (!validateURL(src)) {
       setError(true);
-    } finally {
       setLoading(false);
+
+      return;
     }
+
+    setCurrentSrc(src);
   }, 350);
   const handleNewImageContainer = (element: HTMLElement): void => {
     const imageContainer = imageContainerRef();
@@ -133,7 +112,7 @@ const ImageView: Component = () => {
   );
 
   return (
-    <NodeViewWrapper class={clsx(!options().cover && "my-5")}>
+    <NodeViewWrapper>
       <div
         class={clsx(
           "relative rounded-2xl",
@@ -143,84 +122,88 @@ const ImageView: Component = () => {
         <div
           class={clsx(
             "border-gray-200 dark:border-gray-700",
-            options().cover ? "border-b-2" : "border-2 rounded-t-2xl"
+            options().cover ? "border-b-2" : "border-2 rounded-2xl"
           )}
         >
-          <Show
-            when={objectURL()}
-            fallback={
-              <div
-                class={clsx(
-                  "w-full bg-gradient-to-tr flex justify-center items-center relative",
-                  options().cover ? "min-h-48" : "rounded-t-2xl"
-                )}
-                style={{
-                  "padding-top": getPaddingTop()
-                }}
-              >
-                <div class="absolute flex flex-col items-center justify-center font-bold text-white transform -translate-y-1/2 top-1/2">
-                  <Show when={!loading()} fallback={<Loader class="w-8 h-8" />}>
-                    <Show
-                      when={!error()}
-                      fallback={
-                        <>
-                          <Icon path={mdiAlertCircle} class="w-16 h-16" />
-                          <span class="absolute top-full">Error</span>
-                        </>
-                      }
-                    >
-                      <Icon path={mdiImage} class="w-16 h-16" />
-                    </Show>
-                  </Show>
-                </div>
-              </div>
-            }
+          <div
+            class={clsx(
+              "w-full border-gray-200 dark:border-gray-700 flex justify-center items-center overflow-hidden bg-gray-100 dark:bg-gray-800 relative",
+              !error() && !loading() && currentSrc() ? "" : "opacity-0 !absolute",
+              !options().cover && "rounded-2xl"
+            )}
           >
             <div
               class={clsx(
-                "w-full border-gray-200 dark:border-gray-700 flex justify-center items-center overflow-hidden bg-gray-100 dark:bg-gray-800 relative",
-                !options().cover && "rounded-t-2xl"
+                "overflow-hidden min-w-40 !h-full",
+                state().editor.isEditable && "resize"
+              )}
+              ref={handleNewImageContainer}
+              style={{ width: attrs().width }}
+            >
+              <img
+                alt={attrs().alt}
+                src={currentSrc()}
+                class={clsx("object-contain w-full m-0 transition-opacity duration-300")}
+                onLoad={(event) => {
+                  setError(false);
+                  setLoading(false);
+
+                  const image = event.currentTarget;
+                  const w = image.naturalWidth;
+                  const h = image.naturalHeight;
+                  const aspectRatio = w / h;
+
+                  updateAspectRatio.clear();
+                  updateAspectRatio(`${aspectRatio}`);
+                }}
+                onError={() => {
+                  if (!currentSrc()) return;
+
+                  setLoading(false);
+                  removeImage();
+                  setError(true);
+                }}
+              />
+            </div>
+          </div>
+          <Show when={loading() || !currentSrc()}>
+            <div
+              class={clsx(
+                "w-full bg-gradient-to-tr flex justify-center items-center relative",
+                options().cover ? "min-h-48" : "rounded-2xl"
               )}
+              style={{
+                "padding-top": getPaddingTop()
+              }}
             >
-              <div
-                class={clsx(
-                  "overflow-hidden min-w-40 !h-full",
-                  state().editor.isEditable && "resize"
-                )}
-                ref={handleNewImageContainer}
-                style={{ width: attrs().width }}
-              >
-                <img
-                  alt={attrs().alt}
-                  src={objectURL()}
-                  data-src={currentSrc()}
-                  class={clsx("object-contain w-full m-0 transition-opacity duration-300")}
-                  onLoad={(event) => {
-                    const image = event.currentTarget;
-                    const w = image.naturalWidth;
-                    const h = image.naturalHeight;
-                    const aspectRatio = w / h;
-
-                    updateAspectRatio.clear();
-                    updateAspectRatio(`${aspectRatio}`);
-                  }}
-                  onError={() => {
-                    removeImage();
-                    setError(true);
-                  }}
-                />
+              <div class="absolute flex flex-col items-center justify-center font-bold text-white transform -translate-y-1/2 top-1/2">
+                <Show when={!loading()} fallback={<Loader class="w-8 h-8" />}>
+                  <Show
+                    when={!error()}
+                    fallback={
+                      <>
+                        <Icon path={mdiAlertCircle} class="w-16 h-16" />
+                        <span class="absolute top-full">Error</span>
+                      </>
+                    }
+                  >
+                    <Icon path={mdiImage} class="w-16 h-16" />
+                  </Show>
+                </Show>
               </div>
             </div>
           </Show>
         </div>
-        <Card
+        <div
           class={clsx(
-            "m-0 border-0 border-b-2 rounded-t-none",
-            options().cover ? "rounded-none" : "border-x-2"
+            "w-full justify-center items-center z-1 pointer-events-none",
+            selected() ? "grid" : "hidden",
+            options().cover ? "!flex relative" : "absolute -bottom-14"
           )}
         >
           <ImageMenu state={state()} />
-        </Card>
+        </div>
+        <div data-type="draggable-item" />
       </div>
     </NodeViewWrapper>
   );

--- apps/web/src/lib/editor/extensions/index.ts ---
@@ -12,5 +12,6 @@ export * from "./block-action-menu";
 export * from "./comment-menu";
 export * from "./block-paste";
 export * from "./table-menu";
-export * from "./wrapper";
+export * from "./element";
 export * from "./auto-dir";
+export * from "./element-menu";

--- apps/web/src/lib/editor/extensions/slash-menu/component.tsx ---
@@ -12,7 +12,7 @@ interface SlashMenuItem {
   icon: string;
   label: string;
   group: string;
-  block?: App.WorkspaceSettings["blocks"][number] | "wrapper";
+  block?: App.WorkspaceSettings["blocks"][number];
   embed?: App.WorkspaceSettings["embeds"][number];
   ref: Ref<HTMLElement | null>;
   command(params: { editor: SolidEditor; range: Range }): void;

--- apps/web/src/lib/editor/extensions/wrapper/menu.tsx ---
@@ -1,48 +0,0 @@
-import { Component, createEffect, createSignal } from "solid-js";
-import { SearchableSelect } from "#components/fragments";
-import { App, useAuthenticatedUserData } from "#context";
-
-interface WrapperMenuProps {
-  state: {
-    key: string;
-    setKey(key: string): void;
-  };
-}
-
-const WrapperMenu: Component<WrapperMenuProps> = (props) => {
-  const { workspaceSettings } = useAuthenticatedUserData();
-  const selectedOption = (): App.Wrapper | null => {
-    return (
-      (workspaceSettings()?.wrappers || []).find((wrapper) => wrapper.key === props.state.key) ||
-      null
-    );
-  };
-
-  props.state.setKey(selectedOption()?.key || "");
-
-  return (
-    <div class="w-full flex items-center justify-start text-base" contentEditable={false}>
-      <div>
-        <SearchableSelect
-          extractId={(option) => option.key}
-          filterOption={(option, query) => option.label.toLowerCase().includes(query.toLowerCase())}
-          options={workspaceSettings()?.wrappers || []}
-          renderOption={(option) => <div class="text-start">{option.label}</div>}
-          selectOption={(option) => {
-            props.state.setKey(option?.key || "");
-          }}
-          selected={selectedOption()}
-          loading={false}
-          placeholder="Wrapper"
-          buttonProps={{
-            class: "bg-gray-100",
-            color: "base",
-            text: "soft"
-          }}
-        />
-      </div>
-    </div>
-  );
-};
-
-export { WrapperMenu };

--- apps/web/src/lib/editor/extensions/wrapper/node.tsx ---
@@ -1,133 +0,0 @@
-import { WrapperMenu } from "./menu";
-import { Wrapper as BaseWrapper, WrapperAttributes } from "@vrite/editor";
-import { SolidEditor, SolidRenderer } from "@vrite/tiptap-solid";
-import { NodeView } from "@tiptap/core";
-import { keymap } from "@tiptap/pm/keymap";
-import { Node } from "@tiptap/pm/model";
-import { EditorState } from "@tiptap/pm/state";
-
-const Wrapper = BaseWrapper.extend({
-  addProseMirrorPlugins() {
-    const handleDeleteWrapper = (state: EditorState): boolean => {
-      if (this.editor.isActive("wrapper")) {
-        const currentDepth = state.selection.$from.depth;
-
-        let node: Node | null = null;
-        let pos: number | null = null;
-
-        for (let i = currentDepth; i >= 0; i--) {
-          const currentNode = state.selection.$from.node(i);
-
-          if (currentNode.type.name === "wrapper") {
-            node = currentNode;
-            pos = i > 0 ? state.selection.$from.before(i) : 0;
-            break;
-          }
-        }
-
-        if (
-          node &&
-          !node.textContent &&
-          node.content.childCount === 1 &&
-          node.content.firstChild?.type.name === "paragraph" &&
-          typeof pos === "number"
-        ) {
-          this.editor
-            .chain()
-            .deleteRange({
-              from: pos,
-              to: pos + node.nodeSize
-            })
-            .focus()
-            .run();
-
-          return true;
-        }
-      }
-
-      return false;
-    };
-
-    return [
-      keymap({
-        Delete: handleDeleteWrapper,
-        Backspace: handleDeleteWrapper
-      })
-    ];
-  },
-  addNodeView() {
-    const editor = this.editor as SolidEditor;
-
-    return (props) => {
-      let node = props.node as Node;
-
-      const referenceView = new NodeView(() => {}, props);
-      const dom = document.createElement("div");
-      const content = document.createElement("div");
-      const menu = document.createElement("div");
-
-      dom.setAttribute(
-        "class",
-        "px-3 pt-3 my-5 rounded-3xl border-gray-300 bg-gray-300 bg-opacity-30 dark:border-gray-700 dark:bg-gray-700 dark:bg-opacity-40 border-2"
-      );
-      dom.setAttribute("data-wrapper", "true");
-      content.setAttribute("class", "relative content mb-3");
-      menu.setAttribute("class", "mb-5");
-      menu.contentEditable = "false";
-
-      const renderer = new SolidRenderer<{ key: string; setKey(value: string): void }>(
-        WrapperMenu,
-        {
-          editor: this.editor as SolidEditor,
-          state: {
-            key: node.attrs.key,
-            setKey: (key) => {
-              if (typeof props.getPos === "function") {
-                editor.view.dispatch(
-                  editor.view.state.tr.setNodeMarkup(props.getPos(), undefined, {
-                    key: key || null
-                  })
-                );
-              }
-            }
-          }
-        }
-      );
-
-      menu.append(renderer.element);
-      dom.append(menu, content);
-
-      return {
-        dom,
-        contentDOM: content,
-        ignoreMutation(mutation: MutationRecord | { type: "selection"; target: Element }) {
-          if (mutation.type === "selection") {
-            return false;
-          }
-
-          return referenceView.ignoreMutation(mutation);
-        },
-        stopEvent(event) {
-          return referenceView.stopEvent(event);
-        },
-        destroy() {
-          renderer.destroy();
-        },
-        update(newNode) {
-          if (newNode.type.name !== "wrapper") return false;
-
-          node = newNode as Node;
-          renderer.setState((state) => ({
-            ...state,
-            key: node.attrs.key
-          }));
-
-          return true;
-        }
-      };
-    };
-  }
-});
-
-export { Wrapper };
-export type { WrapperAttributes };

--- apps/web/src/lib/monaco.ts ---
@@ -14,29 +14,14 @@ declare global {
 }
 
 monaco.editor.defineTheme("dark", { ...darkTheme, base: "vs-dark" });
-monaco.editor.defineTheme("light", { ...lightTheme, base: "vs-dark" });
-monaco.editor.defineTheme("dark-contrast", {
-  ...darkTheme,
-  colors: {
-    ...darkTheme.colors,
-    "editor.background": "#1f2937",
-    "editorWidget.background": "#111827"
-  },
-  base: "vs-dark"
-});
-monaco.editor.defineTheme("light-contrast", {
-  ...lightTheme,
-  colors: {
-    ...lightTheme.colors,
-    "editor.background": "#f3f4f6",
-    "editorWidget.background": "#f9fafb"
-  },
-  base: "vs-dark"
-});
+monaco.editor.defineTheme("light", { ...lightTheme, base: "vs" });
 monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
   noSemanticValidation: true,
   noSyntaxValidation: true
 });
+monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({
+  diagnosticCodesToIgnore: [17008, 1005]
+});
 monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
   noUnusedLocals: false
 });

--- apps/web/src/styles/styles.css ---
@@ -18,12 +18,14 @@
 }
 
 .ProseMirror-gapcursor {
-  width: 100%;
+  @apply !w-full !m-0;
 }
 .ProseMirror-gapcursor::after {
-  width: 100% !important;
-  top: -19px !important;
-  @apply !border-primary my-2;
+  @apply !border-primary !w-full !z-1 !my-0 !top-0;
+}
+div:not([data-element="true"]) + .ProseMirror-gapcursor:has(+ div)::after,
+div + .ProseMirror-gapcursor:has(+ div:not([data-element="true"]))::after {
+  @apply !my-2.5;
 }
 .ProseMirror-dropcursor {
   @apply text-primary;

--- apps/web/src/styles/styles.scss ---
@@ -43,12 +43,8 @@ kbd {
   cursor: col-resize;
 }
 .prose-editor {
-  .ProseMirror:not(:where(.not-prose, .not-prose *)) {
-    > * + div:not(.tableWrapper) {
-      @apply mb-5;
-    }
-
-    padding-bottom: 8rem;
+  .ProseMirror {
+    @apply pb-48;
   }
   .tableWrapper {
     @apply overflow-auto pb-2 mb-3;
@@ -72,11 +68,11 @@ kbd {
     }
 
     tr {
-      @apply border-2 border-gray-200 dark:border-gray-700;
+      @apply border-2 border-gray-300 dark:border-gray-700;
     }
     td,
     th {
-      @apply text-left font-500 border-2 border-gray-200 dark:border-gray-700 relative p-2 vertical-top;
+      @apply text-left font-500 border-2 border-gray-300 dark:border-gray-700 relative p-2 vertical-top;
       min-width: 100px;
       border-style: none solid solid none;
       word-break: break-all;
@@ -210,10 +206,10 @@ kbd {
   :where(ul:not([data-type="taskList"]) li > * + *, ol li > * + *):not(
       :where(.not-prose, .not-prose *)
     ) {
-    @apply my-5;
+    // @apply my-5;
   }
   :where(li > ul, li > ol, li > div > ul, li > div > ol):not(:where(.not-prose, .not-prose *)) {
-    @apply m-0;
+    //@apply m-0;
   }
   :where(ul[data-type="taskList"]):not(:where(.not-prose, .not-prose *)) {
     padding-left: 0rem;
@@ -256,14 +252,37 @@ kbd {
   --un-prose-hr: #6b7280;
   --un-prose-invert-lists: #9ca3af;
   --un-prose-invert-hr: #9ca3af;
-  --highlighted-thread: "G3JAKWBAsWA1xXnPcJ-Zu";
+  --highlighted-thread: "";
+  :where([aria-expanded="false"] > .ProseMirror, .content, blockquote, li) {
+    &
+      > :where(div, ul, ol, p, blockquote, hr):not(.ProseMirror-gapcursor)
+      + :where(div, ul, ol, p, blockquote, hr, h1, h2, h3, h4, h5, h6):not([data-element="true"]),
+    &
+      > :where(div, ul, ol, p, blockquote, hr):not([data-element="true"], .ProseMirror-gapcursor)
+      + :where(div, ul, ol, p, blockquote, hr, h1, h2, h3, h4, h5, h6),
+    &
+      > :where(div, ul, ol, p, blockquote, hr):not(.ProseMirror-gapcursor)
+      + .ProseMirror-gapcursor
+      + :where(div, ul, ol, p, blockquote, hr, h1, h2, h3, h4, h5, h6):not([data-element="true"]),
+    &
+      > :where(div, ul, ol, p, blockquote, hr):not([data-element="true"], .ProseMirror-gapcursor)
+      + .ProseMirror-gapcursor
+      + :where(div, ul, ol, p, blockquote, hr, h1, h2, h3, h4, h5, h6) {
+      @apply mt-5;
+    }
+  }
 
-  :where(div[data-wrapper="true"]) {
+  :where(div[data-element="true"]) {
     .content > :first-child,
-    .content > :first-child [data-node-view-wrapper="true"] {
+    .content > .ProseMirror-gapcursor:first-child + *,
+    .content > :first-child > div > [data-node-view-wrapper="true"],
+    .content > .ProseMirror-gapcursor:first-child + * > div > [data-node-view-wrapper="true"] {
       margin-top: 0 !important;
     }
-    .content > :last-child:not([data-wrapper="true"]) {
+    .content > :last-child,
+    .content > .ProseMirror-gapcursor:last-child + *,
+    .content > :last-child > div > [data-node-view-wrapper="true"],
+    .content > .ProseMirror-gapcursor:last-child + * > div > [data-node-view-wrapper="true"] {
       margin-bottom: 0 !important;
     }
   }
@@ -276,8 +295,7 @@ kbd {
       content: unset !important;
     }
     @apply bg-gray-200 text-gray-700 font-medium dark:bg-gray-900 dark:text-gray-300 py-1 px-2 rounded-lg;
-    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
-      "Courier New", monospace !important;
+    font-family: "JetBrainsMonoVariable", monospace !important;
   }
   :where(mark) {
     @apply text-gray-700;
@@ -353,21 +371,8 @@ kbd {
     margin: 0;
   }
 }
-.rounded {
-  .monaco-editor,
-  .monaco-editor > *:first-child {
-    @apply rounded-2xl;
-  }
-  .monaco-editor .editor-widget {
-    @apply overflow-hidden rounded-lg;
-  }
-  .monaco-editor .monaco-hover {
-    @apply rounded-lg;
-  }
-}
-
-.ProseMirror .rounded .monaco-editor,
-.ProseMirror .rounded .monaco-editor > *:first-child {
+.ProseMirror .monaco-editor,
+.ProseMirror .monaco-editor > *:first-child {
   @apply rounded-b-none;
 }
 .split-view[data-code-editor-theme="dark"] .monaco-diff-editor {
@@ -387,3 +392,85 @@ kbd {
     @apply md:(border-l-1 border-gray-200);
   }
 }
+
+.monaco-editor .editor-widget {
+  @apply overflow-hidden;
+  border-radius: 0.5rem !important;
+}
+.monaco-editor .monaco-hover {
+  border-radius: 0.5rem !important;
+}
+.rounded-editor-2xl {
+  .monaco-editor,
+  .monaco-editor > *:first-child {
+    @apply rounded-2xl;
+  }
+}
+.rounded-editor-t-2xl {
+  .monaco-editor,
+  .monaco-editor > *:first-child {
+    border-top-left-radius: calc(1rem - 2px);
+    border-top-right-radius: calc(1rem - 2px);
+  }
+}
+
+.rounded-editor-lg {
+  .monaco-editor,
+  .monaco-editor > *:first-child {
+    @apply rounded-lg;
+  }
+}
+.customized-editor-show-keyboard-hidden {
+  [widgetid="editor.contrib.ShowKeyboardWidget"] {
+    display: none !important;
+  }
+}
+.customized-editor {
+  --customized-editor-background: #f9fafb;
+  --customized-editor-widget-background: #f3f4f6;
+  .mtk2 {
+    color: var(--customized-editor-background);
+  }
+  .monaco-editor {
+    .inputarea.ime-input {
+      background-color: var(--customized-editor-background);
+    }
+    .view-overlays .current-line {
+      background-color: var(--customized-editor-widget-background) !important;
+      @apply border-gray-300 border-0;
+    }
+    .view-overlays > *:last-child:first-child .current-line {
+      background-color: transparent !important;
+    }
+    --vscode-editor-background: var(--customized-editor-background);
+    --vscode-editorStickyScroll-background: var(--customized-editor-background);
+    --vscode-breadcrumb-background: var(--customized-editor-background);
+    --vscode-editorGutter-background: var(--customized-editor-background);
+    --vscode-editorMarkerNavigation-background: var(--customized-editor-background);
+
+    // Editor Widget
+    .find-widget {
+      background-color: var(--customized-editor-widget-background);
+    }
+    --vscode-editorWidget-background: var(--customized-editor-widget-background);
+    --vscode-quickInput-background: var(--customized-editor-widget-background);
+    --vscode-editorHoverWidget-background: var(--customized-editor-widget-background);
+    --vscode-listFilterWidget-background: var(--customized-editor-widget-background);
+    --vscode-checkbox-selectBackground: var(--customized-editor-widget-background);
+    --vscode-breadcrumbPicker-background: var(--customized-editor-widget-background);
+  }
+}
+.customized-editor-contrast {
+  --customized-editor-background: #f3f4f6;
+  --customized-editor-widget-background: #f9fafb;
+}
+.dark {
+  .customized-editor {
+    --customized-editor-background: #111827;
+    --customized-editor-widget-background: #1f2937;
+  }
+  .customized-editor-contrast {
+    --customized-editor-background: #1f2937;
+    --customized-editor-widget-background: #111827;
+  }
+}

--- apps/web/src/views/auth/error-messages.tsx ---
@@ -2,6 +2,7 @@ const errorMessages: Record<string, string> = {
   invalidEmail: "Incorrect email address",
   invalidCredentials: "Invalid credentials",
   emailNotVerified: "Email not verified",
+  magicLinkAlreadySent: "Wait 1 min before requesting a new magic link",
   totpTokenInvalid: "Invalid 2FA code",
   resourceNotFound: "User not found",
   alreadyExists: "User already exists"

--- apps/web/src/views/conflict/index.tsx ---
@@ -129,7 +129,7 @@ const ConflictView: Component<{ monaco: typeof monaco }> = (props) => {
         data-code-editor-theme={codeEditorTheme()}
       />
       <Show when={!conflictData() || currentContent.loading}>
-        <div class="h-full w-full absolute top-0 left-0 bg-gray-100 dark:bg-gray-800 flex justify-center items-center">
+        <div class="h-full w-full absolute top-0 left-0 bg-gray-100 dark:bg-gray-800 flex justify-center items-center z-12">
           <Show when={!conflictData()} fallback={<Loader />}>
             <span class="text-2xl font-semibold text-gray-500 dark:text-gray-400">
               Select a conflict to resolve

--- apps/web/src/views/content-piece/sections/details/slug.tsx ---
@@ -31,7 +31,12 @@ const SlugInput: Component<SlugInputProps> = (props) => {
           onChange={(event) => {
             const { value } = event.currentTarget;
 
-            props.setSlug(convertToSlug(value));
+            props.setSlug(
+              value
+                .split("/")
+                .map((slugPart) => convertToSlug(slugPart))
+                .join("/")
+            );
           }}
         />
       </Show>

--- apps/web/src/views/editor/editor.tsx ---
@@ -18,7 +18,7 @@ import { CharacterCount } from "@tiptap/extension-character-count";
 import * as Y from "yjs";
 import { useLocation, useNavigate } from "@solidjs/router";
 import { CellSelection } from "@tiptap/pm/tables";
-import { AllSelection } from "@tiptap/pm/state";
+import { AllSelection, NodeSelection } from "@tiptap/pm/state";
 import clsx from "clsx";
 import { Instance } from "tippy.js";
 import { scrollIntoView } from "seamless-scroll-polyfill";
@@ -37,6 +37,7 @@ import {
   createBlockMenuOptions,
   BlockPaste,
   TableMenuPlugin,
+  ElementMenuPlugin,
   CommentMenuPlugin,
   AutoDir
 } from "#lib/editor";
@@ -143,6 +144,7 @@ const Editor: Component<EditorProps> = (props) => {
       }),
       hostConfig.extensions && BlockActionMenuPlugin,
       TableMenuPlugin,
+      ElementMenuPlugin,
       CommentMenuPlugin,
       Collab.configure({
         document: ydoc
@@ -172,9 +174,10 @@ const Editor: Component<EditorProps> = (props) => {
     const { empty } = selection;
     const isAllSelection = selection instanceof AllSelection;
     const isCellSelection = selection instanceof CellSelection;
+    const isNodeSelection = selection instanceof NodeSelection;
     const isEmptyTextBlock = !doc.textBetween(from, to).length && isTextSelection(state.selection);
 
-    if (!view.hasFocus() || isAllSelection) {
+    if ((!view.hasFocus() && !isNodeSelection) || isAllSelection) {
       setBubbleMenuOpened(false);
 
       return false;
@@ -187,7 +190,8 @@ const Editor: Component<EditorProps> = (props) => {
     }
 
     if (
-      ["image", "codeBlock", "embed", "horizontalRule"].some((name) => {
+      isNodeSelection &&
+      ["horizontalRule", "image", "codeBlock", "embed", "element"].some((name) => {
         return editor.isActive(name);
       })
     ) {
@@ -211,7 +215,10 @@ const Editor: Component<EditorProps> = (props) => {
     const { selection } = state;
     const { $anchor, empty } = selection;
     const isRootDepth =
-      $anchor.depth === 1 || ($anchor.depth === 2 && $anchor.node(1).type.name === "wrapper");
+      $anchor.depth === 1 ||
+      ["element", "blockquote", "listItem", "taskItem"].includes(
+        $anchor.node($anchor.depth - 1)?.type?.name
+      );
     const isEmptyTextBlock =
       $anchor.parent.isTextblock &&
       !$anchor.parent.type.spec.code &&
@@ -274,6 +281,8 @@ const Editor: Component<EditorProps> = (props) => {
               zIndex: 30,
               hideOnClick: false,
               interactive: true,
+              placement: "bottom",
+              popperOptions: { modifiers: [{ name: "flip", enabled: false }] },
               animation: breakpoints.md() ? "scale-subtle" : "shift-away-subtle",
               onHide() {
                 if (containerRef()?.contains(el)) return false;

--- apps/web/src/views/editor/menus/bubble-menu.tsx ---
@@ -1,441 +0,0 @@
-import { SolidEditor } from "@vrite/tiptap-solid";
-import {
-  mdiFormatBold,
-  mdiFormatItalic,
-  mdiFormatStrikethrough,
-  mdiCodeTags,
-  mdiLinkVariant,
-  mdiFormatColorHighlight,
-  mdiFormatSubscript,
-  mdiFormatSuperscript,
-  mdiCheck,
-  mdiDelete,
-  mdiTableColumnRemove,
-  mdiTableRowRemove,
-  mdiTableMergeCells,
-  mdiTableSplitCell,
-  mdiTableRemove,
-  mdiCommentOutline,
-  mdiTableHeadersEyeOff,
-  mdiPlus,
-  mdiKeyboardCloseOutline
-} from "@mdi/js";
-import { CellSelection } from "@tiptap/pm/tables";
-import { Component, createEffect, createSignal, For, Match, on, Show, Switch } from "solid-js";
-import { nanoid } from "nanoid";
-import clsx from "clsx";
-import { breakpoints, createRef, Ref } from "#lib/utils";
-import { Card, IconButton, Input, Tooltip } from "#components/primitives";
-import { App, useAuthenticatedUserData, useClient } from "#context";
-
-type BubbleMenuMode = "format" | "link" | "table" | "block";
-interface BubbleMenuProps {
-  editor: SolidEditor;
-  opened: boolean;
-  contentPieceId?: string;
-  class?: string;
-  mode?: BubbleMenuMode;
-  ref?: Ref<HTMLElement>[1];
-  blur?(): void;
-  setBlockMenuOpened?(opened: boolean): void;
-}
-
-const BubbleMenu: Component<BubbleMenuProps> = (props) => {
-  const [activeMarks, setActiveMarks] = createSignal<string[]>([]);
-  const { workspaceSettings = () => null } = useAuthenticatedUserData() || {};
-  const client = useClient();
-  const [mode, setMode] = createSignal<BubbleMenuMode>("format");
-  const [link, setLink] = createSignal("");
-  const [linkInputRef, setLinkInputRef] = createRef<HTMLInputElement | null>(null);
-  const commentMenuItem = {
-    icon: mdiCommentOutline,
-    mark: "comment",
-    label: "Comment",
-    async onClick() {
-      if (props.editor.isActive("comment")) {
-        props.editor.commands.unsetComment();
-      } else {
-        const threadFragment = nanoid();
-
-        props.editor.chain().setComment({ thread: threadFragment }).focus().run();
-
-        try {
-          await client.comments.createThread.mutate({
-            contentPieceId: props.contentPieceId || "",
-            fragment: threadFragment
-          });
-        } catch (error) {
-          props.editor.commands.unsetComment();
-        }
-      }
-    }
-  };
-  const closeKeyboardItem = {
-    icon: mdiKeyboardCloseOutline,
-    label: "Close keyboard",
-    async onClick() {
-      props.blur?.();
-    }
-  };
-  const menus = (
-    [
-      {
-        icon: mdiFormatBold,
-        mark: "bold",
-        label: "Bold"
-      },
-      {
-        icon: mdiFormatItalic,
-        mark: "italic",
-        label: "Italic"
-      },
-      {
-        icon: mdiFormatStrikethrough,
-        mark: "strike",
-        label: "Strike"
-      },
-      {
-        icon: mdiCodeTags,
-        mark: "code",
-        label: "Code"
-      },
-      {
-        icon: mdiLinkVariant,
-        mark: "link",
-        label: "Link",
-        onClick() {
-          setMode("link");
-        }
-      },
-      { icon: mdiFormatColorHighlight, mark: "highlight", label: "Highlight" },
-      { icon: mdiFormatSubscript, mark: "subscript", label: "Subscript" },
-      { icon: mdiFormatSuperscript, mark: "superscript", label: "Superscript" },
-      ...(props.contentPieceId && breakpoints.md() ? [commentMenuItem] : []),
-      ...(breakpoints.md() ? [] : [closeKeyboardItem])
-    ] as Array<{ icon: string; mark?: string; label: string; onClick?(): void }>
-  ).filter(({ mark }) => {
-    if (!mark || mark === "comment") return true;
-
-    if (!workspaceSettings()) {
-      return true;
-    }
-
-    return workspaceSettings()!.marks.includes(mark as App.WorkspaceSettings["marks"][number]);
-  });
-  const tableMenus = [
-    {
-      icon: mdiTableHeadersEyeOff,
-      label: "Toggle header cell off",
-      show() {
-        const { selection } = props.editor.state;
-
-        if (selection instanceof CellSelection) {
-          const tableNode = selection.$anchorCell.node(1);
-          const rowNode = selection.$anchorCell.node(2);
-
-          if (tableNode.child(0) === rowNode) {
-            return false;
-          }
-
-          return selection.$anchorCell.nodeAfter?.type.name === "tableHeader";
-        }
-
-        return false;
-      },
-      onClick() {
-        props.editor.chain().toggleHeaderCell().focus().run();
-      }
-    },
-    {
-      icon: mdiTableMergeCells,
-      label: "Merge cells",
-      show() {
-        const { selection } = props.editor.state;
-
-        if (selection instanceof CellSelection) {
-          return selection.$anchorCell.pos !== selection.$headCell.pos;
-        }
-
-        return false;
-      },
-      onClick() {
-        props.editor.chain().mergeCells().run();
-      }
-    },
-    {
-      icon: mdiTableSplitCell,
-      label: "Split cell",
-      show() {
-        const { selection } = props.editor.state;
-
-        if (
-          selection instanceof CellSelection &&
-          selection.$anchorCell.pos === selection.$headCell.pos
-        ) {
-          return (
-            selection.$anchorCell.nodeAfter?.attrs.colspan > 1 ||
-            selection.$anchorCell.nodeAfter?.attrs.rowspan > 1
-          );
-        }
-
-        return false;
-      },
-      onClick() {
-        props.editor.chain().splitCell().run();
-      }
-    },
-    {
-      icon: mdiTableColumnRemove,
-      label: "Delete column(s)",
-      show() {
-        const { selection } = props.editor.state;
-
-        if (selection instanceof CellSelection) {
-          const tableNode = selection.$anchorCell.node(1);
-
-          let isSingleColumn = false;
-
-          tableNode.content.forEach((rowNode) => {
-            isSingleColumn = rowNode.childCount === 1;
-          });
-
-          return !isSingleColumn;
-        }
-
-        return true;
-      },
-      onClick() {
-        props.editor.chain().deleteColumn().focus().run();
-      }
-    },
-    {
-      icon: mdiTableRowRemove,
-      label: "Delete row(s)",
-
-      show() {
-        const { selection } = props.editor.state;
-
-        if (selection instanceof CellSelection) {
-          const tableNode = selection.$anchorCell.node(1);
-
-          if (tableNode.content.childCount === 1) {
-            return false;
-          }
-        }
-
-        return true;
-      },
-      onClick() {
-        props.editor.chain().deleteRow().focus().run();
-      }
-    },
-    {
-      icon: mdiTableRemove,
-      label: "Delete table",
-
-      show() {
-        const { selection } = props.editor.state;
-
-        if (selection instanceof CellSelection) {
-          const tableNode = selection.$anchorCell.node(1);
-
-          if (tableNode.childCount === 1) return true;
-
-          let isSingleColumn = false;
-
-          tableNode.content.forEach((rowNode) => {
-            isSingleColumn = rowNode.childCount === 1;
-          });
-
-          return isSingleColumn;
-        }
-
-        return false;
-      },
-      onClick() {
-        props.editor.chain().deleteTable().focus().run();
-      }
-    }
-  ];
-  const marks = menus.map((menu) => menu.mark);
-  const saveLink = (): void => {
-    props.editor.chain().unsetCode().setLink({ href: link() }).focus().run();
-    setMode("format");
-  };
-
-  props.editor.on("update", () => {
-    setActiveMarks(marks.filter((mark) => mark && props.editor.isActive(mark)) as string[]);
-  });
-  props.editor.on("selectionUpdate", () => {
-    setActiveMarks(marks.filter((mark) => mark && props.editor.isActive(mark)) as string[]);
-
-    if (props.editor.state.selection instanceof CellSelection) {
-      setMode("table");
-    } else if (!props.editor.state.selection.empty) {
-      setMode("format");
-    }
-  });
-  createEffect(
-    on(mode, (mode) => {
-      if (mode === "link") {
-        setLink(props.editor.getAttributes("link").href || "");
-        setTimeout(() => {
-          const linkInput = linkInputRef();
-
-          linkInput?.focus();
-        }, 300);
-      } else {
-        setLink("");
-      }
-    })
-  );
-  createEffect(
-    on(
-      () => props.mode,
-      (mode) => {
-        setMode((currentMode) => mode || currentMode);
-      }
-    )
-  );
-  createEffect(
-    on(
-      () => props.opened,
-      (opened) => {
-        if (!opened) {
-          setLink("");
-          setTimeout(() => {
-            setMode("format");
-          }, 300);
-        }
-      }
-    )
-  );
-
-  return (
-    <Card
-      class={clsx(
-        "relative flex p-0 overflow-x-auto scrollbar-hidden md:overflow-initial",
-        props.class
-      )}
-      ref={props.ref}
-    >
-      <Switch>
-        <Match when={mode() === "block"}>
-          <IconButton
-            path={mdiPlus}
-            text="soft"
-            variant="text"
-            label="Insert block"
-            onClick={(event) => {
-              props.setBlockMenuOpened?.(true);
-              event.preventDefault();
-              event.stopPropagation();
-            }}
-          />
-          <IconButton
-            path={mdiKeyboardCloseOutline}
-            text="soft"
-            variant="text"
-            onClick={(event) => {
-              props.blur?.();
-              event.preventDefault();
-              event.stopPropagation();
-            }}
-          />
-        </Match>
-        <Match when={mode() === "table"}>
-          <For
-            each={tableMenus}
-            fallback={<span class="px-1.5 py-0.5 text-base">No available options</span>}
-          >
-            {(menuItem) => {
-              return (
-                <Show when={!menuItem.show || menuItem.show()}>
-                  <Tooltip text={menuItem.label} side="bottom" wrapperClass="snap-start">
-                    <IconButton
-                      path={menuItem.icon}
-                      text="soft"
-                      variant="text"
-                      color="base"
-                      onClick={(event) => {
-                        menuItem.onClick();
-                        event.preventDefault();
-                        event.stopPropagation();
-                      }}
-                    />
-                  </Tooltip>
-                </Show>
-              );
-            }}
-          </For>
-        </Match>
-        <Match when={mode() === "format"}>
-          <div class="flex">
-            <For
-              each={menus}
-              fallback={<span class="px-1.5 py-0.5 text-base">No available options</span>}
-            >
-              {(menu) => {
-                const active = (): boolean => {
-                  return Boolean(menu.mark && activeMarks().includes(menu.mark));
-                };
-
-                return (
-                  <Tooltip text={menu.label} side="bottom" wrapperClass="snap-start">
-                    <IconButton
-                      path={menu.icon}
-                      text={active() ? "primary" : "soft"}
-                      variant={active() ? "solid" : "text"}
-                      color={active() ? "primary" : "base"}
-                      onClick={(event) => {
-                        const chain = props.editor.chain();
-
-                        if (menu.onClick) {
-                          menu.onClick();
-                        } else if (menu.mark) {
-                          if (menu.mark !== "code") {
-                            chain.unsetCode();
-                          }
-
-                          chain.toggleMark(menu.mark).focus().run();
-                        }
-
-                        event.preventDefault();
-                        event.stopPropagation();
-                      }}
-                    />
-                  </Tooltip>
-                );
-              }}
-            </For>
-          </div>
-        </Match>
-        <Match when={mode() === "link"}>
-          <Input
-            ref={setLinkInputRef}
-            value={link()}
-            placeholder="Paste a link..."
-            wrapperClass="w-full md:w-auto"
-            setValue={(value) => {
-              setLink(value);
-            }}
-            onEnter={saveLink}
-            class="py-0 my-0 bg-transparent"
-          />
-          <IconButton path={mdiCheck} text="soft" variant="text" onClick={saveLink} />
-          <IconButton
-            path={mdiDelete}
-            text="soft"
-            variant="text"
-            onClick={() => {
-              props.editor.chain().unsetLink().focus().run();
-              setMode("format");
-            }}
-          />
-        </Match>
-      </Switch>
-    </Card>
-  );
-};
-
-export { BubbleMenu };

--- apps/web/src/views/editor/menus/bubble/block.tsx ---
@@ -0,0 +1,48 @@
+import { mdiPlus, mdiKeyboardCloseOutline } from "@mdi/js";
+import clsx from "clsx";
+import { Component } from "solid-js";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { Card, IconButton } from "#components/primitives";
+
+const BlockMenu: Component<{
+  class?: string;
+  mode: string;
+  opened: boolean;
+  editor: SolidEditor;
+  blur?(): void;
+  setMode(mode: string): void;
+  setBlockMenuOpened?(opened: boolean): void;
+}> = (props) => {
+  return (
+    <Card
+      class={clsx(
+        "relative flex p-0 overflow-x-auto scrollbar-hidden md:overflow-initial not-prose",
+        props.class
+      )}
+    >
+      <IconButton
+        path={mdiPlus}
+        text="soft"
+        variant="text"
+        label="Insert block"
+        onClick={(event) => {
+          props.setBlockMenuOpened?.(true);
+          event.preventDefault();
+          event.stopPropagation();
+        }}
+      />
+      <IconButton
+        path={mdiKeyboardCloseOutline}
+        text="soft"
+        variant="text"
+        onClick={(event) => {
+          props.blur?.();
+          event.preventDefault();
+          event.stopPropagation();
+        }}
+      />
+    </Card>
+  );
+};
+
+export { BlockMenu };

--- apps/web/src/views/editor/menus/bubble/format.tsx ---
@@ -0,0 +1,165 @@
+import clsx from "clsx";
+import { Component, For, createSignal } from "solid-js";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import {
+  mdiFormatBold,
+  mdiFormatItalic,
+  mdiFormatStrikethrough,
+  mdiCodeTags,
+  mdiLinkVariant,
+  mdiFormatColorHighlight,
+  mdiFormatSubscript,
+  mdiFormatSuperscript,
+  mdiKeyboardCloseOutline,
+  mdiCommentOutline
+} from "@mdi/js";
+import { nanoid } from "nanoid";
+import { Card, IconButton, Tooltip } from "#components/primitives";
+import { App, useAuthenticatedUserData, useClient } from "#context";
+import { breakpoints } from "#lib/utils";
+
+const FormatMenu: Component<{
+  class?: string;
+  mode: string;
+  opened: boolean;
+  editor: SolidEditor;
+  contentPieceId?: string;
+  blur?(): void;
+  setMode(mode: string): void;
+}> = (props) => {
+  const [activeMarks, setActiveMarks] = createSignal<string[]>([]);
+  const { workspaceSettings = () => null } = useAuthenticatedUserData() || {};
+  const client = useClient();
+  const commentMenuItem = {
+    icon: mdiCommentOutline,
+    mark: "comment",
+    label: "Comment",
+    async onClick() {
+      if (props.editor.isActive("comment")) {
+        props.editor.commands.unsetComment();
+      } else {
+        const threadFragment = nanoid();
+
+        props.editor.chain().setComment({ thread: threadFragment }).focus().run();
+
+        try {
+          await client.comments.createThread.mutate({
+            contentPieceId: props.contentPieceId || "",
+            fragment: threadFragment
+          });
+        } catch (error) {
+          props.editor.commands.unsetComment();
+        }
+      }
+    }
+  };
+  const closeKeyboardItem = {
+    icon: mdiKeyboardCloseOutline,
+    label: "Close keyboard",
+    async onClick() {
+      props.editor.commands.blur?.();
+    }
+  };
+  const menus = (
+    [
+      {
+        icon: mdiFormatBold,
+        mark: "bold",
+        label: "Bold"
+      },
+      {
+        icon: mdiFormatItalic,
+        mark: "italic",
+        label: "Italic"
+      },
+      {
+        icon: mdiFormatStrikethrough,
+        mark: "strike",
+        label: "Strike"
+      },
+      {
+        icon: mdiCodeTags,
+        mark: "code",
+        label: "Code"
+      },
+      {
+        icon: mdiLinkVariant,
+        mark: "link",
+        label: "Link",
+        onClick() {
+          props.setMode("link");
+        }
+      },
+      { icon: mdiFormatColorHighlight, mark: "highlight", label: "Highlight" },
+      { icon: mdiFormatSubscript, mark: "subscript", label: "Subscript" },
+      { icon: mdiFormatSuperscript, mark: "superscript", label: "Superscript" },
+      ...(props.contentPieceId && breakpoints.md() ? [commentMenuItem] : []),
+      ...(breakpoints.md() ? [] : [closeKeyboardItem])
+    ] as Array<{ icon: string; mark?: string; label: string; onClick?(): void }>
+  ).filter(({ mark }) => {
+    if (!mark || mark === "comment") return true;
+
+    if (!workspaceSettings()) {
+      return true;
+    }
+
+    return workspaceSettings()!.marks.includes(mark as App.WorkspaceSettings["marks"][number]);
+  });
+  const marks = menus.map((menu) => menu.mark);
+
+  props.editor.on("update", () => {
+    setActiveMarks(marks.filter((mark) => mark && props.editor.isActive(mark)) as string[]);
+  });
+  props.editor.on("selectionUpdate", () => {
+    setActiveMarks(marks.filter((mark) => mark && props.editor.isActive(mark)) as string[]);
+  });
+
+  return (
+    <Card
+      class={clsx(
+        "relative flex p-0 overflow-x-auto scrollbar-hidden md:overflow-initial not-prose",
+        props.class
+      )}
+    >
+      <For
+        each={menus}
+        fallback={<span class="px-1.5 py-0.5 text-base">No available options</span>}
+      >
+        {(menu) => {
+          const active = (): boolean => {
+            return Boolean(menu.mark && activeMarks().includes(menu.mark));
+          };
+
+          return (
+            <Tooltip text={menu.label} side="bottom" wrapperClass="snap-start">
+              <IconButton
+                path={menu.icon}
+                text={active() ? "primary" : "soft"}
+                variant={active() ? "solid" : "text"}
+                color={active() ? "primary" : "base"}
+                onClick={(event) => {
+                  const chain = props.editor.chain();
+
+                  if (menu.onClick) {
+                    menu.onClick();
+                  } else if (menu.mark) {
+                    if (menu.mark !== "code") {
+                      chain.unsetCode();
+                    }
+
+                    chain.toggleMark(menu.mark).focus().run();
+                  }
+
+                  event.preventDefault();
+                  event.stopPropagation();
+                }}
+              />
+            </Tooltip>
+          );
+        }}
+      </For>
+    </Card>
+  );
+};
+
+export { FormatMenu };

--- apps/web/src/views/editor/menus/bubble/index.tsx ---
@@ -0,0 +1,101 @@
+import { LinkMenu } from "./link";
+import { FormatMenu } from "./format";
+import { TableMenu } from "./table";
+import { BlockMenu } from "./block";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { CellSelection } from "@tiptap/pm/tables";
+import { Component, createEffect, createSignal, Match, on, Switch } from "solid-js";
+import { Ref } from "#lib/utils";
+
+type BubbleMenuMode = "format" | "link" | "table" | "block";
+interface BubbleMenuProps {
+  editor: SolidEditor;
+  opened: boolean;
+  contentPieceId?: string;
+  class?: string;
+  mode?: BubbleMenuMode;
+  ref?: Ref<HTMLElement>[1];
+  blur?(): void;
+  setBlockMenuOpened?(opened: boolean): void;
+}
+
+const BubbleMenu: Component<BubbleMenuProps> = (props) => {
+  const [mode, setMode] = createSignal<BubbleMenuMode>("format");
+
+  props.editor.on("selectionUpdate", ({ editor }) => {
+    const { selection } = editor.state;
+
+    if (props.editor.state.selection instanceof CellSelection) {
+      setMode("table");
+    } else if (!props.editor.state.selection.empty) {
+      setMode("format");
+    }
+  });
+  createEffect(
+    on(
+      () => props.mode,
+      (mode) => {
+        setMode((currentMode) => mode || currentMode);
+      }
+    )
+  );
+  createEffect(
+    on(
+      () => props.opened,
+      (opened) => {
+        if (!opened) {
+          setTimeout(() => {
+            setMode("format");
+          }, 300);
+        }
+      }
+    )
+  );
+
+  return (
+    <Switch>
+      <Match when={mode() === "block"}>
+        <BlockMenu
+          editor={props.editor}
+          mode={mode()}
+          opened={props.opened}
+          setMode={setMode}
+          setBlockMenuOpened={props.setBlockMenuOpened}
+          blur={props.blur}
+          class={props.class}
+        />
+      </Match>
+      <Match when={mode() === "table"}>
+        <TableMenu
+          editor={props.editor}
+          mode={mode()}
+          opened={props.opened}
+          setMode={setMode}
+          class={props.class}
+        />
+      </Match>
+      <Match when={mode() === "format"}>
+        <FormatMenu
+          editor={props.editor}
+          mode={mode()}
+          opened={props.opened}
+          setMode={setMode}
+          class={props.class}
+          contentPieceId={props.contentPieceId}
+          blur={props.blur}
+        />
+      </Match>
+      <Match when={mode() === "link"}>
+        <LinkMenu
+          editor={props.editor}
+          mode={mode()}
+          opened={props.opened}
+          setMode={setMode}
+          class={props.class}
+        />
+      </Match>
+    </Switch>
+  );
+};
+
+export { BubbleMenu };

--- apps/web/src/views/editor/menus/bubble/link.tsx ---
@@ -0,0 +1,82 @@
+import { mdiCheck, mdiDelete } from "@mdi/js";
+import clsx from "clsx";
+import { Component, createEffect, createSignal, on } from "solid-js";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { Card, Input, IconButton } from "#components/primitives";
+import { createRef } from "#lib/utils";
+
+const LinkMenu: Component<{
+  class?: string;
+  mode: string;
+  opened: boolean;
+  editor: SolidEditor;
+  setMode(mode: string): void;
+}> = (props) => {
+  const [link, setLink] = createSignal("");
+  const [linkInputRef, setLinkInputRef] = createRef<HTMLInputElement | null>(null);
+  const saveLink = (): void => {
+    props.editor.chain().unsetCode().setLink({ href: link() }).focus().run();
+    props.setMode("format");
+  };
+
+  createEffect(
+    on(
+      () => props.opened,
+      (opened) => {
+        if (!opened) {
+          setLink("");
+        }
+      }
+    )
+  );
+  createEffect(
+    on(
+      () => props.mode,
+      (mode) => {
+        if (mode === "link") {
+          setLink(props.editor.getAttributes("link").href || "");
+          setTimeout(() => {
+            const linkInput = linkInputRef();
+
+            linkInput?.focus();
+          }, 300);
+        } else {
+          setLink("");
+        }
+      }
+    )
+  );
+
+  return (
+    <Card
+      class={clsx(
+        "relative flex p-0 overflow-x-auto scrollbar-hidden md:overflow-initial not-prose",
+        props.class
+      )}
+    >
+      <Input
+        ref={setLinkInputRef}
+        value={link()}
+        placeholder="Paste a link..."
+        wrapperClass="w-full md:w-auto"
+        setValue={(value) => {
+          setLink(value);
+        }}
+        onEnter={saveLink}
+        class="py-0 my-0 bg-transparent"
+      />
+      <IconButton path={mdiCheck} text="soft" variant="text" onClick={saveLink} />
+      <IconButton
+        path={mdiDelete}
+        text="soft"
+        variant="text"
+        onClick={() => {
+          props.editor.chain().unsetLink().focus().run();
+          props.setMode("format");
+        }}
+      />
+    </Card>
+  );
+};
+
+export { LinkMenu };

--- apps/web/src/views/editor/menus/bubble/table.tsx ---
@@ -0,0 +1,194 @@
+import {
+  mdiTableColumnRemove,
+  mdiTableHeadersEyeOff,
+  mdiTableMergeCells,
+  mdiTableRemove,
+  mdiTableRowRemove,
+  mdiTableSplitCell
+} from "@mdi/js";
+import clsx from "clsx";
+import { Component, For, Show, createEffect, on } from "solid-js";
+import { SolidEditor } from "@vrite/tiptap-solid";
+import { CellSelection } from "@tiptap/pm/tables";
+import { Card, IconButton, Tooltip } from "#components/primitives";
+import { createRef } from "#lib/utils";
+
+const TableMenu: Component<{
+  class?: string;
+  mode: string;
+  opened: boolean;
+  editor: SolidEditor;
+  setMode(mode: string): void;
+}> = (props) => {
+  const tableMenus = [
+    {
+      icon: mdiTableHeadersEyeOff,
+      label: "Toggle header cell off",
+      show() {
+        const { selection } = props.editor.state;
+
+        if (selection instanceof CellSelection) {
+          const tableNode = selection.$anchorCell.node(1);
+          const rowNode = selection.$anchorCell.node(2);
+
+          if (tableNode.child(0) === rowNode) {
+            return false;
+          }
+
+          return selection.$anchorCell.nodeAfter?.type.name === "tableHeader";
+        }
+
+        return false;
+      },
+      onClick() {
+        props.editor.chain().toggleHeaderCell().focus().run();
+      }
+    },
+    {
+      icon: mdiTableMergeCells,
+      label: "Merge cells",
+      show() {
+        const { selection } = props.editor.state;
+
+        if (selection instanceof CellSelection) {
+          return selection.$anchorCell.pos !== selection.$headCell.pos;
+        }
+
+        return false;
+      },
+      onClick() {
+        props.editor.chain().mergeCells().run();
+      }
+    },
+    {
+      icon: mdiTableSplitCell,
+      label: "Split cell",
+      show() {
+        const { selection } = props.editor.state;
+
+        if (
+          selection instanceof CellSelection &&
+          selection.$anchorCell.pos === selection.$headCell.pos
+        ) {
+          return (
+            selection.$anchorCell.nodeAfter?.attrs.colspan > 1 ||
+            selection.$anchorCell.nodeAfter?.attrs.rowspan > 1
+          );
+        }
+
+        return false;
+      },
+      onClick() {
+        props.editor.chain().splitCell().run();
+      }
+    },
+    {
+      icon: mdiTableColumnRemove,
+      label: "Delete column(s)",
+      show() {
+        const { selection } = props.editor.state;
+
+        if (selection instanceof CellSelection) {
+          const tableNode = selection.$anchorCell.node(1);
+
+          let isSingleColumn = false;
+
+          tableNode.content.forEach((rowNode) => {
+            isSingleColumn = rowNode.childCount === 1;
+          });
+
+          return !isSingleColumn;
+        }
+
+        return true;
+      },
+      onClick() {
+        props.editor.chain().deleteColumn().focus().run();
+      }
+    },
+    {
+      icon: mdiTableRowRemove,
+      label: "Delete row(s)",
+
+      show() {
+        const { selection } = props.editor.state;
+
+        if (selection instanceof CellSelection) {
+          const tableNode = selection.$anchorCell.node(1);
+
+          if (tableNode.content.childCount === 1) {
+            return false;
+          }
+        }
+
+        return true;
+      },
+      onClick() {
+        props.editor.chain().deleteRow().focus().run();
+      }
+    },
+    {
+      icon: mdiTableRemove,
+      label: "Delete table",
+
+      show() {
+        const { selection } = props.editor.state;
+
+        if (selection instanceof CellSelection) {
+          const tableNode = selection.$anchorCell.node(1);
+
+          if (tableNode.childCount === 1) return true;
+
+          let isSingleColumn = false;
+
+          tableNode.content.forEach((rowNode) => {
+            isSingleColumn = rowNode.childCount === 1;
+          });
+
+          return isSingleColumn;
+        }
+
+        return false;
+      },
+      onClick() {
+        props.editor.chain().deleteTable().focus().run();
+      }
+    }
+  ];
+
+  return (
+    <Card
+      class={clsx(
+        "relative flex p-0 overflow-x-auto scrollbar-hidden md:overflow-initial not-prose",
+        props.class
+      )}
+    >
+      <For
+        each={tableMenus}
+        fallback={<span class="px-1.5 py-0.5 text-base">No available options</span>}
+      >
+        {(menuItem) => {
+          return (
+            <Show when={!menuItem.show || menuItem.show()}>
+              <Tooltip text={menuItem.label} side="bottom" wrapperClass="snap-start">
+                <IconButton
+                  path={menuItem.icon}
+                  text="soft"
+                  variant="text"
+                  color="base"
+                  onClick={(event) => {
+                    menuItem.onClick();
+                    event.preventDefault();
+                    event.stopPropagation();
+                  }}
+                />
+              </Tooltip>
+            </Show>
+          );
+        }}
+      </For>
+    </Card>
+  );
+};
+
+export { TableMenu };

--- apps/web/src/views/editor/menus/index.ts ---
@@ -1,6 +1,6 @@
-export * from "./bubble-menu";
-export * from "./export-menu";
-export * from "./floating-menu";
-export * from "./link-preview-menu";
-export * from "./stats-menu";
-export * from "./comment-threads-menu";
+export * from "./bubble";
+export * from "./comment-threads";
+export * from "./export";
+export * from "./floating";
+export * from "./link-preview";
+export * from "./stats";

--- apps/web/src/views/extensions/extension-card.tsx ---
@@ -1,7 +1,7 @@
 import { ExtensionIcon } from "./extension-icon";
 import { mdiTune, mdiDownloadOutline } from "@mdi/js";
 import { Component, Show } from "solid-js";
-import { ExtensionDetails, hasPermission, useClient } from "#context";
+import { ExtensionDetails, hasPermission, useClient, useExtensions } from "#context";
 import { Card, Heading, IconButton } from "#components/primitives";
 
 interface ExtensionCardProps {
@@ -12,6 +12,7 @@ interface ExtensionCardProps {
 
 const ExtensionCard: Component<ExtensionCardProps> = (props) => {
   const client = useClient();
+  const { callFunction } = useExtensions();
 
   return (
     <Card class="m-0 gap-1 flex flex-col justify-center items-center" color="contrast">
@@ -41,6 +42,18 @@ const ExtensionCard: Component<ExtensionCardProps> = (props) => {
                     permissions: props.extension.spec.permissions || []
                   }
                 });
+                const onConfigureCallback = props.extension.spec.lifecycle?.["on:configure"];
+
+                if (onConfigureCallback) {
+                  await callFunction(props.extension.spec, onConfigureCallback, {
+                    extensionId: id,
+                    token,
+                    context: () => ({
+                      config: {},
+                      spec: props.extension.spec
+                    })
+                  });
+                }
 
                 props.setOpenedExtension({ ...props.extension, config: {}, id, token });
               }

--- apps/web/src/views/git/sync-view/index.tsx ---
@@ -47,6 +47,7 @@ const extractFileName = (path: string): { fileName: string; directory: string }
   return { fileName, directory };
 };
 const InitialSyncCard: Component = () => {
+  const { notify } = useNotifications();
   const [loading, setLoading] = createSignal(false);
   const client = useClient();
 
@@ -70,7 +71,14 @@ const InitialSyncCard: Component = () => {
           loading={loading()}
           onClick={async () => {
             setLoading(true);
-            await client.git.github.initialSync.mutate();
+
+            try {
+              await client.git.github.initialSync.mutate();
+              notify({ text: "Latest content pulled", type: "success" });
+            } catch (error) {
+              notify({ text: "Couldn't pull content", type: "error" });
+            }
+
             setLoading(false);
           }}
         >
@@ -108,6 +116,7 @@ const CommitCard: Component<{ changedRecords: App.GitRecord[] }> = (props) => {
 
                 if (status === "committed") {
                   notify({ text: "Changes committed", type: "success" });
+                  setMessage("");
                 } else {
                   notify({
                     text: "Pull required before committing changes",

--- apps/web/src/views/settings/api/configure-subsection.tsx ---
@@ -1,6 +1,6 @@
 import { ConfigureTokenAction } from "./configure-action";
 import { mdiInformation, mdiKeyChain } from "@mdi/js";
-import { Component, For, Show, createEffect, createResource } from "solid-js";
+import { Component, For, Show, createEffect, createMemo, createResource, on } from "solid-js";
 import { createStore } from "solid-js/store";
 import { InputField, TitledCard } from "#components/fragments";
 import { Select, Heading, Loader } from "#components/primitives";

--- apps/web/src/views/settings/appearance.tsx ---
@@ -50,22 +50,14 @@ const AppearanceSection: Component = () => {
 
   return (
     <div class="flex justify-center flex-col items-start w-full gap-5">
-      <TitledCard icon={mdiThemeLightDark} label="UI theme">
+      <TitledCard icon={mdiThemeLightDark} label="Theme">
         <ThemePicker
           theme={userSettings()?.uiTheme || "auto"}
           setTheme={async (theme) => {
             await client.userSettings.update.mutate({ uiTheme: theme });
           }}
         />
       </TitledCard>
-      <TitledCard label="Code editor theme" icon={mdiCodeTags}>
-        <ThemePicker
-          theme={userSettings()?.codeEditorTheme || "dark"}
-          setTheme={async (theme) => {
-            await client.userSettings.update.mutate({ codeEditorTheme: theme });
-          }}
-        />
-      </TitledCard>
       <TitledCard label="Accent color" icon={mdiPaletteSwatch}>
         <div class="grid grid-cols-3 @lg:grid-cols-5 gap-4 w-full group/container">
           <For each={accentColors}>

--- apps/web/src/views/settings/editor/configure-wrapper-subsection.tsx ---
@@ -1,98 +0,0 @@
-import { mdiCheck, mdiInformation } from "@mdi/js";
-import { Component, createEffect, createMemo, createSignal } from "solid-js";
-import { createStore } from "solid-js/store";
-import { InputField, TitledCard } from "#components/fragments";
-import { Button, IconButton, Tooltip } from "#components/primitives";
-import { useClient, App, useNotifications } from "#context";
-import { validateKey } from "#lib/utils";
-
-interface ConfigureWrapperSubSectionProps {
-  setActionComponent(component: Component<{}> | null): void;
-  onWrapperConfigured(): void;
-}
-
-const ConfigureWrapperSubSection: Component<ConfigureWrapperSubSectionProps> = (props) => {
-  const client = useClient();
-  const { notify } = useNotifications();
-  const [loading, setLoading] = createSignal(false);
-  const [wrapperData, setWrapperData] = createStore<App.Wrapper>({
-    key: "",
-    label: ""
-  });
-  const filled = createMemo(() => {
-    return Boolean(wrapperData.label && validateKey(wrapperData.key));
-  });
-  const onClick = async (): Promise<void> => {
-    try {
-      setLoading(true);
-      await client.workspaceSettings.createWrapper.mutate(wrapperData);
-      notify({ text: "New Wrapper created", type: "success" });
-      props.onWrapperConfigured();
-      setLoading(false);
-    } catch (error) {
-      notify({ text: "Failed to create new Wrapper", type: "error" });
-      setLoading(false);
-    }
-  };
-
-  createEffect(() => {
-    setWrapperData("key", wrapperData.label.toLowerCase().replace(/\s|-/g, "_").slice(0, 20));
-  });
-  props.setActionComponent(() => {
-    return (
-      <>
-        <Button
-          color="primary"
-          class="m-0 hidden @md:flex"
-          loading={loading()}
-          disabled={!filled()}
-          onClick={onClick}
-        >
-          Create Wrapper
-        </Button>
-        <Tooltip text="Create Wrapper" wrapperClass="flex @md:hidden" class="mt-1" fixed>
-          <IconButton
-            color="primary"
-            path={mdiCheck}
-            class="m-0"
-            loading={loading()}
-            disabled={!filled()}
-            onClick={onClick}
-          />
-        </Tooltip>
-      </>
-    );
-  });
-
-  return (
-    <>
-      <TitledCard icon={mdiInformation} label="Details">
-        <InputField
-          label="Wrapper label"
-          color="contrast"
-          placeholder="Label"
-          type="text"
-          value={wrapperData.label}
-          inputProps={{ maxLength: 50 }}
-          setValue={(value) => setWrapperData("label", value)}
-        >
-          Descriptive label for the wrapper.
-        </InputField>
-        <InputField
-          label="Wrapper key"
-          color="contrast"
-          placeholder="wrapper_key"
-          type="text"
-          value={wrapperData.key}
-          inputProps={{ maxLength: 20 }}
-          setValue={(value) => setWrapperData("key", value)}
-        >
-          Key identifying the Wrapper in JSON content. Has to be unique, and can only contain
-          letters, numbers and underscores.
-        </InputField>
-      </TitledCard>
-    </>
-  );
-};
-
-export { ConfigureWrapperSubSection };

--- apps/web/src/views/settings/editor/index.tsx ---
@@ -1,5 +1,4 @@
 import { marks, blocks, embeds } from "./options";
-import { ConfigureWrapperSubSection } from "./configure-wrapper-subsection";
 import { SettingsSectionComponent } from "../view";
 import {
   mdiApplicationBrackets,
@@ -24,74 +23,13 @@ import {
   useNotifications
 } from "#context";
 
-const WrapperDetails: Component<{
-  wrapper: App.Wrapper;
-  onEdit?(): void;
-  onDelete?(): void;
-}> = (props) => {
-  const [loading, setLoading] = createSignal(false);
-  const { notify } = useNotifications();
-  const client = useClient();
-
-  return (
-    <Card class="flex flex-col gap-0 w-full m-0" color="contrast">
-      <div class="flex items-start justify-center gap-2 w-full">
-        <Heading level={3} class="break-anywhere flex-1">
-          {props.wrapper.label || "[No name]"}
-        </Heading>
-        <Show
-          when={!props.wrapper.extension}
-          fallback={
-            <Tooltip text="Extension" class="mt-1">
-              <IconButton path={mdiPuzzle} text="soft" class="m-0" badge />
-            </Tooltip>
-          }
-        >
-          <Show when={hasPermission("manageWorkspace")}>
-            <Tooltip text="Delete" class="mt-1">
-              <IconButton
-                path={mdiTrashCan}
-                text="soft"
-                class="m-0"
-                loading={loading()}
-                onClick={async () => {
-                  try {
-                    setLoading(true);
-                    await client.workspaceSettings.deleteWrapper.mutate({
-                      key: props.wrapper.key
-                    });
-                    setLoading(false);
-                    props.onDelete?.();
-                    notify({
-                      text: "Wrapper deleted",
-                      type: "success"
-                    });
-                  } catch (error) {
-                    setLoading(false);
-                    notify({
-                      text: "Failed to delete wrapper",
-                      type: "error"
-                    });
-                  }
-                }}
-              />
-            </Tooltip>
-          </Show>
-        </Show>
-      </div>
-    </Card>
-  );
-};
 const EditorSection: SettingsSectionComponent = (props) => {
   const { notify } = useNotifications();
-  const [openedSubsection, setOpenedSubsection] = createSignal<"none" | "configure-wrapper">(
-    "none"
-  );
+  const [openedSubsection, setOpenedSubsection] = createSignal<"none">("none");
   const { workspaceSettings } = useAuthenticatedUserData();
   const [enabledMarks, setEnabledMarks] = createSignal<App.WorkspaceSettings["marks"]>([]);
   const [enabledBlocks, setEnabledBlocks] = createSignal<App.WorkspaceSettings["blocks"]>([]);
   const [enabledEmbeds, setEnabledEmbeds] = createSignal<App.WorkspaceSettings["embeds"]>([]);
-  const [wrappers, setWrappers] = createSignal<App.WorkspaceSettings["wrappers"]>([]);
   const [prettierConfig, setPrettierConfig] =
     createSignal<App.WorkspaceSettings["prettierConfig"]>("");
   const client = useClient();
@@ -110,23 +48,12 @@ const EditorSection: SettingsSectionComponent = (props) => {
       embeds: enabledEmbeds()
     });
   }, 350);
-  const handleNewWrapper = (): void => {
-    setOpenedSubsection("configure-wrapper");
-    props.setSubSection({
-      label: "New wrapper",
-      icon: mdiCube,
-      goBack() {
-        setOpenedSubsection("none");
-      }
-    });
-  };
 
   createEffect(() => {
     setEnabledMarks(workspaceSettings()?.marks || []);
     setEnabledBlocks(workspaceSettings()?.blocks || []);
     setEnabledEmbeds(workspaceSettings()?.embeds || []);
     setPrettierConfig(workspaceSettings()?.prettierConfig || "");
-    setWrappers(workspaceSettings()?.wrappers || []);
   });
   createEffect(
     on(openedSubsection, (openedSubsection) => {
@@ -274,44 +201,6 @@ const EditorSection: SettingsSectionComponent = (props) => {
             </For>
           </div>
         </TitledCard>
-        <Show when={enabledBlocks().includes("wrapper")}>
-          <TitledCard
-            label="Wrappers"
-            icon={mdiCube}
-            action={
-              <Show when={hasPermission("manageWorkspace")}>
-                <>
-                  <Button color="primary" class="m-0 hidden @md:flex" onClick={handleNewWrapper}>
-                    New Wrapper
-                  </Button>
-                  <Tooltip text="New Wrapper" wrapperClass="flex @md:hidden" class="mt-1" fixed>
-                    <IconButton
-                      path={mdiPlus}
-                      class="m-0"
-                      color="primary"
-                      onClick={handleNewWrapper}
-                    />
-                  </Tooltip>
-                </>
-              </Show>
-            }
-          >
-            <div class="flex flex-col gap-2 w-full">
-              <For
-                each={wrappers()}
-                fallback={
-                  <p class="px-2 w-full text-start text-gray-500 dark:text-gray-400">
-                    No wrappers found
-                  </p>
-                }
-              >
-                {(wrapper) => {
-                  return <WrapperDetails wrapper={wrapper} />;
-                }}
-              </For>
-            </div>
-          </TitledCard>
-        </Show>
         <TitledCard label="Prettier config" icon={mdiCodeTagsCheck}>
           <p class="prose text-gray-500 dark:text-gray-400">
             Customize your Prettier config for consistent code formatting for all users of the
@@ -320,6 +209,7 @@ const EditorSection: SettingsSectionComponent = (props) => {
           <MiniCodeEditor
             minHeight={200}
             fileName="prettierrc.json"
+            color="contrast"
             code={JSON.stringify(JSON.parse(workspaceSettings()?.prettierConfig || "{}"), null, 2)}
             onSave={async (value) => {
               try {
@@ -341,14 +231,6 @@ const EditorSection: SettingsSectionComponent = (props) => {
           />
         </TitledCard>
       </Match>
-      <Match when={openedSubsection() === "configure-wrapper"}>
-        <ConfigureWrapperSubSection
-          setActionComponent={props.setActionComponent}
-          onWrapperConfigured={() => {
-            setOpenedSubsection("none");
-          }}
-        />
-      </Match>
     </Switch>
   );
 };

--- apps/web/src/views/settings/editor/options.ts ---
@@ -96,7 +96,7 @@ const blocks: Record<
     { label: "Image", icon: mdiImage, value: "image" },
     { label: "Table", icon: mdiTable, value: "table" },
     { label: "Horizontal Rule", icon: mdiMinus, value: "horizontalRule" },
-    { label: "Wrapper", icon: mdiCubeOutline, value: "wrapper" }
+    { label: "Element", icon: mdiCubeOutline, value: "element" }
   ]
 };
 const embeds: Array<{

--- apps/web/src/views/settings/transformers/index.tsx ---
@@ -10,26 +10,26 @@ import {
   on,
   onCleanup
 } from "solid-js";
-import { mdiFormatListBulleted, mdiPlusCircle, mdiTrashCan, mdiTune } from "@mdi/js";
+import { mdiFormatListBulleted, mdiPlusCircle, mdiPuzzle, mdiTrashCan, mdiTune } from "@mdi/js";
 import { createStore } from "solid-js/store";
 import { TitledCard } from "#components/fragments";
 import { App, hasPermission, useClient, useNotifications } from "#context";
 import { Button, Card, Heading, IconButton, Loader, Tooltip } from "#components/primitives";
 
 interface TransformerDetailsProps {
-  transformer: App.Transformer & { inUse?: boolean };
+  transformer: App.Transformer & { inUse?: boolean; extension?: boolean };
   onEdit?(): void;
   onDelete?(): void;
 }
 
 const useTransformers = (): {
   loading: Accessor<boolean>;
-  transformers(): Array<App.Transformer & { inUse?: boolean }>;
+  transformers(): Array<App.Transformer & { inUse?: boolean; extension?: boolean }>;
 } => {
   const client = useClient();
   const [loading, setLoading] = createSignal(false);
   const [state, setState] = createStore<{
-    transformers: Array<App.Transformer>;
+    transformers: Array<App.Transformer & { inUse?: boolean; extension?: boolean }>;
   }>({
     transformers: []
   });
@@ -72,25 +72,34 @@ const TransformerDetails: Component<TransformerDetailsProps> = (props) => {
       <Heading level={2} class="break-anywhere flex-1">
         {props.transformer.label}
       </Heading>
-      <Show when={hasPermission("manageWorkspace")}>
-        <div class="flex gap-2">
-          <Tooltip text="Delete" class="mt-1" enabled={!props.transformer.inUse}>
-            <IconButton
-              path={mdiTrashCan}
-              loading={loading()}
-              disabled={props.transformer.inUse}
-              class="m-0"
-              text="soft"
-              onClick={async () => {
-                setLoading(true);
-                await client.transformers.delete.mutate({ id: props.transformer.id });
-                setLoading(false);
-                props.onDelete?.();
-                notify({ text: "Transformer deleted", type: "success" });
-              }}
-            />
+      <Show
+        when={!props.transformer.extension}
+        fallback={
+          <Tooltip text="Extension" class="mt-1">
+            <IconButton path={mdiPuzzle} text="soft" class="m-0" badge />
           </Tooltip>
-        </div>
+        }
+      >
+        <Show when={hasPermission("manageWorkspace")}>
+          <div class="flex gap-2">
+            <Tooltip text="Delete" class="mt-1" enabled={!props.transformer.inUse}>
+              <IconButton
+                path={mdiTrashCan}
+                loading={loading()}
+                disabled={props.transformer.inUse}
+                class="m-0"
+                text="soft"
+                onClick={async () => {
+                  setLoading(true);
+                  await client.transformers.delete.mutate({ id: props.transformer.id });
+                  setLoading(false);
+                  props.onDelete?.();
+                  notify({ text: "Transformer deleted", type: "success" });
+                }}
+              />
+            </Tooltip>
+          </div>
+        </Show>
       </Show>
     </Card>
   );

--- apps/web/src/views/settings/webhooks/configure-webhook-subsection.tsx ---
@@ -19,7 +19,7 @@ const ConfigureWebhookSubsection: Component<ConfigureWebhookSubsectionProps> = (
   const [loading, setLoading] = createSignal(false);
   const [webhookData, setWebhookData] = createStore<Omit<App.Webhook, "id">>({
     description: "",
-    event: "" as App.WebhookEvent,
+    event: "" as App.WebhookEventName,
     name: "",
     url: ""
   });
@@ -149,7 +149,7 @@ const ConfigureWebhookSubsection: Component<ConfigureWebhookSubsectionProps> = (
           options={webhookEvents}
           value={webhookData.event || ""}
           setValue={(value) => {
-            setWebhookData("event", value as App.WebhookEvent);
+            setWebhookData("event", value as App.WebhookEventName);
           }}
         >
           Event for which the Webhook should be called

--- apps/web/src/views/settings/webhooks/events.ts ---
@@ -1,6 +1,6 @@
 import { App } from "#context";
 
-const webhookEvents: Array<{ label: string; value: App.WebhookEvent }> = [
+const webhookEvents: Array<{ label: string; value: App.WebhookEventName }> = [
   { label: "Content piece updated", value: "contentPieceUpdated" },
   { label: "New content piece added", value: "contentPieceAdded" },
   { label: "Content piece removed", value: "contentPieceRemoved" },

--- apps/web/tsconfig.json ---
@@ -9,7 +9,7 @@
     "resolveJsonModule": true,
     "jsx": "preserve",
     "jsxImportSource": "solid-js",
-    "types": ["vite/client", "mdx", "@vrite/extensions"],
+    "types": ["vite/client", "@vrite/extensions"],
     "baseUrl": ".",
     "paths": {
       "#*": ["./src/*", "../../packages/backend/src/*"]

--- apps/web/vite.config.ts ---
@@ -6,6 +6,7 @@ import unocss from "unocss/vite";
 export default defineConfig(async ({ mode }) => {
   const plugins: PluginOption[] = [tsconfigPaths(), unocss(), solidPlugin()];
   const env = loadEnv(mode, process.cwd(), "PUBLIC_");
+  const proxyTarget = env.PUBLIC_APP_URL;
 
   if (mode === "development") {
     // Only transform index.html in dev mode - in production Handlebars will do this
@@ -25,14 +26,13 @@ export default defineConfig(async ({ mode }) => {
     server: {
       proxy: {
         "/api": {
-          target: "http://localhost:3333",
+          target: proxyTarget,
           ws: true
         },
-        "/session": { target: "http://localhost:3333", ws: true },
-        "/login": { target: "http://localhost:3333", ws: true },
-        "/github": { target: "http://localhost:3333", ws: true },
-        "/proxy": { target: "http://localhost:3333", ws: true },
-        "/upload": { target: "http://localhost:3333", ws: true }
+        "/session": { target: proxyTarget, ws: true },
+        "/login": { target: proxyTarget, ws: true },
+        "/github": { target: proxyTarget, ws: true },
+        "/upload": { target: proxyTarget, ws: true }
       }
     },
     build: {

--- package.json ---
@@ -1,6 +1,6 @@
 {
   "name": "vrite",
-  "version": "0.2.1",
+  "version": "0.3.0",
   "license": "AGPL-3.0-only",
   "private": true,
   "workspaces": [

--- packages/backend/src/database/comments.ts ---
@@ -1,7 +1,7 @@
-import { Collection, Db, ObjectId } from "mongodb";
-import { UnderscoreID, zodId } from "#lib/mongo";
 import { Profile, profile } from "./users";
+import { Collection, Db, ObjectId } from "mongodb";
 import { z } from "zod";
+import { UnderscoreID, zodId } from "#lib/mongo";
 
 const comment = z.object({
   id: zodId(),

--- packages/backend/src/database/index.ts ---
@@ -17,6 +17,5 @@ export * from "./content-variants";
 export * from "./variants";
 export * from "./content-groups";
 export * from "./git-data";
-export * from "./versions";
 export * from "./variants";
 export * from "./transformers";

--- packages/backend/src/database/transformers.ts ---
@@ -16,6 +16,7 @@ interface Transformer<ID extends string | ObjectId = string>
 }
 interface FullTransformer<ID extends string | ObjectId = string> extends Transformer<ID> {
   workspaceId: ID;
+  extensionId?: ID;
 }
 
 const getTransformersCollection = (db: Db): Collection<UnderscoreID<FullTransformer<ObjectId>>> => {

--- packages/backend/src/database/users.ts ---
@@ -5,7 +5,7 @@ import { UnderscoreID, zodId } from "#lib/mongo";
 const user = z.object({
   id: zodId(),
   username: z.string().min(1).max(20),
-  email: z.string().email(),
+  email: z.string().email().max(320),
   external: z
     .object({
       github: z

--- packages/backend/src/database/versions.ts ---
@@ -1,38 +0,0 @@
-import { ContentPiece, contentPiece } from "./content-pieces";
-import { ContentPieceVariant, contentPieceVariant } from "./content-piece-variants";
-import { Binary, Collection, Db, ObjectId } from "mongodb";
-import { z } from "zod";
-import { UnderscoreID, zodId } from "#lib/mongo";
-
-const version = z.object({
-  id: zodId(),
-  name: z.string(),
-  date: z.string(),
-  content: z.any().optional(),
-  contentPiece: contentPieceVariant.omit({ variantId: true, contentPieceId: true, id: true }),
-  contentPieceId: zodId(),
-  variantId: zodId().optional()
-});
-
-interface Version<ID extends string | ObjectId = string>
-  extends Omit<
-    z.infer<typeof version>,
-    "id" | "date" | "contentPieceId" | "variantId" | "content" | "contentPiece"
-  > {
-  date: ID extends string ? string : Date;
-  content?: Binary;
-  contentPiece: Omit<ContentPieceVariant<ID>, "id" | "variantId" | "contentPieceId">;
-  contentPieceId: ID;
-  variantId?: ID;
-  id: ID;
-}
-interface FullVersion<ID extends string | ObjectId = string> extends Version<ID> {
-  workspaceId: ID;
-}
-
-const getVersionsCollection = (db: Db): Collection<UnderscoreID<FullVersion<ObjectId>>> => {
-  return db.collection("contents");
-};
-
-export { getVersionsCollection, version };
-export type { Version, FullVersion };

--- packages/backend/src/database/webhooks.ts ---
@@ -13,7 +13,7 @@ const contentGroupEvents = [
   "contentGroupMoved"
 ] as const;
 const memberEvents = ["memberInvited", "memberAdded", "memberRemoved"] as const;
-const webhookEvent = z.enum([...contentPieceEvents, ...contentGroupEvents, ...memberEvents]);
+const webhookEventName = z.enum([...contentPieceEvents, ...contentGroupEvents, ...memberEvents]);
 const webhookMetadata = z.object({
   contentGroupId: zodId()
 });
@@ -23,10 +23,10 @@ const webhook = z.object({
   name: z.string().min(1).max(50),
   description: z.string().optional(),
   metadata: webhookMetadata.optional(),
-  event: webhookEvent
+  event: webhookEventName
 });
 
-type WebhookEvent = z.infer<typeof webhookEvent>;
+type WebhookEventName = z.infer<typeof webhookEventName>;
 type WebhookMetadata<ID extends string | ObjectId = string> = {
   contentGroupId: ID;
 };
@@ -47,10 +47,10 @@ const getWebhooksCollection = (db: Db): Collection<UnderscoreID<FullWebhook<Obje
 
 export {
   webhook,
-  webhookEvent,
+  webhookEventName,
   getWebhooksCollection,
   contentPieceEvents,
   contentGroupEvents,
   memberEvents
 };
-export type { WebhookEvent, Webhook, FullWebhook };
+export type { WebhookEventName, Webhook, FullWebhook };

--- packages/backend/src/database/workspace-memberships.ts ---
@@ -6,7 +6,7 @@ const workspaceMembership = z.object({
   id: zodId(),
   userId: zodId().optional(),
   roleId: zodId(),
-  email: z.string().email().optional(),
+  email: z.string().email().max(320).optional(),
   name: z.string().max(50).optional()
 });
 const workspaceInviteCodeDetails = z.object({

--- packages/backend/src/database/workspace-settings.ts ---
@@ -33,15 +33,6 @@ const metadataSettings = z
     enabledFields: z.array(metadataField).optional()
   })
   .partial();
-const wrapper = z.object({
-  label: z.string().min(1).max(50),
-  key: z
-    .string()
-    .min(1)
-    .max(20)
-    .regex(/^[a-z0-9_]*$/),
-  extension: z.boolean().optional()
-});
 const marks = [
   "bold",
   "italic",
@@ -67,7 +58,7 @@ const blocks = [
   "horizontalRule",
   "image",
   "table",
-  "wrapper"
+  "element"
 ] as const;
 const embeds = ["codepen", "codesandbox", "youtube"] as const;
 const workspaceSettings = z.object({
@@ -76,15 +67,12 @@ const workspaceSettings = z.object({
   metadata: metadataSettings.optional(),
   marks: z.array(z.enum(marks)),
   blocks: z.array(z.enum(blocks)),
-  embeds: z.array(z.enum(embeds)),
-  wrappers: z.array(wrapper).optional()
+  embeds: z.array(z.enum(embeds))
 });
 
-interface Wrapper extends z.infer<typeof wrapper> {}
 interface WorkspaceSettings<ID extends string | ObjectId = string>
-  extends Omit<z.infer<typeof workspaceSettings>, "id" | "wrappers"> {
+  extends Omit<z.infer<typeof workspaceSettings>, "id"> {
   id: ID;
-  wrappers?: Wrapper[];
 }
 interface FullWorkspaceSettings<ID extends string | ObjectId = string>
   extends WorkspaceSettings<ID> {
@@ -107,7 +95,6 @@ export {
   embeds,
   workspaceSettings,
   metadataSettings,
-  wrapper,
   getWorkspaceSettingsCollection
 };
-export type { MetadataField, MetadataSettings, WorkspaceSettings, FullWorkspaceSettings, Wrapper };
+export type { MetadataField, MetadataSettings, WorkspaceSettings, FullWorkspaceSettings };

--- packages/backend/src/env.ts ---
@@ -1,4 +1,4 @@
-import { optional, z } from "zod";
+import { z } from "zod";
 
 const envSchema = z.object({
   NODE_ENV: z.string(),

--- packages/backend/src/events/comment.ts ---
@@ -0,0 +1,34 @@
+import { Observable } from "@trpc/server/observable";
+import { Comment, CommentThread, CommentMember } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type CommentEvent =
+  | { action: "createThread"; data: CommentThread }
+  | { action: "resolveThread"; data: Pick<CommentThread, "id" | "fragment" | "resolved"> }
+  | { action: "deleteThread"; data: Pick<CommentThread, "id" | "fragment"> }
+  | {
+      action: "createComment";
+      data: Omit<Comment, "memberId"> & { member: CommentMember | null };
+    }
+  | {
+      action: "updateComment";
+      data: Pick<Comment, "id" | "content">;
+    }
+  | {
+      action: "deleteComment";
+      data: Pick<Comment, "id">;
+    };
+
+const publishCommentEvent = createEventPublisher<CommentEvent>((contentPieceId) => {
+  return `comments:${contentPieceId}`;
+});
+const subscribeToCommentEvents = (
+  ctx: Context,
+  contentPieceId: string
+): Observable<CommentEvent, unknown> => {
+  return createEventSubscription<CommentEvent>(ctx, `comments:${contentPieceId}`);
+};
+
+export { publishCommentEvent, subscribeToCommentEvents };
+export type { CommentEvent };

--- packages/backend/src/events/content-group.ts ---
@@ -0,0 +1,30 @@
+import { Observable } from "@trpc/server/observable";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { ContentGroup } from "#database";
+
+type ContentGroupEvent =
+  | {
+      action: "create";
+      data: ContentGroup;
+    }
+  | {
+      action: "update";
+      data: Partial<ContentGroup> & { id: string };
+    }
+  | { action: "delete"; data: { id: string } }
+  | { action: "move"; data: ContentGroup }
+  | { action: "reorder"; data: { id: string; index: number } };
+
+const publishContentGroupEvent = createEventPublisher<ContentGroupEvent>(
+  (workspaceId) => `contentGroups:${workspaceId}`
+);
+const subscribeToContentGroupEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<ContentGroupEvent, unknown> => {
+  return createEventSubscription<ContentGroupEvent>(ctx, `contentGroups:${workspaceId}`);
+};
+
+export { publishContentGroupEvent, subscribeToContentGroupEvents };
+export type { ContentGroupEvent };

--- packages/backend/src/events/content-piece.ts ---
@@ -0,0 +1,36 @@
+import { Observable } from "@trpc/server/observable";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { FullContentPieceWithAdditionalData } from "#database";
+
+type ContentPieceEvent =
+  | { action: "delete"; userId: string; data: { id: string } }
+  | { action: "create"; userId: string; data: FullContentPieceWithAdditionalData }
+  | {
+      action: "update";
+      userId: string;
+      variantId?: string;
+      data: Partial<FullContentPieceWithAdditionalData> & { id: string };
+    }
+  | {
+      action: "move";
+      userId: string;
+      data: {
+        contentPiece: FullContentPieceWithAdditionalData;
+        nextReferenceId?: string;
+        previousReferenceId?: string;
+      };
+    };
+
+const publishContentPieceEvent = createEventPublisher<ContentPieceEvent>((contentGroupId) => {
+  return `contentPieces:${contentGroupId}`;
+});
+const subscribeToContentPieceEvents = (
+  ctx: Context,
+  contentGroupId: string
+): Observable<ContentPieceEvent, unknown> => {
+  return createEventSubscription<ContentPieceEvent>(ctx, `contentPieces:${contentGroupId}`);
+};
+
+export { publishContentPieceEvent, subscribeToContentPieceEvents };
+export type { ContentPieceEvent };

--- packages/backend/src/events/extension.ts ---
@@ -0,0 +1,22 @@
+import { Observable } from "@trpc/server/observable";
+import { ContextObject, Extension } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type ExtensionEvent =
+  | { action: "delete"; data: { id: string } }
+  | { action: "create"; data: Extension & { id: string } }
+  | { action: "update"; data: { id: string; config: ContextObject } };
+
+const publishExtensionEvent = createEventPublisher<ExtensionEvent>((workspaceId) => {
+  return `extensions:${workspaceId}`;
+});
+const subscribeToExtensionEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<ExtensionEvent, unknown> => {
+  return createEventSubscription<ExtensionEvent>(ctx, `extensions:${workspaceId}`);
+};
+
+export { publishExtensionEvent, subscribeToExtensionEvents };
+export type { ExtensionEvent };

--- packages/backend/src/events/git-data.ts ---
@@ -0,0 +1,31 @@
+import { Observable } from "@trpc/server/observable";
+import { GitData } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type GitDataEvent =
+  | {
+      action: "configure";
+      data: GitData;
+    }
+  | {
+      action: "update";
+      data: Partial<GitData>;
+    }
+  | {
+      action: "reset";
+      data: {};
+    };
+
+const publishGitDataEvent = createEventPublisher<GitDataEvent>((workspaceId) => {
+  return `gitData:${workspaceId}`;
+});
+const subscribeToGitDataEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<GitDataEvent, unknown> => {
+  return createEventSubscription<GitDataEvent>(ctx, `gitData:${workspaceId}`);
+};
+
+export { publishGitDataEvent, subscribeToGitDataEvents };
+export type { GitDataEvent };

--- packages/backend/src/events/index.ts ---
@@ -0,0 +1,16 @@
+export * from "./comment";
+export * from "./content-group";
+export * from "./content-piece";
+export * from "./extension";
+export * from "./tag";
+export * from "./token";
+export * from "./transformer";
+export * from "./user-settings";
+export * from "./user";
+export * from "./variant";
+export * from "./workspace-membership";
+export * from "./webhook";
+export * from "./workspace-settings";
+export * from "./workspace";
+export * from "./git-data";
+export * from "./role";

--- packages/backend/src/events/role.ts ---
@@ -0,0 +1,23 @@
+import { Observable } from "@trpc/server/observable";
+import { Role } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type RoleEvent =
+  | {
+      action: "create";
+      data: Role;
+    }
+  | { action: "update"; data: Partial<Role> & { id: string } }
+  | { action: "delete"; data: { id: string; newRole: Role } };
+
+const publishRoleEvent = createEventPublisher((workspaceId) => `roles:${workspaceId}`);
+const subscribeToRoleEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<RoleEvent, unknown> => {
+  return createEventSubscription<RoleEvent>(ctx, `roles:${workspaceId}`);
+};
+
+export { publishRoleEvent, subscribeToRoleEvents };
+export type { RoleEvent };

--- packages/backend/src/events/tag.ts ---
@@ -0,0 +1,20 @@
+import { Observable } from "@trpc/server/observable";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { Tag } from "#database";
+
+type TagEvent =
+  | { action: "create"; data: Tag }
+  | { action: "update"; data: Partial<Tag> & { id: string } }
+  | {
+      action: "delete";
+      data: { id: string };
+    };
+
+const publishTagEvent = createEventPublisher<TagEvent>((workspaceId) => `tags:${workspaceId}`);
+const subscribeToTagEvents = (ctx: Context, workspaceId: string): Observable<TagEvent, unknown> => {
+  return createEventSubscription<TagEvent>(ctx, `tags:${workspaceId}`);
+};
+
+export { publishTagEvent, subscribeToTagEvents };
+export type { TagEvent };

--- packages/backend/src/events/token.ts ---
@@ -0,0 +1,25 @@
+import { Observable } from "@trpc/server/observable";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { Token } from "#database";
+
+type TokenEvent =
+  | {
+      action: "create";
+      data: Token;
+    }
+  | { action: "update"; data: Partial<Token> & { id: string } }
+  | { action: "delete"; data: { id: string } };
+
+const publishTokenEvent = createEventPublisher<TokenEvent>(
+  (workspaceId) => `tokens:${workspaceId}`
+);
+const subscribeToTokenEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<TokenEvent, unknown> => {
+  return createEventSubscription<TokenEvent>(ctx, `tokens:${workspaceId}`);
+};
+
+export { publishTokenEvent, subscribeToTokenEvents };
+export type { TokenEvent };

--- packages/backend/src/events/transformer.ts ---
@@ -0,0 +1,27 @@
+import { Observable } from "@trpc/server/observable";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { Transformer } from "#database";
+
+type TransformerEvent =
+  | {
+      action: "create";
+      data: Transformer & { id: string };
+    }
+  | {
+      action: "delete";
+      data: { id: string };
+    };
+
+const publishTransformerEvent = createEventPublisher<TransformerEvent>(
+  (workspaceId) => `transformers:${workspaceId}`
+);
+const subscribeToTransformerEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<TransformerEvent, unknown> => {
+  return createEventSubscription<TransformerEvent>(ctx, `transformers:${workspaceId}`);
+};
+
+export { publishTransformerEvent, subscribeToTransformerEvents };
+export type { TransformerEvent };

--- packages/backend/src/events/user-settings.ts ---
@@ -0,0 +1,19 @@
+import { Observable } from "@trpc/server/observable";
+import { AppearanceSettings } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type UserSettingsEvent = { action: "update"; data: Partial<AppearanceSettings> };
+
+const publishUserSettingsEvent = createEventPublisher<UserSettingsEvent>(
+  (userId) => `userSettings:${userId}`
+);
+const subscribeToUserSettingsEvents = (
+  ctx: Context,
+  userId: string
+): Observable<UserSettingsEvent, unknown> => {
+  return createEventSubscription<UserSettingsEvent>(ctx, `userSettings:${userId}`);
+};
+
+export { publishUserSettingsEvent, subscribeToUserSettingsEvents };
+export type { UserSettingsEvent };

--- packages/backend/src/events/user.ts ---
@@ -0,0 +1,17 @@
+import { Observable } from "@trpc/server/observable";
+import { VerificationDetails, Profile } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type UserEvent = {
+  action: "update";
+  data: Partial<Profile> & { id: string } & Partial<VerificationDetails>;
+};
+
+const publishUserEvent = createEventPublisher<UserEvent>((userId: string) => `user:${userId}`);
+const subscribeToUserEvents = (ctx: Context, userId: string): Observable<UserEvent, unknown> => {
+  return createEventSubscription<UserEvent>(ctx, `user:${userId}`);
+};
+
+export { publishUserEvent, subscribeToUserEvents };
+export type { UserEvent };

--- packages/backend/src/events/variant.ts ---
@@ -0,0 +1,31 @@
+import { Observable } from "@trpc/server/observable";
+import { Variant } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type VariantEvent =
+  | {
+      action: "create";
+      data: Variant & { id: string };
+    }
+  | {
+      action: "update";
+      data: Partial<Variant> & { id: string };
+    }
+  | {
+      action: "delete";
+      data: { id: string };
+    };
+
+const publishVariantEvent = createEventPublisher<VariantEvent>(
+  (workspaceId) => `variants:${workspaceId}`
+);
+const subscribeToVariantEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<VariantEvent, unknown> => {
+  return createEventSubscription<VariantEvent>(ctx, `variants:${workspaceId}`);
+};
+
+export { publishVariantEvent, subscribeToVariantEvents };
+export type { VariantEvent };

--- packages/backend/src/events/webhook.ts ---
@@ -0,0 +1,31 @@
+import { Observable } from "@trpc/server/observable";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { Webhook } from "#database";
+
+type WebhookEvent =
+  | {
+      action: "create";
+      data: Webhook & { id: string };
+    }
+  | {
+      action: "update";
+      data: Partial<Webhook> & { id: string };
+    }
+  | {
+      action: "delete";
+      data: { id: string };
+    };
+
+const publishWebhookEvent = createEventPublisher<WebhookEvent>((workspaceId) => {
+  return `webhooks:${workspaceId}`;
+});
+const subscribeToWebhookEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<WebhookEvent, unknown> => {
+  return createEventSubscription<WebhookEvent>(ctx, `webhooks:${workspaceId}`);
+};
+
+export { publishWebhookEvent, subscribeToWebhookEvents };
+export type { WebhookEvent };

--- packages/backend/src/events/workspace-membership.ts ---
@@ -0,0 +1,41 @@
+import { Observable } from "@trpc/server/observable";
+import { Role, WorkspaceMembership } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type WorkspaceMembershipEvent =
+  | { action: "create"; data: { id: string; pendingInvite: boolean } & WorkspaceMembership }
+  | {
+      action: "update";
+      data: {
+        id: string;
+        userId: string;
+        role?: Role;
+        pendingInvite?: boolean;
+        profile?: {
+          fullName?: string;
+          username?: string;
+          avatar?: string;
+        };
+      } & Partial<WorkspaceMembership>;
+    }
+  | {
+      action: "delete";
+      data: { id: string; userId: string };
+    };
+
+const publishWorkspaceMembershipEvent = createEventPublisher<WorkspaceMembershipEvent>(
+  (workspaceId: string) => `workspaceMemberships:${workspaceId}`
+);
+const subscribeToWorkspaceMembershipEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<WorkspaceMembershipEvent, unknown> => {
+  return createEventSubscription<WorkspaceMembershipEvent>(
+    ctx,
+    `workspaceMemberships:${workspaceId}`
+  );
+};
+
+export { publishWorkspaceMembershipEvent, subscribeToWorkspaceMembershipEvents };
+export type { WorkspaceMembershipEvent };

--- packages/backend/src/events/workspace-settings.ts ---
@@ -0,0 +1,24 @@
+import { Observable } from "@trpc/server/observable";
+import { WorkspaceSettings } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type WorkspaceSettingsEvent = {
+  action: "update";
+  data: Partial<Omit<WorkspaceSettings, "id">>;
+};
+
+const publishWorkspaceSettingsEvent = createEventPublisher<WorkspaceSettingsEvent>(
+  (workspaceId) => {
+    return `workspaceSettings:${workspaceId}`;
+  }
+);
+const subscribeToWorkspaceSettingsEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<WorkspaceSettingsEvent, unknown> => {
+  return createEventSubscription<WorkspaceSettingsEvent>(ctx, `workspaceSettings:${workspaceId}`);
+};
+
+export { publishWorkspaceSettingsEvent, subscribeToWorkspaceSettingsEvents };
+export type { WorkspaceSettingsEvent };

--- packages/backend/src/events/workspace.ts ---
@@ -0,0 +1,21 @@
+import { Observable } from "@trpc/server/observable";
+import { Workspace } from "#database";
+import { Context } from "#lib/context";
+import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+
+type WorkspaceEvent =
+  | { action: "update"; data: Partial<Workspace> & { id: string } }
+  | { action: "delete"; data: { id: string } };
+
+const publishWorkspaceEvent = createEventPublisher<WorkspaceEvent>((workspaceId) => {
+  return `workspace:${workspaceId}`;
+});
+const subscribeToWorkspaceEvents = (
+  ctx: Context,
+  workspaceId: string
+): Observable<WorkspaceEvent, unknown> => {
+  return createEventSubscription<WorkspaceEvent>(ctx, `workspace:${workspaceId}`);
+};
+
+export { publishWorkspaceEvent, subscribeToWorkspaceEvents };
+export type { WorkspaceEvent };

--- packages/backend/src/index.ts ---
@@ -1,5 +1,6 @@
-export * from "./server";
 export * from "./lib";
 export * from "./plugins";
-export * from "./routes";
 export * from "./database";
+export * from "./events";
+export * from "./routes";
+export * from "./server";

--- packages/backend/src/lib/auth.ts ---
@@ -1,7 +1,7 @@
 import { Context } from "./context";
 import { SessionData, getSessionId } from "./session";
 import { verifyValue } from "./hash";
-import { TokenPermission, getTokensCollection } from "#database/tokens";
+import { TokenPermission, getTokensCollection } from "#database";
 
 interface TokenData {
   permissions: TokenPermission[];

--- packages/backend/src/lib/context.ts ---
@@ -2,13 +2,21 @@ import { CreateFastifyContextOptions } from "@trpc/server/adapters/fastify";
 import { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
 import { Db } from "mongodb";
 
-interface Context {
+interface FastifyContext {
   fastify: FastifyInstance;
   req: FastifyRequest;
   res: FastifyReply;
+}
+interface Context extends FastifyContext {
   db: Db;
 }
 
+const createFastifyContext = (
+  { req, res }: CreateFastifyContextOptions,
+  fastify: FastifyInstance
+): FastifyContext => {
+  return { req, res, fastify };
+};
 const createContext = (
   { req, res }: CreateFastifyContextOptions,
   fastify: FastifyInstance
@@ -19,8 +27,11 @@ const createContext = (
     throw new Error("Database not connected");
   }
 
-  return { req, res, db, fastify };
+  return {
+    ...createFastifyContext({ req, res }, fastify),
+    db
+  };
 };
 
-export { createContext };
-export type { Context };
+export { createContext, createFastifyContext };
+export type { FastifyContext, Context };

--- packages/backend/src/lib/git-sync/github/index.ts ---
@@ -0,0 +1,4 @@
+export {
+  createInputContentProcessor as createInputContentProcessorGitHub,
+  createOutputContentProcessor as createOutputContentProcessorGitHub
+} from "./process-content";

--- packages/backend/src/lib/git-sync/github/process-content.ts ---
@@ -1,48 +1,26 @@
+import { AuthenticatedContext } from "../../middleware";
+import { UnderscoreID } from "../../mongo";
+import { jsonToBuffer, htmlToJSON, bufferToJSON } from "../../processing";
+import { InputContentProcessor, OutputContentProcessor } from "../types";
 import {
   GenericJSONContentNode,
   gfmInputTransformer,
   gfmOutputTransformer,
   InputTransformer,
   OutputTransformer
 } from "@vrite/sdk/transformers";
-import { ObjectId, Binary } from "mongodb";
-import { convert as convertToSlug } from "url-slug";
+import { ObjectId } from "mongodb";
 import * as prettier from "prettier/standalone";
 import markdownPlugin from "prettier/plugins/markdown";
 import htmlPlugin from "prettier/plugins/html";
 import axios from "axios";
 import crypto from "node:crypto";
 import {
-  FullContentPiece,
-  FullContents,
   FullGitData,
   getTransformersCollection,
   getWorkspaceSettingsCollection,
   Transformer
 } from "#database";
-import { UnderscoreID, jsonToBuffer, htmlToJSON, bufferToJSON, AuthenticatedContext } from "#lib";
-
-interface ProcessInputResult {
-  buffer: Buffer;
-  contentHash: string;
-  metadata: Partial<
-    Pick<FullContentPiece, keyof NonNullable<ReturnType<InputTransformer>["contentPiece"]>>
-  >;
-}
-interface OutputContentProcessorInput {
-  buffer: Buffer;
-  contentPiece: UnderscoreID<FullContentPiece<ObjectId>>;
-}
-
-interface InputContentProcessor {
-  process(inputContent: string): Promise<ProcessInputResult>;
-  processBatch(inputContent: string[]): Promise<ProcessInputResult[]>;
-}
-
-interface OutputContentProcessor {
-  process(input: OutputContentProcessorInput): Promise<string>;
-  processBatch(input: OutputContentProcessorInput[]): Promise<string[]>;
-}
 
 const extensionParserMap = {
   mdx: "mdx",
@@ -256,58 +234,5 @@ const createOutputContentProcessor = async (
     }
   };
 };
-const createSyncedPieces = async (
-  inputs: Array<{
-    path: string;
-    content: string;
-    workspaceId: ObjectId;
-    contentGroupId: ObjectId;
-    order: string;
-  }>,
-  inputContentProcessor: InputContentProcessor
-): Promise<
-  Array<{
-    contentPiece: UnderscoreID<FullContentPiece<ObjectId>>;
-    content: UnderscoreID<FullContents<ObjectId>>;
-    contentHash: string;
-  }>
-> => {
-  const inputContentProcessorOutput = await inputContentProcessor.processBatch(
-    inputs.map((input) => input.content)
-  );
-
-  return inputs.map((input, index) => {
-    const filename = input.path.split("/").pop() || "";
-    const { buffer, contentHash, metadata } = inputContentProcessorOutput[index];
-    const { members, tags, date, ...inputMetadata } = metadata;
-    const contentPiece: UnderscoreID<FullContentPiece<ObjectId>> = {
-      _id: new ObjectId(),
-      workspaceId: input.workspaceId,
-      contentGroupId: input.contentGroupId,
-      order: input.order,
-      members: [],
-      slug: convertToSlug(filename),
-      tags: [],
-      title: filename,
-      filename,
-      ...inputMetadata,
-      ...(date && { date: new Date(date) }),
-      ...(members && { members: members.map((memberId) => new ObjectId(memberId)) }),
-      ...(tags && { tags: tags.map((tagId) => new ObjectId(tagId)) })
-    };
-    const content = {
-      _id: new ObjectId(),
-      contentPieceId: contentPiece._id,
-      content: new Binary(buffer)
-    };
-
-    return {
-      contentPiece,
-      contentHash,
-      content
-    };
-  });
-};
 
-export { createSyncedPieces, createInputContentProcessor, createOutputContentProcessor };
-export type { OutputContentProcessorInput, OutputContentProcessor, InputContentProcessor };
+export { createInputContentProcessor, createOutputContentProcessor };

--- packages/backend/src/lib/git-sync/hooks.ts ---
@@ -1,7 +1,10 @@
 /* eslint-disable sonarjs/no-identical-functions */
-import { AuthenticatedContext } from "./middleware";
-import { ObjectId, UnderscoreID } from "./mongo";
-import { jsonToBuffer } from "./processing";
+import { createGenericOutputContentProcessor } from "./process-content";
+import { OutputContentProcessor } from "./types";
+import { AuthenticatedContext } from "../middleware";
+import { UnderscoreID } from "../mongo";
+import { jsonToBuffer } from "../processing";
+import { ObjectId } from "mongodb";
 import crypto from "node:crypto";
 import {
   FullContentGroup,
@@ -14,11 +17,7 @@ import {
   getContentsCollection,
   getGitDataCollection
 } from "#database";
-import {
-  OutputContentProcessor,
-  createOutputContentProcessor as createOutputContentProcessorGitHub
-} from "#routes/git/github/process-content";
-import { publishGitDataEvent } from "#routes/git/events";
+import { publishGitDataEvent } from "#events";
 
 type GitSyncHookEvent =
   | "contentPieceUpdated"
@@ -74,23 +73,6 @@ type GitSyncHookHandler<E extends GitSyncHookEvent> = (
   data: GitSyncHookEventData[E]
 ) => Promise<GitSyncHookData>;
 
-const createGenericOutputContentProcessor = async (
-  ctx: AuthenticatedContext,
-  gitData: UnderscoreID<FullGitData<ObjectId>>
-): Promise<OutputContentProcessor> => {
-  if (gitData.provider === "github") {
-    return await createOutputContentProcessorGitHub(ctx, gitData);
-  }
-
-  return {
-    process() {
-      return Promise.resolve("");
-    },
-    processBatch(input) {
-      return Promise.resolve(input.map(() => ""));
-    }
-  };
-};
 const handleContentGroupMoved: GitSyncHookHandler<"contentGroupMoved"> = async (
   { ctx, directories, records, outputContentProcessor },
   data

--- packages/backend/src/lib/git-sync/index.ts ---
@@ -0,0 +1,4 @@
+export * from "./hooks";
+export * from "./process-content";
+export * from "./github";
+export * from "./types";

--- packages/backend/src/lib/git-sync/process-content.ts ---
@@ -1,9 +1,5 @@
-import {
-  OutputContentProcessor,
-  InputContentProcessor,
-  createOutputContentProcessor as createOutputContentProcessorGitHub,
-  createInputContentProcessor as createInputContentProcessorGitHub
-} from "./github";
+import { createOutputContentProcessorGitHub, createInputContentProcessorGitHub } from "./github";
+import { InputContentProcessor, OutputContentProcessor } from "./types";
 import { ObjectId } from "mongodb";
 import { FullGitData } from "#database";
 import { AuthenticatedContext, UnderscoreID } from "#lib";

--- packages/backend/src/lib/git-sync/types.ts ---
@@ -0,0 +1,28 @@
+import { InputTransformer } from "@vrite/sdk/transformers";
+import { ObjectId } from "mongodb";
+import { FullContentPiece } from "#database";
+import { UnderscoreID } from "#lib/mongo";
+
+interface ProcessInputResult {
+  buffer: Buffer;
+  contentHash: string;
+  metadata: Partial<
+    Pick<FullContentPiece, keyof NonNullable<ReturnType<InputTransformer>["contentPiece"]>>
+  >;
+}
+interface OutputContentProcessorInput {
+  buffer: Buffer;
+  contentPiece: UnderscoreID<FullContentPiece<ObjectId>>;
+}
+
+interface InputContentProcessor {
+  process(inputContent: string): Promise<ProcessInputResult>;
+  processBatch(inputContent: string[]): Promise<ProcessInputResult[]>;
+}
+
+interface OutputContentProcessor {
+  process(input: OutputContentProcessorInput): Promise<string>;
+  processBatch(input: OutputContentProcessorInput[]): Promise<string[]>;
+}
+
+export type { InputContentProcessor, OutputContentProcessor, OutputContentProcessorInput };

--- packages/backend/src/lib/host-config.ts ---
@@ -0,0 +1,16 @@
+import { z } from "zod";
+
+const hostConfig = z.object({
+  githubOAuth: z.boolean(),
+  githubApp: z.boolean(),
+  sendgrid: z.boolean(),
+  smtp: z.boolean(),
+  search: z.boolean(),
+  aiSearch: z.boolean(),
+  extensions: z.boolean()
+});
+
+interface HostConfig extends z.infer<typeof hostConfig> {}
+
+export { hostConfig };
+export type { HostConfig };

--- packages/backend/src/lib/index.ts ---
@@ -1,9 +1,16 @@
-export * from "./utils";
+export * from "./auth";
+export * from "./context";
+export * as errors from "./errors";
+export * from "./git-sync";
+export * from "./hash";
+export * from "./middleware";
 export * from "./mongo";
 export * from "./plugin";
 export * from "./processing";
-export * from "./hash";
+export * from "./pub-sub";
+export * from "./session";
 export * from "./trpc";
-export * from "./middleware";
-export * from "./git-sync-hooks";
-export * as errors from "./errors";
+export * from "./utils";
+export * from "./webhooks";
+export * from "./workspace";
+export * from "./host-config";

--- packages/backend/src/lib/middleware.ts ---
@@ -1,8 +1,9 @@
 import { processAuth } from "./auth";
 import { Context } from "./context";
+import * as errors from "./errors";
+import { HostConfig } from "./host-config";
+import { Meta, middleware } from "./trpc";
 import { ObjectId } from "mongodb";
-import { Meta, middleware } from "#lib/trpc";
-import * as errors from "#lib/errors";
 
 interface AuthMiddlewareContextExtension<W extends true | false = true> {
   auth: {
@@ -69,7 +70,7 @@ const isAuthenticatedUser = middleware(async ({ ctx, next, meta }) => {
 const isEnabled = middleware(async ({ ctx, next, meta }) => {
   const requiredConfig = meta?.requiredConfig || [];
 
-  if (requiredConfig.some((property) => !ctx.fastify.hostConfig[property])) {
+  if (requiredConfig.some((property) => !ctx.fastify.hostConfig[property as keyof HostConfig])) {
     throw errors.serverError();
   }
 

--- packages/backend/src/lib/mongo.ts ---
@@ -1,9 +1,8 @@
 import { z } from "zod";
-import { ObjectId, Db, Collection } from "mongodb";
 
 type UnderscoreID<T extends Record<string, any>> = Omit<T, "id"> & { _id: T["id"] };
 
 const zodId = (): z.ZodString => z.string().regex(/^[a-f\d]{24}$/i, "invalid id");
 
-export { zodId, ObjectId };
-export type { UnderscoreID, Db, Collection };
+export { zodId };
+export type { UnderscoreID };

--- packages/backend/src/lib/processing.ts ---
@@ -30,7 +30,7 @@ import {
   TableCell,
   TableHeader,
   TableRow,
-  Wrapper
+  Element
 } from "@vrite/editor";
 
 type Attrs = Record<string, string | number | boolean>;
@@ -74,7 +74,7 @@ const htmlToJSON = (html: string): DocJSON => {
     OrderedList,
     TaskList,
     Blockquote,
-    Wrapper,
+    Element,
     CodeBlock,
     HorizontalRule,
     Image,
@@ -107,7 +107,7 @@ const jsonToBuffer = (json: DocJSON): Buffer => {
     OrderedList,
     TaskList,
     Blockquote,
-    Wrapper,
+    Element,
     CodeBlock,
     HorizontalRule,
     Image,

--- packages/backend/src/lib/session.ts ---
@@ -1,11 +1,16 @@
 import { Context } from "./context";
 import { UnderscoreID } from "./mongo";
+import * as errors from "./errors";
 import { nanoid } from "nanoid";
 import { ObjectId } from "mongodb";
-import { getUserSettingsCollection } from "#database/user-settings";
-import { getWorkspaceMembershipsCollection } from "#database/workspace-memberships";
-import { BaseRoleType, FullRole, Permission, getRolesCollection } from "#database/roles";
-import * as errors from "#lib/errors";
+import {
+  BaseRoleType,
+  FullRole,
+  Permission,
+  getRolesCollection,
+  getUserSettingsCollection,
+  getWorkspaceMembershipsCollection
+} from "#database";
 
 declare module "node:net" {
   interface Socket {

--- packages/backend/src/lib/trpc.ts ---
@@ -1,9 +1,9 @@
 import { Context } from "./context";
 import { CustomError } from "./errors";
+import { HostConfig } from "./host-config";
 import { initTRPC } from "@trpc/server";
 import { OpenApiMeta } from "trpc-openapi";
 import { TokenPermission, Permission } from "#database";
-import { HostConfig } from "#plugins/host-config";
 
 type Meta = OpenApiMeta & {
   permissions?: { session?: Permission[]; token?: TokenPermission[] };

--- packages/backend/src/lib/webhooks.ts ---
@@ -1,10 +1,16 @@
 import { AuthenticatedContext } from "./middleware";
+import { zodId } from "./mongo";
 import axios from "axios";
 import { z } from "zod";
-import { ObjectId, zodId } from "#lib/mongo";
-import { WebhookEvent, getWebhooksCollection } from "#database/webhooks";
-import { contentGroup, contentPiece, getContentGroupsCollection } from "#database";
-import { workspaceMembership } from "#database/workspace-memberships";
+import { ObjectId } from "mongodb";
+import {
+  WebhookEvent,
+  getWebhooksCollection,
+  contentGroup,
+  contentPiece,
+  getContentGroupsCollection,
+  workspaceMembership
+} from "#database";
 
 const webhookPayload = z.union([
   contentPiece.extend({ slug: z.string(), locked: z.boolean().optional() }),
@@ -56,8 +62,7 @@ const runWebhooks = async (
         })
       });
     } catch (error) {
-      // eslint-disable-next-line no-console
-      console.error("Failed to run webhook", error);
+      ctx.fastify.log.error("Failed to run webhook", error);
     }
   }
 };

--- packages/backend/src/plugins/database.ts ---
@@ -1,16 +1,16 @@
-import { publicPlugin } from "#lib/plugin";
-import { getContentPiecesCollection } from "#database/content-pieces";
-import { getRolesCollection } from "#database/roles";
-import { getTagsCollection } from "#database/tags";
-import { getTokensCollection } from "#database/tokens";
-import { getUserSettingsCollection } from "#database/user-settings";
-import { getWebhooksCollection } from "#database/webhooks";
-import { getWorkspaceSettingsCollection } from "#database/workspace-settings";
-import { getContentsCollection } from "#database/contents";
-import { getUsersCollection } from "#database/users";
-import { getCommentThreadsCollection } from "#database/comment-threads";
-import { getCommentsCollection } from "#database/comments";
+import { publicPlugin } from "#lib";
 import {
+  getUserSettingsCollection,
+  getWebhooksCollection,
+  getWorkspaceSettingsCollection,
+  getContentsCollection,
+  getUsersCollection,
+  getCommentThreadsCollection,
+  getCommentsCollection,
+  getContentPiecesCollection,
+  getRolesCollection,
+  getTagsCollection,
+  getTokensCollection,
   getContentGroupsCollection,
   getContentPieceVariantsCollection,
   getContentVariantsCollection,

--- packages/backend/src/plugins/email.ts ---
@@ -1,12 +1,10 @@
-import { publicPlugin } from "../lib/plugin";
 import { EmailService, FastifyInstance } from "fastify";
 import { MailService } from "@sendgrid/mail";
 import { ObjectId } from "mongodb";
 import { EmailTemplate, getSubject, renderEmail } from "@vrite/emails";
 import * as nodemailer from "nodemailer";
-import { getWorkspacesCollection } from "#database/workspaces";
-import { getUsersCollection } from "#database/users";
-import * as errors from "#lib/errors";
+import { getWorkspacesCollection, getUsersCollection } from "#database";
+import { errors, publicPlugin } from "#lib";
 
 type EmailSender = (email: {
   to: string;
@@ -77,8 +75,7 @@ const createEmailSender = (fastify: FastifyInstance): EmailSender => {
           text: renderEmail(email.template, email.data, true)
         });
       } catch (error) {
-        // eslint-disable-next-line no-console
-        console.error(error);
+        fastify.log.error(error);
 
         throw errors.serverError();
       }
@@ -109,8 +106,7 @@ const createEmailSender = (fastify: FastifyInstance): EmailSender => {
           text: renderEmail(email.template, email.data, true)
         });
       } catch (error) {
-        // eslint-disable-next-line no-console
-        console.error(error);
+        fastify.log.error(error);
 
         throw errors.serverError();
       }
@@ -119,7 +115,7 @@ const createEmailSender = (fastify: FastifyInstance): EmailSender => {
 
   return async () => {
     // eslint-disable-next-line no-console
-    console.error("No email service configured");
+    fastify.log.error("No email service configured");
 
     throw errors.serverError();
   };

--- packages/backend/src/plugins/git-sync.ts ---
@@ -1,6 +1,6 @@
 import { App } from "octokit";
 import { FastifyInstance } from "fastify";
-import { publicPlugin } from "#lib/plugin";
+import { publicPlugin } from "#lib";
 
 declare module "fastify" {
   interface FastifyInstance {

--- packages/backend/src/plugins/host-config.ts ---
@@ -1,17 +1,4 @@
-import { publicPlugin } from "../lib/plugin";
-import { z } from "zod";
-
-const hostConfig = z.object({
-  githubOAuth: z.boolean(),
-  githubApp: z.boolean(),
-  sendgrid: z.boolean(),
-  smtp: z.boolean(),
-  search: z.boolean(),
-  aiSearch: z.boolean(),
-  extensions: z.boolean()
-});
-
-interface HostConfig extends z.infer<typeof hostConfig> {}
+import { HostConfig, publicPlugin } from "#lib";
 
 declare module "fastify" {
   interface FastifyInstance {
@@ -44,5 +31,4 @@ const hostConfigPlugin = publicPlugin(async (fastify) => {
   fastify.decorate("hostConfig", hostConfig);
 });
 
-export { hostConfigPlugin, hostConfig };
-export type { HostConfig };
+export { hostConfigPlugin };

--- packages/backend/src/plugins/oauth.ts ---
@@ -2,12 +2,8 @@ import axios from "axios";
 import fastifyOAuth2, { FastifyOAuth2Options, OAuth2Namespace } from "@fastify/oauth2";
 import { ObjectId } from "mongodb";
 import { FastifyInstance } from "fastify";
-import { publicPlugin } from "#lib/plugin";
-import { generateSalt } from "#lib/hash";
-import { createSession } from "#lib/session";
-import { createWorkspace } from "#lib/workspace";
-import { getUsersCollection } from "#database/users";
-import { getUserSettingsCollection } from "#database";
+import { publicPlugin, generateSalt, createSession, createWorkspace } from "#lib";
+import { getUserSettingsCollection, getUsersCollection } from "#database";
 
 declare module "fastify" {
   interface FastifyInstance {
@@ -82,7 +78,7 @@ const registerGitHubOAuth = (fastify: FastifyInstance): void => {
         await userSettingsCollection.insertOne({
           _id: new ObjectId(),
           userId: newUser._id,
-          codeEditorTheme: "dark",
+          codeEditorTheme: "auto",
           uiTheme: "auto",
           accentColor: "energy",
           currentWorkspaceId: workspaceId
@@ -92,8 +88,7 @@ const registerGitHubOAuth = (fastify: FastifyInstance): void => {
 
       return res.redirect("/");
     } catch (error) {
-      // eslint-disable-next-line no-console
-      console.error(error);
+      fastify.log.error(error);
 
       return res.redirect("/auth");
     }

--- packages/backend/src/plugins/pub-sub.ts ---
@@ -1,5 +1,5 @@
-import { publicPlugin } from "../lib/plugin";
 import type { PubSubMessage, PubSubPlugin } from "fastify";
+import { publicPlugin } from "#lib";
 
 declare module "fastify" {
   interface PubSubMessage {

--- packages/backend/src/plugins/s3.ts ---
@@ -1,10 +1,5 @@
-import { publicPlugin } from "../lib/plugin";
-import {
-  S3Client,
-  CreateBucketCommand,
-  PutBucketCorsCommand,
-  HeadBucketCommand
-} from "@aws-sdk/client-s3";
+import { S3Client, CreateBucketCommand, HeadBucketCommand } from "@aws-sdk/client-s3";
+import { publicPlugin } from "#lib";
 
 declare module "fastify" {
   interface FastifyInstance {

--- packages/backend/src/plugins/search.ts ---
@@ -10,7 +10,8 @@ import { FastifyInstance, SearchService } from "fastify";
 import { OpenAI } from "openai";
 import { Stream } from "openai/streaming";
 import { ChatCompletionChunk } from "openai/resources/chat";
-import { Db, ObjectId, UnderscoreID, bufferToJSON, publicPlugin } from "#lib";
+import { Db, ObjectId } from "mongodb";
+import { UnderscoreID, bufferToJSON, publicPlugin } from "#lib";
 import { FullContentPiece, getContentVariantsCollection, getContentsCollection } from "#database";
 
 interface RawSearchResult {

--- packages/backend/src/plugins/session.ts ---
@@ -1,7 +1,6 @@
-import { appRouter } from "../routes";
 import { getHTTPStatusCodeFromError } from "@trpc/server/http";
-import { publicPlugin } from "#lib/plugin";
-import { CustomError } from "#lib/errors";
+import { appRouter } from "#routes";
+import { publicPlugin, errors } from "#lib";
 
 const sessionPlugin = publicPlugin(async (fastify) => {
   fastify.post("/session/refresh", async (req, res) => {
@@ -10,7 +9,7 @@ const sessionPlugin = publicPlugin(async (fastify) => {
     try {
       await caller.auth.refreshToken();
     } catch (e) {
-      const error = e as CustomError;
+      const error = e as errors.CustomError;
       const httpStatusCode = getHTTPStatusCodeFromError(error);
 
       res
@@ -26,7 +25,7 @@ const sessionPlugin = publicPlugin(async (fastify) => {
     try {
       await caller.auth.logout();
     } catch (e) {
-      const error = e as CustomError;
+      const error = e as errors.CustomError;
       const httpStatusCode = getHTTPStatusCodeFromError(error);
 
       res

--- packages/backend/src/plugins/trpc.ts ---
@@ -1,8 +1,7 @@
-import { publicPlugin } from "../lib/plugin";
-import { createContext } from "../lib/context";
-import { appRouter } from "../routes";
 import { fastifyTRPCPlugin } from "@trpc/server/adapters/fastify";
 import { FastifyReply, FastifyRequest } from "fastify";
+import { appRouter } from "#routes";
+import { publicPlugin, createContext } from "#lib";
 
 const trpcPlugin = publicPlugin(async (fastify) => {
   await fastify.register(fastifyTRPCPlugin, {

--- packages/backend/src/routes/auth.ts ---
@@ -2,21 +2,24 @@ import { ObjectId } from "mongodb";
 import { nanoid } from "nanoid";
 import { z } from "zod";
 import * as OTPAuth from "otpauth";
-import { FullUser, getUsersCollection } from "#database/users";
-import { UnderscoreID } from "#lib/mongo";
-import { generateSalt, hashValue, verifyValue } from "#lib/hash";
-import { procedure, router } from "#lib/trpc";
+import { FullUser, getUsersCollection, getUserSettingsCollection } from "#database";
 import {
+  UnderscoreID,
+  generateSalt,
+  processAuth,
+  errors,
+  isAuthenticated,
+  isAuthenticatedUser,
+  hashValue,
+  verifyValue,
   createSession,
   deleteSession,
   getSessionId,
   refreshSession,
-  updateSession
-} from "#lib/session";
-import { processAuth } from "#lib/auth";
-import * as errors from "#lib/errors";
-import { isAuthenticated, isAuthenticatedUser } from "#lib/middleware";
-import { getUserSettingsCollection } from "#database";
+  updateSession,
+  procedure,
+  router
+} from "#lib";
 
 const totpConfig = {
   issuer: "Vrite",
@@ -52,9 +55,13 @@ const authRouter = router({
   register: procedure
     .input(
       z.object({
-        email: z.string().email(),
+        email: z.string().email().max(320),
         username: z.string().regex(/^[a-z0-9_]*$/),
-        password: z.string().regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/),
+        password: z
+          .string()
+          .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/)
+          .min(8)
+          .max(128),
         redirect: z.string().optional()
       })
     )
@@ -94,7 +101,7 @@ const authRouter = router({
   sendMagicLink: procedure
     .input(
       z.object({
-        email: z.string().email(),
+        email: z.string().email().max(320),
         totpToken: z.string().optional(),
         redirect: z.string().optional()
       })
@@ -110,6 +117,12 @@ const authRouter = router({
         throw errors.unauthorized("emailNotVerified");
       }
 
+      const magicLinkSent = await ctx.fastify.redis.get(`user:${user._id}:magicLinkSent`);
+
+      if (magicLinkSent === "true") {
+        throw errors.unauthorized("magicLinkAlreadySent");
+      }
+
       if (user.totpSecret) {
         verifyTotp(user, input.totpToken);
       }
@@ -128,6 +141,7 @@ const authRouter = router({
         "EX",
         60 * 30
       );
+      await ctx.fastify.redis.set(`user:${user._id}:magicLinkSent`, "true", "EX", 60);
       await ctx.fastify.email.sendMagicLink(user.email, {
         code: magicLinkCode,
         userId: `${user._id}`
@@ -136,8 +150,8 @@ const authRouter = router({
   login: procedure
     .input(
       z.object({
-        email: z.string().email(),
-        password: z.string(),
+        email: z.string().email().max(320),
+        password: z.string().min(8).max(128),
         totpToken: z.string().optional()
       })
     )

--- packages/backend/src/routes/comments.ts ---
@@ -1,10 +1,6 @@
 import { Db, ObjectId } from "mongodb";
 import { z } from "zod";
-import { UnderscoreID, zodId } from "#lib/mongo";
-import { isAuthenticated } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { UnderscoreID, zodId, isAuthenticated, procedure, router, errors } from "#lib";
 import {
   CommentThread,
   commentThread,
@@ -15,26 +11,9 @@ import {
   commentMember,
   CommentWithAdditionalData,
   getWorkspaceMembershipsCollection,
-  getUsersCollection,
-  CommentMember
+  getUsersCollection
 } from "#database";
-
-type CommentEvent =
-  | { action: "createThread"; data: CommentThread }
-  | { action: "resolveThread"; data: Pick<CommentThread, "id" | "fragment" | "resolved"> }
-  | { action: "deleteThread"; data: Pick<CommentThread, "id" | "fragment"> }
-  | {
-      action: "createComment";
-      data: Omit<Comment, "memberId"> & { member: CommentMember | null };
-    }
-  | {
-      action: "updateComment";
-      data: Pick<Comment, "id" | "content">;
-    }
-  | {
-      action: "deleteComment";
-      data: Pick<Comment, "id">;
-    };
+import { publishCommentEvent, subscribeToCommentEvents } from "#events";
 
 const fetchCommentsMembers = async (
   db: Db,
@@ -99,9 +78,6 @@ const fetchThreadsFirstComments = async (
   return fetchCommentsMembers(db, comments);
 };
 const authenticatedProcedure = procedure.use(isAuthenticated);
-const publishEvent = createEventPublisher<CommentEvent>((contentPieceId) => {
-  return `comments:${contentPieceId}`;
-});
 const commentsRouter = router({
   getThread: authenticatedProcedure
     .input(z.object({ fragment: z.string() }))
@@ -216,7 +192,7 @@ const commentsRouter = router({
       };
 
       await commentThreadsCollection.insertOne(thread);
-      publishEvent(ctx, `${input.contentPieceId}`, {
+      publishCommentEvent(ctx, `${input.contentPieceId}`, {
         action: "createThread",
         data: {
           ...thread,
@@ -249,7 +225,7 @@ const commentsRouter = router({
           $set: { resolved: true }
         }
       );
-      publishEvent(ctx, `${existingThread.contentPieceId}`, {
+      publishCommentEvent(ctx, `${existingThread.contentPieceId}`, {
         action: "resolveThread",
         data: {
           id: `${existingThread._id}`,
@@ -289,7 +265,7 @@ const commentsRouter = router({
           $push: { comments: comment._id }
         }
       );
-      publishEvent(ctx, `${existingThread.contentPieceId}`, {
+      publishCommentEvent(ctx, `${existingThread.contentPieceId}`, {
         action: "createComment",
         data: (await fetchCommentsMembers(ctx.db, [comment]))[0]
       });
@@ -320,7 +296,7 @@ const commentsRouter = router({
         { _id: existingComment._id },
         { $set: { content: input.content } }
       );
-      publishEvent(ctx, `${existingThread.contentPieceId}`, {
+      publishCommentEvent(ctx, `${existingThread.contentPieceId}`, {
         action: "updateComment",
         data: {
           content: input.content,
@@ -353,7 +329,7 @@ const commentsRouter = router({
         { _id: existingThread._id },
         { $pull: { comments: existingComment._id } }
       );
-      publishEvent(ctx, `${existingThread.contentPieceId}`, {
+      publishCommentEvent(ctx, `${existingThread.contentPieceId}`, {
         action: "deleteComment",
         data: {
           id: `${existingComment._id}`
@@ -375,7 +351,7 @@ const commentsRouter = router({
 
       await commentThreadsCollection.deleteOne({ _id: existingThread._id });
       await commentsCollection.deleteMany({ threadId: existingThread._id });
-      publishEvent(ctx, `${existingThread.contentPieceId}`, {
+      publishCommentEvent(ctx, `${existingThread.contentPieceId}`, {
         action: "deleteThread",
         data: {
           id: `${existingThread._id}`,
@@ -386,7 +362,7 @@ const commentsRouter = router({
   changes: authenticatedProcedure
     .input(z.object({ contentPieceId: zodId() }))
     .subscription(({ ctx, input }) => {
-      return createEventSubscription<CommentEvent>(ctx, `comments:${input.contentPieceId}`);
+      return subscribeToCommentEvents(ctx, input.contentPieceId);
     })
 });
 

--- packages/backend/src/routes/content-groups.ts ---
@@ -1,11 +1,5 @@
 import { ObjectId } from "mongodb";
 import { z } from "zod";
-import { procedure, router } from "#lib/trpc";
-import { isAuthenticated } from "#lib/middleware";
-import { UnderscoreID, zodId } from "#lib/mongo";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { runWebhooks } from "#lib/webhooks";
 import {
   ContentGroup,
   contentGroup,
@@ -17,24 +11,18 @@ import {
   getWorkspacesCollection,
   FullContentGroup
 } from "#database";
-import { runGitSyncHook } from "#lib";
-
-type ContentGroupEvent =
-  | {
-      action: "create";
-      data: ContentGroup;
-    }
-  | {
-      action: "update";
-      data: Partial<ContentGroup> & { id: string };
-    }
-  | { action: "delete"; data: { id: string } }
-  | { action: "move"; data: ContentGroup }
-  | { action: "reorder"; data: { id: string; index: number } };
-
-const publishEvent = createEventPublisher<ContentGroupEvent>(
-  (workspaceId) => `contentGroups:${workspaceId}`
-);
+import {
+  runGitSyncHook,
+  runWebhooks,
+  errors,
+  UnderscoreID,
+  zodId,
+  isAuthenticated,
+  procedure,
+  router
+} from "#lib";
+import { subscribeToContentGroupEvents, publishContentGroupEvent } from "#events";
+
 const basePath = "/content-groups";
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const rearrangeContentGroups = (
@@ -179,7 +167,10 @@ const contentGroupsRouter = router({
         ancestor: "ancestor" in input ? input.ancestor : undefined,
         name: "name" in input ? input.name : undefined
       });
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "update", data: { id, ...update } });
+      publishContentGroupEvent(ctx, `${ctx.auth.workspaceId}`, {
+        action: "update",
+        data: { id, ...update }
+      });
     }),
   create: authenticatedProcedure
     .meta({
@@ -231,7 +222,7 @@ const contentGroupsRouter = router({
       }
 
       await contentGroupsCollection.insertOne(contentGroup);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishContentGroupEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: {
           id: `${contentGroup._id}`,
@@ -328,7 +319,7 @@ const contentGroupsRouter = router({
         descendants: contentGroup.descendants.map((id) => `${id}`),
         id: `${contentGroup._id}`
       });
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishContentGroupEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: input
       });
@@ -504,7 +495,7 @@ const contentGroupsRouter = router({
         ancestor: input.ancestor,
         contentGroup
       });
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishContentGroupEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "move",
         data: {
           id: input.id,
@@ -583,14 +574,14 @@ const contentGroupsRouter = router({
         );
       }
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishContentGroupEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "reorder",
         data: input
       });
     }),
   changes: authenticatedProcedure.subscription(async ({ ctx }) => {
-    return createEventSubscription<ContentGroupEvent>(ctx, `contentGroups:${ctx.auth.workspaceId}`);
+    return subscribeToContentGroupEvents(ctx, `${ctx.auth.workspaceId}`);
   })
 });
 
-export { contentGroupsRouter, publishEvent as publishContentGroupEvent };
+export { contentGroupsRouter };

--- packages/backend/src/routes/content-pieces.ts ---
@@ -3,25 +3,33 @@ import { z } from "zod";
 import { LexoRank } from "lexorank";
 import { convert as convertToSlug } from "url-slug";
 import { convert as convertToText } from "html-to-text";
-import { stringToRegex } from "#lib/utils";
-import { UnderscoreID, zodId } from "#lib/mongo";
-import { bufferToJSON, DocJSON, htmlToJSON, jsonToBuffer } from "#lib/processing";
-import { isAuthenticated } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
 import {
   contentPiece,
   ContentPiece,
   ContentPieceMember,
   contentPieceMember,
   FullContentPiece,
-  FullContentPieceWithAdditionalData,
-  getContentPiecesCollection
-} from "#database/content-pieces";
-import { Tag, getTagsCollection, tag } from "#database/tags";
-import * as errors from "#lib/errors";
-import { getContentsCollection } from "#database/contents";
-import { runWebhooks } from "#lib/webhooks";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+  getContentPiecesCollection,
+  Tag,
+  getTagsCollection,
+  tag,
+  getContentsCollection
+} from "#database";
+import {
+  runWebhooks,
+  errors,
+  runGitSyncHook,
+  procedure,
+  router,
+  isAuthenticated,
+  bufferToJSON,
+  DocJSON,
+  htmlToJSON,
+  jsonToBuffer,
+  UnderscoreID,
+  zodId,
+  stringToRegex
+} from "#lib";
 import {
   FullContentPieceVariant,
   getContentGroupsCollection,
@@ -32,30 +40,8 @@ import {
   getWorkspaceMembershipsCollection,
   getWorkspaceSettingsCollection
 } from "#database";
-import { runGitSyncHook } from "#lib";
-
-type ContentPieceEvent =
-  | { action: "delete"; userId: string; data: { id: string } }
-  | { action: "create"; userId: string; data: FullContentPieceWithAdditionalData }
-  | {
-      action: "update";
-      userId: string;
-      variantId?: string;
-      data: Partial<FullContentPieceWithAdditionalData> & { id: string };
-    }
-  | {
-      action: "move";
-      userId: string;
-      data: {
-        contentPiece: FullContentPieceWithAdditionalData;
-        nextReferenceId?: string;
-        previousReferenceId?: string;
-      };
-    };
+import { publishContentPieceEvent, subscribeToContentPieceEvents } from "#events";
 
-const publishEvent = createEventPublisher<ContentPieceEvent>((contentGroupId) => {
-  return `contentPieces:${contentGroupId}`;
-});
 const webhookPayload = (
   contentPiece: UnderscoreID<FullContentPiece<ObjectId>>
 ): ContentPiece & { id: string; locked?: boolean } => {
@@ -151,21 +137,21 @@ const mergeVariantData = (
 };
 const getVariantDetails = async (
   db: Db,
-  variantIdOrName?: string
-): Promise<{ variantId: ObjectId | null; variantName: string | null }> => {
+  variantIdOrKey?: string
+): Promise<{ variantId: ObjectId | null; variantKey: string | null }> => {
   const variantsCollection = getVariantsCollection(db);
 
-  if (!variantIdOrName) return { variantId: null, variantName: null };
+  if (!variantIdOrKey) return { variantId: null, variantKey: null };
 
-  const isId = ObjectId.isValid(variantIdOrName);
+  const isId = ObjectId.isValid(variantIdOrKey);
   const variant = await variantsCollection.findOne({
-    ...(isId && { _id: new ObjectId(variantIdOrName) }),
-    ...(!isId && { name: variantIdOrName })
+    ...(isId && { _id: new ObjectId(variantIdOrKey) }),
+    ...(!isId && { key: variantIdOrKey })
   });
 
   if (!variant) throw errors.notFound("variant");
 
-  return { variantId: variant._id || null, variantName: variant.name || null };
+  return { variantId: variant._id || null, variantKey: variant.key || null };
 };
 const getCanonicalLinkFromPattern = (
   pattern: string,
@@ -229,7 +215,7 @@ const contentPiecesRouter = router({
       const workspaceSettings = await workspaceSettingsCollection.findOne({
         workspaceId: ctx.auth.workspaceId
       });
-      const { variantId, variantName } = await getVariantDetails(ctx.db, input.variant);
+      const { variantId, variantKey } = await getVariantDetails(ctx.db, input.variant);
       const baseContentPiece = await contentPiecesCollection.findOne({
         _id: new ObjectId(input.id)
       });
@@ -296,7 +282,7 @@ const contentPiecesRouter = router({
           typeof contentPiece.canonicalLink !== "string" && {
             canonicalLink: getCanonicalLinkFromPattern(
               workspaceSettings.metadata.canonicalLinkPattern,
-              { slug: contentPiece.slug, variant: variantName }
+              { slug: contentPiece.slug, variant: variantKey }
             )
           }),
         id: `${contentPiece._id}`,
@@ -353,7 +339,7 @@ const contentPiecesRouter = router({
         workspaceId: ctx.auth.workspaceId
       });
       const contentGroupId = new ObjectId(input.contentGroupId);
-      const { variantId, variantName } = await getVariantDetails(ctx.db, input.variant);
+      const { variantId, variantKey } = await getVariantDetails(ctx.db, input.variant);
       const cursor = contentPiecesCollection
         .find({
           workspaceId: ctx.auth.workspaceId,
@@ -405,7 +391,7 @@ const contentPiecesRouter = router({
               typeof contentPiece.canonicalLink !== "string" && {
                 canonicalLink: getCanonicalLinkFromPattern(
                   workspaceSettings.metadata.canonicalLinkPattern,
-                  { slug: contentPiece.slug, variant: variantName }
+                  { slug: contentPiece.slug, variant: variantKey }
                 )
               }),
             id: `${contentPiece._id}`,
@@ -500,7 +486,7 @@ const contentPiecesRouter = router({
       const tags = await fetchContentPieceTags(ctx.db, contentPiece);
       const members = await fetchContentPieceMembers(ctx.db, contentPiece);
 
-      publishEvent(ctx, `${contentPiece.contentGroupId}`, {
+      publishContentPieceEvent(ctx, `${contentPiece.contentGroupId}`, {
         action: "create",
         userId: `${ctx.auth.userId}`,
         data: {
@@ -573,7 +559,7 @@ const contentPiecesRouter = router({
       const workspaceSettings = await workspaceSettingsCollection.findOne({
         workspaceId: ctx.auth.workspaceId
       });
-      const { variantId, variantName } = await getVariantDetails(ctx.db, variant);
+      const { variantId, variantKey } = await getVariantDetails(ctx.db, variant);
       const baseContentPiece = await contentPiecesCollection.findOne({
         _id: new ObjectId(id)
       });
@@ -609,7 +595,14 @@ const contentPiecesRouter = router({
       };
 
       if (typeof update.slug !== "undefined") {
-        contentPieceUpdates.slug = convertToSlug(update.slug || update.title || contentPiece.title);
+        if (update.slug) {
+          contentPieceUpdates.slug = update.slug
+            .split("/")
+            .map((slugPart) => convertToSlug(slugPart))
+            .join("/");
+        } else {
+          contentPieceUpdates.slug = convertToSlug(update.title || contentPiece.title);
+        }
       } else if (convertToSlug(contentPiece.title) === contentPiece.slug) {
         contentPieceUpdates.slug = convertToSlug(update.title || contentPiece.title);
       }
@@ -701,7 +694,7 @@ const contentPiecesRouter = router({
       const tags = await fetchContentPieceTags(ctx.db, newContentPiece);
       const members = await fetchContentPieceMembers(ctx.db, newContentPiece);
 
-      publishEvent(ctx, `${newContentPiece.contentGroupId}`, {
+      publishContentPieceEvent(ctx, `${newContentPiece.contentGroupId}`, {
         action: "update",
         userId: `${ctx.auth.userId}`,
         data: {
@@ -710,7 +703,7 @@ const contentPiecesRouter = router({
             typeof newContentPiece.canonicalLink !== "string" && {
               canonicalLink: getCanonicalLinkFromPattern(
                 workspaceSettings.metadata.canonicalLinkPattern,
-                { slug: newContentPiece.slug, variant: variantName }
+                { slug: newContentPiece.slug, variant: variantKey }
               )
             }),
           id: `${newContentPiece._id}`,
@@ -758,7 +751,7 @@ const contentPiecesRouter = router({
       });
       runGitSyncHook(ctx, "contentPieceRemoved", { contentPiece });
       runWebhooks(ctx, "contentPieceRemoved", webhookPayload(contentPiece));
-      publishEvent(ctx, `${contentPiece.contentGroupId}`, {
+      publishContentPieceEvent(ctx, `${contentPiece.contentGroupId}`, {
         action: "delete",
         userId: `${ctx.auth.userId}`,
         data: { id: input.id }
@@ -862,7 +855,7 @@ const contentPiecesRouter = router({
         contentPiece,
         contentGroupId: input.contentGroupId
       });
-      publishEvent(
+      publishContentPieceEvent(
         ctx,
         [
           `${contentPiece.contentGroupId}`,
@@ -915,12 +908,8 @@ const contentPiecesRouter = router({
   changes: authenticatedProcedure
     .input(z.object({ contentGroupId: zodId() }))
     .subscription(async ({ ctx, input }) => {
-      return createEventSubscription<ContentPieceEvent>(
-        ctx,
-        `contentPieces:${input.contentGroupId}`
-      );
+      return subscribeToContentPieceEvents(ctx, input.contentGroupId);
     })
 });
 
 export { contentPiecesRouter, fetchContentPieceTags };
-export type { ContentPieceEvent };

--- packages/backend/src/routes/extensions.ts ---
@@ -1,38 +1,18 @@
 import { createToken } from "./tokens";
 import { z } from "zod";
 import { ObjectId } from "mongodb";
-import { isAuthenticated, isEnabled } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
 import {
-  Extension,
   extension,
   contextObject,
   getExtensionsCollection,
-  ContextObject,
   tokenPermission,
   getTokensCollection,
-  getContentPiecesCollection,
-  FullContentPieceWithAdditionalData
+  getContentPiecesCollection
 } from "#database";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import * as errors from "#lib/errors";
-import { zodId } from "#lib";
+import { zodId, errors, procedure, router, isAuthenticated, isEnabled } from "#lib";
+import { publishExtensionEvent, subscribeToExtensionEvents } from "#events/extension";
+import { publishContentPieceEvent } from "#events";
 
-type ExtensionEvent =
-  | { action: "delete"; data: { id: string } }
-  | { action: "create"; data: Extension & { id: string } }
-  | { action: "update"; data: { id: string; config: ContextObject } };
-
-const publishEvent = createEventPublisher<ExtensionEvent>((workspaceId) => {
-  return `extensions:${workspaceId}`;
-});
-const publishContentPieceEvent = createEventPublisher<{
-  action: "update";
-  userId: string;
-  data: Partial<FullContentPieceWithAdditionalData> & { id: string };
-}>((contentGroupId) => {
-  return `contentPieces:${contentGroupId}`;
-});
 const authenticatedProcedure = procedure.use(isAuthenticated).use(isEnabled);
 const basePath = "/extension";
 const extensionsRouter = router({
@@ -169,7 +149,7 @@ const extensionsRouter = router({
       }));
     }),
   changes: authenticatedProcedure.input(z.void()).subscription(({ ctx }) => {
-    return createEventSubscription<ExtensionEvent>(ctx, `extensions:${ctx.auth.workspaceId}`);
+    return subscribeToExtensionEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   install: authenticatedProcedure
     .meta({
@@ -220,7 +200,7 @@ const extensionsRouter = router({
         workspaceId: ctx.auth.workspaceId,
         token: value
       });
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishExtensionEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: {
           config: {},
@@ -259,7 +239,7 @@ const extensionsRouter = router({
         throw errors.notFound("extension");
       }
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishExtensionEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: {
           id: input.id,
@@ -288,7 +268,7 @@ const extensionsRouter = router({
       await tokensCollection.deleteOne({
         extensionId: new ObjectId(input.id)
       });
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishExtensionEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: { id: input.id }
       });

--- packages/backend/src/routes/git/events.ts ---
@@ -1,23 +0,0 @@
-import { GitData } from "#database";
-import { createEventPublisher } from "#lib/pub-sub";
-
-type GitDataEvent =
-  | {
-      action: "configure";
-      data: GitData;
-    }
-  | {
-      action: "update";
-      data: Partial<GitData>;
-    }
-  | {
-      action: "reset";
-      data: {};
-    };
-
-const publishGitDataEvent = createEventPublisher<GitDataEvent>((workspaceId) => {
-  return `gitData:${workspaceId}`;
-});
-
-export { publishGitDataEvent };
-export type { GitDataEvent };

--- packages/backend/src/routes/git/github/index.ts ---
@@ -1,11 +1,3 @@
-import {
-  createSyncedPieces,
-  createInputContentProcessor,
-  createOutputContentProcessor,
-  OutputContentProcessorInput,
-  OutputContentProcessor,
-  InputContentProcessor
-} from "./process-content";
 import {
   commitChanges,
   getCommitsSince,
@@ -14,15 +6,23 @@ import {
   getDirectory
 } from "./requests";
 import { processPulledRecords } from "./pull";
-import { publishGitDataEvent } from "../events";
+import { createSyncedPieces } from "./synced-pieces";
 import { z } from "zod";
 import { LexoRank } from "lexorank";
-import { Binary } from "mongodb";
+import { Binary, ObjectId } from "mongodb";
 import { minimatch } from "minimatch";
 import crypto from "node:crypto";
-import { AuthenticatedContext, isAuthenticated, isEnabled } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
+import {
+  createInputContentProcessorGitHub,
+  createOutputContentProcessorGitHub,
+  OutputContentProcessorInput,
+  AuthenticatedContext,
+  isAuthenticated,
+  isEnabled,
+  procedure,
+  router,
+  errors
+} from "#lib";
 import {
   FullContentGroup,
   FullContentPiece,
@@ -39,9 +39,12 @@ import {
   getWorkspacesCollection,
   githubData
 } from "#database";
-import { ObjectId, UnderscoreID, zodId } from "#lib";
-import { publishContentGroupEvent } from "#routes/content-groups";
-import { publishWorkspaceSettingsEvent } from "#routes/workspace-settings";
+import { UnderscoreID, zodId } from "#lib";
+import {
+  publishContentGroupEvent,
+  publishGitDataEvent,
+  publishWorkspaceSettingsEvent
+} from "#events";
 
 const authenticatedProcedure = procedure.use(isAuthenticated).use(isEnabled);
 const enableFilenameMetadata = async (ctx: AuthenticatedContext): Promise<void> => {
@@ -138,7 +141,7 @@ const githubRouter = router({
       );
       const { baseDirectory } = gitData.github;
       const basePath = baseDirectory.startsWith("/") ? baseDirectory.slice(1) : baseDirectory;
-      const inputContentProcessor = await createInputContentProcessor(ctx, gitData);
+      const inputContentProcessor = await createInputContentProcessorGitHub(ctx, gitData);
       const syncDirectory = async (
         path: string,
         ancestors: ObjectId[]
@@ -415,7 +418,7 @@ const githubRouter = router({
       );
 
       if (conflicts.length && !input.force) {
-        const outputContentProcessor = await createOutputContentProcessor(ctx, gitData);
+        const outputContentProcessor = await createOutputContentProcessorGitHub(ctx, gitData);
         const contentPieceIds = conflicts.map((conflict) => conflict.contentPieceId);
         const contentPieces = await contentPiecesCollection
           .find({ _id: { $in: contentPieceIds } })
@@ -497,7 +500,7 @@ const githubRouter = router({
 
       if (!gitData?.github) throw errors.notFound("githubData");
 
-      const outputContentProcessor = await createOutputContentProcessor(ctx, gitData);
+      const outputContentProcessor = await createOutputContentProcessorGitHub(ctx, gitData);
       const changedRecords = gitData.records.filter((record) => {
         return record.currentHash !== record.syncedHash;
       });
@@ -620,7 +623,7 @@ const githubRouter = router({
 
       if (!gitData?.github) throw errors.notFound("githubData");
 
-      const outputContentProcessor = await createOutputContentProcessor(ctx, gitData);
+      const outputContentProcessor = await createOutputContentProcessorGitHub(ctx, gitData);
       const contentPiece = await contentPiecesCollection.findOne({
         _id: new ObjectId(input.contentPieceId)
       });
@@ -663,7 +666,7 @@ const githubRouter = router({
 
       if (!gitData?.github) throw errors.notFound("githubData");
 
-      const inputContentProcessor = await createInputContentProcessor(ctx, gitData);
+      const inputContentProcessor = await createInputContentProcessorGitHub(ctx, gitData);
       const { buffer, metadata, contentHash } = await inputContentProcessor.process(input.content);
       const { date, members, tags, ...restMetadata } = metadata;
 
@@ -722,5 +725,4 @@ const githubRouter = router({
     })
 });
 
-export { githubRouter, createInputContentProcessor, createOutputContentProcessor };
-export type { OutputContentProcessor, InputContentProcessor };
+export { githubRouter };

--- packages/backend/src/routes/git/github/pull.ts ---
@@ -1,6 +1,7 @@
-import { createSyncedPieces, createInputContentProcessor } from "./process-content";
+import { createSyncedPieces } from "./synced-pieces";
 import { LexoRank } from "lexorank";
 import { ObjectId, Binary } from "mongodb";
+import { createInputContentProcessorGitHub } from "#lib";
 import {
   FullGitData,
   getContentGroupsCollection,
@@ -63,7 +64,7 @@ const processPulledRecords = async (
     pulledContent: string;
     pulledHash: string;
   }> = [];
-  const inputContentProcessor = await createInputContentProcessor(ctx, gitData);
+  const inputContentProcessor = await createInputContentProcessorGitHub(ctx, gitData);
   const createDirectory = async (
     path: string
   ): Promise<UnderscoreID<FullContentGroup<ObjectId>>> => {

--- packages/backend/src/routes/git/github/synced-pieces.ts ---
@@ -0,0 +1,59 @@
+import { ObjectId, Binary } from "mongodb";
+import { convert as convertToSlug } from "url-slug";
+import { FullContentPiece, FullContents } from "#database";
+import { InputContentProcessor, UnderscoreID } from "#lib";
+
+const createSyncedPieces = async (
+  inputs: Array<{
+    path: string;
+    content: string;
+    workspaceId: ObjectId;
+    contentGroupId: ObjectId;
+    order: string;
+  }>,
+  inputContentProcessor: InputContentProcessor
+): Promise<
+  Array<{
+    contentPiece: UnderscoreID<FullContentPiece<ObjectId>>;
+    content: UnderscoreID<FullContents<ObjectId>>;
+    contentHash: string;
+  }>
+> => {
+  const inputContentProcessorOutput = await inputContentProcessor.processBatch(
+    inputs.map((input) => input.content)
+  );
+
+  return inputs.map((input, index) => {
+    const filename = input.path.split("/").pop() || "";
+    const { buffer, contentHash, metadata } = inputContentProcessorOutput[index];
+    const { members, tags, date, ...inputMetadata } = metadata;
+    const contentPiece: UnderscoreID<FullContentPiece<ObjectId>> = {
+      _id: new ObjectId(),
+      workspaceId: input.workspaceId,
+      contentGroupId: input.contentGroupId,
+      order: input.order,
+      members: [],
+      slug: convertToSlug(filename),
+      tags: [],
+      title: filename,
+      filename,
+      ...inputMetadata,
+      ...(date && { date: new Date(date) }),
+      ...(members && { members: members.map((memberId) => new ObjectId(memberId)) }),
+      ...(tags && { tags: tags.map((tagId) => new ObjectId(tagId)) })
+    };
+    const content = {
+      _id: new ObjectId(),
+      contentPieceId: contentPiece._id,
+      content: new Binary(buffer)
+    };
+
+    return {
+      contentPiece,
+      contentHash,
+      content
+    };
+  });
+};
+
+export { createSyncedPieces };

--- packages/backend/src/routes/git/index.ts ---
@@ -1,15 +1,9 @@
 import { githubRouter } from "./github";
-import { GitDataEvent, publishGitDataEvent } from "./events";
 import { processRecords } from "./process-records";
-import {
-  createGenericInputContentProcessor,
-  createGenericOutputContentProcessor
-} from "./process-content";
 import { z } from "zod";
-import { procedure, router } from "#lib/trpc";
+import { publishGitDataEvent, subscribeToGitDataEvents } from "#events";
+import { procedure, router, errors, isAuthenticated } from "#lib";
 import { getGitDataCollection, gitData } from "#database";
-import { errors, isAuthenticated } from "#lib";
-import { createEventSubscription } from "#lib/pub-sub";
 
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const gitRouter = router({
@@ -59,8 +53,8 @@ const gitRouter = router({
       publishGitDataEvent(ctx, `${ctx.auth.workspaceId}`, { action: "reset", data: {} });
     }),
   changes: authenticatedProcedure.input(z.void()).subscription(async ({ ctx }) => {
-    return createEventSubscription<GitDataEvent>(ctx, `gitData:${ctx.auth.workspaceId}`);
+    return subscribeToGitDataEvents(ctx, `${ctx.auth.workspaceId}`);
   })
 });
 
-export { gitRouter, createGenericInputContentProcessor, createGenericOutputContentProcessor };
+export { gitRouter };

--- packages/backend/src/routes/git/process-records.ts ---
@@ -1,6 +1,7 @@
 import { minimatch } from "minimatch";
+import { ObjectId } from "mongodb";
 import { FullGitData, GitRecord } from "#database";
-import { ObjectId, UnderscoreID } from "#lib";
+import { UnderscoreID } from "#lib";
 
 type RecordsProcessor = (gitData: UnderscoreID<FullGitData<ObjectId>>) => GitRecord<ObjectId>[];
 

--- packages/backend/src/routes/index.ts ---
@@ -15,16 +15,12 @@ import { contentGroupsRouter } from "./content-groups";
 import { extensionsRouter } from "./extensions";
 import { commentsRouter } from "./comments";
 import { variantsRouter } from "./variants";
-import {
-  createGenericInputContentProcessor,
-  createGenericOutputContentProcessor,
-  gitRouter
-} from "./git";
+import { gitRouter } from "./git";
 import { searchRouter } from "./search";
 import { transformersRouter } from "./transformers";
 import type { TRPCClientError } from "@trpc/client";
-import { Context, createContext } from "#lib/context";
-import { router } from "#lib/trpc";
+import { Context, createContext } from "#lib";
+import { router } from "#lib";
 
 const appRouter = router({
   auth: authRouter,
@@ -54,11 +50,6 @@ type ClientError = TRPCClientError<Router> & {
   data: TRPCClientError<Router>["data"] & { cause?: { code: string } & Record<string, string> };
 };
 
-export {
-  appRouter,
-  createContext,
-  createGenericInputContentProcessor,
-  createGenericOutputContentProcessor
-};
+export { appRouter, createContext };
 export type * from "#database";
 export type { ClientError, Router, PreviewData, HostConfig, Context };

--- packages/backend/src/routes/roles.ts ---
@@ -1,29 +1,15 @@
 import { z } from "zod";
 import { ObjectId } from "mongodb";
-import { procedure, router } from "#lib/trpc";
-import { isAuthenticated } from "#lib/middleware";
-import { zodId } from "#lib/mongo";
 import {
-  Role,
   baseRoleType,
   getRolesCollection,
   role,
   getWorkspaceMembershipsCollection,
   getUsersCollection
 } from "#database";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { updateSessionRole } from "#lib/session";
-
-type RoleEvent =
-  | {
-      action: "create";
-      data: Role;
-    }
-  | { action: "update"; data: Partial<Role> & { id: string } }
-  | { action: "delete"; data: { id: string; newRole: Role } };
-
-const publishEvent = createEventPublisher((workspaceId) => `roles:${workspaceId}`);
+import { zodId, isAuthenticated, procedure, router, updateSessionRole, errors } from "#lib";
+import { publishRoleEvent, subscribeToRoleEvents } from "#events";
+
 const basePath = "/roles";
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const rolesRouter = router({
@@ -63,7 +49,7 @@ const rolesRouter = router({
       }));
     }),
   changes: authenticatedProcedure.input(z.void()).subscription(({ ctx }) => {
-    return createEventSubscription<RoleEvent>(ctx, `roles:${ctx.auth.workspaceId}`);
+    return subscribeToRoleEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   get: authenticatedProcedure
     .meta({
@@ -136,7 +122,7 @@ const rolesRouter = router({
         }
       );
       updateSessionRole(ctx, input.id);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishRoleEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: {
           ...input
@@ -161,7 +147,7 @@ const rolesRouter = router({
       };
 
       await rolesCollection.insertOne(role);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishRoleEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: {
           ...input,
@@ -211,7 +197,7 @@ const rolesRouter = router({
           }
         }
       );
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishRoleEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: {
           id: input.id,

--- packages/backend/src/routes/search.ts ---
@@ -1,7 +1,7 @@
 import { z } from "zod";
-import { isAuthenticated, isEnabled } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import { errors, zodId } from "#lib";
+import { ObjectId } from "mongodb";
+import { errors, zodId, procedure, router, isAuthenticated, isEnabled } from "#lib";
+import { contentPiece, getContentPiecesCollection } from "#database";
 
 const authenticatedProcedure = procedure.use(isAuthenticated).use(isEnabled);
 const basePath = "/search";
@@ -24,21 +24,47 @@ const searchRouter = router({
       z.array(
         z.object({
           contentPieceId: z.string(),
+          contentPiece,
           breadcrumb: z.array(z.string()),
           content: z.string()
         })
       )
     )
     .query(async ({ ctx, input }) => {
+      const contentPiecesCollection = getContentPiecesCollection(ctx.db);
       const results = await ctx.fastify.search.search({
         query: input.query,
         workspaceId: ctx.auth.workspaceId,
         limit: input.limit || 8,
         variantId: input.variantId,
         contentPieceId: input.contentPieceId
       });
+      const processedResults = results.data.Get.Content.map(({ _additional, ...result }) => result);
+      const contentPieces = await contentPiecesCollection
+        .find({
+          _id: { $in: processedResults.map(({ contentPieceId }) => new ObjectId(contentPieceId)) }
+        })
+        .toArray();
+
+      return processedResults.map(({ contentPieceId, content, breadcrumb }) => {
+        const { _id, date, contentGroupId, tags, members, ...contentPiece } = contentPieces.find(
+          ({ _id }) => _id.toString() === contentPieceId
+        )!;
 
-      return results.data.Get.Content.map(({ _additional, ...result }) => result);
+        return {
+          contentPieceId,
+          breadcrumb,
+          content,
+          contentPiece: {
+            id: `${_id}`,
+            contentGroupId: `${contentGroupId}`,
+            ...contentPiece,
+            ...(date && { date: date.toISOString() }),
+            ...(tags && { tags: tags.map((tagId) => `${tagId}`) }),
+            ...(members && { members: members.map((members) => `${members}`) })
+          }
+        };
+      });
     }),
   ask: authenticatedProcedure
     .meta({

--- packages/backend/src/routes/tags.ts ---
@@ -1,24 +1,11 @@
 import { ObjectId } from "mongodb";
 import { z } from "zod";
-import { zodId } from "#lib/mongo";
-import { stringToRegex } from "#lib/utils";
-import { isAuthenticated } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { ExtendedTag, Tag, getTagsCollection, tag, getContentPiecesCollection } from "#database";
-
-type TagEvent =
-  | { action: "create"; data: Tag }
-  | { action: "update"; data: Partial<Tag> & { id: string } }
-  | {
-      action: "delete";
-      data: { id: string };
-    };
+import { stringToRegex, isAuthenticated, procedure, router, errors, zodId } from "#lib";
+import { ExtendedTag, getTagsCollection, tag, getContentPiecesCollection } from "#database";
+import { publishTagEvent, subscribeToTagEvents } from "#events";
 
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/tags";
-const publishEvent = createEventPublisher<TagEvent>((workspaceId) => `tags:${workspaceId}`);
 const tagsRouter = router({
   get: authenticatedProcedure
     .meta({
@@ -72,7 +59,7 @@ const tagsRouter = router({
 
       if (!matchedCount) throw errors.notFound("tag");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTagEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: input
       });
@@ -94,7 +81,7 @@ const tagsRouter = router({
       };
 
       await tagsCollection.insertOne(tag);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTagEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: {
           ...input,
@@ -160,7 +147,7 @@ const tagsRouter = router({
           }
         }
       );
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTagEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: { id: input.id }
       });
@@ -188,7 +175,7 @@ const tagsRouter = router({
       });
     }),
   changes: authenticatedProcedure.input(z.void()).subscription(({ ctx }) => {
-    return createEventSubscription<TagEvent>(ctx, `tags:${ctx.auth.workspaceId}`);
+    return subscribeToTagEvents(ctx, `${ctx.auth.workspaceId}`);
   })
 });
 

--- packages/backend/src/routes/tokens.ts ---
@@ -1,23 +1,20 @@
 import { z } from "zod";
 import { ObjectId } from "mongodb";
 import { nanoid } from "nanoid";
-import { procedure, router } from "#lib/trpc";
-import { AuthenticatedContext, isAuthenticated } from "#lib/middleware";
-import { generateSalt, hashValue } from "#lib/hash";
-import { UnderscoreID, zodId } from "#lib/mongo";
-import { Token, FullToken, getTokensCollection, token } from "#database/tokens";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-
-type TokenEvent =
-  | {
-      action: "create";
-      data: Token;
-    }
-  | { action: "update"; data: Partial<Token> & { id: string } }
-  | { action: "delete"; data: { id: string } };
-
-const publishEvent = createEventPublisher<TokenEvent>((workspaceId) => `tokens:${workspaceId}`);
+import {
+  AuthenticatedContext,
+  isAuthenticated,
+  procedure,
+  router,
+  UnderscoreID,
+  zodId,
+  errors,
+  generateSalt,
+  hashValue
+} from "#lib";
+import { Token, FullToken, getTokensCollection, token } from "#database";
+import { publishTokenEvent, subscribeToTokenEvents } from "#events";
+
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const createToken = async (
   input: Omit<Token, "id">,
@@ -75,7 +72,7 @@ const tokensRouter = router({
 
       if (deletedCount === 0) throw errors.notFound("token");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTokenEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: {
           id: input.id
@@ -125,7 +122,7 @@ const tokensRouter = router({
     .mutation(async ({ ctx, input }) => {
       const { token, value } = await createToken(input, ctx);
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTokenEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: {
           id: `${token._id}`,
@@ -161,7 +158,7 @@ const tokensRouter = router({
 
       if (matchedCount === 0) throw errors.notFound("token");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTokenEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: {
           id,
@@ -170,7 +167,7 @@ const tokensRouter = router({
       });
     }),
   changes: authenticatedProcedure.input(z.void()).subscription(({ ctx }) => {
-    return createEventSubscription<TokenEvent>(ctx, `tokens:${ctx.auth.workspaceId}`);
+    return subscribeToTokenEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   regenerate: authenticatedProcedure
     .meta({

--- packages/backend/src/routes/transformers.ts ---
@@ -1,25 +1,9 @@
 import { z } from "zod";
-import { isAuthenticated } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { Transformer, getGitDataCollection, transformer } from "#database";
-import { ObjectId, zodId } from "#lib/mongo";
-import { getTransformersCollection } from "#database/transformers";
+import { ObjectId } from "mongodb";
+import { getGitDataCollection, transformer, getTransformersCollection } from "#database";
+import { zodId, errors, procedure, router, isAuthenticated } from "#lib";
+import { publishTransformerEvent, subscribeToTransformerEvents } from "#events";
 
-type TransformersEvent =
-  | {
-      action: "create";
-      data: Transformer & { id: string };
-    }
-  | {
-      action: "delete";
-      data: { id: string };
-    };
-
-const publishEvent = createEventPublisher<TransformersEvent>(
-  (workspaceId) => `transformers:${workspaceId}`
-);
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/transformers";
 const transformersRouter = router({
@@ -31,15 +15,17 @@ const transformersRouter = router({
     .input(transformer.omit({ id: true }))
     .output(z.object({ id: zodId() }))
     .mutation(async ({ ctx, input }) => {
+      const extensionId = ctx.req.headers["x-vrite-extension-id"] as string | undefined;
       const transformersCollection = getTransformersCollection(ctx.db);
       const transformer = {
         _id: new ObjectId(),
         workspaceId: ctx.auth.workspaceId,
+        ...(extensionId && { extensionId: new ObjectId(extensionId) }),
         ...input
       };
 
       await transformersCollection.insertOne(transformer);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishTransformerEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: { ...input, id: `${transformer._id}` }
       });
@@ -71,15 +57,22 @@ const transformersRouter = router({
 
       if (!deletedCount) throw errors.notFound("transformer");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "delete", data: input });
+      publishTransformerEvent(ctx, `${ctx.auth.workspaceId}`, { action: "delete", data: input });
     }),
   list: authenticatedProcedure
     .meta({
       openapi: { method: "GET", path: `${basePath}/list`, protect: true },
       permissions: { token: ["workspace:read"] }
     })
     .input(z.void())
-    .output(z.array(transformer.extend({ inUse: z.boolean().optional() })))
+    .output(
+      z.array(
+        transformer.extend({
+          inUse: z.boolean().optional(),
+          extension: z.boolean().optional()
+        })
+      )
+    )
     .query(async ({ ctx }) => {
       const gitDataCollection = getGitDataCollection(ctx.db);
       const transformersCollection = getTransformersCollection(ctx.db);
@@ -93,20 +86,20 @@ const transformersRouter = router({
         .sort("_id", -1)
         .toArray();
 
-      return transformers.map(({ _id, workspaceId, ...transformerData }) => {
+      return transformers.map(({ _id, workspaceId, extensionId, ...transformerData }) => {
         return {
           id: `${_id}`,
           workspaceId: `${workspaceId}`,
           inUse: gitData?.github?.transformer === `${_id}`,
+          ...(extensionId && { extension: true }),
           ...transformerData
         };
       });
     }),
 
   changes: authenticatedProcedure.input(z.void()).subscription(async ({ ctx }) => {
-    return createEventSubscription<TransformersEvent>(ctx, `transformers:${ctx.auth.workspaceId}`);
+    return subscribeToTransformerEvents(ctx, `${ctx.auth.workspaceId}`);
   })
 });
 
 export { transformersRouter };
-export type { TransformersEvent };

--- packages/backend/src/routes/user-settings.ts ---
@@ -1,20 +1,13 @@
 import { z } from "zod";
-import { isAuthenticated, isAuthenticatedUser } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
 import {
   getWorkspacesCollection,
   getWorkspaceMembershipsCollection,
-  AppearanceSettings,
   appearanceSettings,
   getUserSettingsCollection
 } from "#database";
-import { zodId } from "#lib";
+import { zodId, errors, procedure, router, isAuthenticated, isAuthenticatedUser } from "#lib";
+import { publishUserSettingsEvent, subscribeToUserSettingsEvents } from "#events";
 
-type UserSettingsEvent = { action: "update"; data: Partial<AppearanceSettings> };
-
-const publishEvent = createEventPublisher<UserSettingsEvent>((userId) => `userSettings:${userId}`);
 const authenticatedUserProcedure = procedure.use(isAuthenticatedUser);
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/user-settings";
@@ -24,7 +17,7 @@ const userSettingsRouter = router({
       openapi: { method: "PUT", path: basePath, protect: true },
       permissions: { token: ["userSettings:write"] }
     })
-    .input(appearanceSettings.partial())
+    .input(appearanceSettings.omit({ codeEditorTheme: true }).partial())
     .output(z.void())
     .mutation(async ({ ctx, input }) => {
       const userSettingsCollection = getUserSettingsCollection(ctx.db);
@@ -35,7 +28,10 @@ const userSettingsRouter = router({
 
       if (!matchedCount) throw errors.notFound("userSettings");
 
-      publishEvent(ctx, `${ctx.auth.userId}`, { action: "update", data: input });
+      publishUserSettingsEvent(ctx, `${ctx.auth.userId}`, {
+        action: "update",
+        data: { ...input, ...(input.uiTheme ? { codeEditorTheme: input.uiTheme } : {}) }
+      });
     }),
   get: authenticatedUserProcedure
     .meta({
@@ -53,7 +49,7 @@ const userSettingsRouter = router({
       if (!userSettings) throw errors.notFound("userSettings");
 
       return {
-        codeEditorTheme: userSettings.codeEditorTheme,
+        codeEditorTheme: userSettings.uiTheme,
         uiTheme: userSettings.uiTheme,
         accentColor: userSettings.accentColor
       };
@@ -81,9 +77,8 @@ const userSettingsRouter = router({
       return `${ctx.auth.workspaceId}`;
     }),
   changes: authenticatedUserProcedure.input(z.void()).subscription(async ({ ctx }) => {
-    return createEventSubscription<UserSettingsEvent>(ctx, `userSettings:${ctx.auth.userId}`);
+    return subscribeToUserSettingsEvents(ctx, `${ctx.auth.userId}`);
   })
 });
 
 export { userSettingsRouter };
-export type { UserSettingsEvent };

--- packages/backend/src/routes/users.ts ---
@@ -1,33 +1,15 @@
 import { z } from "zod";
 import { ObjectId } from "mongodb";
 import { nanoid } from "nanoid";
-import { hashValue } from "#lib/hash";
-import { isAuthenticated } from "#lib/middleware";
-import { UnderscoreID } from "#lib/mongo";
-import { procedure, router } from "#lib/trpc";
-import {
-  FullUser,
-  Profile,
-  VerificationDetails,
-  getUsersCollection,
-  profile,
-  verificationDetails
-} from "#database/users";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { stringToRegex } from "#lib/utils";
+import { procedure, router, errors, UnderscoreID, isAuthenticated, hashValue } from "#lib";
+import { FullUser, getUsersCollection, profile, verificationDetails } from "#database/users";
+import { publishUserEvent, subscribeToUserEvents } from "#events";
 
-type UserEvent = {
-  action: "update";
-  data: Partial<Profile> & { id: string } & Partial<VerificationDetails>;
-};
-
-const publishEvent = createEventPublisher<UserEvent>((userId: string) => `user:${userId}`);
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/profile";
 const usersRouter = router({
   changes: authenticatedProcedure.input(z.void()).subscription(async ({ ctx }) => {
-    return createEventSubscription<UserEvent>(ctx, `user:${ctx.auth.userId}`);
+    return subscribeToUserEvents(ctx, `${ctx.auth.userId}`);
   }),
   get: authenticatedProcedure
     .meta({
@@ -118,7 +100,7 @@ const usersRouter = router({
           $set: update
         }
       );
-      publishEvent(ctx, `${ctx.auth.userId}`, {
+      publishUserEvent(ctx, `${ctx.auth.userId}`, {
         action: "update",
         data: {
           id: `${user._id}`,

--- packages/backend/src/routes/utils.ts ---
@@ -1,14 +1,13 @@
 import { z } from "zod";
 import ogs from "open-graph-scraper";
-import { PutObjectCommand } from "@aws-sdk/client-s3";
-import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
-import { nanoid } from "nanoid";
-import mime from "mime-types";
-import { extractPreviewDataFromOpenGraph } from "#lib/utils";
-import { isAuthenticated } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import { hostConfig, HostConfig } from "#plugins/host-config";
+import {
+  procedure,
+  router,
+  errors,
+  extractPreviewDataFromOpenGraph,
+  hostConfig,
+  HostConfig
+} from "#lib";
 
 const previewData = z
   .object({
@@ -22,7 +21,6 @@ const previewData = z
 
 interface PreviewData extends z.infer<typeof previewData> {}
 
-const authenticatedProcedure = procedure.use(isAuthenticated);
 const utilsRouter = router({
   hostConfig: procedure.output(hostConfig).query(({ ctx }) => {
     return ctx.fastify.hostConfig;

--- packages/backend/src/routes/variants.ts ---
@@ -1,34 +1,14 @@
 import { z } from "zod";
-import { isAuthenticated } from "#lib/middleware";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { ObjectId } from "mongodb";
 import {
-  Variant,
   getContentPieceVariantsCollection,
   getContentVariantsCollection,
   getVariantsCollection,
   variant
 } from "#database";
-import { ObjectId, zodId } from "#lib/mongo";
+import { zodId, errors, procedure, router, isAuthenticated } from "#lib";
+import { publishVariantEvent, subscribeToVariantEvents } from "#events";
 
-type VariantsEvent =
-  | {
-      action: "create";
-      data: Variant & { id: string };
-    }
-  | {
-      action: "update";
-      data: Partial<Variant> & { id: string };
-    }
-  | {
-      action: "delete";
-      data: { id: string };
-    };
-
-const publishEvent = createEventPublisher<VariantsEvent>(
-  (workspaceId) => `variants:${workspaceId}`
-);
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/variants";
 const variantsRouter = router({
@@ -48,7 +28,7 @@ const variantsRouter = router({
       };
 
       await variantsCollection.insertOne(variant);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishVariantEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: { ...input, id: `${variant._id}` }
       });
@@ -72,7 +52,7 @@ const variantsRouter = router({
 
       if (!matchedCount) throw errors.notFound("variant");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "update", data: input });
+      publishVariantEvent(ctx, `${ctx.auth.workspaceId}`, { action: "update", data: input });
     }),
   delete: authenticatedProcedure
     .meta({
@@ -101,7 +81,7 @@ const variantsRouter = router({
 
       if (!deletedCount) throw errors.notFound("variant");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "delete", data: input });
+      publishVariantEvent(ctx, `${ctx.auth.workspaceId}`, { action: "delete", data: input });
       ctx.fastify.search.deleteContent({ variantId, workspaceId: ctx.auth.workspaceId });
     }),
   list: authenticatedProcedure
@@ -131,9 +111,8 @@ const variantsRouter = router({
     }),
 
   changes: authenticatedProcedure.input(z.void()).subscription(async ({ ctx }) => {
-    return createEventSubscription<VariantsEvent>(ctx, `variants:${ctx.auth.workspaceId}`);
+    return subscribeToVariantEvents(ctx, `${ctx.auth.workspaceId}`);
   })
 });
 
 export { variantsRouter };
-export type { VariantsEvent };

--- packages/backend/src/routes/verification.ts ---
@@ -1,44 +1,22 @@
 import { z } from "zod";
 import { ObjectId } from "mongodb";
-import { VerificationDetails, getUsersCollection } from "#database/users";
-import { procedure, router } from "#lib/trpc";
-import { createWorkspace } from "#lib/workspace";
-import * as errors from "#lib/errors";
-import { createSession } from "#lib/session";
-import { isAuthenticatedUser } from "#lib/middleware";
-import { verifyValue } from "#lib";
 import {
-  WorkspaceMembership,
+  getUsersCollection,
+  getUserSettingsCollection,
   getWorkspaceMembershipsCollection
-} from "#database/workspace-memberships";
-import { runWebhooks } from "#lib/webhooks";
-import { createEventPublisher } from "#lib/pub-sub";
-import { getUserSettingsCollection } from "#database";
-
-type VerifyUserEvent = {
-  action: "update";
-  data: { id: string } & Partial<VerificationDetails & { email: string }>;
-};
-type VerifyWorkspaceInviteEvent = {
-  action: "update";
-  data: {
-    id: string;
-    userId: string;
-    pendingInvite?: boolean;
-    profile?: {
-      fullName?: string;
-      username?: string;
-      avatar?: string;
-    };
-  } & Partial<WorkspaceMembership>;
-};
+} from "#database";
+import {
+  runWebhooks,
+  verifyValue,
+  isAuthenticatedUser,
+  createSession,
+  errors,
+  createWorkspace,
+  procedure,
+  router
+} from "#lib";
+import { publishUserEvent, publishWorkspaceMembershipEvent } from "#events";
 
-const publishUserEvent = createEventPublisher<VerifyUserEvent>(
-  (userId: string) => `user:${userId}`
-);
-const publishWorkspaceMembershipEvent = createEventPublisher<VerifyWorkspaceInviteEvent>(
-  (workspaceId: string) => `workspaceMemberships:${workspaceId}`
-);
 const authenticatedUserProcedure = procedure.use(isAuthenticatedUser);
 const verificationRouter = router({
   verifyMagicLink: procedure
@@ -108,15 +86,15 @@ const verificationRouter = router({
         await userSettingsCollection.insertOne({
           _id: new ObjectId(),
           userId: user._id,
-          codeEditorTheme: "dark",
+          codeEditorTheme: "auto",
           uiTheme: "auto",
           accentColor: "energy",
           currentWorkspaceId: workspaceId
         });
         await createSession(ctx, `${user._id}`);
       } catch (error) {
         // eslint-disable-next-line no-console
-        console.error(error);
+        ctx.fastify.log.error(error);
       }
 
       return "/";

--- packages/backend/src/routes/versions.ts ---
@@ -1,192 +0,0 @@
-import { Db, ObjectId } from "mongodb";
-import { z } from "zod";
-import { isAuthenticated } from "#lib/middleware";
-import { UnderscoreID } from "#lib/mongo";
-import { procedure, router } from "#lib/trpc";
-import * as errors from "#lib/errors";
-import {
-  FullVersion,
-  getContentPieceVariantsCollection,
-  getContentPiecesCollection,
-  getContentVariantsCollection,
-  getContentsCollection,
-  getVersionsCollection,
-  version
-} from "#database";
-
-const authenticatedProcedure = procedure.use(isAuthenticated);
-const basePath = "/versions";
-const createVersion = async (
-  db: Db,
-  data: Pick<FullVersion<ObjectId>, "name" | "contentPieceId" | "variantId" | "workspaceId">
-): Promise<ObjectId> => {
-  const versionsCollection = getVersionsCollection(db);
-  const contentPiecesCollection = getContentPiecesCollection(db);
-  const contentsCollection = getContentsCollection(db);
-  const contentPieceVariantsCollection = getContentPieceVariantsCollection(db);
-  const contentVariantsCollection = getContentVariantsCollection(db);
-
-  let contentPiece = await contentPiecesCollection.findOne({
-    _id: data.contentPieceId,
-    workspaceId: data.workspaceId
-  });
-
-  if (!contentPiece) throw errors.notFound("contentPiece");
-
-  let content = await contentsCollection.findOne({
-    contentPieceId: contentPiece._id
-  });
-
-  if (!content) throw errors.notFound("content");
-
-  if (data.variantId) {
-    const contentPieceVariant = await contentPieceVariantsCollection.findOne({
-      contentPieceId: contentPiece._id,
-      variantId: data.variantId,
-      workspaceId: data.workspaceId
-    });
-
-    if (!contentPieceVariant) throw errors.notFound("contentPieceVariant");
-
-    const contentVariant = await contentVariantsCollection.findOne({
-      contentPieceId: contentPiece._id,
-      variantId: data.variantId
-    });
-
-    if (!contentVariant) throw errors.notFound("contentVariant");
-
-    contentPiece = { ...contentPiece, ...contentPieceVariant };
-    content = { ...content, ...contentVariant };
-  }
-
-  const version: UnderscoreID<FullVersion<ObjectId>> = {
-    _id: new ObjectId(),
-    name: data.name,
-    date: new Date(),
-    content: content.content,
-    contentPiece: {
-      members: contentPiece.members,
-      tags: contentPiece.tags,
-      title: contentPiece.title,
-      description: contentPiece.description,
-      slug: contentPiece.slug,
-      canonicalLink: contentPiece.canonicalLink,
-      coverAlt: contentPiece.coverAlt,
-      coverUrl: contentPiece.coverUrl,
-      customData: contentPiece.customData,
-      date: contentPiece.date
-    },
-    contentPieceId: contentPiece._id,
-    variantId: data.variantId,
-    workspaceId: data.workspaceId
-  };
-
-  await versionsCollection.insertOne(version);
-
-  return version._id;
-};
-const versionsRouter = router({
-  create: authenticatedProcedure
-    .input(version.pick({ name: true, contentPieceId: true, variantId: true }))
-    .output(version.pick({ id: true }))
-    .mutation(async ({ ctx, input }) => {
-      const versionId = await createVersion(ctx.db, {
-        name: input.name,
-        contentPieceId: new ObjectId(input.contentPieceId),
-        variantId: new ObjectId(input.variantId),
-        workspaceId: ctx.auth.workspaceId
-      });
-
-      return { id: `${versionId}` };
-    }),
-  delete: authenticatedProcedure
-    .input(
-      version.pick({
-        id: true
-      })
-    )
-    .output(z.void())
-    .mutation(async ({ ctx, input }) => {
-      const versionsCollection = getVersionsCollection(ctx.db);
-      const { deletedCount } = await versionsCollection.deleteOne({
-        _id: new ObjectId(input.id),
-        workspaceId: ctx.auth.workspaceId
-      });
-
-      if (!deletedCount) throw errors.notFound("version");
-    }),
-  restore: authenticatedProcedure
-    .input(
-      version.pick({
-        id: true
-      })
-    )
-    .output(z.void())
-    .mutation(async ({ ctx, input }) => {
-      const versionsCollection = getVersionsCollection(ctx.db);
-      const contentPiecesCollection = getContentPiecesCollection(ctx.db);
-      const contentsCollection = getContentsCollection(ctx.db);
-      const contentPieceVariantsCollection = getContentPieceVariantsCollection(ctx.db);
-      const contentVariantsCollection = getContentVariantsCollection(ctx.db);
-      const version = await versionsCollection.findOne({
-        _id: new ObjectId(input.id),
-        workspaceId: ctx.auth.workspaceId
-      });
-
-      if (!version) throw errors.notFound("version");
-
-      if (version.variantId) {
-        const contentPieceVariantUpdateResult = await contentPieceVariantsCollection.updateOne(
-          {
-            contentPieceId: version.contentPieceId,
-            variantId: version.variantId,
-            workspaceId: ctx.auth.workspaceId
-          },
-          {
-            $set: version.contentPiece
-          }
-        );
-
-        if (!contentPieceVariantUpdateResult.matchedCount) {
-          throw errors.notFound("contentPieceVariant");
-        }
-
-        const contentVariantUpdateResult = await contentVariantsCollection.updateOne(
-          {
-            contentPieceId: version.contentPieceId,
-            variantId: version.variantId
-          },
-          {
-            $set: {
-              content: version.content
-            }
-          }
-        );
-
-        if (!contentVariantUpdateResult.matchedCount) throw errors.notFound("contentVariant");
-
-        return;
-      }
-
-      const contentPieceUpdateResult = await contentPiecesCollection.updateOne(
-        {
-          _id: version.contentPieceId,
-          workspaceId: ctx.auth.workspaceId
-        },
-        { $set: version.contentPiece }
-      );
-
-      if (!contentPieceUpdateResult.matchedCount) throw errors.notFound("contentPiece");
-
-      const contentUpdateResult = await contentsCollection.updateOne(
-        {
-          contentPieceId: version.contentPieceId
-        },
-        { $set: { content: version.content } }
-      );
-
-      if (!contentUpdateResult.matchedCount) throw errors.notFound("content");
-    })
-});
-
-export { versionsRouter, createVersion };

--- packages/backend/src/routes/webhooks.ts ---
@@ -1,29 +1,9 @@
 import { ObjectId } from "mongodb";
 import { z } from "zod";
-import { procedure, router } from "#lib/trpc";
-import { isAuthenticated } from "#lib/middleware";
-import { UnderscoreID, zodId } from "#lib/mongo";
-import { FullWebhook, Webhook, getWebhooksCollection, webhook } from "#database/webhooks";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-
-type WebhookEvent =
-  | {
-      action: "create";
-      data: Webhook & { id: string };
-    }
-  | {
-      action: "update";
-      data: Partial<Webhook> & { id: string };
-    }
-  | {
-      action: "delete";
-      data: { id: string };
-    };
-
-const publishEvent = createEventPublisher<WebhookEvent>((workspaceId) => {
-  return `webhooks:${workspaceId}`;
-});
+import { FullWebhook, Webhook, getWebhooksCollection, webhook } from "#database";
+import { errors, isAuthenticated, UnderscoreID, zodId, procedure, router } from "#lib";
+import { publishWebhookEvent, subscribeToWebhookEvents } from "#events";
+
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/webhooks";
 const webhooksRouter = router({
@@ -143,15 +123,15 @@ const webhooksRouter = router({
       } else if (webhook.event.startsWith("contentPiece")) throw errors.serverError();
 
       await webhooksCollection.insertOne(webhook);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWebhookEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: { ...input, id: `${webhook._id}` }
       });
 
       return { id: `${webhook._id}` };
     }),
   changes: authenticatedProcedure.input(z.void()).subscription(({ ctx }) => {
-    return createEventSubscription<WebhookEvent>(ctx, `webhooks:${ctx.auth.workspaceId}`);
+    return subscribeToWebhookEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   update: authenticatedProcedure
     .meta({
@@ -189,7 +169,7 @@ const webhooksRouter = router({
 
       if (!matchedCount) throw errors.notFound("webhook");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWebhookEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: input
       });
@@ -210,7 +190,7 @@ const webhooksRouter = router({
 
       if (!deletedCount) throw errors.notFound("webhook");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWebhookEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: input
       });

--- packages/backend/src/routes/workspace-memberships.ts ---
@@ -1,53 +1,33 @@
-import { procedure, router } from "../lib/trpc";
-import { AuthenticatedContext, isAuthenticated, isAuthenticatedUser } from "../lib/middleware";
-import { UnderscoreID, generateSalt, hashValue, stringToRegex, zodId } from "../lib";
 import { ObjectId } from "mongodb";
 import { z } from "zod";
 import { nanoid } from "nanoid";
 import {
+  contentPieceMember,
   FullWorkspaceMembership,
-  WorkspaceMembership,
   getWorkspaceMembershipsCollection,
-  workspaceMembership
-} from "#database/workspace-memberships";
-import * as errors from "#lib/errors";
-import { getWorkspacesCollection, workspace } from "#database/workspaces";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { runWebhooks } from "#lib/webhooks";
-import {
-  Role,
-  contentPieceMember,
+  workspaceMembership,
   getRolesCollection,
   getUsersCollection,
-  profile,
-  role
+  getWorkspacesCollection,
+  workspace
 } from "#database";
-import { updateSessionUser } from "#lib/session";
-
-type WorkspaceMembershipEvent =
-  | { action: "create"; data: { id: string; pendingInvite: boolean } & WorkspaceMembership }
-  | {
-      action: "update";
-      data: {
-        id: string;
-        userId: string;
-        role?: Role;
-        pendingInvite?: boolean;
-        profile?: {
-          fullName?: string;
-          username?: string;
-          avatar?: string;
-        };
-      } & Partial<WorkspaceMembership>;
-    }
-  | {
-      action: "delete";
-      data: { id: string; userId: string };
-    };
-
-const publishEvent = createEventPublisher<WorkspaceMembershipEvent>(
-  (workspaceId) => `workspaceMemberships:${workspaceId}`
-);
+import {
+  AuthenticatedContext,
+  isAuthenticated,
+  procedure,
+  router,
+  isAuthenticatedUser,
+  updateSessionUser,
+  runWebhooks,
+  errors,
+  UnderscoreID,
+  generateSalt,
+  hashValue,
+  stringToRegex,
+  zodId
+} from "#lib";
+import { publishWorkspaceMembershipEvent, subscribeToWorkspaceMembershipEvents } from "#events";
+
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const authenticatedUserProcedure = procedure.use(isAuthenticatedUser);
 const basePath = "/workspace-memberships";
@@ -83,7 +63,7 @@ const removeMemberFromWorkspace = async (ctx: AuthenticatedContext, id?: string)
     _id: workspaceMembership._id
   });
   await updateSessionUser(ctx, `${workspaceMembership.userId}`);
-  publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+  publishWorkspaceMembershipEvent(ctx, `${ctx.auth.workspaceId}`, {
     action: "delete",
     data: { id: `${workspaceMembership._id}`, userId: `${workspaceMembership.userId}` }
   });
@@ -150,7 +130,7 @@ const workspaceMembershipsRouter = router({
         }
       );
       await updateSessionUser(ctx, `${membership.userId}`);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWorkspaceMembershipEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: {
           id: input.id,
@@ -332,7 +312,7 @@ const workspaceMembershipsRouter = router({
     })
     .input(
       z.object({
-        email: z.string().email(),
+        email: z.string().email().max(320),
         name: z.string(),
         roleId: zodId()
       })
@@ -368,7 +348,7 @@ const workspaceMembershipsRouter = router({
         inviteeName: input.name,
         membershipId: `${workspaceMembership._id}`
       });
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWorkspaceMembershipEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "create",
         data: {
           ...input,
@@ -379,10 +359,7 @@ const workspaceMembershipsRouter = router({
       runWebhooks(ctx, "memberInvited", { ...input, id: `${workspaceMembership._id}` });
     }),
   changes: authenticatedProcedure.subscription(({ ctx }) => {
-    return createEventSubscription<WorkspaceMembershipEvent>(
-      ctx,
-      `workspaceMemberships:${ctx.auth.workspaceId}`
-    );
+    return subscribeToWorkspaceMembershipEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   delete: authenticatedProcedure
     .meta({

--- packages/backend/src/routes/workspace-settings.ts ---
@@ -1,37 +1,15 @@
-import { procedure, router } from "../lib/trpc";
-import { isAuthenticated } from "../lib/middleware";
 import { z } from "zod";
 import zodToJsonSchema from "zod-to-json-schema";
 import { ObjectId } from "mongodb";
 import {
   FullWorkspaceSettings,
-  WorkspaceSettings,
-  wrapper,
   getWorkspaceSettingsCollection,
   prettierConfig,
-  workspaceSettings,
-  Wrapper
+  workspaceSettings
 } from "#database/workspace-settings";
-import * as errors from "#lib/errors";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
+import { errors, isAuthenticated, procedure, router } from "#lib";
+import { subscribeToWorkspaceSettingsEvents, publishWorkspaceSettingsEvent } from "#events";
 
-type WorkspaceSettingsEvent =
-  | {
-      action: "update";
-      data: Partial<Omit<WorkspaceSettings, "id">>;
-    }
-  | {
-      action: "createWrapper";
-      data: Wrapper;
-    }
-  | {
-      action: "deleteWrapper";
-      data: Pick<Wrapper, "key">;
-    };
-
-const publishEvent = createEventPublisher<WorkspaceSettingsEvent>((workspaceId) => {
-  return `workspaceSettings:${workspaceId}`;
-});
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const basePath = "/workspace-settings";
 const workspaceSettingsRouter = router({
@@ -58,107 +36,11 @@ const workspaceSettingsRouter = router({
         metadata: workspaceSettings.metadata,
         marks: workspaceSettings.marks,
         blocks: workspaceSettings.blocks,
-        embeds: workspaceSettings.embeds,
-        wrappers: workspaceSettings.wrappers || []
-      };
-    }),
-  createWrapper: authenticatedProcedure
-    .meta({
-      openapi: { method: "POST", path: `${basePath}/wrapper`, protect: true },
-      permissions: { session: ["manageWorkspace"], token: ["workspace:write"] }
-    })
-    .input(wrapper)
-    .output(z.object({ key: wrapper.shape.key }))
-    .mutation(async ({ input, ctx }) => {
-      const extensionId = ctx.req.headers["x-vrite-extension-id"] as string | undefined;
-      const workspaceSettingsCollection = getWorkspaceSettingsCollection(ctx.db);
-      const workspaceSettings = await workspaceSettingsCollection.findOne({
-        workspaceId: ctx.auth.workspaceId
-      });
-
-      if (!workspaceSettings) throw errors.notFound("workspaceSettings");
-
-      const sameKeyWrapperIndex =
-        workspaceSettings.wrappers?.findIndex((wrapper) => wrapper.key === input.key) || -1;
-
-      if (sameKeyWrapperIndex >= 0) {
-        await workspaceSettingsCollection.updateOne(
-          {
-            workspaceId: ctx.auth.workspaceId
-          },
-          {
-            $set: {
-              wrappers: (workspaceSettings.wrappers || []).map((item, index) => {
-                if (index === sameKeyWrapperIndex) {
-                  return {
-                    ...item,
-                    ...input,
-                    ...(extensionId && { extension: item.extension || true })
-                  };
-                }
-
-                return item;
-              })
-            }
-          }
-        );
-      } else {
-        await workspaceSettingsCollection.updateOne(
-          {
-            workspaceId: ctx.auth.workspaceId
-          },
-          {
-            $push: {
-              wrappers: {
-                ...input,
-                ...(extensionId && { extension: true })
-              }
-            }
-          }
-        );
-      }
-
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
-        action: "createWrapper",
-        data: input
-      });
-
-      return {
-        key: input.key
+        embeds: workspaceSettings.embeds
       };
     }),
-  deleteWrapper: authenticatedProcedure
-    .meta({
-      openapi: { method: "DELETE", path: `${basePath}/wrapper`, protect: true },
-      permissions: { session: ["manageWorkspace"], token: ["workspace:write"] }
-    })
-    .input(wrapper.pick({ key: true }))
-    .output(z.void())
-    .mutation(async ({ input, ctx }) => {
-      const workspaceSettingsCollection = getWorkspaceSettingsCollection(ctx.db);
-
-      await workspaceSettingsCollection.updateOne(
-        {
-          workspaceId: ctx.auth.workspaceId
-        },
-        {
-          $pull: {
-            wrappers: {
-              key: input.key
-            }
-          }
-        }
-      );
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
-        action: "deleteWrapper",
-        data: input
-      });
-    }),
   changes: authenticatedProcedure.input(z.void()).subscription(({ ctx }) => {
-    return createEventSubscription<WorkspaceSettingsEvent>(
-      ctx,
-      `workspaceSettings:${ctx.auth.workspaceId}`
-    );
+    return subscribeToWorkspaceSettingsEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   update: authenticatedProcedure
     .meta({
@@ -168,7 +50,7 @@ const workspaceSettingsRouter = router({
     .input(
       workspaceSettings
         .partial()
-        .omit({ id: true, prettierConfig: true, wrappers: true })
+        .omit({ id: true, prettierConfig: true })
         .extend({ prettierConfig: z.string().optional() })
     )
     .output(z.void())
@@ -196,7 +78,7 @@ const workspaceSettingsRouter = router({
 
       if (!matchedCount) throw errors.notFound("workspaceSettings");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWorkspaceSettingsEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: input
       });
@@ -210,4 +92,4 @@ const workspaceSettingsRouter = router({
     })
 });
 
-export { workspaceSettingsRouter, publishEvent as publishWorkspaceSettingsEvent };
+export { workspaceSettingsRouter };

--- packages/backend/src/routes/workspaces.ts ---
@@ -1,20 +1,16 @@
-import { procedure, router } from "../lib/trpc";
-import { isAuthenticated, isAuthenticatedUser } from "../lib/middleware";
-import { zodId } from "../lib";
 import { z } from "zod";
-import * as errors from "#lib/errors";
-import { Workspace, getWorkspacesCollection, workspace } from "#database/workspaces";
-import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
-import { createWorkspace, deleteWorkspace } from "#lib/workspace";
-import { getUsersCollection } from "#database";
+import {
+  errors,
+  createWorkspace,
+  deleteWorkspace,
+  isAuthenticated,
+  isAuthenticatedUser,
+  procedure,
+  router
+} from "#lib";
+import { getWorkspacesCollection, workspace, getUsersCollection } from "#database";
+import { subscribeToWorkspaceEvents, publishWorkspaceEvent } from "#events";
 
-type WorkspaceEvent =
-  | { action: "update"; data: Partial<Workspace> & { id: string } }
-  | { action: "delete"; data: { id: string } };
-
-const publishEvent = createEventPublisher<WorkspaceEvent>((workspaceId) => {
-  return `workspace:${workspaceId}`;
-});
 const authenticatedProcedure = procedure.use(isAuthenticated);
 const authenticatedUserProcedure = procedure.use(isAuthenticatedUser);
 const basePath = "/workspace";
@@ -42,7 +38,7 @@ const workspacesRouter = router({
       };
     }),
   changes: authenticatedProcedure.subscription(({ ctx }) => {
-    return createEventSubscription<WorkspaceEvent>(ctx, `workspace:${ctx.auth.workspaceId}`);
+    return subscribeToWorkspaceEvents(ctx, `${ctx.auth.workspaceId}`);
   }),
   update: authenticatedProcedure
     .meta({
@@ -61,7 +57,7 @@ const workspacesRouter = router({
 
       if (!matchedCount) throw errors.notFound("workspace");
 
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWorkspaceEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "update",
         data: input
       });
@@ -94,7 +90,7 @@ const workspacesRouter = router({
     .output(z.void())
     .mutation(async ({ ctx }) => {
       await deleteWorkspace(ctx.auth.workspaceId, ctx.fastify);
-      publishEvent(ctx, `${ctx.auth.workspaceId}`, {
+      publishWorkspaceEvent(ctx, `${ctx.auth.workspaceId}`, {
         action: "delete",
         data: {
           id: `${ctx.auth.workspaceId}`

--- packages/backend/src/server.ts ---
@@ -1,21 +1,34 @@
-import { OAuthPlugin } from "./plugins/oauth";
-import { s3Plugin } from "./plugins/s3";
-import { mailPlugin } from "./plugins/email";
-import { sessionPlugin } from "./plugins/session";
-import { pubSubPlugin } from "./plugins/pub-sub";
 import { envSchema } from "./env";
-import { databasePlugin } from "./plugins/database";
 import createFastify, { FastifyInstance } from "fastify";
 import envPlugin from "@fastify/env";
 import mongoPlugin from "@fastify/mongodb";
 import redisPlugin from "@fastify/redis";
 import jwtPlugin from "@fastify/jwt";
 import cookiePlugin from "@fastify/cookie";
 import zodToJsonSchema from "zod-to-json-schema";
-import { ZodRawShape } from "zod";
-import { gitSyncPlugin, hostConfigPlugin, searchPlugin } from "#plugins";
+import {
+  gitSyncPlugin,
+  hostConfigPlugin,
+  searchPlugin,
+  databasePlugin,
+  pubSubPlugin,
+  sessionPlugin,
+  mailPlugin,
+  s3Plugin,
+  OAuthPlugin
+} from "#plugins";
 
-const createServer = async (envSchemaExtension?: ZodRawShape): Promise<FastifyInstance> => {
+const createServer = async (
+  pluginOptions: Partial<{
+    database: boolean;
+    pubSub: boolean;
+    storage: boolean;
+    auth: boolean;
+    email: boolean;
+    gitSync: boolean;
+    search: boolean;
+  }>
+): Promise<FastifyInstance> => {
   const server = createFastify({
     maxParamLength: 5000,
     logger: false
@@ -25,32 +38,55 @@ const createServer = async (envSchemaExtension?: ZodRawShape): Promise<FastifyIn
   await server
     .register(envPlugin, {
       dotenv: true,
-      schema: zodToJsonSchema(envSchema.extend(envSchemaExtension || {}))
+      schema: zodToJsonSchema(envSchema)
     })
     .register(hostConfigPlugin);
+
   // Data
-  await server
-    .register(mongoPlugin, {
+  if (pluginOptions.database) {
+    await server.register(mongoPlugin, {
       forceClose: true,
       url: server.config.MONGO_URL
-    })
-    .register(redisPlugin, { url: server.config.REDIS_URL })
-    .register(redisPlugin, { url: server.config.REDIS_URL, namespace: "sub" });
-  await server.register(databasePlugin).register(pubSubPlugin).register(s3Plugin);
+    });
+    await server.register(databasePlugin);
+  }
+
+  if (pluginOptions.pubSub) {
+    await server
+      .register(redisPlugin, { url: server.config.REDIS_URL })
+      .register(redisPlugin, { url: server.config.REDIS_URL, namespace: "sub" });
+    await server.register(pubSubPlugin);
+  }
+
+  if (pluginOptions.storage) {
+    await server.register(s3Plugin);
+  }
+
   // Auth
-  await server
-    .register(cookiePlugin, { secret: server.config.SECRET })
-    .register(jwtPlugin, {
-      secret: server.config.SECRET,
-      cookie: { cookieName: "accessToken", signed: true }
-    })
-    .register(sessionPlugin)
-    .register(OAuthPlugin);
+  if (pluginOptions.auth) {
+    await server
+      .register(cookiePlugin, { secret: server.config.SECRET })
+      .register(jwtPlugin, {
+        secret: server.config.SECRET,
+        cookie: { cookieName: "accessToken", signed: true }
+      })
+      .register(sessionPlugin)
+      .register(OAuthPlugin);
+  }
+
   // Email
-  await server.register(mailPlugin);
+  if (pluginOptions.email) {
+    await server.register(mailPlugin);
+  }
+
   // GitHub sync
-  await server.register(gitSyncPlugin);
-  await server.register(searchPlugin);
+  if (pluginOptions.gitSync) {
+    await server.register(gitSyncPlugin);
+  }
+
+  if (pluginOptions.search) {
+    await server.register(searchPlugin);
+  }
 
   return server;
 };

--- packages/components/src/primitives/input.tsx ---
@@ -27,6 +27,7 @@ interface InputProps extends JSX.InputHTMLAttributes<HTMLInputElement> {
   suggestions?: string[];
   textarea?: boolean;
   autoResize?: boolean;
+  suggestionsBoxClass?: string;
   ref?: Ref<HTMLInputElement>[1];
   color?: keyof typeof inputColors;
   adornment?(): JSX.Element;
@@ -205,7 +206,8 @@ const Input: Component<InputProps> = (props) => {
       <Show when={suggestions().length > 0 && focused()}>
         <Card
           class={clsx(
-            `:base-2: absolute z-50 flex flex-col p-1 overflow-hidden transition-all duration-300 transform shadow-2xl w-full`
+            `:base-2: absolute z-50 flex flex-col p-1 overflow-hidden transition-all duration-300 transform shadow-2xl w-full`,
+            props.suggestionsBoxClass
           )}
           ref={setBoxRef}
         >

--- packages/components/src/primitives/tooltip.tsx ---
@@ -76,7 +76,10 @@ const Tooltip: Component<TooltipProps> = (props) => {
     }
   };
 
-  document.body.addEventListener("pointermove", onPointerMove);
+  if (typeof document !== "undefined") {
+    document.body.addEventListener("pointermove", onPointerMove);
+  }
+
   controller.onPositionUpdate(updatePosition);
   onMount(() => {
     const referenceElement = referenceRef();
@@ -118,7 +121,10 @@ const Tooltip: Component<TooltipProps> = (props) => {
   );
   onCleanup(() => {
     cleanupRef()?.();
-    document.body.removeEventListener("pointermove", onPointerMove);
+
+    if (typeof document !== "undefined") {
+      document.body.removeEventListener("pointermove", onPointerMove);
+    }
   });
 
   return (

--- packages/editor/src/code-block.ts ---
@@ -3,6 +3,8 @@ import { Node, mergeAttributes } from "@tiptap/core";
 
 interface CodeBlockAttributes {
   lang?: string;
+  title?: string;
+  meta?: string;
 }
 interface CodeBlockOptions {
   inline: boolean;
@@ -21,19 +23,12 @@ declare module "@tiptap/core" {
 
 const CodeBlock = Node.create<CodeBlockOptions>({
   name: "codeBlock",
-
   content: "text*",
-
   marks: "",
-
   group: "block",
-
   code: true,
-
   atom: true,
-
   isolating: true,
-
   addOptions() {
     return {
       inline: false,
@@ -59,6 +54,18 @@ const CodeBlock = Node.create<CodeBlockOptions>({
           return language.toLowerCase();
         },
         rendered: false
+      },
+      title: {
+        default: null,
+        parseHTML: (element) => {
+          return element.getAttribute("data-title");
+        }
+      },
+      meta: {
+        default: null,
+        parseHTML: (element) => {
+          return element.getAttribute("data-meta");
+        }
       }
     };
   },
@@ -77,7 +84,9 @@ const CodeBlock = Node.create<CodeBlockOptions>({
       [
         "code",
         {
-          class: node.attrs.lang ? `language-${node.attrs.lang}` : null
+          "class": node.attrs.lang ? `language-${node.attrs.lang}` : null,
+          "data-title": node.attrs.title,
+          "data-meta": node.attrs.meta
         },
         0
       ]

--- packages/editor/src/element.ts ---
@@ -0,0 +1,117 @@
+import { ExtendedRegExpMatchArray, Node, mergeAttributes, wrappingInputRule } from "@tiptap/core";
+import { nodeInputRule } from "#node-input-rule";
+
+interface ElementAttributes {
+  type?: string;
+  props: Record<string, unknown>;
+}
+
+declare module "@tiptap/core" {
+  interface Commands<ReturnType> {
+    Element: {
+      setElement: (attrs?: ElementAttributes) => ReturnType;
+      toggleElement: (attrs?: ElementAttributes) => ReturnType;
+      unsetElement: () => ReturnType;
+    };
+  }
+}
+
+const Element = Node.create({
+  name: "element",
+  content: "block*",
+  group: "block",
+  isolating: true,
+  defining: true,
+  selectable: true,
+  addAttributes() {
+    return {
+      props: {
+        default: {},
+        parseHTML: (element) => {
+          return JSON.parse(element.getAttribute("data-props") || "{}");
+        }
+      },
+      type: {
+        default: "Element",
+        parseHTML: (element) => {
+          return element.getAttribute("data-type");
+        }
+      }
+    };
+  },
+  parseHTML() {
+    return [
+      {
+        tag: "div[data-element=true]"
+      }
+    ];
+  },
+  renderHTML({ node, HTMLAttributes }) {
+    return [
+      "div",
+      mergeAttributes(HTMLAttributes, {
+        "data-element": "true",
+        "data-type": node.attrs.type,
+        "data-props": JSON.stringify(node.attrs.props)
+      }),
+      0
+    ];
+  },
+  addCommands() {
+    return {
+      setElement: (attrs) => {
+        return ({ commands }) => {
+          return commands.insertContent({
+            type: this.name,
+            attrs: {
+              type: "Element",
+              props: {},
+              ...attrs
+            }
+            // content: [{ type: "paragraph" }]
+          });
+        };
+      },
+      toggleElement: (attrs) => {
+        return ({ commands }) => {
+          return commands.toggleWrap(this.name, attrs);
+        };
+      },
+      unsetElement: () => {
+        return ({ commands }) => {
+          return commands.lift(this.name);
+        };
+      }
+    };
+  },
+  addInputRules() {
+    const getAttributes = (input: ExtendedRegExpMatchArray): Record<string, any> => {
+      const [code] = input;
+      const tagRegex = /^<(\w+?)(?:\s|\n|\/|>)/;
+      const [, tag] = tagRegex.exec(code.trim()) || [];
+
+      if (tag && tag !== "undefined") {
+        return { type: tag, props: {} };
+      }
+
+      return {};
+    };
+
+    return [
+      nodeInputRule({
+        find: /^<.*?.+?\/>$/,
+        type: this.type,
+        getAttributes
+      }),
+      wrappingInputRule({
+        find: /^<.*?.+?>$/,
+        type: this.type,
+        joinPredicate: () => false,
+        getAttributes
+      })
+    ];
+  }
+});
+
+export { Element };
+export type { ElementAttributes };

--- packages/editor/src/embed.ts ---
@@ -22,6 +22,7 @@ const Embed = Node.create({
   selectable: true,
   inline: false,
   group: "block",
+  draggable: true,
   addAttributes() {
     return {
       embed: {

--- packages/editor/src/image.ts ---
@@ -25,6 +25,7 @@ declare module "@tiptap/core" {
 
 const Image = Node.create<ImageOptions>({
   name: "image",
+  draggable: true,
   addOptions() {
     return {
       inline: false,

--- packages/editor/src/index.ts ---
@@ -1,5 +1,5 @@
 export * from "./code-block";
-export * from "./wrapper";
+export * from "./element";
 export * from "./task-item";
 export * from "./list-item";
 export * from "./embed";

--- packages/editor/src/wrapper.ts ---
@@ -1,94 +0,0 @@
-import { nodeInputRule } from "./node-input-rule";
-import { Node, mergeAttributes, wrappingInputRule } from "@tiptap/core";
-
-interface WrapperAttributes {
-  name?: string;
-}
-interface WrapperOptions {
-  HTMLAttributes: WrapperAttributes;
-}
-
-declare module "@tiptap/core" {
-  interface Commands<ReturnType> {
-    wrapper: {
-      setWrapper: (attrs?: WrapperAttributes) => ReturnType;
-      toggleWrapper: (attrs?: WrapperAttributes) => ReturnType;
-      unsetWrapper: () => ReturnType;
-    };
-  }
-}
-
-const Wrapper = Node.create<WrapperOptions>({
-  name: "wrapper",
-  content: "block+",
-  group: "block",
-  isolating: true,
-  defining: true,
-  addOptions() {
-    return {
-      HTMLAttributes: {}
-    };
-  },
-  addAttributes() {
-    return {
-      key: {
-        default: null,
-        parseHTML: (element) => {
-          return element.getAttribute("data-key");
-        }
-      }
-    };
-  },
-  parseHTML() {
-    return [
-      {
-        tag: "div[data-wrapper=true]"
-      }
-    ];
-  },
-  renderHTML({ node, HTMLAttributes }) {
-    return [
-      "div",
-      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, {
-        "data-wrapper": "true",
-        "data-key": node.attrs.key
-      }),
-      0
-    ];
-  },
-  addCommands() {
-    return {
-      setWrapper: (attrs) => {
-        return ({ commands }) => {
-          return commands.wrapIn(this.name, attrs);
-        };
-      },
-      toggleWrapper: (attrs) => {
-        return ({ commands }) => {
-          return commands.toggleWrap(this.name, attrs);
-        };
-      },
-      unsetWrapper: () => {
-        return ({ commands }) => {
-          return commands.lift(this.name);
-        };
-      }
-    };
-  },
-  addInputRules() {
-    return [
-      wrappingInputRule({
-        find: /(^:::(.*?)\s$)/,
-        type: this.type,
-        getAttributes: (match) => {
-          const [, , key] = match;
-
-          return { key: key.trim() };
-        }
-      })
-    ];
-  }
-});
-
-export { Wrapper };
-export type { WrapperAttributes, WrapperOptions };

--- packages/emails/src/render-email.tsx ---
@@ -6,24 +6,24 @@ import { WorkspaceInvite } from "../emails/workspace-invite";
 import { render } from "@react-email/render";
 import * as React from "react";
 
-type RenderEmail = typeof renderEmail;
-
 const templateMap = {
   "magic-link": MagicLink,
   "verify-email-change": VerifyEmailChange,
   "verify-email": VerifyEmail,
   "verify-password-change": VerifyPasswordChange,
   "workspace-invite": WorkspaceInvite
 };
-const renderEmail = (<T extends keyof typeof templateMap>(
+const renderEmail = <T extends keyof typeof templateMap>(
   template: T,
   props: Record<string, string>,
   plainText?: boolean
 ): string => {
   const Template = templateMap[template] as React.FC<Record<string, string>>;
 
   return render(<Template {...props} />, { plainText });
-}) as (test: string) => string;
+};
+
+type RenderEmail = typeof renderEmail;
 
 export { renderEmail };
 export type { RenderEmail };

--- packages/extensions/src/dev/spec.json ---
@@ -4,7 +4,6 @@
   "description": "Automatically publish and update articles on Dev.to",
   "permissions": ["contentGroups:read", "contentPieces:read", "webhooks:read", "webhooks:write"],
   "lifecycle": {
-    "on:install": "install",
     "on:uninstall": "uninstall",
     "on:configure": "configure",
     "on:initConfigurationView": "initConfigurationView",

--- packages/extensions/src/hashnode/spec.json ---
@@ -4,7 +4,6 @@
   "description": "Automatically publish and update articles on Hashnode",
   "permissions": ["contentGroups:read", "contentPieces:read", "webhooks:read", "webhooks:write"],
   "lifecycle": {
-    "on:install": "install",
     "on:uninstall": "uninstall",
     "on:configure": "configure",
     "on:initConfigurationView": "initConfigurationView",

--- packages/extensions/src/mdx/functions/configure.ts ---
@@ -0,0 +1,23 @@
+import { ExtensionBaseContext } from "@vrite/extensions";
+
+const configure = async (context: ExtensionBaseContext): Promise<void> => {
+  const transformers = await context.client.transformers.list();
+  const mdxTransformer = transformers.find((transformer) => {
+    return (
+      transformer.label === "MDX" &&
+      transformer.input === "https://extensions.vrite.io/mdx/input" &&
+      transformer.output === "https://extensions.vrite.io/mdx/output"
+    );
+  });
+
+  if (!mdxTransformer) {
+    await context.client.transformers.create({
+      input: "https://extensions.vrite.io/mdx/input",
+      output: "https://extensions.vrite.io/mdx/output",
+      maxBatchSize: 100,
+      label: "MDX"
+    });
+  }
+};
+
+export default configure;

--- packages/extensions/src/mdx/functions/uninstall.ts ---
@@ -0,0 +1,23 @@
+import { ExtensionGeneralContext } from "@vrite/extensions";
+
+const uninstall = async (context: ExtensionGeneralContext): Promise<void> => {
+  const transformers = await context.client.transformers.list();
+
+  if (transformers.length > 0) {
+    const mdxTransformer = transformers.find((transformer) => {
+      return (
+        transformer.label === "MDX" &&
+        transformer.input === "https://extensions.vrite.io/mdx/input" &&
+        transformer.output === "https://extensions.vrite.io/mdx/output"
+      );
+    });
+
+    if (mdxTransformer) {
+      await context.client.transformers.delete({
+        id: mdxTransformer?.id
+      });
+    }
+  }
+};
+
+export default uninstall;

--- packages/extensions/src/mdx/icon-dark.svg ---
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
+    <path
+        d="M20.3,16.5l-3.9,3.9-4-3.9,1.1-1.1,2.1,2.1V11.8h1.5v5.8l2.1-2.1ZM3.5,15.7l2.7,2.7L9,15.7v4.4h1.5V12L6.2,16.3,2,12v8.1H3.5Z"
+        style="fill:#d2d2d2" />
+    <path d="M28.8,20l-3.1-3.1L22.6,20l-1-1.1,3.1-3.1-3.2-3.2,1.1-1,3.1,3.2,3.2-3.2,1.1,1-3.2,3.2,3.1,3.1Z"
+        style="fill:#f9ac00" />
+</svg>
\ No newline at end of file

--- packages/extensions/src/mdx/icon.svg ---
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
+    <path
+        d="M20.3,16.5l-3.9,3.9-4-3.9,1.1-1.1,2.1,2.1V11.8h1.5v5.8l2.1-2.1ZM3.5,15.7l2.7,2.7L9,15.7v4.4h1.5V12L6.2,16.3,2,12v8.1H3.5Z"
+        style="fill:#00000" />
+    <path d="M28.8,20l-3.1-3.1L22.6,20l-1-1.1,3.1-3.1-3.2-3.2,1.1-1,3.1,3.2,3.2-3.2,1.1,1-3.2,3.2,3.1,3.1Z"
+        style="fill:#f9ac00" />
+</svg>
\ No newline at end of file

--- packages/extensions/src/mdx/spec.json ---
@@ -0,0 +1,10 @@
+{
+  "name": "mdx",
+  "displayName": "MDX",
+  "description": "Adds MDX transformers to Git sync",
+  "permissions": ["workspace:write", "workspace:read"],
+  "lifecycle": {
+    "on:uninstall": "uninstall",
+    "on:configure": "configure"
+  }
+}

--- packages/extensions/src/medium/spec.json ---
@@ -4,7 +4,6 @@
   "description": "Automatically publish articles to Medium",
   "permissions": ["contentGroups:read", "contentPieces:read", "webhooks:read", "webhooks:write"],
   "lifecycle": {
-    "on:install": "install",
     "on:uninstall": "uninstall",
     "on:configure": "configure",
     "on:initConfigurationView": "initConfigurationView",

--- packages/sdk/javascript/package.json ---
@@ -1,6 +1,6 @@
 {
   "name": "@vrite/sdk",
-  "version": "0.2.0",
+  "version": "0.3.0",
   "private": false,
   "description": "JavaScript SDK and API client for Vrite - headless CMS for technical content",
   "license": "MIT",

--- packages/sdk/javascript/src/api/client.ts ---
@@ -1,5 +1,9 @@
 import { createContentGroupsEndpoints, ContentGroupsEndpoints } from "./content-groups";
-import { ContentPiecesEndpoints, createContentPiecesEndpoints } from "./content-pieces";
+import {
+  ContentPiece,
+  ContentPiecesEndpoints,
+  createContentPiecesEndpoints
+} from "./content-pieces";
 import { APIFetcherConfig, createAPIFetcher } from "./request";
 import { UserSettingsEndpoints, createUserSettingsEndpoints } from "./user-settings";
 import { TagsEndpoints, createTagsEndpoints } from "./tags";
@@ -17,6 +21,12 @@ import { VariantsEndpoints, createVariantsEndpoints } from "./variants";
 import { TransformersEndpoints, createTransformersEndpoints } from "./transformers";
 import PolyfilledEventSource from "@sanity/eventsource";
 
+interface SearchResult {
+  contentPieceId: string;
+  contentPiece: Omit<ContentPiece, "locked" | "content" | "coverWidth">;
+  breadcrumb: string[];
+  content: string;
+}
 interface ClientConfig extends APIFetcherConfig {}
 interface Client {
   contentGroups: ContentGroupsEndpoints;
@@ -36,27 +46,21 @@ interface Client {
     query: string;
     limit?: number;
     variantId?: string;
-    contentPieceID?: string;
-  }): Promise<
-    Array<{
-      contentPieceId: string;
-      breadcrumb: string[];
-      content: string;
-    }>
-  >;
+    contentPieceId?: string;
+  }): Promise<SearchResult[]>;
   ask(input: {
     query: string;
     onChunk?(chunk: string, content: string): void;
     onEnd?(content: string): void;
     onError?(error: string): void;
   }): void;
-  reconfigure(config: ClientConfig): void;
+  useSignal(signal: AbortSignal | null): Client;
+  reconfigure(config: ClientConfig): Client;
 }
 
 const createClient = (config: ClientConfig): Client => {
-  const { sendRequest, reconfigure, getConfig } = createAPIFetcher(config);
-
-  return {
+  const { sendRequest, reconfigure, getConfig, getSignal, useSignal } = createAPIFetcher(config);
+  const client: Client = {
     contentGroups: createContentGroupsEndpoints(sendRequest),
     contentPieces: createContentPiecesEndpoints(sendRequest),
     tags: createTagsEndpoints(sendRequest),
@@ -102,10 +106,25 @@ const createClient = (config: ClientConfig): Client => {
         content += chunk;
         input.onChunk?.(chunk, content);
       });
+      getSignal()?.addEventListener("abort", () => {
+        source.close();
+      });
+      useSignal(null);
     },
-    reconfigure
+    useSignal(signal) {
+      useSignal(signal);
+
+      return client;
+    },
+    reconfigure(config) {
+      reconfigure(config);
+
+      return client;
+    }
   };
+
+  return client;
 };
 
 export { createClient };
-export type { Client };
+export type { Client, SearchResult };

--- packages/sdk/javascript/src/api/index.ts ---
@@ -1,5 +1,5 @@
 export { createClient } from "./client";
-export type { Client } from "./client";
+export type { Client, SearchResult } from "./client";
 export type { ContentGroup } from "./content-groups";
 export type {
   ContentPiece,

--- packages/sdk/javascript/src/api/request.ts ---
@@ -19,13 +19,16 @@ type PaginationParams = {
 interface APIFetcher {
   sendRequest: SendRequest;
   reconfigure: (config: APIFetcherConfig) => void;
+  useSignal: (signal: AbortSignal | null) => void;
   getConfig: () => Required<APIFetcherConfig>;
+  getSignal: () => AbortSignal | null;
 }
 
 const createAPIFetcher = (config: APIFetcherConfig): APIFetcher => {
   let baseURL = config.baseURL || "https://api.vrite.io";
   let extensionId = config.extensionId || "";
   let headers = config.headers || {};
+  let signal: AbortSignal | null = null;
   let { token } = config;
 
   const sendRequest: SendRequest = async (method, path, options) => {
@@ -49,10 +52,13 @@ const createAPIFetcher = (config: APIFetcherConfig): APIFetcher => {
             ...headers
           },
           body: options?.body ? JSON.stringify(options.body) : null,
+          signal,
           method
         }
       );
 
+      signal = null;
+
       let json = null;
 
       try {
@@ -81,6 +87,9 @@ const createAPIFetcher = (config: APIFetcherConfig): APIFetcher => {
     extensionId = config.extensionId || extensionId;
     headers = config.headers || headers;
   };
+  const useSignal = (newSignal: AbortSignal | null): void => {
+    signal = newSignal;
+  };
   const getConfig = (): Required<APIFetcherConfig> => {
     return {
       baseURL,
@@ -89,8 +98,11 @@ const createAPIFetcher = (config: APIFetcherConfig): APIFetcher => {
       headers
     };
   };
+  const getSignal = (): AbortSignal | null => {
+    return signal;
+  };
 
-  return { sendRequest, reconfigure, getConfig };
+  return { sendRequest, reconfigure, useSignal, getConfig, getSignal };
 };
 
 export { createAPIFetcher };

--- packages/sdk/javascript/src/transformers/content-walker.ts ---
@@ -85,7 +85,7 @@ type BlockquoteNode = {
     | ParagraphNode
     | HeadingNode
     | BlockquoteNode
-    | WrapperNode
+    | ElementNode
     | ImageNode
     | CodeBlockNode
     | EmbedNode
@@ -96,16 +96,17 @@ type BlockquoteNode = {
     | TableNode
   >;
 };
-type WrapperNode = {
-  type: "wrapper";
-  attrs?: {
-    key?: string;
+type ElementNode = {
+  type: "element";
+  attrs: {
+    type: string;
+    props: Record<string, any>;
   };
   content?: Array<
     | ParagraphNode
     | HeadingNode
     | BlockquoteNode
-    | WrapperNode
+    | ElementNode
     | ImageNode
     | CodeBlockNode
     | EmbedNode
@@ -126,7 +127,9 @@ type ImageNode = {
 type CodeBlockNode = {
   type: "codeBlock";
   attrs?: {
-    lang: string;
+    lang?: string;
+    meta?: string;
+    title?: string;
   };
   content: TextNode[];
 };
@@ -219,7 +222,7 @@ type DocNode = {
     | ParagraphNode
     | HeadingNode
     | BlockquoteNode
-    | WrapperNode
+    | ElementNode
     | ImageNode
     | CodeBlockNode
     | EmbedNode
@@ -237,7 +240,7 @@ type JSONContentNode = {
   paragraph: ParagraphNode;
   heading: HeadingNode;
   blockquote: BlockquoteNode;
-  wrapper: WrapperNode;
+  element: ElementNode;
   image: ImageNode;
   codeBlock: CodeBlockNode;
   embed: EmbedNode;

--- packages/sdk/javascript/src/transformers/output-transformers.ts ---
@@ -111,7 +111,7 @@ const gfmOutputTransformer = createOutputTransformer<string>((contentNode) => {
   };
   const transformContentNode = (
     nodeWalker: JSONContentNodeWalker<
-      JSONContentNode["listItem" | "taskItem" | "blockquote" | "doc" | "wrapper"]
+      JSONContentNode["listItem" | "taskItem" | "blockquote" | "doc" | "element"]
     >
   ): string => {
     return nodeWalker.children
@@ -151,9 +151,9 @@ const gfmOutputTransformer = createOutputTransformer<string>((contentNode) => {
             return `\n\`\`\`${child.node.attrs?.lang || ""}\n${transformTextNode(
               child as JSONContentNodeWalker<JSONContentNode["codeBlock"]>
             )}\n\`\`\`\n`;
-          case "wrapper":
+          case "element":
             return `\n${transformContentNode(
-              child as JSONContentNodeWalker<JSONContentNode["wrapper"]>
+              child as JSONContentNodeWalker<JSONContentNode["element"]>
             )}\n`;
           case "blockquote":
             return `\n${transformContentNode(
@@ -325,10 +325,10 @@ const htmlOutputTransformer = createOutputTransformer<string>((contentNode) => {
         })} />${(nodeWalker as JSONContentNodeWalker<JSONContentNode["taskItem"]>).children
           .map(transformContentNode)
           .join("")}</label></li>`;
-      case "wrapper":
+      case "element":
         return `<div ${stringifyAttributes({
-          "data-key": nodeWalker.node.attrs?.key
-        })}>${(nodeWalker as JSONContentNodeWalker<JSONContentNode["wrapper"]>).children
+          "data-type": nodeWalker.node.attrs?.type
+        })}>${(nodeWalker as JSONContentNodeWalker<JSONContentNode["element"]>).children
           .map(transformContentNode)
           .join("")}</div>`;
       case "blockquote":

