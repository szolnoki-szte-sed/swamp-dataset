--- src/lib/utils/donna128.h ---
@@ -8,6 +8,7 @@
 #ifndef BOTAN_CURVE25519_DONNA128_H_
 #define BOTAN_CURVE25519_DONNA128_H_
 
+#include <botan/internal/ct_utils.h>
 #include <botan/internal/mul128.h>
 #include <type_traits>
 
@@ -73,14 +74,14 @@ class donna128 final {
          l += x.l;
          h += x.h;
 
-         const uint64_t carry = (l < x.l);
+         const uint64_t carry = CT::Mask<uint64_t>::is_lt(l, x.l).if_set_return(1);
          h += carry;
          return *this;
       }
 
       constexpr donna128& operator+=(uint64_t x) {
          l += x;
-         const uint64_t carry = (l < x);
+         const uint64_t carry = CT::Mask<uint64_t>::is_lt(l, x).if_set_return(1);
          h += carry;
          return *this;
       }

--- src/lib/utils/ghash/ghash.cpp ---
@@ -131,7 +131,7 @@ void GHASH::key_schedule(std::span<const uint8_t> key) {
          m_HM[4 * j + 2 * i + 1] = H1;
 
          // GCM's bit ops are reversed so we carry out of the bottom
-         const uint64_t carry = R * (H1 & 1);
+         const uint64_t carry = CT::Mask<uint64_t>::expand(H1 & 1).if_set_return(R);
          H1 = (H1 >> 1) | (H0 << 63);
          H0 = (H0 >> 1) ^ carry;
       }

