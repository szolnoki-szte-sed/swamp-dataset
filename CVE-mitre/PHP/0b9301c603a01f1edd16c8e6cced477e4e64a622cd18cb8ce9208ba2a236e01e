--- assets/.htaccess ---
@@ -12,7 +12,7 @@
 </IfModule>
 
 # Allow Javascript, css and images
-<FilesMatch "\.(js|css|jpg|jpeg|png|woff|woff2|ttf|ico|mp3|sql)$">
+<FilesMatch "\.(js|css|jpg|jpeg|png|woff|woff2|ttf|ico|mp3|sql|docx|doc|pdf|xls|xlsx|ppt|pptx)$">
 	<IfModule !mod_authz_core.c>
 		Allow from all
 	</IfModule>

--- assets/cron/backup_db.sh ---
@@ -0,0 +1,2 @@
+#!/bin/bash
+mysqldump -u root -p'Dminp@s$4' mycom > /media/royall/70D4CB5DD4CB2466/db_$( date +"%d_%m_%Y__%H_%M" ).sql
\ No newline at end of file

--- assets/cron/downloadData.bat ---
@@ -0,0 +1 @@
+E:\xampp\htdocs\royal\assets\curl\bin\curl.exe http://192.168.0.133/royal/api/v1/?action=downloadData
\ No newline at end of file

--- assets/cron/sms.sh ---
@@ -0,0 +1,4 @@
+#!/bin/bash
+adb shell am start -a android.intent.action.SENDTO -d sms:01934333221 --es sms_body "SMS BODY GOES HERE" --ez exit_on_sent true
+adb shell input keyevent 22
+adb shell input keyevent 66
\ No newline at end of file

--- assets/cron/uploadData.bat ---
@@ -0,0 +1 @@
+E:\xampp\htdocs\royal\assets\curl\bin\curl.exe http://192.168.0.133/royal/api/v1/?action=uploadData
\ No newline at end of file

--- assets/js/callCenter.js ---
@@ -0,0 +1,1106 @@
+if(typeof sipCredentials === "undefined") {
+    throw new Error("Sorry! No SIP credentials found");
+}
+
+// Set getUserMedia for all browsers
+navigator.getUserMedia = ( navigator.getUserMedia ||
+                            navigator.webkitGetUserMedia ||
+                            navigator.mozGetUserMedia ||
+                            navigator.msGetUserMedia
+                        );
+
+if(navigator.getUserMedia !== undefined) {
+        
+    // Check if there have microphone connected
+    //var userMedia = navigator.getUserMedia() || navigator.mediaDevices.getUserMedia();
+    navigator.getUserMedia(
+        {audio: true},
+        function(){
+
+            // enable call button
+            $("#callButton").prop("disabled", false);
+
+        }, 
+        function() {
+            // error callback, no microphone
+            $("#status").html("<div style='font-size: 14px;' class='alert alert-danger'>No microphone found! Please connect your mic and reload!</div>").show();
+
+            // disable call button
+            $("#callButton").prop("disabled", true);
+            return;
+        }
+    );
+
+} else {
+
+    // Show error no user medai
+    $("#status").html("<div style='font-size: 14px;' class='alert alert-danger'>Sorry! No media found. This module will not work.</div>").show();
+
+    // disable call button
+    $("#callButton").prop("disabled", true);
+
+}
+
+
+
+var remoteAudio = new window.Audio();
+remoteAudio.autoplay = true;
+remoteAudio.crossOrigin="anonymous";
+
+var socket = new JsSIP.WebSocketInterface(sipCredentials.socket);
+var configuration = {
+    sockets  : [ socket ],
+    'uri': sipCredentials.uri, 
+    'password': sipCredentials.pass,
+    'username': sipCredentials.user,
+    'register': true
+};
+
+
+var callOptions = {
+    mediaConstraints: {audio: true, video: false}
+};
+
+
+var caller = "";
+var callerDisplay = "";
+var hideNumbers = ['*78', '*79', '*76'];
+
+var phone = new JsSIP.UA(configuration);
+
+phone.start();
+var session;
+
+phone.on('newRTCSession', function(data){
+
+    var newSession = data.session;
+    
+    if(session){ // if any existing session is running then terminate the new call
+        
+        /**
+         * Add a call log if any call is coming while the agents are busy
+         */
+        addCallLog({
+            caller: newSession.remote_identity.uri.user,
+            direction: newSession.direction,
+            duration: 0,
+            status: "Missed"
+        });
+
+        newSession.terminate();
+        return false;
+        
+    }
+
+    session = newSession;
+    var completeSession = function(){
+
+        session = null;
+
+        // Reset the mute and holde button
+        $("#muteCall, #holdCall").show();
+        $("#unholdCall, #unmuteCall").hide();
+
+    };
+
+    caller = session.remote_identity.uri.user;
+    callerDisplay = session.remote_identity.display_name;
+
+    // Show number in sms receipient
+    $("#csSmsSendTo").val(caller);
+
+    // Show number in feedback caller
+    $("#feedbackCaller").val(caller);
+
+
+    session.on('ended', function() {
+
+        // Do not show/ Add the caller details for hidden numbers
+        if(  jQuery.inArray(caller, hideNumbers) < 0 ) {
+        
+            addCallLog({
+                caller: caller,
+                direction: session.direction,
+                duration: Math.floor( (session.end_time.getTime() - session.start_time.getTime()) / 1000),
+                status: "Answered"
+            });
+
+            // Pause Ring
+            BMS.fn.pause();
+
+
+            // Stop Timer
+            BMS.fn.stopTimer(window.timer);
+
+            $("#status").html(`${caller} is disconnected`).show();
+
+
+            $("#timer").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(500).fadeIn(500);
+
+            // disable the number search and hangButton
+            $("#hangButton").prop("disabled", true);
+
+            // Show the feedback tab
+            $('.nav-tabs a[href="#tab_feedback"]').tab('show');
+
+            // Stop the phone
+            phone.stop();
+
+        }
+
+        // Complete the session
+        completeSession();
+        
+    });
+
+
+    session.on('failed', function(e) {
+        
+        // Show the call dialer after session end
+        $(".call-dialer").show();
+
+        // Hide call Received
+        $("#callReceiver").hide();
+
+        // Pause Ring
+        BMS.fn.pause();
+
+        // Show the call button
+        $("#callButton").show();
+
+        // Hide the end button
+        $("#hangButton").hide();
+
+        // Enable the number search and hangButton
+        $(".numberSearch, #hangButton").prop("disabled", false);
+        $(".number-dialer-div .input-group-addon").removeClass("disable-number-dialer-div");
+        
+
+        if(session.direction === 'incoming' ) {
+
+
+            if( e.originator === "local" ) {
+
+                $("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250, function() {
+                    
+                    $("#status").html(`Call rejected!`).show();
+
+                    addCallLog({
+                        caller: caller,
+                        direction: 'incoming',
+                        duration: 0,
+                        status: "Rejected"
+                    });
+
+                });
+
+            } else {
+
+                $("#status").html(`Missed call from ${callerDisplay}!`).show();
+                addCallLog({
+                    caller: caller,
+                    direction: 'incoming',
+                    duration: 0,
+                    status: "Missed"
+                });
+
+            }
+
+            
+        } else {
+
+            if( e.originator === "local" ) {
+
+                $("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250, function() {
+                    
+                    $("#status").html(`Dial a number!`).show();
+
+                    addCallLog({
+                        caller: caller,
+                        direction: 'outgoing',
+                        duration: 0,
+                        status: "Unreachable"
+                    });
+
+                });
+
+            } else {
+
+                $("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250, function() {
+
+
+                    if( e.cause === "SIP Failure Code" ) {
+                        
+                        $("#status").html(`The number is not answered!`).show();
+
+                        addCallLog({
+                            caller: caller,
+                            direction: 'outgoing',
+                            duration: 0,
+                            status: "Not Answered"
+                        });
+
+                    } else {
+                        
+                        $("#status").html(`The number is busy!`).show();
+                        addCallLog({
+                            caller: caller,
+                            direction: 'outgoing',
+                            duration: 0,
+                            status: "Busy"
+                        });
+
+                    }
+
+                    // Show the feedback tab for writing feedback if the call is not received or terminate by the remote caller
+                    $('.nav-tabs a[href="#tab_feedback"]').tab('show');
+
+                    // Stop the phone
+                    // phone.stop();
+
+
+                });
+
+            }
+
+        }
+        
+        completeSession();
+        
+    });
+
+    session.on("hold", function(e) {
+
+        if(e.originator === "remote") {
+            
+            $("#status").html(`${caller} is hold you.`).show();
+
+        } else {
+            
+            $("#status").html(`${caller} is on hold.`).show();
+
+        }
+
+    });
+
+    session.on("muted", function(e) {
+        
+        $("#status").html(`Call is muted.`).show();
+
+    });
+
+    session.on("unmuted", function(e) {
+        
+        $("#status").html(`${caller} is connected.`).show();
+
+    });
+
+    session.on("unhold", function() {
+    
+        $("#status").html(`${caller} is connected.`).show();
+
+    });
+
+    session.on('accepted', function(){
+
+        // Do not show the caller details for hidden numbers
+        if(  jQuery.inArray(caller, hideNumbers) < 0 ) {
+
+            // Show timer
+            $("#timer").show();
+            window.timer = BMS.fn.startTimer();
+
+            $("#status").html(`${caller} is connected.`).show();
+            
+        }
+
+        
+    });
+
+    session.on('confirmed',function(){
+        var localStream = session.connection.getLocalStreams()[0];
+        var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0]);
+        session.sendDTMF = function(tone){
+            dtmfSender.insertDTMF(tone);
+        };
+        
+    });
+
+
+    session.on('peerconnection', (e) => {
+
+        let logError = '';
+        const peerconnection = e.peerconnection;
+
+        peerconnection.onaddstream = function (e) {
+
+            // set remote audio stream (to listen to remote audio)
+            // remoteAudio is <audio> element on pag
+            remoteAudio.srcObject = e.stream;
+            remoteAudio.play();
+
+        };
+
+        var remoteStream = new MediaStream();
+
+        peerconnection.getReceivers().forEach(function (receiver) {
+            remoteStream.addTrack(receiver.track);
+
+        });
+
+
+    });
+    
+    if(session.direction === 'incoming'){
+
+
+        BMS.fn.play("incoming_call", true);
+
+        $("#status").html(`${callerDisplay} is calling...`).show();
+
+        // Show the call Receiver
+        $("#callReceiver").show();
+
+        // Hide timer
+        $("#timer").hide();
+
+        // Hide Call dialer
+        $(".call-dialer").hide();
+
+        // Show the caller details
+        showCallerDetails(caller);
+
+
+    } else {
+
+        session.connection.addEventListener('addstream', function(e){
+            BMS.fn.pause();
+            remoteAudio.srcObject = e.stream;
+        });     
+
+    }
+
+});
+
+
+// Call to the inputed number
+$(document).on("click", "#callButton", function() {
+
+    var number = $(".numberSearch").val();
+    
+    dial(number);
+
+});
+
+
+// Hangup the Call
+$(document).on("click", "#hangButton", function() {
+
+    session.terminate();
+
+});
+
+// terminate the session while closing the browser
+$(window).on("beforeunload", function() {
+   
+    session.terminate();
+
+});
+
+// Mute the Call
+$(document).on("click", "#muteCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.mute();
+
+    // hide mutecall button and show unmute call
+    $("#muteCall, #unmuteCall").toggle();
+
+});
+
+// Unmute the Call
+$(document).on("click", "#unmuteCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.unmute();
+
+    // show mutecall button and hide unmute call
+    $("#muteCall, #unmuteCall").toggle();
+
+});
+
+$(document).on("click", "#holdCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.hold();
+    // hide holdCall button and show unholdCall call
+    $("#holdCall, #unholdCall").toggle();
+
+});
+
+
+$(document).on("click", "#unholdCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.unhold();
+    // show hidecall button and hide unholdCall call
+    $("#holdCall, #unholdCall").toggle();
+
+});
+
+$(document).on("click", "#transferCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call to transfer.");
+    }
+
+    /** Generate options for sweet alert */
+    var generateOptions = {};
+    $.each(extentionNumbers, function(key, item) {
+        generateOptions[item.extention] = item.name;
+    });
+
+    // Transfer the Call
+    Swal.fire({
+        title: "Please select the extension",
+        input: "select",
+        inputOptions: generateOptions,
+        showCancelButton: true,
+        confirmButtonText: '<i class="fa fa-arrow-up"></i> Transfer Call',
+        closeOnConfirm: false,
+        animation: "slide-from-top",
+        inputPlaceholder: "Destination number..."
+    }).then((results) => {
+
+        if(results.value !== undefined) {
+
+            // Transfer and terminate session here
+            session.refer(results.value);
+            session.terminate();
+
+        }
+
+    });
+
+});
+
+
+/** Enable Do not disturb mode, by rejecting calls */
+$(document).on("click", "#enableDND", function() {
+
+    // Enable Donotdisturb in PBX side (Asterisk)
+    phone.call("*78", callOptions);
+
+    // Save the state in local
+    localStorage.setItem("dnd", "enable");
+
+    // hide enableDND button and show disableDND
+    $("#enableDND, #disableDND, .dndAlert").toggle();
+
+});
+
+
+$(document).on("click", "#disableDND", function() {
+
+
+    // Disable Donotdisturb in PBX side (Asterisk)
+    phone.call("*79", callOptions);
+
+    // Save the disable state in local
+    localStorage.setItem("dnd", "disable");
+
+    // hide disableDND button and show enableDND
+    $("#enableDND, #disableDND, .dndAlert").toggle();
+
+});
+
+
+// Answer Incoming Call
+$(document).on("click", "#callReceiveButton", function() {
+    
+    // Answer call
+    session.answer(callOptions);
+
+    // Show timer
+    $("#timer").show();
+    
+    // Paush the ring
+    BMS.fn.pause();
+
+});
+
+// Reject Incoming Call
+$(document).on("click", "#IncomingCallHangButton", function() {
+    
+    // reject call
+    session.terminate();
+
+    // Paush the ring
+    BMS.fn.pause();
+
+});
+
+
+$(document).on("click", "#csSendSMS", function() {
+
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=sendSMS",
+        type: "post",
+        data: {
+            "number": $("#csSmsSendTo").val(),
+            "text": $("#csSmsText").val()
+        }, 
+        success: function(data, status) {
+
+            if(status = "success" && data === "1") {
+
+                // Success Altert
+                BMS.fn.alertSuccess("SMS successfully sent.", false);
+
+                // Make empty the sms box
+                $("#csSmsText").val("");
+
+
+            } else {
+                BMS.fn.alertError("SMS faild to send.");
+            }
+
+        }
+        
+    });
+
+});
+
+
+$(document).on("click", ".addToSMSBox tr", function() {
+    
+    var representativeInfo = "";
+    $("td", this).slice(3,6).each(function() {
+
+        representativeInfo += $(this).text() + "\n";
+
+    });
+    
+
+    $("#csSmsText").val( function() {
+        return this.value + representativeInfo;
+    });
+    
+    
+});
+
+$(document).on("click", "#addNewCase", function() {
+
+    var url = full_website_address + `/xhr/?module=customer-support&page=newCase&num=`;
+    
+    $("#modalDefaultMdm").modal('show').find('.modal-content').load( url + encodeURI(caller) );
+
+});
+
+
+function addCallLog({caller="", direction="", duration="", status=""}="") {
+
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=addCallLog",
+        type: "post",
+        data:{
+            caller: caller,
+            direction: direction,
+            duration: duration,
+            status: status,
+            feedback: $("#callFeedback").val(),
+            reviewer: $("#feedbackReviewer").val()
+        },
+        success: function(data, status) {
+        }
+
+    });
+
+}
+
+
+$(document).on("click", '#saveFeedback', function() {
+
+
+    var callReason = $("#callReason").find(':selected').val();
+
+    if( callReason === "" ) {
+
+        BMS.fn.alertError("Please select call reason");
+
+    } else {
+
+        // Update the call feedback
+        $.ajax({
+            url: full_website_address + "/xhr/?module=customer-support&page=updateCallFeedback",
+            type: "post",
+            data: {
+                caller: $("#feedbackCaller").val(),
+                reason: callReason,
+                feedback: $("#callFeedback").val(),
+                specimenReceived: $("#specimenCopyReceived").val(),
+                informative: $("#feedbackInformative").val(),
+                saleOurProduct: $("#SaleOurProduct").val(),
+                userOurProduct: $("#userOurProduct").val(),
+                mrFeedback: $("#mrFeedback").val(),
+                otherInformation: $("#otherInformation").val()
+            },
+            success: function(data, status) {
+                
+                if(status = "success" && data.includes('success') ) {
+
+                    // Success Altert
+                    BMS.fn.alertSuccess( $(data).text() , false);
+
+                    // Make empty the boxes of feeback
+                    $("#feedbackCaller").val("");
+                    $("#callFeedback").val("");
+
+
+                } else {
+
+                    BMS.fn.alertError($(data).text());
+
+                }
+
+
+                // Hide all hidden tab
+                $(".hidden_tab").hide();
+                
+                // Active the lead tab
+                $('.nav-tabs a[href="#tab_messages"]').tab('show');
+
+
+                // Enable the number search and hangButton
+                $(".numberSearch, #hangButton").prop("disabled", false);
+                $(".number-dialer-div .input-group-addon").removeClass("disable-number-dialer-div");
+
+                // Reset and hide the timer
+                $("#timer").html("00:00:00").hide();
+
+                // Hide the status
+                $("#status").hide();
+
+                
+                // Show the call button and hide the hang button
+                $("#hangButton").hide();
+                $("#callButton").show();
+
+                // Show the call dailer
+                $(".call-dialer").show();
+
+                // hide the call reciver
+                $("#callReceiver").hide();
+
+            }
+
+        });
+
+
+        // Start the phone either the feedback is saved or not
+        phone.start();
+
+    }
+
+});
+
+
+// Insert quick feedback in feedback box
+$(document).on("click", ".quickFeedback > ul > li:not(:last-child)", function() {
+    
+    $("#callFeedback").val( $("#callFeedback").val() + $(this).text() + "\n" );
+
+});
+
+// add new feedback
+$(document).on("click", ".quickFeedback > ul > li:last-child", function() {
+    
+    Swal.fire({
+        title: "Enter new feedback",
+        input: "textarea",
+        showCancelButton: true,
+        closeOnConfirm: false,
+        animation: "slide-from-top",
+        inputPlaceholder: "Write feedback here"
+    }).then((results) => {
+
+        if(results.value !== undefined) {
+
+             // Save feedback in database
+            $.ajax({
+                url: full_website_address + "/xhr/?module=customer-support&page=addNewNote",
+                type: "post",
+                data:{
+                    note: results.value,
+                    type: "feedback"
+                }
+            });
+
+            // Add in the list
+            $(".quickFeedback > ul > li:last-child").before( `<li style='cursor:pointer;'>${results.value}</li>` );
+
+        }
+
+    });
+
+});
+
+// Insert note on sms box
+$(document).on("click", ".userNote > ul > li:not(:last-child)", function() {
+
+    console.log("hi");
+    
+    var that = this;
+    $("#csSmsText").val( function() {
+        return this.value + $(that).text() + "\n";
+    });
+
+});
+
+// add new note
+$(document).on("click", ".userNote > ul > li:last-child", function() {
+    
+    Swal.fire({
+        title: "Enter note here",
+        input: "textarea",
+        showCancelButton: true,
+        closeOnConfirm: false,
+        animation: "slide-from-top",
+        inputPlaceholder: "Write note here"
+    }).then((results) => {
+
+        if(results.value !== undefined) {
+
+             // Save feedback in database
+            $.ajax({
+                url: full_website_address + "/xhr/?module=customer-support&page=addNewNote",
+                type: "post",
+                data:{
+                    note: results.value,
+                    type: "note"
+                }
+            });
+
+            // Add in the list
+            $(".userNote > ul > li:last-child").before( `<li style='cursor:pointer;'>${results.value}</li>` );
+
+        }
+
+    });
+
+});
+
+
+// Get caller details by pressing enter
+$(document).on('keypress', '.numberSearch', function(e){
+
+    if(e.key === "Enter") {
+
+        var number = $(this).val();
+
+        if( number.length < 2 ) {
+            alert("Please enter a valid number to continue");
+        } else {
+            showCallerDetails(number)
+        }
+
+    }
+
+});
+
+
+function dial(number) {
+    
+
+    if( phone.isConnected() ) {
+
+        // Disable input filed after dial
+        $(".numberSearch").prop("disabled", true);
+        $(".number-dialer-div .input-group-addon").addClass("disable-number-dialer-div");
+        
+        // BMS.fn.play("outgoing_call", true);
+        session = phone.call( number.trim() , callOptions);
+
+        $("#status").html(`Call is being send to ${number}...`).show();
+
+        // hide the call button and show the hang button
+        $("#callButton, #hangButton").toggle();
+
+
+        // Show the caller details
+        showCallerDetails(caller);
+
+        // Empty the feedback area and remove previous fired for savings
+        $("#callFeedback, #feedbackReviewer").val("");
+        $(document).off("change", "#callFeedback, #feedbackReviewer");
+
+
+        // Hide the  suggestion number if it is shown
+        $(".suggestion-numbers").html("").hide();
+
+
+    } else {
+
+        $("#status").html(`<div style="font-size: 16px;" class='alert alert-danger'>Sorry! The signaling server is disconnected.</div>`).show();
+
+    }
+
+
+}
+
+function showCallerDetails(number) {
+
+
+    // Show the caller details
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=getCallerAllDetails",
+        type: "post",
+        data: {
+            "caller": number
+        },
+        success: function(data, status) {
+            
+            if(status == "success") {
+
+                var callerData = JSON.parse(data);
+
+
+                // Notifiy only on incoming session
+                if( session && session.direction === 'incoming' ) {
+
+                    if(callerData.details.type !== undefined) {
+                        BMS.fn.desktopNotify(`${callerData.details.name} (${number}) is calling...`, full_website_address +"/assets/images/call.png", `${callerData.details.type}, ${callerData.details.designation}`);
+                    } else {
+                        BMS.fn.desktopNotify(`${number} is calling...`, full_website_address +"/assets/images/call.png", "Click Here to open the dashboard");
+                    }
+
+                }
+
+
+                if( Object.keys(callerData.details).length > 0) {
+
+                    $(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html( callerData.details.name );
+                    $(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html( callerData.details.type );
+                    $(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html( callerData.details.designation );
+                    $(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html( callerData.details.address);
+                    $(".dataToCopy").html( `<table><tr><td>${callerData.details.name}, ${callerData.details.type} \n ${callerData.details.designation}</td>\
+                                            <td>${number}</td>\
+                                            <td>${callerData.details.address}</td></tr></table>`);
+
+
+                    var actionButtons = `<a class="btn btn-primary" data-toggle="modal" href="<?php echo full_website_address(); ?>${callerData.details.editUri}${callerData.details.id}" data-target="#modalDefault">Edit ${callerData.details.type}</a>`;
+                    if( callerData.details.has_sc == 1 ) {
+                        actionButtons += `<a style="margin-left: 15px;" class="btn btn-primary" data-toggle="modal" href="<?php echo full_website_address(); ?>/xhr/?module=marketing&page=viewSpecimenProduct&id=${callerData.details.id}"  data-target="#modalDefault">View Specimen Copies</a>`;
+                    }
+
+                    actionButtons += `<button style="margin-left: 15px;" type="button" class="btn btn-info" 
+                                        onclick="BMS.fn.copy('.dataToCopy')" 
+                                    >
+                                        Copy
+                                    </button>`;
+
+                    $(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(actionButtons);
+
+
+                } else {
+
+                    $(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html("No data found in database");
+                    $(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html("");
+                    $(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html("");
+                    $(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html("");
+                    $(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html("");
+
+                }
+
+                
+                // Remove Previous Order history
+                $(".callerOrderInfo > tbody").html('<tr><td colspan="4">Sorry! No order found.</td></tr>');
+
+                // Show order History
+                if(callerData.orderHistory.length > 0) {
+
+                    var orderHtml = "";
+                    callerData.orderHistory.forEach(item => {
+
+                        orderHtml += `<tr>
+                            <td>${item.date}</td>
+                            <td> <a data-toggle='modal' data-target='#modalDefault' href='<?php echo full_website_address(); ?>/xhr/?module=reports&page=showInvoiceProducts&id=${item.id}'> ${item.reference} </a> </td>
+                            <td>${item.total}</td>
+                            <td>${item.payment_status}</td>
+                            <td class="text-center">
+                                <iledit data-val="${item.status}">${item.status}</iledit>
+                                <pkey>${item.id}</pkey>
+                            </td>
+                            <td>
+                                <a class="btn btn-xs btn-flat btn-primary" data-toggle='modal' data-target='#modalDefault' href='<?php echo full_website_address(); ?>/xhr/?module=my-shop&page=editSaleNote&id=${item.id}'> Edit Note </a>
+                                <a target="_blank" class="btn btn-xs btn-flat btn-primary" href='<?php echo full_website_address(); ?>/sales/pos/?edit=${item.id}'> Edit Sale</a>
+                            </td>
+                        </tr>`;
+
+                    });
+
+
+                    $(".callerOrderInfo > tbody").hide().html(orderHtml).show("fast");
+
+                }
+
+
+                // Remove previous Call History
+                $(".call-history").html("<p>No call</p>");
+                // show the Call count
+                $(".call-count").html(`( ${ callerData.totalCallCount } )`)
+                
+                if( callerData.callHistory.length > 0 ) {
+                    
+                    var callHistory = "";
+                    callerData.callHistory.forEach(item => {
+                        callHistory += `<div class="call-item">
+                                            <p style="font-weight: bold;" >Cause: <span style='color: green;'>${item.call_reason}</span>; 
+                                            <span style="margin-left: 10px;"><i class="fa fa-clock-o"></i> ${ new Date(item.duration * 1000).toISOString().substr(14, 5) }</span> </p>
+                                            <p>
+                                                <span>Direction: <b>${item.call_direction}</b> </span>
+                                                <span style="margin-left: 10px;">Status: <b>${item.call_status}</b> </span>
+                                            </p>
+                                            <p>${item.call_datetime}; By- <b>${item.agent_name}</b></p>
+                                            <p class="bg-info" style="padding: 2px 5px;">${item.feedback}</p>
+
+                                        </div>`;
+                    });
+                    
+                    // Show the call history
+                    $(".call-history").hide().html(callHistory).show('fast');
+
+                    // If the call history is more then five then add a load more button
+                    if( Number(callerData.totalCallCount) > 5 ) {
+                        
+                        $(".call-history").append(`<div class="text-center"><button type="button" class="btn btn-info loadCallHistory">Load More</button></div>`);
+
+                    }
+                    
+                }
+
+
+                // Remove previous Cases History
+                $(".case-history").html("<p>No Cases</p>");
+                    
+                if( callerData.caseHistory.length > 0 ) {
+                    
+                    var caseHistory = "";
+                    callerData.caseHistory.forEach(item => {
+                        caseHistory += `<div class="call-item">
+                                            <div class="call-item">
+                                                <p style="font-weight: bold;"> <a target="_blank" href='<?php echo full_website_address(); ?>/customer-support/case-list/?case_id=${item.case_id}'>${item.case_title}</a> </p>
+                                                <p><b>Status:</b> ${item.case_status}</p>
+                                                <p>${item.case_datetime}; By- <b>${item.posted_by_name}</b></p>
+                                            </div>
+                                        </div>`;
+                    });
+                    
+                    // Show the call history
+                    $(".case-history").hide().html(caseHistory).show('fast');
+                    
+                }
+
+
+
+                // Remove previous SMS History
+                $(".case-history").html("<p>No Cases</p>");
+                    
+                if( callerData.smsHistory.length > 0 ) {
+                    
+                    var smsHistory = "";
+                    callerData.smsHistory.forEach(item => {
+                        smsHistory += `<div class="message-item">
+                                            <p>${item.sms_text}</p>
+                                            <p>${item.send_time}; By- <b>${item.agent_name}</b></p>
+                                        </div>`;
+                    });
+                    
+                    // Show the call history
+                    $(".message-history").hide().html(smsHistory).show('fast');
+                    
+                }
+
+
+            }
+        }
+
+    });
+
+
+    // Show All tabs and activate leads tab
+    $(".call-center-tabs > li").show();
+    
+    // Active the lead tab
+    $('.nav-tabs a[href="#tab_leads"]').tab('show');
+
+}
+
+
+$(document).on("click", ".loadCallHistory", function() {
+
+
+    // Ad loading icon
+    $(".loadCallHistory").html("<i class='fa fa-spin fa-refresh'></i> Loading...");
+    
+
+    // Show the caller details
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=getCallHistoryData",
+        type: "post",
+        data: {
+            "caller": $(".numberSearch").val()
+        },
+        success: function(data, status) {
+            
+            if(status == "success") {
+
+                var callHistory = JSON.parse(data);
+
+                if( callHistory.length > 0 ) {
+                    
+                    var callHistoryDisplay = "";
+                    callHistory.forEach(item => {
+                        callHistoryDisplay += `<div class="call-item">
+                                            <p style="font-weight: bold;" >Cause: <span style='color: green;'>${item.call_reason}</span>; 
+                                            <span style="margin-left: 10px;"><i class="fa fa-clock-o"></i> ${ new Date(item.duration * 1000).toISOString().substr(14, 5) }</span> </p>
+                                            <p>
+                                                <span>Direction: <b>${item.call_direction}</b> </span>
+                                                <span style="margin-left: 10px;">Status: <b>${item.call_status}</b> </span>
+                                            </p>
+                                            <p>${item.call_datetime}; By- <b>${item.agent_name}</b></p>
+                                            <p class="bg-info" style="padding: 2px 5px;">${item.feedback}</p>
+
+                                        </div>`;
+                    });
+
+                  
+                    $(".call-history").append(callHistoryDisplay);
+                    
+                    
+                }
+
+                $(".loadCallHistory").remove();
+
+            }
+
+        }
+
+    });
+
+});
+
+
+JsSIP.debug.disable('JsSIP:*');
\ No newline at end of file

--- assets/js/callCenter.min.js ---
@@ -0,0 +1 @@
+if("undefined"==typeof sipCredentials)throw new Error("Sorry! No SIP credentials found");navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,void 0!==navigator.getUserMedia?navigator.getUserMedia({audio:!0},(function(){$("#callButton").prop("disabled",!1)}),(function(){$("#status").html("<div style='font-size: 14px;' class='alert alert-danger'>No microphone found! Please connect your mic and reload!</div>").show(),$("#callButton").prop("disabled",!0)})):($("#status").html("<div style='font-size: 14px;' class='alert alert-danger'>Sorry! No media found. This module will not work.</div>").show(),$("#callButton").prop("disabled",!0));var remoteAudio=new window.Audio;remoteAudio.autoplay=!0,remoteAudio.crossOrigin="anonymous";var session,socket=new JsSIP.WebSocketInterface(sipCredentials.socket),configuration={sockets:[socket],uri:sipCredentials.uri,password:sipCredentials.pass,username:sipCredentials.user,register:!0},callOptions={mediaConstraints:{audio:!0,video:!1}},caller="",callerDisplay="",hideNumbers=["*78","*79","*76"],phone=new JsSIP.UA(configuration);function addCallLog({caller:e="",direction:t="",duration:a="",status:l=""}=""){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=addCallLog",type:"post",data:{caller:e,direction:t,duration:a,status:l,feedback:$("#callFeedback").val(),reviewer:$("#feedbackReviewer").val()},success:function(e,t){}})}function dial(e){phone.isConnected()?($(".numberSearch").prop("disabled",!0),$(".number-dialer-div .input-group-addon").addClass("disable-number-dialer-div"),session=phone.call(e.trim(),callOptions),$("#status").html(`Call is being send to ${e}...`).show(),$("#callButton, #hangButton").toggle(),showCallerDetails(caller),$("#callFeedback, #feedbackReviewer").val(""),$(document).off("change","#callFeedback, #feedbackReviewer"),$(".suggestion-numbers").html("").hide()):$("#status").html("<div style=\"font-size: 16px;\" class='alert alert-danger'>Sorry! The signaling server is disconnected.</div>").show()}function showCallerDetails(e){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=getCallerAllDetails",type:"post",data:{caller:e},success:function(t,a){if("success"==a){var l=JSON.parse(t);if(session&&"incoming"===session.direction&&(void 0!==l.details.type?BMS.fn.desktopNotify(`${l.details.name} (${e}) is calling...`,full_website_address+"/assets/images/call.png",`${l.details.type}, ${l.details.designation}`):BMS.fn.desktopNotify(`${e} is calling...`,full_website_address+"/assets/images/call.png","Click Here to open the dashboard")),Object.keys(l.details).length>0){$(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html(l.details.name),$(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(l.details.type),$(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(l.details.designation),$(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(l.details.address),$(".dataToCopy").html(`<table><tr><td>${l.details.name}, ${l.details.type} \n ${l.details.designation}</td> <td>${e}</td> <td>${l.details.address}</td></tr></table>`);var n=`<a class="btn btn-primary" data-toggle="modal" href="<?php echo full_website_address(); ?>${l.details.editUri}${l.details.id}" data-target="#modalDefault">Edit ${l.details.type}</a>`;1==l.details.has_sc&&(n+=`<a style="margin-left: 15px;" class="btn btn-primary" data-toggle="modal" href="<?php echo full_website_address(); ?>/xhr/?module=marketing&page=viewSpecimenProduct&id=${l.details.id}" data-target="#modalDefault">View Specimen Copies</a>`),n+='<button style="margin-left: 15px;" type="button" class="btn btn-info" \n onclick="BMS.fn.copy(\'.dataToCopy\')" \n >\n Copy\n </button>',$(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(n)}else $(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html("No data found in database"),$(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(""),$(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(""),$(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(""),$(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html("");if($(".callerOrderInfo > tbody").html('<tr><td colspan="4">Sorry! No order found.</td></tr>'),l.orderHistory.length>0){var s="";l.orderHistory.forEach((e=>{s+=`<tr>\n <td>${e.date}</td>\n <td> <a data-toggle='modal' data-target='#modalDefault' href='<?php echo full_website_address(); ?>/xhr/?module=reports&page=showInvoiceProducts&id=${e.id}'> ${e.reference} </a> </td>\n <td>${e.total}</td>\n <td>${e.payment_status}</td>\n <td class="text-center">\n <iledit data-val="${e.status}">${e.status}</iledit>\n <pkey>${e.id}</pkey>\n </td>\n <td>\n <a class="btn btn-xs btn-flat btn-primary" data-toggle='modal' data-target='#modalDefault' href='<?php echo full_website_address(); ?>/xhr/?module=my-shop&page=editSaleNote&id=${e.id}'> Edit Note </a>\n <a target="_blank" class="btn btn-xs btn-flat btn-primary" href='<?php echo full_website_address(); ?>/sales/pos/?edit=${e.id}'> Edit Sale</a>\n </td>\n </tr>`})),$(".callerOrderInfo > tbody").hide().html(s).show("fast")}if($(".call-history").html("<p>No call</p>"),$(".call-count").html(`( ${l.totalCallCount} )`),l.callHistory.length>0){var o="";l.callHistory.forEach((e=>{o+=`<div class="call-item">\n <p style="font-weight: bold;" >Cause: <span style='color: green;'>${e.call_reason}</span>; \n <span style="margin-left: 10px;"><i class="fa fa-clock-o"></i> ${new Date(1e3*e.duration).toISOString().substr(14,5)}</span> </p>\n <p>\n <span>Direction: <b>${e.call_direction}</b> </span>\n <span style="margin-left: 10px;">Status: <b>${e.call_status}</b> </span>\n </p>\n <p>${e.call_datetime}; By- <b>${e.agent_name}</b></p>\n <p class="bg-info" style="padding: 2px 5px;">${e.feedback}</p>\n\n </div>`})),$(".call-history").hide().html(o).show("fast"),Number(l.totalCallCount)>5&&$(".call-history").append('<div class="text-center"><button type="button" class="btn btn-info loadCallHistory">Load More</button></div>')}if($(".case-history").html("<p>No Cases</p>"),l.caseHistory.length>0){var i="";l.caseHistory.forEach((e=>{i+=`<div class="call-item">\n <div class="call-item">\n <p style="font-weight: bold;"> <a target="_blank" href='<?php echo full_website_address(); ?>/customer-support/case-list/?case_id=${e.case_id}'>${e.case_title}</a> </p>\n <p><b>Status:</b> ${e.case_status}</p>\n <p>${e.case_datetime}; By- <b>${e.posted_by_name}</b></p>\n </div>\n </div>`})),$(".case-history").hide().html(i).show("fast")}if($(".case-history").html("<p>No Cases</p>"),l.smsHistory.length>0){var r="";l.smsHistory.forEach((e=>{r+=`<div class="message-item">\n <p>${e.sms_text}</p>\n <p>${e.send_time}; By- <b>${e.agent_name}</b></p>\n </div>`})),$(".message-history").hide().html(r).show("fast")}}}}),$(".call-center-tabs > li").show(),$('.nav-tabs a[href="#tab_leads"]').tab("show")}phone.start(),phone.on("newRTCSession",(function(e){var t=e.session;if(session)return addCallLog({caller:t.remote_identity.uri.user,direction:t.direction,duration:0,status:"Missed"}),t.terminate(),!1;var a=function(){session=null,$("#muteCall, #holdCall").show(),$("#unholdCall, #unmuteCall").hide()};caller=(session=t).remote_identity.uri.user,callerDisplay=session.remote_identity.display_name,$("#csSmsSendTo").val(caller),$("#feedbackCaller").val(caller),session.on("ended",(function(){jQuery.inArray(caller,hideNumbers)<0&&(addCallLog({caller:caller,direction:session.direction,duration:Math.floor((session.end_time.getTime()-session.start_time.getTime())/1e3),status:"Answered"}),BMS.fn.pause(),BMS.fn.stopTimer(window.timer),$("#status").html(`${caller} is disconnected`).show(),$("#timer").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(500).fadeIn(500),$("#hangButton").prop("disabled",!0),$('.nav-tabs a[href="#tab_feedback"]').tab("show"),phone.stop()),a()})),session.on("failed",(function(e){$(".call-dialer").show(),$("#callReceiver").hide(),BMS.fn.pause(),$("#callButton").show(),$("#hangButton").hide(),$(".numberSearch, #hangButton").prop("disabled",!1),$(".number-dialer-div .input-group-addon").removeClass("disable-number-dialer-div"),"incoming"===session.direction?"local"===e.originator?$("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250,(function(){$("#status").html("Call rejected!").show(),addCallLog({caller:caller,direction:"incoming",duration:0,status:"Rejected"})})):($("#status").html(`Missed call from ${callerDisplay}!`).show(),addCallLog({caller:caller,direction:"incoming",duration:0,status:"Missed"})):"local"===e.originator?$("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250,(function(){$("#status").html("Dial a number!").show(),addCallLog({caller:caller,direction:"outgoing",duration:0,status:"Unreachable"})})):$("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250,(function(){"SIP Failure Code"===e.cause?($("#status").html("The number is not answered!").show(),addCallLog({caller:caller,direction:"outgoing",duration:0,status:"Not Answered"})):($("#status").html("The number is busy!").show(),addCallLog({caller:caller,direction:"outgoing",duration:0,status:"Busy"})),$('.nav-tabs a[href="#tab_feedback"]').tab("show")})),a()})),session.on("hold",(function(e){"remote"===e.originator?$("#status").html(`${caller} is hold you.`).show():$("#status").html(`${caller} is on hold.`).show()})),session.on("muted",(function(e){$("#status").html("Call is muted.").show()})),session.on("unmuted",(function(e){$("#status").html(`${caller} is connected.`).show()})),session.on("unhold",(function(){$("#status").html(`${caller} is connected.`).show()})),session.on("accepted",(function(){jQuery.inArray(caller,hideNumbers)<0&&($("#timer").show(),window.timer=BMS.fn.startTimer(),$("#status").html(`${caller} is connected.`).show())})),session.on("confirmed",(function(){var e=session.connection.getLocalStreams()[0],t=session.connection.createDTMFSender(e.getAudioTracks()[0]);session.sendDTMF=function(e){t.insertDTMF(e)}})),session.on("peerconnection",(e=>{const t=e.peerconnection;t.onaddstream=function(e){remoteAudio.srcObject=e.stream,remoteAudio.play()};var a=new MediaStream;t.getReceivers().forEach((function(e){a.addTrack(e.track)}))})),"incoming"===session.direction?(BMS.fn.play("incoming_call",!0),$("#status").html(`${callerDisplay} is calling...`).show(),$("#callReceiver").show(),$("#timer").hide(),$(".call-dialer").hide(),showCallerDetails(caller)):session.connection.addEventListener("addstream",(function(e){BMS.fn.pause(),remoteAudio.srcObject=e.stream}))})),$(document).on("click","#callButton",(function(){dial($(".numberSearch").val())})),$(document).on("click","#hangButton",(function(){session.terminate()})),$(window).on("beforeunload",(function(){session.terminate()})),$(document).on("click","#muteCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.mute(),$("#muteCall, #unmuteCall").toggle()})),$(document).on("click","#unmuteCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.unmute(),$("#muteCall, #unmuteCall").toggle()})),$(document).on("click","#holdCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.hold(),$("#holdCall, #unholdCall").toggle()})),$(document).on("click","#unholdCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.unhold(),$("#holdCall, #unholdCall").toggle()})),$(document).on("click","#transferCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call to transfer.");var e={};$.each(extentionNumbers,(function(t,a){e[a.extention]=a.name})),Swal.fire({title:"Please select the extension",input:"select",inputOptions:e,showCancelButton:!0,confirmButtonText:'<i class="fa fa-arrow-up"></i> Transfer Call',closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Destination number..."}).then((e=>{void 0!==e.value&&(session.refer(e.value),session.terminate())}))})),$(document).on("click","#enableDND",(function(){phone.call("*78",callOptions),localStorage.setItem("dnd","enable"),$("#enableDND, #disableDND, .dndAlert").toggle()})),$(document).on("click","#disableDND",(function(){phone.call("*79",callOptions),localStorage.setItem("dnd","disable"),$("#enableDND, #disableDND, .dndAlert").toggle()})),$(document).on("click","#callReceiveButton",(function(){session.answer(callOptions),$("#timer").show(),BMS.fn.pause()})),$(document).on("click","#IncomingCallHangButton",(function(){session.terminate(),BMS.fn.pause()})),$(document).on("click","#csSendSMS",(function(){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=sendSMS",type:"post",data:{number:$("#csSmsSendTo").val(),text:$("#csSmsText").val()},success:function(e,t){"1"===e?(BMS.fn.alertSuccess("SMS successfully sent.",!1),$("#csSmsText").val("")):BMS.fn.alertError("SMS faild to send.")}})})),$(document).on("click",".addToSMSBox tr",(function(){var e="";$("td",this).slice(3,6).each((function(){e+=$(this).text()+"\n"})),$("#csSmsText").val((function(){return this.value+e}))})),$(document).on("click","#addNewCase",(function(){var e=full_website_address+"/xhr/?module=customer-support&page=newCase&num=";$("#modalDefaultMdm").modal("show").find(".modal-content").load(e+encodeURI(caller))})),$(document).on("click","#saveFeedback",(function(){var e=$("#callReason").find(":selected").val();""===e?BMS.fn.alertError("Please select call reason"):($.ajax({url:full_website_address+"/xhr/?module=customer-support&page=updateCallFeedback",type:"post",data:{caller:$("#feedbackCaller").val(),reason:e,feedback:$("#callFeedback").val(),specimenReceived:$("#specimenCopyReceived").val(),informative:$("#feedbackInformative").val(),saleOurProduct:$("#SaleOurProduct").val(),userOurProduct:$("#userOurProduct").val(),mrFeedback:$("#mrFeedback").val(),otherInformation:$("#otherInformation").val()},success:function(e,t){e.includes("success")?(BMS.fn.alertSuccess($(e).text(),!1),$("#feedbackCaller").val(""),$("#callFeedback").val("")):BMS.fn.alertError($(e).text()),$(".hidden_tab").hide(),$('.nav-tabs a[href="#tab_messages"]').tab("show"),$(".numberSearch, #hangButton").prop("disabled",!1),$(".number-dialer-div .input-group-addon").removeClass("disable-number-dialer-div"),$("#timer").html("00:00:00").hide(),$("#status").hide(),$("#hangButton").hide(),$("#callButton").show(),$(".call-dialer").show(),$("#callReceiver").hide()}}),phone.start())})),$(document).on("click",".quickFeedback > ul > li:not(:last-child)",(function(){$("#callFeedback").val($("#callFeedback").val()+$(this).text()+"\n")})),$(document).on("click",".quickFeedback > ul > li:last-child",(function(){Swal.fire({title:"Enter new feedback",input:"textarea",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Write feedback here"}).then((e=>{void 0!==e.value&&($.ajax({url:full_website_address+"/xhr/?module=customer-support&page=addNewNote",type:"post",data:{note:e.value,type:"feedback"}}),$(".quickFeedback > ul > li:last-child").before(`<li style='cursor:pointer;'>${e.value}</li>`))}))})),$(document).on("click",".userNote > ul > li:not(:last-child)",(function(){console.log("hi");var e=this;$("#csSmsText").val((function(){return this.value+$(e).text()+"\n"}))})),$(document).on("click",".userNote > ul > li:last-child",(function(){Swal.fire({title:"Enter note here",input:"textarea",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Write note here"}).then((e=>{void 0!==e.value&&($.ajax({url:full_website_address+"/xhr/?module=customer-support&page=addNewNote",type:"post",data:{note:e.value,type:"note"}}),$(".userNote > ul > li:last-child").before(`<li style='cursor:pointer;'>${e.value}</li>`))}))})),$(document).on("keypress",".numberSearch",(function(e){if("Enter"===e.key){var t=$(this).val();t.length<2?alert("Please enter a valid number to continue"):showCallerDetails(t)}})),$(document).on("click",".loadCallHistory",(function(){$(".loadCallHistory").html("<i class='fa fa-spin fa-refresh'></i> Loading..."),$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=getCallHistoryData",type:"post",data:{caller:$(".numberSearch").val()},success:function(e,t){if("success"==t){var a=JSON.parse(e);if(a.length>0){var l="";a.forEach((e=>{l+=`<div class="call-item">\n <p style="font-weight: bold;" >Cause: <span style='color: green;'>${e.call_reason}</span>; \n <span style="margin-left: 10px;"><i class="fa fa-clock-o"></i> ${new Date(1e3*e.duration).toISOString().substr(14,5)}</span> </p>\n <p>\n <span>Direction: <b>${e.call_direction}</b> </span>\n <span style="margin-left: 10px;">Status: <b>${e.call_status}</b> </span>\n </p>\n <p>${e.call_datetime}; By- <b>${e.agent_name}</b></p>\n <p class="bg-info" style="padding: 2px 5px;">${e.feedback}</p>\n\n </div>`})),$(".call-history").append(l)}$(".loadCallHistory").remove()}}})})),JsSIP.debug.disable("JsSIP:*");
\ No newline at end of file

--- assets/js/callCenterOld.js ---
@@ -0,0 +1,907 @@
+if(typeof sipCredentials === "undefined") {
+    throw new Error("Sorry! No SIP credentials found");
+}
+
+// Set getUserMedia for all browsers
+navigator.getUserMedia = ( navigator.getUserMedia ||
+                            navigator.webkitGetUserMedia ||
+                            navigator.mozGetUserMedia ||
+                            navigator.msGetUserMedia
+                        );
+
+// Check if there have microphone connected
+//var userMedia = navigator.getUserMedia() || navigator.mediaDevices.getUserMedia();
+navigator.getUserMedia(
+    {audio: true},
+    function(){
+        
+        // success callback
+        $("#status").html("Dail a Number!");
+
+        // enable call button
+        $("#callButton").prop("disabled", false);
+
+    }, 
+    function() {
+        // error callback, no microphone
+        $("#status").html("<div style='font-size: 14px;' class='alert alert-danger'>No microphone found! Please connect your mic and reload!</div>");
+
+        // disable call button
+        $("#callButton").prop("disabled", true);
+        return;
+    }
+);
+
+
+var remoteAudio = new window.Audio();
+remoteAudio.autoplay = true;
+remoteAudio.crossOrigin="anonymous";
+
+var socket = new JsSIP.WebSocketInterface(sipCredentials.socket);
+var configuration = {
+  sockets  : [ socket ],
+  'uri': sipCredentials.uri, 
+  'password': sipCredentials.pass,
+  'username': sipCredentials.user,
+  'register': true
+};
+
+/*
+
+const audioContext = new AudioContext();
+audioParams_01 = {
+    deviceId: "default",
+}
+audioParams_02 = {
+    deviceId: "7079081697e1bb3596fad96a1410ef3de71d8ccffa419f4a5f75534c73dd16b5",
+}
+
+mediaStream_01 = await navigator.mediaDevices.getUserMedia({ audio: audioParams_01 });
+mediaStream_02 = await navigator.mediaDevices.getUserMedia({ audio: audioParams_02 });
+
+audioIn_01 = audioContext.createMediaStreamSource(mediaStream_01);
+audioIn_02 = audioContext.createMediaStreamSource(mediaStream_02);
+
+dest = audioContext.createMediaStreamDestination();
+
+audioIn_01.connect(dest);
+audioIn_02.connect(dest);
+
+const recorder = new MediaRecorder(dest.stream);
+
+chunks = [];
+
+recorder.onstart = async (event) => {
+    // your code here
+}
+
+recorder.ondataavailable = (event) => {       
+    chunks.push(event.data); 
+}
+
+recorder.onstop = async (event) => {
+    // your code here
+}*/
+
+/** Test */
+
+var callOptions = {
+  mediaConstraints: {audio: true, video: false}
+};
+
+
+var caller = "";
+var callerDisplay = "";
+var hideNumbers = ['*78', '*79', '*76'];
+
+var phone = new JsSIP.UA(configuration);
+phone.on('newRTCSession', function(data){
+
+    var newSession = data.session;
+    
+    if(session){ // if any existing session is running then terminate the new call
+        
+        /**
+         * Add a call log if any call is coming while the agents are busy
+         */
+        addCallLog({
+            caller: newSession.remote_identity.uri.user,
+            direction: newSession.direction,
+            duration: 0,
+            status: "Missed"
+        });
+
+        newSession.terminate();
+        return false;
+        
+    }
+
+    session = newSession;
+    var completeSession = function(){
+            session = null;
+
+            // Reset the mute and holde button
+            $("#muteCall, #holdCall").show();
+            $("#unholdCall, #unmuteCall").hide();
+
+    };
+
+    caller = session.remote_identity.uri.user;
+    callerDisplay = session.remote_identity.display_name;
+
+    session.on('ended', function() {
+
+        // Do not show/ Add the caller details for hidden numbers
+        if(  jQuery.inArray(caller, hideNumbers) < 0 ) {
+        
+            addCallLog({
+                caller: caller,
+                direction: session.direction,
+                duration: Math.floor( (session.end_time.getTime() - session.start_time.getTime()) / 1000),
+                status: "Answered"
+            });
+
+            // Show the call dailer after session end
+            $("#callDailer").show();
+
+            // Hide call Received
+            $("#callReceiver").hide();
+
+            // Pause Ring
+            BMS.fn.pause();
+
+            // Show the call button
+            $("#callButton").show();
+
+            // Hide the end button
+            $("#hangButton").hide();
+
+            // Stop Timer
+            BMS.fn.stopTimer(window.timer);
+
+            $("#status").html(`Dail a number!`);
+
+            // clear case search list
+            $(".caseList input[type=search]").val('');
+            $(".caseList input[type=search]").trigger("keyup");
+
+            $("#timer").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(500).fadeIn(500, function() {
+                
+                // Reset and hide the timer
+                $("#timer").html("00:00:00");
+                $("#timer").hide();
+
+            });
+
+        }
+
+        // Complete the session
+        completeSession();
+        
+    });
+
+
+    session.on('failed', function(e) {
+        
+        // Show the call dailer after session end
+        $("#callDailer").show();
+
+        // Hide call Received
+        $("#callReceiver").hide();
+
+        // Pause Ring
+        BMS.fn.pause();
+
+        // Show the call button
+        $("#callButton").show();
+
+        // Hide the end button
+        $("#hangButton").hide();
+
+        if(session.direction === 'incoming' ){
+
+
+            if( e.originator === "local" ) {
+
+                $("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250, function() {
+                    
+                    $("#status").html(`Call rejected!`);
+
+                    addCallLog({
+                        caller: caller,
+                        direction: 'incoming',
+                        duration: 0,
+                        status: "Rejected"
+                    });
+
+                });
+
+            } else {
+
+                $("#status").html(`Missed call from ${callerDisplay}!`);
+                addCallLog({
+                    caller: caller,
+                    direction: 'incoming',
+                    duration: 0,
+                    status: "Missed"
+                });
+
+            }
+
+            
+        } else {
+
+            if( e.originator === "local" ) {
+
+                $("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250, function() {
+                    
+                    $("#status").html(`Dail a number!`);
+
+                    addCallLog({
+                        caller: caller,
+                        direction: 'outgoing',
+                        duration: 0,
+                        status: "Unreachable"
+                    });
+
+                });
+
+            } else {
+
+                $("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250, function() {
+
+
+                    if( e.cause === "SIP Failure Code" ) {
+                        
+                        $("#status").html(`The number is not answered!`);
+
+                        addCallLog({
+                            caller: caller,
+                            direction: 'outgoing',
+                            duration: 0,
+                            status: "Not Answered"
+                        });
+
+                    } else {
+                        
+                        $("#status").html(`The number is busy!`);
+                        addCallLog({
+                            caller: caller,
+                            direction: 'outgoing',
+                            duration: 0,
+                            status: "Busy"
+                        });
+
+                    }
+
+                });
+
+            }
+
+        }
+        
+        completeSession();
+        
+    });
+
+    session.on("hold", function(e) {
+
+        if(e.originator === "remote") {
+            
+            $("#status").html(`${caller} is hold you.`);
+
+        } else {
+            
+            $("#status").html(`${caller} is on hold.`);
+
+        }
+
+    });
+
+    session.on("muted", function(e) {
+        
+        $("#status").html(`Call is muted.`);
+
+    });
+
+    session.on("unmuted", function(e) {
+        
+        $("#status").html(`${caller} is connected.`);
+
+    });
+
+    session.on("unhold", function() {
+    
+        $("#status").html(`${caller} is connected.`);
+
+    });
+
+    session.on('accepted', function(){
+
+        // Do not show the caller details for hidden numbers
+        if(  jQuery.inArray(caller, hideNumbers) < 0 ) {
+
+            // Show timer
+            $("#timer").show();
+            window.timer = BMS.fn.startTimer();
+
+            $("#status").html(`${caller} is connected.`);
+
+            // Show number in sms receipient
+            $("#csSmsSendTo").val(caller);
+
+            // Show number in feedback caller
+            $("#feedbackCaller").val(caller);
+            
+        }
+
+        
+    });
+
+    session.on('confirmed',function(){
+        var localStream = session.connection.getLocalStreams()[0];
+        var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0]);
+        session.sendDTMF = function(tone){
+            dtmfSender.insertDTMF(tone);
+        };
+        
+    });
+
+
+    session.on('peerconnection', (e) => {
+
+        let logError = '';
+        const peerconnection = e.peerconnection;
+
+        peerconnection.onaddstream = function (e) {
+
+            // set remote audio stream (to listen to remote audio)
+            // remoteAudio is <audio> element on pag
+            remoteAudio.srcObject = e.stream;
+            remoteAudio.play();
+
+        };
+
+        var remoteStream = new MediaStream();
+
+        peerconnection.getReceivers().forEach(function (receiver) {
+            remoteStream.addTrack(receiver.track);
+
+        });
+
+
+    });
+    
+    if(session.direction === 'incoming'){
+
+
+        BMS.fn.play("incoming_call", true);
+
+        $("#status").html(`${callerDisplay} is calling...`);
+
+        // Show the call Receiver
+        $("#callReceiver").show();
+
+        // Hide timer
+        $("#timer").hide();
+
+        // Hide Call dailer
+        $("#callDailer").hide();
+
+        // Show the caller details
+        showCallerDetails(caller);
+
+
+    } else {
+
+        session.connection.addEventListener('addstream', function(e){
+            BMS.fn.pause();
+            remoteAudio.srcObject = e.stream;
+        });     
+
+    }
+
+});
+
+
+phone.start();
+var session;
+
+// Call to the inputed number
+$(document).on("click", "#callButton", function() {
+
+    var number = $("#callNumber").val();
+    // BMS.fn.play("outgoing_call", true);
+    session = phone.call(number, callOptions);
+
+    $("#status").html(`Call is being send to ${number}...`);
+
+    // hide the call button
+    $("#callButton").hide();
+
+    // Show the end button
+    $("#hangButton").show();
+
+    // Show the caller details
+    showCallerDetails(caller);
+
+    // Empty the feedback area and remove previous fired for savings
+    $("#feedbackArea, #feedbackReviewer").val("");
+    $(document).off("change", "#feedbackArea, #feedbackReviewer");
+
+});
+
+
+// Hangup the Call
+$(document).on("click", "#hangButton", function() {
+
+    session.terminate();
+
+});
+
+// terminate the session while closing the browser
+$(window).on("beforeunload", function() {
+   
+    session.terminate();
+
+});
+
+// Mute the Call
+$(document).on("click", "#muteCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.mute();
+
+    // hide mutecall button and show unmute call
+    $("#muteCall, #unmuteCall").toggle();
+
+});
+
+// Unmute the Call
+$(document).on("click", "#unmuteCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.unmute();
+
+    // show mutecall button and hide unmute call
+    $("#muteCall, #unmuteCall").toggle();
+
+});
+
+$(document).on("click", "#holdCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.hold();
+    // hide holdCall button and show unholdCall call
+    $("#holdCall, #unholdCall").toggle();
+
+});
+
+
+$(document).on("click", "#unholdCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call.");
+    }
+
+    session.unhold();
+    // show hidecall button and hide unholdCall call
+    $("#holdCall, #unholdCall").toggle();
+
+});
+
+$(document).on("click", "#transferCall", function() {
+
+    if(typeof session === "undefined") {
+        return BMS.fn.alertError("Sorry! There is no active call to transfer.");
+    }
+
+    /** Generate options for sweet alert */
+    var generateOptions = {};
+    $.each(extentionNumbers, function(key, item) {
+        generateOptions[item.extention] = item.name;
+    });
+
+    // Transfer the Call
+    Swal.fire({
+        title: "Please select the extension",
+        input: "select",
+        inputOptions: generateOptions,
+        showCancelButton: true,
+        confirmButtonText: '<i class="fa fa-arrow-up"></i> Transfer Call',
+        closeOnConfirm: false,
+        animation: "slide-from-top",
+        inputPlaceholder: "Destination number..."
+    }).then((results) => {
+
+        if(results.value !== undefined) {
+
+            // Transfer and terminate session here
+            session.refer(results.value);
+            session.terminate();
+
+        }
+
+    });
+
+});
+
+
+/** Enable Do not disturb mode, by rejecting calls */
+$(document).on("click", "#enableDND", function() {
+
+    // Enable Donotdisturb in PBX side (Asterisk)
+    phone.call("*78", callOptions);
+
+    // Save the state in local
+    localStorage.setItem("dnd", "enable");
+
+    // hide enableDND button and show disableDND
+    $("#enableDND, #disableDND, .dndAlert").toggle();
+
+});
+
+
+$(document).on("click", "#disableDND", function() {
+
+
+    // Disable Donotdisturb in PBX side (Asterisk)
+    phone.call("*79", callOptions);
+
+    // Save the disable state in local
+    localStorage.setItem("dnd", "disable");
+
+    // hide disableDND button and show enableDND
+    $("#enableDND, #disableDND, .dndAlert").toggle();
+
+});
+
+
+// Answer Incoming Call
+$(document).on("click", "#callReceiveButton", function() {
+    
+    // Answer call
+    session.answer(callOptions);
+
+    // Show timer
+    $("#timer").show();
+    
+    // Paush the ring
+    BMS.fn.pause();
+
+});
+
+// Reject Incoming Call
+$(document).on("click", "#IncomingCallHangButton", function() {
+    
+    // reject call
+    session.terminate();
+
+    // Paush the ring
+    BMS.fn.pause();
+
+});
+
+/** Add Shadow after scroll on customer support div */
+$(document).scroll(function(e){
+
+   if( $(window).scrollTop() > 20 ) {
+        
+        $("#customerSupport").css("box-shadow", "rgba(0, 0, 0, 0.07) 0px 1px 1px, rgba(0, 0, 0, 0.07) 0px 2px 2px, rgba(0, 0, 0, 0.07) 0px 4px 4px, rgba(0, 0, 0, 0.07) 0px 8px 8px, rgba(0, 0, 0, 0.07) 0px 16px 16px");
+        $("#customerSupport section").slideUp("fast", function() {
+            $(this).hide();
+        });
+
+   } else {
+    
+        $("#customerSupport").css("box-shadow", "none");
+        $("#customerSupport section").slideDown("fast", function() {
+            $(this).show();
+        });
+   }
+
+});
+
+$(document).on("click", "#csSendSMS", function() {
+
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=sendSMS",
+        type: "post",
+        data: {
+            "number": $("#csSmsSendTo").val(),
+            "text": $("#csSmsText").val()
+        }, 
+        success: function(data, status) {
+
+            if(status = "success" && data === "1") {
+
+                // Success Altert
+                BMS.fn.alertSuccess("SMS successfully sent.", false);
+
+                // Make empty the sms box
+                $("#csSmsText").val("");
+
+
+            } else {
+                BMS.fn.alertError("SMS faild to send.");
+            }
+
+        }
+        
+    });
+
+});
+
+
+$(document).on("click", ".addToSMSBox tr", function() {
+    
+    var representativeInfo = "";
+    $("td", this).slice(3,6).each(function() {
+
+        representativeInfo += $(this).text() + "\n";
+
+    });
+    
+
+    $("#csSmsText").val( function() {
+        return this.value + representativeInfo;
+    });
+    
+    
+});
+
+$(document).on("click", "#addNewCase", function() {
+
+    var url = full_website_address + `/xhr/?module=customer-support&page=newCase&num=`;
+    
+    $("#modalDefaultMdm").modal('show').find('.modal-content').load( url + encodeURI(caller) );
+
+});
+
+
+function addCallLog({caller="", direction="", duration="", status=""}="") {
+
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=addCallLog",
+        type: "post",
+        data:{
+            caller: caller,
+            direction: direction,
+            duration: duration,
+            status: status,
+            feedback: $("#feedbackArea").val(),
+            reviewer: $("#feedbackReviewer").val()
+        },
+        success: function(data, status) {
+        }
+
+    });
+
+}
+
+
+$(document).on("click", '#saveFeedback', function() {
+
+    // Update the call feedback
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=updateCallFeedback",
+        type: "post",
+        data: {
+            caller: $("#feedbackCaller").val(),
+            feedback: $("#feedbackArea").val()
+        },
+        success: function(data, status) {
+            
+            if(status = "success" && data.includes('success') ) {
+
+                // Success Altert
+                BMS.fn.alertSuccess( $(data).text() , false);
+
+                // Make empty the boxes of feeback
+                $("#feedbackCaller").val("");
+                $("#feedbackArea").val("");
+
+
+            } else {
+
+                BMS.fn.alertError($(data).text());
+
+            }
+                
+        }
+    });
+        
+});
+
+
+// Insert quick feedback in feedback box
+$(document).on("click", ".quickFeedback > ul > li:not(:last-child)", function() {
+    
+    $("#feedbackArea").val( $("#feedbackArea").val() + $(this).text() + "\n" );
+
+});
+
+// add new feedback
+$(document).on("click", ".quickFeedback > ul > li:last-child", function() {
+    
+    Swal.fire({
+        title: "Enter new feedback",
+        input: "textarea",
+        showCancelButton: true,
+        closeOnConfirm: false,
+        animation: "slide-from-top",
+        inputPlaceholder: "Write feedback here"
+    }).then((results) => {
+
+        if(results.value !== undefined) {
+
+             // Save feedback in database
+            $.ajax({
+                url: full_website_address + "/xhr/?module=customer-support&page=addNewNote",
+                type: "post",
+                data:{
+                    note: results.value,
+                    type: "feedback"
+                }
+            });
+
+            // Add in the list
+            $(".quickFeedback > ul > li:last-child").before( `<li style='cursor:pointer;'>${results.value}</li>` );
+
+        }
+
+    });
+
+});
+
+// Insert note on sms box
+$(document).on("click", ".userNote > ul > li:not(:last-child)", function() {
+    
+    var that = this;
+    $("#csSmsText").val( function() {
+        return this.value + $(that).text() + "\n";
+    });
+
+});
+
+// add new note
+$(document).on("click", ".userNote > ul > li:last-child", function() {
+    
+    Swal.fire({
+        title: "Enter note here",
+        input: "textarea",
+        showCancelButton: true,
+        closeOnConfirm: false,
+        animation: "slide-from-top",
+        inputPlaceholder: "Write note here"
+    }).then((results) => {
+
+        if(results.value !== undefined) {
+
+             // Save feedback in database
+            $.ajax({
+                url: full_website_address + "/xhr/?module=customer-support&page=addNewNote",
+                type: "post",
+                data:{
+                    note: results.value,
+                    type: "note"
+                }
+            });
+
+            // Add in the list
+            $(".userNote > ul > li:last-child").before( `<li style='cursor:pointer;'>${results.value}</li>` );
+
+        }
+
+    });
+
+});
+
+
+// Get caller details by pressing enter
+$(document).on('keypress', '#callNumber', function(e){
+
+    if(e.key === "Enter") {
+
+        var number = $(this).val();
+
+        if( number.length < 2 ) {
+            alert("Please enter a valid number to continue");
+        } else {
+            showCallerDetails(number)
+        }
+
+    }
+
+})
+
+function showCallerDetails(number) {
+
+    // Search case list
+    $(".caseList input[type=search]").val(number);
+    $(".caseList input[type=search]").trigger("keyup");
+
+    // Search Person list
+    $(".personList input[type=search]").val(number);
+    $(".personList input[type=search]").trigger("keyup");
+
+    // Show the caller details
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=getCallerDetails",
+        type: "post",
+        data: {
+            "caller": number
+        },
+        success: function(data, status) {
+            
+            if(status == "success") {
+
+                var callerData = JSON.parse(data);
+
+                if(Object.keys(callerData.details).length !== 0) {
+
+                    // Notifiy only on incoming session
+                    if( session && session.direction === 'incoming' ) {
+
+                        if(callerData.details.type !== undefined) {
+                            BMS.fn.desktopNotify(`${callerData.details.name} (${number}) is calling...`, full_website_address +"/assets/images/call.png", `${callerData.details.type}, ${callerData.details.designation}`);
+                        } else {
+                            BMS.fn.desktopNotify(`${number} is calling...`, full_website_address +"/assets/images/call.png", "Click Here to open the dashboard");
+                        }
+
+                    }
+                    
+
+                    $(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html( callerData.details.name );
+                    $(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html( callerData.details.type );
+                    $(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html( callerData.details.designation );
+                    $(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html( callerData.details.address );
+
+                    var lastCallDetails = "There is no call";
+                    if(callerData.agentName !== "") {
+                        lastCallDetails = `By <b>${callerData.agentName}</b>, at ${callerData.lastCallTime}; ${callerData.call_status} (${callerData.totalCallCount} total call)`;
+                    }
+
+                    $(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html( lastCallDetails );
+
+                } else {
+
+                    $(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html("No data found in database");
+                    $(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html("");
+                    $(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html("");
+                    $(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html("");
+                    $(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html("");
+
+                    var lastCallDetails = "There is no call";
+                    if(callerData.agentName !== "") {
+                        lastCallDetails = `By <b>${callerData.agentName}</b>, at ${callerData.lastCallTime}; ${callerData.call_status} (${callerData.totalCallCount} total call)`;
+                    }
+
+                    $(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html( lastCallDetails );
+
+                    // Show Desktop Notification
+                    if( session && session.direction === 'incoming' ) { 
+                        BMS.fn.desktopNotify(`${number} is calling...`, full_website_address +"/assets/images/call.png", "Click Here to open the dashboard");
+                    }
+                    
+
+                }
+
+            }
+        }
+
+    });
+
+}
+
+
+JsSIP.debug.disable('JsSIP:*');
\ No newline at end of file

--- assets/js/callCenterOld.min.js ---
@@ -0,0 +1 @@
+if("undefined"==typeof sipCredentials)throw new Error("Sorry! No SIP credentials found");navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,navigator.getUserMedia({audio:!0},(function(){$("#status").html("Dail a Number!"),$("#callButton").prop("disabled",!1)}),(function(){$("#status").html("<div style='font-size: 14px;' class='alert alert-danger'>No microphone found! Please connect your mic and reload!</div>"),$("#callButton").prop("disabled",!0)}));var remoteAudio=new window.Audio;remoteAudio.autoplay=!0,remoteAudio.crossOrigin="anonymous";var session,socket=new JsSIP.WebSocketInterface(sipCredentials.socket),configuration={sockets:[socket],uri:sipCredentials.uri,password:sipCredentials.pass,username:sipCredentials.user,register:!0},callOptions={mediaConstraints:{audio:!0,video:!1}},caller="",callerDisplay="",hideNumbers=["*78","*79","*76"],phone=new JsSIP.UA(configuration);function addCallLog({caller:e="",direction:t="",duration:n="",status:a=""}=""){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=addCallLog",type:"post",data:{caller:e,direction:t,duration:n,status:a,feedback:$("#feedbackArea").val(),reviewer:$("#feedbackReviewer").val()},success:function(e,t){}})}function showCallerDetails(e){$(".caseList input[type=search]").val(e),$(".caseList input[type=search]").trigger("keyup"),$(".personList input[type=search]").val(e),$(".personList input[type=search]").trigger("keyup"),$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=getCallerDetails",type:"post",data:{caller:e},success:function(t,n){if("success"==n){var a=JSON.parse(t);if(0!==Object.keys(a.details).length){session&&"incoming"===session.direction&&(void 0!==a.details.type?BMS.fn.desktopNotify(`${a.details.name} (${e}) is calling...`,full_website_address+"/assets/images/call.png",`${a.details.type}, ${a.details.designation}`):BMS.fn.desktopNotify(`${e} is calling...`,full_website_address+"/assets/images/call.png","Click Here to open the dashboard")),$(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html(a.details.name),$(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(a.details.type),$(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(a.details.designation),$(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(a.details.address);var l="There is no call";""!==a.agentName&&(l=`By <b>${a.agentName}</b>, at ${a.lastCallTime}; ${a.call_status} (${a.totalCallCount} total call)`),$(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(l)}else{$(".callerInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html("No data found in database"),$(".callerInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(""),$(".callerInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(""),$(".callerInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(""),$(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html("");l="There is no call";""!==a.agentName&&(l=`By <b>${a.agentName}</b>, at ${a.lastCallTime}; ${a.call_status} (${a.totalCallCount} total call)`),$(".callerInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(l),session&&"incoming"===session.direction&&BMS.fn.desktopNotify(`${e} is calling...`,full_website_address+"/assets/images/call.png","Click Here to open the dashboard")}}}})}phone.on("newRTCSession",(function(e){var t=e.session;if(session)return addCallLog({caller:t.remote_identity.uri.user,direction:t.direction,duration:0,status:"Missed"}),t.terminate(),!1;var n=function(){session=null,$("#muteCall, #holdCall").show(),$("#unholdCall, #unmuteCall").hide()};caller=(session=t).remote_identity.uri.user,callerDisplay=session.remote_identity.display_name,session.on("ended",(function(){jQuery.inArray(caller,hideNumbers)<0&&(addCallLog({caller:caller,direction:session.direction,duration:Math.floor((session.end_time.getTime()-session.start_time.getTime())/1e3),status:"Answered"}),$("#callDailer").show(),$("#callReceiver").hide(),BMS.fn.pause(),$("#callButton").show(),$("#hangButton").hide(),BMS.fn.stopTimer(window.timer),$("#status").html("Dail a number!"),$(".caseList input[type=search]").val(""),$(".caseList input[type=search]").trigger("keyup"),$("#timer").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(500).fadeIn(500,(function(){$("#timer").html("00:00:00"),$("#timer").hide()}))),n()})),session.on("failed",(function(e){$("#callDailer").show(),$("#callReceiver").hide(),BMS.fn.pause(),$("#callButton").show(),$("#hangButton").hide(),"incoming"===session.direction?"local"===e.originator?$("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250,(function(){$("#status").html("Call rejected!"),addCallLog({caller:caller,direction:"incoming",duration:0,status:"Rejected"})})):($("#status").html(`Missed call from ${callerDisplay}!`),addCallLog({caller:caller,direction:"incoming",duration:0,status:"Missed"})):"local"===e.originator?$("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250,(function(){$("#status").html("Dail a number!"),addCallLog({caller:caller,direction:"outgoing",duration:0,status:"Unreachable"})})):$("#status").fadeOut(100).fadeIn(100).fadeOut(150).fadeIn(150).fadeOut(200).fadeIn(200).fadeOut(250).fadeIn(250,(function(){"SIP Failure Code"===e.cause?($("#status").html("The number is not answered!"),addCallLog({caller:caller,direction:"outgoing",duration:0,status:"Not Answered"})):($("#status").html("The number is busy!"),addCallLog({caller:caller,direction:"outgoing",duration:0,status:"Busy"}))})),n()})),session.on("hold",(function(e){"remote"===e.originator?$("#status").html(`${caller} is hold you.`):$("#status").html(`${caller} is on hold.`)})),session.on("muted",(function(e){$("#status").html("Call is muted.")})),session.on("unmuted",(function(e){$("#status").html(`${caller} is connected.`)})),session.on("unhold",(function(){$("#status").html(`${caller} is connected.`)})),session.on("accepted",(function(){jQuery.inArray(caller,hideNumbers)<0&&($("#timer").show(),window.timer=BMS.fn.startTimer(),$("#status").html(`${caller} is connected.`),$("#csSmsSendTo").val(caller),$("#feedbackCaller").val(caller))})),session.on("confirmed",(function(){var e=session.connection.getLocalStreams()[0],t=session.connection.createDTMFSender(e.getAudioTracks()[0]);session.sendDTMF=function(e){t.insertDTMF(e)}})),session.on("peerconnection",(e=>{const t=e.peerconnection;t.onaddstream=function(e){remoteAudio.srcObject=e.stream,remoteAudio.play()};var n=new MediaStream;t.getReceivers().forEach((function(e){n.addTrack(e.track)}))})),"incoming"===session.direction?(BMS.fn.play("incoming_call",!0),$("#status").html(`${callerDisplay} is calling...`),$("#callReceiver").show(),$("#timer").hide(),$("#callDailer").hide(),showCallerDetails(caller)):session.connection.addEventListener("addstream",(function(e){BMS.fn.pause(),remoteAudio.srcObject=e.stream}))})),phone.start(),$(document).on("click","#callButton",(function(){var e=$("#callNumber").val();session=phone.call(e,callOptions),$("#status").html(`Call is being send to ${e}...`),$("#callButton").hide(),$("#hangButton").show(),showCallerDetails(caller),$("#feedbackArea, #feedbackReviewer").val(""),$(document).off("change","#feedbackArea, #feedbackReviewer")})),$(document).on("click","#hangButton",(function(){session.terminate()})),$(window).on("beforeunload",(function(){session.terminate()})),$(document).on("click","#muteCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.mute(),$("#muteCall, #unmuteCall").toggle()})),$(document).on("click","#unmuteCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.unmute(),$("#muteCall, #unmuteCall").toggle()})),$(document).on("click","#holdCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.hold(),$("#holdCall, #unholdCall").toggle()})),$(document).on("click","#unholdCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call.");session.unhold(),$("#holdCall, #unholdCall").toggle()})),$(document).on("click","#transferCall",(function(){if(void 0===session)return BMS.fn.alertError("Sorry! There is no active call to transfer.");var e={};$.each(extentionNumbers,(function(t,n){e[n.extention]=n.name})),Swal.fire({title:"Please select the extension",input:"select",inputOptions:e,showCancelButton:!0,confirmButtonText:'<i class="fa fa-arrow-up"></i> Transfer Call',closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Destination number..."}).then((e=>{void 0!==e.value&&(session.refer(e.value),session.terminate())}))})),$(document).on("click","#enableDND",(function(){phone.call("*78",callOptions),localStorage.setItem("dnd","enable"),$("#enableDND, #disableDND, .dndAlert").toggle()})),$(document).on("click","#disableDND",(function(){phone.call("*79",callOptions),localStorage.setItem("dnd","disable"),$("#enableDND, #disableDND, .dndAlert").toggle()})),$(document).on("click","#callReceiveButton",(function(){session.answer(callOptions),$("#timer").show(),BMS.fn.pause()})),$(document).on("click","#IncomingCallHangButton",(function(){session.terminate(),BMS.fn.pause()})),$(document).scroll((function(e){$(window).scrollTop()>20?($("#customerSupport").css("box-shadow","rgba(0, 0, 0, 0.07) 0px 1px 1px, rgba(0, 0, 0, 0.07) 0px 2px 2px, rgba(0, 0, 0, 0.07) 0px 4px 4px, rgba(0, 0, 0, 0.07) 0px 8px 8px, rgba(0, 0, 0, 0.07) 0px 16px 16px"),$("#customerSupport section").slideUp("fast",(function(){$(this).hide()}))):($("#customerSupport").css("box-shadow","none"),$("#customerSupport section").slideDown("fast",(function(){$(this).show()})))})),$(document).on("click","#csSendSMS",(function(){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=sendSMS",type:"post",data:{number:$("#csSmsSendTo").val(),text:$("#csSmsText").val()},success:function(e,t){"1"===e?(BMS.fn.alertSuccess("SMS successfully sent.",!1),$("#csSmsText").val("")):BMS.fn.alertError("SMS faild to send.")}})})),$(document).on("click",".addToSMSBox tr",(function(){var e="";$("td",this).slice(3,6).each((function(){e+=$(this).text()+"\n"})),$("#csSmsText").val((function(){return this.value+e}))})),$(document).on("click","#addNewCase",(function(){var e=full_website_address+"/xhr/?module=customer-support&page=newCase&num=";$("#modalDefaultMdm").modal("show").find(".modal-content").load(e+encodeURI(caller))})),$(document).on("click","#saveFeedback",(function(){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=updateCallFeedback",type:"post",data:{caller:$("#feedbackCaller").val(),feedback:$("#feedbackArea").val()},success:function(e,t){e.includes("success")?(BMS.fn.alertSuccess($(e).text(),!1),$("#feedbackCaller").val(""),$("#feedbackArea").val("")):BMS.fn.alertError($(e).text())}})})),$(document).on("click",".quickFeedback > ul > li:not(:last-child)",(function(){$("#feedbackArea").val($("#feedbackArea").val()+$(this).text()+"\n")})),$(document).on("click",".quickFeedback > ul > li:last-child",(function(){Swal.fire({title:"Enter new feedback",input:"textarea",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Write feedback here"}).then((e=>{void 0!==e.value&&($.ajax({url:full_website_address+"/xhr/?module=customer-support&page=addNewNote",type:"post",data:{note:e.value,type:"feedback"}}),$(".quickFeedback > ul > li:last-child").before(`<li style='cursor:pointer;'>${e.value}</li>`))}))})),$(document).on("click",".userNote > ul > li:not(:last-child)",(function(){var e=this;$("#csSmsText").val((function(){return this.value+$(e).text()+"\n"}))})),$(document).on("click",".userNote > ul > li:last-child",(function(){Swal.fire({title:"Enter note here",input:"textarea",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Write note here"}).then((e=>{void 0!==e.value&&($.ajax({url:full_website_address+"/xhr/?module=customer-support&page=addNewNote",type:"post",data:{note:e.value,type:"note"}}),$(".userNote > ul > li:last-child").before(`<li style='cursor:pointer;'>${e.value}</li>`))}))})),$(document).on("keypress","#callNumber",(function(e){if("Enter"===e.key){var t=$(this).val();t.length<2?alert("Please enter a valid number to continue"):showCallerDetails(t)}})),JsSIP.debug.disable("JsSIP:*");
\ No newline at end of file

--- assets/js/events.js ---
@@ -0,0 +1,2293 @@
+/**
+ * Events.js
+ * 
+ * All events have been written here.
+ */
+
+// Load Poduct by filtered
+$(document).on("change", "#productCategoryFilter, #productBrandFilter, #productEditionFilter, #productGenericFilter, #productAuthorFilter", function () {
+
+    BMS.PRODUCT.showProduct({
+        category: $("#productCategoryFilter").val(),
+        brand: $("#productBrandFilter").val(),
+        edition: $("#productEditionFilter").val(),
+        generic: $("#productGenericFilter").val(),
+        author: $("#productAuthorFilter").val(),
+    });
+
+});
+
+
+// Set the warehouse id and customer id to a hidden input filed
+// On change
+$(document).on("change", "#customers", function () {
+    var customersId = $("#customers").val();
+    $("#customersId").val(customersId);
+
+    // get customer data
+    BMS.fn.get(`getCustomerData&cid=${customersId}`, function (data) {
+
+        // Change discount value
+        $("#orderDiscountValue").val(data.discount);
+
+        // Change shipping rate
+        $("#packetShippingRate").val(data.shipping_rate);
+
+    });
+
+});
+
+$(document).on("change", "#warehouse", function () {
+
+    var warehouseId = $("#warehouse").val();
+    $("#warehouseId").val(warehouseId);
+
+    // Change the selecte2 product url for pos
+    $("#selectPosProduct").attr("select2-ajax-url", `${full_website_address}/info/?module=select2&page=productListForPos&wid=${warehouseId}`);
+
+    // Reinitiate select2 after changing ajax url
+    BMS.fn.select2("#selectPosProduct");
+
+});
+
+$(document).on("change", "#stockTransferFromWarehouse, #stockTransferToWarehouse", function () {
+    var stockTransferFromWarehouseId = $("#stockTransferFromWarehouse").val();
+    var stockTransferToWarehouseId = $("#stockTransferToWarehouse").val();
+
+    $("#stockTransferFromWarehouseId").val(stockTransferFromWarehouseId);
+    $("#stockTransferToWarehouseId").val(stockTransferToWarehouseId);
+
+});
+
+$(document).on("change", "#scTransferWarehouse", function () {
+    var scTransferWarehouseId = $("#scTransferWarehouse").val();
+
+    $("#scTransferWarehouseId").val(scTransferWarehouseId);
+
+});
+
+
+// Add tariff & Charges Row
+$(document).on("click", "#addTariffChargesRow", function () {
+
+    BMS.MAIN.addTariffChargesRow("#tariffCharges");
+
+});
+
+// Get the Product Details and add into the list
+$(document).on("click", ".productButton", function () {
+
+    if (isPosPage) {
+
+        BMS.POS.addProduct(this.value);
+
+    } else if (isPurchasePage) {
+
+        BMS.PURCHASE.addProduct(this.value);
+
+    } else if (isTransferStockPage) {
+
+        BMS.STOCK_TRANSFER.addProduct(this.value);
+
+    } else if (isProductReturnPage) {
+
+        BMS.RETURN.addProduct(this.value);
+
+    } else if (isSpecimenCopyPage) {
+
+        BMS.SPECIMEN_COPY.addProduct(this.value);
+
+    } else if (isScDistributionPage) {
+
+        BMS.SC_DISTRIBUTION.addProduct(this.value);
+
+    } else if (isAddProductPage) {
+
+        BMS.PRODUCT.addProduct(this.value);
+
+    } else if (isStockEntryPage) {
+
+        BMS.STOCK_ENTRY.addProduct(this.value);
+
+    } else if (isSaleOrderPage) {
+
+        BMS.ORDER.addProduct(this.value);
+
+    }
+
+});
+
+
+$(document).on("change", "#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct", function () {
+
+    //BMS.POS.addProduct(this.value);
+    if (isPosPage) {
+
+        BMS.POS.addProduct(this.value);
+
+    } else if (isPurchasePage) {
+
+        BMS.PURCHASE.addProduct(this.value);
+
+    } else if (isTransferStockPage) {
+
+        BMS.STOCK_TRANSFER.addProduct(this.value);
+
+    } else if (isProductReturnPage) {
+
+        BMS.RETURN.addProduct(this.value);
+
+    } else if (isSpecimenCopyPage) {
+
+        BMS.SPECIMEN_COPY.addProduct(this.value);
+
+    } else if (isScDistributionPage) {
+
+        BMS.SC_DISTRIBUTION.addProduct(this.value);
+
+    } else if (isAddProductPage) {
+
+        BMS.PRODUCT.addProduct(this.value);
+
+    } else if (isStockEntryPage) {
+
+        BMS.STOCK_ENTRY.addProduct(this.value);
+
+    } else if (isSaleOrderPage) {
+
+        BMS.ORDER.addProduct(this.value);
+
+    }
+
+    $(this).html("<option value=''>Search Product....</option>");
+
+});
+
+$(document).on("click", "#addWastageSaleRow", function () {
+
+    BMS.WASTAGE_SALE.addWastageSaleItem();
+
+});
+
+// Remove product from current list
+$(document).on("click", ".removeThisProduct, .removeThisItem", function () {
+
+    $(this).closest("tr").css("background-color", "red").hide("fast", function () {
+        $(this).closest("tr").remove();
+
+        if (isPosPage) {
+
+            BMS.POS.grandTotal();
+            BMS.POS.disableEnableWCSelect();
+
+        } else if (isPurchasePage) {
+
+            BMS.PURCHASE.grandTotal();
+
+        } else if (isTransferStockPage) {
+
+            BMS.STOCK_TRANSFER.grandTotal();
+            BMS.STOCK_TRANSFER.disableEnableWarehouseSelect();
+
+        } else if (isProductReturnPage) {
+
+            BMS.RETURN.grandTotal();
+
+        } else if (isWastageSalePage) {
+
+            BMS.WASTAGE_SALE.grandTotal();
+
+        } else if (isSpecimenCopyPage) {
+
+            BMS.SPECIMEN_COPY.disableEnableWarehouseSelect();
+
+        } else if (isStockEntryPage) {
+
+            BMS.STOCK_ENTRY.grandTotal();
+
+        } else if (isSaleOrderPage) {
+
+            BMS.ORDER.grandTotal();
+            BMS.POS.disableEnableWCSelect();
+
+        }
+
+    });
+
+});
+
+// Remove Tariff & Charges Row for POS
+$(document).on("click", ".removeThisTariffCharges", function () {
+
+    $(this).closest(".row").css("background-color", "whitesmoke").hide("fast", function () {
+        $(this).closest(".row").remove();
+
+        if (isPosPage) {
+
+            BMS.POS.grandTotal();
+
+        } else if (isPurchasePage) {
+
+            BMS.PURCHASE.grandTotal();
+
+        } else if (isProductReturnPage) {
+
+            BMS.RETURN.grandTotal();
+
+        } else if (isWastageSalePage) {
+
+            BMS.WASTAGE_SALE.grandTotal();
+
+        } else if (isSaleOrderPage) {
+
+            BMS.ORDER.grandTotal();
+
+        }
+
+    });
+
+});
+
+// Calculate tarif and Charges
+$(document).on("change", ".tariffChargesName", function () {
+
+    if (isPosPage) {
+
+        BMS.POS.grandTotal();
+
+    } else if (isPurchasePage) {
+
+        BMS.PURCHASE.grandTotal();
+
+    } else if (isProductReturnPage) {
+
+        BMS.RETURN.grandTotal();
+
+    } else if (isWastageSalePage) {
+
+        BMS.WASTAGE_SALE.grandTotal();
+
+    } else if (isSaleOrderPage) {
+
+        BMS.ORDER.grandTotal();
+
+    }
+
+});
+
+
+// Calculate product price on unit change on POS Page
+/**
+ * This is not required. Now commenting. Will delete in near version
+ 
+$(document).on("change", ".productItemUnit", function() {
+    
+    if(isPosPage) {
+
+        BMS.POS.productUnitCheck(this);
+
+    } else if(isPurchasePage) {
+    
+        BMS.PURCHASE.productUnitCheck(this);
+
+    } else if (isTransferStockPage) {
+    
+        BMS.STOCK_TRANSFER.productUnitCheck(this);
+
+    } else if (isProductReturnPage) {
+    
+        BMS.RETURN.productUnitCheck(this);
+
+    } else if (isSpecimenCopyPage) {
+    
+        BMS.SPECIMEN_COPY.productUnitCheck(this);
+
+    } else {
+
+        BMS.PRODUCT.productUnitCheck(this);
+    
+    } 
+
+});
+*/
+
+// Calculate details while change product Quantity
+$(document).on("keyup blur", ".productQnt", function () {
+
+    if (isPosPage) {
+
+        BMS.POS.productQntCheck(this);
+
+    } else if (isPurchasePage) {
+
+        BMS.PURCHASE.calculateEachProduct(this);
+        BMS.PURCHASE.grandTotal();
+
+    } else if (isTransferStockPage) {
+
+        BMS.STOCK_TRANSFER.productQntCheck(this);
+
+    } else if (isProductReturnPage) {
+
+        BMS.RETURN.grandTotal();
+        BMS.RETURN.calculateEachProduct(this);
+
+    } else if (isSpecimenCopyPage) {
+
+        BMS.SPECIMEN_COPY.productQntCheck(this);
+
+    } else if (isStockEntryPage) {
+
+        BMS.STOCK_ENTRY.calculateEachProduct(this);
+        BMS.STOCK_ENTRY.grandTotal();
+
+    } else if (isSaleOrderPage) {
+
+        BMS.ORDER.productQntCheck(this);
+
+    }
+
+});
+
+// Open the search product option when enter pressed
+$(document).on("keydown", ".productQnt", function (event) {
+
+    if (event.key === "Enter") {
+        if (!$('#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct').hasClass("select2-hidden-accessible")) {
+            // inititalize the select2 if not initilized
+            BMS.fn.select2("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct");
+
+        }
+
+        $("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").select2("open");
+
+    }
+
+});
+
+// Prevent form submit while press enter button in purchase discount
+// and hide the purchase discount modal and show the Finalize Purchase modal
+$(document).on("keydown", "#purchaseDiscountValue", function (event) {
+
+    if (event.key === "Enter") {
+
+        event.preventDefault();
+        $("#purchaseDiscount").modal("hide");
+        $("#finalizePurchase").modal("show");
+
+    }
+
+});
+
+// Focus adjust amount on press enter on shipping in Finalize Sale screen
+$(document).on("keydown", "#shippingCharge", function (event) {
+
+    if (event.key === "Enter") {
+
+        event.preventDefault();
+        $("#adjustAmount").select();
+
+    }
+
+});
+
+// Focus paid amount on press enter on adjust amount in Finalize Sale screen
+$(document).on("keydown", "#adjustAmount", function (event) {
+
+    // Ad class for adjust amount auto change
+    $(this).addClass("disableAdjustAmountAutoChange");
+
+    if (event.key === "Enter") {
+
+        event.preventDefault();
+        $(".posSalePaymentAmount").first().select();
+        $(".posSalePaymentAmount").first().addClass("disablePaymentAmountAutoChange");
+
+    }
+
+});
+
+
+/**
+ * For multiple payment method
+ * interact payment input with enter
+ */
+$(document).on("keydown focus", ".posSalePaymentAmount", function (event) {
+
+    var nextPaymentBox = $(this).closest(".row").next(".row").find("input.posSalePaymentAmount");
+    $(this).addClass("disablePaymentAmountAutoChange");
+
+    if (nextPaymentBox.length === 1 && event.key === "Enter") {
+
+        event.preventDefault();
+
+        nextPaymentBox.addClass("disablePaymentAmountAutoChange");
+
+        // select next payment input
+        nextPaymentBox.select();
+
+    }
+
+});
+
+
+$(document).on("keydown", ".select2-search__field", function (e) {
+
+    // Check if we are in the search product input and
+    // check the input is not empty and and
+    // if there at least on product added
+    // check if Enter key is pressed then
+    // Open the discount modal
+
+    if (isPosPage
+        && $(this).attr("aria-controls") === "select2-selectPosProduct-results"
+        && this.value === ""
+        && $(".productQnt").length > 0
+        && e.key === "Enter"
+    ) {
+
+        // close the select2 search product box
+        $("#selectPosProduct").select2('close');
+
+        // Open Discount
+        $("#orderDiscount").modal("show");
+
+    }
+
+
+    // For purchase page
+    if (isPurchasePage
+        && $(this).attr("aria-controls") === "select2-selectProduct-results"
+        && this.value === ""
+        && $(".productQnt").length > 0
+        && e.key === "Enter"
+    ) {
+
+        // close the select2 search product box
+        $("#selectProduct").select2('close');
+
+        // Open Discount
+        $("#purchaseDiscount").modal("show");
+
+    }
+
+
+});
+
+
+// Open the finalize purchase modal when discount modal is closed
+$(document).on("hide.bs.modal", "#orderDiscount", function (e) {
+
+    var orderDiscount = $("#orderDiscountValue");
+    var orderDiscountValue = $(orderDiscount).val();
+
+    if( BMS.POS.isGivenDiscountPermitted(orderDiscount) ) {
+
+        // Open payment modal
+        $("#payment").modal("show");
+
+        // Calculate order discount
+        BMS.POS.grandTotal();
+
+
+    } else {
+
+        // Display the error message
+        Swal.fire({
+            title: "Error!",
+            text: `You do not have permission to give ${orderDiscountValue} discount.`,
+            icon: "error"
+        });
+        $(orderDiscount).val(0);
+
+        e.preventDefault();
+
+    }
+
+});
+
+
+$(document).on("blur keyup", ".wastageSaleItemQnt, .wastageSaleItemPrice", function () {
+
+    var itemQnt = $(this).closest("tr").find(".wastageSaleItemQnt").val();
+    var itemPrice = $(this).closest("tr").find(".wastageSaleItemPrice").val();
+
+    /* Display the subtotal */
+    $(this).closest("tr").find(".wastageSaleItemSubtotal").html(parseFloat(itemQnt * itemPrice).toFixed(2));
+
+    /* Count all totals */
+    BMS.WASTAGE_SALE.grandTotal();
+
+});
+
+/* Calculate details while change product Quantity, product Discount and wastageSale price */
+$(document).on("blur keyup", "#wastageSaleDiscount, #wastageSalePaidAmount", function () {
+
+    BMS.WASTAGE_SALE.grandTotal();
+
+});
+
+/* Calculate details while change product Quantity, product Discount and purchase price */
+$(document).on("blur keyup", ".productPurchaseDiscount, .productPurchasePrice", function () {
+
+    if (isPurchasePage) {
+
+        BMS.PURCHASE.calculateEachProduct(this);
+        BMS.PURCHASE.grandTotal();
+
+    } else if (isTransferStockPage) {
+
+        BMS.STOCK_TRANSFER.calculateEachProduct($(this));
+        BMS.STOCK_TRANSFER.grandTotal();
+
+    }
+
+});
+
+/* Calculate details while change product Quantity, product Discount and return price */
+$(document).on("blur keyup", ".productReturnDiscount, .productReturnPrice", function () {
+
+    BMS.RETURN.calculateEachProduct(this);
+    BMS.RETURN.grandTotal();
+
+});
+
+/* Calculate the purchase Discount */
+$(document).on("keyup blur", "#purchaseDiscount, #purchasePaidAmount, #purchaseShipping", function () {
+
+    BMS.PURCHASE.grandTotal();
+
+});
+
+/* Calculate the return Discount */
+$(document).on("keyup blur", "#returnDiscount, #returnShipping, #returnSurcharge, #returnPaidAmount", function () {
+
+    BMS.RETURN.grandTotal();
+
+});
+
+// Calculate details while change packet
+$(document).on("keyup blur", "#productSaleItemPacket", function () {
+
+    // Will Be done later
+
+    //BMS.POS.productPacketCheck();
+
+});
+
+// Calculate details while change product Discount
+$(document).on("blur keydown", "#productSaleItemDiscount", function (event) {
+
+    BMS.POS.productDiscountCheck(event);
+
+});
+
+// Calculate the order discount
+$(document).on("keydown", "#orderDiscountValue", function (e) {
+
+    var keyCode = e.keyCode || e.which;
+
+    if(keyCode === 13) {
+        
+        BMS.POS.orderDiscountCheck(this, e);
+
+    }
+
+});
+
+// Calculate Paid amount, change and due
+$(document).on("keyup", ".posSalePaymentAmount, #shippingCharge, #totalPackets, #packetShippingRate, #adjustAmount", function (event) {
+
+    BMS.POS.grandTotal(event);
+
+});
+
+
+// Submit the sale
+$(document).on('submit', '#posSale', function (event) {
+    
+    event.preventDefault();
+
+    // Check if There is at least one product in the purchase list
+    var isNoProductAdded = $(".productQnt").length === 0;
+    var isStockOutProductAdded = $('.productSO').filter(function () { return this.value == 1 }).length > 0;
+
+    // Check if the customer is set
+    if ($("#customersId").val() === "") {
+        return BMS.fn.alertError("Please select the customer");
+    }
+
+    // Get the submiter button
+    var submitter = event.originalEvent.submitter;
+
+    // Confirm if it is hold
+    if (submitter.value === 'sale_is_hold' && !confirm("Are you sure to Hold this?")) {
+        return;
+    }
+
+    if (isNoProductAdded || isStockOutProductAdded) {
+        //alert("Please add at least one product.");
+        Swal.fire({
+            title: "Error!",
+            html: isNoProductAdded ? "Please add a least one product" : "Sorry! there have at least one out of stock product in selected warehouse, which are marked with <span style='Background-color:pink;'>Pink background</span>. Please remove them first.",
+            icon: "error",
+            onClose: $("body").css('padding', '0px') // This is because, while close the sweet alert a 15px padding-right is keep.
+        });
+        return;
+    }
+
+    // Add loading icon in the button after click.
+    $(submitter).html("Submit &nbsp;&nbsp; <i class='fa fa-spin fa-refresh'></i>");
+
+    var formData = new FormData(this);       // Get all form data and store into formData 
+
+    // Append the button value with form data
+    formData.append(submitter.name, submitter.value);
+
+    // disable submit button untile ajax request complete
+    $("#payment").find("button").prop("disabled", true);
+
+    $.ajax({
+        url: full_website_address + "/info/?module=pos",
+        type: "post",
+        data: formData,
+        cache: false,
+        contentType: false,
+        processData: false,
+        success: function (data, status) {
+            if (status == "success") {
+                //Remove the loading icon from button
+                $(submitter).html("Printing...");
+
+                var saleStatus = JSON.parse(data);
+
+                // Redirect to sale invoice print page
+                if (saleStatus["saleStatus"] === "success") {
+
+                    BMS.MAIN.printPage(full_website_address + "/invoice-print/?invoiceType=posSale&id=" + saleStatus["salesId"], event, function () {
+
+                        // Hide the payment modal
+                        $('#payment').modal('hide');
+
+                        // Clear POS Screen
+                        BMS.POS.clearScreen();
+
+                        // enable submit button after ajax request complete
+                        $("#payment").find("button").prop("disabled", false);
+
+                    });
+
+                } else {
+
+                    $("#posErrorMsg").html('<div class="alert alert-danger">' + saleStatus["msg"] + '</div>');
+
+                    // enable submit button after ajax request complete
+                    $("#payment").find("button").prop("disabled", false);
+
+                }
+
+            }
+        }
+    });
+
+});
+
+
+/* Check if There is at least one product in the purchase list */
+$(document).on('submit', '#productPurchase, #productStockTransfer, #productReturn, #specimenCopyForm, #scDistributionForm', function (event) {
+
+    if ($(".productQnt").length < 1) {
+        alert("Please add at least one product.");
+        event.preventDefault();
+        return;
+    }
+
+});
+
+/* Check if There is at least one product in the wastageSale list */
+$(document).on('submit', '#wastageSaleForm', function (event) {
+
+    var num = $(".wastageSaleItemQnt").length;
+
+    if (num < 1) {
+        alert("Please add at least one item.");
+        event.preventDefault();
+        return;
+    } else if (Number($("#wastageSalePaidAmount").val()) > 0 && $("#wastageSaleAccounts").val() === "") {
+        alert("Please select the accounts.");
+        event.preventDefault();
+        return;
+    }
+
+});
+
+
+// Prevent Enter key for default activity
+// $(document).on("keyup keypress", "#posSale, #productPurchase, #productReturn, #productStockTransfer, #wastageSaleForm", function (e) {
+
+$(document).on("keypress", "#posSale, #productPurchase, #productReturn, #productStockTransfer, #wastageSaleForm", function (e) {
+
+    var keyCode = e.keyCode || e.which;
+
+    if (keyCode === 13) {
+
+        if ($("#payment, #finalizePurchase, #finalizeReturn, #finalizeWastageSale").hasClass("in") === false) {
+
+            e.preventDefault();
+
+        }
+
+
+        if (isPosPage) {
+
+            // Check if the payment modal is open then the enter button should work
+            // Otherwise others modals should close
+            BMS.POS.grandTotal();
+
+            if ($("#orderDiscount").hasClass("in")) { // If orderDiscount is opened the hide it
+
+                $('#orderDiscount').modal('hide');
+
+            } else if ($("#salesTariffCharges").hasClass("in")) { // If orderTax is opened the hide it
+
+                $('#salesTariffCharges').modal('hide');
+
+            } else if ($("#productSaleDetails").hasClass("in")) { // If productSaleDetails is opened the hide it
+
+                $('#productSaleDetails').modal('hide');
+
+            }
+
+
+        } else if (isPurchasePage) {
+
+            BMS.PURCHASE.grandTotal();
+
+            if ($("#purchaseTariffCharges").hasClass("in")) { /* If purchaseTariffCharges is opened the hide it */
+
+                $('#purchaseTariffCharges').modal('hide');
+
+            } else if ($("#purchaseDiscount").hasClass("in")) { /* If purchaseDiscount is opened the hide it */
+
+                $('#purchaseDiscount').modal('hide');
+
+            }
+
+
+        } else if (isProductReturnPage) {
+
+
+            BMS.RETURN.grandTotal();
+
+            if ($("#returnTariffCharges").hasClass("in")) { /* If returnTariffCharges is opened the hide it */
+
+                $('#returnTariffCharges').modal('hide');
+
+            } else if ($("#returnDiscount").hasClass("in")) { /* If returnDiscount is opened the hide it */
+
+                $('#returnDiscount').modal('hide');
+
+            }
+
+        } else if (isWastageSalePage) {
+
+            BMS.WASTAGE_SALE.grandTotal();
+
+            if ($("#wastageSaleTariffCharges").hasClass("in")) { /* If purchaseTariffCharges is opened the hide it */
+
+                $('#wastageSaleTariffCharges').modal('hide');
+
+            } else if ($("#wastageSaleDiscount").hasClass("in")) { /* If purchaseDiscount is opened the hide it */
+
+                $('#wastageSaleDiscount').modal('hide');
+
+            }
+
+        }
+
+    }
+
+
+});
+
+/* Select input filed on open modal */
+$(document).on('shown.bs.modal', '#orderDiscount, #purchaseDiscount, #returnDiscount, #wastageSaleDiscount, #payment', function () {
+
+    $('#purchaseDiscountValue, #purchasePaidAmount, #orderDiscountValue, #shippingCharge, #returnDiscountValue, #returnPaidAmount, #wastageSaleDiscountValue, #shippingCharge').select();
+
+});
+
+/** Load purchase list on opne Purchase list modal */
+$(document).on("show.bs.modal", "#customerPurchaseList", function () {
+
+    BMS.fn.get(`customerPurchaseList&cid=${$("#customersId").val()}`, purchaseList => {
+
+        if (purchaseList == "") {
+
+            $("#showPurchaseList ul").html('<li class="alert alert-danger">Sorry! No data found.</li>');
+            return
+        }
+
+        var purchaseListHtml = "";
+        purchaseList.forEach(item => {
+
+
+            if (item.sales_status === "Hold") {
+
+                purchaseListHtml += `<li class="item">
+                                    <a href="${full_website_address}/sales/pos/?edit=${item.id}" class="product-title">
+                                        ${item.date} (${item.ref})
+                                        <span style="font-size: 12px;" class="label label-success pull-right">${to_money(item.total)}</span>
+                                        <span class="product-description">
+                                            <span style="font-size: 12px;" class="label label-warning">Hold</span>
+                                            From: ${item.shop}; Status: ${item.pay_status}
+                                        </span>
+                                    </a>
+                                </li>`;
+
+            } else {
+
+                purchaseListHtml += `<li onClick="getPurchaseProductList(${item.id}, '${item.ref}');" class="item">
+                                    <a href="javascript:void(0)" class="product-title">
+                                        ${item.date} (${item.ref})
+                                        <span style="font-size: 12px;" class="label label-success pull-right">${to_money(item.total)}</span>
+                                        <span class="product-description">
+                                            From: ${item.shop}; Status: ${item.pay_status}
+                                        </span>
+                                    </a>
+                                </li>`;
+
+            }
+
+        });
+
+        $("#showPurchaseList ul").html(purchaseListHtml);
+
+    });
+
+});
+
+/** Load purchase list on search */
+$(document).on("keydown", ".searchInvoiceInPos", function (event) {
+
+
+    // When Pressed enter show the search result
+    if (event.key === "Enter") {
+
+        // Change the mouse icon to wait
+        $("body").toggleClass("wait");
+
+        var search = encodeURIComponent($(this).val());
+
+        BMS.fn.get(`customerPurchaseList&cid=${$("#customersId").val()}&s=${search}`, purchaseList => {
+
+            if (purchaseList == "") {
+                /**
+                 * Change the mouse icon to auto
+                 */
+                $("body").toggleClass("wait");
+
+                $("#showPurchaseList ul").html('<li class="alert alert-danger">Sorry! No data found.</li>');
+
+                return
+            }
+
+            var purchaseListHtml = "";
+            purchaseList.forEach(item => {
+
+
+                if (item.sales_status === "Hold") {
+
+                    purchaseListHtml += `<li class="item">
+                                            <a href="${full_website_address}/sales/pos/?edit=${item.id}" class="product-title">
+                                                ${item.date} (${item.ref})
+                                                <span style="font-size: 12px;" class="label label-success pull-right">${to_money(item.total)}</span>
+                                                <span class="product-description">
+                                                    <span style="font-size: 12px;" class="label label-warning">Hold</span>
+                                                    From: ${item.shop}; Status: ${item.pay_status}
+                                                </span>
+                                            </a>
+                                        </li>`;
+
+                } else {
+
+                    purchaseListHtml += `<li onClick="getPurchaseProductList(${item.id}, '${item.ref}');" class="item">
+                                            <a href="javascript:void(0)" class="product-title">
+                                                ${item.date} (${item.ref})
+                                                <span style="font-size: 12px;" class="label label-success pull-right">${to_money(item.total)}</span>
+                                                <span class="product-description">
+                                                    From: ${item.shop}; Status: ${item.pay_status}
+                                                </span>
+                                            </a>
+                                        </li>`;
+
+                }
+
+            });
+
+            $("#showPurchaseList ul").html(purchaseListHtml);
+
+            /**
+             * Change the mouse icon to auto
+             */
+            $("body").toggleClass("wait");
+
+        });
+
+    }
+
+});
+
+// Quick Cash
+$(document).on("click", ".quick-cash", function () {
+    var quickCash = Number($(this).html());
+
+    //Insert amount into amount field
+    $(".posSalePaymentAmount").val(parseFloat(quickCash).toFixed(2));
+    // Calculation Again
+    BMS.POS.grandTotal();
+
+});
+
+// update product item details while close the modal
+$(document).on("hide.bs.modal", "#productSaleDetails", function () {
+
+    // Selector
+    var rowId = $("#productSaleDetails .rowId").val();
+    var productPrice = $("#productSaleDetails #productSaleItemPrice").val();
+    var productDiscount = $("#productSaleDetails #productSaleItemDiscount").val();
+    var productPacket = $("#productSaleDetails #productSaleItemPacket").val();
+    var productDetails = $("#productSaleDetails #productSaleItemDetails").val();
+
+    var product_row = $("tr#" + rowId);
+
+    // Display Product Details
+    product_row.find(".netSalesPrice").val(productPrice);
+
+    var amountAfterDiscount = BMS.FUNCTIONS.calculateDiscount(productPrice, productDiscount);
+    var displayProductPrice = "";
+    if (Number(amountAfterDiscount) === Number(productPrice)) {
+        var displayProductPrice = parseFloat(productPrice).toFixed(2);
+    } else {
+        var displayProductPrice = "<span>" + amountAfterDiscount + "</span><span><del><small>" + parseFloat(productPrice).toFixed(2) + "</small></del></span>";
+    }
+
+
+    product_row.find(".displayProductPrice").html(displayProductPrice);
+
+    product_row.find(".productDiscount").val(productDiscount);
+    product_row.find(".productItemDetails").val(productDetails);
+    product_row.find(".productPacket").val(productPacket);
+
+    // Display the subtotal
+    product_row.find(".subtotalCol").html(amountAfterDiscount * product_row.find(".productQnt").val());
+
+    // Calculation Again
+    BMS.POS.grandTotal();
+
+});
+
+// Scroll to the current product selectiion
+$(document).on('focus', '.productQnt', function () {
+
+    //$(this)[0].scrollIntoView({behavior: "smooth", block: "end", inline: "nearest"});
+
+    $(this)[0].scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
+
+});
+
+/* Display the account if return money is checked. */
+$(document).on("change", "#ReturnMoney", function () {
+
+    if ($("#ReturnMoney").is(':checked')) {
+        $(".returnAmountAccountsDiv").show();
+    } else {
+        $(".returnAmountAccountsDiv").hide();
+    }
+
+});
+
+/**
+ * Ledgers Form submit
+ */
+$(document).on("submit", "#accountsLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=ledgers&page=accountsLedger&account_id=" + $("#accountSelection").val() + "&dateRange=" + $("#accountsLedgerDateRange").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the employee data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+    /* Accounts info */
+    $.post(
+        full_website_address + "/info/?module=data&page=getAccountsInfo",
+        {
+            accountsId: $("#accountSelection").val()
+        },
+
+        function (data, status) {
+
+            /* Parse Json Data */
+            var accounts = JSON.parse(data);
+
+            $("#accountsName").html(accounts.name);
+            $("#accountsBalance").html(tsd(accounts.balance));
+            $("#accountsLedgerDates").html($("#accountsLedgerDateRange").val());
+
+        }
+    );
+
+});
+
+$(document).on("submit", "#employeeLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=ledgers&page=employeeLedger&emp_id=" + $("#employeeSelection").val() + "&dateRange=" + $("#employeeLedgerDateRange").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the employee data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+    /* Accounts info */
+    $.post(
+        full_website_address + "/info/?module=data&page=getEmpSalaryData",
+        {
+            empId: $("#employeeSelection").val()
+        },
+
+        function (data, status) {
+
+            /* Parse Json Data */
+            var salaryData = JSON.parse(data);
+
+            /* Calculate total */
+            var total = Number(salaryData["emp_payable_salary"]) + Number(salaryData["emp_payable_overtime"]) + Number(salaryData["emp_payable_bonus"]);
+
+            /* Display Details in table */
+            $("#salaryInfo > tbody > tr > td:nth-child(1)").html(tsd(salaryData["emp_payable_salary"]));
+            $("#salaryInfo > tbody > tr > td:nth-child(2)").html(tsd(salaryData["emp_payable_overtime"]));
+            $("#salaryInfo > tbody > tr > td:nth-child(3)").html(tsd(salaryData["emp_payable_bonus"]));
+            $("#salaryInfo > tbody > tr > td:nth-child(4)").html(tsd(total));
+
+            $("#employeeName").html(salaryData.emp_firstname + ' ' + salaryData.emp_lastname);
+            $("#accountsLedgerDates").html($("#employeeLedgerDateRange").val());
+
+        }
+    );
+
+});
+
+$(document).on("submit", "#journalLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=ledgers&page=journalLedger&journal_id=" + $("#journalSelection").val() + "&dateRange=" + $("#journalLedgerDateRange").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the journal data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+});
+
+$(document).on("submit", "#customerLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=ledgers&page=customerLedger&customer_id=" + $("#customerSelection").val() + "&dateRange=" + $("#customerLedgerDateRange").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the customer data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+});
+
+$(document).on("submit", "#companyLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=ledgers&page=companyLedger&company_id=" + $("#companySelection").val() + "&dateRange=" + $("#companyLedgerDateRange").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the company data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+});
+
+$(document).on("submit", "#advancePaymentLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=ledgers&page=advancePaymentLedger&emp_id=" + $("#employeeSelection").val() + "&dateRange=" + $("#advancePaymentLedgerDateRange").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the employee data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+});
+
+
+
+/**
+ * Ledgers Form submit for product ledgher
+ */
+$(document).on("submit", "#productLedgerForm", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=reports&page=productLedger&pid=" + $("#productSelection").val() + "&wid=" + $("#warehouseSelection").val();
+
+    /* Call tatable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the Product data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+
+});
+
+
+
+// Customer Statement
+$(document).on("submit", "#customerStatementReport", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=reports&page=customerStatement&cid=" + $("#customerSelection").val() + "&dateRange=" + $("#customerStatementDateRange").val();
+
+    /* Call datable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the customer data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+    $.post(
+        full_website_address + "/info/?module=data&page=getCustomerStatementInfo",
+        {
+            customerId: $("#customerSelection").val(),
+            dateRange: $("#customerStatementDateRange").val(),
+        },
+
+        function (data, status) {
+
+            /* Parse Json Data */
+            var paymentsData = JSON.parse(data);
+
+            var netPurchased = Number(paymentsData.net_purchased) - (Number(paymentsData.total_product_returns) + Number(paymentsData.total_purchased_discount));
+            var totalPaid = Number(paymentsData.advance_payments_amount) + Number(paymentsData.received_payments_amount) + Number(paymentsData.sales_payments_amount);
+
+            var balanceDue = (totalPaid + Number(paymentsData.previous_balance) + Number(paymentsData.total_given_bonus) + Number(paymentsData.special_discounts_amount)) -
+                (netPurchased + Number(paymentsData.total_shipping) + Number(paymentsData.payments_return_amount));
+
+
+            /* Display the payment and sale data */
+            $("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html(tsd(paymentsData.net_purchased));
+            $("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(tsd(paymentsData.total_purchased_discount));
+            $("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(tsd(paymentsData.total_shipping));
+            $("#paymentInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(tsd(paymentsData.total_product_returns));
+            $("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(tsd(netPurchased));
+
+            $("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(4)").html(tsd(paymentsData.sales_payments_amount));
+            $("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(4)").html(tsd(paymentsData.received_payments_amount));
+            $("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(4)").html(tsd(paymentsData.advance_payments_amount));
+            $("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(4)").html(tsd(totalPaid));
+
+            $("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(6)").html(tsd(paymentsData.previous_balance));
+            $("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(6)").html(tsd(paymentsData.total_given_bonus));
+            $("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(6)").html(tsd(paymentsData.special_discounts_amount));
+            $("#paymentInfo > tbody > tr:nth-child(4) > td:nth-child(6)").html(tsd(paymentsData.payments_return_amount));
+            $("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(6)").html(tsd(balanceDue));
+
+
+            $("#customerName").html(paymentsData.customer_name);
+            $("#customerAddress").html(paymentsData.customer_address + ', ' + paymentsData.district_name);
+            $("#customerStatementDates").html($("#customerStatementDateRange").val());
+        }
+    );
+
+});
+
+
+
+// Customer Statement
+$(document).on("submit", "#locationWiseSaleReort", function (event) {
+    event.preventDefault();
+
+    /* Column Defference target column of data table */
+    var DataTableAjaxPostUrl = full_website_address + "/xhr/?module=reports&page=locationWiseSalesReport&pid=" + $("#selectProductForLocationReport").val() + "&location=" + $("#selectLocation").val();
+
+    /* Call datable */
+    var getDTable = $('#dataTableWithAjaxExtend').DataTable();
+
+    /* Adjust the column size. This function might be not required. Will check latter */
+    //getDTable.columns.adjust().draw();
+
+    /* Refresh the customer data */
+    getDTable.ajax.url(DataTableAjaxPostUrl).load();
+
+
+});
+
+
+// New Salary Payment
+$(document).on("change", "#paymentEmployee, #dontAdujctAdvance, .paymentsType", function () {
+
+    var that = $(this);
+
+    $.post(
+        "<?php echo full_website_address(); ?>/info/?module=data&page=getEmpSalaryData",
+        {
+            empId: $("#paymentEmployee").val()
+        },
+
+        function (data, status) {
+
+            /* if dont need to adjust advance in this month */
+            var isDontAdjust = $("#dontAdjustAdvance").is(":checked");
+
+            /* Parse Json Data */
+            var salaryData = JSON.parse(data);
+
+            /* Calculate total */
+            var total = Number(salaryData["emp_payable_salary"]) + Number(salaryData["emp_payable_overtime"]) + Number(salaryData["emp_payable_bonus"]);
+
+            var loanDetails = "Last taken loan: " + tsd(salaryData['loan_amount']) + "; Paid: " + tsd(salaryData['loan_installment_paid_amount']) + "; Monthly:" + tsd(salaryData['loan_installment_amount']);
+
+            /* Display Details in table */
+            $("#salaryInfo > tbody > tr > td:nth-child(1)").html(tsd(salaryData["emp_payable_salary"]));
+            $("#salaryInfo > tbody > tr > td:nth-child(2)").html(tsd(salaryData["emp_payable_overtime"]));
+            $("#salaryInfo > tbody > tr > td:nth-child(3)").html(tsd(salaryData["emp_payable_bonus"]));
+            $("#salaryInfo > tbody > tr > td:nth-child(4)").html(tsd(total));
+            $("#salaryInfo > tfoot > tr:nth-child(1) > th").html(loanDetails);
+
+
+            /* Change Amount by payment type */
+            var paymentTypes = $(that).val();
+
+            if (paymentTypes == "Salary") {
+                $(that).closest(".row").find(".paymentAmount").val(Number(salaryData["emp_payable_salary"]).toFixed(0))
+            } else if (paymentTypes == "Overtime") {
+                $(that).closest(".row").find(".paymentAmount").val(Number(salaryData["emp_payable_overtime"]).toFixed(0))
+            } else if (paymentTypes == "Bonus") {
+                $(that).closest(".row").find(".paymentAmount").val(Number(salaryData["emp_payable_bonus"]).toFixed(0))
+            } else if (paymentTypes == "Advance Salary") {
+                $(that).closest(".row").find(".paymentAmount").val(0)
+            } else {
+                $(".paymentAmount").val(Number(salaryData["emp_payable_salary"]).toFixed(0));
+            }
+
+        }
+
+    );
+});
+
+$(document).on("change", "#paymentMethods", function () {
+    if ($("#paymentMethods").val() == "Cheque") {
+        $("#hiddenItem").css("display", "block");
+    } else {
+        $("#hiddenItem").css("display", "none");
+    }
+});
+
+/* Add Payment salary row
+ The first is used to remove envent listener. */
+$(document).off("click", "#addSalaryPaymentRow");
+$(document).on("click", "#addSalaryPaymentRow", function () {
+
+    var html = '<div class="row"> \
+        <div class="col-md-4"> \
+            <div class="form-group required"> \
+                <select name="paymentsType[]" class="paymentsType form-control" style="width: 100%;" required> \
+                    <option value="Salary">Salary</option> \
+                    <option value="Overtime">Overtime</option> \
+                    <option value="Bonus">Bonus</option> \
+                </select> \
+            </div> \
+        </div> \
+        <div class="col-md-3"> \
+            <div class="form-group required"> \
+                <input type="number" name="paymentAmount[]" class="paymentAmount form-control" required> \
+            </div> \
+        </div> \
+        <div class="col-md-4"> \
+            <div class="form-group"> \
+                <input type="text" name="salaryPaymentNote[]" class="salaryPaymentNote form-control"> \
+            </div> \
+        </div> \
+        <div class="col-xs-1"> \
+            <i style="cursor: pointer; padding: 10px 5px 0 0;" class="fa fa-trash-o removeSalaryPaymentRow"></i> \
+        </div> \
+    </div>';
+
+    $("#salaryPaymentRow").append(html);
+
+});
+
+/* Remove Salary payments row */
+$(document).on("click", ".removeSalaryPaymentRow", function () {
+    $(this).closest(".row").css("background-color", "whitesmoke").hide("slow", function () {
+        $(this).closest(".row").remove();
+    });
+});
+
+// Date time and range picker classess
+$(document).on("focusin", ".datePicker", function () {
+
+    BMS.FUNCTIONS.datePicker();
+
+});
+
+$(document).on("focusin", ".dateTimePicker", function () {
+
+    BMS.FUNCTIONS.datePicker({
+        selector: this,
+        format: "YYYY-MM-DD HH:mm",
+        timePicker: true
+    });
+
+});
+
+$(document).on("focusin", ".dateRangePicker", function () {
+
+    BMS.FUNCTIONS.dateRangePicker();
+
+});
+
+$(document).on("focusin", ".dateTimeRangePicker", function () {
+
+    BMS.FUNCTIONS.dateRangePicker({
+        selector: this,
+        format: "YYYY-MM-DD HH:mm",
+        timePicker: true
+    });
+
+});
+
+
+$(document).on("focusin", ".dateRangePickerPreDefined", function () {
+
+    BMS.FUNCTIONS.dateRangePickerPreDefined();
+
+});
+
+
+$(document).on("focusin", ".dateTimeRangePickerPreDefined", function () {
+
+    BMS.FUNCTIONS.dateRangePickerPreDefined({
+        selector: this,
+        format: "YYYY-MM-DD HH:mm",
+        timePicker: true
+    });
+
+});
+
+
+$(document).on("focusin", ".multiDatePicker", function () {
+
+    BMS.FUNCTIONS.multiDatePicker();
+
+});
+
+/* Function to preview image */
+$(document).on("change", ".imageToUpload", function () {
+
+    /** Select the message container */
+    var msgContainer = $(this).closest(".imageContainer").find(".photoErrorMessage");
+
+    /** Clear previous msg */
+    $(msgContainer).empty();
+
+    /** Get the selecte files */
+    var file = this.files[0];
+    var fileType = file.type;
+    var imagesize = file.size;
+
+    /** Declare the valid image extension */
+    var validImage = ["image/jpeg", "image/png", "image/jpg"];
+    var maxUploadSize = "<?php echo $_SETTINGS['MAX_UPLOAD_SIZE'] * 1024 * 1024; ?>";
+
+    /** If an invalid file upload the show an error msg  */
+    if (validImage.includes(fileType) === false) {
+
+        /**
+         * If there is no msg container then alert with pop up msg
+         */
+        if ($(msgContainer).length < 1) {
+
+            BMS.fn.alertError("<?php echo __('Please select a valid image file'); ?>");
+
+            /** 
+             * Remove the selected input
+             */
+            this.value = this.defaultValue;
+
+        } else {
+
+            $(msgContainer).html("<div style='margin-bottom: 0;' class='alert alert-danger'><?php echo __('Please select a valid image file'); ?></div>");
+
+        }
+
+        return false;
+
+
+
+    } if (maxUploadSize < imagesize) {
+
+        /**
+         * If there is no msg container then alert with pop up msg
+         */
+        if ($(msgContainer).length < 1) {
+
+            BMS.fn.alertError("<?php echo __('Max file size %d MB', $_SETTINGS['MAX_UPLOAD_SIZE']); ?>");
+
+            /** 
+             * Remove the selected input
+             */
+            this.value = this.defaultValue;
+
+        } else {
+
+            $(msgContainer).html("<div class='alert alert-danger'><?php echo __('Max file size %d MB', $_SETTINGS['MAX_UPLOAD_SIZE']); ?></div>");
+
+        }
+
+        return false;
+
+
+    } else {
+
+        var imageName = $(this).val().replace(/\\/g, '/').replace(/.*\//, '');
+
+        $(this).closest(".imageContainer").find(".imageNameShow").val(imageName);
+
+        var that = $(this);
+
+        var reader = new FileReader();
+        reader.onload = function (e) {
+            $(that).css("color", "green");
+            $(that).closest(".imageContainer").find('.image_preview').css("display", "block");
+            $(that).closest(".imageContainer").find('.previewing').attr('src', e.target.result);
+            //$(that).closest(".imageContainer").find('.previewing').attr('width', 'auto');
+            //$(that).closest(".imageContainer").find('.previewing').attr('height', '100%');
+        };
+        reader.readAsDataURL(this.files[0]);
+
+    }
+
+});
+
+
+
+/** Multiple Payment Rows */
+$(document).on("click", "#addPosSalePaymentRow", function () {
+
+    var paymentItemRow = `<div style="margin: 0;" class="row">
+        <div class="form-group pull-right col-md-3 adjustFormGroupPadding">
+            <label>Amount</label>
+            <span style="cursor:pointer; padding: 0 4px;" class="pull-right removePosPaymentItem" ><i class="fa fa-times"></i></span>
+            <input type="number" onclick="this.select();" name="posSalePaymentAmount[]" class="form-control posSalePaymentAmount" step="any">
+        </div>
+        <div class="form-group pull-right col-md-3 adjustFormGroupPadding">
+            <label>Reference/Info</label>
+            <input type="text" name="posSalePaymentReference[]" class="form-control">
+        </div>
+        <div style="display: none;" class="posSalePaymentBankAccount form-group pull-right col-md-3 adjustFormGroupPadding">
+            <label>Bank Account</label>
+            <select name="posSalePaymentBankAccount[]" class="form-control pull-left select2Ajax" 
+                select2-ajax-url="<?php echo full_website_address() ?>/info/?module=select2&page=accountList" style="width: 100%;">
+                <option value=""><?php echo __("Select Account"); ?>....</option>
+            </select>
+        </div>
+        <div class="form-group pull-right col-md-3 adjustFormGroupPadding">
+            <label>Payment Method</label>
+            <select name="posSalePaymentMethod[]" class="posSalePaymentMethod form-control">
+                <option value="Cash"><?php echo __("Cash"); ?></option>
+                <option value="Bank Transfer"><?php echo __("Bank Transfer"); ?></option>
+                <option value="Cheque"><?php echo __("Cheque"); ?></option>
+                <option value="Card"><?php echo __("Card"); ?></option>
+                <option value="Others"><?php echo __("Others"); ?></option>
+            </select>
+        </div>
+    </div>`;
+
+    $(".paymentMethodBox").append(paymentItemRow);
+
+});
+
+/** Remove POS payment items */
+$(document).on("click", ".removePosPaymentItem", function () {
+
+    $(this).closest(".row").remove();
+
+    // Calculate again after remove payment item
+    BMS.POS.grandTotal();
+
+});
+
+$(document).on("change", ".posSalePaymentMethod", function () {
+
+    if ($(this).val() === "Cash") {
+
+        $(this).closest(".row").find(".posSalePaymentBankAccount").hide();
+
+    } else {
+
+        $(this).closest(".row").find(".posSalePaymentBankAccount").show();
+
+    }
+
+});
+
+/**
+ * Automatic form submition by jquery ajax
+ */
+$(document).on("submit", "#modalForm, #popUpForm, #jqFormAdd, #jqFormUpdate", function (event) {
+
+    event.preventDefault();   // Prevent Loading
+
+    ajaxFormSubmit(this);
+
+});
+
+// for inline form only
+$(document).on("submit", "#inlineForm", function (event) {
+
+    event.preventDefault();   // Prevent Loading
+
+    // clear the form by loading the current page again
+    ajaxFormSubmit(this, true);
+
+});
+
+// Delete Entry
+$(document).on('click', '.deleteEntry', function (event) {
+
+    // Prevent default submit
+    event.preventDefault();
+
+    var deletePostUrl = $(this).attr("href");
+    var datatoDelete = $(this).attr("data-to-be-deleted");
+    var removeParent = $(this).attr("removeParent");
+
+    var that = this;
+
+    Swal.fire({
+
+        title: 'Are you sure to delete this entry?',
+        icon: 'warning',
+        didOpen: function () {
+            BMS.fn.play("warning");
+        },
+        showCancelButton: true,
+        confirmButtonColor: '#3085d6',
+        cancelButtonColor: '#d33',
+        confirmButtonText: 'Yes, delete it!',
+
+    }).then((result) => {
+
+        if (result.value) {
+
+            $.post(deletePostUrl,
+                {
+                    datatoDelete: datatoDelete
+                },
+
+                function (data, status) {
+
+                    // Check If the return data is JSON
+                    if (isJson(data)) {
+
+                        // Parse json store in parsedJson
+                        var parsedJson = JSON.parse(data);
+
+                        for (var key in parsedJson) {
+
+                            sweetAlert[key] = parsedJson[key];
+
+                        }
+
+                    }
+
+                    // Show the success or error msg.
+                    Swal.fire({
+                        toast: sweetAlert.toast,
+                        position: sweetAlert.position,
+                        timer: sweetAlert.timer,
+                        showConfirmButton: sweetAlert.showConfirmButton,
+                        showCloseButton: sweetAlert.showCloseButton,
+                        icon: sweetAlert.icon,
+                        title: sweetAlert.title,
+                        text: sweetAlert.text,
+                        onClose: $("body").css('padding', '0px') // This is because, while close the sweet alert a 15px padding-right is keep.
+                    });
+
+
+                    // Remove the deleted elements
+                    
+
+                    if(removeParent !== undefined) {
+
+                        $(that).closest(removeParent).hide('fast');
+                    }
+
+
+                    // Reloade the Datatable
+                    $('#dataTableWithAjax').DataTable().ajax.reload(null, false);
+                    $('#dataTableWithAjaxExtend').DataTable().ajax.reload(null, false);
+
+                }
+            );
+
+        }
+
+    })
+
+});
+// End Delete Entry
+
+// Update Entry
+$(document).on('click', '.updateEntry', function (event) {
+
+    // Prevent default submit
+    event.preventDefault();
+
+    var updatePostUrl = $(this).attr("href");
+    var datatoUpdate = $(this).attr("data-to-be-updated");
+    var that = this;
+
+    $(this).css("color", "black");
+    $(this).find("i.fa").addClass("fa-spin");
+
+    $.post(updatePostUrl,
+        {
+            datatoUpdate: datatoUpdate
+        },
+
+        function (data, status) {
+
+            // Check If the return data is JSON
+            if (isJson(data)) {
+
+                // Parse json store in parsedJson
+                var parsedJson = JSON.parse(data);
+
+                for (var key in parsedJson) {
+
+                    sweetAlert[key] = parsedJson[key];
+
+                }
+
+            }
+
+            // Show the success or error msg.
+            Swal.fire({
+                toast: sweetAlert.toast,
+                position: sweetAlert.position,
+                timer: sweetAlert.timer,
+                showConfirmButton: sweetAlert.showConfirmButton,
+                showCloseButton: sweetAlert.showCloseButton,
+                icon: sweetAlert.icon,
+                title: sweetAlert.title,
+                text: sweetAlert.text,
+                onClose: $("body").css('padding', '0px') // This is because, while close the sweet alert a 15px padding-right is keep.
+            })
+
+
+            // Reloade the Datatable
+            $('#dataTableWithAjax').DataTable().ajax.reload(null, false);
+            $('#dataTableWithAjaxExtend').DataTable().ajax.reload(null, false);
+
+        }
+    );
+
+});
+// End Update Entry
+
+// Inline Edit
+$(document).on('dblclick', 'iledit', function (event) {
+
+    // Prevent default submit
+    event.preventDefault();
+
+    var $this = $(this);
+    var $thistd = $this.closest("td");
+    var $header = $this.closest('table').find('th').eq($thistd.index());
+    var pKey = $this.closest('tr').find('pkey').text(); // pkey = primary key where to update
+
+    var type = $header.attr("type");
+    var dataSource = $header.attr("data-source");
+    var dataOptions = $header.attr("data-options");
+    var whereToUpdate = $header.attr("where-to-update");
+
+    var dataVal = $this.attr("data-val");
+    var dataText = $this.text();
+    var elemWidth = $thistd.width();
+
+    // Show the editor
+    if (type === "select2") {
+        $thistd.html(`
+            <select class="form-control select2InlineEdit" select2-ajax-url="${dataSource}" style="width: ${elemWidth}px;" required>
+                <option value=""><?php echo __("Select Entry"); ?>....</option>
+            </select>
+        `);
+
+        // Initialize select2 and open it
+        var $select2InlineEdit = $thistd.find(".select2InlineEdit");
+        BMS.fn.select2($select2InlineEdit, dataVal, dataText);
+        $select2InlineEdit.select2("open");
+
+    } else if (type === "select") {
+
+        dataOptions = dataOptions.split(",");
+        dataOptions.forEach(function (item) {
+
+            var selected = (dataText == item) ? "selected" : "";
+            dataOptions += `<option ${selected} value='${item}'>${item}</option>`;
+
+        });
+
+        $thistd.html(`
+            <select class="form-control" style="width: ${elemWidth}px; padding: 6px 6px;" required>
+                ${dataOptions}
+            </select>
+        `);
+
+        // Initialize select2 and open it
+        var $select2InlineEdit = $thistd.find("select");
+        $select2InlineEdit.select2()
+        $select2InlineEdit.select2("open");
+
+    } else {
+
+        $thistd.html(`
+            <input type="text" value="${dataText}" style="width: ${elemWidth}px;" class="form-control">
+        `);
+
+        // If date picker type then initital datepicker
+        if (type === "datePicker") {
+            $thistd.find("input").addClass("datePicker");
+            $thistd.find(".datePicker").focus();
+        }
+
+    }
+
+    
+
+    // Change and save the value
+    $thistd.find('input, select, textarea').on('enter blur clear apply.daterangepicker, select2:close', function () {
+
+
+        var oldData = ['select2', 'select'].includes(type) ? dataVal : dataText;
+        var newData = $(this).val();
+        var that = $(this);
+
+        // If old data and new data is not same
+        if (newData !== oldData) {
+
+            $.post(whereToUpdate,
+                {
+                    pkey: pKey,
+                    newData: newData
+                },
+
+                function (data, status) {
+
+                    var data = JSON.parse(data);
+
+                    if (data["error"] !== undefined && data["error"] === "true") {
+
+                        BMS.fn.alertError(data["msg"]);
+
+                    } else {
+
+                        // Show the success message
+                        BMS.fn.alertSuccess("The data has been successfully updated.");
+
+                        // Display changed items
+                        if (type === 'select2' || type === 'select') {
+
+                            $thistd.html(`<iledit data-val='` + $(that).val() + `'>` + $("option:selected", that).text() + `</iledit>`);
+
+                        } else {
+
+                            $thistd.html(`<iledit>` + $(that).val() + `</iledit>`);
+
+                        }
+
+                    }
+
+                }
+            );
+
+        } else {
+
+
+            // Display data items if not changed
+            if (type === 'select2' || type === 'select') {
+
+                $thistd.html(`<iledit data-val='` + $(that).val() + `'>` + $("option:selected", that).text() + `</iledit>`);
+
+            } else {
+
+                $thistd.html(`<iledit>` + $(that).val() + `</iledit>`);
+
+            }
+
+        }
+
+    });
+
+});
+// Inline Edit
+
+
+// Remove jquery modal hidden data
+$(document).on('hidden.bs.modal', function (e) {
+    var target = $(e.target);
+    target.removeData('bs.modal')
+        .find(".modal-ajax").html('');
+});
+// End Remove jquery modal hidden data
+
+
+
+// Select2 Ajax
+$(document).ready(function () {
+
+    // focus is used while users press TAB button to come this field
+    $(document).on('mouseenter focus', '.select2Ajax', function () {
+
+        BMS.fn.select2(this);
+
+    });
+
+});
+// End Select2 Ajax
+
+// ToolTip
+$(document).ready(function () {
+    $('body').tooltip({
+        selector: '[data-toggle="tooltip"]'
+    });
+});
+// End ToolTip
+
+/********************************************************************
+* fix menu overflow under the responsive table 
+* hide menu on click... (This is a must because when we open a menu )
+*
+ *******************************************************************/
+$(document).click(function (event) {
+    //hide all our dropdowns
+    $('.dropdown-menu[data-parent]').hide();
+
+});
+$(document).on('click', '.col-sm-12 [data-toggle="dropdown"]', function () {
+    // if the button is inside a modal
+    if ($('body').hasClass('modal-open')) {
+        throw new Error("This solution is not working inside a responsive table inside a modal, you need to find out a way to calculate the modal Z-index and add it to the element")
+        return true;
+    }
+
+    $buttonGroup = $(this).parent();
+    if (!$buttonGroup.attr('data-attachedUl')) {
+        var ts = +new Date;
+        $ul = $(this).siblings('ul');
+        $ul.attr('data-parent', ts);
+        $buttonGroup.attr('data-attachedUl', ts);
+        $(window).resize(function () {
+            $ul.css('display', 'none').data('top');
+        });
+    } else {
+        $ul = $('[data-parent=' + $buttonGroup.attr('data-attachedUl') + ']');
+    }
+    if (!$buttonGroup.hasClass('open')) {
+        $ul.css('display', 'none');
+        return;
+    }
+    dropDownFixPosition($(this).parent(), $ul);
+    function dropDownFixPosition(button, dropdown) {
+        var dropDownTop = button.offset().top + button.outerHeight();
+        dropdown.css('top', dropDownTop + "px");
+        dropdown.css('left', button.offset().left - 100 + "px");
+        dropdown.css('position', "absolute");
+
+        dropdown.css('width', dropdown.width());
+        dropdown.css('heigt', dropdown.height());
+        dropdown.css('display', 'block');
+        dropdown.appendTo('.dynamic-container');
+    }
+});
+
+
+// If there a restricted class exists then prevent the default behaviour
+// ******************** Must Be awared **************
+// ********* The following two snippet must be bellow on other javascript
+$(document).on('click', '.restricted', function () {
+
+    Swal.fire({
+        title: 'Sorry!',
+        text: 'You have no permission to perform this action',
+        icon: 'error'
+    });
+
+})
+
+$('.modal').on('show.bs.modal', function (e) {
+
+    // If restricted class exists then disable to open the modal
+    if ($.inArray("restricted", e.target.classList) !== -1) {
+        return e.preventDefault();
+    }
+
+});
+
+/** Eneable auto focus in bs modal */
+$('.modal').on('shown.bs.modal', function () {
+    $(this).find('[autofocus]').focus();
+});
+// *********************
+//Disable mouse While event in number input
+// disable mousewheel on a input number field when in focus
+// (to prevent Chromium browsers change the value when scrolling)
+$('form').on('focus', 'input[type=number]', function (e) {
+    $(this).on('wheel.disableScroll', function (e) {
+        e.preventDefault()
+    })
+});
+$('form').on('blur', 'input[type=number]', function (e) {
+    $(this).off('wheel.disableScroll')
+});
+
+/* Sweet Alert Default configuration */
+var sweetAlert = [];
+sweetAlert.title = 'The command has been executed successfully.';
+sweetAlert.text = '';
+sweetAlert.icon = 'success';
+sweetAlert.toast = true;
+sweetAlert.position = 'top';
+sweetAlert.timer = 5000;
+sweetAlert.showConfirmButton = false;
+sweetAlert.showCloseButton = false;
+
+/* iCheck for checkbox and radio inputs */
+$('input[type="checkbox"].square, input[type="radio"].square').iCheck({
+    checkboxClass: 'icheckbox_square-blue',
+    radioClass: 'iradio_square-blue'
+});
+
+/* Global Crsf */
+$.ajaxSetup({
+    beforeSend: function (xhr) {
+        xhr.setRequestHeader("X-CSRF-TOKEN", xCsrfToken);
+    }
+});
+
+// get page title json 
+var getPageTitle = JSON.parse(`<?php echo json_encode($_SETTINGS["PAGE_TITLE"]); ?>`);
+
+// This will work on browser back and forward button
+$(window).bind("popstate", function (event) {
+
+    if (typeof session !== 'undefined') {
+        // terminate the call session when change the page
+        session.terminate();
+        
+        // Stop the Phone
+        phone.stop();
+    }
+
+    event.preventDefault();
+
+    $.get(location.href + "?contentOnly=true", function (data, status) {
+
+        // clear the value
+        defaultiDisplayLength = '';
+
+        // remove the all classes that are curently active
+        $("li").removeClass("active");
+
+        // Generate the page slug
+        var pageSlug = location.href;
+
+        // Generate the page title
+        var pageTitle = "Not Found!";
+        if (getPageTitle[pageSlug] !== undefined) {
+            pageTitle = getPageTitle[pageSlug];
+        }
+
+        // Set the page title
+        window.document.title = pageTitle;
+
+        $(".dynamic-container").html(data);
+        jQuery.get(full_website_address + '/assets/js/initiator.min.js');
+
+    });
+
+});
+
+
+/** Creating custom shortcuts
+ * F2 = Open select2 product search
+ */
+$(document).on("keydown", function (event) {
+
+    if (event.key === "F2") {
+        if (!$('#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct').hasClass("select2-hidden-accessible")) {
+            // inititalize the select2 if not initilized
+            BMS.fn.select2("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct");
+
+        }
+
+        $("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").select2("open");
+
+    }
+
+    if (event.key === "F3") {
+
+        event.preventDefault();
+
+        $("#orderDiscount").modal("show");
+
+    }
+
+});
+
+/** Toogle not filter button */
+$(document).on("click", ".toggleNotButton", function () {
+
+    var notThisValue = $(this).closest("span").find(".notThisValueFilter");
+
+    if ($(notThisValue).val() === "=") {
+
+        $(notThisValue).val("!=");
+        $(this).text("|");
+
+    } else {
+
+        $(this).text("");
+        $(notThisValue).val("=");
+
+    }
+
+});
+
+
+$(document).on("click", ".stopPropagation", function (e) {
+
+    e.stopPropagation();
+
+});
+
+
+/**
+ * Toggle the product vairation based on product type
+ * 
+ * Effected Pages:
+ * 1. module/products/new-product
+ * 2. module/products/edit-product
+ */
+$(document).on("change", "#productType", function () {
+
+    // Hide all container
+    $("#productVariationSection").hide();
+    $("#bundleProductsContainer").hide();
+
+    // Hide title
+    $(".bundleProduct").hide();
+    $(".groupedProduct").hide();
+
+    var boxTitle = "Bundle Product";
+    // Then show according to selection
+    if (this.value === "Variable") {
+
+        $("#productVariationSection").show();
+
+    } else if ( this.value === "Bundle") {
+
+        $(".bundleProduct").show();
+        $("#bundleProductsContainer").show();
+
+    } else if( this.value === "Grouped" ) {
+
+        $(".groupedProduct").show();
+        $("#bundleProductsContainer").show();
+
+    }
+
+
+});
+
+
+/**
+ * Delete the product variation 
+ * 
+ * Effected Pages:
+ * 1. module/products/edit-product
+ */
+$(document).on("click", ".removeThisVariation", function (e) {
+
+    e.stopPropagation();
+
+    if (confirm("Are sure to remove this variation?")) {
+
+        var product_id = $(this).closest("li").find(".variation_product_id").val();
+
+        $(this).closest("li").hide("fast", function () {
+            $(this).remove();
+        });
+
+        /** If there have any product id, then delete it from database */
+        if(product_id !== undefined) {
+
+            $.ajax({
+                url: full_website_address + `/xhr/?module=products&page=deleteVariationProduct`,
+                type: "post",
+                data: {
+                    product_id: product_id
+                },
+                success: function (data, status) {
+                   //
+                }
+            });
+
+
+        }
+
+    }
+
+});
+
+
+$(document).on("click", "#setVariationPrice", function () {
+
+    setVariationPrice();
+
+});
+
+
+$(window).keydown(function (event) {
+
+    if (event.keyCode == 13 && $("#productVariationPrice").hasClass("in")) {
+        event.preventDefault();
+        setVariationPrice();
+        $("#productVariationPrice").modal("hide");
+        return false;
+    }
+
+});
+
+/* Browse Product */
+$("#browseProduct").on("show.bs.modal", function (e) {
+
+    BMS.PRODUCT.showProduct();
+
+});
+
+/** Disable intital stock while the product expire date yes */
+$(document).on("change", "#productHasExpiryDate", function () {
+
+    if (this.value === "1") {
+        $(".productIntitalStock").prop("disabled", true);
+    } else {
+        $(".productIntitalStock").prop("disabled", false);
+    }
+
+});
+
+let barCcode = "";
+$(document).on('keypress', (e) => {
+
+    // bar code scanner hit enter after complete the scane
+    if (e.key === "Enter" ) {
+
+        var isNotInput = e.target.tagName.toLowerCase() !== 'input';
+        
+        if(barCcode !== "") {
+
+            if(isPosPage && isNotInput) {
+
+                BMS.POS.addProduct(barCcode, true);
+    
+            } else if(isPurchasePage && isNotInput) {
+    
+                BMS.PURCHASE.addProduct(barCcode, true);
+    
+            } else if(isTransferStockPage && isNotInput) {
+
+                BMS.STOCK_TRANSFER.addProduct(barCcode, true);
+
+            } else if(isProductReturnPage && isNotInput) {
+
+                BMS.RETURN.addProduct(barCcode, true);
+
+            } else if (isStockEntryPage && isNotInput) { 
+
+                BMS.STOCK_ENTRY.addProduct(barCcode, true);
+                
+            } else if(isAddProductPage) {
+                // update the product code in product add page
+                $("#productCode").val(barCcode);
+            }
+
+        }
+
+        // Reset the code
+        barCcode = "";
+
+
+    } else {
+        
+        // Apend to barcode
+        barCcode += e.key; 
+
+    }
+
+});
+
+
+// Copy by Class
+
+$(document).on('click', ".copyThis", function(e){
+
+    navigator.clipboard.writeText( $(this).text() );
+
+});
\ No newline at end of file

--- assets/js/events.min.js ---
@@ -1 +1 @@
-$(document).on("change","#productCategoryFilter, #productBrandFilter, #productEditionFilter, #productGenericFilter, #productAuthorFilter",(function(){BMS.PRODUCT.showProduct({category:$("#productCategoryFilter").val(),brand:$("#productBrandFilter").val(),edition:$("#productEditionFilter").val(),generic:$("#productGenericFilter").val(),author:$("#productAuthorFilter").val()})})),$(document).on("change","#customers",(function(){var e=$("#customers").val();$("#customersId").val(e),BMS.fn.get(`getCustomerData&cid=${e}`,(function(e){$("#orderDiscountValue").val(e.discount),$("#packetShippingRate").val(e.shipping_rate)}))})),$(document).on("change","#warehouse",(function(){var e=$("#warehouse").val();$("#warehouseId").val(e),$("#selectPosProduct").attr("select2-ajax-url",`${full_website_address}/info/?module=select2&page=productListForPos&wid=${e}`),BMS.fn.select2("#selectPosProduct")})),$(document).on("change","#stockTransferFromWarehouse, #stockTransferToWarehouse",(function(){var e=$("#stockTransferFromWarehouse").val(),t=$("#stockTransferToWarehouse").val();$("#stockTransferFromWarehouseId").val(e),$("#stockTransferToWarehouseId").val(t)})),$(document).on("change","#scTransferWarehouse",(function(){var e=$("#scTransferWarehouse").val();$("#scTransferWarehouseId").val(e)})),$(document).on("click","#addTariffChargesRow",(function(){BMS.MAIN.addTariffChargesRow("#tariffCharges")})),$(document).on("click",".productButton",(function(){isPosPage?BMS.POS.addProduct(this.value):isPurchasePage?BMS.PURCHASE.addProduct(this.value):isTransferStockPage?BMS.STOCK_TRANSFER.addProduct(this.value):isProductReturnPage?BMS.RETURN.addProduct(this.value):isSpecimenCopyPage?BMS.SPECIMEN_COPY.addProduct(this.value):isScDistributionPage?BMS.SC_DISTRIBUTION.addProduct(this.value):isAddProductPage?BMS.PRODUCT.addProduct(this.value):isStockEntryPage?BMS.STOCK_ENTRY.addProduct(this.value):isSaleOrderPage&&BMS.ORDER.addProduct(this.value)})),$(document).on("change","#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct",(function(){isPosPage?BMS.POS.addProduct(this.value):isPurchasePage?BMS.PURCHASE.addProduct(this.value):isTransferStockPage?BMS.STOCK_TRANSFER.addProduct(this.value):isProductReturnPage?BMS.RETURN.addProduct(this.value):isSpecimenCopyPage?BMS.SPECIMEN_COPY.addProduct(this.value):isScDistributionPage?BMS.SC_DISTRIBUTION.addProduct(this.value):isAddProductPage?BMS.PRODUCT.addProduct(this.value):isStockEntryPage?BMS.STOCK_ENTRY.addProduct(this.value):isSaleOrderPage&&BMS.ORDER.addProduct(this.value),$(this).html("<option value=''>Search Product....</option>")})),$(document).on("click","#addWastageSaleRow",(function(){BMS.WASTAGE_SALE.addWastageSaleItem()})),$(document).on("click",".removeThisProduct, .removeThisItem",(function(){$(this).closest("tr").css("background-color","red").hide("fast",(function(){$(this).closest("tr").remove(),isPosPage?(BMS.POS.grandTotal(),BMS.POS.disableEnableWCSelect()):isPurchasePage?BMS.PURCHASE.grandTotal():isTransferStockPage?(BMS.STOCK_TRANSFER.grandTotal(),BMS.STOCK_TRANSFER.disableEnableWarehouseSelect()):isProductReturnPage?BMS.RETURN.grandTotal():isWastageSalePage?BMS.WASTAGE_SALE.grandTotal():isSpecimenCopyPage?BMS.SPECIMEN_COPY.disableEnableWarehouseSelect():isStockEntryPage?BMS.STOCK_ENTRY.grandTotal():isSaleOrderPage&&(BMS.ORDER.grandTotal(),BMS.POS.disableEnableWCSelect())}))})),$(document).on("click",".removeThisTariffCharges",(function(){$(this).closest(".row").css("background-color","whitesmoke").hide("fast",(function(){$(this).closest(".row").remove(),isPosPage?BMS.POS.grandTotal():isPurchasePage?BMS.PURCHASE.grandTotal():isProductReturnPage?BMS.RETURN.grandTotal():isWastageSalePage?BMS.WASTAGE_SALE.grandTotal():isSaleOrderPage&&BMS.ORDER.grandTotal()}))})),$(document).on("change",".tariffChargesName",(function(){isPosPage?BMS.POS.grandTotal():isPurchasePage?BMS.PURCHASE.grandTotal():isProductReturnPage?BMS.RETURN.grandTotal():isWastageSalePage?BMS.WASTAGE_SALE.grandTotal():isSaleOrderPage&&BMS.ORDER.grandTotal()})),$(document).on("keyup blur",".productQnt",(function(){isPosPage?BMS.POS.productQntCheck(this):isPurchasePage?(BMS.PURCHASE.calculateEachProduct(this),BMS.PURCHASE.grandTotal()):isTransferStockPage?BMS.STOCK_TRANSFER.productQntCheck(this):isProductReturnPage?(BMS.RETURN.grandTotal(),BMS.RETURN.calculateEachProduct(this)):isSpecimenCopyPage?BMS.SPECIMEN_COPY.productQntCheck(this):isStockEntryPage?(BMS.STOCK_ENTRY.calculateEachProduct(this),BMS.STOCK_ENTRY.grandTotal()):isSaleOrderPage&&BMS.ORDER.productQntCheck(this)})),$(document).on("keydown",".productQnt",(function(e){"Enter"===e.key&&($("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").hasClass("select2-hidden-accessible")||BMS.fn.select2("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct"),$("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").select2("open"))})),$(document).on("keydown","#purchaseDiscountValue",(function(e){"Enter"===e.key&&(e.preventDefault(),$("#purchaseDiscount").modal("hide"),$("#finalizePurchase").modal("show"))})),$(document).on("keydown","#shippingCharge",(function(e){"Enter"===e.key&&(e.preventDefault(),$("#adjustAmount").select())})),$(document).on("keydown","#adjustAmount",(function(e){$(this).addClass("disableAdjustAmountAutoChange"),"Enter"===e.key&&(e.preventDefault(),$(".posSalePaymentAmount").first().select(),$(".posSalePaymentAmount").first().addClass("disablePaymentAmountAutoChange"))})),$(document).on("keydown focus",".posSalePaymentAmount",(function(e){var t=$(this).closest(".row").next(".row").find("input.posSalePaymentAmount");$(this).addClass("disablePaymentAmountAutoChange"),1===t.length&&"Enter"===e.key&&(e.preventDefault(),t.addClass("disablePaymentAmountAutoChange"),t.select())})),$(document).on("keydown",".select2-search__field",(function(e){isPosPage&&"select2-selectPosProduct-results"===$(this).attr("aria-controls")&&""===this.value&&$(".productQnt").length>0&&"Enter"===e.key&&($("#selectPosProduct").select2("close"),$("#orderDiscount").modal("show")),isPurchasePage&&"select2-selectProduct-results"===$(this).attr("aria-controls")&&""===this.value&&$(".productQnt").length>0&&"Enter"===e.key&&($("#selectProduct").select2("close"),$("#purchaseDiscount").modal("show"))})),$(document).on("hide.bs.modal","#orderDiscount",(function(){$("#payment").modal("show"),BMS.POS.grandTotal()})),$(document).on("blur keyup",".wastageSaleItemQnt, .wastageSaleItemPrice",(function(){var e=$(this).closest("tr").find(".wastageSaleItemQnt").val(),t=$(this).closest("tr").find(".wastageSaleItemPrice").val();$(this).closest("tr").find(".wastageSaleItemSubtotal").html(parseFloat(e*t).toFixed(2)),BMS.WASTAGE_SALE.grandTotal()})),$(document).on("blur keyup","#wastageSaleDiscount, #wastageSalePaidAmount",(function(){BMS.WASTAGE_SALE.grandTotal()})),$(document).on("blur keyup",".productPurchaseDiscount, .productPurchasePrice",(function(){isPurchasePage?(BMS.PURCHASE.calculateEachProduct(this),BMS.PURCHASE.grandTotal()):isTransferStockPage&&(BMS.STOCK_TRANSFER.calculateEachProduct($(this)),BMS.STOCK_TRANSFER.grandTotal())})),$(document).on("blur keyup",".productReturnDiscount, .productReturnPrice",(function(){BMS.RETURN.calculateEachProduct(this),BMS.RETURN.grandTotal()})),$(document).on("keyup blur","#purchaseDiscount, #purchasePaidAmount, #purchaseShipping",(function(){BMS.PURCHASE.grandTotal()})),$(document).on("keyup blur","#returnDiscount, #returnShipping, #returnSurcharge, #returnPaidAmount",(function(){BMS.RETURN.grandTotal()})),$(document).on("keyup blur","#productSaleItemPacket",(function(){})),$(document).on("blur keydown","#productSaleItemDiscount",(function(e){BMS.POS.productDiscountCheck(e)})),$(document).on("keydown","#orderDiscountValue",(function(e){13===(e.keyCode||e.which)&&BMS.POS.orderDiscountCheck(this,e)})),$(document).on("keyup",".posSalePaymentAmount, #shippingCharge, #totalPackets, #packetShippingRate, #adjustAmount",(function(e){BMS.POS.grandTotal(e)})),$(document).on("submit","#posSale",(function(e){e.preventDefault();var t=0===$(".productQnt").length,a=$(".productSO").filter((function(){return 1==this.value})).length>0;if(""===$("#customersId").val())return BMS.fn.alertError("Please select the customer");var o=e.originalEvent.submitter;if("sale_is_hold"!==o.value||confirm("Are you sure to Hold this?"))if(t||a)Swal.fire({title:"Error!",html:t?"Please add a least one product":"Sorry! there have at least one out of stock product in selected warehouse, which are marked with <span style='Background-color:pink;'>Pink background</span>. Please remove them first.",icon:"error",onClose:$("body").css("padding","0px")});else{$(o).html("Submit &nbsp;&nbsp; <i class='fa fa-spin fa-refresh'></i>");var n=new FormData(this);n.append(o.name,o.value),$("#payment").find("button").prop("disabled",!0),$.ajax({url:full_website_address+"/info/?module=pos",type:"post",data:n,cache:!1,contentType:!1,processData:!1,success:function(t,a){if("success"==a){$(o).html("Printing...");var n=JSON.parse(t);"success"===n.saleStatus?BMS.MAIN.printPage(full_website_address+"/invoice-print/?invoiceType=posSale&id="+n.salesId,e,(function(){$("#payment").modal("hide"),BMS.POS.clearScreen(),$("#payment").find("button").prop("disabled",!1)})):($("#posErrorMsg").html('<div class="alert alert-danger">'+n.msg+"</div>"),$("#payment").find("button").prop("disabled",!1))}}})}})),$(document).on("submit","#productPurchase, #productStockTransfer, #productReturn, #specimenCopyForm, #scDistributionForm",(function(e){if($(".productQnt").length<1)return alert("Please add at least one product."),void e.preventDefault()})),$(document).on("submit","#wastageSaleForm",(function(e){return $(".wastageSaleItemQnt").length<1?(alert("Please add at least one item."),void e.preventDefault()):Number($("#wastageSalePaidAmount").val())>0&&""===$("#wastageSaleAccounts").val()?(alert("Please select the accounts."),void e.preventDefault()):void 0})),$(document).on("keypress","#posSale, #productPurchase, #productReturn, #productStockTransfer, #wastageSaleForm",(function(e){13===(e.keyCode||e.which)&&(!1===$("#payment, #finalizePurchase, #finalizeReturn, #finalizeWastageSale").hasClass("in")&&e.preventDefault(),isPosPage?(BMS.POS.grandTotal(),$("#orderDiscount").hasClass("in")?$("#orderDiscount").modal("hide"):$("#salesTariffCharges").hasClass("in")?$("#salesTariffCharges").modal("hide"):$("#productSaleDetails").hasClass("in")&&$("#productSaleDetails").modal("hide")):isPurchasePage?(BMS.PURCHASE.grandTotal(),$("#purchaseTariffCharges").hasClass("in")?$("#purchaseTariffCharges").modal("hide"):$("#purchaseDiscount").hasClass("in")&&$("#purchaseDiscount").modal("hide")):isProductReturnPage?(BMS.RETURN.grandTotal(),$("#returnTariffCharges").hasClass("in")?$("#returnTariffCharges").modal("hide"):$("#returnDiscount").hasClass("in")&&$("#returnDiscount").modal("hide")):isWastageSalePage&&(BMS.WASTAGE_SALE.grandTotal(),$("#wastageSaleTariffCharges").hasClass("in")?$("#wastageSaleTariffCharges").modal("hide"):$("#wastageSaleDiscount").hasClass("in")&&$("#wastageSaleDiscount").modal("hide")))})),$(document).on("shown.bs.modal","#orderDiscount, #purchaseDiscount, #returnDiscount, #wastageSaleDiscount, #payment",(function(){$("#purchaseDiscountValue, #purchasePaidAmount, #orderDiscountValue, #shippingCharge, #returnDiscountValue, #returnPaidAmount, #wastageSaleDiscountValue, #shippingCharge").select()})),$(document).on("show.bs.modal","#customerPurchaseList",(function(){BMS.fn.get(`customerPurchaseList&cid=${$("#customersId").val()}`,(e=>{if(""!=e){var t="";e.forEach((e=>{"Hold"===e.sales_status?t+=`<li class="item">\n <a href="${full_website_address}/sales/pos/?edit=${e.id}" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n <span style="font-size: 12px;" class="label label-warning">Hold</span>\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`:t+=`<li onClick="getPurchaseProductList(${e.id}, '${e.ref}');" class="item">\n <a href="javascript:void(0)" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`})),$("#showPurchaseList ul").html(t)}else $("#showPurchaseList ul").html('<li class="alert alert-danger">Sorry! No data found.</li>')}))})),$(document).on("keydown",".searchInvoiceInPos",(function(e){if("Enter"===e.key){$("body").toggleClass("wait");var t=encodeURIComponent($(this).val());BMS.fn.get(`customerPurchaseList&cid=${$("#customersId").val()}&s=${t}`,(e=>{if(""==e)return $("body").toggleClass("wait"),void $("#showPurchaseList ul").html('<li class="alert alert-danger">Sorry! No data found.</li>');var t="";e.forEach((e=>{"Hold"===e.sales_status?t+=`<li class="item">\n <a href="${full_website_address}/sales/pos/?edit=${e.id}" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n <span style="font-size: 12px;" class="label label-warning">Hold</span>\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`:t+=`<li onClick="getPurchaseProductList(${e.id}, '${e.ref}');" class="item">\n <a href="javascript:void(0)" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`})),$("#showPurchaseList ul").html(t),$("body").toggleClass("wait")}))}})),$(document).on("click",".quick-cash",(function(){var e=Number($(this).html());$(".posSalePaymentAmount").val(parseFloat(e).toFixed(2)),BMS.POS.grandTotal()})),$(document).on("hide.bs.modal","#productSaleDetails",(function(){var e=$("#productSaleDetails .rowId").val(),t=$("#productSaleDetails #productSaleItemPrice").val(),a=$("#productSaleDetails #productSaleItemDiscount").val(),o=$("#productSaleDetails #productSaleItemPacket").val(),n=$("#productSaleDetails #productSaleItemDetails").val(),s=$("tr#"+e);s.find(".netSalesPrice").val(t);var r=BMS.FUNCTIONS.calculateDiscount(t,a),l="";if(Number(r)===Number(t))l=parseFloat(t).toFixed(2);else l="<span>"+r+"</span><span><del><small>"+parseFloat(t).toFixed(2)+"</small></del></span>";s.find(".displayProductPrice").html(l),s.find(".productDiscount").val(a),s.find(".productItemDetails").val(n),s.find(".productPacket").val(o),s.find(".subtotalCol").html(r*s.find(".productQnt").val()),BMS.POS.grandTotal()})),$(document).on("focus",".productQnt",(function(){$(this)[0].scrollIntoView({behavior:"smooth",block:"nearest",inline:"start"})})),$(document).on("change","#ReturnMoney",(function(){$("#ReturnMoney").is(":checked")?$(".returnAmountAccountsDiv").show():$(".returnAmountAccountsDiv").hide()})),$(document).on("submit","#accountsLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=accountsLedger&account_id="+$("#accountSelection").val()+"&dateRange="+$("#accountsLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load(),$.post(full_website_address+"/info/?module=data&page=getAccountsInfo",{accountsId:$("#accountSelection").val()},(function(e,t){var a=JSON.parse(e);$("#accountsName").html(a.name),$("#accountsBalance").html(tsd(a.balance)),$("#accountsLedgerDates").html($("#accountsLedgerDateRange").val())}))})),$(document).on("submit","#employeeLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=employeeLedger&emp_id="+$("#employeeSelection").val()+"&dateRange="+$("#employeeLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load(),$.post(full_website_address+"/info/?module=data&page=getEmpSalaryData",{empId:$("#employeeSelection").val()},(function(e,t){var a=JSON.parse(e),o=Number(a.emp_payable_salary)+Number(a.emp_payable_overtime)+Number(a.emp_payable_bonus);$("#salaryInfo > tbody > tr > td:nth-child(1)").html(tsd(a.emp_payable_salary)),$("#salaryInfo > tbody > tr > td:nth-child(2)").html(tsd(a.emp_payable_overtime)),$("#salaryInfo > tbody > tr > td:nth-child(3)").html(tsd(a.emp_payable_bonus)),$("#salaryInfo > tbody > tr > td:nth-child(4)").html(tsd(o)),$("#employeeName").html(a.emp_firstname+" "+a.emp_lastname),$("#accountsLedgerDates").html($("#employeeLedgerDateRange").val())}))})),$(document).on("submit","#journalLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=journalLedger&journal_id="+$("#journalSelection").val()+"&dateRange="+$("#journalLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#customerLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=customerLedger&customer_id="+$("#customerSelection").val()+"&dateRange="+$("#customerLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#companyLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=companyLedger&company_id="+$("#companySelection").val()+"&dateRange="+$("#companyLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#advancePaymentLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=advancePaymentLedger&emp_id="+$("#employeeSelection").val()+"&dateRange="+$("#advancePaymentLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#productLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=reports&page=productLedger&pid="+$("#productSelection").val()+"&wid="+$("#warehouseSelection").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#customerStatementReport",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=reports&page=customerStatement&cid="+$("#customerSelection").val()+"&dateRange="+$("#customerStatementDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load(),$.post(full_website_address+"/info/?module=data&page=getCustomerStatementInfo",{customerId:$("#customerSelection").val(),dateRange:$("#customerStatementDateRange").val()},(function(e,t){var a=JSON.parse(e),o=Number(a.net_purchased)-(Number(a.total_product_returns)+Number(a.total_purchased_discount)),n=Number(a.advance_payments_amount)+Number(a.received_payments_amount)+Number(a.sales_payments_amount),s=n+Number(a.previous_balance)+Number(a.total_given_bonus)+Number(a.special_discounts_amount)-(o+Number(a.total_shipping)+Number(a.payments_return_amount));$("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html(tsd(a.net_purchased)),$("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(tsd(a.total_purchased_discount)),$("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(tsd(a.total_shipping)),$("#paymentInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(tsd(a.total_product_returns)),$("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(tsd(o)),$("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(4)").html(tsd(a.sales_payments_amount)),$("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(4)").html(tsd(a.received_payments_amount)),$("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(4)").html(tsd(a.advance_payments_amount)),$("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(4)").html(tsd(n)),$("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(6)").html(tsd(a.previous_balance)),$("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(6)").html(tsd(a.total_given_bonus)),$("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(6)").html(tsd(a.special_discounts_amount)),$("#paymentInfo > tbody > tr:nth-child(4) > td:nth-child(6)").html(tsd(a.payments_return_amount)),$("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(6)").html(tsd(s)),$("#customerName").html(a.customer_name),$("#customerAddress").html(a.customer_address+", "+a.district_name),$("#customerStatementDates").html($("#customerStatementDateRange").val())}))})),$(document).on("submit","#locationWiseSaleReort",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=reports&page=locationWiseSalesReport&pid="+$("#selectProductForLocationReport").val()+"&location="+$("#selectLocation").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("change","#paymentEmployee, #dontAdujctAdvance, .paymentsType",(function(){var e=$(this);$.post("<?php echo full_website_address(); ?>/info/?module=data&page=getEmpSalaryData",{empId:$("#paymentEmployee").val()},(function(t,a){$("#dontAdjustAdvance").is(":checked");var o=JSON.parse(t),n=Number(o.emp_payable_salary)+Number(o.emp_payable_overtime)+Number(o.emp_payable_bonus),s="Last taken loan: "+tsd(o.loan_amount)+"; Paid: "+tsd(o.loan_installment_paid_amount)+"; Monthly:"+tsd(o.loan_installment_amount);$("#salaryInfo > tbody > tr > td:nth-child(1)").html(tsd(o.emp_payable_salary)),$("#salaryInfo > tbody > tr > td:nth-child(2)").html(tsd(o.emp_payable_overtime)),$("#salaryInfo > tbody > tr > td:nth-child(3)").html(tsd(o.emp_payable_bonus)),$("#salaryInfo > tbody > tr > td:nth-child(4)").html(tsd(n)),$("#salaryInfo > tfoot > tr:nth-child(1) > th").html(s);var r=$(e).val();"Salary"==r?$(e).closest(".row").find(".paymentAmount").val(Number(o.emp_payable_salary).toFixed(0)):"Overtime"==r?$(e).closest(".row").find(".paymentAmount").val(Number(o.emp_payable_overtime).toFixed(0)):"Bonus"==r?$(e).closest(".row").find(".paymentAmount").val(Number(o.emp_payable_bonus).toFixed(0)):"Advance Salary"==r?$(e).closest(".row").find(".paymentAmount").val(0):$(".paymentAmount").val(Number(o.emp_payable_salary).toFixed(0))}))})),$(document).on("change","#paymentMethods",(function(){"Cheque"==$("#paymentMethods").val()?$("#hiddenItem").css("display","block"):$("#hiddenItem").css("display","none")})),$(document).off("click","#addSalaryPaymentRow"),$(document).on("click","#addSalaryPaymentRow",(function(){$("#salaryPaymentRow").append('<div class="row"> <div class="col-md-4"> <div class="form-group required"> <select name="paymentsType[]" class="paymentsType form-control" style="width: 100%;" required> <option value="Salary">Salary</option> <option value="Overtime">Overtime</option> <option value="Bonus">Bonus</option> </select> </div> </div> <div class="col-md-3"> <div class="form-group required"> <input type="number" name="paymentAmount[]" class="paymentAmount form-control" required> </div> </div> <div class="col-md-4"> <div class="form-group"> <input type="text" name="salaryPaymentNote[]" class="salaryPaymentNote form-control"> </div> </div> <div class="col-xs-1"> <i style="cursor: pointer; padding: 10px 5px 0 0;" class="fa fa-trash-o removeSalaryPaymentRow"></i> </div> </div>')})),$(document).on("click",".removeSalaryPaymentRow",(function(){$(this).closest(".row").css("background-color","whitesmoke").hide("slow",(function(){$(this).closest(".row").remove()}))})),$(document).on("focusin",".datePicker",(function(){BMS.FUNCTIONS.datePicker()})),$(document).on("focusin",".dateTimePicker",(function(){BMS.FUNCTIONS.datePicker({selector:this,format:"YYYY-MM-DD HH:mm",timePicker:!0})})),$(document).on("focusin",".dateRangePicker",(function(){BMS.FUNCTIONS.dateRangePicker()})),$(document).on("focusin",".dateTimeRangePicker",(function(){BMS.FUNCTIONS.dateRangePicker({selector:this,format:"YYYY-MM-DD HH:mm",timePicker:!0})})),$(document).on("focusin",".dateRangePickerPreDefined",(function(){BMS.FUNCTIONS.dateRangePickerPreDefined()})),$(document).on("focusin",".dateTimeRangePickerPreDefined",(function(){BMS.FUNCTIONS.dateRangePickerPreDefined({selector:this,format:"YYYY-MM-DD HH:mm",timePicker:!0})})),$(document).on("focusin",".multiDatePicker",(function(){BMS.FUNCTIONS.multiDatePicker()})),$(document).on("change",".imageToUpload",(function(){var e=$(this).closest(".imageContainer").find(".photoErrorMessage");$(e).empty();var t=this.files[0],a=t.type,o=t.size;if(!1===["image/jpeg","image/png","image/jpg"].includes(a))return $(e).length<1?(BMS.fn.alertError("<?php echo __('Please select a valid image file'); ?>"),this.value=this.defaultValue):$(e).html("<div style='margin-bottom: 0;' class='alert alert-danger'><?php echo __('Please select a valid image file'); ?></div>"),!1;if("<?php echo $_SETTINGS['MAX_UPLOAD_SIZE'] * 1024 * 1024; ?>"<o)return $(e).length<1?(BMS.fn.alertError("<?php echo __('Max file size %d MB', $_SETTINGS['MAX_UPLOAD_SIZE']); ?>"),this.value=this.defaultValue):$(e).html("<div class='alert alert-danger'><?php echo __('Max file size %d MB', $_SETTINGS['MAX_UPLOAD_SIZE']); ?></div>"),!1;var n=$(this).val().replace(/\\/g,"/").replace(/.*\//,"");$(this).closest(".imageContainer").find(".imageNameShow").val(n);var s=$(this),r=new FileReader;r.onload=function(e){$(s).css("color","green"),$(s).closest(".imageContainer").find(".image_preview").css("display","block"),$(s).closest(".imageContainer").find(".previewing").attr("src",e.target.result)},r.readAsDataURL(this.files[0])})),$(document).on("click","#addPosSalePaymentRow",(function(){$(".paymentMethodBox").append('<div style="margin: 0;" class="row">\n <div class="form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Amount</label>\n <span style="cursor:pointer; padding: 0 4px;" class="pull-right removePosPaymentItem" ><i class="fa fa-times"></i></span>\n <input type="number" onclick="this.select();" name="posSalePaymentAmount[]" class="form-control posSalePaymentAmount" step="any">\n </div>\n <div class="form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Reference/Info</label>\n <input type="text" name="posSalePaymentReference[]" class="form-control">\n </div>\n <div style="display: none;" class="posSalePaymentBankAccount form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Bank Account</label>\n <select name="posSalePaymentBankAccount[]" class="form-control pull-left select2Ajax" \n select2-ajax-url="<?php echo full_website_address() ?>/info/?module=select2&page=accountList" style="width: 100%;">\n <option value=""><?php echo __("Select Account"); ?>....</option>\n </select>\n </div>\n <div class="form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Payment Method</label>\n <select name="posSalePaymentMethod[]" class="posSalePaymentMethod form-control">\n <option value="Cash"><?php echo __("Cash"); ?></option>\n <option value="Bank Transfer"><?php echo __("Bank Transfer"); ?></option>\n <option value="Cheque"><?php echo __("Cheque"); ?></option>\n <option value="Card"><?php echo __("Card"); ?></option>\n <option value="Others"><?php echo __("Others"); ?></option>\n </select>\n </div>\n </div>')})),$(document).on("click",".removePosPaymentItem",(function(){$(this).closest(".row").remove(),BMS.POS.grandTotal()})),$(document).on("change",".posSalePaymentMethod",(function(){"Cash"===$(this).val()?$(this).closest(".row").find(".posSalePaymentBankAccount").hide():$(this).closest(".row").find(".posSalePaymentBankAccount").show()})),$(document).on("submit","#modalForm, #popUpForm, #jqFormAdd, #jqFormUpdate",(function(e){e.preventDefault(),ajaxFormSubmit(this)})),$(document).on("submit","#inlineForm",(function(e){e.preventDefault(),ajaxFormSubmit(this,!0)})),$(document).on("click",".deleteEntry",(function(e){e.preventDefault();var t=$(this).attr("href"),a=$(this).attr("data-to-be-deleted"),o=$(this).attr("removeParent"),n=this;Swal.fire({title:"Are you sure to delete this entry?",icon:"warning",didOpen:function(){BMS.fn.play("warning")},showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, delete it!"}).then((e=>{e.value&&$.post(t,{datatoDelete:a},(function(e,t){if(isJson(e)){var a=JSON.parse(e);for(var s in a)sweetAlert[s]=a[s]}Swal.fire({toast:sweetAlert.toast,position:sweetAlert.position,timer:sweetAlert.timer,showConfirmButton:sweetAlert.showConfirmButton,showCloseButton:sweetAlert.showCloseButton,icon:sweetAlert.icon,title:sweetAlert.title,text:sweetAlert.text,onClose:$("body").css("padding","0px")}),void 0!==o&&$(n).closest(o).hide("fast"),$("#dataTableWithAjax").DataTable().ajax.reload(null,!1),$("#dataTableWithAjaxExtend").DataTable().ajax.reload(null,!1)}))}))})),$(document).on("click",".updateEntry",(function(e){e.preventDefault();var t=$(this).attr("href"),a=$(this).attr("data-to-be-updated");$(this).css("color","black"),$(this).find("i.fa").addClass("fa-spin"),$.post(t,{datatoUpdate:a},(function(e,t){if(isJson(e)){var a=JSON.parse(e);for(var o in a)sweetAlert[o]=a[o]}Swal.fire({toast:sweetAlert.toast,position:sweetAlert.position,timer:sweetAlert.timer,showConfirmButton:sweetAlert.showConfirmButton,showCloseButton:sweetAlert.showCloseButton,icon:sweetAlert.icon,title:sweetAlert.title,text:sweetAlert.text,onClose:$("body").css("padding","0px")}),$("#dataTableWithAjax").DataTable().ajax.reload(null,!1),$("#dataTableWithAjaxExtend").DataTable().ajax.reload(null,!1)}))})),$(document).on("dblclick","iledit",(function(e){e.preventDefault();var t=$(this),a=t.closest("td"),o=t.closest("table").find("th").eq(a.index()),n=t.closest("tr").find("pkey").text(),s=o.attr("type"),r=o.attr("data-source"),l=o.attr("data-options"),i=o.attr("where-to-update"),c=t.attr("data-val"),d=t.text(),u=a.width();if("select2"===s){a.html(`\n <select class="form-control select2InlineEdit" select2-ajax-url="${r}" style="width: ${u}px;" required>\n <option value=""><?php echo __("Select Entry"); ?>....</option>\n </select>\n `);var m=a.find(".select2InlineEdit");BMS.fn.select2(m,c,d),m.select2("open")}else if("select"===s){(l=l.split(",")).forEach((function(e){l+=`<option ${d==e?"selected":""} value='${e}'>${e}</option>`})),a.html(`\n <select class="form-control" style="width: ${u}px; padding: 6px 6px;" required>\n ${l}\n </select>\n `),(m=a.find("select")).select2(),m.select2("open")}else a.html(`\n <input type="text" value="${d}" style="width: ${u}px;" class="form-control">\n `),"datePicker"===s&&(a.find("input").addClass("datePicker"),a.find(".datePicker").focus());a.find("input, select, textarea").on("enter blur change clear apply.daterangepicker, select2:close",(function(){var e=["select2","select"].includes(s)?c:d,t=$(this).val(),o=$(this);t!==e?$.post(i,{pkey:n,newData:t},(function(e,t){void 0!==(e=JSON.parse(e)).error&&"true"===e.error?BMS.fn.alertError(e.msg):(BMS.fn.alertSuccess("The data has been successfully updated."),"select2"===s||"select"===s?a.html("<iledit data-val='"+$(o).val()+"'>"+$("option:selected",o).text()+"</iledit>"):a.html("<iledit>"+$(o).val()+"</iledit>"))})):"select2"===s||"select"===s?a.html("<iledit data-val='"+$(o).val()+"'>"+$("option:selected",o).text()+"</iledit>"):a.html("<iledit>"+$(o).val()+"</iledit>")}))})),$(document).on("hidden.bs.modal",(function(e){$(e.target).removeData("bs.modal").find(".modal-ajax").html("")})),$(document).ready((function(){$(document).on("mouseenter focus",".select2Ajax",(function(){BMS.fn.select2(this)}))})),$(document).ready((function(){$("body").tooltip({selector:'[data-toggle="tooltip"]'})})),$(document).click((function(e){$(".dropdown-menu[data-parent]").hide()})),$(document).on("click",'.col-sm-12 [data-toggle="dropdown"]',(function(){if($("body").hasClass("modal-open"))throw new Error("This solution is not working inside a responsive table inside a modal, you need to find out a way to calculate the modal Z-index and add it to the element");if($buttonGroup=$(this).parent(),$buttonGroup.attr("data-attachedUl"))$ul=$("[data-parent="+$buttonGroup.attr("data-attachedUl")+"]");else{var e=+new Date;$ul=$(this).siblings("ul"),$ul.attr("data-parent",e),$buttonGroup.attr("data-attachedUl",e),$(window).resize((function(){$ul.css("display","none").data("top")}))}var t,a,o;$buttonGroup.hasClass("open")?(t=$(this).parent(),a=$ul,o=t.offset().top+t.outerHeight(),a.css("top",o+"px"),a.css("left",t.offset().left-100+"px"),a.css("position","absolute"),a.css("width",a.width()),a.css("heigt",a.height()),a.css("display","block"),a.appendTo(".dynamic-container")):$ul.css("display","none")})),$(document).on("click",".restricted",(function(){Swal.fire({title:"Sorry!",text:"You have no permission to perform this action",icon:"error"})})),$(".modal").on("show.bs.modal",(function(e){if(-1!==$.inArray("restricted",e.target.classList))return e.preventDefault()})),$(".modal").on("shown.bs.modal",(function(){$(this).find("[autofocus]").focus()})),$("form").on("focus","input[type=number]",(function(e){$(this).on("wheel.disableScroll",(function(e){e.preventDefault()}))})),$("form").on("blur","input[type=number]",(function(e){$(this).off("wheel.disableScroll")}));var sweetAlert=[];sweetAlert.title="The command has been executed successfully.",sweetAlert.text="",sweetAlert.icon="success",sweetAlert.toast=!0,sweetAlert.position="top",sweetAlert.timer=5e3,sweetAlert.showConfirmButton=!1,sweetAlert.showCloseButton=!1,$('input[type="checkbox"].square, input[type="radio"].square').iCheck({checkboxClass:"icheckbox_square-blue",radioClass:"iradio_square-blue"}),$.ajaxSetup({beforeSend:function(e){e.setRequestHeader("X-CSRF-TOKEN",xCsrfToken)}});var getPageTitle=JSON.parse('<?php echo json_encode($_SETTINGS["PAGE_TITLE"]); ?>');$(window).bind("popstate",(function(e){"undefined"!=typeof session&&session.terminate(),e.preventDefault(),$.get(location.href+"?contentOnly=true",(function(e,t){defaultiDisplayLength="",$("li").removeClass("active");var a=location.href,o="Not Found!";void 0!==getPageTitle[a]&&(o=getPageTitle[a]),window.document.title=o,$(".dynamic-container").html(e),jQuery.get(full_website_address+"/assets/js/initiator.min.js")}))})),$(document).on("keydown",(function(e){"F2"===e.key&&($("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").hasClass("select2-hidden-accessible")||BMS.fn.select2("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct"),$("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").select2("open")),"F3"===e.key&&(e.preventDefault(),$("#orderDiscount").modal("show"))})),$(document).on("click",".toggleNotButton",(function(){var e=$(this).closest("span").find(".notThisValueFilter");"="===$(e).val()?($(e).val("!="),$(this).text("|")):($(this).text(""),$(e).val("="))})),$(document).on("click",".stopPropagation",(function(e){e.stopPropagation()})),$(document).on("change","#productType",(function(){$("#productVariationSection").hide(),$("#bundleProductsContainer").hide(),$(".bundleProduct").hide(),$(".groupedProduct").hide();"Variable"===this.value?$("#productVariationSection").show():"Bundle"===this.value?($(".bundleProduct").show(),$("#bundleProductsContainer").show()):"Grouped"===this.value&&($(".groupedProduct").show(),$("#bundleProductsContainer").show())})),$(document).on("click",".removeThisVariation",(function(e){if(e.stopPropagation(),confirm("Are sure to remove this variation?")){var t=$(this).closest("li").find(".variation_product_id").val();$(this).closest("li").hide("fast",(function(){$(this).remove()})),void 0!==t&&$.ajax({url:full_website_address+"/xhr/?module=products&page=deleteVariationProduct",type:"post",data:{product_id:t},success:function(e,t){}})}})),$(document).on("click","#setVariationPrice",(function(){setVariationPrice()})),$(window).keydown((function(e){if(13==e.keyCode&&$("#productVariationPrice").hasClass("in"))return e.preventDefault(),setVariationPrice(),$("#productVariationPrice").modal("hide"),!1})),$("#browseProduct").on("show.bs.modal",(function(e){BMS.PRODUCT.showProduct()})),$(document).on("change","#productHasExpiryDate",(function(){"1"===this.value?$(".productIntitalStock").prop("disabled",!0):$(".productIntitalStock").prop("disabled",!1)}));let barCcode="";$(document).on("keypress",(e=>{if("Enter"===e.key){var t="input"!==e.target.tagName.toLowerCase();""!==barCcode&&(isPosPage&&t?BMS.POS.addProduct(barCcode,!0):isPurchasePage&&t?BMS.PURCHASE.addProduct(barCcode,!0):isTransferStockPage&&t?BMS.STOCK_TRANSFER.addProduct(barCcode,!0):isProductReturnPage&&t?BMS.RETURN.addProduct(barCcode,!0):isStockEntryPage&&t?BMS.STOCK_ENTRY.addProduct(barCcode,!0):isAddProductPage&&$("#productCode").val(barCcode)),barCcode=""}else barCcode+=e.key}));
\ No newline at end of file
+$(document).on("change","#productCategoryFilter, #productBrandFilter, #productEditionFilter, #productGenericFilter, #productAuthorFilter",(function(){BMS.PRODUCT.showProduct({category:$("#productCategoryFilter").val(),brand:$("#productBrandFilter").val(),edition:$("#productEditionFilter").val(),generic:$("#productGenericFilter").val(),author:$("#productAuthorFilter").val()})})),$(document).on("change","#customers",(function(){var e=$("#customers").val();$("#customersId").val(e),BMS.fn.get(`getCustomerData&cid=${e}`,(function(e){$("#orderDiscountValue").val(e.discount),$("#packetShippingRate").val(e.shipping_rate)}))})),$(document).on("change","#warehouse",(function(){var e=$("#warehouse").val();$("#warehouseId").val(e),$("#selectPosProduct").attr("select2-ajax-url",`${full_website_address}/info/?module=select2&page=productListForPos&wid=${e}`),BMS.fn.select2("#selectPosProduct")})),$(document).on("change","#stockTransferFromWarehouse, #stockTransferToWarehouse",(function(){var e=$("#stockTransferFromWarehouse").val(),t=$("#stockTransferToWarehouse").val();$("#stockTransferFromWarehouseId").val(e),$("#stockTransferToWarehouseId").val(t)})),$(document).on("change","#scTransferWarehouse",(function(){var e=$("#scTransferWarehouse").val();$("#scTransferWarehouseId").val(e)})),$(document).on("click","#addTariffChargesRow",(function(){BMS.MAIN.addTariffChargesRow("#tariffCharges")})),$(document).on("click",".productButton",(function(){isPosPage?BMS.POS.addProduct(this.value):isPurchasePage?BMS.PURCHASE.addProduct(this.value):isTransferStockPage?BMS.STOCK_TRANSFER.addProduct(this.value):isProductReturnPage?BMS.RETURN.addProduct(this.value):isSpecimenCopyPage?BMS.SPECIMEN_COPY.addProduct(this.value):isScDistributionPage?BMS.SC_DISTRIBUTION.addProduct(this.value):isAddProductPage?BMS.PRODUCT.addProduct(this.value):isStockEntryPage?BMS.STOCK_ENTRY.addProduct(this.value):isSaleOrderPage&&BMS.ORDER.addProduct(this.value)})),$(document).on("change","#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct",(function(){isPosPage?BMS.POS.addProduct(this.value):isPurchasePage?BMS.PURCHASE.addProduct(this.value):isTransferStockPage?BMS.STOCK_TRANSFER.addProduct(this.value):isProductReturnPage?BMS.RETURN.addProduct(this.value):isSpecimenCopyPage?BMS.SPECIMEN_COPY.addProduct(this.value):isScDistributionPage?BMS.SC_DISTRIBUTION.addProduct(this.value):isAddProductPage?BMS.PRODUCT.addProduct(this.value):isStockEntryPage?BMS.STOCK_ENTRY.addProduct(this.value):isSaleOrderPage&&BMS.ORDER.addProduct(this.value),$(this).html("<option value=''>Search Product....</option>")})),$(document).on("click","#addWastageSaleRow",(function(){BMS.WASTAGE_SALE.addWastageSaleItem()})),$(document).on("click",".removeThisProduct, .removeThisItem",(function(){$(this).closest("tr").css("background-color","red").hide("fast",(function(){$(this).closest("tr").remove(),isPosPage?(BMS.POS.grandTotal(),BMS.POS.disableEnableWCSelect()):isPurchasePage?BMS.PURCHASE.grandTotal():isTransferStockPage?(BMS.STOCK_TRANSFER.grandTotal(),BMS.STOCK_TRANSFER.disableEnableWarehouseSelect()):isProductReturnPage?BMS.RETURN.grandTotal():isWastageSalePage?BMS.WASTAGE_SALE.grandTotal():isSpecimenCopyPage?BMS.SPECIMEN_COPY.disableEnableWarehouseSelect():isStockEntryPage?BMS.STOCK_ENTRY.grandTotal():isSaleOrderPage&&(BMS.ORDER.grandTotal(),BMS.POS.disableEnableWCSelect())}))})),$(document).on("click",".removeThisTariffCharges",(function(){$(this).closest(".row").css("background-color","whitesmoke").hide("fast",(function(){$(this).closest(".row").remove(),isPosPage?BMS.POS.grandTotal():isPurchasePage?BMS.PURCHASE.grandTotal():isProductReturnPage?BMS.RETURN.grandTotal():isWastageSalePage?BMS.WASTAGE_SALE.grandTotal():isSaleOrderPage&&BMS.ORDER.grandTotal()}))})),$(document).on("change",".tariffChargesName",(function(){isPosPage?BMS.POS.grandTotal():isPurchasePage?BMS.PURCHASE.grandTotal():isProductReturnPage?BMS.RETURN.grandTotal():isWastageSalePage?BMS.WASTAGE_SALE.grandTotal():isSaleOrderPage&&BMS.ORDER.grandTotal()})),$(document).on("keyup blur",".productQnt",(function(){isPosPage?BMS.POS.productQntCheck(this):isPurchasePage?(BMS.PURCHASE.calculateEachProduct(this),BMS.PURCHASE.grandTotal()):isTransferStockPage?BMS.STOCK_TRANSFER.productQntCheck(this):isProductReturnPage?(BMS.RETURN.grandTotal(),BMS.RETURN.calculateEachProduct(this)):isSpecimenCopyPage?BMS.SPECIMEN_COPY.productQntCheck(this):isStockEntryPage?(BMS.STOCK_ENTRY.calculateEachProduct(this),BMS.STOCK_ENTRY.grandTotal()):isSaleOrderPage&&BMS.ORDER.productQntCheck(this)})),$(document).on("keydown",".productQnt",(function(e){"Enter"===e.key&&($("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").hasClass("select2-hidden-accessible")||BMS.fn.select2("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct"),$("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").select2("open"))})),$(document).on("keydown","#purchaseDiscountValue",(function(e){"Enter"===e.key&&(e.preventDefault(),$("#purchaseDiscount").modal("hide"),$("#finalizePurchase").modal("show"))})),$(document).on("keydown","#shippingCharge",(function(e){"Enter"===e.key&&(e.preventDefault(),$("#adjustAmount").select())})),$(document).on("keydown","#adjustAmount",(function(e){$(this).addClass("disableAdjustAmountAutoChange"),"Enter"===e.key&&(e.preventDefault(),$(".posSalePaymentAmount").first().select(),$(".posSalePaymentAmount").first().addClass("disablePaymentAmountAutoChange"))})),$(document).on("keydown focus",".posSalePaymentAmount",(function(e){var t=$(this).closest(".row").next(".row").find("input.posSalePaymentAmount");$(this).addClass("disablePaymentAmountAutoChange"),1===t.length&&"Enter"===e.key&&(e.preventDefault(),t.addClass("disablePaymentAmountAutoChange"),t.select())})),$(document).on("keydown",".select2-search__field",(function(e){isPosPage&&"select2-selectPosProduct-results"===$(this).attr("aria-controls")&&""===this.value&&$(".productQnt").length>0&&"Enter"===e.key&&($("#selectPosProduct").select2("close"),$("#orderDiscount").modal("show")),isPurchasePage&&"select2-selectProduct-results"===$(this).attr("aria-controls")&&""===this.value&&$(".productQnt").length>0&&"Enter"===e.key&&($("#selectProduct").select2("close"),$("#purchaseDiscount").modal("show"))})),$(document).on("hide.bs.modal","#orderDiscount",(function(e){var t=$("#orderDiscountValue"),a=$(t).val();BMS.POS.isGivenDiscountPermitted(t)?($("#payment").modal("show"),BMS.POS.grandTotal()):(Swal.fire({title:"Error!",text:`You do not have permission to give ${a} discount.`,icon:"error"}),$(t).val(0),e.preventDefault())})),$(document).on("blur keyup",".wastageSaleItemQnt, .wastageSaleItemPrice",(function(){var e=$(this).closest("tr").find(".wastageSaleItemQnt").val(),t=$(this).closest("tr").find(".wastageSaleItemPrice").val();$(this).closest("tr").find(".wastageSaleItemSubtotal").html(parseFloat(e*t).toFixed(2)),BMS.WASTAGE_SALE.grandTotal()})),$(document).on("blur keyup","#wastageSaleDiscount, #wastageSalePaidAmount",(function(){BMS.WASTAGE_SALE.grandTotal()})),$(document).on("blur keyup",".productPurchaseDiscount, .productPurchasePrice",(function(){isPurchasePage?(BMS.PURCHASE.calculateEachProduct(this),BMS.PURCHASE.grandTotal()):isTransferStockPage&&(BMS.STOCK_TRANSFER.calculateEachProduct($(this)),BMS.STOCK_TRANSFER.grandTotal())})),$(document).on("blur keyup",".productReturnDiscount, .productReturnPrice",(function(){BMS.RETURN.calculateEachProduct(this),BMS.RETURN.grandTotal()})),$(document).on("keyup blur","#purchaseDiscount, #purchasePaidAmount, #purchaseShipping",(function(){BMS.PURCHASE.grandTotal()})),$(document).on("keyup blur","#returnDiscount, #returnShipping, #returnSurcharge, #returnPaidAmount",(function(){BMS.RETURN.grandTotal()})),$(document).on("keyup blur","#productSaleItemPacket",(function(){})),$(document).on("blur keydown","#productSaleItemDiscount",(function(e){BMS.POS.productDiscountCheck(e)})),$(document).on("keydown","#orderDiscountValue",(function(e){13===(e.keyCode||e.which)&&BMS.POS.orderDiscountCheck(this,e)})),$(document).on("keyup",".posSalePaymentAmount, #shippingCharge, #totalPackets, #packetShippingRate, #adjustAmount",(function(e){BMS.POS.grandTotal(e)})),$(document).on("submit","#posSale",(function(e){e.preventDefault();var t=0===$(".productQnt").length,a=$(".productSO").filter((function(){return 1==this.value})).length>0;if(""===$("#customersId").val())return BMS.fn.alertError("Please select the customer");var o=e.originalEvent.submitter;if("sale_is_hold"!==o.value||confirm("Are you sure to Hold this?"))if(t||a)Swal.fire({title:"Error!",html:t?"Please add a least one product":"Sorry! there have at least one out of stock product in selected warehouse, which are marked with <span style='Background-color:pink;'>Pink background</span>. Please remove them first.",icon:"error",onClose:$("body").css("padding","0px")});else{$(o).html("Submit &nbsp;&nbsp; <i class='fa fa-spin fa-refresh'></i>");var n=new FormData(this);n.append(o.name,o.value),$("#payment").find("button").prop("disabled",!0),$.ajax({url:full_website_address+"/info/?module=pos",type:"post",data:n,cache:!1,contentType:!1,processData:!1,success:function(t,a){if("success"==a){$(o).html("Printing...");var n=JSON.parse(t);"success"===n.saleStatus?BMS.MAIN.printPage(full_website_address+"/invoice-print/?invoiceType=posSale&id="+n.salesId,e,(function(){$("#payment").modal("hide"),BMS.POS.clearScreen(),$("#payment").find("button").prop("disabled",!1)})):($("#posErrorMsg").html('<div class="alert alert-danger">'+n.msg+"</div>"),$("#payment").find("button").prop("disabled",!1))}}})}})),$(document).on("submit","#productPurchase, #productStockTransfer, #productReturn, #specimenCopyForm, #scDistributionForm",(function(e){if($(".productQnt").length<1)return alert("Please add at least one product."),void e.preventDefault()})),$(document).on("submit","#wastageSaleForm",(function(e){return $(".wastageSaleItemQnt").length<1?(alert("Please add at least one item."),void e.preventDefault()):Number($("#wastageSalePaidAmount").val())>0&&""===$("#wastageSaleAccounts").val()?(alert("Please select the accounts."),void e.preventDefault()):void 0})),$(document).on("keypress","#posSale, #productPurchase, #productReturn, #productStockTransfer, #wastageSaleForm",(function(e){13===(e.keyCode||e.which)&&(!1===$("#payment, #finalizePurchase, #finalizeReturn, #finalizeWastageSale").hasClass("in")&&e.preventDefault(),isPosPage?(BMS.POS.grandTotal(),$("#orderDiscount").hasClass("in")?$("#orderDiscount").modal("hide"):$("#salesTariffCharges").hasClass("in")?$("#salesTariffCharges").modal("hide"):$("#productSaleDetails").hasClass("in")&&$("#productSaleDetails").modal("hide")):isPurchasePage?(BMS.PURCHASE.grandTotal(),$("#purchaseTariffCharges").hasClass("in")?$("#purchaseTariffCharges").modal("hide"):$("#purchaseDiscount").hasClass("in")&&$("#purchaseDiscount").modal("hide")):isProductReturnPage?(BMS.RETURN.grandTotal(),$("#returnTariffCharges").hasClass("in")?$("#returnTariffCharges").modal("hide"):$("#returnDiscount").hasClass("in")&&$("#returnDiscount").modal("hide")):isWastageSalePage&&(BMS.WASTAGE_SALE.grandTotal(),$("#wastageSaleTariffCharges").hasClass("in")?$("#wastageSaleTariffCharges").modal("hide"):$("#wastageSaleDiscount").hasClass("in")&&$("#wastageSaleDiscount").modal("hide")))})),$(document).on("shown.bs.modal","#orderDiscount, #purchaseDiscount, #returnDiscount, #wastageSaleDiscount, #payment",(function(){$("#purchaseDiscountValue, #purchasePaidAmount, #orderDiscountValue, #shippingCharge, #returnDiscountValue, #returnPaidAmount, #wastageSaleDiscountValue, #shippingCharge").select()})),$(document).on("show.bs.modal","#customerPurchaseList",(function(){BMS.fn.get(`customerPurchaseList&cid=${$("#customersId").val()}`,(e=>{if(""!=e){var t="";e.forEach((e=>{"Hold"===e.sales_status?t+=`<li class="item">\n <a href="${full_website_address}/sales/pos/?edit=${e.id}" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n <span style="font-size: 12px;" class="label label-warning">Hold</span>\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`:t+=`<li onClick="getPurchaseProductList(${e.id}, '${e.ref}');" class="item">\n <a href="javascript:void(0)" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`})),$("#showPurchaseList ul").html(t)}else $("#showPurchaseList ul").html('<li class="alert alert-danger">Sorry! No data found.</li>')}))})),$(document).on("keydown",".searchInvoiceInPos",(function(e){if("Enter"===e.key){$("body").toggleClass("wait");var t=encodeURIComponent($(this).val());BMS.fn.get(`customerPurchaseList&cid=${$("#customersId").val()}&s=${t}`,(e=>{if(""==e)return $("body").toggleClass("wait"),void $("#showPurchaseList ul").html('<li class="alert alert-danger">Sorry! No data found.</li>');var t="";e.forEach((e=>{"Hold"===e.sales_status?t+=`<li class="item">\n <a href="${full_website_address}/sales/pos/?edit=${e.id}" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n <span style="font-size: 12px;" class="label label-warning">Hold</span>\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`:t+=`<li onClick="getPurchaseProductList(${e.id}, '${e.ref}');" class="item">\n <a href="javascript:void(0)" class="product-title">\n ${e.date} (${e.ref})\n <span style="font-size: 12px;" class="label label-success pull-right">${to_money(e.total)}</span>\n <span class="product-description">\n From: ${e.shop}; Status: ${e.pay_status}\n </span>\n </a>\n </li>`})),$("#showPurchaseList ul").html(t),$("body").toggleClass("wait")}))}})),$(document).on("click",".quick-cash",(function(){var e=Number($(this).html());$(".posSalePaymentAmount").val(parseFloat(e).toFixed(2)),BMS.POS.grandTotal()})),$(document).on("hide.bs.modal","#productSaleDetails",(function(){var e=$("#productSaleDetails .rowId").val(),t=$("#productSaleDetails #productSaleItemPrice").val(),a=$("#productSaleDetails #productSaleItemDiscount").val(),o=$("#productSaleDetails #productSaleItemPacket").val(),n=$("#productSaleDetails #productSaleItemDetails").val(),s=$("tr#"+e);s.find(".netSalesPrice").val(t);var r=BMS.FUNCTIONS.calculateDiscount(t,a),l="";if(Number(r)===Number(t))l=parseFloat(t).toFixed(2);else l="<span>"+r+"</span><span><del><small>"+parseFloat(t).toFixed(2)+"</small></del></span>";s.find(".displayProductPrice").html(l),s.find(".productDiscount").val(a),s.find(".productItemDetails").val(n),s.find(".productPacket").val(o),s.find(".subtotalCol").html(r*s.find(".productQnt").val()),BMS.POS.grandTotal()})),$(document).on("focus",".productQnt",(function(){$(this)[0].scrollIntoView({behavior:"smooth",block:"nearest",inline:"start"})})),$(document).on("change","#ReturnMoney",(function(){$("#ReturnMoney").is(":checked")?$(".returnAmountAccountsDiv").show():$(".returnAmountAccountsDiv").hide()})),$(document).on("submit","#accountsLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=accountsLedger&account_id="+$("#accountSelection").val()+"&dateRange="+$("#accountsLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load(),$.post(full_website_address+"/info/?module=data&page=getAccountsInfo",{accountsId:$("#accountSelection").val()},(function(e,t){var a=JSON.parse(e);$("#accountsName").html(a.name),$("#accountsBalance").html(tsd(a.balance)),$("#accountsLedgerDates").html($("#accountsLedgerDateRange").val())}))})),$(document).on("submit","#employeeLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=employeeLedger&emp_id="+$("#employeeSelection").val()+"&dateRange="+$("#employeeLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load(),$.post(full_website_address+"/info/?module=data&page=getEmpSalaryData",{empId:$("#employeeSelection").val()},(function(e,t){var a=JSON.parse(e),o=Number(a.emp_payable_salary)+Number(a.emp_payable_overtime)+Number(a.emp_payable_bonus);$("#salaryInfo > tbody > tr > td:nth-child(1)").html(tsd(a.emp_payable_salary)),$("#salaryInfo > tbody > tr > td:nth-child(2)").html(tsd(a.emp_payable_overtime)),$("#salaryInfo > tbody > tr > td:nth-child(3)").html(tsd(a.emp_payable_bonus)),$("#salaryInfo > tbody > tr > td:nth-child(4)").html(tsd(o)),$("#employeeName").html(a.emp_firstname+" "+a.emp_lastname),$("#accountsLedgerDates").html($("#employeeLedgerDateRange").val())}))})),$(document).on("submit","#journalLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=journalLedger&journal_id="+$("#journalSelection").val()+"&dateRange="+$("#journalLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#customerLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=customerLedger&customer_id="+$("#customerSelection").val()+"&dateRange="+$("#customerLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#companyLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=companyLedger&company_id="+$("#companySelection").val()+"&dateRange="+$("#companyLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#advancePaymentLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=ledgers&page=advancePaymentLedger&emp_id="+$("#employeeSelection").val()+"&dateRange="+$("#advancePaymentLedgerDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#productLedgerForm",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=reports&page=productLedger&pid="+$("#productSelection").val()+"&wid="+$("#warehouseSelection").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("submit","#customerStatementReport",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=reports&page=customerStatement&cid="+$("#customerSelection").val()+"&dateRange="+$("#customerStatementDateRange").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load(),$.post(full_website_address+"/info/?module=data&page=getCustomerStatementInfo",{customerId:$("#customerSelection").val(),dateRange:$("#customerStatementDateRange").val()},(function(e,t){var a=JSON.parse(e),o=Number(a.net_purchased)-(Number(a.total_product_returns)+Number(a.total_purchased_discount)),n=Number(a.advance_payments_amount)+Number(a.received_payments_amount)+Number(a.sales_payments_amount),s=n+Number(a.previous_balance)+Number(a.total_given_bonus)+Number(a.special_discounts_amount)-(o+Number(a.total_shipping)+Number(a.payments_return_amount));$("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(2)").html(tsd(a.net_purchased)),$("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(2)").html(tsd(a.total_purchased_discount)),$("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(2)").html(tsd(a.total_shipping)),$("#paymentInfo > tbody > tr:nth-child(4) > td:nth-child(2)").html(tsd(a.total_product_returns)),$("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(2)").html(tsd(o)),$("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(4)").html(tsd(a.sales_payments_amount)),$("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(4)").html(tsd(a.received_payments_amount)),$("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(4)").html(tsd(a.advance_payments_amount)),$("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(4)").html(tsd(n)),$("#paymentInfo > tbody > tr:nth-child(1) > td:nth-child(6)").html(tsd(a.previous_balance)),$("#paymentInfo > tbody > tr:nth-child(2) > td:nth-child(6)").html(tsd(a.total_given_bonus)),$("#paymentInfo > tbody > tr:nth-child(3) > td:nth-child(6)").html(tsd(a.special_discounts_amount)),$("#paymentInfo > tbody > tr:nth-child(4) > td:nth-child(6)").html(tsd(a.payments_return_amount)),$("#paymentInfo > tbody > tr:nth-child(5) > td:nth-child(6)").html(tsd(s)),$("#customerName").html(a.customer_name),$("#customerAddress").html(a.customer_address+", "+a.district_name),$("#customerStatementDates").html($("#customerStatementDateRange").val())}))})),$(document).on("submit","#locationWiseSaleReort",(function(e){e.preventDefault();var t=full_website_address+"/xhr/?module=reports&page=locationWiseSalesReport&pid="+$("#selectProductForLocationReport").val()+"&location="+$("#selectLocation").val();$("#dataTableWithAjaxExtend").DataTable().ajax.url(t).load()})),$(document).on("change","#paymentEmployee, #dontAdujctAdvance, .paymentsType",(function(){var e=$(this);$.post("<?php echo full_website_address(); ?>/info/?module=data&page=getEmpSalaryData",{empId:$("#paymentEmployee").val()},(function(t,a){$("#dontAdjustAdvance").is(":checked");var o=JSON.parse(t),n=Number(o.emp_payable_salary)+Number(o.emp_payable_overtime)+Number(o.emp_payable_bonus),s="Last taken loan: "+tsd(o.loan_amount)+"; Paid: "+tsd(o.loan_installment_paid_amount)+"; Monthly:"+tsd(o.loan_installment_amount);$("#salaryInfo > tbody > tr > td:nth-child(1)").html(tsd(o.emp_payable_salary)),$("#salaryInfo > tbody > tr > td:nth-child(2)").html(tsd(o.emp_payable_overtime)),$("#salaryInfo > tbody > tr > td:nth-child(3)").html(tsd(o.emp_payable_bonus)),$("#salaryInfo > tbody > tr > td:nth-child(4)").html(tsd(n)),$("#salaryInfo > tfoot > tr:nth-child(1) > th").html(s);var r=$(e).val();"Salary"==r?$(e).closest(".row").find(".paymentAmount").val(Number(o.emp_payable_salary).toFixed(0)):"Overtime"==r?$(e).closest(".row").find(".paymentAmount").val(Number(o.emp_payable_overtime).toFixed(0)):"Bonus"==r?$(e).closest(".row").find(".paymentAmount").val(Number(o.emp_payable_bonus).toFixed(0)):"Advance Salary"==r?$(e).closest(".row").find(".paymentAmount").val(0):$(".paymentAmount").val(Number(o.emp_payable_salary).toFixed(0))}))})),$(document).on("change","#paymentMethods",(function(){"Cheque"==$("#paymentMethods").val()?$("#hiddenItem").css("display","block"):$("#hiddenItem").css("display","none")})),$(document).off("click","#addSalaryPaymentRow"),$(document).on("click","#addSalaryPaymentRow",(function(){$("#salaryPaymentRow").append('<div class="row"> <div class="col-md-4"> <div class="form-group required"> <select name="paymentsType[]" class="paymentsType form-control" style="width: 100%;" required> <option value="Salary">Salary</option> <option value="Overtime">Overtime</option> <option value="Bonus">Bonus</option> </select> </div> </div> <div class="col-md-3"> <div class="form-group required"> <input type="number" name="paymentAmount[]" class="paymentAmount form-control" required> </div> </div> <div class="col-md-4"> <div class="form-group"> <input type="text" name="salaryPaymentNote[]" class="salaryPaymentNote form-control"> </div> </div> <div class="col-xs-1"> <i style="cursor: pointer; padding: 10px 5px 0 0;" class="fa fa-trash-o removeSalaryPaymentRow"></i> </div> </div>')})),$(document).on("click",".removeSalaryPaymentRow",(function(){$(this).closest(".row").css("background-color","whitesmoke").hide("slow",(function(){$(this).closest(".row").remove()}))})),$(document).on("focusin",".datePicker",(function(){BMS.FUNCTIONS.datePicker()})),$(document).on("focusin",".dateTimePicker",(function(){BMS.FUNCTIONS.datePicker({selector:this,format:"YYYY-MM-DD HH:mm",timePicker:!0})})),$(document).on("focusin",".dateRangePicker",(function(){BMS.FUNCTIONS.dateRangePicker()})),$(document).on("focusin",".dateTimeRangePicker",(function(){BMS.FUNCTIONS.dateRangePicker({selector:this,format:"YYYY-MM-DD HH:mm",timePicker:!0})})),$(document).on("focusin",".dateRangePickerPreDefined",(function(){BMS.FUNCTIONS.dateRangePickerPreDefined()})),$(document).on("focusin",".dateTimeRangePickerPreDefined",(function(){BMS.FUNCTIONS.dateRangePickerPreDefined({selector:this,format:"YYYY-MM-DD HH:mm",timePicker:!0})})),$(document).on("focusin",".multiDatePicker",(function(){BMS.FUNCTIONS.multiDatePicker()})),$(document).on("change",".imageToUpload",(function(){var e=$(this).closest(".imageContainer").find(".photoErrorMessage");$(e).empty();var t=this.files[0],a=t.type,o=t.size;if(!1===["image/jpeg","image/png","image/jpg"].includes(a))return $(e).length<1?(BMS.fn.alertError("<?php echo __('Please select a valid image file'); ?>"),this.value=this.defaultValue):$(e).html("<div style='margin-bottom: 0;' class='alert alert-danger'><?php echo __('Please select a valid image file'); ?></div>"),!1;if("<?php echo $_SETTINGS['MAX_UPLOAD_SIZE'] * 1024 * 1024; ?>"<o)return $(e).length<1?(BMS.fn.alertError("<?php echo __('Max file size %d MB', $_SETTINGS['MAX_UPLOAD_SIZE']); ?>"),this.value=this.defaultValue):$(e).html("<div class='alert alert-danger'><?php echo __('Max file size %d MB', $_SETTINGS['MAX_UPLOAD_SIZE']); ?></div>"),!1;var n=$(this).val().replace(/\\/g,"/").replace(/.*\//,"");$(this).closest(".imageContainer").find(".imageNameShow").val(n);var s=$(this),r=new FileReader;r.onload=function(e){$(s).css("color","green"),$(s).closest(".imageContainer").find(".image_preview").css("display","block"),$(s).closest(".imageContainer").find(".previewing").attr("src",e.target.result)},r.readAsDataURL(this.files[0])})),$(document).on("click","#addPosSalePaymentRow",(function(){$(".paymentMethodBox").append('<div style="margin: 0;" class="row">\n <div class="form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Amount</label>\n <span style="cursor:pointer; padding: 0 4px;" class="pull-right removePosPaymentItem" ><i class="fa fa-times"></i></span>\n <input type="number" onclick="this.select();" name="posSalePaymentAmount[]" class="form-control posSalePaymentAmount" step="any">\n </div>\n <div class="form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Reference/Info</label>\n <input type="text" name="posSalePaymentReference[]" class="form-control">\n </div>\n <div style="display: none;" class="posSalePaymentBankAccount form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Bank Account</label>\n <select name="posSalePaymentBankAccount[]" class="form-control pull-left select2Ajax" \n select2-ajax-url="<?php echo full_website_address() ?>/info/?module=select2&page=accountList" style="width: 100%;">\n <option value=""><?php echo __("Select Account"); ?>....</option>\n </select>\n </div>\n <div class="form-group pull-right col-md-3 adjustFormGroupPadding">\n <label>Payment Method</label>\n <select name="posSalePaymentMethod[]" class="posSalePaymentMethod form-control">\n <option value="Cash"><?php echo __("Cash"); ?></option>\n <option value="Bank Transfer"><?php echo __("Bank Transfer"); ?></option>\n <option value="Cheque"><?php echo __("Cheque"); ?></option>\n <option value="Card"><?php echo __("Card"); ?></option>\n <option value="Others"><?php echo __("Others"); ?></option>\n </select>\n </div>\n </div>')})),$(document).on("click",".removePosPaymentItem",(function(){$(this).closest(".row").remove(),BMS.POS.grandTotal()})),$(document).on("change",".posSalePaymentMethod",(function(){"Cash"===$(this).val()?$(this).closest(".row").find(".posSalePaymentBankAccount").hide():$(this).closest(".row").find(".posSalePaymentBankAccount").show()})),$(document).on("submit","#modalForm, #popUpForm, #jqFormAdd, #jqFormUpdate",(function(e){e.preventDefault(),ajaxFormSubmit(this)})),$(document).on("submit","#inlineForm",(function(e){e.preventDefault(),ajaxFormSubmit(this,!0)})),$(document).on("click",".deleteEntry",(function(e){e.preventDefault();var t=$(this).attr("href"),a=$(this).attr("data-to-be-deleted"),o=$(this).attr("removeParent"),n=this;Swal.fire({title:"Are you sure to delete this entry?",icon:"warning",didOpen:function(){BMS.fn.play("warning")},showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, delete it!"}).then((e=>{e.value&&$.post(t,{datatoDelete:a},(function(e,t){if(isJson(e)){var a=JSON.parse(e);for(var s in a)sweetAlert[s]=a[s]}Swal.fire({toast:sweetAlert.toast,position:sweetAlert.position,timer:sweetAlert.timer,showConfirmButton:sweetAlert.showConfirmButton,showCloseButton:sweetAlert.showCloseButton,icon:sweetAlert.icon,title:sweetAlert.title,text:sweetAlert.text,onClose:$("body").css("padding","0px")}),void 0!==o&&$(n).closest(o).hide("fast"),$("#dataTableWithAjax").DataTable().ajax.reload(null,!1),$("#dataTableWithAjaxExtend").DataTable().ajax.reload(null,!1)}))}))})),$(document).on("click",".updateEntry",(function(e){e.preventDefault();var t=$(this).attr("href"),a=$(this).attr("data-to-be-updated");$(this).css("color","black"),$(this).find("i.fa").addClass("fa-spin"),$.post(t,{datatoUpdate:a},(function(e,t){if(isJson(e)){var a=JSON.parse(e);for(var o in a)sweetAlert[o]=a[o]}Swal.fire({toast:sweetAlert.toast,position:sweetAlert.position,timer:sweetAlert.timer,showConfirmButton:sweetAlert.showConfirmButton,showCloseButton:sweetAlert.showCloseButton,icon:sweetAlert.icon,title:sweetAlert.title,text:sweetAlert.text,onClose:$("body").css("padding","0px")}),$("#dataTableWithAjax").DataTable().ajax.reload(null,!1),$("#dataTableWithAjaxExtend").DataTable().ajax.reload(null,!1)}))})),$(document).on("dblclick","iledit",(function(e){e.preventDefault();var t=$(this),a=t.closest("td"),o=t.closest("table").find("th").eq(a.index()),n=t.closest("tr").find("pkey").text(),s=o.attr("type"),r=o.attr("data-source"),l=o.attr("data-options"),i=o.attr("where-to-update"),c=t.attr("data-val"),d=t.text(),u=a.width();if("select2"===s){a.html(`\n <select class="form-control select2InlineEdit" select2-ajax-url="${r}" style="width: ${u}px;" required>\n <option value=""><?php echo __("Select Entry"); ?>....</option>\n </select>\n `);var m=a.find(".select2InlineEdit");BMS.fn.select2(m,c,d),m.select2("open")}else if("select"===s){(l=l.split(",")).forEach((function(e){l+=`<option ${d==e?"selected":""} value='${e}'>${e}</option>`})),a.html(`\n <select class="form-control" style="width: ${u}px; padding: 6px 6px;" required>\n ${l}\n </select>\n `),(m=a.find("select")).select2(),m.select2("open")}else a.html(`\n <input type="text" value="${d}" style="width: ${u}px;" class="form-control">\n `),"datePicker"===s&&(a.find("input").addClass("datePicker"),a.find(".datePicker").focus());a.find("input, select, textarea").on("enter blur clear apply.daterangepicker, select2:close",(function(){var e=["select2","select"].includes(s)?c:d,t=$(this).val(),o=$(this);t!==e?$.post(i,{pkey:n,newData:t},(function(e,t){void 0!==(e=JSON.parse(e)).error&&"true"===e.error?BMS.fn.alertError(e.msg):(BMS.fn.alertSuccess("The data has been successfully updated."),"select2"===s||"select"===s?a.html("<iledit data-val='"+$(o).val()+"'>"+$("option:selected",o).text()+"</iledit>"):a.html("<iledit>"+$(o).val()+"</iledit>"))})):"select2"===s||"select"===s?a.html("<iledit data-val='"+$(o).val()+"'>"+$("option:selected",o).text()+"</iledit>"):a.html("<iledit>"+$(o).val()+"</iledit>")}))})),$(document).on("hidden.bs.modal",(function(e){$(e.target).removeData("bs.modal").find(".modal-ajax").html("")})),$(document).ready((function(){$(document).on("mouseenter focus",".select2Ajax",(function(){BMS.fn.select2(this)}))})),$(document).ready((function(){$("body").tooltip({selector:'[data-toggle="tooltip"]'})})),$(document).click((function(e){$(".dropdown-menu[data-parent]").hide()})),$(document).on("click",'.col-sm-12 [data-toggle="dropdown"]',(function(){if($("body").hasClass("modal-open"))throw new Error("This solution is not working inside a responsive table inside a modal, you need to find out a way to calculate the modal Z-index and add it to the element");if($buttonGroup=$(this).parent(),$buttonGroup.attr("data-attachedUl"))$ul=$("[data-parent="+$buttonGroup.attr("data-attachedUl")+"]");else{var e=+new Date;$ul=$(this).siblings("ul"),$ul.attr("data-parent",e),$buttonGroup.attr("data-attachedUl",e),$(window).resize((function(){$ul.css("display","none").data("top")}))}var t,a,o;$buttonGroup.hasClass("open")?(t=$(this).parent(),a=$ul,o=t.offset().top+t.outerHeight(),a.css("top",o+"px"),a.css("left",t.offset().left-100+"px"),a.css("position","absolute"),a.css("width",a.width()),a.css("heigt",a.height()),a.css("display","block"),a.appendTo(".dynamic-container")):$ul.css("display","none")})),$(document).on("click",".restricted",(function(){Swal.fire({title:"Sorry!",text:"You have no permission to perform this action",icon:"error"})})),$(".modal").on("show.bs.modal",(function(e){if(-1!==$.inArray("restricted",e.target.classList))return e.preventDefault()})),$(".modal").on("shown.bs.modal",(function(){$(this).find("[autofocus]").focus()})),$("form").on("focus","input[type=number]",(function(e){$(this).on("wheel.disableScroll",(function(e){e.preventDefault()}))})),$("form").on("blur","input[type=number]",(function(e){$(this).off("wheel.disableScroll")}));var sweetAlert=[];sweetAlert.title="The command has been executed successfully.",sweetAlert.text="",sweetAlert.icon="success",sweetAlert.toast=!0,sweetAlert.position="top",sweetAlert.timer=5e3,sweetAlert.showConfirmButton=!1,sweetAlert.showCloseButton=!1,$('input[type="checkbox"].square, input[type="radio"].square').iCheck({checkboxClass:"icheckbox_square-blue",radioClass:"iradio_square-blue"}),$.ajaxSetup({beforeSend:function(e){e.setRequestHeader("X-CSRF-TOKEN",xCsrfToken)}});var getPageTitle=JSON.parse('<?php echo json_encode($_SETTINGS["PAGE_TITLE"]); ?>');$(window).bind("popstate",(function(e){"undefined"!=typeof session&&(session.terminate(),phone.stop()),e.preventDefault(),$.get(location.href+"?contentOnly=true",(function(e,t){defaultiDisplayLength="",$("li").removeClass("active");var a=location.href,o="Not Found!";void 0!==getPageTitle[a]&&(o=getPageTitle[a]),window.document.title=o,$(".dynamic-container").html(e),jQuery.get(full_website_address+"/assets/js/initiator.min.js")}))})),$(document).on("keydown",(function(e){"F2"===e.key&&($("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").hasClass("select2-hidden-accessible")||BMS.fn.select2("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct"),$("#selectProduct, #selectPosProduct, #selectStockTransferProduct, #selectStockEntryProduct").select2("open")),"F3"===e.key&&(e.preventDefault(),$("#orderDiscount").modal("show"))})),$(document).on("click",".toggleNotButton",(function(){var e=$(this).closest("span").find(".notThisValueFilter");"="===$(e).val()?($(e).val("!="),$(this).text("|")):($(this).text(""),$(e).val("="))})),$(document).on("click",".stopPropagation",(function(e){e.stopPropagation()})),$(document).on("change","#productType",(function(){$("#productVariationSection").hide(),$("#bundleProductsContainer").hide(),$(".bundleProduct").hide(),$(".groupedProduct").hide();"Variable"===this.value?$("#productVariationSection").show():"Bundle"===this.value?($(".bundleProduct").show(),$("#bundleProductsContainer").show()):"Grouped"===this.value&&($(".groupedProduct").show(),$("#bundleProductsContainer").show())})),$(document).on("click",".removeThisVariation",(function(e){if(e.stopPropagation(),confirm("Are sure to remove this variation?")){var t=$(this).closest("li").find(".variation_product_id").val();$(this).closest("li").hide("fast",(function(){$(this).remove()})),void 0!==t&&$.ajax({url:full_website_address+"/xhr/?module=products&page=deleteVariationProduct",type:"post",data:{product_id:t},success:function(e,t){}})}})),$(document).on("click","#setVariationPrice",(function(){setVariationPrice()})),$(window).keydown((function(e){if(13==e.keyCode&&$("#productVariationPrice").hasClass("in"))return e.preventDefault(),setVariationPrice(),$("#productVariationPrice").modal("hide"),!1})),$("#browseProduct").on("show.bs.modal",(function(e){BMS.PRODUCT.showProduct()})),$(document).on("change","#productHasExpiryDate",(function(){"1"===this.value?$(".productIntitalStock").prop("disabled",!0):$(".productIntitalStock").prop("disabled",!1)}));let barCcode="";$(document).on("keypress",(e=>{if("Enter"===e.key){var t="input"!==e.target.tagName.toLowerCase();""!==barCcode&&(isPosPage&&t?BMS.POS.addProduct(barCcode,!0):isPurchasePage&&t?BMS.PURCHASE.addProduct(barCcode,!0):isTransferStockPage&&t?BMS.STOCK_TRANSFER.addProduct(barCcode,!0):isProductReturnPage&&t?BMS.RETURN.addProduct(barCcode,!0):isStockEntryPage&&t?BMS.STOCK_ENTRY.addProduct(barCcode,!0):isAddProductPage&&$("#productCode").val(barCcode)),barCcode=""}else barCcode+=e.key})),$(document).on("click",".copyThis",(function(e){navigator.clipboard.writeText($(this).text())}));
\ No newline at end of file

--- assets/js/functions.js ---
@@ -0,0 +1,969 @@
+// Function to add thousand separator and decimal
+// TSD = thousand seprator and Decimal
+function tsd(num) {
+    return Number(num).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
+
+}
+
+/**
+ * 
+ * @param {number} ms The number of milliseconds
+ * Usage: await sleep(200);
+ * @returns 
+ */
+function sleep(ms) {
+    return new Promise(resolve => setTimeout(resolve, ms));
+}
+
+/**
+ * 
+ * @param {string} data The string or number which need to check empty or not
+ * @returns True if empty otherwise false
+ */
+function empty(data) {
+    return data === "" || data === null || data === 'null';
+}
+
+/**
+ * 
+ * @param {string} name the index name to retrived from local storage
+ * @returns the value of the item from local storage
+ */
+function get_options(name) {
+    return localStorage.getItem(name);
+}
+
+/**
+ * 
+ * @param {string|number} number The input number which need to be formated
+ * @param {number} decimalPlaces The decimal place/ How many number need after the decimal
+ * @param {string} decimalSeparator The decimal separtor
+ * @param {string} thousandSeparator The thousand seperator
+ * @param {string} currencySymbol Symbol of the currency
+ * @param {string} currencySymbolPosition Currency symbol position. left of right
+ * @returns The formated number
+ */
+function to_money(
+    number, 
+    decimalPlaces = null,
+    decimalSeparator = "",
+	thousandSeparator = "",
+	currencySymbol = "",
+	currencySymbolPosition = ""
+    ) {
+
+        var currencySymbol = empty(currencySymbol) ? get_options("currencySymbol") : currencySymbol;
+        var currencySymbolPosition = empty(currencySymbolPosition) ? get_options("currencySymbolPosition") : currencySymbolPosition;
+
+        var formatedNumber = format_number(number, decimalPlaces = decimalPlaces, decimalSeparator = decimalSeparator, thousandSeparator = thousandSeparator);
+
+        if( !empty(currencySymbolPosition) && currencySymbolPosition.toLowerCase === "right" ) {
+            formatedNumber = formatedNumber + " " +  currencySymbol;
+        } else {
+            formatedNumber = currencySymbol + " " + formatedNumber;
+        }
+
+        return formatedNumber;
+}
+
+function format_number(
+    number, 
+    decimalPlaces = null,
+    decimalSeparator = "",
+	thousandSeparator = ""
+    ) {
+
+        var number = Number(number);
+        var decimalPlaces = empty(decimalPlaces) ? get_options("decimalPlaces") : decimalPlaces;
+        var decimalSeparator = empty(decimalSeparator) ? get_options("decimalSeparator") : decimalSeparator;
+        var thousandSeparator = empty(thousandSeparator) ? get_options("thousandSeparator") : thousandSeparator;
+
+        /** Regex taken from VisioN: https://stackoverflow.com/a/14428340 */
+        var re = '\\d(?=(\\d{' + (3) + '})+' + (decimalPlaces > 0 ? '\\D' : '$') + ')',
+        num = number.toFixed(Math.max(0, ~~decimalPlaces));
+        var formatedNumber = (decimalSeparator ? num.replace('.', decimalSeparator) : num).replace(new RegExp(re, 'g'), '$&' + (thousandSeparator || ','));
+
+        return formatedNumber;
+
+}
+
+
+function getPurchaseProductList(saleid, saleRef) {
+
+    /** Hide the customer purchase list */
+    $("#showPurchaseList").hide();
+
+    /** Show the purchase product list */
+    $("#showPurchaseProductList").show();
+
+    BMS.fn.get(`customerPurchaseProductList&saleid=${saleid}`, purchaseList => {
+        
+        var purchaseListHtml = "";
+        purchaseList.forEach(item=> {
+
+            purchaseListHtml += `<li style="cursor: pointer" 
+                                    onClick="BMS.POS.addReturnProduct(
+                                        '${item.pid}', 
+                                        '${item.pn}', 
+                                        '${item.pg}', 
+                                        '${item.batch}', 
+                                        '${item.pu}', 
+                                        '${item.hed}',
+                                        '${item.stock_item_discount}', 
+                                        '${item.stock_item_price}', 
+                                        '${item.stock_item_qty}', 
+                                        '${item.stock_item_subtotal}'
+                                    )" class="item">
+                                    <a href="javascript:void(0)" class="product-title">${item.pn}
+                                        <span style="font-size: 12px;" class="label label-success pull-right"> <i class="fa fa-undo"></i> </span>
+                                        <span class="product-description">
+                                            ${item.stock_item_qty}${(item.pu === null) ? "" : item.pu} @ ${to_money(item.stock_item_price)}
+                                        </span>
+                                    </a>
+                                </li>`;
+
+        });
+
+        
+        $(".saleReferenceShow").html(`<p style="font-size: 14px; font-weight: bold;">Product list for: ${saleRef}</p>`);
+        $("#showPurchaseProductList ul").html(purchaseListHtml);
+
+    });
+
+}
+
+
+function backToPurchaseList() {
+    
+    /** show the customer purchase list */
+    $("#showPurchaseList").show();
+
+    /** Hide the purchase product list */
+    $("#showPurchaseProductList").hide();
+
+}
+
+ // Function check is input json or not
+function isJson(str) {
+    try {
+        JSON.parse(str);
+    } catch (e) {
+        return false;
+    }
+    return true;
+}
+
+function sumInputs(input) {
+    var sum = 0;
+
+    $(input).each(function(){
+        sum +=  $(this).val() === "" ? 0 : parseFloat( $(this).val() );
+    });
+
+    return sum;
+}
+
+
+function disableInput(selector, status=true) {
+
+    // Add a class called disableInput in which are not disable by default
+    $(selector).find("input, select, button, textarea").not('[disabled]').addClass("disableInput");
+
+    // Then desable/ Enable input which are not disable by default
+    $(".disableInput").prop("disabled", status);
+    
+}
+
+function ajaxFormSubmit(selector, clearForm = false) {
+
+    // Change the mouse icon to wait
+    $("body").toggleClass("wait");
+
+    var submitButton = $(selector).find(":submit");  // Select the submit button
+    var submitButtonText = $(submitButton).html();
+
+    // Add loading icon in the button after click.
+    $(submitButton).html(submitButtonText + " &nbsp;&nbsp; <i class='fa fa-spin fa-refresh'></i>");
+
+    var actionUrl = $(selector).attr("action");   // Get the form action url and store into postUrl
+    var formMethod = $(selector).attr("method");  // Get the form method and store in formMethod
+    var formData = new FormData(selector);       // Get all form data and store into formData 
+
+    /**
+     * Disable all input field until ajax request complete. 
+     */
+    disableInput(selector);
+
+    var that = selector;
+
+    $.ajax({
+        url: actionUrl,
+        type: formMethod,
+        data: formData,
+        cache: false,
+        contentType: false,
+        processData: false,
+        success: function (data, status) {
+
+            if (status == "success") {
+
+                /**
+                 * Display the sucess or error massage.  
+                 * Check If the return data is JSON
+                 */
+                if (isJson(data)) {
+
+                    // Parse json store in parsedJson
+                    var parsedJson = JSON.parse(data);
+
+                    //console.log(parsedJson);
+
+                    for (var key in parsedJson) {
+
+                        sweetAlert[key] = parsedJson[key];
+
+                    }
+
+                    // Show the success or error msg.
+                    Swal.fire({
+                        toast: sweetAlert.toast,
+                        position: sweetAlert.position,
+                        timer: sweetAlert.timer,
+                        showConfirmButton: sweetAlert.showConfirmButton,
+                        showCloseButton: sweetAlert.showCloseButton,
+                        icon: sweetAlert.icon,
+                        title: sweetAlert.title,
+                        text: sweetAlert.text,
+                        onClose: $("body").css('padding', '0px') // This is because, while close the sweet alert a 15px padding-right is keep.
+                    })
+
+                    /**
+                     * Hide the modal if we alert through sweet alert
+                     */
+                    $(".modal.in").modal("hide");
+
+                } else if (clearForm === true && data.indexOf("danger") < 1) { /** If the clearForm true then alert the success/error msg */
+
+                    // alert the msg
+                    BMS.fn.notify($(data).text());
+
+                    // Clear the form by loading the current page
+                    getContent("./");
+
+
+                } else if (undefined === $("#ajaxSubmitMsg").html()) {
+
+                    $('<div style="margin-top: 20px; text-align: left;"' + data + '</div>').insertAfter(submitButton).delay(5000).fadeOut(function () {
+                        $(this).remove();
+                    });
+
+                } else {
+
+                    //$(data).insertAfter('#ajaxSubmitMsg');
+
+                    // Comment out above and wirte below because it is not disappearing the last msg in bill pay in expense
+                    $("#ajaxSubmitMsg").html(data);
+
+                }
+
+
+                /**
+                 * Disable all input field until ajax request complete. 
+                 */
+                disableInput(that, false);
+
+                /**
+                 * Remove the loading icon from button
+                 */
+                $(submitButton).html(submitButtonText);
+
+                /**
+                 * Change the mouse icon to auto
+                 */
+                $("body").toggleClass("wait");
+
+                /**
+                 * Reload the dataTable after Insert, Update or delete records
+                 */
+                if ($('#dataTableWithAjax').length > 0) {
+                    $('#dataTableWithAjax').DataTable().ajax.reload(null, false);
+                }
+
+                if ($('#dataTableWithAjaxExtend').length > 0) {
+                    $('#dataTableWithAjaxExtend').DataTable().ajax.reload(null, false);
+                }
+
+            }
+
+        }
+
+    });
+
+}
+
+
+function sendBulkSMS(url) {
+
+    var table = $('#dataTableWithAjaxExtend').DataTable();
+
+    //var data = table.columns( 0 ).data();
+    var rows = table.rows({ selected: true }).indexes();
+    var data = table.cells(rows, 0).data();
+    var number = [];
+
+    $.each(data, function (key, num) {
+
+        if (num != "" || num != null || num != 'NULL' || num != 0 || num != '0') {
+            number.push(num);
+        }
+
+    });
+
+
+    $("#modalDefault").modal('show').find('.modal-content').load(url + encodeURI(number.join()));
+
+}
+
+// Function to load dynamic page
+function getContent(href, event = false) {
+
+    if (typeof session !== 'undefined') {
+        // terminate the call session when change the page
+        session.terminate();
+    }
+
+    // If Ctrl+Click fired then open in new tab
+    if (window.event && window.event.ctrlKey) {
+        return;
+    } else if (event) {
+        event.preventDefault();
+    }
+
+    // Remove the modal backdrop
+    $(".modal-backdrop.fade.in").remove();
+
+    $.get(href + "?contentOnly=true", function (data, status) {
+
+        // clear the value
+        defaultiDisplayLength = '';
+
+        // remove the all classes that are curently active
+        $("li").removeClass("active");
+
+        window.history.pushState(null, '', href);
+
+        // Generate the page slug
+        var pageSlug = href;
+
+        // Generate the page title
+        var pageTitle = "Not Found!";
+        if (getPageTitle[pageSlug] !== undefined) {
+            pageTitle = getPageTitle[pageSlug];
+        }
+
+        // Set the page title
+        window.document.title = pageTitle;
+
+        $(".dynamic-container").html(data);
+
+        jQuery.get(full_website_address + '/assets/js/initiator.min.js');
+
+    }).fail(function (data) {
+
+        if (data.statusText === "Not Found") {
+
+            $(".dynamic-container").html(`<div class="content-wrapper">
+                                        <section class="content-header">
+                                            <h1>404 Error Page</h1>
+                                        </section>
+                                        <section class="content">
+                                            <div class="error-page">
+                                                <h2 style="margin-top:0" class="headline text-yellow"> 404</h2>
+                                                <div class="error-content">
+                                                    <h3><i class="fa fa-warning text-yellow"></i> Oops! Page not found.</h3>
+                                                        <p>We could not find the page you were looking for.</p>
+                                                    </div>
+                                            </div>
+                                        </section>
+                                    </div>`);
+
+        } else {
+
+            $(".dynamic-container").html(`<div class="content-wrapper">
+                                        <section class="content-header">
+                                            <h1>No Internet</h1>
+                                        </section>
+                                        <section class="content">
+                                            <div class="error-page">
+                                                <div class="error-content">
+                                                    <h3><i class="fa fa-warning text-red"></i> No Internet</h3>
+                                                        <p>Try:</p>
+                                                        <ul>
+                                                            <li>Checking the network cables, modem, and router</li>
+                                                            <li>Reconnecting to Wi-Fi</li>
+                                                            <li>Running Network Diagnostics</li>
+                                                        </ul>
+                                                    </div>
+                                            </div>
+                                        </section>
+                                    </div>`);
+        }
+
+
+
+    });
+
+}
+
+
+
+/**
+    Main author: https://stackoverflow.com/a/32839413
+    Modified by: Khurshid Alam
+*/
+function combosVariations(options, optionIndex=0, results=[], current={}) {
+    
+    var allKeys = Object.keys(options);
+    var optionKey = allKeys[optionIndex];
+
+    var list = options[optionKey];
+
+    list.forEach( item => {
+
+        current[optionKey] = item;
+
+        if (optionIndex + 1 < allKeys.length) {
+            combosVariations(options, optionIndex + 1, results, current);
+        } else {
+            // The easiest way to clone an object.
+            var res = JSON.parse(JSON.stringify(current));
+            results.push(res);
+        }
+
+    });
+
+    return results;
+
+}
+
+function generateVariation() {
+
+    var att = [];
+
+    var units = $(".units:checked");
+    if(units.length > 0) {
+        
+        att["Units"]  = [];
+
+        $.each(units, function(ukey, uval) {
+            
+            att["Units"].push($(uval).val())
+
+        });
+
+    }
+
+
+    var editions = $(".editions:checked");
+    if(editions.length > 0) {
+        
+        att["Editions"]  = [];
+
+        $.each(editions, function(ekey, eVal) {
+            
+            att["Editions"].push($(eVal).val())
+
+        });
+
+    }
+
+
+    var attribute = $(".attribute");
+    $.each(attribute, function(key, val) {
+        
+        var attributeName = $(val).find(".attributeName").val();
+        var attributeValue = $(val).find("attributeValue, input:checked");
+
+        if(attributeValue.length > 0) {
+            att[attributeName] = [];
+        }
+
+        $.each(attributeValue, function(vKey, variation) {
+
+            att[attributeName].push($(variation).val());
+
+        });
+
+    });
+
+    var attributeCount = Object.keys(att).length;
+
+    if(attributeCount === 0) {
+
+        alert("Please select at least one Attribute.");
+
+    } else {
+
+        // If there already have variation then confirm to add again.
+        if($(".product-variation-list li").length > 0 && !confirm("There already have variations. Do you wish to generate again?") ) {
+            return;
+        }
+
+        var variation = combosVariations(att);
+
+        console.log(variation);
+
+        var variationHTML = "";
+        var timestamp = new Date().getTime();
+        var productPurchasePrice = $("#productPurchasePrice").val();
+        var productSalePrice = $("#productSalePrice").val();
+        var productDistributorDiscount = $("#productDistributorDiscount").val();
+        var productWholesalerDiscount = $("#productWholesalerDiscount").val();
+        var productRetailerDiscount = $("#productRetailerDiscount").val();
+        var productConsumerDiscount = $("#productConsumerDiscount").val();
+        var disableInitialStock = $("#productHasExpiryDate").val() === "1" ? "disabled" : "";
+
+        variation.forEach(items => {
+
+            var variationList = "";
+            var variationName = [];
+
+            var productCode = timestamp;
+            timestamp++;
+            
+
+            $.each(items, function(variation, value) {
+
+                variationList += `<input type="hidden" name="product_variation[${variation}][]" value="${value}">`;
+                
+                variationName.push(value);
+
+            });
+
+
+            var variationId = variationName.join("");
+            variationHTML += `<li style="overflow: auto;">
+                                    <div data-toggle="collapse" data-parent=".product-variation-list" href="#variation_${variationId}" style="cursor: pointer;">
+                                        <input type="radio" name="defaultVariation" value="${productCode}" class="defaultVariation stopPropagation" data-html="true" data-toggle="tooltip" data-placement="top" data-original-title="Mark this as <br/>default variation">
+                                        <span class="handle">
+                                            <i class="fa fa-ellipsis-v"></i>
+                                            <i class="fa fa-ellipsis-v"></i>
+                                        </span>
+                                        <span class="text">${variationName.join(", ")}</span>
+                                        <div class="tools">
+                                            <i class="fa fa-edit"></i>
+                                            <i class="fa fa-trash-o removeThisVariation"></i>
+                                        </div>
+                                    </div>
+                                    <div id="variation_${variationId}" class="panel-collapse collapse">
+                                        ${variationList}
+                                        <div style="border-top: 1px solid #eee; margin-top: 15px; padding-bottom: 0px;" class="box-body">
+                                            <div class="form-group required col-md-2">
+                                                <label><?php echo __("Code:"); ?></label>
+                                                <input type="text" name="productVariationCode[]" value="${productCode}" onclick="select()" class="productVariationCode form-control" required>
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Purchase Price"); ?></label>
+                                                <input type="number" name="productVariationPurchasePrice[]" value="${productPurchasePrice}" class="form-control productVariationPurchasePrice" step="any">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Sale Price"); ?></label>
+                                                <input type="number" name="productVariationSalePrice[]" value="${productSalePrice}" class="form-control productVariationSalePrice" step="any">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Distributor Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productDistributorVariationDiscount[]" value="${productDistributorDiscount}" placeholder="Eg: 10 or 20%" class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Wholesaler Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productWholesalerVariationDiscount[]" value="${productWholesalerDiscount}" placeholder="Eg: 10 or 20%"  class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Retailer Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productRetailerVariationDiscount[]" value="${productRetailerDiscount}" placeholder="Eg: 10 or 20%"  class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Consumer Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productConsumerVariationDiscount[]" value="${productConsumerDiscount}" placeholder="Eg: 10 or 20%"  class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Initial Stock"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="right" title="Opening or Initial stock of this variation" class="fa fa-question-circle"></i>
+                                                <input ${disableInitialStock} type="number" name="productVariationIntitalStock[]" class="form-control productIntitalStock" step="any">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label for="productVariationHasSubProduct"><?php echo __("Has sub product?"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="left" title="Select Yes if the variation has sub product." class="fa fa-question-circle"></i>
+                                                <select name="productVariationHasSubProduct[]" id="productVariationHasSubProduct" class="form-control" required>
+                                                    <option value="0">No</option>
+                                                    <option value="1">Yes</option>
+                                                </select>
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Weight:"); ?></label>
+                                                <input type="text" name="productVariationWeight[]" class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Width:"); ?></label>
+                                                <input type="text" name="productVariationWidth[]" class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Height:"); ?></label>
+                                                <input type="text" name="productVariationHeight[]" class="form-control">
+                                            </div>
+                                            
+                                            <div class="form-group col-md-6">
+                                                <label><?php echo __("Description:"); ?></label>
+                                                <textarea name="productVariationDescription[]" rows="3" class="form-control"></textarea>
+                                            </div>
+                                            <div class="imageContainer">
+                                                <div class="col-md-3">
+                                                    <div class="form-group">
+                                                        <label for=""><?php echo __("Variation Photo:"); ?></label>
+                                                        <div class="input-group">
+                                                            <span class="input-group-btn">
+                                                                <span class="btn btn-default btn-file">
+                                                                    <?php echo __("Select photo"); ?> <input type="file" name="productVariationPhoto[]" class="imageToUpload">
+                                                                </span>
+                                                            </span>
+                                                            <input type="text" class="form-control imageNameShow" readonly>
+                                                        </div>
+                                                        <div style="margin-top: 8px;" class="photoErrorMessage"></div>
+                                                    </div>
+                                                </div>
+                                                <div style="margin-bottom: 5px;" class="form-group col-md-3">
+                                                    <div style="height: 120px; text-align: center;" class="image_preview">
+                                                        <img style="margin: auto;" class="previewing" width="100%" height="auto" src="" />
+                                                    </div>
+                                                </div>
+                                            </div>
+                                        </div>
+                                    </div>
+                                </li>`;
+
+        });
+
+        $(".product-variation-list").append(variationHTML);
+
+    
+    }
+
+}
+
+
+function addVariation() {
+
+    var att = [];
+
+    var units = $(".units:checked");
+    if(units.length > 0) {
+        
+        att["Units"]  = [];
+
+        $.each(units, function(ukey, uval) {
+            
+            att["Units"].push($(uval).val())
+
+        });
+
+    }
+
+    var editions = $(".editions:checked");
+    if(editions.length > 0) {
+        
+        att["Editions"]  = [];
+
+        $.each(editions, function(ekey, eVal) {
+            
+            att["Editions"].push($(eVal).val())
+
+        });
+
+    }
+
+    var attribute = $(".attribute");
+    $.each(attribute, function(key, val) {
+        
+        var attributeName = $(val).find(".attributeName").val();
+        var attributeValue = $(val).find("attributeValue, input:checked");
+
+        if(attributeValue.length > 0) {
+            att[attributeName] = [];
+        }
+
+        $.each(attributeValue, function(vKey, variation) {
+
+            att[attributeName].push($(variation).val());
+
+        });
+
+    });
+
+    var attributeCount = Object.keys(att).length;
+
+    if(attributeCount === 0) {
+
+        alert("Please select at least one Attribute or Unit.");
+
+    } else {
+
+        var variationSelect = "";
+        for(let attribute in att) {
+        
+            variationSelect += `<div class="col-md-2 stopPropagation adjustFormGroupPadding"> 
+                                    <select style="" name="product_variation[${attribute}][]" class="form-control" required>`;
+                
+                variationSelect += `<option value="">Select ${attribute}...</option>`;
+                att[attribute].forEach(function(item, index) {
+                    variationSelect += `<option value='${item}'>${item}</option>`;
+                });
+
+            variationSelect += `</select> </div>`;
+
+        }
+
+        var productCode = new Date().getTime();        
+        var productPurchasePrice = $("#productPurchasePrice").val();
+        var productSalePrice = $("#productSalePrice").val();
+        var productDistributorDiscount = $("#productDistributorDiscount").val();
+        var productWholesalerDiscount = $("#productWholesalerDiscount").val();
+        var productRetailerDiscount = $("#productRetailerDiscount").val();
+        var productConsumerDiscount = $("#productConsumerDiscount").val();
+        var disableInitialStock = $("#productHasExpiryDate").val() === "1" ? "disabled" : "";
+
+        var variationHTML = `<li>
+                                    <div data-toggle="collapse" data-parent=".product-variation-list" href="#variation_${productCode}" style="cursor: pointer;">
+                                        <input type="radio" name="defaultVariation" value="${productCode}" class="defaultVariation stopPropagation" data-html="true" data-toggle="tooltip" data-placement="top" data-original-title="Mark this as <br/>default variation">
+                                        <span class="handle">
+                                            <i class="fa fa-ellipsis-v"></i>
+                                            <i class="fa fa-ellipsis-v"></i>
+                                        </span>
+                                        <span style="width: 90%; vertical-align: middle; margin-left: 20px;" class="text"> <div class="row">${variationSelect}</div> </span>
+                                        <div class="tools">
+                                            <i class="fa fa-edit"></i>
+                                            <i class="fa fa-trash-o removeThisVariation"></i>
+                                        </div>
+                                    </div>
+                                    <div id="variation_${productCode}" class="panel-collapse collapse in">
+                                        <div style="border-top: 1px solid #eee; margin-top: 15px; padding-bottom: 0px;" class="box-body">
+                                            <div class="form-group required col-md-2">
+                                                <label><?php echo __("Code:"); ?></label>
+                                                <input type="text" name="productVariationCode[]" value="${productCode}" onclick="select()" class="productVariationCode form-control" required>
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Purchase Price"); ?></label>
+                                                <input type="number" name="productVariationPurchasePrice[]" value="${productPurchasePrice}" class="form-control productVariationPurchasePrice" step="any">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Sale Price"); ?></label>
+                                                <input type="number" name="productVariationSalePrice[]" value="${productSalePrice}" class="form-control productVariationSalePrice" step="any">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Distributor Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productDistributorVariationDiscount[]" value="${productDistributorDiscount}" placeholder="Eg: 10 or 20%" class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Wholesaler Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productWholesalerVariationDiscount[]" value="${productWholesalerDiscount}" placeholder="Eg: 10 or 20%"  class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Retailer Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productRetailerVariationDiscount[]" value="${productRetailerDiscount}" placeholder="Eg: 10 or 20%"  class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Consumer Discount:"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="bottom" title="<?php echo __("Percentage or Fixed amount."); ?>" class="fa fa-question-circle"></i>
+                                                <input type="text" name="productConsumerVariationDiscount[]" value="${productConsumerDiscount}" placeholder="Eg: 10 or 20%"  class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Initial Stock"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="right" title="Opening or Initial stock of this variation" class="fa fa-question-circle"></i>
+                                                <input ${disableInitialStock} type="number" name="productVariationIntitalStock[]" class="form-control productIntitalStock" step="any">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label for="productVariationHasSubProduct"><?php echo __("Has sub product?"); ?></label>
+                                                <i data-toggle="tooltip" data-placement="left" title="Select Yes if the variation has sub product." class="fa fa-question-circle"></i>
+                                                <select name="productVariationHasSubProduct[]" id="productVariationHasSubProduct" class="form-control" required>
+                                                    <option value="0">No</option>
+                                                    <option value="1">Yes</option>
+                                                </select>
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Weight:"); ?></label>
+                                                <input type="text" name="productVariationWeight[]" class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Width:"); ?></label>
+                                                <input type="text" name="productVariationWidth[]" class="form-control">
+                                            </div>
+                                            <div class="form-group col-md-2">
+                                                <label><?php echo __("Height:"); ?></label>
+                                                <input type="text" name="productVariationHeight[]" class="form-control">
+                                            </div>
+                                            
+                                            <div class="form-group col-md-6">
+                                                <label><?php echo __("Description:"); ?></label>
+                                                <textarea name="productVariationDescription[]" rows="3" class="form-control"></textarea>
+                                            </div>
+                                            <div class="imageContainer">
+                                                <div class="col-md-3">
+                                                    <div class="form-group">
+                                                        <label for=""><?php echo __("Product Photo:"); ?></label>
+                                                        <div class="input-group">
+                                                            <span class="input-group-btn">
+                                                                <span class="btn btn-default btn-file">
+                                                                    <?php echo __("Select photo"); ?> <input type="file" name="productVariationPhoto[]" class="imageToUpload">
+                                                                </span>
+                                                            </span>
+                                                            <input type="text" class="form-control imageNameShow" readonly>
+                                                        </div>
+                                                        <div style="margin-top: 8px;" class="photoErrorMessage"></div>
+                                                    </div>
+                                                </div>
+                                                <div style="margin-bottom: 5px;" class="form-group col-md-3">
+                                                    <div style="height: 120px; text-align: center;" class="image_preview">
+                                                        <img style="margin: auto;" class="previewing" width="100%" height="auto" src="" />
+                                                    </div>
+                                                </div>
+                                            </div>
+                                        </div>
+                                    </div>
+                                </li>`;
+
+        $(".product-variation-list").append(variationHTML);
+        
+
+    }
+
+}
+
+
+function setVariationPrice() {
+
+    var purchasePrice = $("#productVariationPurchasePriceSetter").val();
+    var salePrice = $("#productVariationSelePriceSetter").val();
+    var discount = $("#productVariationDiscountSetter").val();
+
+    // Set prces for specific units
+    var getWhereUnit = $("#SetPricesWhereUnit").val();
+    if( getWhereUnit !== "" ) {
+        
+        $.each($(`input[name='product_variation[Units][]'][value='${getWhereUnit}'], select[name='product_variation[Units][]'] option:selected[value='${getWhereUnit}']`), function(key, val) {
+            
+            /** Set purchase price */
+            if(purchasePrice !== "") {
+                $(this).closest("li").find(".productVariationPurchasePrice").val(purchasePrice)
+            }
+
+            /** Set sale Price */
+            if(salePrice !== "") {
+                $(this).closest("li").find(".productVariationSalePrice").val(salePrice)
+            }
+
+            /** Set discount */
+            if(discount !== "") {
+                $(this).closest("li").find(".productVariationDiscount").val(discount)
+            }
+
+        });
+
+    } else {
+
+        /** Set purchase price */
+        if(purchasePrice !== "") {
+            $(".productVariationPurchasePrice").val(purchasePrice)
+        }
+
+        /** Set sale Price */
+        if(salePrice !== "") {
+            $(".productVariationSalePrice").val(salePrice)
+        }
+
+        /** Set discount */
+        if(discount !== "") {
+            $(".productVariationDiscount").val(discount)
+        }
+
+    }
+
+}
+
+/**
+ * Function for show visual product
+ * @param {*} param
+ */
+const showVisualProduct = ({
+    category = "",
+    brand = "",
+    edition = "",
+    generic = "",
+    author = "",
+    terms = "",
+    sort = ""
+} = {}) => {
+
+    $.ajax({
+        url: full_website_address + `/info/?module=data&page=productVisualList&catId=${category}&brand=${brand}&edition=${edition}&generic=${generic}&author=${author}&terms=${terms}&sort=${sort}`,
+        contentType: "application/json; charset=utf-8",
+        dataType: "json",
+        success: function(data, status) {
+
+
+            if (data !== null) {
+
+                var visualReport = "";
+                data.forEach(product => {
+
+                    var productPhoto = full_website_address;
+                    if (product.v && product.v > 0) {
+                        productPhoto += "/images/?for=products&id=" + product.id + "&q=YTozOntzOjI6Iml3IjtpOjIwMDtzOjI6ImloIjtpOjIyMDtzOjI6ImlxIjtpOjcwO30=" + "&v=" + product.v;
+                    } else {
+                        productPhoto += "/assets/images/noimage.png";
+                    }
+
+                    var bgColor = "bg-green";
+                    if (parseInt(product.stock) <= parseInt(product.alert)) {
+                        bgColor = "bg-red"
+                    } else if (parseInt(product.stock) <= 3000) {
+                        bgColor = "bg-orange"
+                    }
+
+                    visualReport += `<div class="col-md-4 col-sm-6 col-xs-12">
+                                            <div class="small-box ${bgColor}">
+                                                <div class="inner">
+                                                    <p style="font-size: 20px; font-weight: 600">
+                                                        ${product.name}
+                                                    </p>
+                                                    <p style="font-size: 24px; font-weight: 600; margin: 0;">
+                                                        ${format_number(product.sold_qty)} ${ product.sold_qty !== product.total_sold_qty ? '('+ format_number(product.total_sold_qty) +')' : '' } Sold <br/>
+                                                       ${product.stock} Stock
+                                                    </p>
+                                                </div>
+                                                <div class="icon">
+                                                    <img width='120' src='${productPhoto}' >
+                                                </div>
+                                                <a target="_blank" href="${full_website_address}/reports/product-report/?pid=${product.id}" class="small-box-footer"><?= __("View Report "); ?> <i class="fa fa-arrow-circle-right"></i></a>
+                                            </div>
+                                        </div>`;
+                });
+
+                $("#productVisualListContainer").html(visualReport);
+
+            } else {
+
+                $("#productVisualListContainer").html("<div class='alert alert-danger'>Sorry! no product found in this criteria.</div>");
+
+            }
+
+        }
+
+    });
+
+};

--- assets/js/initiator.js ---
@@ -0,0 +1,82 @@
+  // Active the current menu
+  var getCurrentURL = window.location.href.split("?");
+  $('ul.sidebar-menu a').each(function () {
+      if ($(this).attr('href') == getCurrentURL[0]) {
+          $(this).parents().css("display", "block");
+          $(this).parents().addClass("active");
+      }
+  });
+
+
+  // Get language
+  var language = BMS.fn.getCookie("lang") === undefined ? {} : JSON.parse(localStorage.getItem("dtLang"));
+
+  var isPosPage = typeof posPageUrl !== 'undefined' && posPageUrl ===  window.location.href;
+  var isPurchasePage = typeof purchasePageUrl !== 'undefined' && purchasePageUrl === window.location.href;
+  var isTransferStockPage = typeof transferStockPageUrl !== 'undefined' && transferStockPageUrl === window.location.href;
+  var isProductReturnPage = typeof productReturnPageUrl !== 'undefined' && productReturnPageUrl === window.location.href;
+  var isWastageSalePage = typeof wastageSalePageUrl !== 'undefined' && wastageSalePageUrl === window.location.href;
+  var isSpecimenCopyPage = typeof specimenCopyPageUrl !== 'undefined' && specimenCopyPageUrl === window.location.href;
+  var isScDistributionPage = typeof scDistributionPageUrl !== 'undefined' && scDistributionPageUrl === window.location.href;
+  var isAddProductPage = typeof addProductPageUrl !== 'undefined' && addProductPageUrl === window.location.href;
+  var isStockEntryPage = typeof stockEntryPageUrl !== 'undefined' && stockEntryPageUrl === window.location.href;
+  var isSaleOrderPage = typeof saleOrderPageUrl !== 'undefined' && saleOrderPageUrl === window.location.href;
+
+  // Select2 Normal
+
+  $(function () {
+    //Initialize Select2 Elements
+    $('.select2').select2();
+  });
+  
+  // End Select2
+
+  $(function() {
+
+    // Check if the DataTableAjaxPostUrl is defined
+    try {
+      if(!!DataTableAjaxPostUrl) {
+      }
+    } catch (error) {
+      return;
+    }
+    
+    var getDataTableNormal = $("#dataTableWithAjax").DataTable({
+      "processing": true,
+      "serverSide": true,
+      "ajax": {
+        url : DataTableAjaxPostUrl, // The URL is come from the table page.
+        type: "post" // Method, By default get.
+      },
+      language: language,
+      "columnDefs": [{
+        "targets": 'no-sort', // targets variable come from the table page. 
+        "orderable": false,
+        "searchable": false
+      }],
+    });
+
+  });
+  // End DataTable with Ajax With Less Functionality
+
+  /***** DataTable with Ajax With More Functionality ****/ 
+  $(function() {
+
+    if( $(".dataTableWithAjaxExtend").length > 0 ) {
+
+        $(".dataTableWithAjaxExtend").each(function() {
+
+            BMS.fn.dTable(this);
+            
+        });
+
+    } else if( $("#dataTableWithAjaxExtend").length > 0 ) {
+        
+        BMS.fn.dTable("#dataTableWithAjaxExtend");
+
+    }
+
+
+  });
+  // End DataTable with Ajax With More Functionality
+

--- assets/js/voiceMessage.js ---
@@ -0,0 +1,255 @@
+if(typeof sipCredentials === "undefined") {
+
+    $(`.voiceMessageTerminal`).append(`<li style='color: red;'>Sorry! No SIP credentials found.</li>`);
+    throw new Error("Sorry! No SIP credentials found");
+
+}
+
+var socket = new JsSIP.WebSocketInterface(sipCredentials.socket);
+var configuration = {
+  sockets  : [ socket ],
+  'uri': sipCredentials.uri, 
+  'password': sipCredentials.pass,
+  'username': sipCredentials.user,
+  'register': true
+};
+
+
+var allContactBrodcasted = false;
+
+var phone = new JsSIP.UA(configuration);
+
+var session;
+phone.on('newRTCSession', function(data){
+
+    session = data.session;
+
+});
+
+
+function sendVoiceMessage(number, audio, vm_id=""){
+
+    const voiceCall = new Audio(`${full_website_address}/assets/upload/media/sounds/voice-message/${audio}`);
+
+    // nill the sound in computer. But it will play normal sound on other side
+    voiceCall.volume = 0.000001;
+
+    voiceCall.onloadeddata = function() {
+
+        var callOptions = {
+            mediaConstraints: {audio: true, video: false},
+            mediaStream: voiceCall.captureStream(),
+        };
+
+        var completeSession = function(){
+            session = null;
+        };
+    
+        // making the call
+        phone.call(number, callOptions);
+    
+        session.on('confirmed',function(){
+            
+            voiceCall.play();
+            
+            // Terminate the call after ending of playing the audio
+            voiceCall.onended = function() {
+
+                BMS.fn.stopTimer(window['timer'+number]);
+
+                $(`.voiceMessageTerminal > li.${number}`).append("Played.");
+
+                session.terminate();
+
+            };
+
+            $(`.voiceMessageTerminal > li.${number}`).append("Playing... <span class='timer'></span> ");
+            window['timer'+number] = BMS.fn.startTimer(`li.${number}>.timer`);
+    
+        });
+
+        session.on('ended', function(e) {
+
+    
+            voiceCall.pause();
+            voiceCall.currentTime = 0;
+
+            BMS.fn.stopTimer(window['timer'+number]);
+
+            $(`.voiceMessageTerminal > li.${number}`).append("Ended...");
+            
+
+            
+            updateCallLog({
+                vm_id: vm_id,
+                number: number,
+                duration: Math.floor( (session.end_time.getTime() - session.start_time.getTime()) / 1000),
+                status: "Answered"
+            }); 
+            
+            completeSession();
+
+            if( allContactBrodcasted === false ) {
+
+                // Do next call
+                $(document).trigger("initiateNextCall");
+
+            }
+
+            
+        });
+    
+        session.on('failed', function(e) {
+
+            if( e.cause === "SIP Failure Code" ) {
+                        
+                $(`.voiceMessageTerminal > li.${number}`).append(`Not answered!`);
+
+                updateCallLog({
+                    vm_id: vm_id,
+                    number: number,
+                    duration: 0,
+                    status: "Not Answered"
+                });
+
+            } else {
+                
+                $(`.voiceMessageTerminal > li.${number}`).append("Busy!");
+
+                updateCallLog({
+                    vm_id: vm_id,
+                    number: number,
+                    duration: 0,
+                    status: "Busy"
+                });
+
+            }
+    
+            completeSession();
+
+            if( allContactBrodcasted === false ) {
+
+                // Do next call
+                $(document).trigger("initiateNextCall");
+
+            }
+            
+        });
+
+        session.on("icecandidate", function(candidate, ready) {
+
+            //console.log(candidate.candidate.candidate);
+            
+            candidate.ready();
+
+        });
+
+    };
+    
+}
+
+phone.start();
+
+
+
+// Start sending voice message
+var initiated = false;
+$(document).on("click", ".startSendingVoiceMessage", function() {
+
+    if(initiated == false) {
+        
+        initiated = true;
+        $(this).prop("disabled", true);
+
+        $(".voiceMessageTerminal").append("<li>Initiating... Please wait.</li>");
+
+        var vm_id = $(this).val();
+
+        // Reterving contacts
+        $.ajax({
+            url: full_website_address + "/xhr/?module=customer-support&page=getVoiceMessageContact",
+            type: "post",
+            data: {
+                id: $(this).val()
+            },
+            success: function(data, status) {
+
+                data = JSON.parse(data);
+
+                if(status == "success") {
+
+                    $(".voiceMessageTerminal").append(`<li>${data.description} is starting to send...</li>`);
+
+                    // Start sending to first three numbers
+                    var totalChanel = 2;
+                    var totalContacts = data.contacts.length;
+                    var maxDail = totalChanel < totalContacts ? totalChanel : totalContacts;
+
+                    var currentPosition = maxDail;
+
+                    for(var x=0; x<maxDail; x++ ){
+                            
+                        $(".voiceMessageTerminal").append(`<li class='${data.contacts[x]}'>${data.description} is sending to ${data.contacts[x]}. </li>`);
+                        sendVoiceMessage(data.contacts[x], data.record, vm_id);
+                        
+                    }
+
+                    if(totalContacts < 1) {
+                        $(".voiceMessageTerminal").append(`<li style='color: red'>Sorry! ${data.description} has no contacts or already sent.</li>`);
+                    }
+
+
+                    $(document).on("initiateNextCall", function() {
+
+                        // Mark as all contacts have daild
+                        if( currentPosition === totalContacts ) {
+                            
+                            allContactBrodcasted = true;
+
+                            $(".voiceMessageTerminal").append(`<li style='color: green'>${data.description} has been brodcasted to all given contacts.</li>`);
+
+                        } else {
+
+                            $(".voiceMessageTerminal").append(`<li class='${data.contacts[currentPosition]}'>${data.description} is sending to ${data.contacts[currentPosition]}. </li>`);
+                            sendVoiceMessage(data.contacts[currentPosition], data.record, vm_id);
+
+                            currentPosition++;
+
+                        }
+
+                    });
+
+                }
+
+            }
+        });
+
+    } else {
+        
+        $(`.voiceMessageTerminal`).append(`<li style='color: red;'>Already brodcasting a voice message.</li>`);
+
+    }
+    
+
+});
+
+
+function updateCallLog({vm_id="", number="", duration="", status=""}="") {
+
+    
+    $.ajax({
+        url: full_website_address + "/xhr/?module=customer-support&page=updateCallLog",
+        type: "post",
+        data:{
+            vm_id: vm_id,
+            number: number,
+            duration: duration,
+            status: status
+        },
+        success: function(status, data){}
+
+    });
+
+}
+
+JsSIP.debug.disable('JsSIP:*');
\ No newline at end of file

--- assets/js/voiceMessage.min.js ---
@@ -0,0 +1 @@
+if("undefined"==typeof sipCredentials)throw $(".voiceMessageTerminal").append("<li style='color: red;'>Sorry! No SIP credentials found.</li>"),new Error("Sorry! No SIP credentials found");var session,socket=new JsSIP.WebSocketInterface(sipCredentials.socket),configuration={sockets:[socket],uri:sipCredentials.uri,password:sipCredentials.pass,username:sipCredentials.user,register:!0},allContactBrodcasted=!1,phone=new JsSIP.UA(configuration);function sendVoiceMessage(e,s,i=""){const n=new Audio(`${full_website_address}/assets/upload/media/sounds/voice-message/${s}`);n.volume=1e-6,n.onloadeddata=function(){var s={mediaConstraints:{audio:!0,video:!1},mediaStream:n.captureStream()},a=function(){session=null};phone.call(e,s),session.on("confirmed",function(){n.play(),n.onended=function(){BMS.fn.stopTimer(window["timer"+e]),$(`.voiceMessageTerminal > li.${e}`).append("Played."),session.terminate()},$(`.voiceMessageTerminal > li.${e}`).append("Playing... <span class='timer'></span> "),window["timer"+e]=BMS.fn.startTimer(`li.${e}>.timer`)}),session.on("ended",function(s){n.pause(),n.currentTime=0,BMS.fn.stopTimer(window["timer"+e]),$(`.voiceMessageTerminal > li.${e}`).append("Ended..."),updateCallLog({vm_id:i,number:e,duration:Math.floor((session.end_time.getTime()-session.start_time.getTime())/1e3),status:"Answered"}),a(),!1===allContactBrodcasted&&$(document).trigger("initiateNextCall")}),session.on("failed",function(s){"SIP Failure Code"===s.cause?($(`.voiceMessageTerminal > li.${e}`).append("Not answered!"),updateCallLog({vm_id:i,number:e,duration:0,status:"Not Answered"})):($(`.voiceMessageTerminal > li.${e}`).append("Busy!"),updateCallLog({vm_id:i,number:e,duration:0,status:"Busy"})),a(),!1===allContactBrodcasted&&$(document).trigger("initiateNextCall")}),session.on("icecandidate",function(e,s){e.ready()})}}phone.on("newRTCSession",function(e){session=e.session}),phone.start();var initiated=!1;function updateCallLog({vm_id:e="",number:s="",duration:i="",status:n=""}=""){$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=updateCallLog",type:"post",data:{vm_id:e,number:s,duration:i,status:n},success:function(e,s){}})}$(document).on("click",".startSendingVoiceMessage",function(){if(0==initiated){initiated=!0,$(this).prop("disabled",!0),$(".voiceMessageTerminal").append("<li>Initiating... Please wait.</li>");var e=$(this).val();$.ajax({url:full_website_address+"/xhr/?module=customer-support&page=getVoiceMessageContact",type:"post",data:{id:$(this).val()},success:function(s,i){if(s=JSON.parse(s),"success"==i){$(".voiceMessageTerminal").append(`<li>${s.description} is starting to send...</li>`);for(var n=s.contacts.length,a=2<n?2:n,t=a,o=0;o<a;o++)$(".voiceMessageTerminal").append(`<li class='${s.contacts[o]}'>${s.description} is sending to ${s.contacts[o]}. </li>`),sendVoiceMessage(s.contacts[o],s.record,e);n<1&&$(".voiceMessageTerminal").append(`<li style='color: red'>Sorry! ${s.description} has no contacts or already sent.</li>`),$(document).on("initiateNextCall",function(){t===n?(allContactBrodcasted=!0,$(".voiceMessageTerminal").append(`<li style='color: green'>${s.description} has been brodcasted to all given contacts.</li>`)):($(".voiceMessageTerminal").append(`<li class='${s.contacts[t]}'>${s.description} is sending to ${s.contacts[t]}. </li>`),sendVoiceMessage(s.contacts[t],s.record,e),t++)})}}})}else $(".voiceMessageTerminal").append("<li style='color: red;'>Already brodcasting a voice message.</li>")}),JsSIP.debug.disable("JsSIP:*");
\ No newline at end of file

--- assets/upload/index.php ---
@@ -1,3 +0,0 @@
-<?php 
-echo "";
-?>
\ No newline at end of file

--- core/ajax/ajax_chat.php ---
@@ -0,0 +1,112 @@
+<?php
+
+
+
+if(isset($_GET['page']) and $_GET['page'] == "getChatUserData") {
+
+    if( empty( $_POST["userId"] ) ) {
+
+        echo json_encode( array(
+            "error" => true,
+            "msg"   => "Sorry! No data found."
+        ) );
+
+    } else {
+
+        // Select the chat user data
+        $selectChat = easySelectA(array(
+            "table"     => "users",
+            "fields"    => "emp_firstname, emp_lastname, user_emp_id, emp_positions",
+            "join"      => array(
+                "left join {$table_prefix}employees on emp_id = user_emp_id"
+            ),
+            "where"     => array(
+                "user_id"  => $_POST["userId"]
+            )
+        ));
+
+        if( $selectChat !== false ) {
+
+            $data = $selectChat["data"][0];
+
+            $fromUser = safe_input($_SESSION["uid"]);
+            $toUser = safe_input($_POST["userId"]);
+
+            // Retrieve the latest few messages
+            // $latest_msg = easySelectA(array(
+            //     "table"     => "messages as messages",
+            //     "fields"    => "msg_from_user as from_user, msg_to_user as to_user, msg_text, msg_datetime as datetime,
+            //                     concat(fromUserEmp.emp_firstname, ' ', fromUserEmp.emp_lastname) as from_username
+            //     ",
+            //     "join"      => array(
+            //         "left join {$table_prefix}users as fromUser on fromUser.user_id = msg_from_user",
+            //         "left join {$table_prefix}employees as fromUserEmp on fromUserEmp.emp_id = fromUser.user_emp_id"
+            //     ),
+            //     "where"     => array(
+            //         "messages.is_trash = 0 and msg_from_user in('{$fromUser}', '{$toUser}') "
+            //     ),
+            //     "limit" => array(
+            //         "start"     => 0,
+            //         "length"    => 10
+            //     ),
+            //     "orderby"   => array(
+            //         "msg_id" => "DESC",
+            //         "msg_datetime"  => "ASC"
+            //     )
+
+            // ));
+
+            $latest_msg = easySelectD("
+                SELECT data.*
+                FROM 
+                (
+                    SELECT
+                        msg_id, msg_from_user as from_user, msg_to_user as to_user, msg_text, msg_datetime as datetime,
+                        concat(fromUserEmp.emp_firstname, ' ', fromUserEmp.emp_lastname) as from_username
+                    FROM {$table_prefix}messages as messages
+                    left join {$table_prefix}users as fromUser on fromUser.user_id = msg_from_user
+                    left join {$table_prefix}employees as fromUserEmp on fromUserEmp.emp_id = fromUser.user_emp_id
+                    WHERE messages.is_trash = 0 and msg_from_user in('{$fromUser}', '{$toUser}')
+                    ORDER BY msg_id DESC
+                    LIMIT 0, 10
+                ) as data
+                order by data.msg_id ASC
+            ");
+
+
+            echo json_encode(array(
+                "name"      => $data["emp_firstname"] . " " . $data["emp_lastname"],
+                "position"  => $data["emp_positions"],
+                "latest_msg" => $latest_msg !== false ? $latest_msg["data"] : ""
+            ));
+
+
+        } else {
+
+            echo json_encode( array(
+                "error" => true,
+                "msg"   => "Sorry! No data found."
+            ) );
+
+        }
+
+    }
+
+}
+
+
+if(isset($_GET['page']) and $_GET['page'] == "getAvailableAnswer") {
+
+    if(rand(1,3) == 1){
+        /* Fake an error */
+        header("HTTP/1.0 404 Not Found");
+        die();
+    }
+    
+    /* Send a string after a random number of seconds (2-10) */
+    sleep(rand(2,10));
+    echo("Hi! Have a random number: " . rand(1,10));
+
+}
+
+?>
\ No newline at end of file

--- core/ajax/ajax_pos.php ---
@@ -2,14 +2,6 @@
 
 $getData = $_POST; 
 
-//var_dump(min($getData["productQnt"]) < 0);
-
-
-
-//print_r($getData);
-
-//exit();
-
 $salesDate = $getData["salesDate"];
 
 $customerId = $getData["customersId"];
@@ -18,7 +10,6 @@
 
 $salesShippingCharge = empty($getData["shippingCharge"]) ? 0 : $getData["shippingCharge"];
 $salesTotalItems = count($getData["productID"]);
-$salesNote = $getData["salesNote"];
 
 
 
@@ -44,7 +35,8 @@
             "sales_total_packets"           => $getData["totalPackets"],
             "sales_tariff_charges_details"  => serialize( array("tariff" => $getData["tariffChargesName"], "value" => $getData["tariffChargesAmount"]) ),
             "sales_by_pos"                  => 1,
-            "sales_note"                    => $salesNote,
+            "sales_note"                    => $getData["salesNote"],
+            "sales_shipping_address"        => $getData["salesShipingAddress"],
             "is_wastage"                    => ( isset($getData["saleOptions"]) and $getData["saleOptions"] === "wastage" ) ? 1 : 0
             //"is_return"                     => ( isset($getData["saleOptions"]) and $getData["saleOptions"] === "return" ) ? 1 : 0,
         ),
@@ -103,7 +95,8 @@
             "sales_total_packets"           => $getData["totalPackets"],
             "sales_tariff_charges_details"  => serialize( array("tariff" => $getData["tariffChargesName"], "value" => $getData["tariffChargesAmount"]) ),
             "sales_by_pos"                  => 1,
-            "sales_note"                    => $salesNote,
+            "sales_note"                    => $getData["salesNote"],
+            "sales_shipping_address"        => $getData["salesShipingAddress"],
             "is_wastage"                    => ( isset($getData["saleOptions"]) and $getData["saleOptions"] === "wastage" ) ? 1 : 0,
             //"is_return"                     => ( isset($getData["saleOptions"]) and $getData["saleOptions"] === "return" ) ? 1 : 0
             "is_exchange"                   => min($getData["productQnt"]) < 0 ? 1 : 0 // if there negative quantity then mark as exchange
@@ -117,7 +110,7 @@
 
         $returnError = array (
             "saleStatus"   => "error",
-            "msg"  =>  __("An unknown error occured. Please contact with the administrator.")
+            "msg"  =>  __("An unknown error occurred. Please contact with the administrator.")
         );
 
         echo json_encode($returnError);
@@ -408,6 +401,14 @@
 );
 
 
+// Delete previous payment return
+easyDelete(
+    "payments_return",
+    array(
+        "payments_return_sales_id"  => $sales_id
+    )
+);
+
 
 //echo "Sales Total amount: $salesTotalAmount \n";
 //echo "Total Product Discount $salesTotalProductDiscount \n";
@@ -612,7 +613,7 @@
     runQuery(substr_replace($insertSaleItems, ";", -1, 1));
 
 
-    if( !empty($conn->get_all_error)  ) {
+    if( !empty($get_all_db_error)  ) {
     
         echo json_encode(array (
             "saleStatus"   => "error",

--- core/ajax/ajax_pos_back.php ---
@@ -609,11 +609,11 @@
     runQuery(substr_replace($insertSaleItems, ";", -1, 1));
 
 
-    if( !empty($conn->get_all_error)  ) {
+    if( !empty($get_all_db_error)  ) {
 
         echo json_encode(array (
             "saleStatus"   => "error",
-            "msg"  =>  __($conn->get_all_error[0]. ". Please check the error log for more information.")
+            "msg"  =>  __($get_all_db_error[0]. ". Please check the error log for more information.")
         ));
 
         // If there have any error then rollback/undo the data

--- core/ajax/ajax_select2.php ---
@@ -417,7 +417,11 @@
 
     $selectProduct = easySelectA(array(
         "table"     => "products as product",
-        "fields"    => "product.product_id as product_id, brand_name, concat(product_name, ' ', if(product_group is null, '', product_group) ) as product_name, round(product_sale_price, 2) as product_sale_price, round(product_purchase_price, 2) as product_purchase_price, product_generic, concat( if(stock_in is null, 0, round(stock_in, 2)), ' ', if(product_unit is null, '', product_unit) ) as stock_in",
+        "fields"    => "product.product_id as product_id, brand_name, concat(product_name, ' ', if(product_group is null, '', product_group) ) as product_name, 
+                        round( COALESCE(purchase_price, product_purchase_price), 2) as product_purchase_price, 
+                        round( COALESCE(sale_price, product_sale_price), 2) as product_sale_price, 
+                        
+                        product_generic, concat( if(stock_in is null, 0, round(stock_in, 2)), ' ', if(product_unit is null, '', product_unit) ) as stock_in",
         "join"      => array(
             "left join (select -- make inner join to show only stock in product
                             vp_id,
@@ -426,6 +430,14 @@
                         {$warehouseFilter}
                         group by vp_id
             ) as pbs on pbs.vp_id = product.product_id",
+            // Because Of we have different price based on shop
+            "left join (SELECT
+                            product_id,
+                            purchase_price,
+                            sale_price
+                FROM {$table_prefix}product_price    
+                WHERE shop_id = '{$_SESSION['sid']}'
+            ) as product_price on  product_price.product_id = product.product_id ",
             "left join {$table_prefix}product_brands on brand_id = product_brand_id"
         ),
         "where"     => array (
@@ -478,21 +490,34 @@
 
     $selectProduct = easySelectA(array(
         "table"     => "products as product",
-        "fields"    => "product.product_id as product_id, brand_name, concat(product_name, ' ', if(product_group is null, '', product_group) ) as product_name, round(product_sale_price, 2) as product_sale_price, round(product_purchase_price, 2) as product_purchase_price, product_generic, if(stock_in is null, 0, round(stock_in, 2)) as stock_in",
+        "fields"    => "product.product_id as product_id, brand_name, concat(product_name, ' ', if(product_group is null, '', product_group) ) as product_name, 
+
+                        round( COALESCE(purchase_price, product_purchase_price), 2) as product_purchase_price, 
+                        round( COALESCE(sale_price, product_sale_price), 2) as product_sale_price, 
+                        
+                        product_generic, if(stock_in is null, 0, round(stock_in, 2)) as stock_in",
         "join"      => array(
             "left join (select
                             vp_id,
                             sum(base_stock_in/base_qty) as stock_in
                         from product_base_stock
                         group by vp_id
             ) as pbs on pbs.vp_id = product.product_id",
+            // Because Of we have different price based on shop
+            "left join (SELECT
+                            product_id,
+                            purchase_price,
+                            sale_price
+                FROM {$table_prefix}product_price    
+                WHERE shop_id = '{$_SESSION['sid']}'
+            ) as product_price on product_price.product_id = product.product_id ",
             "left join {$table_prefix}product_brands on brand_id = product_brand_id"
         ),
         "where"     => array (
             "product.is_trash = 0 and is_disabled = 0 and product_parent_id is null {$searchQuery}"
         ),
         "orderby"   => array(
-            "product_id"    => "DESC"
+            "product.product_id"    => "DESC"
         ),
         "limit" => array(
             "start" => 0,
@@ -565,7 +590,7 @@
 // Select2 Customer List
 if(isset($_GET['page']) and $_GET['page'] == "customerList") {
     
-    $search = isset($_GET['q']) ? $_GET['q'] : "";
+    $search = isset($_GET['q']) ? safe_input($_GET['q'])  : "";
 
     $selectCustomer = easySelectA(array(
         "table"     => "customers as customer",
@@ -576,9 +601,11 @@
         ),
         "where"     => array(
             "customer.is_trash = 0",
-            " and customer.customer_name LIKE" =>  "%{$search}%",
+            " and ( customer.customer_name LIKE '%{$search}%'",
             " or customer_phone LIKE" =>  "{$search}%",
-            " or district_name LIKE" =>  "{$search}%"
+            " or district_name LIKE" =>  "{$search}%",
+            " or customer_id" =>  $search,
+            ")"
         ),
         "limit"     => array(
             "start" => 0,
@@ -591,7 +618,7 @@
     foreach($selectCustomer["data"] as $customers) {
         $select2Json[] = array(
             'id' => $customers['customer_id'],
-            'text' => "{$customers['customer_name']}, {$customers['upazila_name']}, {$customers['district_name']}"
+            'text' => "{$customers['customer_name']} ({$customers['customer_id']}), {$customers['upazila_name']}, {$customers['district_name']}"
         );
     }
 
@@ -686,6 +713,7 @@
         array (
             "is_trash = 0 and (company_name LIKE '%". safe_input($search) ."%'",
             " OR company_phone LIKE" =>  "%{$search}%",
+            " OR company_id" =>  $search,
             ")",
             " AND company_type" => $companyType
         ),
@@ -701,7 +729,7 @@
     foreach($selectCompany["data"] as $company) {
         $select2Json[] = array(
             'id' => $company['company_id'],
-            'text' => $company['company_name']
+            'text' => $company['company_name'] . " ({$company['company_id']})"
         );
     }
 
@@ -1231,4 +1259,40 @@
 
 }
 
+
+
+// Select2 Subject List
+if(isset($_GET['page']) and $_GET['page'] == "callReasonList") {
+    
+    $search = isset($_GET['q']) ? $_GET['q'] : "";
+
+    $selectPersonTag = easySelectA(array(
+        "table"   => "calls",
+        "fields"  => "call_reason",
+        "where"   => array(
+            "call_reason LIKE" =>  "%{$search}%"
+        ),
+        "groupby" => "call_reason",
+        "limit"   => array (
+            "start" => 0,
+            "length" => 25
+        )
+    ));
+
+    $select2Json = [];
+    
+    if($selectPersonTag) {
+        foreach($selectPersonTag["data"] as $subject) {
+            $select2Json[] = array(
+                'id' => $subject['call_reason'],
+                'text' => $subject['call_reason']
+            );
+        }
+    }
+
+    echo html_entity_decode(json_encode($select2Json));
+
+}
+
+
 ?>
\ No newline at end of file

--- core/ajax/ajax_sms.php ---
@@ -20,10 +20,7 @@
 
                 <div class="form-group">
                   <label for="message">Message:</label>
-                  <textarea name="message" id="message" cols="30" rows="3" class="form-control">
-                  Dear Sir, Assalamu Alaikum. Please collect your salary from the account section.
-- <?php echo get_options("companyName"); ?>
-                  </textarea>
+                  <textarea name="message" id="message" cols="30" rows="3" class="form-control">Dear Sir, Assalamu Alaikum. Please collect your salary from the account section. - <?php echo get_options("companyName"); ?></textarea>
                 </div>
               </div>
          
@@ -90,14 +87,16 @@
 //*******************************   sendSMSCommand ******************** */
 if(isset($_GET['page']) and $_GET['page'] == "sendSMSCommand") {
 
-      if(send_sms(
+    if(send_sms(
         str_replace(";", ",", safe_entities($_POST["numbers"]) ),
         safe_entities($_POST["message"])
-      )) {
+    )) {
 
         echo "<div class='alert alert-success'>SMS Sent Successfully.</div>";
 
-      }
+    } else {
+        _e("Sorry! Unable to send sms");
+    }
 
 }
 

--- core/config.php ---
@@ -20,12 +20,10 @@
  */
 
 
-
 // Site Configuration
 define('ACTIVE_THEME', 'rui');
-define('TABLE_PREFIX', 'bms_');
+define('TABLE_PREFIX', 'ro_');
 define('AUTO_LOGOUT_TIME', 300); // in Second. Default is five minutes
-define('VERSION', '2.0.2');
 
 // Directory Configuration
 define('DIR_CORE', DIR_BASE . 'core/');
@@ -51,15 +49,15 @@
 $_SETTINGS["MAX_UPLOAD_SIZE"] = 8;
 
 /**
- * Define allowed extension and mime type.
+ * Define allowed mime type.
  * 
  * Can be seen common mime type here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
  * or
  *  https://www.iana.org/assignments/media-types/media-types.xhtml
  * 
  */
 
-// Vaild image type for upload. must be in lower case
+// Valid image type for upload. must be in lower case
 $_SETTINGS["VALID_IMAGE_TYPE_FOR_UPLOAD"] = array(
     "jpeg"  => array("image/jpeg"),
     "jpg"   => array("image/jpeg"),
@@ -89,7 +87,6 @@
     "webm"  => array("video/webm"),
     "mp4"   => array("video/mp4")
 );
-
 // Page title variable. All page title will be included here
 $_SETTINGS["PAGE_TITLE"] = array();
 

--- core/functions.php ---
@@ -640,7 +640,7 @@ function current_user_can_visit_this_page() {
  * @param array		$duplicateCheck	Optional. For checking the data if exists on the DB. The array is same as easySelect() function's $where.
  * @param bool      @extraInfo      Optional. If needs last_insert_id the set it true. Default is false
  * 
- * @return string|bool	Return true if data is successfully inserted into the table, otherwise it will throw the mysql error.
+ * @return string|bool|array	Return true if data is successfully inserted into the table, otherwise it will throw the mysql error.
  */
 function easyInsert(
     string $table,
@@ -650,7 +650,8 @@ function easyInsert(
     ) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
+    global $conn;           // MySQL connection variable.
+    global $get_all_db_error;	// Error variable
     $fields = "";			// The field variable will store all table field.
     $fieldsValue = "";		// The fieldValue variable will sotre all filed value
 
@@ -729,7 +730,7 @@ function easyInsert(
         // create_log($sqlQuery, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         // return error msg
         return $conn->error;
@@ -764,7 +765,7 @@ function easyInsert(
  * @param array 	$orderBy	Optional. How the data will show. ASC OR DESC
  * @param array     $limit      Optional. Must be in numeric value. 
  * 
- * @return array/bool			Return all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.
+ * @return array|bool|string			Return all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.
  */
 function easySelect(
     string $table, 
@@ -776,8 +777,9 @@ function easySelect(
     ) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
-    $dataFromDB = [];
+    global $conn;           // MySQL connection variable.
+    global $get_all_db_error;	// Error variable
+
 
     // if field empty then input a star (*)
     if(empty($field)) {
@@ -894,19 +896,13 @@ function easySelect(
         create_log($conn->error, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         return $conn->error; // Return the error
     }
 
     // Check if there is more then Zero (0) result.
     if($getResult->num_rows > 0) {
-        
-
-        // $countTotalFilteredRow = "SELECT count(*) as totalFilteredRow FROM {$table_prefix}{$table}";
-        // $countTotalFilteredRow .= " {$joinClues}";
-        // $countTotalFilteredRow .= empty($whereClause) ? "" : " WHERE {$whereClause}";
-        // $countTotalFilteredRow = $conn->query($countTotalFilteredRow)->fetch_all(true)[0]["totalFilteredRow"];
 
         $countTotalFilteredRow = $conn->query("SELECT found_rows() as totalFilteredRow;")->fetch_all(true)[0]["totalFilteredRow"];
 
@@ -936,8 +932,9 @@ function easySelect(
 function easySelectA(array $query) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
-    $dataFromDB = [];
+    global $conn;           // MySQL connection variable.
+    global $get_all_db_error;	// Error variable
+
     $table = $fields = $join = $where = $groupby = $orderBy = $limit = "";
 
     // Lower case all key name.
@@ -1108,7 +1105,7 @@ function easySelectA(array $query) {
         create_log($conn->error, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         return $conn->error; // Return the error
 
@@ -1145,14 +1142,15 @@ function easySelectA(array $query) {
  * 
  * @param $query    The query which will run
  * 
- * @return array/bool			Return all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.
+ * @return array|bool			Return all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.
  * 
  */
 function easySelectD($query) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
-    $dataFromDB = [];
+    global $conn;		    // MySQL connection variable.
+    global $get_all_db_error;	// Error variable
+
 
     /* echo $query;
     exit(); */
@@ -1166,7 +1164,7 @@ function easySelectD($query) {
         create_log($conn->error, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         return $conn->error; // Return the error
     }
@@ -1190,7 +1188,8 @@ function easySelectD($query) {
 
 function runQuery($query){
    
-    global $conn;			// MySQL connection variable.
+    global $conn;		// MySQL connection variable.
+    global $get_all_db_error;	// Error variable
 
     $runQuery = $conn->query($query);
 
@@ -1201,7 +1200,7 @@ function runQuery($query){
         create_log($conn->error, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         return $conn->error; // Return the error
 
@@ -1228,8 +1227,9 @@ function easyDelete(
     ) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
-
+    global $conn;   		// MySQL connection variable.
+    global $get_all_db_error;	// Error variable
+    
 
     // Check if the data exists or not
     $DataToByDeleted = easySelect(
@@ -1263,7 +1263,7 @@ function easyDelete(
         create_log($conn->error, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         return $conn->error;
 
@@ -1288,7 +1288,8 @@ function easyPermDelete(
     ) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
+    global $conn;       	// MySQL connection variable.
+    global $get_all_db_error;	// Error variable
 
     // Check if the data exists or not
     $DataToByDeleted = easySelect(
@@ -1341,7 +1342,8 @@ function easyUpdate(
     ) {
 
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
+    global $conn;   		// MySQL connection variable.
+    global $get_all_db_error;	// Error variable
 
     // Check if the data exists or not
     if(easySelect(
@@ -1413,7 +1415,7 @@ function easyUpdate(
         create_log($conn->error, debug_backtrace());
 
         // Keep the transaction error record
-        $conn->get_all_error[] = $conn->error;
+        $get_all_db_error[] = $conn->error;
 
         return $conn->error;
 
@@ -1431,7 +1433,8 @@ function easyUpdate(
  */
 function save_query($query) {
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
+    global $conn;   		// MySQL connection variable.
+
     $query = json_encode($query);
     $conn->query("INSERT INTO {$table_prefix}latest_queries (query_value) VALUES ($query)");
 
@@ -1458,6 +1461,48 @@ function save_deleted_date($table, $data) {
 
 }
 
+
+
+function isValidFile( array $file, string $type) {
+
+
+    global $_SETTINGS;
+
+    $mimeType = strtolower($file["type"]);
+    $extension = explode(".", $file["name"]);
+    $extension = end($extension);
+    
+    $maxUploadSize = $_SETTINGS["MAX_UPLOAD_SIZE"] * 1024 * 1024;
+
+    if ($maxUploadSize < $file["size"]) {
+
+        return false;
+
+    }
+
+    $validFileForUpload = [];
+    switch($type) {
+        case "image":       $validFileForUpload = $_SETTINGS["VALID_IMAGE_TYPE_FOR_UPLOAD"]; break;
+        case "document":    $validFileForUpload = $_SETTINGS["VALID_DOCUMENT_TYPE_FOR_UPLOAD"]; break;
+        case "video":       $validFileForUpload = $_SETTINGS["VALID_VIDEO_TYPE_FOR_UPLOAD"]; break;
+        case "audio":       $validFileForUpload = $_SETTINGS["VALID_AUDIO_TYPE_FOR_UPLOAD"]; break;
+        case "program":     $validFileForUpload = $_SETTINGS["VALID_PROGRAM_TYPE_FOR_UPLOAD"]; break;
+        case 'all':         $validFileForUpload = array_merge($_SETTINGS["VALID_IMAGE_TYPE_FOR_UPLOAD"], $_SETTINGS["VALID_DOCUMENT_TYPE_FOR_UPLOAD"]); break;
+    }
+
+    // Validate both file extension and mime type
+    if( isset( $validFileForUpload[$extension] ) AND in_array( $mimeType, $validFileForUpload[$extension] )  ) {
+
+       return true;
+
+    } else {
+
+        return false;
+
+    }
+    
+}
+
 /**
  * @since 0.1
  * 
@@ -1466,7 +1511,6 @@ function save_deleted_date($table, $data) {
  * @param string    $location       Optional. Where the uploaded file has stored. Default is db and return an blob string
  * 
  */
-
 function easyUpload( 
     array $file, 
     string $location="db",
@@ -1561,6 +1605,9 @@ function easyUpload(
     
 }
 
+
+
+
 function easyUpload_back(
     string $fileInputName, 
     string $type="image",
@@ -2080,7 +2127,8 @@ function accounts_balance(int $accounts_id) {
 
  function add_login_info(int $user_id) {
     global $table_prefix;	// table prefix;
-    global $conn;			// MySQL connection variable.
+    global $conn;
+global $get_all_db_error;			// MySQL connection variable.
 
     $user_ip = safe_input(get_ipaddr());
     $user_aggent = safe_input($_SERVER['HTTP_USER_AGENT']);

--- core/loader.php ---
@@ -4,19 +4,25 @@
  * @since 0.1
  */
  
-// Set the php coockie id only visible over http
-ini_set('session.cookie_httponly', true);
+// Set the php cookie id only visible over http
+//ini_set('session.cookie_httponly', true);
 
 // Prevent Loading iframe to other website
-header("X-Frame-Options: DENY");
+header("X-Frame-Options: SAMEORIGIN");
 
-// Check if the PHP version is at leat 7.0
+// Check if the PHP version is at least 7.0
 if( version_compare(PHP_VERSION, '7.0.0') <= 0 ) {
     header('HTTP/1.0 403 Forbidden');
     die("BumSys require at least PHP 7.0.0. You are running PHP " . PHP_VERSION);
 }
 
-// generate a sha1 string for session coockie
+// If there is no user agent
+if( !isset( $_SERVER["HTTP_USER_AGENT"] ) ) {
+    header('HTTP/1.0 403 Forbidden');
+    die("<strong>Error:</strong> You have no permission to access this server.");
+}
+
+// generate a sha1 string for session cookie
 $sha1 = sha1($_SERVER["HTTP_USER_AGENT"].$_SERVER["REMOTE_ADDR"]);
 
 // Set the session name
@@ -49,7 +55,7 @@
         CASE WHEN option_name = 'decimalPlaces' THEN @decimalPlace:= option_value END, 
         CASE WHEN option_name = 'mysqlTimeFormat' THEN @mysqlTimeFormat:= option_value END,
         CASE WHEN option_name = 'mysqlDateFormat' THEN @mysqlDateFormat:= option_value END
-    FROM {$table_prefix}options WHERE option_name in('decimalPlaces', 'mysqlDateFormat', 'mysqlTimeFormat');
+    FROM ro_options WHERE option_name in('decimalPlaces', 'mysqlDateFormat', 'mysqlTimeFormat');
 ");
 
 // Get the page slug
@@ -63,7 +69,7 @@
     // Enable zg compression
     //ob_start("ob_gzhandler");
 
-    // Santize the output if the page is not for dynamic images load
+    // Sanitize the output if the page is not for dynamic images load
     // will be not sanities for "js", "css" if it required
     if( !in_array($pageSlug, array("images", "barcode") ) ) {
         //ob_start("sanitize_output");
@@ -90,7 +96,7 @@
 // Include the default menu
 require "menu.php";
 
-// Inclue the default permissions List
+// Include the default permissions List
 require "permissions.php";
 
 

--- core/menu.php ---
@@ -53,13 +53,13 @@
     "t_link"    => full_website_address() . "/accounts/total-receivable/",
     "title"     => "Receivable Amount",
     "t_icon"    => "fa fa-money",
-    "__?"       => current_user_can("transfer_money.View || transfer_money.Add || transfer_money.Edit || transfer_money.Delete")
+    "__?"       => current_user_can("amount_receivable_report.View")
 );
-$default_menu["Accounts"]["Payble Report"] = array(
+$default_menu["Accounts"]["Payable Report"] = array(
     "t_link"    => full_website_address() . "/accounts/total-payable/",
     "title"     => "Payable Amount",
     "t_icon"    => "fa fa-money",
-    "__?"       => current_user_can("transfer_money.View || transfer_money.Add || transfer_money.Edit || transfer_money.Delete")
+    "__?"       => current_user_can("amount_payable_report.View")
 );
 $default_menu["Accounts"]["Closings"] = array(
     "t_link"    => full_website_address() . "/accounts/closings/",
@@ -291,6 +291,13 @@
     "t_icon"    => "fa fa-plus",
     "__?"       => current_user_can("wastage_sales.Add")
 );
+$default_menu["Sales"]["Discounts"] = array(
+    "t_link"    => full_website_address() . "/sales/discounts/",
+    "title"     => "New Wastage Sale",
+    "t_icon"    => "fa fa-plus",
+    "__?"       => current_user_can("wastage_sales.Add")
+);
+
 
 // Product default_menu
 $default_menu["Products"] = array(
@@ -339,7 +346,7 @@
     "t_link"    => full_website_address() . "/products/product-editions/",
     "title"     => "Product Editions",
     "t_icon"    => "fa fa-filter",
-    "__?"       => current_user_can("product_units.View || product_units.Add || product_units.Edit || product_units.Delete")
+    "__?"       => current_user_can("product_variations.View || product_variations.Add || product_variations.Edit || product_variations.Delete")
 );
 $default_menu["Products"]["Brands"] = array(
     "t_link"    => full_website_address() . "/products/product-brands/",
@@ -391,7 +398,7 @@
     "t_icon"    => "fa fa-shopping-bag",
     "__?"       => current_user_can("product_purchases.View || product_purchases.Add || product_purchases.Edit || product_purchases.Delete")
 );
-$default_menu["Stock Management"]["New Purchases"] = array(
+$default_menu["Stock Management"]["New Purchase"] = array(
     "t_link"    => full_website_address() . "/stock-management/new-purchase/",
     "title"     => "New Product Purchase",
     "t_icon"    => "fa fa-plus",
@@ -402,14 +409,14 @@
     "t_link"    => full_website_address() . "/stock-management/purchase-return-list/",
     "title"     => "Purchase Return List",
     "t_icon"    => "fa fa-undo",
-    "__?"       => current_user_can("product_return.View || product_return.Add || product_return.Edit || product_return.Delete")
+    "__?"       => current_user_can("purchase_return.View || purchase_return.Add || purchase_return.Edit || purchase_return.Delete")
 );
 $default_menu["Stock Management"]["New Purchase Return"] = array(
     "t_link"    => full_website_address() . "/stock-management/new-purchase-return/",
     "title"     => "New Purchase Return",
     "t_icon"    => "fa fa-plus",
     "dload"     => true,
-    "__?"       => is_biller() and current_user_can("product_return.Add")
+    "__?"       => is_biller() and current_user_can("purchase_return.Add")
 );
 $default_menu["Stock Management"]["Stock Transfer List"] = array(
     "t_link"    => full_website_address() . "/stock-management/stock-transfer-list/",
@@ -428,14 +435,14 @@
     "t_link"    => full_website_address() . "/stock-management/sales-return-list/",
     "title"     => "Sale Return List",
     "t_icon"    => "fa fa-undo",
-    "__?"       => current_user_can("product_return.View || product_return.Add || product_return.Edit || product_return.Delete")
+    "__?"       => current_user_can("sale_return.View || sale_return.Add || sale_return.Edit || sale_return.Delete")
 );
 $default_menu["Stock Management"]["New Sales Return"] = array(
     "t_link"    => full_website_address() . "/stock-management/new-sales-return/",
     "title"     => "New Sale Return",
     "t_icon"    => "fa fa-plus",
     "dload"     => true, // This
-    "__?"       => is_biller() and current_user_can("product_return.Add")
+    "__?"       => is_biller() and current_user_can("sale_return.Add")
 );
 $default_menu["Stock Management"]["Batches"] = array(
     "t_link"    => full_website_address() . "/stock-management/batch-list/",
@@ -582,13 +589,13 @@
     "t_link"    => full_website_address() . "/settings/backup/",
     "title"     => "Database and File Backup",
     "t_icon"    => "fa fa-database", // fa fa-download
-    "__?"       => current_user_can("module.View || module.Edit || module.Delete || module.Add")
+    "__?"       => current_user_can("settings_backup.View || settings_backup.Add")
 );
 $default_menu["Settings"]["Modules"] = array(
     "t_link"    => full_website_address() . "/settings/modules/",
     "title"     => "Modules",
     "t_icon"    => "fa fa-cube",
-    "__?"       => current_user_can("module.View || module.Edit || module.Delete || module.Add")
+    "__?"       => current_user_can("settings_module.View || settings_module.Edit || settings_module.Delete || settings_module.Add")
 );
 $default_menu["Settings"]["System Settings"] = array(
     "t_link"    => full_website_address() . "/settings/system-settings/",
@@ -664,6 +671,12 @@
     "t_icon"    => "fa fa-cubes",
     "__?"       => current_user_can("reports_product.View")
 );
+$default_menu["Reports"]["Income Report"] = array(
+    "t_link"    => full_website_address() . "/reports/income-report/",
+    "title"     => "Income Report",
+    "t_icon"    => "fa fa-cubes",
+    "__?"       => current_user_can("reports_sales.View")
+);
 $default_menu["Reports"]["Product Visual Report"] = array(
     "t_link"    => full_website_address() . "/reports/product-visual-report/",
     "title"     => "Product Visual Report",
@@ -760,4 +773,10 @@
     "t_icon"    => "fa fa-link",
     "dload"     => true,
     "__?"       => current_user_can("products.Add")
+);
+$default_menu["Hidden"]["Edit Specimen Copy"] = array (
+    "t_link"    => full_website_address() . "/marketing/edit-specimen-copy/",
+    "title"     => "Edit Specimen Copy",
+    "t_icon"    => "fa fa-university",
+    "__?"       => current_user_can("specimen_copy.Edit")
 );
\ No newline at end of file

--- core/permissions.php ---
@@ -10,6 +10,8 @@
 $defaultPermission["incomes"] = "";
 $defaultPermission["capital"] = "";
 $defaultPermission["transfer_money"] = "";
+$defaultPermission["amount_receivable_report"] = array("View");
+$defaultPermission["amount_payable_report"] = array("View");
 $defaultPermission["closings"] = "";
 $defaultPermission["accounts_ledger"] = array("View");
 $defaultPermission["employee_ledger"] = array("View");
@@ -30,16 +32,13 @@
 $defaultPermission["payment_adjustment"] = "";
 $defaultPermission["payment_categories"] = "";
 $defaultPermission["products"] = "";
-$defaultPermission["product_purchases"] = "";
-$defaultPermission["stock_entry"] = "";
 $defaultPermission["product_category"] = "";
 $defaultPermission["product_authors"] = "";
 $defaultPermission["product_generics"] = "";
 $defaultPermission["product_brands"] = "";
 $defaultPermission["product_attributes"] = "";
 $defaultPermission["product_variations"] = "";
 $defaultPermission["product_units"] = "";
-$defaultPermission["warehouse"] = "";
 
 $defaultPermission["income_advance_collection"] = "";
 $defaultPermission["income_received_payments"] = "";
@@ -53,12 +52,18 @@
 $defaultPermission["myshop_pos_sales"] = "";
 $defaultPermission["myshop_discount"] = "";
 
-$defaultPermission["stock_management_order_list"] = "";
+
+$defaultPermission["stock_entry"] = "";
+$defaultPermission["product_purchases"] = "";
+$defaultPermission["purchase_return"] = "";
 $defaultPermission["stock_transfer"] = "";
+$defaultPermission["sale_return"] = "";
+$defaultPermission["batches"] = "";
+$defaultPermission["warehouse"] = "";
+
+$defaultPermission["stock_management_order_list"] = "";
 
-$defaultPermission["product_return"] = "";
 $defaultPermission["sale_pos_sale"] = array("View");
-$defaultPermission["sale_return"] = array("View");
 $defaultPermission["wastage_sales"] = "";
 $defaultPermission["peoples_user"] = "";
 $defaultPermission["peoples_employee"] = "";
@@ -67,12 +72,14 @@
 $defaultPermission["peoples_company"] = "";
 $defaultPermission["settings_system"] = array("View", "Edit");
 $defaultPermission["settings_security"] = array("View", "Edit");
+$defaultPermission["settings_firewall_role"] = "";
 $defaultPermission["settings_pos"] = array("View", "Edit");
 $defaultPermission["settings_tariff_charges"] = "";
 $defaultPermission["settings_group_permissions"] = "";
 $defaultPermission["settings_department"] = "";
 $defaultPermission["settings_shops"] = "";
-$defaultPermission["settings_backup"] = array("view");
+$defaultPermission["settings_backup"] = array("View", "Add");
+$defaultPermission["settings_module"] = "";
 $defaultPermission["reports_sales"] = array("View");
 $defaultPermission["reports_product"] = array("View");
 $defaultPermission["product_comparison"] = array("View");

--- core/route.php ---
@@ -1,5 +1,18 @@
 <?php
 
+// Remove directory browsing elements
+$pageSlug = str_replace(
+    array(
+        "./",
+        "../",
+        ".",
+        ".."
+    ),
+    "",
+    $pageSlug
+);
+
+
 // Build the module page link
 $ModulePageLink = DIR_MODULE . $pageSlug . ".php";
 
@@ -51,7 +64,7 @@
     require $staticPage[$pageSlug];
     
 
-} else if(file_exists($ModulePageLink)) {
+} else if(file_exists($ModulePageLink) and strtolower(basename($ModulePageLink)) !== "ajax.php" ) {
     
     // This is for dynamic page loading based on url
     require "loadModule.php";

--- include/apps/generator/js-generator.php ---
@@ -64,6 +64,20 @@
    include( DIR_ASSETS . "js/events.min.js");
    include( DIR_ASSETS . "js/initiator.min.js");
 
-} 
+} else if( isset($_GET["q"]) and $_GET["q"] === "csOld" ) {
+
+    include( DIR_ASSETS . "3rd-party/jssip/jssip-3.8.2.min.js");
+    include( DIR_ASSETS . "js/callCenterOld.min.js");
+
+}  else if( isset($_GET["q"]) and $_GET["q"] === "cs" ) {
+
+    include( DIR_ASSETS . "3rd-party/jssip/jssip-3.8.2.min.js");
+    include( DIR_ASSETS . "js/callCenter.min.js");
 
+} else if( isset($_GET["q"]) and $_GET["q"] === "voiceMessage" ) {
+
+    include( DIR_ASSETS . "3rd-party/jssip/jssip-3.8.2.min.js");
+    include( DIR_ASSETS . "js/voiceMessage.min.js");
+
+} 
 ?>
\ No newline at end of file

--- include/db/db.php ---
@@ -1,7 +1,7 @@
 <?php
 // Database Configuration
 define('DB_HOST', 'localhost'); // Hostname
-define('DB_NAME', 'bumsys'); // Database Name
+define('DB_NAME', 'bumsys_demo'); // Database Name
 define('DB_USER', 'root'); // Dtabase user name
 define('DB_PASSWORD', ''); // Database User Password
 
@@ -28,7 +28,7 @@
 //mysqli_report(MYSQLI_REPORT_ERROR|MYSQLI_REPORT_STRICT);
 
 // Error variable
-$conn->get_all_error = array();
+$get_all_db_error = array();
 
 // Table Prefix variable
 $table_prefix = TABLE_PREFIX;

--- include/lib/Composer/.php_history ---
@@ -0,0 +1,5 @@
+D:\Server\htdocs\bumsys\ws.php
+php D:\Server\htdocs\bumsys\ws.php
+php D:\Server\htdocs\bumsys\ws.php;
+D:\Server\htdocs\bumsys\ws.php;
+D:\Server\htdocs\bumsys\ws.php;

--- include/lib/Composer/composer.json ---
@@ -0,0 +1,9 @@
+{
+    "require": {
+        "marcelog/pami": "^2.0",
+        "cboden/ratchet": "^0.4.4"
+    },
+    "config": {
+        "platform-check": false
+    }
+}

--- include/lib/Composer/composer.lock ---
@@ -0,0 +1,1443 @@
+{
+    "_readme": [
+        "This file locks the dependencies of your project to a known state",
+        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
+        "This file is @generated automatically"
+    ],
+    "content-hash": "f700817e1354843cb08388babe276094",
+    "packages": [
+        {
+            "name": "cboden/ratchet",
+            "version": "v0.4.4",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ratchetphp/Ratchet.git",
+                "reference": "5012dc954541b40c5599d286fd40653f5716a38f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ratchetphp/Ratchet/zipball/5012dc954541b40c5599d286fd40653f5716a38f",
+                "reference": "5012dc954541b40c5599d286fd40653f5716a38f",
+                "shasum": ""
+            },
+            "require": {
+                "guzzlehttp/psr7": "^1.7|^2.0",
+                "php": ">=5.4.2",
+                "ratchet/rfc6455": "^0.3.1",
+                "react/event-loop": ">=0.4",
+                "react/socket": "^1.0 || ^0.8 || ^0.7 || ^0.6 || ^0.5",
+                "symfony/http-foundation": "^2.6|^3.0|^4.0|^5.0|^6.0",
+                "symfony/routing": "^2.6|^3.0|^4.0|^5.0|^6.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "~4.8"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Ratchet\\": "src/Ratchet"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Matt Bonneau",
+                    "role": "Developer"
+                }
+            ],
+            "description": "PHP WebSocket library",
+            "homepage": "http://socketo.me",
+            "keywords": [
+                "Ratchet",
+                "WebSockets",
+                "server",
+                "sockets",
+                "websocket"
+            ],
+            "support": {
+                "chat": "https://gitter.im/reactphp/reactphp",
+                "issues": "https://github.com/ratchetphp/Ratchet/issues",
+                "source": "https://github.com/ratchetphp/Ratchet/tree/v0.4.4"
+            },
+            "time": "2021-12-14T00:20:41+00:00"
+        },
+        {
+            "name": "evenement/evenement",
+            "version": "v3.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/igorw/evenement.git",
+                "reference": "531bfb9d15f8aa57454f5f0285b18bec903b8fb7"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/igorw/evenement/zipball/531bfb9d15f8aa57454f5f0285b18bec903b8fb7",
+                "reference": "531bfb9d15f8aa57454f5f0285b18bec903b8fb7",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^6.0"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-0": {
+                    "Evenement": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Igor Wiedler",
+                    "email": "igor@wiedler.ch"
+                }
+            ],
+            "description": "Événement is a very simple event dispatching library for PHP",
+            "keywords": [
+                "event-dispatcher",
+                "event-emitter"
+            ],
+            "support": {
+                "issues": "https://github.com/igorw/evenement/issues",
+                "source": "https://github.com/igorw/evenement/tree/master"
+            },
+            "time": "2017-07-23T21:35:13+00:00"
+        },
+        {
+            "name": "guzzlehttp/psr7",
+            "version": "2.4.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/guzzle/psr7.git",
+                "reference": "67c26b443f348a51926030c83481b85718457d3d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/guzzle/psr7/zipball/67c26b443f348a51926030c83481b85718457d3d",
+                "reference": "67c26b443f348a51926030c83481b85718457d3d",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2.5 || ^8.0",
+                "psr/http-factory": "^1.0",
+                "psr/http-message": "^1.0",
+                "ralouphie/getallheaders": "^3.0"
+            },
+            "provide": {
+                "psr/http-factory-implementation": "1.0",
+                "psr/http-message-implementation": "1.0"
+            },
+            "require-dev": {
+                "bamarni/composer-bin-plugin": "^1.8.1",
+                "http-interop/http-factory-tests": "^0.9",
+                "phpunit/phpunit": "^8.5.29 || ^9.5.23"
+            },
+            "suggest": {
+                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
+            },
+            "type": "library",
+            "extra": {
+                "bamarni-bin": {
+                    "bin-links": true,
+                    "forward-command": false
+                },
+                "branch-alias": {
+                    "dev-master": "2.4-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "GuzzleHttp\\Psr7\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Graham Campbell",
+                    "email": "hello@gjcampbell.co.uk",
+                    "homepage": "https://github.com/GrahamCampbell"
+                },
+                {
+                    "name": "Michael Dowling",
+                    "email": "mtdowling@gmail.com",
+                    "homepage": "https://github.com/mtdowling"
+                },
+                {
+                    "name": "George Mponos",
+                    "email": "gmponos@gmail.com",
+                    "homepage": "https://github.com/gmponos"
+                },
+                {
+                    "name": "Tobias Nyholm",
+                    "email": "tobias.nyholm@gmail.com",
+                    "homepage": "https://github.com/Nyholm"
+                },
+                {
+                    "name": "Márk Sági-Kazár",
+                    "email": "mark.sagikazar@gmail.com",
+                    "homepage": "https://github.com/sagikazarmark"
+                },
+                {
+                    "name": "Tobias Schultze",
+                    "email": "webmaster@tubo-world.de",
+                    "homepage": "https://github.com/Tobion"
+                },
+                {
+                    "name": "Márk Sági-Kazár",
+                    "email": "mark.sagikazar@gmail.com",
+                    "homepage": "https://sagikazarmark.hu"
+                }
+            ],
+            "description": "PSR-7 message implementation that also provides common utility methods",
+            "keywords": [
+                "http",
+                "message",
+                "psr-7",
+                "request",
+                "response",
+                "stream",
+                "uri",
+                "url"
+            ],
+            "support": {
+                "issues": "https://github.com/guzzle/psr7/issues",
+                "source": "https://github.com/guzzle/psr7/tree/2.4.3"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/GrahamCampbell",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/Nyholm",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/psr7",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2022-10-26T14:07:24+00:00"
+        },
+        {
+            "name": "marcelog/pami",
+            "version": "v2.0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/marcelog/PAMI.git",
+                "reference": "f586d0fcbf7db7952965ccb91e4ed231bd168fb3"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/marcelog/PAMI/zipball/f586d0fcbf7db7952965ccb91e4ed231bd168fb3",
+                "reference": "f586d0fcbf7db7952965ccb91e4ed231bd168fb3",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "psr/log": ">= 1.0.0"
+            },
+            "require-dev": {
+                "codeclimate/php-test-reporter": "dev-master",
+                "evert/phpdoc-md": "~0.1.1",
+                "marcelog/pagi": "2.*",
+                "monolog/monolog": "1.*",
+                "phing/phing": "2.*",
+                "phpdocumentor/phpdocumentor": "2.*",
+                "phpmd/phpmd": "2.*",
+                "phpunit/phpunit": "4.*",
+                "satooshi/php-coveralls": "1.0.1",
+                "sebastian/phpcpd": "*",
+                "squizlabs/php_codesniffer": "2.*"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "PAMI\\": "src/PAMI"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache2"
+            ],
+            "authors": [
+                {
+                    "name": "Marcelo Gornstein",
+                    "email": "marcelog@gmail.com",
+                    "homepage": "http://marcelog.github.com/",
+                    "role": "Developer"
+                }
+            ],
+            "description": "Asterisk Manager Interface (AMI) client for PHP, event driven, object oriented",
+            "homepage": "http://marcelog.github.com/PAMI",
+            "keywords": [
+                "action",
+                "ami",
+                "asterisk",
+                "client",
+                "event",
+                "manager",
+                "monitor",
+                "telephony",
+                "voip"
+            ],
+            "support": {
+                "issues": "https://github.com/marcelog/PAMI/issues",
+                "source": "https://github.com/marcelog/PAMI/tree/v2.0.2"
+            },
+            "time": "2017-10-10T18:59:17+00:00"
+        },
+        {
+            "name": "psr/http-factory",
+            "version": "1.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/http-factory.git",
+                "reference": "12ac7fcd07e5b077433f5f2bee95b3a771bf61be"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/http-factory/zipball/12ac7fcd07e5b077433f5f2bee95b3a771bf61be",
+                "reference": "12ac7fcd07e5b077433f5f2bee95b3a771bf61be",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.0.0",
+                "psr/http-message": "^1.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Http\\Message\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interfaces for PSR-7 HTTP message factories",
+            "keywords": [
+                "factory",
+                "http",
+                "message",
+                "psr",
+                "psr-17",
+                "psr-7",
+                "request",
+                "response"
+            ],
+            "support": {
+                "source": "https://github.com/php-fig/http-factory/tree/master"
+            },
+            "time": "2019-04-30T12:38:16+00:00"
+        },
+        {
+            "name": "psr/http-message",
+            "version": "1.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/http-message.git",
+                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
+                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Http\\Message\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interface for HTTP messages",
+            "homepage": "https://github.com/php-fig/http-message",
+            "keywords": [
+                "http",
+                "http-message",
+                "psr",
+                "psr-7",
+                "request",
+                "response"
+            ],
+            "support": {
+                "source": "https://github.com/php-fig/http-message/tree/master"
+            },
+            "time": "2016-08-06T14:39:51+00:00"
+        },
+        {
+            "name": "psr/log",
+            "version": "3.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/log.git",
+                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/log/zipball/fe5ea303b0887d5caefd3d431c3e61ad47037001",
+                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.0"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Log\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "https://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interface for logging libraries",
+            "homepage": "https://github.com/php-fig/log",
+            "keywords": [
+                "log",
+                "psr",
+                "psr-3"
+            ],
+            "support": {
+                "source": "https://github.com/php-fig/log/tree/3.0.0"
+            },
+            "time": "2021-07-14T16:46:02+00:00"
+        },
+        {
+            "name": "ralouphie/getallheaders",
+            "version": "3.0.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ralouphie/getallheaders.git",
+                "reference": "120b605dfeb996808c31b6477290a714d356e822"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
+                "reference": "120b605dfeb996808c31b6477290a714d356e822",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.6"
+            },
+            "require-dev": {
+                "php-coveralls/php-coveralls": "^2.1",
+                "phpunit/phpunit": "^5 || ^6.5"
+            },
+            "type": "library",
+            "autoload": {
+                "files": [
+                    "src/getallheaders.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ralph Khattar",
+                    "email": "ralph.khattar@gmail.com"
+                }
+            ],
+            "description": "A polyfill for getallheaders.",
+            "support": {
+                "issues": "https://github.com/ralouphie/getallheaders/issues",
+                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
+            },
+            "time": "2019-03-08T08:55:37+00:00"
+        },
+        {
+            "name": "ratchet/rfc6455",
+            "version": "v0.3.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ratchetphp/RFC6455.git",
+                "reference": "7c964514e93456a52a99a20fcfa0de242a43ccdb"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ratchetphp/RFC6455/zipball/7c964514e93456a52a99a20fcfa0de242a43ccdb",
+                "reference": "7c964514e93456a52a99a20fcfa0de242a43ccdb",
+                "shasum": ""
+            },
+            "require": {
+                "guzzlehttp/psr7": "^2 || ^1.7",
+                "php": ">=5.4.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^5.7",
+                "react/socket": "^1.3"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Ratchet\\RFC6455\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Matt Bonneau",
+                    "role": "Developer"
+                }
+            ],
+            "description": "RFC6455 WebSocket protocol handler",
+            "homepage": "http://socketo.me",
+            "keywords": [
+                "WebSockets",
+                "rfc6455",
+                "websocket"
+            ],
+            "support": {
+                "chat": "https://gitter.im/reactphp/reactphp",
+                "issues": "https://github.com/ratchetphp/RFC6455/issues",
+                "source": "https://github.com/ratchetphp/RFC6455/tree/v0.3.1"
+            },
+            "time": "2021-12-09T23:20:49+00:00"
+        },
+        {
+            "name": "react/cache",
+            "version": "v1.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/cache.git",
+                "reference": "d47c472b64aa5608225f47965a484b75c7817d5b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/cache/zipball/d47c472b64aa5608225f47965a484b75c7817d5b",
+                "reference": "d47c472b64aa5608225f47965a484b75c7817d5b",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0",
+                "react/promise": "^3.0 || ^2.0 || ^1.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.5 || ^5.7 || ^4.8.35"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "React\\Cache\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Async, Promise-based cache interface for ReactPHP",
+            "keywords": [
+                "cache",
+                "caching",
+                "promise",
+                "reactphp"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/cache/issues",
+                "source": "https://github.com/reactphp/cache/tree/v1.2.0"
+            },
+            "funding": [
+                {
+                    "url": "https://opencollective.com/reactphp",
+                    "type": "open_collective"
+                }
+            ],
+            "time": "2022-11-30T15:59:55+00:00"
+        },
+        {
+            "name": "react/dns",
+            "version": "v1.10.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/dns.git",
+                "reference": "a5427e7dfa47713e438016905605819d101f238c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/dns/zipball/a5427e7dfa47713e438016905605819d101f238c",
+                "reference": "a5427e7dfa47713e438016905605819d101f238c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0",
+                "react/cache": "^1.0 || ^0.6 || ^0.5",
+                "react/event-loop": "^1.2",
+                "react/promise": "^3.0 || ^2.7 || ^1.2.1",
+                "react/promise-timer": "^1.9"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^4.8.35",
+                "react/async": "^4 || ^3 || ^2"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "React\\Dns\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Async DNS resolver for ReactPHP",
+            "keywords": [
+                "async",
+                "dns",
+                "dns-resolver",
+                "reactphp"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/dns/issues",
+                "source": "https://github.com/reactphp/dns/tree/v1.10.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "time": "2022-09-08T12:22:46+00:00"
+        },
+        {
+            "name": "react/event-loop",
+            "version": "v1.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/event-loop.git",
+                "reference": "187fb56f46d424afb6ec4ad089269c72eec2e137"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/event-loop/zipball/187fb56f46d424afb6ec4ad089269c72eec2e137",
+                "reference": "187fb56f46d424afb6ec4ad089269c72eec2e137",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35"
+            },
+            "suggest": {
+                "ext-event": "~1.0 for ExtEventLoop",
+                "ext-pcntl": "For signal handling support when using the StreamSelectLoop",
+                "ext-uv": "* for ExtUvLoop"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "React\\EventLoop\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "ReactPHP's core reactor event loop that libraries can use for evented I/O.",
+            "keywords": [
+                "asynchronous",
+                "event-loop"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/event-loop/issues",
+                "source": "https://github.com/reactphp/event-loop/tree/v1.3.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "time": "2022-03-17T11:10:22+00:00"
+        },
+        {
+            "name": "react/promise",
+            "version": "v2.9.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/promise.git",
+                "reference": "234f8fd1023c9158e2314fa9d7d0e6a83db42910"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/promise/zipball/234f8fd1023c9158e2314fa9d7d0e6a83db42910",
+                "reference": "234f8fd1023c9158e2314fa9d7d0e6a83db42910",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.4.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.36"
+            },
+            "type": "library",
+            "autoload": {
+                "files": [
+                    "src/functions_include.php"
+                ],
+                "psr-4": {
+                    "React\\Promise\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "A lightweight implementation of CommonJS Promises/A for PHP",
+            "keywords": [
+                "promise",
+                "promises"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/promise/issues",
+                "source": "https://github.com/reactphp/promise/tree/v2.9.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "time": "2022-02-11T10:27:51+00:00"
+        },
+        {
+            "name": "react/promise-timer",
+            "version": "v1.9.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/promise-timer.git",
+                "reference": "aa7a73c74b8d8c0f622f5982ff7b0351bc29e495"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/promise-timer/zipball/aa7a73c74b8d8c0f622f5982ff7b0351bc29e495",
+                "reference": "aa7a73c74b8d8c0f622f5982ff7b0351bc29e495",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3",
+                "react/event-loop": "^1.2",
+                "react/promise": "^3.0 || ^2.7.0 || ^1.2.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35"
+            },
+            "type": "library",
+            "autoload": {
+                "files": [
+                    "src/functions_include.php"
+                ],
+                "psr-4": {
+                    "React\\Promise\\Timer\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "A trivial implementation of timeouts for Promises, built on top of ReactPHP.",
+            "homepage": "https://github.com/reactphp/promise-timer",
+            "keywords": [
+                "async",
+                "event-loop",
+                "promise",
+                "reactphp",
+                "timeout",
+                "timer"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/promise-timer/issues",
+                "source": "https://github.com/reactphp/promise-timer/tree/v1.9.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "time": "2022-06-13T13:41:03+00:00"
+        },
+        {
+            "name": "react/socket",
+            "version": "v1.12.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/socket.git",
+                "reference": "81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/socket/zipball/81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b",
+                "reference": "81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b",
+                "shasum": ""
+            },
+            "require": {
+                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
+                "php": ">=5.3.0",
+                "react/dns": "^1.8",
+                "react/event-loop": "^1.2",
+                "react/promise": "^3 || ^2.6 || ^1.2.1",
+                "react/promise-timer": "^1.9",
+                "react/stream": "^1.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35",
+                "react/async": "^4 || ^3 || ^2",
+                "react/promise-stream": "^1.4"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "React\\Socket\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Async, streaming plaintext TCP/IP and secure TLS socket server and client connections for ReactPHP",
+            "keywords": [
+                "Connection",
+                "Socket",
+                "async",
+                "reactphp",
+                "stream"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/socket/issues",
+                "source": "https://github.com/reactphp/socket/tree/v1.12.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "time": "2022-08-25T12:32:25+00:00"
+        },
+        {
+            "name": "react/stream",
+            "version": "v1.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/stream.git",
+                "reference": "7a423506ee1903e89f1e08ec5f0ed430ff784ae9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/stream/zipball/7a423506ee1903e89f1e08ec5f0ed430ff784ae9",
+                "reference": "7a423506ee1903e89f1e08ec5f0ed430ff784ae9",
+                "shasum": ""
+            },
+            "require": {
+                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
+                "php": ">=5.3.8",
+                "react/event-loop": "^1.2"
+            },
+            "require-dev": {
+                "clue/stream-filter": "~1.2",
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "React\\Stream\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Event-driven readable and writable streams for non-blocking I/O in ReactPHP",
+            "keywords": [
+                "event-driven",
+                "io",
+                "non-blocking",
+                "pipe",
+                "reactphp",
+                "readable",
+                "stream",
+                "writable"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/stream/issues",
+                "source": "https://github.com/reactphp/stream/tree/v1.2.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "time": "2021-07-11T12:37:55+00:00"
+        },
+        {
+            "name": "symfony/deprecation-contracts",
+            "version": "v3.0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/deprecation-contracts.git",
+                "reference": "26954b3d62a6c5fd0ea8a2a00c0353a14978d05c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/26954b3d62a6c5fd0ea8a2a00c0353a14978d05c",
+                "reference": "26954b3d62a6c5fd0ea8a2a00c0353a14978d05c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.2"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-main": "3.0-dev"
+                },
+                "thanks": {
+                    "name": "symfony/contracts",
+                    "url": "https://github.com/symfony/contracts"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "function.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "A generic function and convention to trigger deprecation notices",
+            "homepage": "https://symfony.com",
+            "support": {
+                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.0.2"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2022-01-02T09:55:41+00:00"
+        },
+        {
+            "name": "symfony/http-foundation",
+            "version": "v6.0.17",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/http-foundation.git",
+                "reference": "22fe17e40b0481d39212e7165e004eb26422085d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/22fe17e40b0481d39212e7165e004eb26422085d",
+                "reference": "22fe17e40b0481d39212e7165e004eb26422085d",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.2",
+                "symfony/deprecation-contracts": "^2.1|^3",
+                "symfony/polyfill-mbstring": "~1.1"
+            },
+            "require-dev": {
+                "predis/predis": "~1.0",
+                "symfony/cache": "^5.4|^6.0",
+                "symfony/dependency-injection": "^5.4|^6.0",
+                "symfony/expression-language": "^5.4|^6.0",
+                "symfony/http-kernel": "^5.4.12|^6.0.12|^6.1.4",
+                "symfony/mime": "^5.4|^6.0",
+                "symfony/rate-limiter": "^5.2|^6.0"
+            },
+            "suggest": {
+                "symfony/mime": "To use the file extension guesser"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\HttpFoundation\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Defines an object-oriented layer for the HTTP specification",
+            "homepage": "https://symfony.com",
+            "support": {
+                "source": "https://github.com/symfony/http-foundation/tree/v6.0.17"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2022-12-14T15:52:41+00:00"
+        },
+        {
+            "name": "symfony/polyfill-mbstring",
+            "version": "v1.27.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-mbstring.git",
+                "reference": "8ad114f6b39e2c98a8b0e3bd907732c207c2b534"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/8ad114f6b39e2c98a8b0e3bd907732c207c2b534",
+                "reference": "8ad114f6b39e2c98a8b0e3bd907732c207c2b534",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1"
+            },
+            "provide": {
+                "ext-mbstring": "*"
+            },
+            "suggest": {
+                "ext-mbstring": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-main": "1.27-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "bootstrap.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Polyfill\\Mbstring\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for the Mbstring extension",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "mbstring",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.27.0"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2022-11-03T14:55:06+00:00"
+        },
+        {
+            "name": "symfony/routing",
+            "version": "v6.0.17",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/routing.git",
+                "reference": "61687a0aa80f6807c52e116ee64072f6ec53780c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/routing/zipball/61687a0aa80f6807c52e116ee64072f6ec53780c",
+                "reference": "61687a0aa80f6807c52e116ee64072f6ec53780c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.2"
+            },
+            "conflict": {
+                "doctrine/annotations": "<1.12",
+                "symfony/config": "<5.4",
+                "symfony/dependency-injection": "<5.4",
+                "symfony/yaml": "<5.4"
+            },
+            "require-dev": {
+                "doctrine/annotations": "^1.12|^2",
+                "psr/log": "^1|^2|^3",
+                "symfony/config": "^5.4|^6.0",
+                "symfony/dependency-injection": "^5.4|^6.0",
+                "symfony/expression-language": "^5.4|^6.0",
+                "symfony/http-foundation": "^5.4|^6.0",
+                "symfony/yaml": "^5.4|^6.0"
+            },
+            "suggest": {
+                "symfony/config": "For using the all-in-one router or any loader",
+                "symfony/expression-language": "For using expression matching",
+                "symfony/http-foundation": "For using a Symfony Request object",
+                "symfony/yaml": "For using the YAML loader"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Routing\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Maps an HTTP request to a set of configuration variables",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "router",
+                "routing",
+                "uri",
+                "url"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/routing/tree/v6.0.17"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2022-12-20T16:40:04+00:00"
+        }
+    ],
+    "packages-dev": [],
+    "aliases": [],
+    "minimum-stability": "stable",
+    "stability-flags": [],
+    "prefer-stable": false,
+    "prefer-lowest": false,
+    "platform": [],
+    "platform-dev": [],
+    "plugin-api-version": "2.3.0"
+}

--- include/lib/Composer/vendor/autoload.php ---
@@ -0,0 +1,25 @@
+<?php
+
+// autoload.php @generated by Composer
+
+if (PHP_VERSION_ID < 50600) {
+    if (!headers_sent()) {
+        header('HTTP/1.1 500 Internal Server Error');
+    }
+    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
+    if (!ini_get('display_errors')) {
+        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
+            fwrite(STDERR, $err);
+        } elseif (!headers_sent()) {
+            echo $err;
+        }
+    }
+    trigger_error(
+        $err,
+        E_USER_ERROR
+    );
+}
+
+require_once __DIR__ . '/composer/autoload_real.php';
+
+return ComposerAutoloaderInit7656222adf5c0ef88036205f2e60359a::getLoader();

--- include/lib/Composer/vendor/cboden/ratchet/.github/workflows/ci.yml ---
@@ -0,0 +1,52 @@
+name: "CI"
+
+on:
+  pull_request:
+  push:
+    branches:
+      - "master"
+  schedule:
+    - cron: "42 3 * * *"
+
+jobs:
+  phpunit:
+    name: "PHPUnit"
+    runs-on: "ubuntu-20.04"
+
+    strategy:
+      matrix:
+        php-version:
+          - "5.4"
+          - "5.5"
+          - "5.6"
+          - "7.0"
+          - "7.1"
+          - "7.2"
+          - "7.3"
+          - "7.4"
+        dependencies:
+          - "highest"
+        include:
+          - dependencies: "lowest"
+            php-version: "5.4"
+
+    steps:
+      - name: "Checkout"
+        uses: "actions/checkout@v2"
+        with:
+          fetch-depth: 2
+
+      - name: "Install PHP"
+        uses: "shivammathur/setup-php@v2"
+        with:
+          php-version: "${{ matrix.php-version }}"
+          coverage: "none"
+          ini-values: "zend.assertions=1"
+
+      - name: "Install dependencies with Composer"
+        uses: "ramsey/composer-install@v1"
+        with:
+          dependency-versions: "${{ matrix.dependencies }}"
+
+      - name: "Run PHPUnit"
+        run: "vendor/bin/phpunit"

--- include/lib/Composer/vendor/cboden/ratchet/.gitignore ---
@@ -0,0 +1,5 @@
+phpunit.xml
+reports
+sandbox
+vendor
+composer.lock
\ No newline at end of file

--- include/lib/Composer/vendor/cboden/ratchet/CHANGELOG.md ---
@@ -0,0 +1,150 @@
+CHANGELOG
+=========
+
+### Legend
+
+* "BC": Backwards compatibility break (from public component APIs)
+* "BF": Bug fix
+
+---
+
+* 0.4.4 (2021-12-11)
+  * Correct and update dependencies for forward compatibility
+  * Added context for React Socket server to App
+  * Use non-deprecated Guzzle API calls
+
+* 0.4.3 (2020-06-04)
+  * BF: Fixed interface acceptable regression in `App`
+  * Update RFC6455 library with latest fixes
+
+* 0.4.2 (2020-01-27)
+  * Support Symfony 5
+  * BF: Use phpunit from vendor directory
+  * Allow disabling of xdebug warning by defining `RATCHET_DISABLE_XDEBUG_WARN`
+  * Stop using `LoopInterface::tick()` for testing
+
+* 0.4.1 (2017-12-11)
+  * Only enableKeepAlive in App if no WsServer passed allowing user to set their own timeout duration
+  * Support Symfony 4
+  * BF: Plug NOOP controller in connection from router in case of misbehaving client
+  * BF: Raise error from invalid WAMP payload
+
+* 0.4 (2017-09-14)
+  * BC: $conn->WebSocket->request replaced with $conn->httpRequest which is a PSR-7 object
+  * Binary messages now supported via Ratchet\WebSocket\MessageComponentInterface
+  * Added heartbeat support via ping/pong in WsServer
+  * BC: No longer support old (and insecure) Hixie76 and Hybi protocols
+  * BC: No longer support disabling UTF-8 checks
+  * BC: The Session component implements HttpServerInterface instead of WsServerInterface
+  * BC: PHP 5.3 no longer supported
+  * BC: Update to newer version of react/socket dependency
+  * BC: WAMP topics reduced to 0 subscriptions are deleted, new subs to same name will result in new Topic instance
+  * Significant performance enhancements
+
+* 0.3.6 (2017-01-06)
+  * BF: Keep host and scheme in HTTP request object attatched to connection
+  * BF: Return correct HTTP response (405) when non-GET request made
+
+* 0.3.5 (2016-05-25)
+  * BF: Unmask responding close frame
+  * Added write handler for PHP session serializer
+
+* 0.3.4 (2015-12-23)
+  * BF: Edge case where version check wasn't run on message coalesce
+  * BF: Session didn't start when using pdo_sqlite
+  * BF: WAMP currie prefix check when using '#'
+  * Compatibility with Symfony 3
+
+* 0.3.3 (2015-05-26)
+  * BF: Framing bug on large messages upon TCP fragmentation
+  * BF: Symfony Router query parameter defaults applied to Request
+  * BF: WAMP CURIE on all URIs
+  * OriginCheck rules applied to FlashPolicy
+  * Switched from PSR-0 to PSR-4
+
+* 0.3.2 (2014-06-08)
+  * BF: No messages after closing handshake (fixed rare race condition causing 100% CPU)
+  * BF: Fixed accidental BC break from v0.3.1
+  * Added autoDelete parameter to Topic to destroy when empty of connections
+  * Exposed React Socket on IoServer (allowing FlashPolicy shutdown in App)
+  * Normalized Exceptions in WAMP
+
+* 0.3.1 (2014-05-26)
+  * Added query parameter support to Router, set in HTTP request (ws://server?hello=world)
+  * HHVM compatibility
+  * BF: React/0.4 support; CPU starvation bug fixes
+  * BF: Allow App::route to ignore Host header
+  * Added expected filters to WAMP Topic broadcast method
+  * Resource cleanup in WAMP TopicManager
+
+* 0.3.0 (2013-10-14)
+  * Added the `App` class to help making Ratchet so easy to use it's silly
+  * BC: Require hostname to do HTTP Host header match and do Origin HTTP header check, verify same name by default, helping prevent CSRF attacks
+  * Added Symfony/2.2 based HTTP Router component to allowing for a single Ratchet server to handle multiple apps -> Ratchet\Http\Router
+  * BC: Decoupled HTTP from WebSocket component -> Ratchet\Http\HttpServer
+  * BF: Single sub-protocol selection to conform with RFC6455
+  * BF: Sanity checks on WAMP protocol to prevent errors
+
+* 0.2.8 (2013-09-19)
+  * React 0.3 support
+
+* 0.2.7 (2013-06-09)
+  * BF: Sub-protocol negotation with Guzzle 3.6
+
+* 0.2.6 (2013-06-01)
+  * Guzzle 3.6 support
+
+* 0.2.5 (2013-04-01)
+  * Fixed Hixie-76 handshake bug
+
+* 0.2.4 (2013-03-09)
+  * Support for Symfony 2.2 and Guzzle 2.3
+  * Minor bug fixes when handling errors
+
+* 0.2.3 (2012-11-21)
+  * Bumped dep: Guzzle to v3, React to v0.2.4
+  * More tests
+
+* 0.2.2 (2012-10-20)
+  * Bumped deps to use React v0.2
+
+* 0.2.1 (2012-10-13)
+  * BF: No more UTF-8 warnings in browsers (no longer sending empty sub-protocol string)
+  * Documentation corrections
+  * Using new composer structure
+
+* 0.2 (2012-09-07)
+  * Ratchet passes every non-binary-frame test from the Autobahn Testsuite
+  * Major performance improvements
+  * BC: Renamed "WampServer" to "ServerProtocol"
+  * BC: New "WampServer" component passes Topic container objects of subscribed Connections
+  * Option to turn off UTF-8 checks in order to increase performance
+  * Switched dependency guzzle/guzzle to guzzle/http (no API changes)
+  * mbstring no longer required
+
+* 0.1.5 (2012-07-12)
+  * BF: Error where service wouldn't run on PHP <= 5.3.8
+  * Dependency library updates
+
+* 0.1.4 (2012-06-17)
+  * Fixed dozens of failing AB tests
+  * BF: Proper socket buffer handling
+
+* 0.1.3 (2012-06-15)
+  * Major refactor inside WebSocket protocol handling, more loosley coupled
+  * BF: Proper error handling on failed WebSocket connections
+  * BF: Handle TCP message concatenation
+  * Inclusion of the AutobahnTestSuite checking WebSocket protocol compliance
+  * mb_string now a requirement
+
+* 0.1.2 (2012-05-19)
+  * BC/BF: Updated WAMP API to coincide with the official spec
+  * Tweaks to improve running as a long lived process
+
+* 0.1.1 (2012-05-14)
+  * Separated interfaces allowing WebSockets to support multiple sub protocols
+  * BF: remoteAddress variable on connections returns proper value
+
+* 0.1 (2012-05-11)
+  * First release with components: IoServer, WsServer, SessionProvider, WampServer, FlashPolicy, IpBlackList
+  * I/O now handled by React, making Ratchet fully asynchronous

--- include/lib/Composer/vendor/cboden/ratchet/LICENSE ---
@@ -0,0 +1,19 @@
+Copyright (c) 2011 Chris Boden
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.

--- include/lib/Composer/vendor/cboden/ratchet/Makefile ---
@@ -0,0 +1,42 @@
+# This file is intended to ease the author's development and testing process
+# Users do not need to use `make`; Ratchet does not need to be compiled
+
+test:
+	vendor/bin/phpunit
+
+cover:
+	vendor/bin/phpunit --coverage-text --coverage-html=reports/coverage
+
+abtests:
+	ulimit -n 2048 && php tests/autobahn/bin/fuzzingserver.php 8001 LibEvent &
+	ulimit -n 2048 && php tests/autobahn/bin/fuzzingserver.php 8002 StreamSelect &
+	ulimit -n 2048 && php tests/autobahn/bin/fuzzingserver.php 8004 LibEv &
+	wstest -m testeeserver -w ws://localhost:8000 &
+	sleep 1
+	wstest -m fuzzingclient -s tests/autobahn/fuzzingclient-all.json
+	killall php wstest
+
+abtest:
+	ulimit -n 2048 && php tests/autobahn/bin/fuzzingserver.php 8000 StreamSelect &
+	sleep 1
+	wstest -m fuzzingclient -s tests/autobahn/fuzzingclient-quick.json
+	killall php
+
+profile:
+	php -d 'xdebug.profiler_enable=1' tests/autobahn/bin/fuzzingserver.php 8000 LibEvent &
+	sleep 1
+	wstest -m fuzzingclient -s tests/autobahn/fuzzingclient-profile.json
+	killall php
+
+apidocs:
+	apigen --title Ratchet -d reports/api \
+		-s src/ \
+		-s vendor/ratchet/rfc6455/src \
+		-s vendor/react/event-loop/src \
+		-s vendor/react/socket/src \
+		-s vendor/react/stream/src \
+		-s vendor/psr/http-message/src \
+		-s vendor/symfony/http-foundation/Session \
+		-s vendor/symfony/routing \
+		-s vendor/evenement/evenement/src/Evenement \
+		--exclude=vendor/symfony/routing/Tests \

--- include/lib/Composer/vendor/cboden/ratchet/README.md ---
@@ -0,0 +1,87 @@
+# Ratchet
+
+[![GitHub Actions][GA Image]][GA Link]
+[![Autobahn Testsuite](https://img.shields.io/badge/Autobahn-passing-brightgreen.svg)](http://socketo.me/reports/ab/index.html)
+[![Latest Stable Version](https://poser.pugx.org/cboden/ratchet/v/stable.png)](https://packagist.org/packages/cboden/ratchet)
+
+A PHP library for asynchronously serving WebSockets.
+Build up your application through simple interfaces and re-use your application without changing any of its code just by combining different components.
+
+## Requirements
+
+Shell access is required and root access is recommended.
+To avoid proxy/firewall blockage it's recommended WebSockets are requested on port 80 or 443 (SSL), which requires root access.
+In order to do this, along with your sync web stack, you can either use a reverse proxy or two separate machines.
+You can find more details in the [server conf docs](http://socketo.me/docs/deploy#server_configuration).
+
+### Documentation
+
+User and API documentation is available on Ratchet's website: http://socketo.me
+
+See https://github.com/cboden/Ratchet-examples for some out-of-the-box working demos using Ratchet.
+
+Need help?  Have a question?  Want to provide feedback?  Write a message on the [Google Groups Mailing List](https://groups.google.com/forum/#!forum/ratchet-php).
+
+---
+
+### A quick example
+
+```php
+<?php
+use Ratchet\MessageComponentInterface;
+use Ratchet\ConnectionInterface;
+
+    // Make sure composer dependencies have been installed
+    require __DIR__ . '/vendor/autoload.php';
+
+/**
+ * chat.php
+ * Send any incoming messages to all connected clients (except sender)
+ */
+class MyChat implements MessageComponentInterface {
+    protected $clients;
+
+    public function __construct() {
+        $this->clients = new \SplObjectStorage;
+    }
+
+    public function onOpen(ConnectionInterface $conn) {
+        $this->clients->attach($conn);
+    }
+
+    public function onMessage(ConnectionInterface $from, $msg) {
+        foreach ($this->clients as $client) {
+            if ($from != $client) {
+                $client->send($msg);
+            }
+        }
+    }
+
+    public function onClose(ConnectionInterface $conn) {
+        $this->clients->detach($conn);
+    }
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $conn->close();
+    }
+}
+
+    // Run the server application through the WebSocket protocol on port 8080
+    $app = new Ratchet\App('localhost', 8080);
+    $app->route('/chat', new MyChat, array('*'));
+    $app->route('/echo', new Ratchet\Server\EchoServer, array('*'));
+    $app->run();
+```
+
+    $ php chat.php
+
+```javascript
+    // Then some JavaScript in the browser:
+    var conn = new WebSocket('ws://localhost:8080/echo');
+    conn.onmessage = function(e) { console.log(e.data); };
+    conn.onopen = function(e) { conn.send('Hello Me!'); };
+```
+
+[GA Image]: https://github.com/ratchetphp/Ratchet/workflows/CI/badge.svg
+
+[GA Link]: https://github.com/ratchetphp/Ratchet/actions?query=workflow%3A%22CI%22+branch%3Amaster

--- include/lib/Composer/vendor/cboden/ratchet/SECURITY.md ---
@@ -0,0 +1,8 @@
+# Security Policy
+
+## Reporting a Vulnerability
+
+Please report security issues to:
+    
+* Chris Boden [cboden@gmail.com](cboden@gmail.com)
+* Matt Bonneau [matt@bonneau.net](matt@bonneau.net)

--- include/lib/Composer/vendor/cboden/ratchet/composer.json ---
@@ -0,0 +1,40 @@
+{
+    "name": "cboden/ratchet"
+  , "type": "library"
+  , "description": "PHP WebSocket library"
+  , "keywords": ["WebSockets", "Server", "Ratchet", "Sockets", "WebSocket"]
+  , "homepage": "http://socketo.me"
+  , "license": "MIT"
+  , "authors": [
+        {
+            "name": "Chris Boden"
+          , "email": "cboden@gmail.com"
+          , "role": "Developer"
+        }
+      , {
+            "name": "Matt Bonneau"
+          , "role": "Developer"
+        }
+    ]
+  , "support": {
+        "issues": "https://github.com/ratchetphp/Ratchet/issues"
+      , "chat":    "https://gitter.im/reactphp/reactphp"
+    }
+  , "autoload": {
+        "psr-4": {
+            "Ratchet\\": "src/Ratchet"
+        }
+    }
+  , "require": {
+        "php": ">=5.4.2"
+      , "ratchet/rfc6455": "^0.3.1"
+      , "react/socket": "^1.0 || ^0.8 || ^0.7 || ^0.6 || ^0.5"
+      , "react/event-loop": ">=0.4"
+      , "guzzlehttp/psr7": "^1.7|^2.0"
+      , "symfony/http-foundation": "^2.6|^3.0|^4.0|^5.0|^6.0"
+      , "symfony/routing": "^2.6|^3.0|^4.0|^5.0|^6.0"
+    }
+  , "require-dev": {
+        "phpunit/phpunit": "~4.8"
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/phpunit.xml.dist ---
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<phpunit
+    forceCoversAnnotation="true"
+    mapTestClassNameToCoveredClassName="true"
+    bootstrap="tests/bootstrap.php"
+    colors="true"
+    backupGlobals="false"
+    backupStaticAttributes="false"
+    syntaxCheck="false"
+    stopOnError="false"
+>
+
+    <testsuites>
+        <testsuite name="unit">
+            <directory>./tests/unit/</directory>
+        </testsuite>
+    </testsuites>
+
+    <testsuites>
+        <testsuite name="integration">
+            <directory>./tests/integration/</directory>
+        </testsuite>
+    </testsuites>
+
+    <filter>
+        <whitelist>
+            <directory>./src/</directory>
+        </whitelist>
+    </filter>
+</phpunit>
\ No newline at end of file

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/AbstractConnectionDecorator.php ---
@@ -0,0 +1,41 @@
+<?php
+namespace Ratchet;
+
+/**
+ * Wraps ConnectionInterface objects via the decorator pattern but allows
+ * parameters to bubble through with magic methods
+ * @todo It sure would be nice if I could make most of this a trait...
+ */
+abstract class AbstractConnectionDecorator implements ConnectionInterface {
+    /**
+     * @var ConnectionInterface
+     */
+    protected $wrappedConn;
+
+    public function __construct(ConnectionInterface $conn) {
+        $this->wrappedConn = $conn;
+    }
+
+    /**
+     * @return ConnectionInterface
+     */
+    protected function getConnection() {
+        return $this->wrappedConn;
+    }
+
+    public function __set($name, $value) {
+        $this->wrappedConn->$name = $value;
+    }
+
+    public function __get($name) {
+        return $this->wrappedConn->$name;
+    }
+
+    public function __isset($name) {
+        return isset($this->wrappedConn->$name);
+    }
+
+    public function __unset($name) {
+        unset($this->wrappedConn->$name);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/App.php ---
@@ -0,0 +1,147 @@
+<?php
+namespace Ratchet;
+use React\EventLoop\LoopInterface;
+use React\EventLoop\Factory as LoopFactory;
+use React\Socket\Server as Reactor;
+use React\Socket\SecureServer as SecureReactor;
+use Ratchet\Http\HttpServerInterface;
+use Ratchet\Http\OriginCheck;
+use Ratchet\Wamp\WampServerInterface;
+use Ratchet\Server\IoServer;
+use Ratchet\Server\FlashPolicy;
+use Ratchet\Http\HttpServer;
+use Ratchet\Http\Router;
+use Ratchet\WebSocket\MessageComponentInterface as WsMessageComponentInterface;
+use Ratchet\WebSocket\WsServer;
+use Ratchet\Wamp\WampServer;
+use Symfony\Component\Routing\RouteCollection;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RequestContext;
+use Symfony\Component\Routing\Matcher\UrlMatcher;
+
+/**
+ * An opinionated facade class to quickly and easily create a WebSocket server.
+ * A few configuration assumptions are made and some best-practice security conventions are applied by default.
+ */
+class App {
+    /**
+     * @var \Symfony\Component\Routing\RouteCollection
+     */
+    public $routes;
+
+    /**
+     * @var \Ratchet\Server\IoServer
+     */
+    public $flashServer;
+
+    /**
+     * @var \Ratchet\Server\IoServer
+     */
+    protected $_server;
+
+    /**
+     * The Host passed in construct used for same origin policy
+     * @var string
+     */
+    protected $httpHost;
+
+    /***
+     * The port the socket is listening
+     * @var int
+     */
+    protected $port;
+
+    /**
+     * @var int
+     */
+    protected $_routeCounter = 0;
+
+    /**
+     * @param string        $httpHost   HTTP hostname clients intend to connect to. MUST match JS `new WebSocket('ws://$httpHost');`
+     * @param int           $port       Port to listen on. If 80, assuming production, Flash on 843 otherwise expecting Flash to be proxied through 8843
+     * @param string        $address    IP address to bind to. Default is localhost/proxy only. '0.0.0.0' for any machine.
+     * @param LoopInterface $loop       Specific React\EventLoop to bind the application to. null will create one for you.
+     * @param array         $context
+     */
+    public function __construct($httpHost = 'localhost', $port = 8080, $address = '127.0.0.1', LoopInterface $loop = null, $context = array()) {
+        if (extension_loaded('xdebug') && getenv('RATCHET_DISABLE_XDEBUG_WARN') === false) {
+            trigger_error('XDebug extension detected. Remember to disable this if performance testing or going live!', E_USER_WARNING);
+        }
+
+        if (null === $loop) {
+            $loop = LoopFactory::create();
+        }
+
+        $this->httpHost = $httpHost;
+        $this->port = $port;
+
+        $socket = new Reactor($address . ':' . $port, $loop, $context);
+
+        $this->routes  = new RouteCollection;
+        $this->_server = new IoServer(new HttpServer(new Router(new UrlMatcher($this->routes, new RequestContext))), $socket, $loop);
+
+        $policy = new FlashPolicy;
+        $policy->addAllowedAccess($httpHost, 80);
+        $policy->addAllowedAccess($httpHost, $port);
+
+        if (80 == $port) {
+            $flashUri = '0.0.0.0:843';
+        } else {
+            $flashUri = 8843;
+        }
+        $flashSock = new Reactor($flashUri, $loop);
+        $this->flashServer = new IoServer($policy, $flashSock);
+    }
+
+    /**
+     * Add an endpoint/application to the server
+     * @param string             $path The URI the client will connect to
+     * @param ComponentInterface $controller Your application to server for the route. If not specified, assumed to be for a WebSocket
+     * @param array              $allowedOrigins An array of hosts allowed to connect (same host by default), ['*'] for any
+     * @param string             $httpHost Override the $httpHost variable provided in the __construct
+     * @return ComponentInterface|WsServer
+     */
+    public function route($path, ComponentInterface $controller, array $allowedOrigins = array(), $httpHost = null) {
+        if ($controller instanceof HttpServerInterface || $controller instanceof WsServer) {
+            $decorated = $controller;
+        } elseif ($controller instanceof WampServerInterface) {
+            $decorated = new WsServer(new WampServer($controller));
+            $decorated->enableKeepAlive($this->_server->loop);
+        } elseif ($controller instanceof MessageComponentInterface || $controller instanceof WsMessageComponentInterface) {
+            $decorated = new WsServer($controller);
+            $decorated->enableKeepAlive($this->_server->loop);
+        } else {
+            $decorated = $controller;
+        }
+
+        if ($httpHost === null) {
+            $httpHost = $this->httpHost;
+        }
+
+        $allowedOrigins = array_values($allowedOrigins);
+        if (0 === count($allowedOrigins)) {
+            $allowedOrigins[] = $httpHost;
+        }
+        if ('*' !== $allowedOrigins[0]) {
+            $decorated = new OriginCheck($decorated, $allowedOrigins);
+        }
+
+        //allow origins in flash policy server
+        if(empty($this->flashServer) === false) {
+            foreach($allowedOrigins as $allowedOrgin) {
+                $this->flashServer->app->addAllowedAccess($allowedOrgin, $this->port);
+            }
+        }
+
+        $this->routes->add('rr-' . ++$this->_routeCounter, new Route($path, array('_controller' => $decorated), array('Origin' => $this->httpHost), array(), $httpHost, array(), array('GET')));
+
+        return $decorated;
+    }
+
+    /**
+     * Run the server by entering the event loop
+     */
+    public function run() {
+        $this->_server->run();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/ComponentInterface.php ---
@@ -0,0 +1,31 @@
+<?php
+namespace Ratchet;
+
+/**
+ * This is the interface to build a Ratchet application with.
+ * It implements the decorator pattern to build an application stack
+ */
+interface ComponentInterface {
+    /**
+     * When a new connection is opened it will be passed to this method
+     * @param  ConnectionInterface $conn The socket/connection that just connected to your application
+     * @throws \Exception
+     */
+    function onOpen(ConnectionInterface $conn);
+
+    /**
+     * This is called before or after a socket is closed (depends on how it's closed).  SendMessage to $conn will not result in an error if it has already been closed.
+     * @param  ConnectionInterface $conn The socket/connection that is closing/closed
+     * @throws \Exception
+     */
+    function onClose(ConnectionInterface $conn);
+
+    /**
+     * If there is an error with one of the sockets, or somewhere in the application where an Exception is thrown,
+     * the Exception is sent back down the stack, handled by the Server and bubbled back up the application through this method
+     * @param  ConnectionInterface $conn
+     * @param  \Exception          $e
+     * @throws \Exception
+     */
+    function onError(ConnectionInterface $conn, \Exception $e);
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/ConnectionInterface.php ---
@@ -0,0 +1,26 @@
+<?php
+namespace Ratchet;
+
+/**
+ * The version of Ratchet being used
+ * @var string
+ */
+const VERSION = 'Ratchet/0.4.4';
+
+/**
+ * A proxy object representing a connection to the application
+ * This acts as a container to store data (in memory) about the connection
+ */
+interface ConnectionInterface {
+    /**
+     * Send data to the connection
+     * @param  string $data
+     * @return \Ratchet\ConnectionInterface
+     */
+    function send($data);
+
+    /**
+     * Close the connection
+     */
+    function close();
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/CloseResponseTrait.php ---
@@ -0,0 +1,22 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\ConnectionInterface;
+use GuzzleHttp\Psr7\Message;
+use GuzzleHttp\Psr7\Response;
+
+trait CloseResponseTrait {
+    /**
+     * Close a connection with an HTTP response
+     * @param \Ratchet\ConnectionInterface $conn
+     * @param int                          $code HTTP status code
+     * @return null
+     */
+    private function close(ConnectionInterface $conn, $code = 400, array $additional_headers = []) {
+        $response = new Response($code, array_merge([
+            'X-Powered-By' => \Ratchet\VERSION
+        ], $additional_headers));
+
+        $conn->send(Message::toString($response));
+        $conn->close();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/HttpRequestParser.php ---
@@ -0,0 +1,64 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\MessageInterface;
+use Ratchet\ConnectionInterface;
+use GuzzleHttp\Psr7\Message;
+
+/**
+ * This class receives streaming data from a client request
+ * and parses HTTP headers, returning a PSR-7 Request object
+ * once it's been buffered
+ */
+class HttpRequestParser implements MessageInterface {
+    const EOM = "\r\n\r\n";
+
+    /**
+     * The maximum number of bytes the request can be
+     * This is a security measure to prevent attacks
+     * @var int
+     */
+    public $maxSize = 4096;
+
+    /**
+     * @param \Ratchet\ConnectionInterface $context
+     * @param string                       $data Data stream to buffer
+     * @return \Psr\Http\Message\RequestInterface
+     * @throws \OverflowException If the message buffer has become too large
+     */
+    public function onMessage(ConnectionInterface $context, $data) {
+        if (!isset($context->httpBuffer)) {
+            $context->httpBuffer = '';
+        }
+
+        $context->httpBuffer .= $data;
+
+        if (strlen($context->httpBuffer) > (int)$this->maxSize) {
+            throw new \OverflowException("Maximum buffer size of {$this->maxSize} exceeded parsing HTTP header");
+        }
+
+        if ($this->isEom($context->httpBuffer)) {
+            $request = $this->parse($context->httpBuffer);
+
+            unset($context->httpBuffer);
+
+            return $request;
+        }
+    }
+
+    /**
+     * Determine if the message has been buffered as per the HTTP specification
+     * @param  string  $message
+     * @return boolean
+     */
+    public function isEom($message) {
+        return (boolean)strpos($message, static::EOM);
+    }
+
+    /**
+     * @param string $headers
+     * @return \Psr\Http\Message\RequestInterface
+     */
+    public function parse($headers) {
+        return Message::parseRequest($headers);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/HttpServer.php ---
@@ -0,0 +1,76 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\MessageComponentInterface;
+use Ratchet\ConnectionInterface;
+
+class HttpServer implements MessageComponentInterface {
+    use CloseResponseTrait;
+
+    /**
+     * Buffers incoming HTTP requests returning a Guzzle Request when coalesced
+     * @var HttpRequestParser
+     * @note May not expose this in the future, may do through facade methods
+     */
+    protected $_reqParser;
+
+    /**
+     * @var \Ratchet\Http\HttpServerInterface
+     */
+    protected $_httpServer;
+
+    /**
+     * @param HttpServerInterface
+     */
+    public function __construct(HttpServerInterface $component) {
+        $this->_httpServer = $component;
+        $this->_reqParser  = new HttpRequestParser;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn) {
+        $conn->httpHeadersReceived = false;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onMessage(ConnectionInterface $from, $msg) {
+        if (true !== $from->httpHeadersReceived) {
+            try {
+                if (null === ($request = $this->_reqParser->onMessage($from, $msg))) {
+                    return;
+                }
+            } catch (\OverflowException $oe) {
+                return $this->close($from, 413);
+            }
+
+            $from->httpHeadersReceived = true;
+
+            return $this->_httpServer->onOpen($from, $request);
+        }
+
+        $this->_httpServer->onMessage($from, $msg);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+        if ($conn->httpHeadersReceived) {
+            $this->_httpServer->onClose($conn);
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        if ($conn->httpHeadersReceived) {
+            $this->_httpServer->onError($conn, $e);
+        } else {
+            $this->close($conn, 500);
+        }
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/HttpServerInterface.php ---
@@ -0,0 +1,14 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\MessageComponentInterface;
+use Ratchet\ConnectionInterface;
+use Psr\Http\Message\RequestInterface;
+
+interface HttpServerInterface extends MessageComponentInterface {
+    /**
+     * @param \Ratchet\ConnectionInterface          $conn
+     * @param \Psr\Http\Message\RequestInterface    $request null is default because PHP won't let me overload; don't pass null!!!
+     * @throws \UnexpectedValueException if a RequestInterface is not passed
+     */
+    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null);
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/NoOpHttpServerController.php ---
@@ -0,0 +1,18 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\ConnectionInterface;
+use Psr\Http\Message\RequestInterface;
+
+class NoOpHttpServerController implements HttpServerInterface {
+    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null) {
+    }
+
+    public function onMessage(ConnectionInterface $from, $msg) {
+    }
+
+    public function onClose(ConnectionInterface $conn) {
+    }
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/OriginCheck.php ---
@@ -0,0 +1,65 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\ConnectionInterface;
+use Ratchet\MessageComponentInterface;
+use Psr\Http\Message\RequestInterface;
+
+/**
+ * A middleware to ensure JavaScript clients connecting are from the expected domain.
+ * This protects other websites from open WebSocket connections to your application.
+ * Note: This can be spoofed from non-web browser clients
+ */
+class OriginCheck implements HttpServerInterface {
+    use CloseResponseTrait;
+
+    /**
+     * @var \Ratchet\MessageComponentInterface
+     */
+    protected $_component;
+
+    public $allowedOrigins = [];
+
+    /**
+     * @param MessageComponentInterface $component Component/Application to decorate
+     * @param array                     $allowed   An array of allowed domains that are allowed to connect from
+     */
+    public function __construct(MessageComponentInterface $component, array $allowed = []) {
+        $this->_component = $component;
+        $this->allowedOrigins += $allowed;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null) {
+        $header = (string)$request->getHeader('Origin')[0];
+        $origin = parse_url($header, PHP_URL_HOST) ?: $header;
+
+        if (!in_array($origin, $this->allowedOrigins)) {
+            return $this->close($conn, 403);
+        }
+
+        return $this->_component->onOpen($conn, $request);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onMessage(ConnectionInterface $from, $msg) {
+        return $this->_component->onMessage($from, $msg);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onClose(ConnectionInterface $conn) {
+        return $this->_component->onClose($conn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onError(ConnectionInterface $conn, \Exception $e) {
+        return $this->_component->onError($conn, $e);
+    }
+}
\ No newline at end of file

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Http/Router.php ---
@@ -0,0 +1,96 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\ConnectionInterface;
+use Psr\Http\Message\RequestInterface;
+use Symfony\Component\Routing\Matcher\UrlMatcherInterface;
+use Symfony\Component\Routing\Exception\MethodNotAllowedException;
+use Symfony\Component\Routing\Exception\ResourceNotFoundException;
+use GuzzleHttp\Psr7\Query;
+
+class Router implements HttpServerInterface {
+    use CloseResponseTrait;
+
+    /**
+     * @var \Symfony\Component\Routing\Matcher\UrlMatcherInterface
+     */
+    protected $_matcher;
+
+    private $_noopController;
+
+    public function __construct(UrlMatcherInterface $matcher) {
+        $this->_matcher = $matcher;
+        $this->_noopController = new NoOpHttpServerController;
+    }
+
+    /**
+     * {@inheritdoc}
+     * @throws \UnexpectedValueException If a controller is not \Ratchet\Http\HttpServerInterface
+     */
+    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null) {
+        if (null === $request) {
+            throw new \UnexpectedValueException('$request can not be null');
+        }
+
+        $conn->controller = $this->_noopController;
+
+        $uri = $request->getUri();
+
+        $context = $this->_matcher->getContext();
+        $context->setMethod($request->getMethod());
+        $context->setHost($uri->getHost());
+
+        try {
+            $route = $this->_matcher->match($uri->getPath());
+        } catch (MethodNotAllowedException $nae) {
+            return $this->close($conn, 405, array('Allow' => $nae->getAllowedMethods()));
+        } catch (ResourceNotFoundException $nfe) {
+            return $this->close($conn, 404);
+        }
+
+        if (is_string($route['_controller']) && class_exists($route['_controller'])) {
+            $route['_controller'] = new $route['_controller'];
+        }
+
+        if (!($route['_controller'] instanceof HttpServerInterface)) {
+            throw new \UnexpectedValueException('All routes must implement Ratchet\Http\HttpServerInterface');
+        }
+
+        $parameters = [];
+        foreach($route as $key => $value) {
+            if ((is_string($key)) && ('_' !== substr($key, 0, 1))) {
+                $parameters[$key] = $value;
+            }
+        }
+        $parameters = array_merge($parameters, Query::parse($uri->getQuery() ?: ''));
+
+        $request = $request->withUri($uri->withQuery(Query::build($parameters)));
+
+        $conn->controller = $route['_controller'];
+        $conn->controller->onOpen($conn, $request);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onMessage(ConnectionInterface $from, $msg) {
+        $from->controller->onMessage($from, $msg);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+        if (isset($conn->controller)) {
+            $conn->controller->onClose($conn);
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        if (isset($conn->controller)) {
+            $conn->controller->onError($conn, $e);
+        }
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/MessageComponentInterface.php ---
@@ -0,0 +1,5 @@
+<?php
+namespace Ratchet;
+
+interface MessageComponentInterface extends ComponentInterface, MessageInterface {
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/MessageInterface.php ---
@@ -0,0 +1,12 @@
+<?php
+namespace Ratchet;
+
+interface MessageInterface {
+    /**
+     * Triggered when a client sends data through the socket
+     * @param  \Ratchet\ConnectionInterface $from The socket/connection that sent the message to your application
+     * @param  string                       $msg  The message received
+     * @throws \Exception
+     */
+    function onMessage(ConnectionInterface $from, $msg);
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Server/EchoServer.php ---
@@ -0,0 +1,23 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\MessageComponentInterface;
+use Ratchet\ConnectionInterface;
+
+/**
+ * A simple Ratchet application that will reply to all messages with the message it received
+ */
+class EchoServer implements MessageComponentInterface {
+    public function onOpen(ConnectionInterface $conn) {
+    }
+
+    public function onMessage(ConnectionInterface $from, $msg) {
+        $from->send($msg);
+    }
+
+    public function onClose(ConnectionInterface $conn) {
+    }
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $conn->close();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Server/FlashPolicy.php ---
@@ -0,0 +1,200 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\MessageComponentInterface;
+use Ratchet\ConnectionInterface;
+
+/**
+ * An app to go on a server stack to pass a policy file to a Flash socket
+ * Useful if you're using Flash as a WebSocket polyfill on IE
+ * Be sure to run your server instance on port 843
+ * By default this lets accepts everything, make sure you tighten the rules up for production
+ * @final
+ * @link http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html
+ * @link http://learn.adobe.com/wiki/download/attachments/64389123/CrossDomain_PolicyFile_Specification.pdf?version=1
+ * @link view-source:http://www.adobe.com/xml/schemas/PolicyFileSocket.xsd
+ */
+class FlashPolicy implements MessageComponentInterface {
+
+    /**
+     * Contains the root policy node
+     * @var string
+     */
+    protected $_policy = '<?xml version="1.0"?><!DOCTYPE cross-domain-policy SYSTEM "http://www.adobe.com/xml/dtds/cross-domain-policy.dtd"><cross-domain-policy></cross-domain-policy>';
+
+    /**
+     * Stores an array of allowed domains and their ports
+     * @var array
+     */
+    protected $_access = array();
+
+    /**
+     * @var string
+     */
+    protected $_siteControl = '';
+
+    /**
+     * @var string
+     */
+    protected $_cache = '';
+
+    /**
+     * @var string
+     */
+    protected $_cacheValid = false;
+
+    /**
+     * Add a domain to an allowed access list.
+     *
+     * @param string $domain Specifies a requesting domain to be granted access. Both named domains and IP
+     * addresses are acceptable values. Subdomains are considered different domains. A wildcard (*) can
+     * be used to match all domains when used alone, or multiple domains (subdomains) when used as a
+     * prefix for an explicit, second-level domain name separated with a dot (.)
+     * @param string $ports A comma-separated list of ports or range of ports that a socket connection
+     * is allowed to connect to. A range of ports is specified through a dash (-) between two port numbers.
+     * Ranges can be used with individual ports when separated with a comma. A single wildcard (*) can
+     * be used to allow all ports.
+     * @param bool $secure
+     * @throws \UnexpectedValueException
+     * @return FlashPolicy
+     */
+    public function addAllowedAccess($domain, $ports = '*', $secure = false) {
+        if (!$this->validateDomain($domain)) {
+           throw new \UnexpectedValueException('Invalid domain');
+        }
+
+        if (!$this->validatePorts($ports)) {
+           throw new \UnexpectedValueException('Invalid Port');
+        }
+
+        $this->_access[]   = array($domain, $ports, (boolean)$secure);
+        $this->_cacheValid = false;
+
+        return $this;
+    }
+    
+    /**
+     * Removes all domains from the allowed access list.
+     * 
+     * @return \Ratchet\Server\FlashPolicy
+     */
+    public function clearAllowedAccess() {
+        $this->_access      = array();
+        $this->_cacheValid = false;
+
+        return $this;
+    }
+
+    /**
+     * site-control defines the meta-policy for the current domain. A meta-policy specifies acceptable
+     * domain policy files other than the master policy file located in the target domain's root and named
+     * crossdomain.xml.
+     *
+     * @param string $permittedCrossDomainPolicies
+     * @throws \UnexpectedValueException
+     * @return FlashPolicy
+     */
+    public function setSiteControl($permittedCrossDomainPolicies = 'all') {
+        if (!$this->validateSiteControl($permittedCrossDomainPolicies)) {
+            throw new \UnexpectedValueException('Invalid site control set');
+        }
+
+        $this->_siteControl = $permittedCrossDomainPolicies;
+        $this->_cacheValid  = false;
+
+        return $this;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn) {
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onMessage(ConnectionInterface $from, $msg) {
+        if (!$this->_cacheValid) {
+            $this->_cache      = $this->renderPolicy()->asXML();
+            $this->_cacheValid = true;
+        }
+
+        $from->send($this->_cache . "\0");
+        $from->close();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $conn->close();
+    }
+
+    /**
+     * Builds the crossdomain file based on the template policy
+     *
+     * @throws \UnexpectedValueException
+     * @return \SimpleXMLElement
+     */
+    public function renderPolicy() {
+        $policy = new \SimpleXMLElement($this->_policy);
+
+        $siteControl = $policy->addChild('site-control');
+
+        if ($this->_siteControl == '') {
+            $this->setSiteControl();
+        }
+
+        $siteControl->addAttribute('permitted-cross-domain-policies', $this->_siteControl);
+
+        if (empty($this->_access)) {
+            throw new \UnexpectedValueException('You must add a domain through addAllowedAccess()');
+        }
+
+        foreach ($this->_access as $access) {
+            $tmp = $policy->addChild('allow-access-from');
+            $tmp->addAttribute('domain', $access[0]);
+            $tmp->addAttribute('to-ports', $access[1]);
+            $tmp->addAttribute('secure', ($access[2] === true) ? 'true' : 'false');
+        }
+
+        return $policy;
+    }
+
+    /**
+     * Make sure the proper site control was passed
+     *
+     * @param string $permittedCrossDomainPolicies
+     * @return bool
+     */
+    public function validateSiteControl($permittedCrossDomainPolicies) {
+        //'by-content-type' and 'by-ftp-filename' are not available for sockets
+        return (bool)in_array($permittedCrossDomainPolicies, array('none', 'master-only', 'all'));
+    }
+
+    /**
+     * Validate for proper domains (wildcards allowed)
+     *
+     * @param string $domain
+     * @return bool
+     */
+    public function validateDomain($domain) {
+        return (bool)preg_match("/^((http(s)?:\/\/)?([a-z0-9-_]+\.|\*\.)*([a-z0-9-_\.]+)|\*)$/i", $domain);
+    }
+
+    /**
+     * Make sure valid ports were passed
+     *
+     * @param string $port
+     * @return bool
+     */
+    public function validatePorts($port) {
+        return (bool)preg_match('/^(\*|(\d+[,-]?)*\d+)$/', $port);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Server/IoConnection.php ---
@@ -0,0 +1,38 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\ConnectionInterface;
+use React\Socket\ConnectionInterface as ReactConn;
+
+/**
+ * {@inheritdoc}
+ */
+class IoConnection implements ConnectionInterface {
+    /**
+     * @var \React\Socket\ConnectionInterface
+     */
+    protected $conn;
+
+
+    /**
+     * @param \React\Socket\ConnectionInterface $conn
+     */
+    public function __construct(ReactConn $conn) {
+        $this->conn = $conn;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function send($data) {
+        $this->conn->write($data);
+
+        return $this;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function close() {
+        $this->conn->end();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Server/IoServer.php ---
@@ -0,0 +1,140 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\MessageComponentInterface;
+use React\EventLoop\LoopInterface;
+use React\Socket\ServerInterface;
+use React\EventLoop\Factory as LoopFactory;
+use React\Socket\Server as Reactor;
+use React\Socket\SecureServer as SecureReactor;
+
+/**
+ * Creates an open-ended socket to listen on a port for incoming connections.
+ * Events are delegated through this to attached applications
+ */
+class IoServer {
+    /**
+     * @var \React\EventLoop\LoopInterface
+     */
+    public $loop;
+
+    /**
+     * @var \Ratchet\MessageComponentInterface
+     */
+    public $app;
+
+    /**
+     * The socket server the Ratchet Application is run off of
+     * @var \React\Socket\ServerInterface
+     */
+    public $socket;
+
+    /**
+     * @param \Ratchet\MessageComponentInterface  $app      The Ratchet application stack to host
+     * @param \React\Socket\ServerInterface       $socket   The React socket server to run the Ratchet application off of
+     * @param \React\EventLoop\LoopInterface|null $loop     The React looper to run the Ratchet application off of
+     */
+    public function __construct(MessageComponentInterface $app, ServerInterface $socket, LoopInterface $loop = null) {
+        if (false === strpos(PHP_VERSION, "hiphop")) {
+            gc_enable();
+        }
+
+        set_time_limit(0);
+        ob_implicit_flush();
+
+        $this->loop = $loop;
+        $this->app  = $app;
+        $this->socket = $socket;
+
+        $socket->on('connection', array($this, 'handleConnect'));
+    }
+
+    /**
+     * @param  \Ratchet\MessageComponentInterface $component  The application that I/O will call when events are received
+     * @param  int                                $port       The port to server sockets on
+     * @param  string                             $address    The address to receive sockets on (0.0.0.0 means receive connections from any)
+     * @return IoServer
+     */
+    public static function factory(MessageComponentInterface $component, $port = 80, $address = '0.0.0.0') {
+        $loop   = LoopFactory::create();
+        $socket = new Reactor($address . ':' . $port, $loop);
+
+        return new static($component, $socket, $loop);
+    }
+
+    /**
+     * Run the application by entering the event loop
+     * @throws \RuntimeException If a loop was not previously specified
+     */
+    public function run() {
+        if (null === $this->loop) {
+            throw new \RuntimeException("A React Loop was not provided during instantiation");
+        }
+
+        // @codeCoverageIgnoreStart
+        $this->loop->run();
+        // @codeCoverageIgnoreEnd
+    }
+
+    /**
+     * Triggered when a new connection is received from React
+     * @param \React\Socket\ConnectionInterface $conn
+     */
+    public function handleConnect($conn) {
+        $conn->decor = new IoConnection($conn);
+        $conn->decor->resourceId = (int)$conn->stream;
+
+        $uri = $conn->getRemoteAddress();
+        $conn->decor->remoteAddress = trim(
+            parse_url((strpos($uri, '://') === false ? 'tcp://' : '') . $uri, PHP_URL_HOST),
+            '[]'
+        );
+
+        $this->app->onOpen($conn->decor);
+
+        $conn->on('data', function ($data) use ($conn) {
+            $this->handleData($data, $conn);
+        });
+        $conn->on('close', function () use ($conn) {
+            $this->handleEnd($conn);
+        });
+        $conn->on('error', function (\Exception $e) use ($conn) {
+            $this->handleError($e, $conn);
+        });
+    }
+
+    /**
+     * Data has been received from React
+     * @param string                            $data
+     * @param \React\Socket\ConnectionInterface $conn
+     */
+    public function handleData($data, $conn) {
+        try {
+            $this->app->onMessage($conn->decor, $data);
+        } catch (\Exception $e) {
+            $this->handleError($e, $conn);
+        }
+    }
+
+    /**
+     * A connection has been closed by React
+     * @param \React\Socket\ConnectionInterface $conn
+     */
+    public function handleEnd($conn) {
+        try {
+            $this->app->onClose($conn->decor);
+        } catch (\Exception $e) {
+            $this->handleError($e, $conn);
+        }
+
+        unset($conn->decor);
+    }
+
+    /**
+     * An error has occurred, let the listening application know
+     * @param \Exception                        $e
+     * @param \React\Socket\ConnectionInterface $conn
+     */
+    public function handleError(\Exception $e, $conn) {
+        $this->app->onError($conn->decor, $e);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Server/IpBlackList.php ---
@@ -0,0 +1,111 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\MessageComponentInterface;
+use Ratchet\ConnectionInterface;
+
+class IpBlackList implements MessageComponentInterface {
+    /**
+     * @var array
+     */
+    protected $_blacklist = array();
+
+    /**
+     * @var \Ratchet\MessageComponentInterface
+     */
+    protected $_decorating;
+
+    /**
+     * @param \Ratchet\MessageComponentInterface $component
+     */
+    public function __construct(MessageComponentInterface $component) {
+        $this->_decorating = $component;
+    }
+
+    /**
+     * Add an address to the blacklist that will not be allowed to connect to your application
+     * @param  string $ip IP address to block from connecting to your application
+     * @return IpBlackList
+     */
+    public function blockAddress($ip) {
+        $this->_blacklist[$ip] = true;
+
+        return $this;
+    }
+
+    /**
+     * Unblock an address so they can access your application again
+     * @param string $ip IP address to unblock from connecting to your application
+     * @return IpBlackList
+     */
+    public function unblockAddress($ip) {
+        if (isset($this->_blacklist[$this->filterAddress($ip)])) {
+            unset($this->_blacklist[$this->filterAddress($ip)]);
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param  string $address
+     * @return bool
+     */
+    public function isBlocked($address) {
+        return (isset($this->_blacklist[$this->filterAddress($address)]));
+    }
+
+    /**
+     * Get an array of all the addresses blocked
+     * @return array
+     */
+    public function getBlockedAddresses() {
+        return array_keys($this->_blacklist);
+    }
+
+    /**
+     * @param  string $address
+     * @return string
+     */
+    public function filterAddress($address) {
+        if (strstr($address, ':') && substr_count($address, '.') == 3) {
+            list($address, $port) = explode(':', $address);
+        }
+
+        return $address;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onOpen(ConnectionInterface $conn) {
+        if ($this->isBlocked($conn->remoteAddress)) {
+            return $conn->close();
+        }
+
+        return $this->_decorating->onOpen($conn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onMessage(ConnectionInterface $from, $msg) {
+        return $this->_decorating->onMessage($from, $msg);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onClose(ConnectionInterface $conn) {
+        if (!$this->isBlocked($conn->remoteAddress)) {
+            $this->_decorating->onClose($conn);
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onError(ConnectionInterface $conn, \Exception $e) {
+        if (!$this->isBlocked($conn->remoteAddress)) {
+            $this->_decorating->onError($conn, $e);
+        }
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Session/Serialize/HandlerInterface.php ---
@@ -0,0 +1,16 @@
+<?php
+namespace Ratchet\Session\Serialize;
+
+interface HandlerInterface {
+    /**
+     * @param array
+     * @return string
+     */
+    function serialize(array $data);
+
+    /**
+     * @param string
+     * @return array
+     */
+    function unserialize($raw);
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Session/Serialize/PhpBinaryHandler.php ---
@@ -0,0 +1,33 @@
+<?php
+namespace Ratchet\Session\Serialize;
+
+class PhpBinaryHandler implements HandlerInterface {
+    /**
+     * {@inheritdoc}
+     */
+    function serialize(array $data) {
+        throw new \RuntimeException("Serialize PhpHandler:serialize code not written yet, write me!");
+    }
+
+    /**
+     * {@inheritdoc}
+     * @link http://ca2.php.net/manual/en/function.session-decode.php#108037 Code from this comment on php.net
+     */
+    public function unserialize($raw) {
+        $returnData = array();
+        $offset     = 0;
+
+        while ($offset < strlen($raw)) {
+            $num     = ord($raw[$offset]);
+            $offset += 1;
+            $varname = substr($raw, $offset, $num);
+            $offset += $num;
+            $data    = unserialize(substr($raw, $offset));
+
+            $returnData[$varname] = $data;
+            $offset += strlen(serialize($data));
+        }
+
+        return $returnData;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Session/Serialize/PhpHandler.php ---
@@ -0,0 +1,49 @@
+<?php
+namespace Ratchet\Session\Serialize;
+
+class PhpHandler implements HandlerInterface {
+    /**
+     * Simply reverse behaviour of unserialize method.
+     * {@inheritdoc}
+     */
+    function serialize(array $data) {
+        $preSerialized = array();
+        $serialized = '';
+
+        if (count($data)) {
+            foreach ($data as $bucket => $bucketData) {
+                $preSerialized[] = $bucket . '|' . serialize($bucketData);
+            }
+            $serialized = implode('', $preSerialized);
+        }
+
+        return $serialized;
+    }
+
+    /**
+     * {@inheritdoc}
+     * @link http://ca2.php.net/manual/en/function.session-decode.php#108037 Code from this comment on php.net
+     * @throws \UnexpectedValueException If there is a problem parsing the data
+     */
+    public function unserialize($raw) {
+        $returnData = array();
+        $offset     = 0;
+
+        while ($offset < strlen($raw)) {
+            if (!strstr(substr($raw, $offset), "|")) {
+                throw new \UnexpectedValueException("invalid data, remaining: " . substr($raw, $offset));
+            }
+
+            $pos     = strpos($raw, "|", $offset);
+            $num     = $pos - $offset;
+            $varname = substr($raw, $offset, $num);
+            $offset += $num + 1;
+            $data    = unserialize(substr($raw, $offset));
+
+            $returnData[$varname] = $data;
+            $offset += strlen(serialize($data));
+        }
+
+        return $returnData;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Session/SessionProvider.php ---
@@ -0,0 +1,243 @@
+<?php
+namespace Ratchet\Session;
+use Ratchet\ConnectionInterface;
+use Ratchet\Http\HttpServerInterface;
+use Psr\Http\Message\RequestInterface;
+use Ratchet\Session\Storage\VirtualSessionStorage;
+use Ratchet\Session\Serialize\HandlerInterface;
+use Symfony\Component\HttpFoundation\Session\Session;
+use Symfony\Component\HttpFoundation\Session\Storage\Handler\NullSessionHandler;
+
+/**
+ * This component will allow access to session data from your website for each user connected
+ * Symfony HttpFoundation is required for this component to work
+ * Your website must also use Symfony HttpFoundation Sessions to read your sites session data
+ * If your are not using at least PHP 5.4 you must include a SessionHandlerInterface stub (is included in Symfony HttpFoundation, loaded w/ composer)
+ */
+class SessionProvider implements HttpServerInterface {
+    /**
+     * @var \Ratchet\MessageComponentInterface
+     */
+    protected $_app;
+
+    /**
+     * Selected handler storage assigned by the developer
+     * @var \SessionHandlerInterface
+     */
+    protected $_handler;
+
+    /**
+     * Null storage handler if no previous session was found
+     * @var \SessionHandlerInterface
+     */
+    protected $_null;
+
+    /**
+     * @var \Ratchet\Session\Serialize\HandlerInterface
+     */
+    protected $_serializer;
+
+    /**
+     * @param \Ratchet\Http\HttpServerInterface           $app
+     * @param \SessionHandlerInterface                    $handler
+     * @param array                                       $options
+     * @param \Ratchet\Session\Serialize\HandlerInterface $serializer
+     * @throws \RuntimeException
+     */
+    public function __construct(HttpServerInterface $app, \SessionHandlerInterface $handler, array $options = array(), HandlerInterface $serializer = null) {
+        $this->_app     = $app;
+        $this->_handler = $handler;
+        $this->_null    = new NullSessionHandler;
+
+        ini_set('session.auto_start', 0);
+        ini_set('session.cache_limiter', '');
+        ini_set('session.use_cookies', 0);
+
+        $this->setOptions($options);
+
+        if (null === $serializer) {
+            $serialClass = __NAMESPACE__ . "\\Serialize\\{$this->toClassCase(ini_get('session.serialize_handler'))}Handler"; // awesome/terrible hack, eh?
+            if (!class_exists($serialClass)) {
+                throw new \RuntimeException('Unable to parse session serialize handler');
+            }
+
+            $serializer = new $serialClass;
+        }
+
+        $this->_serializer = $serializer;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null) {
+        $sessionName = ini_get('session.name');
+
+        $id = array_reduce($request->getHeader('Cookie'), function($accumulator, $cookie) use ($sessionName) {
+            if ($accumulator) {
+                return $accumulator;
+            }
+
+            $crumbs = $this->parseCookie($cookie);
+
+            return isset($crumbs['cookies'][$sessionName]) ? $crumbs['cookies'][$sessionName] : false;
+        }, false);
+
+        if (null === $request || false === $id) {
+            $saveHandler = $this->_null;
+            $id = '';
+        } else {
+            $saveHandler = $this->_handler;
+        }
+
+        $conn->Session = new Session(new VirtualSessionStorage($saveHandler, $id, $this->_serializer));
+
+        if (ini_get('session.auto_start')) {
+            $conn->Session->start();
+        }
+
+        return $this->_app->onOpen($conn, $request);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onMessage(ConnectionInterface $from, $msg) {
+        return $this->_app->onMessage($from, $msg);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onClose(ConnectionInterface $conn) {
+        // "close" session for Connection
+
+        return $this->_app->onClose($conn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    function onError(ConnectionInterface $conn, \Exception $e) {
+        return $this->_app->onError($conn, $e);
+    }
+
+    /**
+     * Set all the php session. ini options
+     * © Symfony
+     * @param array $options
+     * @return array
+     */
+    protected function setOptions(array $options) {
+        $all = array(
+            'auto_start', 'cache_limiter', 'cookie_domain', 'cookie_httponly',
+            'cookie_lifetime', 'cookie_path', 'cookie_secure',
+            'entropy_file', 'entropy_length', 'gc_divisor',
+            'gc_maxlifetime', 'gc_probability', 'hash_bits_per_character',
+            'hash_function', 'name', 'referer_check',
+            'serialize_handler', 'use_cookies',
+            'use_only_cookies', 'use_trans_sid', 'upload_progress.enabled',
+            'upload_progress.cleanup', 'upload_progress.prefix', 'upload_progress.name',
+            'upload_progress.freq', 'upload_progress.min-freq', 'url_rewriter.tags'
+        );
+
+        foreach ($all as $key) {
+            if (!array_key_exists($key, $options)) {
+                $options[$key] = ini_get("session.{$key}");
+            } else {
+                ini_set("session.{$key}", $options[$key]);
+            }
+        }
+
+        return $options;
+    }
+
+    /**
+     * @param string $langDef Input to convert
+     * @return string
+     */
+    protected function toClassCase($langDef) {
+        return str_replace(' ', '', ucwords(str_replace('_', ' ', $langDef)));
+    }
+
+    /**
+     * Taken from Guzzle3
+     */
+    private static $cookieParts = array(
+        'domain'      => 'Domain',
+        'path'        => 'Path',
+        'max_age'     => 'Max-Age',
+        'expires'     => 'Expires',
+        'version'     => 'Version',
+        'secure'      => 'Secure',
+        'port'        => 'Port',
+        'discard'     => 'Discard',
+        'comment'     => 'Comment',
+        'comment_url' => 'Comment-Url',
+        'http_only'   => 'HttpOnly'
+    );
+
+    /**
+     * Taken from Guzzle3
+     */
+    private function parseCookie($cookie, $host = null, $path = null, $decode = false) {
+        // Explode the cookie string using a series of semicolons
+        $pieces = array_filter(array_map('trim', explode(';', $cookie)));
+
+        // The name of the cookie (first kvp) must include an equal sign.
+        if (empty($pieces) || !strpos($pieces[0], '=')) {
+            return false;
+        }
+
+        // Create the default return array
+        $data = array_merge(array_fill_keys(array_keys(self::$cookieParts), null), array(
+            'cookies'   => array(),
+            'data'      => array(),
+            'path'      => $path ?: '/',
+            'http_only' => false,
+            'discard'   => false,
+            'domain'    => $host
+        ));
+        $foundNonCookies = 0;
+
+        // Add the cookie pieces into the parsed data array
+        foreach ($pieces as $part) {
+
+            $cookieParts = explode('=', $part, 2);
+            $key = trim($cookieParts[0]);
+
+            if (count($cookieParts) == 1) {
+                // Can be a single value (e.g. secure, httpOnly)
+                $value = true;
+            } else {
+                // Be sure to strip wrapping quotes
+                $value = trim($cookieParts[1], " \n\r\t\0\x0B\"");
+                if ($decode) {
+                    $value = urldecode($value);
+                }
+            }
+
+            // Only check for non-cookies when cookies have been found
+            if (!empty($data['cookies'])) {
+                foreach (self::$cookieParts as $mapValue => $search) {
+                    if (!strcasecmp($search, $key)) {
+                        $data[$mapValue] = $mapValue == 'port' ? array_map('trim', explode(',', $value)) : $value;
+                        $foundNonCookies++;
+                        continue 2;
+                    }
+                }
+            }
+
+            // If cookies have not yet been retrieved, or this value was not found in the pieces array, treat it as a
+            // cookie. IF non-cookies have been parsed, then this isn't a cookie, it's cookie data. Cookies then data.
+            $data[$foundNonCookies ? 'data' : 'cookies'][$key] = $value;
+        }
+
+        // Calculate the expires date
+        if (!$data['expires'] && $data['max_age']) {
+            $data['expires'] = time() + (int) $data['max_age'];
+        }
+
+        return $data;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Session/Storage/Proxy/VirtualProxy.php ---
@@ -0,0 +1,54 @@
+<?php
+namespace Ratchet\Session\Storage\Proxy;
+use Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy;
+
+class VirtualProxy extends SessionHandlerProxy {
+    /**
+     * @var string
+     */
+    protected $_sessionId;
+
+    /**
+     * @var string
+     */
+    protected $_sessionName;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function __construct(\SessionHandlerInterface $handler) {
+        parent::__construct($handler);
+
+        $this->saveHandlerName = 'user';
+        $this->_sessionName    = ini_get('session.name');
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getId() {
+        return $this->_sessionId;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setId($id) {
+        $this->_sessionId = $id;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getName() {
+        return $this->_sessionName;
+    }
+
+    /**
+     * DO NOT CALL THIS METHOD
+     * @internal
+     */
+    public function setName($name) {
+        throw new \RuntimeException("Can not change session name in VirtualProxy");
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Session/Storage/VirtualSessionStorage.php ---
@@ -0,0 +1,88 @@
+<?php
+namespace Ratchet\Session\Storage;
+use Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage;
+use Ratchet\Session\Storage\Proxy\VirtualProxy;
+use Ratchet\Session\Serialize\HandlerInterface;
+
+class VirtualSessionStorage extends NativeSessionStorage {
+    /**
+     * @var \Ratchet\Session\Serialize\HandlerInterface
+     */
+    protected $_serializer;
+
+    /**
+     * @param \SessionHandlerInterface                    $handler
+     * @param string                                      $sessionId The ID of the session to retrieve
+     * @param \Ratchet\Session\Serialize\HandlerInterface $serializer
+     */
+    public function __construct(\SessionHandlerInterface $handler, $sessionId, HandlerInterface $serializer) {
+        $this->setSaveHandler($handler);
+        $this->saveHandler->setId($sessionId);
+        $this->_serializer = $serializer;
+        $this->setMetadataBag(null);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function start() {
+        if ($this->started && !$this->closed) {
+            return true;
+        }
+
+        // You have to call Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler::open() to use
+        // pdo_sqlite (and possible pdo_*) as session storage, if you are using a DSN string instead of a \PDO object
+        // in the constructor. The method arguments are filled with the values, which are also used by the symfony
+        // framework in this case. This must not be the best choice, but it works.
+        $this->saveHandler->open(session_save_path(), session_name());
+
+        $rawData     = $this->saveHandler->read($this->saveHandler->getId());
+        $sessionData = $this->_serializer->unserialize($rawData);
+
+        $this->loadSession($sessionData);
+
+        if (!$this->saveHandler->isWrapper() && !$this->saveHandler->isSessionHandlerInterface()) {
+            $this->saveHandler->setActive(false);
+        }
+
+        return true;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function regenerate($destroy = false, $lifetime = null) {
+        // .. ?
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function save() {
+        // get the data from the bags?
+        // serialize the data
+        // save the data using the saveHandler
+//        $this->saveHandler->write($this->saveHandler->getId(),
+
+        if (!$this->saveHandler->isWrapper() && !$this->getSaveHandler()->isSessionHandlerInterface()) {
+            $this->saveHandler->setActive(false);
+        }
+
+        $this->closed = true;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setSaveHandler($saveHandler = null) {
+        if (!($saveHandler instanceof \SessionHandlerInterface)) {
+            throw new \InvalidArgumentException('Handler must be instance of SessionHandlerInterface');
+        }
+
+        if (!($saveHandler instanceof VirtualProxy)) {
+            $saveHandler = new VirtualProxy($saveHandler);
+        }
+
+        $this->saveHandler = $saveHandler;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/Exception.php ---
@@ -0,0 +1,5 @@
+<?php
+namespace Ratchet\Wamp;
+
+class Exception extends \Exception {
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/JsonException.php ---
@@ -0,0 +1,31 @@
+<?php
+namespace Ratchet\Wamp;
+
+class JsonException extends Exception {
+    public function __construct() {
+        $code = json_last_error();
+
+        switch ($code) {
+            case JSON_ERROR_DEPTH:
+                $msg = 'Maximum stack depth exceeded';
+            break;
+            case JSON_ERROR_STATE_MISMATCH:
+                $msg = 'Underflow or the modes mismatch';
+            break;
+            case JSON_ERROR_CTRL_CHAR:
+                $msg = 'Unexpected control character found';
+            break;
+            case JSON_ERROR_SYNTAX:
+                $msg = 'Syntax error, malformed JSON';
+            break;
+            case JSON_ERROR_UTF8:
+                $msg = 'Malformed UTF-8 characters, possibly incorrectly encoded';
+            break;
+            default:
+                $msg = 'Unknown error';
+            break;
+        }
+
+        parent::__construct($msg, $code);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/ServerProtocol.php ---
@@ -0,0 +1,161 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\MessageComponentInterface;
+use Ratchet\WebSocket\WsServerInterface;
+use Ratchet\ConnectionInterface;
+
+/**
+ * WebSocket Application Messaging Protocol
+ *
+ * @link http://wamp.ws/spec
+ * @link https://github.com/oberstet/autobahn-js
+ *
+ * +--------------+----+------------------+
+ * | Message Type | ID | DIRECTION        |
+ * |--------------+----+------------------+
+ * | WELCOME      | 0  | Server-to-Client |
+ * | PREFIX       | 1  | Bi-Directional   |
+ * | CALL         | 2  | Client-to-Server |
+ * | CALL RESULT  | 3  | Server-to-Client |
+ * | CALL ERROR   | 4  | Server-to-Client |
+ * | SUBSCRIBE    | 5  | Client-to-Server |
+ * | UNSUBSCRIBE  | 6  | Client-to-Server |
+ * | PUBLISH      | 7  | Client-to-Server |
+ * | EVENT        | 8  | Server-to-Client |
+ * +--------------+----+------------------+
+ */
+class ServerProtocol implements MessageComponentInterface, WsServerInterface {
+    const MSG_WELCOME     = 0;
+    const MSG_PREFIX      = 1;
+    const MSG_CALL        = 2;
+    const MSG_CALL_RESULT = 3;
+    const MSG_CALL_ERROR  = 4;
+    const MSG_SUBSCRIBE   = 5;
+    const MSG_UNSUBSCRIBE = 6;
+    const MSG_PUBLISH     = 7;
+    const MSG_EVENT       = 8;
+
+    /**
+     * @var WampServerInterface
+     */
+    protected $_decorating;
+
+    /**
+     * @var \SplObjectStorage
+     */
+    protected $connections;
+
+    /**
+     * @param WampServerInterface $serverComponent An class to propagate calls through
+     */
+    public function __construct(WampServerInterface $serverComponent) {
+        $this->_decorating = $serverComponent;
+        $this->connections = new \SplObjectStorage;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getSubProtocols() {
+        if ($this->_decorating instanceof WsServerInterface) {
+            $subs   = $this->_decorating->getSubProtocols();
+            $subs[] = 'wamp';
+
+            return $subs;
+        }
+
+        return ['wamp'];
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn) {
+        $decor = new WampConnection($conn);
+        $this->connections->attach($conn, $decor);
+
+        $this->_decorating->onOpen($decor);
+    }
+
+    /**
+     * {@inheritdoc}
+     * @throws \Ratchet\Wamp\Exception
+     * @throws \Ratchet\Wamp\JsonException
+     */
+    public function onMessage(ConnectionInterface $from, $msg) {
+        $from = $this->connections[$from];
+
+        if (null === ($json = @json_decode($msg, true))) {
+            throw new JsonException;
+        }
+
+        if (!is_array($json) || $json !== array_values($json)) {
+            throw new Exception("Invalid WAMP message format");
+        }
+
+        if (isset($json[1]) && !(is_string($json[1]) || is_numeric($json[1]))) {
+            throw new Exception('Invalid Topic, must be a string');
+        }
+
+        switch ($json[0]) {
+            case static::MSG_PREFIX:
+                $from->WAMP->prefixes[$json[1]] = $json[2];
+            break;
+
+            case static::MSG_CALL:
+                array_shift($json);
+                $callID  = array_shift($json);
+                $procURI = array_shift($json);
+
+                if (count($json) == 1 && is_array($json[0])) {
+                    $json = $json[0];
+                }
+
+                $this->_decorating->onCall($from, $callID, $from->getUri($procURI), $json);
+            break;
+
+            case static::MSG_SUBSCRIBE:
+                $this->_decorating->onSubscribe($from, $from->getUri($json[1]));
+            break;
+
+            case static::MSG_UNSUBSCRIBE:
+                $this->_decorating->onUnSubscribe($from, $from->getUri($json[1]));
+            break;
+
+            case static::MSG_PUBLISH:
+                $exclude  = (array_key_exists(3, $json) ? $json[3] : null);
+                if (!is_array($exclude)) {
+                    if (true === (boolean)$exclude) {
+                        $exclude = [$from->WAMP->sessionId];
+                    } else {
+                        $exclude = [];
+                    }
+                }
+
+                $eligible = (array_key_exists(4, $json) ? $json[4] : []);
+
+                $this->_decorating->onPublish($from, $from->getUri($json[1]), $json[2], $exclude, $eligible);
+            break;
+
+            default:
+                throw new Exception('Invalid WAMP message type');
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+        $decor = $this->connections[$conn];
+        $this->connections->detach($conn);
+
+        $this->_decorating->onClose($decor);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        return $this->_decorating->onError($this->connections[$conn], $e);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/Topic.php ---
@@ -0,0 +1,101 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\ConnectionInterface;
+
+/**
+ * A topic/channel containing connections that have subscribed to it
+ */
+class Topic implements \IteratorAggregate, \Countable {
+    private $id;
+
+    private $subscribers;
+
+    /**
+     * @param string $topicId Unique ID for this object
+     */
+    public function __construct($topicId) {
+        $this->id = $topicId;
+        $this->subscribers = new \SplObjectStorage;
+    }
+
+    /**
+     * @return string
+     */
+    public function getId() {
+        return $this->id;
+    }
+
+    public function __toString() {
+        return $this->getId();
+    }
+
+    /**
+     * Send a message to all the connections in this topic
+     * @param string|array $msg Payload to publish
+     * @param array $exclude A list of session IDs the message should be excluded from (blacklist)
+     * @param array $eligible A list of session Ids the message should be send to (whitelist)
+     * @return Topic The same Topic object to chain
+     */
+    public function broadcast($msg, array $exclude = array(), array $eligible = array()) {
+        $useEligible = (bool)count($eligible);
+        foreach ($this->subscribers as $client) {
+            if (in_array($client->WAMP->sessionId, $exclude)) {
+                continue;
+            }
+
+            if ($useEligible && !in_array($client->WAMP->sessionId, $eligible)) {
+                continue;
+            }
+
+            $client->event($this->id, $msg);
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param  WampConnection $conn
+     * @return boolean
+     */
+    public function has(ConnectionInterface $conn) {
+        return $this->subscribers->contains($conn);
+    }
+
+    /**
+     * @param WampConnection $conn
+     * @return Topic
+     */
+    public function add(ConnectionInterface $conn) {
+        $this->subscribers->attach($conn);
+
+        return $this;
+    }
+
+    /**
+     * @param WampConnection $conn
+     * @return Topic
+     */
+    public function remove(ConnectionInterface $conn) {
+        if ($this->subscribers->contains($conn)) {
+            $this->subscribers->detach($conn);
+        }
+
+        return $this;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    #[\ReturnTypeWillChange]
+    public function getIterator() {
+        return $this->subscribers;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    #[\ReturnTypeWillChange]
+    public function count() {
+        return $this->subscribers->count();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/TopicManager.php ---
@@ -0,0 +1,125 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\ConnectionInterface;
+use Ratchet\WebSocket\WsServerInterface;
+
+class TopicManager implements WsServerInterface, WampServerInterface {
+    /**
+     * @var WampServerInterface
+     */
+    protected $app;
+
+    /**
+     * @var array
+     */
+    protected $topicLookup = array();
+
+    public function __construct(WampServerInterface $app) {
+        $this->app = $app;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn) {
+        $conn->WAMP->subscriptions = new \SplObjectStorage;
+        $this->app->onOpen($conn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onCall(ConnectionInterface $conn, $id, $topic, array $params) {
+        $this->app->onCall($conn, $id, $this->getTopic($topic), $params);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onSubscribe(ConnectionInterface $conn, $topic) {
+        $topicObj = $this->getTopic($topic);
+
+        if ($conn->WAMP->subscriptions->contains($topicObj)) {
+            return;
+        }
+
+        $this->topicLookup[$topic]->add($conn);
+        $conn->WAMP->subscriptions->attach($topicObj);
+        $this->app->onSubscribe($conn, $topicObj);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onUnsubscribe(ConnectionInterface $conn, $topic) {
+        $topicObj = $this->getTopic($topic);
+
+        if (!$conn->WAMP->subscriptions->contains($topicObj)) {
+            return;
+        }
+
+        $this->cleanTopic($topicObj, $conn);
+
+        $this->app->onUnsubscribe($conn, $topicObj);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onPublish(ConnectionInterface $conn, $topic, $event, array $exclude, array $eligible) {
+        $this->app->onPublish($conn, $this->getTopic($topic), $event, $exclude, $eligible);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+        $this->app->onClose($conn);
+
+        foreach ($this->topicLookup as $topic) {
+            $this->cleanTopic($topic, $conn);
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $this->app->onError($conn, $e);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getSubProtocols() {
+        if ($this->app instanceof WsServerInterface) {
+            return $this->app->getSubProtocols();
+        }
+
+        return array();
+    }
+
+    /**
+     * @param string
+     * @return Topic
+     */
+    protected function getTopic($topic) {
+        if (!array_key_exists($topic, $this->topicLookup)) {
+            $this->topicLookup[$topic] = new Topic($topic);
+        }
+
+        return $this->topicLookup[$topic];
+    }
+
+    protected function cleanTopic(Topic $topic, ConnectionInterface $conn) {
+        if ($conn->WAMP->subscriptions->contains($topic)) {
+            $conn->WAMP->subscriptions->detach($topic);
+        }
+
+        $this->topicLookup[$topic->getId()]->remove($conn);
+
+        if (0 === $topic->count()) {
+            unset($this->topicLookup[$topic->getId()]);
+        }
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/WampConnection.php ---
@@ -0,0 +1,115 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\ConnectionInterface;
+use Ratchet\AbstractConnectionDecorator;
+use Ratchet\Wamp\ServerProtocol as WAMP;
+
+/**
+ * A ConnectionInterface object wrapper that is passed to your WAMP application
+ * representing a client. Methods on this Connection are therefore different.
+ * @property \stdClass $WAMP
+ */
+class WampConnection extends AbstractConnectionDecorator {
+    /**
+     * {@inheritdoc}
+     */
+    public function __construct(ConnectionInterface $conn) {
+        parent::__construct($conn);
+
+        $this->WAMP            = new \StdClass;
+        $this->WAMP->sessionId = str_replace('.', '', uniqid(mt_rand(), true));
+        $this->WAMP->prefixes  = array();
+
+        $this->send(json_encode(array(WAMP::MSG_WELCOME, $this->WAMP->sessionId, 1, \Ratchet\VERSION)));
+    }
+
+    /**
+     * Successfully respond to a call made by the client
+     * @param string $id   The unique ID given by the client to respond to
+     * @param array $data an object or array
+     * @return WampConnection
+     */
+    public function callResult($id, $data = array()) {
+        return $this->send(json_encode(array(WAMP::MSG_CALL_RESULT, $id, $data)));
+    }
+
+    /**
+     * Respond with an error to a client call
+     * @param string $id The   unique ID given by the client to respond to
+     * @param string $errorUri The URI given to identify the specific error
+     * @param string $desc     A developer-oriented description of the error
+     * @param string $details An optional human readable detail message to send back
+     * @return WampConnection
+     */
+    public function callError($id, $errorUri, $desc = '', $details = null) {
+        if ($errorUri instanceof Topic) {
+            $errorUri = (string)$errorUri;
+        }
+
+        $data = array(WAMP::MSG_CALL_ERROR, $id, $errorUri, $desc);
+
+        if (null !== $details) {
+            $data[] = $details;
+        }
+
+        return $this->send(json_encode($data));
+    }
+
+    /**
+     * @param string $topic The topic to broadcast to
+     * @param mixed  $msg   Data to send with the event.  Anything that is json'able
+     * @return WampConnection
+     */
+    public function event($topic, $msg) {
+        return $this->send(json_encode(array(WAMP::MSG_EVENT, (string)$topic, $msg)));
+    }
+
+    /**
+     * @param string $curie
+     * @param string $uri
+     * @return WampConnection
+     */
+    public function prefix($curie, $uri) {
+        $this->WAMP->prefixes[$curie] = (string)$uri;
+
+        return $this->send(json_encode(array(WAMP::MSG_PREFIX, $curie, (string)$uri)));
+    }
+
+    /**
+     * Get the full request URI from the connection object if a prefix has been established for it
+     * @param string $uri
+     * @return string
+     */
+    public function getUri($uri) {
+        $curieSeperator = ':';
+
+        if (preg_match('/http(s*)\:\/\//', $uri) == false) {
+            if (strpos($uri, $curieSeperator) !== false) {
+                list($prefix, $action) = explode($curieSeperator, $uri);
+                
+                if(isset($this->WAMP->prefixes[$prefix]) === true){
+                  return $this->WAMP->prefixes[$prefix] . '#' . $action;
+                }
+            }
+        }
+
+        return $uri;
+    }
+
+    /**
+     * @internal
+     */
+    public function send($data) {
+        $this->getConnection()->send($data);
+
+        return $this;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function close($opt = null) {
+        $this->getConnection()->close($opt);
+    }
+
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/WampServer.php ---
@@ -0,0 +1,67 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\MessageComponentInterface;
+use Ratchet\WebSocket\WsServerInterface;
+use Ratchet\ConnectionInterface;
+
+/**
+ * Enable support for the official WAMP sub-protocol in your application
+ * WAMP allows for Pub/Sub and RPC
+ * @link http://wamp.ws The WAMP specification
+ * @link https://github.com/oberstet/autobahn-js Souce for client side library
+ * @link http://autobahn.s3.amazonaws.com/js/autobahn.min.js Minified client side library
+ */
+class WampServer implements MessageComponentInterface, WsServerInterface {
+    /**
+     * @var ServerProtocol
+     */
+    protected $wampProtocol;
+
+    /**
+     * This class just makes it 1 step easier to use Topic objects in WAMP
+     * If you're looking at the source code, look in the __construct of this
+     *  class and use that to make your application instead of using this
+     */
+    public function __construct(WampServerInterface $app) {
+        $this->wampProtocol = new ServerProtocol(new TopicManager($app));
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn) {
+        $this->wampProtocol->onOpen($conn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onMessage(ConnectionInterface $conn, $msg) {
+        try {
+            $this->wampProtocol->onMessage($conn, $msg);
+        } catch (Exception $we) {
+            $conn->close(1007);
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+        $this->wampProtocol->onClose($conn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $this->wampProtocol->onError($conn, $e);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getSubProtocols() {
+        return $this->wampProtocol->getSubProtocols();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/Wamp/WampServerInterface.php ---
@@ -0,0 +1,43 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\ComponentInterface;
+use Ratchet\ConnectionInterface;
+
+/**
+ * An extension of Ratchet\ComponentInterface to server a WAMP application
+ * onMessage is replaced by various types of messages for this protocol (pub/sub or rpc)
+ */
+interface WampServerInterface extends ComponentInterface {
+    /**
+     * An RPC call has been received
+     * @param \Ratchet\ConnectionInterface $conn
+     * @param string                       $id The unique ID of the RPC, required to respond to
+     * @param string|Topic                 $topic The topic to execute the call against
+     * @param array                        $params Call parameters received from the client
+     */
+    function onCall(ConnectionInterface $conn, $id, $topic, array $params);
+
+    /**
+     * A request to subscribe to a topic has been made
+     * @param \Ratchet\ConnectionInterface $conn
+     * @param string|Topic                 $topic The topic to subscribe to
+     */
+    function onSubscribe(ConnectionInterface $conn, $topic);
+
+    /**
+     * A request to unsubscribe from a topic has been made
+     * @param \Ratchet\ConnectionInterface $conn
+     * @param string|Topic                 $topic The topic to unsubscribe from
+     */
+    function onUnSubscribe(ConnectionInterface $conn, $topic);
+
+    /**
+     * A client is attempting to publish content to a subscribed connections on a URI
+     * @param \Ratchet\ConnectionInterface $conn
+     * @param string|Topic                 $topic The topic the user has attempted to publish to
+     * @param string                       $event Payload of the publish
+     * @param array                        $exclude A list of session IDs the message should be excluded from (blacklist)
+     * @param array                        $eligible A list of session Ids the message should be send to (whitelist)
+     */
+    function onPublish(ConnectionInterface $conn, $topic, $event, array $exclude, array $eligible);
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/WebSocket/ConnContext.php ---
@@ -0,0 +1,20 @@
+<?php
+namespace Ratchet\WebSocket;
+use Ratchet\RFC6455\Messaging\MessageBuffer;
+
+class ConnContext {
+    /**
+     * @var \Ratchet\WebSocket\WsConnection
+     */
+    public $connection;
+
+    /**
+     * @var \Ratchet\RFC6455\Messaging\MessageBuffer;
+     */
+    public $buffer;
+
+    public function __construct(WsConnection $conn, MessageBuffer $buffer) {
+        $this->connection = $conn;
+        $this->buffer = $buffer;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/WebSocket/MessageCallableInterface.php ---
@@ -0,0 +1,8 @@
+<?php
+namespace Ratchet\WebSocket;
+use Ratchet\ConnectionInterface;
+use Ratchet\RFC6455\Messaging\MessageInterface;
+
+interface MessageCallableInterface {
+    public function onMessage(ConnectionInterface $conn, MessageInterface $msg);
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/WebSocket/MessageComponentInterface.php ---
@@ -0,0 +1,6 @@
+<?php
+namespace Ratchet\WebSocket;
+use Ratchet\ComponentInterface;
+
+interface MessageComponentInterface extends ComponentInterface, MessageCallableInterface {
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/WebSocket/WsConnection.php ---
@@ -0,0 +1,45 @@
+<?php
+namespace Ratchet\WebSocket;
+use Ratchet\AbstractConnectionDecorator;
+use Ratchet\RFC6455\Messaging\DataInterface;
+use Ratchet\RFC6455\Messaging\Frame;
+
+/**
+ * {@inheritdoc}
+ * @property \StdClass $WebSocket
+ */
+class WsConnection extends AbstractConnectionDecorator {
+    /**
+     * {@inheritdoc}
+     */
+    public function send($msg) {
+        if (!$this->WebSocket->closing) {
+            if (!($msg instanceof DataInterface)) {
+                $msg = new Frame($msg);
+            }
+
+            $this->getConnection()->send($msg->getContents());
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param int|\Ratchet\RFC6455\Messaging\DataInterface
+     */
+    public function close($code = 1000) {
+        if ($this->WebSocket->closing) {
+            return;
+        }
+
+        if ($code instanceof DataInterface) {
+            $this->send($code);
+        } else {
+            $this->send(new Frame(pack('n', $code), true, Frame::OP_CLOSE));
+        }
+
+        $this->getConnection()->close();
+
+        $this->WebSocket->closing = true;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/WebSocket/WsServer.php ---
@@ -0,0 +1,225 @@
+<?php
+namespace Ratchet\WebSocket;
+use Ratchet\ComponentInterface;
+use Ratchet\ConnectionInterface;
+use Ratchet\MessageComponentInterface as DataComponentInterface;
+use Ratchet\Http\HttpServerInterface;
+use Ratchet\Http\CloseResponseTrait;
+use Psr\Http\Message\RequestInterface;
+use Ratchet\RFC6455\Messaging\MessageInterface;
+use Ratchet\RFC6455\Messaging\FrameInterface;
+use Ratchet\RFC6455\Messaging\Frame;
+use Ratchet\RFC6455\Messaging\MessageBuffer;
+use Ratchet\RFC6455\Messaging\CloseFrameChecker;
+use Ratchet\RFC6455\Handshake\ServerNegotiator;
+use Ratchet\RFC6455\Handshake\RequestVerifier;
+use React\EventLoop\LoopInterface;
+use GuzzleHttp\Psr7\Message;
+
+/**
+ * The adapter to handle WebSocket requests/responses
+ * This is a mediator between the Server and your application to handle real-time messaging through a web browser
+ * @link http://ca.php.net/manual/en/ref.http.php
+ * @link http://dev.w3.org/html5/websockets/
+ */
+class WsServer implements HttpServerInterface {
+    use CloseResponseTrait;
+
+    /**
+     * Decorated component
+     * @var \Ratchet\ComponentInterface
+     */
+    private $delegate;
+
+    /**
+     * @var \SplObjectStorage
+     */
+    protected $connections;
+
+    /**
+     * @var \Ratchet\RFC6455\Messaging\CloseFrameChecker
+     */
+    private $closeFrameChecker;
+
+    /**
+     * @var \Ratchet\RFC6455\Handshake\ServerNegotiator
+     */
+    private $handshakeNegotiator;
+
+    /**
+     * @var \Closure
+     */
+    private $ueFlowFactory;
+
+    /**
+     * @var \Closure
+     */
+    private $pongReceiver;
+
+    /**
+     * @var \Closure
+     */
+    private $msgCb;
+
+    /**
+     * @param \Ratchet\WebSocket\MessageComponentInterface|\Ratchet\MessageComponentInterface $component Your application to run with WebSockets
+     * @note If you want to enable sub-protocols have your component implement WsServerInterface as well
+     */
+    public function __construct(ComponentInterface $component) {
+        if ($component instanceof MessageComponentInterface) {
+            $this->msgCb = function(ConnectionInterface $conn, MessageInterface $msg) {
+                $this->delegate->onMessage($conn, $msg);
+            };
+        } elseif ($component instanceof DataComponentInterface) {
+            $this->msgCb = function(ConnectionInterface $conn, MessageInterface $msg) {
+                $this->delegate->onMessage($conn, $msg->getPayload());
+            };
+        } else {
+            throw new \UnexpectedValueException('Expected instance of \Ratchet\WebSocket\MessageComponentInterface or \Ratchet\MessageComponentInterface');
+        }
+
+        if (bin2hex('✓') !== 'e29c93') {
+            throw new \DomainException('Bad encoding, unicode character ✓ did not match expected value. Ensure charset UTF-8 and check ini val mbstring.func_autoload');
+        }
+
+        $this->delegate    = $component;
+        $this->connections = new \SplObjectStorage;
+
+        $this->closeFrameChecker   = new CloseFrameChecker;
+        $this->handshakeNegotiator = new ServerNegotiator(new RequestVerifier);
+        $this->handshakeNegotiator->setStrictSubProtocolCheck(true);
+
+        if ($component instanceof WsServerInterface) {
+            $this->handshakeNegotiator->setSupportedSubProtocols($component->getSubProtocols());
+        }
+
+        $this->pongReceiver = function() {};
+
+        $reusableUnderflowException = new \UnderflowException;
+        $this->ueFlowFactory = function() use ($reusableUnderflowException) {
+            return $reusableUnderflowException;
+        };
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null) {
+        if (null === $request) {
+            throw new \UnexpectedValueException('$request can not be null');
+        }
+
+        $conn->httpRequest = $request;
+
+        $conn->WebSocket            = new \StdClass;
+        $conn->WebSocket->closing   = false;
+
+        $response = $this->handshakeNegotiator->handshake($request)->withHeader('X-Powered-By', \Ratchet\VERSION);
+
+        $conn->send(Message::toString($response));
+
+        if (101 !== $response->getStatusCode()) {
+            return $conn->close();
+        }
+
+        $wsConn = new WsConnection($conn);
+
+        $streamer = new MessageBuffer(
+            $this->closeFrameChecker,
+            function(MessageInterface $msg) use ($wsConn) {
+                $cb = $this->msgCb;
+                $cb($wsConn, $msg);
+            },
+            function(FrameInterface $frame) use ($wsConn) {
+                $this->onControlFrame($frame, $wsConn);
+            },
+            true,
+            $this->ueFlowFactory
+        );
+
+        $this->connections->attach($conn, new ConnContext($wsConn, $streamer));
+
+        return $this->delegate->onOpen($wsConn);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onMessage(ConnectionInterface $from, $msg) {
+        if ($from->WebSocket->closing) {
+            return;
+        }
+
+        $this->connections[$from]->buffer->onData($msg);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onClose(ConnectionInterface $conn) {
+        if ($this->connections->contains($conn)) {
+            $context = $this->connections[$conn];
+            $this->connections->detach($conn);
+
+            $this->delegate->onClose($context->connection);
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        if ($this->connections->contains($conn)) {
+            $this->delegate->onError($this->connections[$conn]->connection, $e);
+        } else {
+            $conn->close();
+        }
+    }
+
+    public function onControlFrame(FrameInterface $frame, WsConnection $conn) {
+        switch ($frame->getOpCode()) {
+            case Frame::OP_CLOSE:
+                $conn->close($frame);
+                break;
+            case Frame::OP_PING:
+                $conn->send(new Frame($frame->getPayload(), true, Frame::OP_PONG));
+                break;
+            case Frame::OP_PONG:
+                $pongReceiver = $this->pongReceiver;
+                $pongReceiver($frame, $conn);
+            break;
+        }
+    }
+
+    public function setStrictSubProtocolCheck($enable) {
+        $this->handshakeNegotiator->setStrictSubProtocolCheck($enable);
+    }
+
+    public function enableKeepAlive(LoopInterface $loop, $interval = 30) {
+        $lastPing = new Frame(uniqid(), true, Frame::OP_PING);
+        $pingedConnections = new \SplObjectStorage;
+        $splClearer = new \SplObjectStorage;
+
+        $this->pongReceiver = function(FrameInterface $frame, $wsConn) use ($pingedConnections, &$lastPing) {
+            if ($frame->getPayload() === $lastPing->getPayload()) {
+                $pingedConnections->detach($wsConn);
+            }
+        };
+
+        $loop->addPeriodicTimer((int)$interval, function() use ($pingedConnections, &$lastPing, $splClearer) {
+            foreach ($pingedConnections as $wsConn) {
+                $wsConn->close();
+            }
+            $pingedConnections->removeAllExcept($splClearer);
+
+            $lastPing = new Frame(uniqid(), true, Frame::OP_PING);
+
+            foreach ($this->connections as $key => $conn) {
+                $wsConn  = $this->connections[$conn]->connection;
+
+                $wsConn->send($lastPing);
+                $pingedConnections->attach($wsConn);
+            }
+        });
+   }
+}

--- include/lib/Composer/vendor/cboden/ratchet/src/Ratchet/WebSocket/WsServerInterface.php ---
@@ -0,0 +1,14 @@
+<?php
+namespace Ratchet\WebSocket;
+
+/**
+ * WebSocket Server Interface
+ */
+interface WsServerInterface {
+    /**
+     * If any component in a stack supports a WebSocket sub-protocol return each supported in an array
+     * @return array
+     * @todo This method may be removed in future version (note that will not break code, just make some code obsolete)
+     */
+    function getSubProtocols();
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/autobahn/bin/fuzzingserver.php ---
@@ -0,0 +1,36 @@
+<?php
+use Ratchet\ConnectionInterface;
+
+    require dirname(dirname(dirname(__DIR__))) . '/vendor/autoload.php';
+
+class BinaryEcho implements \Ratchet\WebSocket\MessageComponentInterface {
+    public function onMessage(ConnectionInterface $from, \Ratchet\RFC6455\Messaging\MessageInterface $msg) {
+        $from->send($msg);
+    }
+
+    public function onOpen(ConnectionInterface $conn) {
+    }
+
+    public function onClose(ConnectionInterface $conn) {
+    }
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+    }
+}
+
+    $port = $argc > 1 ? $argv[1] : 8000;
+    $impl = sprintf('React\EventLoop\%sLoop', $argc > 2 ? $argv[2] : 'StreamSelect');
+
+    $loop = new $impl;
+    $sock = new React\Socket\Server('0.0.0.0:' . $port, $loop);
+
+    $wsServer = new Ratchet\WebSocket\WsServer(new BinaryEcho);
+    // This is enabled to test https://github.com/ratchetphp/Ratchet/issues/430
+    // The time is left at 10 minutes so that it will not try to every ping anything
+    // This causes the Ratchet server to crash on test 2.7
+    $wsServer->enableKeepAlive($loop, 600);
+
+    $app = new Ratchet\Http\HttpServer($wsServer);
+
+    $server = new Ratchet\Server\IoServer($app, $sock, $loop);
+    $server->run();

--- include/lib/Composer/vendor/cboden/ratchet/tests/autobahn/fuzzingclient-all.json ---
@@ -0,0 +1,15 @@
+{
+    "options": {"failByDrop": false}
+  , "outdir": "reports/ab"
+
+  , "servers": [
+        {"agent": "Ratchet/0.4 libevent", "url": "ws://localhost:8001", "options": {"version": 18}}
+      , {"agent": "Ratchet/0.4 libev", "url": "ws://localhost:8004", "options": {"version": 18}}
+      , {"agent": "Ratchet/0.4 streams", "url": "ws://localhost:8002", "options": {"version": 18}}
+      , {"agent": "AutobahnTestSuite/0.5.9", "url": "ws://localhost:8000", "options": {"version": 18}}
+    ]
+
+  , "cases": ["*"]
+  , "exclude-cases": []
+  , "exclude-agent-cases": {}
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/autobahn/fuzzingclient-profile.json ---
@@ -0,0 +1,12 @@
+{
+    "options": {"failByDrop": false}
+  , "outdir": "reports/profile"
+
+  , "servers": [
+        {"agent": "Ratchet", "url": "ws://localhost:8000", "options": {"version": 18}}
+    ]
+
+  , "cases": ["9.7.4"]
+  , "exclude-cases": ["1.2.*", "2.3", "2.4", "2.6", "9.2.*", "9.4.*", "9.6.*", "9.8.*"]
+  , "exclude-agent-cases": {}
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/autobahn/fuzzingclient-quick.json ---
@@ -0,0 +1,12 @@
+{
+    "options": {"failByDrop": false}
+  , "outdir": "reports/rfc"
+
+  , "servers": [
+       {"agent": "Ratchet", "url": "ws://localhost:8000", "options": {"version": 18}}
+    ]
+
+  , "cases": ["*"]
+  , "exclude-cases": []
+  , "exclude-agent-cases": {}
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/bootstrap.php ---
@@ -0,0 +1,4 @@
+<?php
+
+    $loader = require __DIR__ . '/../vendor/autoload.php';
+    $loader->addPsr4('Ratchet\\', __DIR__ . '/helpers/Ratchet');

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/AbstractMessageComponentTestCase.php ---
@@ -0,0 +1,50 @@
+<?php
+namespace Ratchet;
+
+abstract class AbstractMessageComponentTestCase extends \PHPUnit_Framework_TestCase {
+    protected $_app;
+    protected $_serv;
+    protected $_conn;
+
+    abstract public function getConnectionClassString();
+    abstract public function getDecoratorClassString();
+    abstract public function getComponentClassString();
+
+    public function setUp() {
+        $this->_app  = $this->getMock($this->getComponentClassString());
+        $decorator   = $this->getDecoratorClassString();
+        $this->_serv = new $decorator($this->_app);
+        $this->_conn = $this->getMock('\Ratchet\ConnectionInterface');
+
+        $this->doOpen($this->_conn);
+    }
+
+    protected function doOpen($conn) {
+        $this->_serv->onOpen($conn);
+    }
+
+    public function isExpectedConnection() {
+        return new \PHPUnit_Framework_Constraint_IsInstanceOf($this->getConnectionClassString());
+    }
+
+    public function testOpen() {
+        $this->_app->expects($this->once())->method('onOpen')->with($this->isExpectedConnection());
+        $this->doOpen($this->getMock('\Ratchet\ConnectionInterface'));
+    }
+
+    public function testOnClose() {
+        $this->_app->expects($this->once())->method('onClose')->with($this->isExpectedConnection());
+        $this->_serv->onClose($this->_conn);
+    }
+
+    public function testOnError() {
+        $e = new \Exception('Whoops!');
+        $this->_app->expects($this->once())->method('onError')->with($this->isExpectedConnection(), $e);
+        $this->_serv->onError($this->_conn, $e);
+    }
+
+    public function passthroughMessageTest($value) {
+        $this->_app->expects($this->once())->method('onMessage')->with($this->isExpectedConnection(), $value);
+        $this->_serv->onMessage($this->_conn, $value);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/Mock/Component.php ---
@@ -0,0 +1,35 @@
+<?php
+namespace Ratchet\Mock;
+use Ratchet\MessageComponentInterface;
+use Ratchet\WebSocket\WsServerInterface;
+use Ratchet\ConnectionInterface;
+
+class Component implements MessageComponentInterface, WsServerInterface {
+    public $last = array();
+
+    public $protocols = array();
+
+    public function __construct(ComponentInterface $app = null) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onOpen(ConnectionInterface $conn) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onMessage(ConnectionInterface $from, $msg) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onClose(ConnectionInterface $conn) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function getSubProtocols() {
+        return $this->protocols;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/Mock/Connection.php ---
@@ -0,0 +1,20 @@
+<?php
+namespace Ratchet\Mock;
+use Ratchet\ConnectionInterface;
+
+class Connection implements ConnectionInterface {
+    public $last = array(
+        'send'  => ''
+      , 'close' => false
+    );
+
+    public $remoteAddress = '127.0.0.1';
+
+    public function send($data) {
+        $this->last[__FUNCTION__] = $data;
+    }
+
+    public function close() {
+        $this->last[__FUNCTION__] = true;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/Mock/ConnectionDecorator.php ---
@@ -0,0 +1,22 @@
+<?php
+namespace Ratchet\Mock;
+use Ratchet\AbstractConnectionDecorator;
+
+class ConnectionDecorator extends AbstractConnectionDecorator {
+    public $last = array(
+        'write' => ''
+      , 'end'   => false
+    );
+
+    public function send($data) {
+        $this->last[__FUNCTION__] = $data;
+
+        $this->getConnection()->send($data);
+    }
+
+    public function close() {
+        $this->last[__FUNCTION__] = true;
+
+        $this->getConnection()->close();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/Mock/WampComponent.php ---
@@ -0,0 +1,43 @@
+<?php
+namespace Ratchet\Mock;
+use Ratchet\Wamp\WampServerInterface;
+use Ratchet\WebSocket\WsServerInterface;
+use Ratchet\ConnectionInterface;
+
+class WampComponent implements WampServerInterface, WsServerInterface {
+    public $last = array();
+
+    public $protocols = array();
+
+    public function getSubProtocols() {
+        return $this->protocols;
+    }
+
+    public function onCall(ConnectionInterface $conn, $id, $procURI, array $params) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onSubscribe(ConnectionInterface $conn, $topic) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onUnSubscribe(ConnectionInterface $conn, $topic) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onPublish(ConnectionInterface $conn, $topic, $event, array $exclude, array $eligible) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onOpen(ConnectionInterface $conn) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onClose(ConnectionInterface $conn) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {
+        $this->last[__FUNCTION__] = func_get_args();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/NullComponent.php ---
@@ -0,0 +1,28 @@
+<?php
+namespace Ratchet;
+use Ratchet\ConnectionInterface;
+use Ratchet\MessageComponentInterface;
+use Ratchet\WebSocket\WsServerInterface;
+use Ratchet\Wamp\WampServerInterface;
+
+class NullComponent implements MessageComponentInterface, WsServerInterface, WampServerInterface {
+    public function onOpen(ConnectionInterface $conn) {}
+
+    public function onMessage(ConnectionInterface $conn, $msg) {}
+
+    public function onClose(ConnectionInterface $conn) {}
+
+    public function onError(ConnectionInterface $conn, \Exception $e) {}
+
+    public function onCall(ConnectionInterface $conn, $id, $topic, array $params) {}
+
+    public function onSubscribe(ConnectionInterface $conn, $topic) {}
+
+    public function onUnSubscribe(ConnectionInterface $conn, $topic) {}
+
+    public function onPublish(ConnectionInterface $conn, $topic, $event, array $exclude = array(), array $eligible = array()) {}
+
+    public function getSubProtocols() {
+        return array();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/Wamp/Stub/WsWampServerInterface.php ---
@@ -0,0 +1,7 @@
+<?php
+namespace Ratchet\Wamp\Stub;
+use Ratchet\WebSocket\WsServerInterface;
+use Ratchet\Wamp\WampServerInterface;
+
+interface WsWampServerInterface extends WsServerInterface, WampServerInterface {
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/helpers/Ratchet/WebSocket/Stub/WsMessageComponentInterface.php ---
@@ -0,0 +1,7 @@
+<?php
+namespace Ratchet\WebSocket\Stub;
+use Ratchet\MessageComponentInterface;
+use Ratchet\WebSocket\WsServerInterface;
+
+interface WsMessageComponentInterface extends MessageComponentInterface, WsServerInterface {
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/AbstractConnectionDecoratorTest.php ---
@@ -0,0 +1,147 @@
+<?php
+namespace Ratchet;
+use Ratchet\Mock\ConnectionDecorator;
+
+/**
+ * @covers Ratchet\AbstractConnectionDecorator
+ * @covers Ratchet\ConnectionInterface
+ */
+class AbstractConnectionDecoratorTest extends \PHPUnit_Framework_TestCase {
+    protected $mock;
+    protected $l1;
+    protected $l2;
+
+    public function setUp() {
+        $this->mock = $this->getMock('\Ratchet\ConnectionInterface');
+        $this->l1   = new ConnectionDecorator($this->mock);
+        $this->l2   = new ConnectionDecorator($this->l1);
+    }
+
+    public function testGet() {
+        $var = 'hello';
+        $val = 'world';
+
+        $this->mock->$var = $val;
+
+        $this->assertEquals($val, $this->l1->$var);
+        $this->assertEquals($val, $this->l2->$var);
+    }
+
+    public function testSet() {
+        $var = 'Chris';
+        $val = 'Boden';
+
+        $this->l1->$var = $val;
+
+        $this->assertEquals($val, $this->mock->$var);
+    }
+
+    public function testSetLevel2() {
+        $var = 'Try';
+        $val = 'Again';
+
+        $this->l2->$var = $val;
+
+        $this->assertEquals($val, $this->mock->$var);
+    }
+
+    public function testIsSetTrue() {
+        $var = 'PHP';
+        $val = 'Ratchet';
+
+        $this->mock->$var = $val;
+
+        $this->assertTrue(isset($this->l1->$var));
+        $this->assertTrue(isset($this->l2->$var));
+    }
+
+    public function testIsSetFalse() {
+        $var = 'herp';
+        $val = 'derp';
+
+        $this->assertFalse(isset($this->l1->$var));
+        $this->assertFalse(isset($this->l2->$var));
+    }
+
+    public function testUnset() {
+        $var = 'Flying';
+        $val = 'Monkey';
+
+        $this->mock->$var = $val;
+        unset($this->l1->$var);
+
+        $this->assertFalse(isset($this->mock->$var));
+    }
+
+    public function testUnsetLevel2() {
+        $var = 'Flying';
+        $val = 'Monkey';
+
+        $this->mock->$var = $val;
+        unset($this->l2->$var);
+
+        $this->assertFalse(isset($this->mock->$var));
+    }
+
+    public function testGetConnection() {
+        $class  = new \ReflectionClass('\\Ratchet\\AbstractConnectionDecorator');
+        $method = $class->getMethod('getConnection');
+        $method->setAccessible(true);
+
+        $conn = $method->invokeArgs($this->l1, array());
+
+        $this->assertSame($this->mock, $conn);
+    }
+
+    public function testGetConnectionLevel2() {
+        $class  = new \ReflectionClass('\\Ratchet\\AbstractConnectionDecorator');
+        $method = $class->getMethod('getConnection');
+        $method->setAccessible(true);
+
+        $conn = $method->invokeArgs($this->l2, array());
+
+        $this->assertSame($this->l1, $conn);
+    }
+
+    public function testWrapperCanStoreSelfInDecorator() {
+        $this->mock->decorator = $this->l1;
+
+        $this->assertSame($this->l1, $this->l2->decorator);
+    }
+
+    public function testDecoratorRecursion() {
+        $this->mock->decorator = new \stdClass;
+        $this->mock->decorator->conn = $this->l1;
+
+        $this->assertSame($this->l1, $this->mock->decorator->conn);
+        $this->assertSame($this->l1, $this->l1->decorator->conn);
+        $this->assertSame($this->l1, $this->l2->decorator->conn);
+    }
+
+    public function testDecoratorRecursionLevel2() {
+        $this->mock->decorator = new \stdClass;
+        $this->mock->decorator->conn = $this->l2;
+
+        $this->assertSame($this->l2, $this->mock->decorator->conn);
+        $this->assertSame($this->l2, $this->l1->decorator->conn);
+        $this->assertSame($this->l2, $this->l2->decorator->conn);
+
+        // just for fun
+        $this->assertSame($this->l2, $this->l2->decorator->conn->decorator->conn->decorator->conn);
+    }
+
+    public function testWarningGettingNothing() {
+        $this->setExpectedException('PHPUnit_Framework_Error');
+        $var = $this->mock->nonExistant;
+    }
+
+    public function testWarningGettingNothingLevel1() {
+        $this->setExpectedException('PHPUnit_Framework_Error');
+        $var = $this->l1->nonExistant;
+    }
+
+    public function testWarningGettingNothingLevel2() {
+        $this->setExpectedException('PHPUnit_Framework_Error');
+        $var = $this->l2->nonExistant;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Http/HttpRequestParserTest.php ---
@@ -0,0 +1,50 @@
+<?php
+namespace Ratchet\Http;
+
+/**
+ * @covers Ratchet\Http\HttpRequestParser
+ */
+class HttpRequestParserTest extends \PHPUnit_Framework_TestCase {
+    protected $parser;
+
+    public function setUp() {
+        $this->parser = new HttpRequestParser;
+    }
+
+    public function headersProvider() {
+        return array(
+            array(false, "GET / HTTP/1.1\r\nHost: socketo.me\r\n")
+          , array(true,  "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\n")
+          , array(true, "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\n1")
+          , array(true, "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\nHixie✖")
+          , array(true,  "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\nHixie✖\r\n\r\n")
+          , array(true, "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\nHixie\r\n")
+        );
+    }
+
+    /**
+     * @dataProvider headersProvider
+     */
+    public function testIsEom($expected, $message) {
+        $this->assertEquals($expected, $this->parser->isEom($message));
+    }
+
+    public function testBufferOverflowResponse() {
+        $conn = $this->getMock('\Ratchet\ConnectionInterface');
+
+        $this->parser->maxSize = 20;
+
+        $this->assertNull($this->parser->onMessage($conn, "GET / HTTP/1.1\r\n"));
+
+        $this->setExpectedException('OverflowException');
+
+        $this->parser->onMessage($conn, "Header-Is: Too Big");
+    }
+
+    public function testReturnTypeIsRequest() {
+        $conn = $this->getMock('\Ratchet\ConnectionInterface');
+        $return = $this->parser->onMessage($conn, "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\n");
+
+        $this->assertInstanceOf('\Psr\Http\Message\RequestInterface', $return);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Http/HttpServerTest.php ---
@@ -0,0 +1,64 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\AbstractMessageComponentTestCase;
+
+/**
+ * @covers Ratchet\Http\HttpServer
+ */
+class HttpServerTest extends AbstractMessageComponentTestCase {
+    public function setUp() {
+        parent::setUp();
+        $this->_conn->httpHeadersReceived = true;
+    }
+
+    public function getConnectionClassString() {
+        return '\Ratchet\ConnectionInterface';
+    }
+
+    public function getDecoratorClassString() {
+        return '\Ratchet\Http\HttpServer';
+    }
+
+    public function getComponentClassString() {
+        return '\Ratchet\Http\HttpServerInterface';
+    }
+
+    public function testOpen() {
+        $headers = "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\n";
+
+        $this->_conn->httpHeadersReceived = false;
+        $this->_app->expects($this->once())->method('onOpen')->with($this->isExpectedConnection());
+        $this->_serv->onMessage($this->_conn, $headers);
+    }
+
+    public function testOnMessageAfterHeaders() {
+        $headers = "GET / HTTP/1.1\r\nHost: socketo.me\r\n\r\n";
+        $this->_conn->httpHeadersReceived = false;
+        $this->_serv->onMessage($this->_conn, $headers);
+
+        $message = "Hello World!";
+        $this->_app->expects($this->once())->method('onMessage')->with($this->isExpectedConnection(), $message);
+        $this->_serv->onMessage($this->_conn, $message);
+    }
+
+    public function testBufferOverflow() {
+        $this->_conn->expects($this->once())->method('close');
+        $this->_conn->httpHeadersReceived = false;
+
+        $this->_serv->onMessage($this->_conn, str_repeat('a', 5000));
+    }
+
+    public function testCloseIfNotEstablished() {
+        $this->_conn->httpHeadersReceived = false;
+        $this->_conn->expects($this->once())->method('close');
+        $this->_serv->onError($this->_conn, new \Exception('Whoops!'));
+    }
+
+    public function testBufferHeaders() {
+        $this->_conn->httpHeadersReceived = false;
+        $this->_app->expects($this->never())->method('onOpen');
+        $this->_app->expects($this->never())->method('onMessage');
+
+        $this->_serv->onMessage($this->_conn, "GET / HTTP/1.1");
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Http/OriginCheckTest.php ---
@@ -0,0 +1,46 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\AbstractMessageComponentTestCase;
+
+/**
+ * @covers Ratchet\Http\OriginCheck
+ */
+class OriginCheckTest extends AbstractMessageComponentTestCase {
+    protected $_reqStub;
+
+    public function setUp() {
+        $this->_reqStub = $this->getMock('Psr\Http\Message\RequestInterface');
+        $this->_reqStub->expects($this->any())->method('getHeader')->will($this->returnValue(['localhost']));
+
+        parent::setUp();
+
+        $this->_serv->allowedOrigins[] = 'localhost';
+    }
+
+    protected function doOpen($conn) {
+        $this->_serv->onOpen($conn, $this->_reqStub);
+    }
+
+    public function getConnectionClassString() {
+        return '\Ratchet\ConnectionInterface';
+    }
+
+    public function getDecoratorClassString() {
+        return '\Ratchet\Http\OriginCheck';
+    }
+
+    public function getComponentClassString() {
+        return '\Ratchet\Http\HttpServerInterface';
+    }
+
+    public function testCloseOnNonMatchingOrigin() {
+        $this->_serv->allowedOrigins = ['socketo.me'];
+        $this->_conn->expects($this->once())->method('close');
+
+        $this->_serv->onOpen($this->_conn, $this->_reqStub);
+    }
+
+    public function testOnMessage() {
+        $this->passthroughMessageTest('Hello World!');
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Http/RouterTest.php ---
@@ -0,0 +1,165 @@
+<?php
+namespace Ratchet\Http;
+use Ratchet\WebSocket\WsServerInterface;
+use Symfony\Component\Routing\Exception\ResourceNotFoundException;
+use Symfony\Component\Routing\Matcher\UrlMatcherInterface;
+use Symfony\Component\Routing\RequestContext;
+use Symfony\Component\Routing\RouteCollection;
+use Symfony\Component\Routing\Matcher\UrlMatcher;
+
+
+/**
+ * @covers Ratchet\Http\Router
+ */
+class RouterTest extends \PHPUnit_Framework_TestCase {
+    protected $_router;
+    protected $_matcher;
+    protected $_conn;
+    protected $_uri;
+    protected $_req;
+
+    public function setUp() {
+        $this->_conn = $this->getMock('\Ratchet\ConnectionInterface');
+        $this->_uri  = $this->getMock('Psr\Http\Message\UriInterface');
+        $this->_req  = $this->getMock('\Psr\Http\Message\RequestInterface');
+        $this->_req
+            ->expects($this->any())
+            ->method('getUri')
+            ->will($this->returnValue($this->_uri));
+        $this->_matcher = $this->getMock('Symfony\Component\Routing\Matcher\UrlMatcherInterface');
+        $this->_matcher
+            ->expects($this->any())
+            ->method('getContext')
+            ->will($this->returnValue($this->getMock('Symfony\Component\Routing\RequestContext')));
+        $this->_router  = new Router($this->_matcher);
+
+        $this->_uri->expects($this->any())->method('getPath')->will($this->returnValue('ws://doesnt.matter/'));
+        $this->_uri->expects($this->any())->method('withQuery')->with($this->callback(function($val) {
+            $this->setResult($val);
+
+            return true;
+        }))->will($this->returnSelf());
+        $this->_uri->expects($this->any())->method('getQuery')->will($this->returnCallback([$this, 'getResult']));
+        $this->_req->expects($this->any())->method('withUri')->will($this->returnSelf());
+    }
+
+    public function testFourOhFour() {
+        $this->_conn->expects($this->once())->method('close');
+
+        $nope = new ResourceNotFoundException;
+        $this->_matcher->expects($this->any())->method('match')->will($this->throwException($nope));
+
+        $this->_router->onOpen($this->_conn, $this->_req);
+    }
+
+    public function testNullRequest() {
+        $this->setExpectedException('\UnexpectedValueException');
+        $this->_router->onOpen($this->_conn);
+    }
+
+    public function testControllerIsMessageComponentInterface() {
+        $this->setExpectedException('\UnexpectedValueException');
+        $this->_matcher->expects($this->any())->method('match')->will($this->returnValue(array('_controller' => new \StdClass)));
+        $this->_router->onOpen($this->_conn, $this->_req);
+    }
+
+    public function testControllerOnOpen() {
+        $controller = $this->getMockBuilder('\Ratchet\WebSocket\WsServer')->disableOriginalConstructor()->getMock();
+        $this->_matcher->expects($this->any())->method('match')->will($this->returnValue(array('_controller' => $controller)));
+        $this->_router->onOpen($this->_conn, $this->_req);
+
+        $expectedConn = new \PHPUnit_Framework_Constraint_IsInstanceOf('\Ratchet\ConnectionInterface');
+        $controller->expects($this->once())->method('onOpen')->with($expectedConn, $this->_req);
+
+        $this->_matcher->expects($this->any())->method('match')->will($this->returnValue(array('_controller' => $controller)));
+        $this->_router->onOpen($this->_conn, $this->_req);
+    }
+
+    public function testControllerOnMessageBubbles() {
+        $message = "The greatest trick the Devil ever pulled was convincing the world he didn't exist";
+        $controller = $this->getMockBuilder('\Ratchet\WebSocket\WsServer')->disableOriginalConstructor()->getMock();
+        $controller->expects($this->once())->method('onMessage')->with($this->_conn, $message);
+
+        $this->_conn->controller = $controller;
+
+        $this->_router->onMessage($this->_conn, $message);
+    }
+
+    public function testControllerOnCloseBubbles() {
+        $controller = $this->getMockBuilder('\Ratchet\WebSocket\WsServer')->disableOriginalConstructor()->getMock();
+        $controller->expects($this->once())->method('onClose')->with($this->_conn);
+
+        $this->_conn->controller = $controller;
+
+        $this->_router->onClose($this->_conn);
+    }
+
+    public function testControllerOnErrorBubbles() {
+        $e= new \Exception('One cannot be betrayed if one has no exceptions');
+        $controller = $this->getMockBuilder('\Ratchet\WebSocket\WsServer')->disableOriginalConstructor()->getMock();
+        $controller->expects($this->once())->method('onError')->with($this->_conn, $e);
+
+        $this->_conn->controller = $controller;
+
+        $this->_router->onError($this->_conn, $e);
+    }
+
+    public function testRouterGeneratesRouteParameters() {
+        /** @var $controller WsServerInterface */
+        $controller = $this->getMockBuilder('\Ratchet\WebSocket\WsServer')->disableOriginalConstructor()->getMock();
+        /** @var $matcher UrlMatcherInterface */
+        $this->_matcher->expects($this->any())->method('match')->will(
+            $this->returnValue(['_controller' => $controller, 'foo' => 'bar', 'baz' => 'qux'])
+        );
+        $conn = $this->getMock('Ratchet\Mock\Connection');
+
+        $router = new Router($this->_matcher);
+
+        $router->onOpen($conn, $this->_req);
+
+        $this->assertEquals('foo=bar&baz=qux', $this->_req->getUri()->getQuery());
+    }
+
+    public function testQueryParams() {
+        $controller = $this->getMockBuilder('\Ratchet\WebSocket\WsServer')->disableOriginalConstructor()->getMock();
+        $this->_matcher->expects($this->any())->method('match')->will(
+            $this->returnValue(['_controller' => $controller, 'foo' => 'bar', 'baz' => 'qux'])
+        );
+
+        $conn    = $this->getMock('Ratchet\Mock\Connection');
+        $request = $this->getMock('Psr\Http\Message\RequestInterface');
+        $uri = new \GuzzleHttp\Psr7\Uri('ws://doesnt.matter/endpoint?hello=world&foo=nope');
+
+        $request->expects($this->any())->method('getUri')->will($this->returnCallback(function() use (&$uri) {
+            return $uri;
+        }));
+        $request->expects($this->any())->method('withUri')->with($this->callback(function($url) use (&$uri) {
+            $uri = $url;
+
+            return true;
+        }))->will($this->returnSelf());
+
+        $router = new Router($this->_matcher);
+        $router->onOpen($conn, $request);
+
+        $this->assertEquals('foo=nope&baz=qux&hello=world', $request->getUri()->getQuery());
+        $this->assertEquals('ws', $request->getUri()->getScheme());
+        $this->assertEquals('doesnt.matter', $request->getUri()->getHost());
+    }
+
+    public function testImpatientClientOverflow() {
+        $this->_conn->expects($this->once())->method('close');
+
+        $header = "GET /nope HTTP/1.1
+Upgrade: websocket                                   
+Connection: upgrade                                  
+Host: localhost                                 
+Origin: http://localhost                        
+Sec-WebSocket-Version: 13\r\n\r\n";
+
+        $app = new HttpServer(new Router(new UrlMatcher(new RouteCollection, new RequestContext)));
+        $app->onOpen($this->_conn);
+        $app->onMessage($this->_conn, $header);
+        $app->onMessage($this->_conn, 'Silly body');
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Server/EchoServerTest.php ---
@@ -0,0 +1,26 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\Server\EchoServer;
+
+class EchoServerTest extends \PHPUnit_Framework_TestCase {
+    protected $_conn;
+    protected $_comp;
+
+    public function setUp() {
+        $this->_conn = $this->getMock('\Ratchet\ConnectionInterface');
+        $this->_comp = new EchoServer;
+    }
+
+    public function testMessageEchod() {
+        $message = 'Tillsonburg, my back still aches when I hear that word.';
+        $this->_conn->expects($this->once())->method('send')->with($message);
+        $this->_comp->onMessage($this->_conn, $message);
+    }
+
+    public function testErrorClosesConnection() {
+        ob_start();
+        $this->_conn->expects($this->once())->method('close');
+        $this->_comp->onError($this->_conn, new \Exception);
+        ob_end_clean();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Server/FlashPolicyComponentTest.php ---
@@ -0,0 +1,152 @@
+<?php
+namespace Ratchet\Application\Server;
+use Ratchet\Server\FlashPolicy;
+
+/**
+ * @covers Ratchet\Server\FlashPolicy
+ */
+class FlashPolicyTest extends \PHPUnit_Framework_TestCase {
+
+    protected $_policy;
+
+    public function setUp() {
+        $this->_policy = new FlashPolicy();
+    }
+
+    public function testPolicyRender() {
+        $this->_policy->setSiteControl('all');
+        $this->_policy->addAllowedAccess('example.com', '*');
+        $this->_policy->addAllowedAccess('dev.example.com', '*');
+
+        $this->assertInstanceOf('SimpleXMLElement', $this->_policy->renderPolicy());
+    }
+
+    public function testInvalidPolicyReader() {
+        $this->setExpectedException('UnexpectedValueException');
+        $this->_policy->renderPolicy();
+    }
+
+    public function testInvalidDomainPolicyReader() {
+        $this->setExpectedException('UnexpectedValueException');
+        $this->_policy->setSiteControl('all');
+        $this->_policy->addAllowedAccess('dev.example.*', '*');
+        $this->_policy->renderPolicy();
+    }
+
+    /**
+     * @dataProvider siteControl
+     */
+    public function testSiteControlValidation($accept, $permittedCrossDomainPolicies) {
+        $this->assertEquals($accept, $this->_policy->validateSiteControl($permittedCrossDomainPolicies));
+    }
+
+    public static function siteControl() {
+        return array(
+            array(true, 'all')
+          , array(true, 'none')
+          , array(true, 'master-only')
+          , array(false, 'by-content-type')
+          , array(false, 'by-ftp-filename')
+          , array(false, '')
+          , array(false, 'all ')
+          , array(false, 'asdf')
+          , array(false, '@893830')
+          , array(false, '*')
+        );
+    }
+
+    /**
+     * @dataProvider URI
+     */
+    public function testDomainValidation($accept, $domain) {
+        $this->assertEquals($accept, $this->_policy->validateDomain($domain));
+    }
+
+    public static function URI() {
+        return array(
+            array(true, '*')
+          , array(true, 'example.com')
+          , array(true, 'exam-ple.com')
+          , array(true, '*.example.com')
+          , array(true, 'www.example.com')
+          , array(true, 'dev.dev.example.com')
+          , array(true, 'http://example.com')
+          , array(true, 'https://example.com')
+          , array(true, 'http://*.example.com')
+          , array(false, 'exam*ple.com')
+          , array(true, '127.0.255.1')
+          , array(true, 'localhost')
+          , array(false, 'www.example.*')
+          , array(false, 'www.exa*le.com')
+          , array(false, 'www.example.*com')
+          , array(false, '*.example.*')
+          , array(false, 'gasldf*$#a0sdf0a8sdf')
+        );
+    }
+
+    /**
+     * @dataProvider ports
+     */
+    public function testPortValidation($accept, $ports) {
+        $this->assertEquals($accept, $this->_policy->validatePorts($ports));
+    }
+
+    public static function ports() {
+        return array(
+            array(true, '*')
+          , array(true, '80')
+          , array(true, '80,443')
+          , array(true, '507,516-523')
+          , array(true, '507,516-523,333')
+          , array(true, '507,516-523,507,516-523')
+          , array(false, '516-')
+          , array(true, '516-523,11')
+          , array(false, '516,-523,11')
+          , array(false, 'example')
+          , array(false, 'asdf,123')
+          , array(false, '--')
+          , array(false, ',,,')
+          , array(false, '838*')
+        );
+    }
+
+    public function testAddAllowedAccessOnlyAcceptsValidPorts() {
+        $this->setExpectedException('UnexpectedValueException');
+
+        $this->_policy->addAllowedAccess('*', 'nope');
+    }
+
+    public function testSetSiteControlThrowsException() {
+        $this->setExpectedException('UnexpectedValueException');
+
+        $this->_policy->setSiteControl('nope');
+    }
+
+    public function testErrorClosesConnection() {
+        $conn = $this->getMock('\\Ratchet\\ConnectionInterface');
+        $conn->expects($this->once())->method('close');
+
+        $this->_policy->onError($conn, new \Exception);
+    }
+
+    public function testOnMessageSendsString() {
+        $this->_policy->addAllowedAccess('*', '*');
+
+        $conn = $this->getMock('\\Ratchet\\ConnectionInterface');
+        $conn->expects($this->once())->method('send')->with($this->isType('string'));
+
+        $this->_policy->onMessage($conn, ' ');
+    }
+
+    public function testOnOpenExists() {
+        $this->assertTrue(method_exists($this->_policy, 'onOpen'));
+        $conn = $this->getMock('\Ratchet\ConnectionInterface');
+        $this->_policy->onOpen($conn);
+    }
+
+    public function testOnCloseExists() {
+        $this->assertTrue(method_exists($this->_policy, 'onClose'));
+        $conn = $this->getMock('\Ratchet\ConnectionInterface');
+        $this->_policy->onClose($conn);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Server/IoConnectionTest.php ---
@@ -0,0 +1,32 @@
+<?php
+namespace Ratchet\Application\Server;
+use Ratchet\Server\IoConnection;
+
+/**
+ * @covers Ratchet\Server\IoConnection
+ */
+class IoConnectionTest extends \PHPUnit_Framework_TestCase {
+    protected $sock;
+    protected $conn;
+
+    public function setUp() {
+        $this->sock = $this->getMock('\\React\\Socket\\ConnectionInterface');
+        $this->conn = new IoConnection($this->sock);
+    }
+
+    public function testCloseBubbles() {
+        $this->sock->expects($this->once())->method('end');
+        $this->conn->close();
+    }
+
+    public function testSendBubbles() {
+        $msg = '6 hour rides are productive';
+
+        $this->sock->expects($this->once())->method('write')->with($msg);
+        $this->conn->send($msg);
+    }
+
+    public function testSendReturnsSelf() {
+        $this->assertSame($this->conn, $this->conn->send('fluent interface'));
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php ---
@@ -0,0 +1,127 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\Server\IoServer;
+use React\EventLoop\StreamSelectLoop;
+use React\EventLoop\LoopInterface;
+use React\Socket\Server;
+
+/**
+ * @covers Ratchet\Server\IoServer
+ */
+class IoServerTest extends \PHPUnit_Framework_TestCase {
+    protected $server;
+
+    protected $app;
+
+    protected $port;
+
+    protected $reactor;
+
+    protected function tickLoop(LoopInterface $loop) {
+        $loop->futureTick(function () use ($loop) {
+            $loop->stop();
+        });
+
+        $loop->run();
+    }
+
+    public function setUp() {
+        $this->app = $this->getMock('\\Ratchet\\MessageComponentInterface');
+
+        $loop = new StreamSelectLoop;
+        $this->reactor = new Server(0, $loop);
+
+        $uri = $this->reactor->getAddress();
+        $this->port   = parse_url((strpos($uri, '://') === false ? 'tcp://' : '') . $uri, PHP_URL_PORT);
+        $this->server = new IoServer($this->app, $this->reactor, $loop);
+    }
+
+    public function testOnOpen() {
+        $this->app->expects($this->once())->method('onOpen')->with($this->isInstanceOf('\\Ratchet\\ConnectionInterface'));
+
+        $client = stream_socket_client("tcp://localhost:{$this->port}");
+
+        $this->tickLoop($this->server->loop);
+
+        //$this->assertTrue(is_string($this->app->last['onOpen'][0]->remoteAddress));
+        //$this->assertTrue(is_int($this->app->last['onOpen'][0]->resourceId));
+    }
+
+    public function testOnData() {
+        $msg = 'Hello World!';
+
+        $this->app->expects($this->once())->method('onMessage')->with(
+            $this->isInstanceOf('\\Ratchet\\ConnectionInterface')
+          , $msg
+        );
+
+        $client = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
+        socket_set_option($client, SOL_SOCKET, SO_REUSEADDR, 1);
+        socket_set_option($client, SOL_SOCKET, SO_SNDBUF, 4096);
+        socket_set_block($client);
+        socket_connect($client, 'localhost', $this->port);
+
+        $this->tickLoop($this->server->loop);
+
+        socket_write($client, $msg);
+        $this->tickLoop($this->server->loop);
+
+        socket_shutdown($client, 1);
+        socket_shutdown($client, 0);
+        socket_close($client);
+
+        $this->tickLoop($this->server->loop);
+    }
+
+    public function testOnClose() {
+        $this->app->expects($this->once())->method('onClose')->with($this->isInstanceOf('\\Ratchet\\ConnectionInterface'));
+
+        $client = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
+        socket_set_option($client, SOL_SOCKET, SO_REUSEADDR, 1);
+        socket_set_option($client, SOL_SOCKET, SO_SNDBUF, 4096);
+        socket_set_block($client);
+        socket_connect($client, 'localhost', $this->port);
+
+        $this->tickLoop($this->server->loop);
+
+        socket_shutdown($client, 1);
+        socket_shutdown($client, 0);
+        socket_close($client);
+
+        $this->tickLoop($this->server->loop);
+    }
+
+    public function testFactory() {
+        $this->assertInstanceOf('\\Ratchet\\Server\\IoServer', IoServer::factory($this->app, 0));
+    }
+
+    public function testNoLoopProvidedError() {
+        $this->setExpectedException('RuntimeException');
+
+        $io   = new IoServer($this->app, $this->reactor);
+        $io->run();
+    }
+
+    public function testOnErrorPassesException() {
+        $conn = $this->getMock('\\React\\Socket\\ConnectionInterface');
+        $conn->decor = $this->getMock('\\Ratchet\\ConnectionInterface');
+        $err  = new \Exception("Nope");
+
+        $this->app->expects($this->once())->method('onError')->with($conn->decor, $err);
+
+        $this->server->handleError($err, $conn);
+    }
+
+    public function onErrorCalledWhenExceptionThrown() {
+        $this->markTestIncomplete("Need to learn how to throw an exception from a mock");
+
+        $conn = $this->getMock('\\React\\Socket\\ConnectionInterface');
+        $this->server->handleConnect($conn);
+
+        $e = new \Exception;
+        $this->app->expects($this->once())->method('onMessage')->with($this->isInstanceOf('\\Ratchet\\ConnectionInterface'), 'f')->will($e);
+        $this->app->expects($this->once())->method('onError')->with($this->instanceOf('\\Ratchet\\ConnectionInterface', $e));
+
+        $this->server->handleData('f', $conn);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Server/IpBlackListComponentTest.php ---
@@ -0,0 +1,125 @@
+<?php
+namespace Ratchet\Server;
+use Ratchet\Server\IpBlackList;
+
+/**
+ * @covers Ratchet\Server\IpBlackList
+ */
+class IpBlackListTest extends \PHPUnit_Framework_TestCase {
+    protected $blocker;
+    protected $mock;
+
+    public function setUp() {
+        $this->mock = $this->getMock('\\Ratchet\\MessageComponentInterface');
+        $this->blocker = new IpBlackList($this->mock);
+    }
+
+    public function testOnOpen() {
+        $this->mock->expects($this->exactly(3))->method('onOpen');
+
+        $conn1 = $this->newConn();
+        $conn2 = $this->newConn();
+        $conn3 = $this->newConn();
+
+        $this->blocker->onOpen($conn1);
+        $this->blocker->onOpen($conn3);
+        $this->blocker->onOpen($conn2);
+    }
+
+    public function testBlockDoesNotTriggerOnOpen() {
+        $conn = $this->newConn();
+
+        $this->blocker->blockAddress($conn->remoteAddress);
+
+        $this->mock->expects($this->never())->method('onOpen');
+
+        $ret = $this->blocker->onOpen($conn);
+    }
+
+    public function testBlockDoesNotTriggerOnClose() {
+        $conn = $this->newConn();
+
+        $this->blocker->blockAddress($conn->remoteAddress);
+
+        $this->mock->expects($this->never())->method('onClose');
+
+        $ret = $this->blocker->onOpen($conn);
+    }
+
+    public function testOnMessageDecoration() {
+        $conn = $this->newConn();
+        $msg  = 'Hello not being blocked';
+
+        $this->mock->expects($this->once())->method('onMessage')->with($conn, $msg);
+
+        $this->blocker->onMessage($conn, $msg);
+    }
+
+    public function testOnCloseDecoration() {
+        $conn = $this->newConn();
+
+        $this->mock->expects($this->once())->method('onClose')->with($conn);
+
+        $this->blocker->onClose($conn);
+    }
+
+    public function testBlockClosesConnection() {
+        $conn = $this->newConn();
+        $this->blocker->blockAddress($conn->remoteAddress);
+
+        $conn->expects($this->once())->method('close');
+
+        $this->blocker->onOpen($conn);
+    }
+
+    public function testAddAndRemoveWithFluentInterfaces() {
+        $blockOne = '127.0.0.1';
+        $blockTwo = '192.168.1.1';
+        $unblock  = '75.119.207.140';
+
+        $this->blocker
+            ->blockAddress($unblock)
+            ->blockAddress($blockOne)
+            ->unblockAddress($unblock)
+            ->blockAddress($blockTwo)
+        ;
+
+        $this->assertEquals(array($blockOne, $blockTwo), $this->blocker->getBlockedAddresses());
+    }
+
+    public function testDecoratorPassesErrors() {
+        $conn = $this->newConn();
+        $e    = new \Exception('I threw an error');
+
+        $this->mock->expects($this->once())->method('onError')->with($conn, $e);
+
+        $this->blocker->onError($conn, $e);
+    }
+
+    public function addressProvider() {
+        return array(
+            array('127.0.0.1', '127.0.0.1')
+          , array('localhost', 'localhost')
+          , array('fe80::1%lo0', 'fe80::1%lo0')
+          , array('127.0.0.1', '127.0.0.1:6392')
+        );
+    }
+
+    /**
+     * @dataProvider addressProvider
+     */
+    public function testFilterAddress($expected, $input) {
+        $this->assertEquals($expected, $this->blocker->filterAddress($input));
+    }
+
+    public function testUnblockingSilentlyFails() {
+        $this->assertInstanceOf('\\Ratchet\\Server\\IpBlackList', $this->blocker->unblockAddress('localhost'));
+    }
+
+    protected function newConn() {
+        $conn = $this->getMock('\\Ratchet\\ConnectionInterface');
+        $conn->remoteAddress = '127.0.0.1';
+
+        return $conn;
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Session/Serialize/PhpHandlerTest.php ---
@@ -0,0 +1,43 @@
+<?php
+namespace Ratchet\Session\Serialize;
+use Ratchet\Session\Serialize\PhpHandler;
+
+/**
+ * @covers Ratchet\Session\Serialize\PhpHandler
+ */
+class PhpHandlerTest extends \PHPUnit_Framework_TestCase {
+    protected $_handler;
+
+    public function setUp() {
+        $this->_handler = new PhpHandler;
+    }
+
+    public function serializedProvider() {
+        return array(
+            array(
+                '_sf2_attributes|a:2:{s:5:"hello";s:5:"world";s:4:"last";i:1332872102;}_sf2_flashes|a:0:{}'
+              , array(
+                    '_sf2_attributes' => array(
+                        'hello' => 'world'
+                      , 'last'  => 1332872102
+                    )
+                  , '_sf2_flashes' => array()
+                )
+            )
+        );
+    }
+
+    /**
+     * @dataProvider serializedProvider
+     */
+    public function testUnserialize($in, $expected) {
+        $this->assertEquals($expected, $this->_handler->unserialize($in));
+    }
+
+    /**
+     * @dataProvider serializedProvider
+     */
+    public function testSerialize($serialized, $original) {
+        $this->assertEquals($serialized, $this->_handler->serialize($original));
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Session/SessionComponentTest.php ---
@@ -0,0 +1,126 @@
+<?php
+namespace Ratchet\Session;
+use Ratchet\AbstractMessageComponentTestCase;
+use Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler;
+use Symfony\Component\HttpFoundation\Session\Storage\Handler\NullSessionHandler;
+
+/**
+ * @covers Ratchet\Session\SessionProvider
+ * @covers Ratchet\Session\Storage\VirtualSessionStorage
+ * @covers Ratchet\Session\Storage\Proxy\VirtualProxy
+ */
+class SessionProviderTest extends AbstractMessageComponentTestCase {
+    public function setUp() {
+        return $this->markTestIncomplete('Test needs to be updated for ini_set issue in PHP 7.2');
+
+        if (!class_exists('Symfony\Component\HttpFoundation\Session\Session')) {
+            return $this->markTestSkipped('Dependency of Symfony HttpFoundation failed');
+        }
+
+        parent::setUp();
+        $this->_serv = new SessionProvider($this->_app, new NullSessionHandler);
+    }
+
+    public function tearDown() {
+        ini_set('session.serialize_handler', 'php');
+    }
+
+    public function getConnectionClassString() {
+        return '\Ratchet\ConnectionInterface';
+    }
+
+    public function getDecoratorClassString() {
+        return '\Ratchet\NullComponent';
+    }
+
+    public function getComponentClassString() {
+        return '\Ratchet\Http\HttpServerInterface';
+    }
+
+    public function classCaseProvider() {
+        return array(
+            array('php', 'Php')
+          , array('php_binary', 'PhpBinary')
+        );
+    }
+
+    /**
+     * @dataProvider classCaseProvider
+     */
+    public function testToClassCase($in, $out) {
+        $ref = new \ReflectionClass('\\Ratchet\\Session\\SessionProvider');
+        $method = $ref->getMethod('toClassCase');
+        $method->setAccessible(true);
+
+        $component = new SessionProvider($this->getMock($this->getComponentClassString()), $this->getMock('\SessionHandlerInterface'));
+        $this->assertEquals($out, $method->invokeArgs($component, array($in)));
+    }
+
+    /**
+     * I think I have severely butchered this test...it's not so much of a unit test as it is a full-fledged component test
+     */
+    public function testConnectionValueFromPdo() {
+        if (!extension_loaded('PDO') || !extension_loaded('pdo_sqlite')) {
+            return $this->markTestSkipped('Session test requires PDO and pdo_sqlite');
+        }
+
+        $sessionId = md5('testSession');
+
+        $dbOptions = array(
+            'db_table'    => 'sessions'
+          , 'db_id_col'   => 'sess_id'
+          , 'db_data_col' => 'sess_data'
+          , 'db_time_col' => 'sess_time'
+          , 'db_lifetime_col' => 'sess_lifetime'
+        );
+
+        $pdo = new \PDO("sqlite::memory:");
+        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
+        $pdo->exec(vsprintf("CREATE TABLE %s (%s TEXT NOT NULL PRIMARY KEY, %s BLOB NOT NULL, %s INTEGER NOT NULL, %s INTEGER)", $dbOptions));
+
+        $pdoHandler = new PdoSessionHandler($pdo, $dbOptions);
+        $pdoHandler->write($sessionId, '_sf2_attributes|a:2:{s:5:"hello";s:5:"world";s:4:"last";i:1332872102;}_sf2_flashes|a:0:{}');
+
+        $component  = new SessionProvider($this->getMock($this->getComponentClassString()), $pdoHandler, array('auto_start' => 1));
+        $connection = $this->getMock('Ratchet\\ConnectionInterface');
+
+        $headers = $this->getMock('Psr\Http\Message\RequestInterface');
+        $headers->expects($this->once())->method('getHeader')->will($this->returnValue([ini_get('session.name') . "={$sessionId};"]));
+
+        $component->onOpen($connection, $headers);
+
+        $this->assertEquals('world', $connection->Session->get('hello'));
+    }
+
+    protected function newConn() {
+        $conn = $this->getMock('Ratchet\ConnectionInterface');
+
+        $headers = $this->getMock('Psr\Http\Message\Request', array('getCookie'), array('POST', '/', array()));
+        $headers->expects($this->once())->method('getCookie', array(ini_get('session.name')))->will($this->returnValue(null));
+
+        return $conn;
+    }
+
+    public function testOnMessageDecorator() {
+        $message = "Database calls are usually blocking  :(";
+        $this->_app->expects($this->once())->method('onMessage')->with($this->isExpectedConnection(), $message);
+        $this->_serv->onMessage($this->_conn, $message);
+    }
+
+    public function testRejectInvalidSeralizers() {
+        if (!function_exists('wddx_serialize_value')) {
+            $this->markTestSkipped();
+        }
+
+        ini_set('session.serialize_handler', 'wddx');
+        $this->setExpectedException('\RuntimeException');
+        new SessionProvider($this->getMock($this->getComponentClassString()), $this->getMock('\SessionHandlerInterface'));
+    }
+
+    protected function doOpen($conn) {
+        $request = $this->getMock('Psr\Http\Message\RequestInterface');
+        $request->expects($this->any())->method('getHeader')->will($this->returnValue([]));
+
+        $this->_serv->onOpen($conn, $request);
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Session/Storage/VirtualSessionStoragePDOTest.php ---
@@ -0,0 +1,53 @@
+<?php
+namespace Ratchet\Session\Storage;
+use Ratchet\Session\Serialize\PhpHandler;
+use Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag;
+use Symfony\Component\HttpFoundation\Session\Flash\FlashBag;
+use Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler;
+
+class VirtualSessionStoragePDOTest extends \PHPUnit_Framework_TestCase {
+    /**
+     * @var VirtualSessionStorage
+     */
+    protected $_virtualSessionStorage;
+
+    protected $_pathToDB;
+
+    public function setUp() {
+        if (!extension_loaded('PDO') || !extension_loaded('pdo_sqlite')) {
+            return $this->markTestSkipped('Session test requires PDO and pdo_sqlite');
+        }
+
+        $schema = <<<SQL
+CREATE TABLE `sessions` (
+    `sess_id` VARBINARY(128) NOT NULL PRIMARY KEY,
+    `sess_data` BLOB NOT NULL,
+    `sess_time` INTEGER UNSIGNED NOT NULL,
+    `sess_lifetime` MEDIUMINT NOT NULL
+);
+SQL;
+        $this->_pathToDB = tempnam(sys_get_temp_dir(), 'SQ3');;
+        $dsn = 'sqlite:' . $this->_pathToDB;
+
+        $pdo = new \PDO($dsn);
+        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
+        $pdo->exec($schema);
+        $pdo = null;
+
+        $sessionHandler = new PdoSessionHandler($dsn);
+        $serializer = new PhpHandler();
+        $this->_virtualSessionStorage = new VirtualSessionStorage($sessionHandler, 'foobar', $serializer);
+        $this->_virtualSessionStorage->registerBag(new FlashBag());
+        $this->_virtualSessionStorage->registerBag(new AttributeBag());
+    }
+
+    public function tearDown() {
+        unlink($this->_pathToDB);
+    }
+
+    public function testStartWithDSN() {
+        $this->_virtualSessionStorage->start();
+
+        $this->assertTrue($this->_virtualSessionStorage->isStarted());
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Wamp/ServerProtocolTest.php ---
@@ -0,0 +1,295 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\Mock\Connection;
+use Ratchet\Mock\WampComponent as TestComponent;
+
+/**
+ * @covers \Ratchet\Wamp\ServerProtocol
+ * @covers \Ratchet\Wamp\WampServerInterface
+ * @covers \Ratchet\Wamp\WampConnection
+ */
+class ServerProtocolTest extends \PHPUnit_Framework_TestCase {
+    protected $_comp;
+
+    protected $_app;
+
+    public function setUp() {
+        $this->_app  = new TestComponent;
+        $this->_comp = new ServerProtocol($this->_app);
+    }
+
+    protected function newConn() {
+        return new Connection;
+    }
+
+    public function invalidMessageProvider() {
+        return [
+            [0]
+          , [3]
+          , [4]
+          , [8]
+          , [9]
+        ];
+    }
+
+    /**
+     * @dataProvider invalidMessageProvider
+     */
+    public function testInvalidMessages($type) {
+        $this->setExpectedException('\Ratchet\Wamp\Exception');
+
+        $conn = $this->newConn();
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode([$type]));
+    }
+
+    public function testWelcomeMessage() {
+        $conn = $this->newConn();
+
+        $this->_comp->onOpen($conn);
+
+        $message = $conn->last['send'];
+        $json    = json_decode($message);
+
+        $this->assertEquals(4, count($json));
+        $this->assertEquals(0, $json[0]);
+        $this->assertTrue(is_string($json[1]));
+        $this->assertEquals(1, $json[2]);
+    }
+
+    public function testSubscribe() {
+        $uri = 'http://example.com';
+        $clientMessage = array(5, $uri);
+
+        $conn = $this->newConn();
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode($clientMessage));
+
+        $this->assertEquals($uri, $this->_app->last['onSubscribe'][1]);
+    }
+
+    public function testUnSubscribe() {
+        $uri = 'http://example.com/endpoint';
+        $clientMessage = array(6, $uri);
+
+        $conn = $this->newConn();
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode($clientMessage));
+
+        $this->assertEquals($uri, $this->_app->last['onUnSubscribe'][1]);
+    }
+
+    public function callProvider() {
+        return [
+            [2, 'a', 'b']
+          , [2, ['a', 'b']]
+          , [1, 'one']
+          , [3, 'one', 'two', 'three']
+          , [3, ['un', 'deux', 'trois']]
+          , [2, 'hi', ['hello', 'world']]
+          , [2, ['hello', 'world'], 'hi']
+          , [2, ['hello' => 'world', 'herp' => 'derp']]
+        ];
+    }
+
+    /**
+     * @dataProvider callProvider
+     */
+    public function testCall() {
+        $args     = func_get_args();
+        $paramNum = array_shift($args);
+
+        $uri = 'http://example.com/endpoint/' . rand(1, 100);
+        $id  = uniqid('', false);
+        $clientMessage = array_merge(array(2, $id, $uri), $args);
+
+        $conn = $this->newConn();
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode($clientMessage));
+
+        $this->assertEquals($id,  $this->_app->last['onCall'][1]);
+        $this->assertEquals($uri, $this->_app->last['onCall'][2]);
+
+        $this->assertEquals($paramNum, count($this->_app->last['onCall'][3]));
+    }
+
+    public function testPublish() {
+        $conn = $this->newConn();
+
+        $topic = 'pubsubhubbub';
+        $event = 'Here I am, publishing data';
+
+        $clientMessage = array(7, $topic, $event);
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode($clientMessage));
+
+        $this->assertEquals($topic, $this->_app->last['onPublish'][1]);
+        $this->assertEquals($event, $this->_app->last['onPublish'][2]);
+        $this->assertEquals(array(), $this->_app->last['onPublish'][3]);
+        $this->assertEquals(array(), $this->_app->last['onPublish'][4]);
+    }
+
+    public function testPublishAndExcludeMe() {
+        $conn = $this->newConn();
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode(array(7, 'topic', 'event', true)));
+
+        $this->assertEquals($conn->WAMP->sessionId, $this->_app->last['onPublish'][3][0]);
+    }
+
+    public function testPublishAndEligible() {
+        $conn = $this->newConn();
+
+        $buddy  = uniqid('', false);
+        $friend = uniqid('', false);
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, json_encode(array(7, 'topic', 'event', false, array($buddy, $friend))));
+
+        $this->assertEquals(array(), $this->_app->last['onPublish'][3]);
+        $this->assertEquals(2, count($this->_app->last['onPublish'][4]));
+    }
+
+    public function eventProvider() {
+        return array(
+            array('http://example.com', array('one', 'two'))
+          , array('curie', array(array('hello' => 'world', 'herp' => 'derp')))
+        );
+    }
+
+    /**
+     * @dataProvider eventProvider
+     */
+    public function testEvent($topic, $payload) {
+        $conn = new WampConnection($this->newConn());
+        $conn->event($topic, $payload);
+
+        $eventString = $conn->last['send'];
+
+        $this->assertSame(array(8, $topic, $payload), json_decode($eventString, true));
+    }
+
+    public function testOnClosePropagation() {
+        $conn = new Connection;
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onClose($conn);
+
+        $class  = new \ReflectionClass('\\Ratchet\\Wamp\\WampConnection');
+        $method = $class->getMethod('getConnection');
+        $method->setAccessible(true);
+
+        $check = $method->invokeArgs($this->_app->last['onClose'][0], array());
+
+        $this->assertSame($conn, $check);
+    }
+
+    public function testOnErrorPropagation() {
+        $conn = new Connection;
+
+        $e = new \Exception('Nope');
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onError($conn, $e);
+
+        $class  = new \ReflectionClass('\\Ratchet\\Wamp\\WampConnection');
+        $method = $class->getMethod('getConnection');
+        $method->setAccessible(true);
+
+        $check = $method->invokeArgs($this->_app->last['onError'][0], array());
+
+        $this->assertSame($conn, $check);
+        $this->assertSame($e, $this->_app->last['onError'][1]);
+    }
+
+    public function testPrefix() {
+        $conn = new WampConnection($this->newConn());
+        $this->_comp->onOpen($conn);
+
+        $prefix  = 'incoming';
+        $fullURI   = "http://example.com/$prefix";
+        $method = 'call';
+
+        $this->_comp->onMessage($conn, json_encode(array(1, $prefix, $fullURI)));
+
+        $this->assertEquals($fullURI, $conn->WAMP->prefixes[$prefix]);
+        $this->assertEquals("$fullURI#$method", $conn->getUri("$prefix:$method"));
+    }
+
+    public function testMessageMustBeJson() {
+        $this->setExpectedException('\\Ratchet\\Wamp\\JsonException');
+
+        $conn = new Connection;
+
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, 'Hello World!');
+    }
+
+    public function testGetSubProtocolsReturnsArray() {
+        $this->assertTrue(is_array($this->_comp->getSubProtocols()));
+    }
+
+    public function testGetSubProtocolsGetFromApp() {
+        $this->_app->protocols = array('hello', 'world');
+
+        $this->assertGreaterThanOrEqual(3, count($this->_comp->getSubProtocols()));
+    }
+
+    public function testWampOnMessageApp() {
+        $app = $this->getMock('\\Ratchet\\Wamp\\WampServerInterface');
+        $wamp = new ServerProtocol($app);
+
+        $this->assertContains('wamp', $wamp->getSubProtocols());
+    }
+
+    public function badFormatProvider() {
+        return array(
+            array(json_encode(true))
+          , array('{"valid":"json", "invalid": "message"}')
+          , array('{"0": "fail", "hello": "world"}')
+        );
+    }
+
+    /**
+     * @dataProvider badFormatProvider
+     */
+    public function testValidJsonButInvalidProtocol($message) {
+        $this->setExpectedException('\Ratchet\Wamp\Exception');
+
+        $conn = $this->newConn();
+        $this->_comp->onOpen($conn);
+        $this->_comp->onMessage($conn, $message);
+    }
+
+    public function testBadClientInputFromNonStringTopic() {
+        $this->setExpectedException('\Ratchet\Wamp\Exception');
+
+        $conn = new WampConnection($this->newConn());
+        $this->_comp->onOpen($conn);
+
+        $this->_comp->onMessage($conn, json_encode([5, ['hells', 'nope']]));
+    }
+
+    public function testBadPrefixWithNonStringTopic() {
+        $this->setExpectedException('\Ratchet\Wamp\Exception');
+
+        $conn = new WampConnection($this->newConn());
+        $this->_comp->onOpen($conn);
+
+        $this->_comp->onMessage($conn, json_encode([1, ['hells', 'nope'], ['bad', 'input']]));
+    }
+
+    public function testBadPublishWithNonStringTopic() {
+        $this->setExpectedException('\Ratchet\Wamp\Exception');
+
+        $conn = new WampConnection($this->newConn());
+        $this->_comp->onOpen($conn);
+
+        $this->_comp->onMessage($conn, json_encode([7, ['bad', 'input'], 'Hider']));
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Wamp/TopicManagerTest.php ---
@@ -0,0 +1,226 @@
+<?php
+namespace Ratchet\Wamp;
+
+/**
+ * @covers Ratchet\Wamp\TopicManager
+ */
+class TopicManagerTest extends \PHPUnit_Framework_TestCase {
+    private $mock;
+
+    /**
+     * @var \Ratchet\Wamp\TopicManager
+     */
+    private $mngr;
+
+    /**
+     * @var \Ratchet\ConnectionInterface
+     */
+    private $conn;
+
+    public function setUp() {
+        $this->conn = $this->getMock('\Ratchet\ConnectionInterface');
+        $this->mock = $this->getMock('\Ratchet\Wamp\WampServerInterface');
+        $this->mngr = new TopicManager($this->mock);
+
+        $this->conn->WAMP = new \StdClass;
+        $this->mngr->onOpen($this->conn);
+    }
+
+    public function testGetTopicReturnsTopicObject() {
+        $class  = new \ReflectionClass('Ratchet\Wamp\TopicManager');
+        $method = $class->getMethod('getTopic');
+        $method->setAccessible(true);
+
+        $topic = $method->invokeArgs($this->mngr, array('The Topic'));
+
+        $this->assertInstanceOf('Ratchet\Wamp\Topic', $topic);
+    }
+
+    public function testGetTopicCreatesTopicWithSameName() {
+        $name = 'The Topic';
+
+        $class  = new \ReflectionClass('Ratchet\Wamp\TopicManager');
+        $method = $class->getMethod('getTopic');
+        $method->setAccessible(true);
+
+        $topic = $method->invokeArgs($this->mngr, array($name));
+
+        $this->assertEquals($name, $topic->getId());
+    }
+
+    public function testGetTopicReturnsSameObject() {
+        $class  = new \ReflectionClass('Ratchet\Wamp\TopicManager');
+        $method = $class->getMethod('getTopic');
+        $method->setAccessible(true);
+
+        $topic = $method->invokeArgs($this->mngr, array('No copy'));
+        $again = $method->invokeArgs($this->mngr, array('No copy'));
+
+        $this->assertSame($topic, $again);
+    }
+
+    public function testOnOpen() {
+        $this->mock->expects($this->once())->method('onOpen');
+        $this->mngr->onOpen($this->conn);
+    }
+
+    public function testOnCall() {
+        $id = uniqid();
+
+        $this->mock->expects($this->once())->method('onCall')->with(
+            $this->conn
+          , $id
+          , $this->isInstanceOf('Ratchet\Wamp\Topic')
+          , array()
+        );
+
+        $this->mngr->onCall($this->conn, $id, 'new topic', array());
+    }
+
+    public function testOnSubscribeCreatesTopicObject() {
+        $this->mock->expects($this->once())->method('onSubscribe')->with(
+            $this->conn, $this->isInstanceOf('Ratchet\Wamp\Topic')
+        );
+
+        $this->mngr->onSubscribe($this->conn, 'new topic');
+    }
+
+    public function testTopicIsInConnectionOnSubscribe() {
+        $name = 'New Topic';
+
+        $class  = new \ReflectionClass('Ratchet\Wamp\TopicManager');
+        $method = $class->getMethod('getTopic');
+        $method->setAccessible(true);
+
+        $topic = $method->invokeArgs($this->mngr, array($name));
+
+        $this->mngr->onSubscribe($this->conn, $name);
+
+        $this->assertTrue($this->conn->WAMP->subscriptions->contains($topic));
+    }
+
+    public function testDoubleSubscriptionFiresOnce() {
+        $this->mock->expects($this->exactly(1))->method('onSubscribe');
+
+        $this->mngr->onSubscribe($this->conn, 'same topic');
+        $this->mngr->onSubscribe($this->conn, 'same topic');
+    }
+
+    public function testUnsubscribeEvent() {
+        $name = 'in and out';
+        $this->mock->expects($this->once())->method('onUnsubscribe')->with(
+            $this->conn, $this->isInstanceOf('Ratchet\Wamp\Topic')
+        );
+
+        $this->mngr->onSubscribe($this->conn, $name);
+        $this->mngr->onUnsubscribe($this->conn, $name);
+    }
+
+    public function testUnsubscribeFiresOnce() {
+        $name = 'getting sleepy';
+        $this->mock->expects($this->exactly(1))->method('onUnsubscribe');
+
+        $this->mngr->onSubscribe($this->conn,   $name);
+        $this->mngr->onUnsubscribe($this->conn, $name);
+        $this->mngr->onUnsubscribe($this->conn, $name);
+    }
+
+    public function testUnsubscribeRemovesTopicFromConnection() {
+        $name = 'Bye Bye Topic';
+
+        $class  = new \ReflectionClass('Ratchet\Wamp\TopicManager');
+        $method = $class->getMethod('getTopic');
+        $method->setAccessible(true);
+
+        $topic = $method->invokeArgs($this->mngr, array($name));
+
+        $this->mngr->onSubscribe($this->conn, $name);
+        $this->mngr->onUnsubscribe($this->conn, $name);
+
+        $this->assertFalse($this->conn->WAMP->subscriptions->contains($topic));
+    }
+
+    public function testOnPublishBubbles() {
+        $msg = 'Cover all the code!';
+
+        $this->mock->expects($this->once())->method('onPublish')->with(
+            $this->conn
+          , $this->isInstanceOf('Ratchet\Wamp\Topic')
+          , $msg
+          , $this->isType('array')
+          , $this->isType('array')
+        );
+
+        $this->mngr->onPublish($this->conn, 'topic coverage', $msg, array(), array());
+    }
+
+    public function testOnCloseBubbles() {
+        $this->mock->expects($this->once())->method('onClose')->with($this->conn);
+        $this->mngr->onClose($this->conn);
+    }
+
+    protected function topicProvider($name) {
+        $class  = new \ReflectionClass('Ratchet\Wamp\TopicManager');
+        $method = $class->getMethod('getTopic');
+        $method->setAccessible(true);
+
+        $attribute = $class->getProperty('topicLookup');
+        $attribute->setAccessible(true);
+
+        $topic = $method->invokeArgs($this->mngr, array($name));
+
+        return array($topic, $attribute);
+    }
+
+    public function testConnIsRemovedFromTopicOnClose() {
+        $name = 'State Testing';
+        list($topic, $attribute) = $this->topicProvider($name);
+
+        $this->assertCount(1, $attribute->getValue($this->mngr));
+
+        $this->mngr->onSubscribe($this->conn, $name);
+        $this->mngr->onClose($this->conn);
+
+        $this->assertFalse($topic->has($this->conn));
+    }
+
+    public static function topicConnExpectationProvider() {
+        return [
+            [ 'onClose', 0]
+          , ['onUnsubscribe', 0]
+        ];
+    }
+
+    /**
+     * @dataProvider topicConnExpectationProvider
+     */
+    public function testTopicRetentionFromLeavingConnections($methodCall, $expectation) {
+        $topicName = 'checkTopic';
+        list($topic, $attribute) = $this->topicProvider($topicName);
+
+        $this->mngr->onSubscribe($this->conn, $topicName);
+        call_user_func_array(array($this->mngr, $methodCall), array($this->conn, $topicName));
+
+        $this->assertCount($expectation, $attribute->getValue($this->mngr));
+    }
+
+    public function testOnErrorBubbles() {
+        $e = new \Exception('All work and no play makes Chris a dull boy');
+        $this->mock->expects($this->once())->method('onError')->with($this->conn, $e);
+
+        $this->mngr->onError($this->conn, $e);
+    }
+
+    public function testGetSubProtocolsReturnsArray() {
+        $this->assertInternalType('array', $this->mngr->getSubProtocols());
+    }
+
+    public function testGetSubProtocolsBubbles() {
+        $subs = array('hello', 'world');
+        $app  = $this->getMock('Ratchet\Wamp\Stub\WsWampServerInterface');
+        $app->expects($this->once())->method('getSubProtocols')->will($this->returnValue($subs));
+        $mngr = new TopicManager($app);
+
+        $this->assertEquals($subs, $mngr->getSubProtocols());
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Wamp/TopicTest.php ---
@@ -0,0 +1,164 @@
+<?php
+namespace Ratchet\Wamp;
+
+/**
+ * @covers Ratchet\Wamp\Topic
+ */
+class TopicTest extends \PHPUnit_Framework_TestCase {
+    public function testGetId() {
+        $id    = uniqid();
+        $topic = new Topic($id);
+
+        $this->assertEquals($id, $topic->getId());
+    }
+
+    public function testAddAndCount() {
+        $topic = new Topic('merp');
+
+        $topic->add($this->newConn());
+        $topic->add($this->newConn());
+        $topic->add($this->newConn());
+
+        $this->assertEquals(3, count($topic));
+    }
+
+    public function testRemove() {
+        $topic   = new Topic('boop');
+        $tracked = $this->newConn();
+
+        $topic->add($this->newConn());
+        $topic->add($tracked);
+        $topic->add($this->newConn());
+
+        $topic->remove($tracked);
+
+        $this->assertEquals(2, count($topic));
+    }
+
+    public function testBroadcast() {
+        $msg  = 'Hello World!';
+        $name = 'Batman';
+        $protocol = json_encode(array(8, $name, $msg));
+
+        $first  = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+        $second = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+
+        $first->expects($this->once())
+              ->method('send')
+              ->with($this->equalTo($protocol));
+
+        $second->expects($this->once())
+              ->method('send')
+              ->with($this->equalTo($protocol));
+
+        $topic = new Topic($name);
+        $topic->add($first);
+        $topic->add($second);
+
+        $topic->broadcast($msg);
+    }
+
+    public function testBroadcastWithExclude() {
+        $msg  = 'Hello odd numbers';
+        $name = 'Excluding';
+        $protocol = json_encode(array(8, $name, $msg));
+
+        $first  = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+        $second = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+        $third  = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+
+        $first->expects($this->once())
+            ->method('send')
+            ->with($this->equalTo($protocol));
+
+        $second->expects($this->never())->method('send');
+
+        $third->expects($this->once())
+            ->method('send')
+            ->with($this->equalTo($protocol));
+
+        $topic = new Topic($name);
+        $topic->add($first);
+        $topic->add($second);
+        $topic->add($third);
+
+        $topic->broadcast($msg, array($second->WAMP->sessionId));
+    }
+
+    public function testBroadcastWithEligible() {
+        $msg  = 'Hello white list';
+        $name = 'Eligible';
+        $protocol = json_encode(array(8, $name, $msg));
+
+        $first  = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+        $second = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+        $third  = $this->getMock('Ratchet\\Wamp\\WampConnection', array('send'), array($this->getMock('\\Ratchet\\ConnectionInterface')));
+
+        $first->expects($this->once())
+            ->method('send')
+            ->with($this->equalTo($protocol));
+
+        $second->expects($this->never())->method('send');
+
+        $third->expects($this->once())
+            ->method('send')
+            ->with($this->equalTo($protocol));
+
+        $topic = new Topic($name);
+        $topic->add($first);
+        $topic->add($second);
+        $topic->add($third);
+
+        $topic->broadcast($msg, array(), array($first->WAMP->sessionId, $third->WAMP->sessionId));
+    }
+
+    public function testIterator() {
+        $first  = $this->newConn();
+        $second = $this->newConn();
+        $third  = $this->newConn();
+
+        $topic  = new Topic('Joker');
+        $topic->add($first)->add($second)->add($third);
+
+        $check = array($first, $second, $third);
+
+        foreach ($topic as $mock) {
+            $this->assertNotSame(false, array_search($mock, $check));
+        }
+    }
+
+    public function testToString() {
+        $name  = 'Bane';
+        $topic = new Topic($name);
+
+        $this->assertEquals($name, (string)$topic);
+    }
+
+    public function testDoesHave() {
+        $conn  = $this->newConn();
+        $topic = new Topic('Two Face');
+        $topic->add($conn);
+
+        $this->assertTrue($topic->has($conn));
+    }
+
+    public function testDoesNotHave() {
+        $conn  = $this->newConn();
+        $topic = new Topic('Alfred');
+
+        $this->assertFalse($topic->has($conn));
+    }
+
+    public function testDoesNotHaveAfterRemove() {
+        $conn  = $this->newConn();
+        $topic = new Topic('Ras');
+
+        $topic->add($conn)->remove($conn);
+
+        $this->assertFalse($topic->has($conn));
+    }
+
+    protected function newConn() {
+        return new WampConnection($this->getMock('\\Ratchet\\ConnectionInterface'));
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Wamp/WampConnectionTest.php ---
@@ -0,0 +1,77 @@
+<?php
+namespace Ratchet\Wamp;
+
+/**
+ * @covers Ratchet\Wamp\WampConnection
+ */
+class WampConnectionTest extends \PHPUnit_Framework_TestCase {
+    protected $conn;
+    protected $mock;
+
+    public function setUp() {
+        $this->mock = $this->getMock('\\Ratchet\\ConnectionInterface');
+        $this->conn = new WampConnection($this->mock);
+    }
+
+    public function testCallResult() {
+        $callId = uniqid();
+        $data   = array('hello' => 'world', 'herp' => 'derp');
+
+        $this->mock->expects($this->once())->method('send')->with(json_encode(array(3, $callId, $data)));
+
+        $this->conn->callResult($callId, $data);
+    }
+
+    public function testCallError() {
+        $callId = uniqid();
+        $uri    = 'http://example.com/end/point';
+
+        $this->mock->expects($this->once())->method('send')->with(json_encode(array(4, $callId, $uri, '')));
+
+        $this->conn->callError($callId, $uri);
+    }
+
+    public function testCallErrorWithTopic() {
+        $callId = uniqid();
+        $uri    = 'http://example.com/end/point';
+
+        $this->mock->expects($this->once())->method('send')->with(json_encode(array(4, $callId, $uri, '')));
+
+        $this->conn->callError($callId, new Topic($uri));
+    }
+
+    public function testDetailedCallError() {
+        $callId = uniqid();
+        $uri    = 'http://example.com/end/point';
+        $desc   = 'beep boop beep';
+        $detail = 'Error: Too much awesome';
+
+        $this->mock->expects($this->once())->method('send')->with(json_encode(array(4, $callId, $uri, $desc, $detail)));
+
+        $this->conn->callError($callId, $uri, $desc, $detail);
+    }
+
+    public function testPrefix() {
+        $shortOut = 'outgoing';
+        $longOut  = 'http://example.com/outgoing';
+
+        $this->mock->expects($this->once())->method('send')->with(json_encode(array(1, $shortOut, $longOut)));
+
+        $this->conn->prefix($shortOut, $longOut);
+    }
+
+    public function testGetUriWhenNoCurieGiven() {
+        $uri  = 'http://example.com/noshort';
+
+        $this->assertEquals($uri, $this->conn->getUri($uri));
+    }
+
+    public function testClose() {
+        $mock = $this->getMock('\\Ratchet\\ConnectionInterface');
+        $conn = new WampConnection($mock);
+
+        $mock->expects($this->once())->method('close');
+
+        $conn->close();
+    }
+}

--- include/lib/Composer/vendor/cboden/ratchet/tests/unit/Wamp/WampServerTest.php ---
@@ -0,0 +1,49 @@
+<?php
+namespace Ratchet\Wamp;
+use Ratchet\AbstractMessageComponentTestCase;
+
+/**
+ * @covers Ratchet\Wamp\WampServer
+ */
+class WampServerTest extends AbstractMessageComponentTestCase {
+    public function getConnectionClassString() {
+        return '\Ratchet\Wamp\WampConnection';
+    }
+
+    public function getDecoratorClassString() {
+        return 'Ratchet\Wamp\WampServer';
+    }
+
+    public function getComponentClassString() {
+        return '\Ratchet\Wamp\WampServerInterface';
+    }
+
+    public function testOnMessageToEvent() {
+        $published = 'Client published this message';
+
+        $this->_app->expects($this->once())->method('onPublish')->with(
+            $this->isExpectedConnection()
+          , new \PHPUnit_Framework_Constraint_IsInstanceOf('\Ratchet\Wamp\Topic')
+          , $published
+          , array()
+          , array()
+        );
+
+        $this->_serv->onMessage($this->_conn, json_encode(array(7, 'topic', $published)));
+    }
+
+    public function testGetSubProtocols() {
+        // todo: could expand on this
+        $this->assertInternalType('array', $this->_serv->getSubProtocols());
+    }
+
+    public function testConnectionClosesOnInvalidJson() {
+        $this->_conn->expects($this->once())->method('close');
+        $this->_serv->onMessage($this->_conn, 'invalid json');
+    }
+
+    public function testConnectionClosesOnProtocolError() {
+        $this->_conn->expects($this->once())->method('close');
+        $this->_serv->onMessage($this->_conn, json_encode(array('valid' => 'json', 'invalid' => 'protocol')));
+    }
+}

--- include/lib/Composer/vendor/composer/ClassLoader.php ---
@@ -0,0 +1,572 @@
+<?php
+
+/*
+ * This file is part of Composer.
+ *
+ * (c) Nils Adermann <naderman@naderman.de>
+ *     Jordi Boggiano <j.boggiano@seld.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Composer\Autoload;
+
+/**
+ * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
+ *
+ *     $loader = new \Composer\Autoload\ClassLoader();
+ *
+ *     // register classes with namespaces
+ *     $loader->add('Symfony\Component', __DIR__.'/component');
+ *     $loader->add('Symfony',           __DIR__.'/framework');
+ *
+ *     // activate the autoloader
+ *     $loader->register();
+ *
+ *     // to enable searching the include path (eg. for PEAR packages)
+ *     $loader->setUseIncludePath(true);
+ *
+ * In this example, if you try to use a class in the Symfony\Component
+ * namespace or one of its children (Symfony\Component\Console for instance),
+ * the autoloader will first look for the class under the component/
+ * directory, and it will then fallback to the framework/ directory if not
+ * found before giving up.
+ *
+ * This class is loosely based on the Symfony UniversalClassLoader.
+ *
+ * @author Fabien Potencier <fabien@symfony.com>
+ * @author Jordi Boggiano <j.boggiano@seld.be>
+ * @see    https://www.php-fig.org/psr/psr-0/
+ * @see    https://www.php-fig.org/psr/psr-4/
+ */
+class ClassLoader
+{
+    /** @var ?string */
+    private $vendorDir;
+
+    // PSR-4
+    /**
+     * @var array[]
+     * @psalm-var array<string, array<string, int>>
+     */
+    private $prefixLengthsPsr4 = array();
+    /**
+     * @var array[]
+     * @psalm-var array<string, array<int, string>>
+     */
+    private $prefixDirsPsr4 = array();
+    /**
+     * @var array[]
+     * @psalm-var array<string, string>
+     */
+    private $fallbackDirsPsr4 = array();
+
+    // PSR-0
+    /**
+     * @var array[]
+     * @psalm-var array<string, array<string, string[]>>
+     */
+    private $prefixesPsr0 = array();
+    /**
+     * @var array[]
+     * @psalm-var array<string, string>
+     */
+    private $fallbackDirsPsr0 = array();
+
+    /** @var bool */
+    private $useIncludePath = false;
+
+    /**
+     * @var string[]
+     * @psalm-var array<string, string>
+     */
+    private $classMap = array();
+
+    /** @var bool */
+    private $classMapAuthoritative = false;
+
+    /**
+     * @var bool[]
+     * @psalm-var array<string, bool>
+     */
+    private $missingClasses = array();
+
+    /** @var ?string */
+    private $apcuPrefix;
+
+    /**
+     * @var self[]
+     */
+    private static $registeredLoaders = array();
+
+    /**
+     * @param ?string $vendorDir
+     */
+    public function __construct($vendorDir = null)
+    {
+        $this->vendorDir = $vendorDir;
+    }
+
+    /**
+     * @return string[]
+     */
+    public function getPrefixes()
+    {
+        if (!empty($this->prefixesPsr0)) {
+            return call_user_func_array('array_merge', array_values($this->prefixesPsr0));
+        }
+
+        return array();
+    }
+
+    /**
+     * @return array[]
+     * @psalm-return array<string, array<int, string>>
+     */
+    public function getPrefixesPsr4()
+    {
+        return $this->prefixDirsPsr4;
+    }
+
+    /**
+     * @return array[]
+     * @psalm-return array<string, string>
+     */
+    public function getFallbackDirs()
+    {
+        return $this->fallbackDirsPsr0;
+    }
+
+    /**
+     * @return array[]
+     * @psalm-return array<string, string>
+     */
+    public function getFallbackDirsPsr4()
+    {
+        return $this->fallbackDirsPsr4;
+    }
+
+    /**
+     * @return string[] Array of classname => path
+     * @psalm-return array<string, string>
+     */
+    public function getClassMap()
+    {
+        return $this->classMap;
+    }
+
+    /**
+     * @param string[] $classMap Class to filename map
+     * @psalm-param array<string, string> $classMap
+     *
+     * @return void
+     */
+    public function addClassMap(array $classMap)
+    {
+        if ($this->classMap) {
+            $this->classMap = array_merge($this->classMap, $classMap);
+        } else {
+            $this->classMap = $classMap;
+        }
+    }
+
+    /**
+     * Registers a set of PSR-0 directories for a given prefix, either
+     * appending or prepending to the ones previously set for this prefix.
+     *
+     * @param string          $prefix  The prefix
+     * @param string[]|string $paths   The PSR-0 root directories
+     * @param bool            $prepend Whether to prepend the directories
+     *
+     * @return void
+     */
+    public function add($prefix, $paths, $prepend = false)
+    {
+        if (!$prefix) {
+            if ($prepend) {
+                $this->fallbackDirsPsr0 = array_merge(
+                    (array) $paths,
+                    $this->fallbackDirsPsr0
+                );
+            } else {
+                $this->fallbackDirsPsr0 = array_merge(
+                    $this->fallbackDirsPsr0,
+                    (array) $paths
+                );
+            }
+
+            return;
+        }
+
+        $first = $prefix[0];
+        if (!isset($this->prefixesPsr0[$first][$prefix])) {
+            $this->prefixesPsr0[$first][$prefix] = (array) $paths;
+
+            return;
+        }
+        if ($prepend) {
+            $this->prefixesPsr0[$first][$prefix] = array_merge(
+                (array) $paths,
+                $this->prefixesPsr0[$first][$prefix]
+            );
+        } else {
+            $this->prefixesPsr0[$first][$prefix] = array_merge(
+                $this->prefixesPsr0[$first][$prefix],
+                (array) $paths
+            );
+        }
+    }
+
+    /**
+     * Registers a set of PSR-4 directories for a given namespace, either
+     * appending or prepending to the ones previously set for this namespace.
+     *
+     * @param string          $prefix  The prefix/namespace, with trailing '\\'
+     * @param string[]|string $paths   The PSR-4 base directories
+     * @param bool            $prepend Whether to prepend the directories
+     *
+     * @throws \InvalidArgumentException
+     *
+     * @return void
+     */
+    public function addPsr4($prefix, $paths, $prepend = false)
+    {
+        if (!$prefix) {
+            // Register directories for the root namespace.
+            if ($prepend) {
+                $this->fallbackDirsPsr4 = array_merge(
+                    (array) $paths,
+                    $this->fallbackDirsPsr4
+                );
+            } else {
+                $this->fallbackDirsPsr4 = array_merge(
+                    $this->fallbackDirsPsr4,
+                    (array) $paths
+                );
+            }
+        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
+            // Register directories for a new namespace.
+            $length = strlen($prefix);
+            if ('\\' !== $prefix[$length - 1]) {
+                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
+            }
+            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
+            $this->prefixDirsPsr4[$prefix] = (array) $paths;
+        } elseif ($prepend) {
+            // Prepend directories for an already registered namespace.
+            $this->prefixDirsPsr4[$prefix] = array_merge(
+                (array) $paths,
+                $this->prefixDirsPsr4[$prefix]
+            );
+        } else {
+            // Append directories for an already registered namespace.
+            $this->prefixDirsPsr4[$prefix] = array_merge(
+                $this->prefixDirsPsr4[$prefix],
+                (array) $paths
+            );
+        }
+    }
+
+    /**
+     * Registers a set of PSR-0 directories for a given prefix,
+     * replacing any others previously set for this prefix.
+     *
+     * @param string          $prefix The prefix
+     * @param string[]|string $paths  The PSR-0 base directories
+     *
+     * @return void
+     */
+    public function set($prefix, $paths)
+    {
+        if (!$prefix) {
+            $this->fallbackDirsPsr0 = (array) $paths;
+        } else {
+            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
+        }
+    }
+
+    /**
+     * Registers a set of PSR-4 directories for a given namespace,
+     * replacing any others previously set for this namespace.
+     *
+     * @param string          $prefix The prefix/namespace, with trailing '\\'
+     * @param string[]|string $paths  The PSR-4 base directories
+     *
+     * @throws \InvalidArgumentException
+     *
+     * @return void
+     */
+    public function setPsr4($prefix, $paths)
+    {
+        if (!$prefix) {
+            $this->fallbackDirsPsr4 = (array) $paths;
+        } else {
+            $length = strlen($prefix);
+            if ('\\' !== $prefix[$length - 1]) {
+                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
+            }
+            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
+            $this->prefixDirsPsr4[$prefix] = (array) $paths;
+        }
+    }
+
+    /**
+     * Turns on searching the include path for class files.
+     *
+     * @param bool $useIncludePath
+     *
+     * @return void
+     */
+    public function setUseIncludePath($useIncludePath)
+    {
+        $this->useIncludePath = $useIncludePath;
+    }
+
+    /**
+     * Can be used to check if the autoloader uses the include path to check
+     * for classes.
+     *
+     * @return bool
+     */
+    public function getUseIncludePath()
+    {
+        return $this->useIncludePath;
+    }
+
+    /**
+     * Turns off searching the prefix and fallback directories for classes
+     * that have not been registered with the class map.
+     *
+     * @param bool $classMapAuthoritative
+     *
+     * @return void
+     */
+    public function setClassMapAuthoritative($classMapAuthoritative)
+    {
+        $this->classMapAuthoritative = $classMapAuthoritative;
+    }
+
+    /**
+     * Should class lookup fail if not found in the current class map?
+     *
+     * @return bool
+     */
+    public function isClassMapAuthoritative()
+    {
+        return $this->classMapAuthoritative;
+    }
+
+    /**
+     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
+     *
+     * @param string|null $apcuPrefix
+     *
+     * @return void
+     */
+    public function setApcuPrefix($apcuPrefix)
+    {
+        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
+    }
+
+    /**
+     * The APCu prefix in use, or null if APCu caching is not enabled.
+     *
+     * @return string|null
+     */
+    public function getApcuPrefix()
+    {
+        return $this->apcuPrefix;
+    }
+
+    /**
+     * Registers this instance as an autoloader.
+     *
+     * @param bool $prepend Whether to prepend the autoloader or not
+     *
+     * @return void
+     */
+    public function register($prepend = false)
+    {
+        spl_autoload_register(array($this, 'loadClass'), true, $prepend);
+
+        if (null === $this->vendorDir) {
+            return;
+        }
+
+        if ($prepend) {
+            self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;
+        } else {
+            unset(self::$registeredLoaders[$this->vendorDir]);
+            self::$registeredLoaders[$this->vendorDir] = $this;
+        }
+    }
+
+    /**
+     * Unregisters this instance as an autoloader.
+     *
+     * @return void
+     */
+    public function unregister()
+    {
+        spl_autoload_unregister(array($this, 'loadClass'));
+
+        if (null !== $this->vendorDir) {
+            unset(self::$registeredLoaders[$this->vendorDir]);
+        }
+    }
+
+    /**
+     * Loads the given class or interface.
+     *
+     * @param  string    $class The name of the class
+     * @return true|null True if loaded, null otherwise
+     */
+    public function loadClass($class)
+    {
+        if ($file = $this->findFile($class)) {
+            includeFile($file);
+
+            return true;
+        }
+
+        return null;
+    }
+
+    /**
+     * Finds the path to the file where the class is defined.
+     *
+     * @param string $class The name of the class
+     *
+     * @return string|false The path if found, false otherwise
+     */
+    public function findFile($class)
+    {
+        // class map lookup
+        if (isset($this->classMap[$class])) {
+            return $this->classMap[$class];
+        }
+        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
+            return false;
+        }
+        if (null !== $this->apcuPrefix) {
+            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
+            if ($hit) {
+                return $file;
+            }
+        }
+
+        $file = $this->findFileWithExtension($class, '.php');
+
+        // Search for Hack files if we are running on HHVM
+        if (false === $file && defined('HHVM_VERSION')) {
+            $file = $this->findFileWithExtension($class, '.hh');
+        }
+
+        if (null !== $this->apcuPrefix) {
+            apcu_add($this->apcuPrefix.$class, $file);
+        }
+
+        if (false === $file) {
+            // Remember that this class does not exist.
+            $this->missingClasses[$class] = true;
+        }
+
+        return $file;
+    }
+
+    /**
+     * Returns the currently registered loaders indexed by their corresponding vendor directories.
+     *
+     * @return self[]
+     */
+    public static function getRegisteredLoaders()
+    {
+        return self::$registeredLoaders;
+    }
+
+    /**
+     * @param  string       $class
+     * @param  string       $ext
+     * @return string|false
+     */
+    private function findFileWithExtension($class, $ext)
+    {
+        // PSR-4 lookup
+        $logicalPathPsr4 = strtr($class, '\\', DIRECTORY_SEPARATOR) . $ext;
+
+        $first = $class[0];
+        if (isset($this->prefixLengthsPsr4[$first])) {
+            $subPath = $class;
+            while (false !== $lastPos = strrpos($subPath, '\\')) {
+                $subPath = substr($subPath, 0, $lastPos);
+                $search = $subPath . '\\';
+                if (isset($this->prefixDirsPsr4[$search])) {
+                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
+                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
+                        if (file_exists($file = $dir . $pathEnd)) {
+                            return $file;
+                        }
+                    }
+                }
+            }
+        }
+
+        // PSR-4 fallback dirs
+        foreach ($this->fallbackDirsPsr4 as $dir) {
+            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
+                return $file;
+            }
+        }
+
+        // PSR-0 lookup
+        if (false !== $pos = strrpos($class, '\\')) {
+            // namespaced class name
+            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)
+                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);
+        } else {
+            // PEAR-like class name
+            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;
+        }
+
+        if (isset($this->prefixesPsr0[$first])) {
+            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
+                if (0 === strpos($class, $prefix)) {
+                    foreach ($dirs as $dir) {
+                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
+                            return $file;
+                        }
+                    }
+                }
+            }
+        }
+
+        // PSR-0 fallback dirs
+        foreach ($this->fallbackDirsPsr0 as $dir) {
+            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
+                return $file;
+            }
+        }
+
+        // PSR-0 include paths.
+        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
+            return $file;
+        }
+
+        return false;
+    }
+}
+
+/**
+ * Scope isolated include.
+ *
+ * Prevents access to $this/self from included files.
+ *
+ * @param  string $file
+ * @return void
+ * @private
+ */
+function includeFile($file)
+{
+    include $file;
+}

--- include/lib/Composer/vendor/composer/InstalledVersions.php ---
@@ -0,0 +1,352 @@
+<?php
+
+/*
+ * This file is part of Composer.
+ *
+ * (c) Nils Adermann <naderman@naderman.de>
+ *     Jordi Boggiano <j.boggiano@seld.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Composer;
+
+use Composer\Autoload\ClassLoader;
+use Composer\Semver\VersionParser;
+
+/**
+ * This class is copied in every Composer installed project and available to all
+ *
+ * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
+ *
+ * To require its presence, you can require `composer-runtime-api ^2.0`
+ *
+ * @final
+ */
+class InstalledVersions
+{
+    /**
+     * @var mixed[]|null
+     * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
+     */
+    private static $installed;
+
+    /**
+     * @var bool|null
+     */
+    private static $canGetVendors;
+
+    /**
+     * @var array[]
+     * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
+     */
+    private static $installedByVendor = array();
+
+    /**
+     * Returns a list of all package names which are present, either by being installed, replaced or provided
+     *
+     * @return string[]
+     * @psalm-return list<string>
+     */
+    public static function getInstalledPackages()
+    {
+        $packages = array();
+        foreach (self::getInstalled() as $installed) {
+            $packages[] = array_keys($installed['versions']);
+        }
+
+        if (1 === \count($packages)) {
+            return $packages[0];
+        }
+
+        return array_keys(array_flip(\call_user_func_array('array_merge', $packages)));
+    }
+
+    /**
+     * Returns a list of all package names with a specific type e.g. 'library'
+     *
+     * @param  string   $type
+     * @return string[]
+     * @psalm-return list<string>
+     */
+    public static function getInstalledPackagesByType($type)
+    {
+        $packagesByType = array();
+
+        foreach (self::getInstalled() as $installed) {
+            foreach ($installed['versions'] as $name => $package) {
+                if (isset($package['type']) && $package['type'] === $type) {
+                    $packagesByType[] = $name;
+                }
+            }
+        }
+
+        return $packagesByType;
+    }
+
+    /**
+     * Checks whether the given package is installed
+     *
+     * This also returns true if the package name is provided or replaced by another package
+     *
+     * @param  string $packageName
+     * @param  bool   $includeDevRequirements
+     * @return bool
+     */
+    public static function isInstalled($packageName, $includeDevRequirements = true)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (isset($installed['versions'][$packageName])) {
+                return $includeDevRequirements || empty($installed['versions'][$packageName]['dev_requirement']);
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Checks whether the given package satisfies a version constraint
+     *
+     * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
+     *
+     *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
+     *
+     * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
+     * @param  string        $packageName
+     * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
+     * @return bool
+     */
+    public static function satisfies(VersionParser $parser, $packageName, $constraint)
+    {
+        $constraint = $parser->parseConstraints($constraint);
+        $provided = $parser->parseConstraints(self::getVersionRanges($packageName));
+
+        return $provided->matches($constraint);
+    }
+
+    /**
+     * Returns a version constraint representing all the range(s) which are installed for a given package
+     *
+     * It is easier to use this via isInstalled() with the $constraint argument if you need to check
+     * whether a given version of a package is installed, and not just whether it exists
+     *
+     * @param  string $packageName
+     * @return string Version constraint usable with composer/semver
+     */
+    public static function getVersionRanges($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            $ranges = array();
+            if (isset($installed['versions'][$packageName]['pretty_version'])) {
+                $ranges[] = $installed['versions'][$packageName]['pretty_version'];
+            }
+            if (array_key_exists('aliases', $installed['versions'][$packageName])) {
+                $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);
+            }
+            if (array_key_exists('replaced', $installed['versions'][$packageName])) {
+                $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);
+            }
+            if (array_key_exists('provided', $installed['versions'][$packageName])) {
+                $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);
+            }
+
+            return implode(' || ', $ranges);
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
+     */
+    public static function getVersion($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            if (!isset($installed['versions'][$packageName]['version'])) {
+                return null;
+            }
+
+            return $installed['versions'][$packageName]['version'];
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
+     */
+    public static function getPrettyVersion($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            if (!isset($installed['versions'][$packageName]['pretty_version'])) {
+                return null;
+            }
+
+            return $installed['versions'][$packageName]['pretty_version'];
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
+     */
+    public static function getReference($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            if (!isset($installed['versions'][$packageName]['reference'])) {
+                return null;
+            }
+
+            return $installed['versions'][$packageName]['reference'];
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
+     */
+    public static function getInstallPath($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @return array
+     * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
+     */
+    public static function getRootPackage()
+    {
+        $installed = self::getInstalled();
+
+        return $installed[0]['root'];
+    }
+
+    /**
+     * Returns the raw installed.php data for custom implementations
+     *
+     * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
+     * @return array[]
+     * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
+     */
+    public static function getRawData()
+    {
+        @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);
+
+        if (null === self::$installed) {
+            // only require the installed.php file if this file is loaded from its dumped location,
+            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
+            if (substr(__DIR__, -8, 1) !== 'C') {
+                self::$installed = include __DIR__ . '/installed.php';
+            } else {
+                self::$installed = array();
+            }
+        }
+
+        return self::$installed;
+    }
+
+    /**
+     * Returns the raw data of all installed.php which are currently loaded for custom implementations
+     *
+     * @return array[]
+     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
+     */
+    public static function getAllRawData()
+    {
+        return self::getInstalled();
+    }
+
+    /**
+     * Lets you reload the static array from another file
+     *
+     * This is only useful for complex integrations in which a project needs to use
+     * this class but then also needs to execute another project's autoloader in process,
+     * and wants to ensure both projects have access to their version of installed.php.
+     *
+     * A typical case would be PHPUnit, where it would need to make sure it reads all
+     * the data it needs from this class, then call reload() with
+     * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
+     * the project in which it runs can then also use this class safely, without
+     * interference between PHPUnit's dependencies and the project's dependencies.
+     *
+     * @param  array[] $data A vendor/composer/installed.php data set
+     * @return void
+     *
+     * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
+     */
+    public static function reload($data)
+    {
+        self::$installed = $data;
+        self::$installedByVendor = array();
+    }
+
+    /**
+     * @return array[]
+     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
+     */
+    private static function getInstalled()
+    {
+        if (null === self::$canGetVendors) {
+            self::$canGetVendors = method_exists('Composer\Autoload\ClassLoader', 'getRegisteredLoaders');
+        }
+
+        $installed = array();
+
+        if (self::$canGetVendors) {
+            foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {
+                if (isset(self::$installedByVendor[$vendorDir])) {
+                    $installed[] = self::$installedByVendor[$vendorDir];
+                } elseif (is_file($vendorDir.'/composer/installed.php')) {
+                    $installed[] = self::$installedByVendor[$vendorDir] = require $vendorDir.'/composer/installed.php';
+                    if (null === self::$installed && strtr($vendorDir.'/composer', '\\', '/') === strtr(__DIR__, '\\', '/')) {
+                        self::$installed = $installed[count($installed) - 1];
+                    }
+                }
+            }
+        }
+
+        if (null === self::$installed) {
+            // only require the installed.php file if this file is loaded from its dumped location,
+            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
+            if (substr(__DIR__, -8, 1) !== 'C') {
+                self::$installed = require __DIR__ . '/installed.php';
+            } else {
+                self::$installed = array();
+            }
+        }
+        $installed[] = self::$installed;
+
+        return $installed;
+    }
+}

--- include/lib/Composer/vendor/composer/LICENSE ---
@@ -0,0 +1,21 @@
+
+Copyright (c) Nils Adermann, Jordi Boggiano
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+

--- include/lib/Composer/vendor/composer/autoload_classmap.php ---
@@ -0,0 +1,10 @@
+<?php
+
+// autoload_classmap.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
+);

--- include/lib/Composer/vendor/composer/autoload_files.php ---
@@ -0,0 +1,14 @@
+<?php
+
+// autoload_files.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'ad155f8f1cf0d418fe49e248db8c661b' => $vendorDir . '/react/promise/src/functions_include.php',
+    '972fda704d680a3a53c68e34e193cb22' => $vendorDir . '/react/promise-timer/src/functions_include.php',
+    '7b11c4dc42b3b3023073cb14e519683c' => $vendorDir . '/ralouphie/getallheaders/src/getallheaders.php',
+    '6e3fae29631ef280660b3cdad06f25a8' => $vendorDir . '/symfony/deprecation-contracts/function.php',
+    '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => $vendorDir . '/symfony/polyfill-mbstring/bootstrap.php',
+);

--- include/lib/Composer/vendor/composer/autoload_namespaces.php ---
@@ -0,0 +1,10 @@
+<?php
+
+// autoload_namespaces.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'Evenement' => array($vendorDir . '/evenement/evenement/src'),
+);

--- include/lib/Composer/vendor/composer/autoload_psr4.php ---
@@ -0,0 +1,25 @@
+<?php
+
+// autoload_psr4.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'Symfony\\Polyfill\\Mbstring\\' => array($vendorDir . '/symfony/polyfill-mbstring'),
+    'Symfony\\Component\\Routing\\' => array($vendorDir . '/symfony/routing'),
+    'Symfony\\Component\\HttpFoundation\\' => array($vendorDir . '/symfony/http-foundation'),
+    'React\\Stream\\' => array($vendorDir . '/react/stream/src'),
+    'React\\Socket\\' => array($vendorDir . '/react/socket/src'),
+    'React\\Promise\\Timer\\' => array($vendorDir . '/react/promise-timer/src'),
+    'React\\Promise\\' => array($vendorDir . '/react/promise/src'),
+    'React\\EventLoop\\' => array($vendorDir . '/react/event-loop/src'),
+    'React\\Dns\\' => array($vendorDir . '/react/dns/src'),
+    'React\\Cache\\' => array($vendorDir . '/react/cache/src'),
+    'Ratchet\\RFC6455\\' => array($vendorDir . '/ratchet/rfc6455/src'),
+    'Ratchet\\' => array($vendorDir . '/cboden/ratchet/src/Ratchet'),
+    'Psr\\Log\\' => array($vendorDir . '/psr/log/src'),
+    'Psr\\Http\\Message\\' => array($vendorDir . '/psr/http-message/src', $vendorDir . '/psr/http-factory/src'),
+    'PAMI\\' => array($vendorDir . '/marcelog/pami/src/PAMI'),
+    'GuzzleHttp\\Psr7\\' => array($vendorDir . '/guzzlehttp/psr7/src'),
+);

--- include/lib/Composer/vendor/composer/autoload_real.php ---
@@ -0,0 +1,57 @@
+<?php
+
+// autoload_real.php @generated by Composer
+
+class ComposerAutoloaderInit7656222adf5c0ef88036205f2e60359a
+{
+    private static $loader;
+
+    public static function loadClassLoader($class)
+    {
+        if ('Composer\Autoload\ClassLoader' === $class) {
+            require __DIR__ . '/ClassLoader.php';
+        }
+    }
+
+    /**
+     * @return \Composer\Autoload\ClassLoader
+     */
+    public static function getLoader()
+    {
+        if (null !== self::$loader) {
+            return self::$loader;
+        }
+
+        require __DIR__ . '/platform_check.php';
+
+        spl_autoload_register(array('ComposerAutoloaderInit7656222adf5c0ef88036205f2e60359a', 'loadClassLoader'), true, true);
+        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
+        spl_autoload_unregister(array('ComposerAutoloaderInit7656222adf5c0ef88036205f2e60359a', 'loadClassLoader'));
+
+        require __DIR__ . '/autoload_static.php';
+        call_user_func(\Composer\Autoload\ComposerStaticInit7656222adf5c0ef88036205f2e60359a::getInitializer($loader));
+
+        $loader->register(true);
+
+        $includeFiles = \Composer\Autoload\ComposerStaticInit7656222adf5c0ef88036205f2e60359a::$files;
+        foreach ($includeFiles as $fileIdentifier => $file) {
+            composerRequire7656222adf5c0ef88036205f2e60359a($fileIdentifier, $file);
+        }
+
+        return $loader;
+    }
+}
+
+/**
+ * @param string $fileIdentifier
+ * @param string $file
+ * @return void
+ */
+function composerRequire7656222adf5c0ef88036205f2e60359a($fileIdentifier, $file)
+{
+    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
+        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
+
+        require $file;
+    }
+}

--- include/lib/Composer/vendor/composer/autoload_static.php ---
@@ -0,0 +1,140 @@
+<?php
+
+// autoload_static.php @generated by Composer
+
+namespace Composer\Autoload;
+
+class ComposerStaticInit7656222adf5c0ef88036205f2e60359a
+{
+    public static $files = array (
+        'ad155f8f1cf0d418fe49e248db8c661b' => __DIR__ . '/..' . '/react/promise/src/functions_include.php',
+        '972fda704d680a3a53c68e34e193cb22' => __DIR__ . '/..' . '/react/promise-timer/src/functions_include.php',
+        '7b11c4dc42b3b3023073cb14e519683c' => __DIR__ . '/..' . '/ralouphie/getallheaders/src/getallheaders.php',
+        '6e3fae29631ef280660b3cdad06f25a8' => __DIR__ . '/..' . '/symfony/deprecation-contracts/function.php',
+        '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => __DIR__ . '/..' . '/symfony/polyfill-mbstring/bootstrap.php',
+    );
+
+    public static $prefixLengthsPsr4 = array (
+        'S' => 
+        array (
+            'Symfony\\Polyfill\\Mbstring\\' => 26,
+            'Symfony\\Component\\Routing\\' => 26,
+            'Symfony\\Component\\HttpFoundation\\' => 33,
+        ),
+        'R' => 
+        array (
+            'React\\Stream\\' => 13,
+            'React\\Socket\\' => 13,
+            'React\\Promise\\Timer\\' => 20,
+            'React\\Promise\\' => 14,
+            'React\\EventLoop\\' => 16,
+            'React\\Dns\\' => 10,
+            'React\\Cache\\' => 12,
+            'Ratchet\\RFC6455\\' => 16,
+            'Ratchet\\' => 8,
+        ),
+        'P' => 
+        array (
+            'Psr\\Log\\' => 8,
+            'Psr\\Http\\Message\\' => 17,
+            'PAMI\\' => 5,
+        ),
+        'G' => 
+        array (
+            'GuzzleHttp\\Psr7\\' => 16,
+        ),
+    );
+
+    public static $prefixDirsPsr4 = array (
+        'Symfony\\Polyfill\\Mbstring\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/symfony/polyfill-mbstring',
+        ),
+        'Symfony\\Component\\Routing\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/symfony/routing',
+        ),
+        'Symfony\\Component\\HttpFoundation\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/symfony/http-foundation',
+        ),
+        'React\\Stream\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/stream/src',
+        ),
+        'React\\Socket\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/socket/src',
+        ),
+        'React\\Promise\\Timer\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/promise-timer/src',
+        ),
+        'React\\Promise\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/promise/src',
+        ),
+        'React\\EventLoop\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/event-loop/src',
+        ),
+        'React\\Dns\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/dns/src',
+        ),
+        'React\\Cache\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/react/cache/src',
+        ),
+        'Ratchet\\RFC6455\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/ratchet/rfc6455/src',
+        ),
+        'Ratchet\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/cboden/ratchet/src/Ratchet',
+        ),
+        'Psr\\Log\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/psr/log/src',
+        ),
+        'Psr\\Http\\Message\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/psr/http-message/src',
+            1 => __DIR__ . '/..' . '/psr/http-factory/src',
+        ),
+        'PAMI\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/marcelog/pami/src/PAMI',
+        ),
+        'GuzzleHttp\\Psr7\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/guzzlehttp/psr7/src',
+        ),
+    );
+
+    public static $prefixesPsr0 = array (
+        'E' => 
+        array (
+            'Evenement' => 
+            array (
+                0 => __DIR__ . '/..' . '/evenement/evenement/src',
+            ),
+        ),
+    );
+
+    public static $classMap = array (
+        'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
+    );
+
+    public static function getInitializer(ClassLoader $loader)
+    {
+        return \Closure::bind(function () use ($loader) {
+            $loader->prefixLengthsPsr4 = ComposerStaticInit7656222adf5c0ef88036205f2e60359a::$prefixLengthsPsr4;
+            $loader->prefixDirsPsr4 = ComposerStaticInit7656222adf5c0ef88036205f2e60359a::$prefixDirsPsr4;
+            $loader->prefixesPsr0 = ComposerStaticInit7656222adf5c0ef88036205f2e60359a::$prefixesPsr0;
+            $loader->classMap = ComposerStaticInit7656222adf5c0ef88036205f2e60359a::$classMap;
+
+        }, null, ClassLoader::class);
+    }
+}

--- include/lib/Composer/vendor/composer/installed.json ---
@@ -0,0 +1,1490 @@
+{
+    "packages": [
+        {
+            "name": "cboden/ratchet",
+            "version": "v0.4.4",
+            "version_normalized": "0.4.4.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ratchetphp/Ratchet.git",
+                "reference": "5012dc954541b40c5599d286fd40653f5716a38f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ratchetphp/Ratchet/zipball/5012dc954541b40c5599d286fd40653f5716a38f",
+                "reference": "5012dc954541b40c5599d286fd40653f5716a38f",
+                "shasum": ""
+            },
+            "require": {
+                "guzzlehttp/psr7": "^1.7|^2.0",
+                "php": ">=5.4.2",
+                "ratchet/rfc6455": "^0.3.1",
+                "react/event-loop": ">=0.4",
+                "react/socket": "^1.0 || ^0.8 || ^0.7 || ^0.6 || ^0.5",
+                "symfony/http-foundation": "^2.6|^3.0|^4.0|^5.0|^6.0",
+                "symfony/routing": "^2.6|^3.0|^4.0|^5.0|^6.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "~4.8"
+            },
+            "time": "2021-12-14T00:20:41+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Ratchet\\": "src/Ratchet"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Matt Bonneau",
+                    "role": "Developer"
+                }
+            ],
+            "description": "PHP WebSocket library",
+            "homepage": "http://socketo.me",
+            "keywords": [
+                "Ratchet",
+                "WebSockets",
+                "server",
+                "sockets",
+                "websocket"
+            ],
+            "support": {
+                "chat": "https://gitter.im/reactphp/reactphp",
+                "issues": "https://github.com/ratchetphp/Ratchet/issues",
+                "source": "https://github.com/ratchetphp/Ratchet/tree/v0.4.4"
+            },
+            "install-path": "../cboden/ratchet"
+        },
+        {
+            "name": "evenement/evenement",
+            "version": "v3.0.1",
+            "version_normalized": "3.0.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/igorw/evenement.git",
+                "reference": "531bfb9d15f8aa57454f5f0285b18bec903b8fb7"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/igorw/evenement/zipball/531bfb9d15f8aa57454f5f0285b18bec903b8fb7",
+                "reference": "531bfb9d15f8aa57454f5f0285b18bec903b8fb7",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^6.0"
+            },
+            "time": "2017-07-23T21:35:13+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-0": {
+                    "Evenement": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Igor Wiedler",
+                    "email": "igor@wiedler.ch"
+                }
+            ],
+            "description": "Événement is a very simple event dispatching library for PHP",
+            "keywords": [
+                "event-dispatcher",
+                "event-emitter"
+            ],
+            "support": {
+                "issues": "https://github.com/igorw/evenement/issues",
+                "source": "https://github.com/igorw/evenement/tree/master"
+            },
+            "install-path": "../evenement/evenement"
+        },
+        {
+            "name": "guzzlehttp/psr7",
+            "version": "2.4.3",
+            "version_normalized": "2.4.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/guzzle/psr7.git",
+                "reference": "67c26b443f348a51926030c83481b85718457d3d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/guzzle/psr7/zipball/67c26b443f348a51926030c83481b85718457d3d",
+                "reference": "67c26b443f348a51926030c83481b85718457d3d",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2.5 || ^8.0",
+                "psr/http-factory": "^1.0",
+                "psr/http-message": "^1.0",
+                "ralouphie/getallheaders": "^3.0"
+            },
+            "provide": {
+                "psr/http-factory-implementation": "1.0",
+                "psr/http-message-implementation": "1.0"
+            },
+            "require-dev": {
+                "bamarni/composer-bin-plugin": "^1.8.1",
+                "http-interop/http-factory-tests": "^0.9",
+                "phpunit/phpunit": "^8.5.29 || ^9.5.23"
+            },
+            "suggest": {
+                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
+            },
+            "time": "2022-10-26T14:07:24+00:00",
+            "type": "library",
+            "extra": {
+                "bamarni-bin": {
+                    "bin-links": true,
+                    "forward-command": false
+                },
+                "branch-alias": {
+                    "dev-master": "2.4-dev"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "GuzzleHttp\\Psr7\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Graham Campbell",
+                    "email": "hello@gjcampbell.co.uk",
+                    "homepage": "https://github.com/GrahamCampbell"
+                },
+                {
+                    "name": "Michael Dowling",
+                    "email": "mtdowling@gmail.com",
+                    "homepage": "https://github.com/mtdowling"
+                },
+                {
+                    "name": "George Mponos",
+                    "email": "gmponos@gmail.com",
+                    "homepage": "https://github.com/gmponos"
+                },
+                {
+                    "name": "Tobias Nyholm",
+                    "email": "tobias.nyholm@gmail.com",
+                    "homepage": "https://github.com/Nyholm"
+                },
+                {
+                    "name": "Márk Sági-Kazár",
+                    "email": "mark.sagikazar@gmail.com",
+                    "homepage": "https://github.com/sagikazarmark"
+                },
+                {
+                    "name": "Tobias Schultze",
+                    "email": "webmaster@tubo-world.de",
+                    "homepage": "https://github.com/Tobion"
+                },
+                {
+                    "name": "Márk Sági-Kazár",
+                    "email": "mark.sagikazar@gmail.com",
+                    "homepage": "https://sagikazarmark.hu"
+                }
+            ],
+            "description": "PSR-7 message implementation that also provides common utility methods",
+            "keywords": [
+                "http",
+                "message",
+                "psr-7",
+                "request",
+                "response",
+                "stream",
+                "uri",
+                "url"
+            ],
+            "support": {
+                "issues": "https://github.com/guzzle/psr7/issues",
+                "source": "https://github.com/guzzle/psr7/tree/2.4.3"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/GrahamCampbell",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/Nyholm",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/psr7",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../guzzlehttp/psr7"
+        },
+        {
+            "name": "marcelog/pami",
+            "version": "v2.0.2",
+            "version_normalized": "2.0.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/marcelog/PAMI.git",
+                "reference": "f586d0fcbf7db7952965ccb91e4ed231bd168fb3"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/marcelog/PAMI/zipball/f586d0fcbf7db7952965ccb91e4ed231bd168fb3",
+                "reference": "f586d0fcbf7db7952965ccb91e4ed231bd168fb3",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "psr/log": ">= 1.0.0"
+            },
+            "require-dev": {
+                "codeclimate/php-test-reporter": "dev-master",
+                "evert/phpdoc-md": "~0.1.1",
+                "marcelog/pagi": "2.*",
+                "monolog/monolog": "1.*",
+                "phing/phing": "2.*",
+                "phpdocumentor/phpdocumentor": "2.*",
+                "phpmd/phpmd": "2.*",
+                "phpunit/phpunit": "4.*",
+                "satooshi/php-coveralls": "1.0.1",
+                "sebastian/phpcpd": "*",
+                "squizlabs/php_codesniffer": "2.*"
+            },
+            "time": "2017-10-10T18:59:17+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "PAMI\\": "src/PAMI"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache2"
+            ],
+            "authors": [
+                {
+                    "name": "Marcelo Gornstein",
+                    "email": "marcelog@gmail.com",
+                    "homepage": "http://marcelog.github.com/",
+                    "role": "Developer"
+                }
+            ],
+            "description": "Asterisk Manager Interface (AMI) client for PHP, event driven, object oriented",
+            "homepage": "http://marcelog.github.com/PAMI",
+            "keywords": [
+                "action",
+                "ami",
+                "asterisk",
+                "client",
+                "event",
+                "manager",
+                "monitor",
+                "telephony",
+                "voip"
+            ],
+            "support": {
+                "issues": "https://github.com/marcelog/PAMI/issues",
+                "source": "https://github.com/marcelog/PAMI/tree/v2.0.2"
+            },
+            "install-path": "../marcelog/pami"
+        },
+        {
+            "name": "psr/http-factory",
+            "version": "1.0.1",
+            "version_normalized": "1.0.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/http-factory.git",
+                "reference": "12ac7fcd07e5b077433f5f2bee95b3a771bf61be"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/http-factory/zipball/12ac7fcd07e5b077433f5f2bee95b3a771bf61be",
+                "reference": "12ac7fcd07e5b077433f5f2bee95b3a771bf61be",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.0.0",
+                "psr/http-message": "^1.0"
+            },
+            "time": "2019-04-30T12:38:16+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Http\\Message\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interfaces for PSR-7 HTTP message factories",
+            "keywords": [
+                "factory",
+                "http",
+                "message",
+                "psr",
+                "psr-17",
+                "psr-7",
+                "request",
+                "response"
+            ],
+            "support": {
+                "source": "https://github.com/php-fig/http-factory/tree/master"
+            },
+            "install-path": "../psr/http-factory"
+        },
+        {
+            "name": "psr/http-message",
+            "version": "1.0.1",
+            "version_normalized": "1.0.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/http-message.git",
+                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
+                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "time": "2016-08-06T14:39:51+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Http\\Message\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "http://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interface for HTTP messages",
+            "homepage": "https://github.com/php-fig/http-message",
+            "keywords": [
+                "http",
+                "http-message",
+                "psr",
+                "psr-7",
+                "request",
+                "response"
+            ],
+            "support": {
+                "source": "https://github.com/php-fig/http-message/tree/master"
+            },
+            "install-path": "../psr/http-message"
+        },
+        {
+            "name": "psr/log",
+            "version": "3.0.0",
+            "version_normalized": "3.0.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/php-fig/log.git",
+                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/php-fig/log/zipball/fe5ea303b0887d5caefd3d431c3e61ad47037001",
+                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.0"
+            },
+            "time": "2021-07-14T16:46:02+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.x-dev"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Psr\\Log\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "PHP-FIG",
+                    "homepage": "https://www.php-fig.org/"
+                }
+            ],
+            "description": "Common interface for logging libraries",
+            "homepage": "https://github.com/php-fig/log",
+            "keywords": [
+                "log",
+                "psr",
+                "psr-3"
+            ],
+            "support": {
+                "source": "https://github.com/php-fig/log/tree/3.0.0"
+            },
+            "install-path": "../psr/log"
+        },
+        {
+            "name": "ralouphie/getallheaders",
+            "version": "3.0.3",
+            "version_normalized": "3.0.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ralouphie/getallheaders.git",
+                "reference": "120b605dfeb996808c31b6477290a714d356e822"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
+                "reference": "120b605dfeb996808c31b6477290a714d356e822",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.6"
+            },
+            "require-dev": {
+                "php-coveralls/php-coveralls": "^2.1",
+                "phpunit/phpunit": "^5 || ^6.5"
+            },
+            "time": "2019-03-08T08:55:37+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "src/getallheaders.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ralph Khattar",
+                    "email": "ralph.khattar@gmail.com"
+                }
+            ],
+            "description": "A polyfill for getallheaders.",
+            "support": {
+                "issues": "https://github.com/ralouphie/getallheaders/issues",
+                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
+            },
+            "install-path": "../ralouphie/getallheaders"
+        },
+        {
+            "name": "ratchet/rfc6455",
+            "version": "v0.3.1",
+            "version_normalized": "0.3.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ratchetphp/RFC6455.git",
+                "reference": "7c964514e93456a52a99a20fcfa0de242a43ccdb"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ratchetphp/RFC6455/zipball/7c964514e93456a52a99a20fcfa0de242a43ccdb",
+                "reference": "7c964514e93456a52a99a20fcfa0de242a43ccdb",
+                "shasum": ""
+            },
+            "require": {
+                "guzzlehttp/psr7": "^2 || ^1.7",
+                "php": ">=5.4.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^5.7",
+                "react/socket": "^1.3"
+            },
+            "time": "2021-12-09T23:20:49+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Ratchet\\RFC6455\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Matt Bonneau",
+                    "role": "Developer"
+                }
+            ],
+            "description": "RFC6455 WebSocket protocol handler",
+            "homepage": "http://socketo.me",
+            "keywords": [
+                "WebSockets",
+                "rfc6455",
+                "websocket"
+            ],
+            "support": {
+                "chat": "https://gitter.im/reactphp/reactphp",
+                "issues": "https://github.com/ratchetphp/RFC6455/issues",
+                "source": "https://github.com/ratchetphp/RFC6455/tree/v0.3.1"
+            },
+            "install-path": "../ratchet/rfc6455"
+        },
+        {
+            "name": "react/cache",
+            "version": "v1.2.0",
+            "version_normalized": "1.2.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/cache.git",
+                "reference": "d47c472b64aa5608225f47965a484b75c7817d5b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/cache/zipball/d47c472b64aa5608225f47965a484b75c7817d5b",
+                "reference": "d47c472b64aa5608225f47965a484b75c7817d5b",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0",
+                "react/promise": "^3.0 || ^2.0 || ^1.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.5 || ^5.7 || ^4.8.35"
+            },
+            "time": "2022-11-30T15:59:55+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "React\\Cache\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Async, Promise-based cache interface for ReactPHP",
+            "keywords": [
+                "cache",
+                "caching",
+                "promise",
+                "reactphp"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/cache/issues",
+                "source": "https://github.com/reactphp/cache/tree/v1.2.0"
+            },
+            "funding": [
+                {
+                    "url": "https://opencollective.com/reactphp",
+                    "type": "open_collective"
+                }
+            ],
+            "install-path": "../react/cache"
+        },
+        {
+            "name": "react/dns",
+            "version": "v1.10.0",
+            "version_normalized": "1.10.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/dns.git",
+                "reference": "a5427e7dfa47713e438016905605819d101f238c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/dns/zipball/a5427e7dfa47713e438016905605819d101f238c",
+                "reference": "a5427e7dfa47713e438016905605819d101f238c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0",
+                "react/cache": "^1.0 || ^0.6 || ^0.5",
+                "react/event-loop": "^1.2",
+                "react/promise": "^3.0 || ^2.7 || ^1.2.1",
+                "react/promise-timer": "^1.9"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^4.8.35",
+                "react/async": "^4 || ^3 || ^2"
+            },
+            "time": "2022-09-08T12:22:46+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "React\\Dns\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Async DNS resolver for ReactPHP",
+            "keywords": [
+                "async",
+                "dns",
+                "dns-resolver",
+                "reactphp"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/dns/issues",
+                "source": "https://github.com/reactphp/dns/tree/v1.10.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../react/dns"
+        },
+        {
+            "name": "react/event-loop",
+            "version": "v1.3.0",
+            "version_normalized": "1.3.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/event-loop.git",
+                "reference": "187fb56f46d424afb6ec4ad089269c72eec2e137"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/event-loop/zipball/187fb56f46d424afb6ec4ad089269c72eec2e137",
+                "reference": "187fb56f46d424afb6ec4ad089269c72eec2e137",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35"
+            },
+            "suggest": {
+                "ext-event": "~1.0 for ExtEventLoop",
+                "ext-pcntl": "For signal handling support when using the StreamSelectLoop",
+                "ext-uv": "* for ExtUvLoop"
+            },
+            "time": "2022-03-17T11:10:22+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "React\\EventLoop\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "ReactPHP's core reactor event loop that libraries can use for evented I/O.",
+            "keywords": [
+                "asynchronous",
+                "event-loop"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/event-loop/issues",
+                "source": "https://github.com/reactphp/event-loop/tree/v1.3.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../react/event-loop"
+        },
+        {
+            "name": "react/promise",
+            "version": "v2.9.0",
+            "version_normalized": "2.9.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/promise.git",
+                "reference": "234f8fd1023c9158e2314fa9d7d0e6a83db42910"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/promise/zipball/234f8fd1023c9158e2314fa9d7d0e6a83db42910",
+                "reference": "234f8fd1023c9158e2314fa9d7d0e6a83db42910",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.4.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.36"
+            },
+            "time": "2022-02-11T10:27:51+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "src/functions_include.php"
+                ],
+                "psr-4": {
+                    "React\\Promise\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "A lightweight implementation of CommonJS Promises/A for PHP",
+            "keywords": [
+                "promise",
+                "promises"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/promise/issues",
+                "source": "https://github.com/reactphp/promise/tree/v2.9.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../react/promise"
+        },
+        {
+            "name": "react/promise-timer",
+            "version": "v1.9.0",
+            "version_normalized": "1.9.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/promise-timer.git",
+                "reference": "aa7a73c74b8d8c0f622f5982ff7b0351bc29e495"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/promise-timer/zipball/aa7a73c74b8d8c0f622f5982ff7b0351bc29e495",
+                "reference": "aa7a73c74b8d8c0f622f5982ff7b0351bc29e495",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3",
+                "react/event-loop": "^1.2",
+                "react/promise": "^3.0 || ^2.7.0 || ^1.2.1"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35"
+            },
+            "time": "2022-06-13T13:41:03+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "src/functions_include.php"
+                ],
+                "psr-4": {
+                    "React\\Promise\\Timer\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "A trivial implementation of timeouts for Promises, built on top of ReactPHP.",
+            "homepage": "https://github.com/reactphp/promise-timer",
+            "keywords": [
+                "async",
+                "event-loop",
+                "promise",
+                "reactphp",
+                "timeout",
+                "timer"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/promise-timer/issues",
+                "source": "https://github.com/reactphp/promise-timer/tree/v1.9.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../react/promise-timer"
+        },
+        {
+            "name": "react/socket",
+            "version": "v1.12.0",
+            "version_normalized": "1.12.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/socket.git",
+                "reference": "81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/socket/zipball/81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b",
+                "reference": "81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b",
+                "shasum": ""
+            },
+            "require": {
+                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
+                "php": ">=5.3.0",
+                "react/dns": "^1.8",
+                "react/event-loop": "^1.2",
+                "react/promise": "^3 || ^2.6 || ^1.2.1",
+                "react/promise-timer": "^1.9",
+                "react/stream": "^1.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35",
+                "react/async": "^4 || ^3 || ^2",
+                "react/promise-stream": "^1.4"
+            },
+            "time": "2022-08-25T12:32:25+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "React\\Socket\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Async, streaming plaintext TCP/IP and secure TLS socket server and client connections for ReactPHP",
+            "keywords": [
+                "Connection",
+                "Socket",
+                "async",
+                "reactphp",
+                "stream"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/socket/issues",
+                "source": "https://github.com/reactphp/socket/tree/v1.12.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../react/socket"
+        },
+        {
+            "name": "react/stream",
+            "version": "v1.2.0",
+            "version_normalized": "1.2.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/reactphp/stream.git",
+                "reference": "7a423506ee1903e89f1e08ec5f0ed430ff784ae9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/reactphp/stream/zipball/7a423506ee1903e89f1e08ec5f0ed430ff784ae9",
+                "reference": "7a423506ee1903e89f1e08ec5f0ed430ff784ae9",
+                "shasum": ""
+            },
+            "require": {
+                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
+                "php": ">=5.3.8",
+                "react/event-loop": "^1.2"
+            },
+            "require-dev": {
+                "clue/stream-filter": "~1.2",
+                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35"
+            },
+            "time": "2021-07-11T12:37:55+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "React\\Stream\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Christian Lück",
+                    "email": "christian@clue.engineering",
+                    "homepage": "https://clue.engineering/"
+                },
+                {
+                    "name": "Cees-Jan Kiewiet",
+                    "email": "reactphp@ceesjankiewiet.nl",
+                    "homepage": "https://wyrihaximus.net/"
+                },
+                {
+                    "name": "Jan Sorgalla",
+                    "email": "jsorgalla@gmail.com",
+                    "homepage": "https://sorgalla.com/"
+                },
+                {
+                    "name": "Chris Boden",
+                    "email": "cboden@gmail.com",
+                    "homepage": "https://cboden.dev/"
+                }
+            ],
+            "description": "Event-driven readable and writable streams for non-blocking I/O in ReactPHP",
+            "keywords": [
+                "event-driven",
+                "io",
+                "non-blocking",
+                "pipe",
+                "reactphp",
+                "readable",
+                "stream",
+                "writable"
+            ],
+            "support": {
+                "issues": "https://github.com/reactphp/stream/issues",
+                "source": "https://github.com/reactphp/stream/tree/v1.2.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/WyriHaximus",
+                    "type": "github"
+                },
+                {
+                    "url": "https://github.com/clue",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../react/stream"
+        },
+        {
+            "name": "symfony/deprecation-contracts",
+            "version": "v3.0.2",
+            "version_normalized": "3.0.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/deprecation-contracts.git",
+                "reference": "26954b3d62a6c5fd0ea8a2a00c0353a14978d05c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/26954b3d62a6c5fd0ea8a2a00c0353a14978d05c",
+                "reference": "26954b3d62a6c5fd0ea8a2a00c0353a14978d05c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.2"
+            },
+            "time": "2022-01-02T09:55:41+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-main": "3.0-dev"
+                },
+                "thanks": {
+                    "name": "symfony/contracts",
+                    "url": "https://github.com/symfony/contracts"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "function.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "A generic function and convention to trigger deprecation notices",
+            "homepage": "https://symfony.com",
+            "support": {
+                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.0.2"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../symfony/deprecation-contracts"
+        },
+        {
+            "name": "symfony/http-foundation",
+            "version": "v6.0.17",
+            "version_normalized": "6.0.17.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/http-foundation.git",
+                "reference": "22fe17e40b0481d39212e7165e004eb26422085d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/22fe17e40b0481d39212e7165e004eb26422085d",
+                "reference": "22fe17e40b0481d39212e7165e004eb26422085d",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.2",
+                "symfony/deprecation-contracts": "^2.1|^3",
+                "symfony/polyfill-mbstring": "~1.1"
+            },
+            "require-dev": {
+                "predis/predis": "~1.0",
+                "symfony/cache": "^5.4|^6.0",
+                "symfony/dependency-injection": "^5.4|^6.0",
+                "symfony/expression-language": "^5.4|^6.0",
+                "symfony/http-kernel": "^5.4.12|^6.0.12|^6.1.4",
+                "symfony/mime": "^5.4|^6.0",
+                "symfony/rate-limiter": "^5.2|^6.0"
+            },
+            "suggest": {
+                "symfony/mime": "To use the file extension guesser"
+            },
+            "time": "2022-12-14T15:52:41+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\HttpFoundation\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Defines an object-oriented layer for the HTTP specification",
+            "homepage": "https://symfony.com",
+            "support": {
+                "source": "https://github.com/symfony/http-foundation/tree/v6.0.17"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../symfony/http-foundation"
+        },
+        {
+            "name": "symfony/polyfill-mbstring",
+            "version": "v1.27.0",
+            "version_normalized": "1.27.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-mbstring.git",
+                "reference": "8ad114f6b39e2c98a8b0e3bd907732c207c2b534"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/8ad114f6b39e2c98a8b0e3bd907732c207c2b534",
+                "reference": "8ad114f6b39e2c98a8b0e3bd907732c207c2b534",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.1"
+            },
+            "provide": {
+                "ext-mbstring": "*"
+            },
+            "suggest": {
+                "ext-mbstring": "For best performance"
+            },
+            "time": "2022-11-03T14:55:06+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-main": "1.27-dev"
+                },
+                "thanks": {
+                    "name": "symfony/polyfill",
+                    "url": "https://github.com/symfony/polyfill"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "bootstrap.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Polyfill\\Mbstring\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for the Mbstring extension",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "mbstring",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.27.0"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../symfony/polyfill-mbstring"
+        },
+        {
+            "name": "symfony/routing",
+            "version": "v6.0.17",
+            "version_normalized": "6.0.17.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/routing.git",
+                "reference": "61687a0aa80f6807c52e116ee64072f6ec53780c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/routing/zipball/61687a0aa80f6807c52e116ee64072f6ec53780c",
+                "reference": "61687a0aa80f6807c52e116ee64072f6ec53780c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=8.0.2"
+            },
+            "conflict": {
+                "doctrine/annotations": "<1.12",
+                "symfony/config": "<5.4",
+                "symfony/dependency-injection": "<5.4",
+                "symfony/yaml": "<5.4"
+            },
+            "require-dev": {
+                "doctrine/annotations": "^1.12|^2",
+                "psr/log": "^1|^2|^3",
+                "symfony/config": "^5.4|^6.0",
+                "symfony/dependency-injection": "^5.4|^6.0",
+                "symfony/expression-language": "^5.4|^6.0",
+                "symfony/http-foundation": "^5.4|^6.0",
+                "symfony/yaml": "^5.4|^6.0"
+            },
+            "suggest": {
+                "symfony/config": "For using the all-in-one router or any loader",
+                "symfony/expression-language": "For using expression matching",
+                "symfony/http-foundation": "For using a Symfony Request object",
+                "symfony/yaml": "For using the YAML loader"
+            },
+            "time": "2022-12-20T16:40:04+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\Routing\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Maps an HTTP request to a set of configuration variables",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "router",
+                "routing",
+                "uri",
+                "url"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/routing/tree/v6.0.17"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../symfony/routing"
+        }
+    ],
+    "dev": true,
+    "dev-package-names": []
+}

--- include/lib/Composer/vendor/composer/installed.php ---
@@ -0,0 +1,215 @@
+<?php return array(
+    'root' => array(
+        'name' => '__root__',
+        'pretty_version' => '1.0.0+no-version-set',
+        'version' => '1.0.0.0',
+        'reference' => NULL,
+        'type' => 'library',
+        'install_path' => __DIR__ . '/../../',
+        'aliases' => array(),
+        'dev' => true,
+    ),
+    'versions' => array(
+        '__root__' => array(
+            'pretty_version' => '1.0.0+no-version-set',
+            'version' => '1.0.0.0',
+            'reference' => NULL,
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../../',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'cboden/ratchet' => array(
+            'pretty_version' => 'v0.4.4',
+            'version' => '0.4.4.0',
+            'reference' => '5012dc954541b40c5599d286fd40653f5716a38f',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../cboden/ratchet',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'evenement/evenement' => array(
+            'pretty_version' => 'v3.0.1',
+            'version' => '3.0.1.0',
+            'reference' => '531bfb9d15f8aa57454f5f0285b18bec903b8fb7',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../evenement/evenement',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'guzzlehttp/psr7' => array(
+            'pretty_version' => '2.4.3',
+            'version' => '2.4.3.0',
+            'reference' => '67c26b443f348a51926030c83481b85718457d3d',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../guzzlehttp/psr7',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'marcelog/pami' => array(
+            'pretty_version' => 'v2.0.2',
+            'version' => '2.0.2.0',
+            'reference' => 'f586d0fcbf7db7952965ccb91e4ed231bd168fb3',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../marcelog/pami',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'psr/http-factory' => array(
+            'pretty_version' => '1.0.1',
+            'version' => '1.0.1.0',
+            'reference' => '12ac7fcd07e5b077433f5f2bee95b3a771bf61be',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../psr/http-factory',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'psr/http-factory-implementation' => array(
+            'dev_requirement' => false,
+            'provided' => array(
+                0 => '1.0',
+            ),
+        ),
+        'psr/http-message' => array(
+            'pretty_version' => '1.0.1',
+            'version' => '1.0.1.0',
+            'reference' => 'f6561bf28d520154e4b0ec72be95418abe6d9363',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../psr/http-message',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'psr/http-message-implementation' => array(
+            'dev_requirement' => false,
+            'provided' => array(
+                0 => '1.0',
+            ),
+        ),
+        'psr/log' => array(
+            'pretty_version' => '3.0.0',
+            'version' => '3.0.0.0',
+            'reference' => 'fe5ea303b0887d5caefd3d431c3e61ad47037001',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../psr/log',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'ralouphie/getallheaders' => array(
+            'pretty_version' => '3.0.3',
+            'version' => '3.0.3.0',
+            'reference' => '120b605dfeb996808c31b6477290a714d356e822',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../ralouphie/getallheaders',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'ratchet/rfc6455' => array(
+            'pretty_version' => 'v0.3.1',
+            'version' => '0.3.1.0',
+            'reference' => '7c964514e93456a52a99a20fcfa0de242a43ccdb',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../ratchet/rfc6455',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/cache' => array(
+            'pretty_version' => 'v1.2.0',
+            'version' => '1.2.0.0',
+            'reference' => 'd47c472b64aa5608225f47965a484b75c7817d5b',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/cache',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/dns' => array(
+            'pretty_version' => 'v1.10.0',
+            'version' => '1.10.0.0',
+            'reference' => 'a5427e7dfa47713e438016905605819d101f238c',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/dns',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/event-loop' => array(
+            'pretty_version' => 'v1.3.0',
+            'version' => '1.3.0.0',
+            'reference' => '187fb56f46d424afb6ec4ad089269c72eec2e137',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/event-loop',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/promise' => array(
+            'pretty_version' => 'v2.9.0',
+            'version' => '2.9.0.0',
+            'reference' => '234f8fd1023c9158e2314fa9d7d0e6a83db42910',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/promise',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/promise-timer' => array(
+            'pretty_version' => 'v1.9.0',
+            'version' => '1.9.0.0',
+            'reference' => 'aa7a73c74b8d8c0f622f5982ff7b0351bc29e495',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/promise-timer',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/socket' => array(
+            'pretty_version' => 'v1.12.0',
+            'version' => '1.12.0.0',
+            'reference' => '81e1b4d7f5450ebd8d2e9a95bb008bb15ca95a7b',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/socket',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'react/stream' => array(
+            'pretty_version' => 'v1.2.0',
+            'version' => '1.2.0.0',
+            'reference' => '7a423506ee1903e89f1e08ec5f0ed430ff784ae9',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../react/stream',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'symfony/deprecation-contracts' => array(
+            'pretty_version' => 'v3.0.2',
+            'version' => '3.0.2.0',
+            'reference' => '26954b3d62a6c5fd0ea8a2a00c0353a14978d05c',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../symfony/deprecation-contracts',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'symfony/http-foundation' => array(
+            'pretty_version' => 'v6.0.17',
+            'version' => '6.0.17.0',
+            'reference' => '22fe17e40b0481d39212e7165e004eb26422085d',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../symfony/http-foundation',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'symfony/polyfill-mbstring' => array(
+            'pretty_version' => 'v1.27.0',
+            'version' => '1.27.0.0',
+            'reference' => '8ad114f6b39e2c98a8b0e3bd907732c207c2b534',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../symfony/polyfill-mbstring',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'symfony/routing' => array(
+            'pretty_version' => 'v6.0.17',
+            'version' => '6.0.17.0',
+            'reference' => '61687a0aa80f6807c52e116ee64072f6ec53780c',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../symfony/routing',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+    ),
+);

--- include/lib/Composer/vendor/composer/platform_check.php ---
@@ -0,0 +1,26 @@
+<?php
+
+// platform_check.php @generated by Composer
+
+$issues = array();
+
+if (!(PHP_VERSION_ID >= 80002)) {
+    $issues[] = 'Your Composer dependencies require a PHP version ">= 8.0.2". You are running ' . PHP_VERSION . '.';
+}
+
+if ($issues) {
+    if (!headers_sent()) {
+        header('HTTP/1.1 500 Internal Server Error');
+    }
+    if (!ini_get('display_errors')) {
+        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
+            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);
+        } elseif (!headers_sent()) {
+            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;
+        }
+    }
+    trigger_error(
+        'Composer detected issues in your platform: ' . implode(' ', $issues),
+        E_USER_ERROR
+    );
+}

--- include/lib/Composer/vendor/evenement/evenement/.gitignore ---
@@ -0,0 +1,2 @@
+composer.lock
+vendor

--- include/lib/Composer/vendor/evenement/evenement/.travis.yml ---
@@ -0,0 +1,24 @@
+language: php
+
+php:
+  - 7.0
+  - 7.1
+  - hhvm
+  - nightly
+
+matrix:
+    allow_failures:
+        - php: hhvm
+        - php: nightly
+
+before_script:
+  - wget http://getcomposer.org/composer.phar
+  - php composer.phar install
+
+script:
+  - ./vendor/bin/phpunit --coverage-text
+  - php -n examples/benchmark-emit-no-arguments.php
+  - php -n examples/benchmark-emit-one-argument.php
+  - php -n examples/benchmark-emit.php
+  - php -n examples/benchmark-emit-once.php
+  - php -n examples/benchmark-remove-listener-once.php

--- include/lib/Composer/vendor/evenement/evenement/CHANGELOG.md ---
@@ -0,0 +1,35 @@
+CHANGELOG
+=========
+
+
+* v3.0.1 (2017-07-23)
+
+  * Resolved regression introduced in once listeners in v3.0.0 [#49](https://github.com/igorw/evenement/pull/49)
+
+* v3.0.0 (2017-07-23)
+
+  * Passing null as event name throw exception [#46](https://github.com/igorw/evenement/pull/46), and [#47](https://github.com/igorw/evenement/pull/47)
+  * Performance improvements [#39](https://github.com/igorw/evenement/pull/39), and [#45](https://github.com/igorw/evenement/pull/45)
+  * Remove once listeners [#44](https://github.com/igorw/evenement/pull/44), [#45](https://github.com/igorw/evenement/pull/45)
+
+* v2.1.0 (2017-07-17)
+
+  * Chaining for "on" method [#30](https://github.com/igorw/evenement/pull/30)
+  * Unit tests (on Travis) improvements [#33](https://github.com/igorw/evenement/pull/33), [#36](https://github.com/igorw/evenement/pull/36), and [#37](https://github.com/igorw/evenement/pull/37)
+  * Benchmarks added [#35](https://github.com/igorw/evenement/pull/35), and [#40](https://github.com/igorw/evenement/pull/40)
+  * Minor performance improvements [#42](https://github.com/igorw/evenement/pull/42), and [#38](https://github.com/igorw/evenement/pull/38)
+
+* v2.0.0 (2012-11-02)
+
+  * Require PHP >=5.4.0
+  * Added EventEmitterTrait
+  * Removed EventEmitter2
+
+* v1.1.0 (2017-07-17)
+
+  * Chaining for "on" method [#29](https://github.com/igorw/evenement/pull/29)
+  * Minor performance improvements [#43](https://github.com/igorw/evenement/pull/43)
+
+* v1.0.0 (2012-05-30)
+
+  * Inital stable release

--- include/lib/Composer/vendor/evenement/evenement/LICENSE ---
@@ -0,0 +1,19 @@
+Copyright (c) 2011 Igor Wiedler
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.

--- include/lib/Composer/vendor/evenement/evenement/README.md ---
@@ -0,0 +1,83 @@
+# Événement
+
+Événement is a very simple event dispatching library for PHP.
+
+It has the same design goals as [Silex](http://silex-project.org) and
+[Pimple](http://pimple-project.org), to empower the user while staying concise
+and simple.
+
+It is very strongly inspired by the EventEmitter API found in
+[node.js](http://nodejs.org).
+
+[![Build Status](https://secure.travis-ci.org/igorw/evenement.png?branch=master)](http://travis-ci.org/igorw/evenement)
+
+## Fetch
+
+The recommended way to install Événement is [through composer](http://getcomposer.org).
+
+Just create a composer.json file for your project:
+
+```JSON
+{
+    "require": {
+        "evenement/evenement": "^3.0 || ^2.0"
+    }
+}
+```
+
+**Note:** The `3.x` version of Événement requires PHP 7 and the `2.x` version requires PHP 5.4. If you are
+using PHP 5.3, please use the `1.x` version:
+
+```JSON
+{
+    "require": {
+        "evenement/evenement": "^1.0"
+    }
+}
+```
+
+And run these two commands to install it:
+
+    $ curl -s http://getcomposer.org/installer | php
+    $ php composer.phar install
+
+Now you can add the autoloader, and you will have access to the library:
+
+```php
+<?php
+require 'vendor/autoload.php';
+```
+
+## Usage
+
+### Creating an Emitter
+
+```php
+<?php
+$emitter = new Evenement\EventEmitter();
+```
+
+### Adding Listeners
+
+```php
+<?php
+$emitter->on('user.created', function (User $user) use ($logger) {
+    $logger->log(sprintf("User '%s' was created.", $user->getLogin()));
+});
+```
+
+### Emitting Events
+
+```php
+<?php
+$emitter->emit('user.created', [$user]);
+```
+
+Tests
+-----
+
+    $ ./vendor/bin/phpunit
+
+License
+-------
+MIT, see LICENSE.

--- include/lib/Composer/vendor/evenement/evenement/composer.json ---
@@ -0,0 +1,29 @@
+{
+    "name": "evenement/evenement",
+    "description": "Événement is a very simple event dispatching library for PHP",
+    "keywords": ["event-dispatcher", "event-emitter"],
+    "license": "MIT",
+    "authors": [
+        {
+            "name": "Igor Wiedler",
+            "email": "igor@wiedler.ch"
+        }
+    ],
+    "require": {
+        "php": ">=7.0"
+    },
+    "require-dev": {
+        "phpunit/phpunit": "^6.0"
+    },
+    "autoload": {
+        "psr-0": {
+            "Evenement": "src"
+        }
+    },
+    "autoload-dev": {
+        "psr-0": {
+            "Evenement": "tests"
+        },
+        "files": ["tests/Evenement/Tests/functions.php"]
+    }
+}

--- include/lib/Composer/vendor/evenement/evenement/doc/00-intro.md ---
@@ -0,0 +1,28 @@
+# Introduction
+
+Événement is is French and means "event". The événement library aims to
+provide a simple way of subscribing to events and notifying those subscribers
+whenever an event occurs.
+
+The API that it exposes is almost a direct port of the EventEmitter API found
+in node.js. It also includes an "EventEmitter". There are some minor
+differences however.
+
+The EventEmitter is an implementation of the publish-subscribe pattern, which
+is a generalized version of the observer pattern. The observer pattern
+specifies an observable subject, which observers can register themselves to.
+Once something interesting happens, the subject notifies its observers.
+
+Pub/sub takes the same idea but encapsulates the observation logic inside a
+separate object which manages all of its subscribers or listeners. Subscribers
+are bound to an event name, and will only receive notifications of the events
+they subscribed to.
+
+**TLDR: What does evenement do, in short? It provides a mapping from event
+names to a list of listener functions and triggers each listener for a given
+event when it is emitted.**
+
+Why do we do this, you ask? To achieve decoupling.
+
+It allows you to design a system where the core will emit events, and modules
+are able to subscribe to these events. And respond to them.

--- include/lib/Composer/vendor/evenement/evenement/doc/01-api.md ---
@@ -0,0 +1,91 @@
+# API
+
+The API that événement exposes is defined by the
+`Evenement\EventEmitterInterface`. The interface is useful if you want to
+define an interface that extends the emitter and implicitly defines certain
+events to be emitted, or if you want to type hint an `EventEmitter` to be
+passed to a method without coupling to the specific implementation.
+
+## on($event, callable $listener)
+
+Allows you to subscribe to an event.
+
+Example:
+
+```php
+$emitter->on('user.created', function (User $user) use ($logger) {
+    $logger->log(sprintf("User '%s' was created.", $user->getLogin()));
+});
+```
+
+Since the listener can be any callable, you could also use an instance method
+instead of the anonymous function:
+
+```php
+$loggerSubscriber = new LoggerSubscriber($logger);
+$emitter->on('user.created', array($loggerSubscriber, 'onUserCreated'));
+```
+
+This has the benefit that listener does not even need to know that the emitter
+exists.
+
+You can also accept more than one parameter for the listener:
+
+```php
+$emitter->on('numbers_added', function ($result, $a, $b) {});
+```
+
+## once($event, callable $listener)
+
+Convenience method that adds a listener which is guaranteed to only be called
+once.
+
+Example:
+
+```php
+$conn->once('connected', function () use ($conn, $data) {
+    $conn->send($data);
+});
+```
+
+## emit($event, array $arguments = [])
+
+Emit an event, which will call all listeners.
+
+Example:
+
+```php
+$conn->emit('data', [$data]);
+```
+
+The second argument to emit is an array of listener arguments. This is how you
+specify more args:
+
+```php
+$result = $a + $b;
+$emitter->emit('numbers_added', [$result, $a, $b]);
+```
+
+## listeners($event)
+
+Allows you to inspect the listeners attached to an event. Particularly useful
+to check if there are any listeners at all.
+
+Example:
+
+```php
+$e = new \RuntimeException('Everything is broken!');
+if (0 === count($emitter->listeners('error'))) {
+    throw $e;
+}
+```
+
+## removeListener($event, callable $listener)
+
+Remove a specific listener for a specific event.
+
+## removeAllListeners($event = null)
+
+Remove all listeners for a specific event or all listeners all together. This
+is useful for long-running processes, where you want to remove listeners in
+order to allow them to get garbage collected.

--- include/lib/Composer/vendor/evenement/evenement/doc/02-plugin-system.md ---
@@ -0,0 +1,155 @@
+# Example: Plugin system
+
+In this example I will show you how to create a generic plugin system with
+événement where plugins can alter the behaviour of the app. The app is a blog.
+Boring, I know. By using the EventEmitter it will be easy to extend this blog
+with additional functionality without modifying the core system.
+
+The blog is quite basic. Users are able to create blog posts when they log in.
+The users are stored in a static config file, so there is no sign up process.
+Once logged in they get a "new post" link which gives them a form where they
+can create a new blog post with plain HTML. That will store the post in a
+document database. The index lists all blog post titles by date descending.
+Clicking on the post title will take you to the full post.
+
+## Plugin structure
+
+The goal of the plugin system is to allow features to be added to the blog
+without modifying any core files of the blog.
+
+The plugins are managed through a config file, `plugins.json`. This JSON file
+contains a JSON-encoded list of class-names for plugin classes. This allows
+you to enable and disable plugins in a central location. The initial
+`plugins.json` is just an empty array:
+```json
+[]
+```
+
+A plugin class must implement the `PluginInterface`:
+```php
+interface PluginInterface
+{
+    function attachEvents(EventEmitterInterface $emitter);
+}
+```
+
+The `attachEvents` method allows the plugin to attach any events to the
+emitter. For example:
+```php
+class FooPlugin implements PluginInterface
+{
+    public function attachEvents(EventEmitterInterface $emitter)
+    {
+        $emitter->on('foo', function () {
+            echo 'bar!';
+        });
+    }
+}
+```
+
+The blog system creates an emitter instance and loads the plugins:
+```php
+$emitter = new EventEmitter();
+
+$pluginClasses = json_decode(file_get_contents('plugins.json'), true);
+foreach ($pluginClasses as $pluginClass) {
+    $plugin = new $pluginClass();
+    $pluginClass->attachEvents($emitter);
+}
+```
+
+This is the base system. There are no plugins yet, and there are no events yet
+either. That's because I don't know which extension points will be needed. I
+will add them on demand.
+
+## Feature: Markdown
+
+Writing blog posts in HTML sucks! Wouldn't it be great if I could write them
+in a nice format such as markdown, and have that be converted to HTML for me?
+
+This feature will need two extension points. I need to be able to mark posts
+as markdown, and I need to be able to hook into the rendering of the post body
+and convert it from markdown to HTML. So the blog needs two new events:
+`post.create` and `post.render`.
+
+In the code that creates the post, I'll insert the `post.create` event:
+```php
+class PostEvent
+{
+    public $post;
+
+    public function __construct(array $post)
+    {
+        $this->post = $post;
+    }
+}
+
+$post = createPostFromRequest($_POST);
+
+$event = new PostEvent($post);
+$emitter->emit('post.create', [$event]);
+$post = $event->post;
+
+$db->save('post', $post);
+```
+
+This shows that you can wrap a value in an event object to make it mutable,
+allowing listeners to change it.
+
+The same thing for the `post.render` event:
+```php
+public function renderPostBody(array $post)
+{
+    $emitter = $this->emitter;
+
+    $event = new PostEvent($post);
+    $emitter->emit('post.render', [$event]);
+    $post = $event->post;
+
+    return $post['body'];
+}
+
+<h1><?= $post['title'] %></h1>
+<p><?= renderPostBody($post) %></p>
+```
+
+Ok, the events are in place. It's time to create the first plugin, woohoo! I
+will call this the `MarkdownPlugin`, so here's `plugins.json`:
+```json
+[
+    "MarkdownPlugin"
+]
+```
+
+The `MarkdownPlugin` class will be autoloaded, so I don't have to worry about
+including any files. I just have to worry about implementing the plugin class.
+The `markdown` function represents a markdown to HTML converter.
+```php
+class MarkdownPlugin implements PluginInterface
+{
+    public function attachEvents(EventEmitterInterface $emitter)
+    {
+        $emitter->on('post.create', function (PostEvent $event) {
+            $event->post['format'] = 'markdown';
+        });
+
+        $emitter->on('post.render', function (PostEvent $event) {
+            if (isset($event->post['format']) && 'markdown' === $event->post['format']) {
+                $event->post['body'] = markdown($event->post['body']);
+            }
+        });
+    }
+}
+```
+
+There you go, the blog now renders posts as markdown. But all of the previous
+posts before the addition of the markdown plugin are still rendered correctly
+as raw HTML.
+
+## Feature: Comments
+
+TODO
+
+## Feature: Comment spam control
+
+TODO

--- include/lib/Composer/vendor/evenement/evenement/examples/benchmark-emit-no-arguments.php ---
@@ -0,0 +1,28 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+const ITERATIONS = 10000000;
+
+use Evenement\EventEmitter;
+
+require __DIR__.'/../vendor/autoload.php';
+
+$emitter = new EventEmitter();
+
+$emitter->on('event', function () {});
+
+$start = microtime(true);
+for ($i = 0; $i < ITERATIONS; $i++) {
+    $emitter->emit('event');
+}
+$time = microtime(true) - $start;
+
+echo 'Emitting ', number_format(ITERATIONS), ' events took: ', number_format($time, 2), 's', PHP_EOL;

--- include/lib/Composer/vendor/evenement/evenement/examples/benchmark-emit-once.php ---
@@ -0,0 +1,30 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+ini_set('memory_limit', '512M');
+
+const ITERATIONS = 100000;
+
+use Evenement\EventEmitter;
+
+require __DIR__.'/../vendor/autoload.php';
+
+$emitter = new EventEmitter();
+
+for ($i = 0; $i < ITERATIONS; $i++) {
+    $emitter->once('event', function ($a, $b, $c) {});
+}
+
+$start = microtime(true);
+$emitter->emit('event', [1, 2, 3]);
+$time = microtime(true) - $start;
+
+echo 'Emitting one event to ', number_format(ITERATIONS), ' once listeners took: ', number_format($time, 2), 's', PHP_EOL;

--- include/lib/Composer/vendor/evenement/evenement/examples/benchmark-emit-one-argument.php ---
@@ -0,0 +1,28 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+const ITERATIONS = 10000000;
+
+use Evenement\EventEmitter;
+
+require __DIR__.'/../vendor/autoload.php';
+
+$emitter = new EventEmitter();
+
+$emitter->on('event', function ($a) {});
+
+$start = microtime(true);
+for ($i = 0; $i < ITERATIONS; $i++) {
+    $emitter->emit('event', [1]);
+}
+$time = microtime(true) - $start;
+
+echo 'Emitting ', number_format(ITERATIONS), ' events took: ', number_format($time, 2), 's', PHP_EOL;

--- include/lib/Composer/vendor/evenement/evenement/examples/benchmark-emit.php ---
@@ -0,0 +1,28 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+const ITERATIONS = 10000000;
+
+use Evenement\EventEmitter;
+
+require __DIR__.'/../vendor/autoload.php';
+
+$emitter = new EventEmitter();
+
+$emitter->on('event', function ($a, $b, $c) {});
+
+$start = microtime(true);
+for ($i = 0; $i < ITERATIONS; $i++) {
+    $emitter->emit('event', [1, 2, 3]);
+}
+$time = microtime(true) - $start;
+
+echo 'Emitting ', number_format(ITERATIONS), ' events took: ', number_format($time, 2), 's', PHP_EOL;

--- include/lib/Composer/vendor/evenement/evenement/examples/benchmark-remove-listener-once.php ---
@@ -0,0 +1,39 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+ini_set('memory_limit', '512M');
+
+const ITERATIONS = 100000;
+
+use Evenement\EventEmitter;
+
+require __DIR__.'/../vendor/autoload.php';
+
+$emitter = new EventEmitter();
+
+$listeners = [];
+for ($i = 0; $i < ITERATIONS; $i++) {
+    $listeners[] = function ($a, $b, $c) {};
+}
+
+$start = microtime(true);
+foreach ($listeners as $listener) {
+    $emitter->once('event', $listener);
+}
+$time = microtime(true) - $start;
+echo 'Adding ', number_format(ITERATIONS), ' once listeners took: ', number_format($time, 2), 's', PHP_EOL;
+
+$start = microtime(true);
+foreach ($listeners as $listener) {
+    $emitter->removeListener('event', $listener);
+}
+$time = microtime(true) - $start;
+echo 'Removing ', number_format(ITERATIONS), ' once listeners took: ', number_format($time, 2), 's', PHP_EOL;

--- include/lib/Composer/vendor/evenement/evenement/phpunit.xml.dist ---
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<phpunit backupGlobals="false"
+         backupStaticAttributes="false"
+         colors="true"
+         convertErrorsToExceptions="true"
+         convertNoticesToExceptions="true"
+         convertWarningsToExceptions="true"
+         processIsolation="false"
+         stopOnFailure="false"
+         syntaxCheck="false"
+>
+    <testsuites>
+        <testsuite name="Evenement Test Suite">
+            <directory>./tests/Evenement/</directory>
+        </testsuite>
+    </testsuites>
+
+    <filter>
+        <whitelist>
+            <directory>./src/</directory>
+        </whitelist>
+    </filter>
+</phpunit>

--- include/lib/Composer/vendor/evenement/evenement/src/Evenement/EventEmitter.php ---
@@ -0,0 +1,17 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Evenement;
+
+class EventEmitter implements EventEmitterInterface
+{
+    use EventEmitterTrait;
+}

--- include/lib/Composer/vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php ---
@@ -0,0 +1,22 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Evenement;
+
+interface EventEmitterInterface
+{
+    public function on($event, callable $listener);
+    public function once($event, callable $listener);
+    public function removeListener($event, callable $listener);
+    public function removeAllListeners($event = null);
+    public function listeners($event = null);
+    public function emit($event, array $arguments = []);
+}

--- include/lib/Composer/vendor/evenement/evenement/src/Evenement/EventEmitterTrait.php ---
@@ -0,0 +1,135 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Evenement;
+
+use InvalidArgumentException;
+
+trait EventEmitterTrait
+{
+    protected $listeners = [];
+    protected $onceListeners = [];
+
+    public function on($event, callable $listener)
+    {
+        if ($event === null) {
+            throw new InvalidArgumentException('event name must not be null');
+        }
+
+        if (!isset($this->listeners[$event])) {
+            $this->listeners[$event] = [];
+        }
+
+        $this->listeners[$event][] = $listener;
+
+        return $this;
+    }
+
+    public function once($event, callable $listener)
+    {
+        if ($event === null) {
+            throw new InvalidArgumentException('event name must not be null');
+        }
+
+        if (!isset($this->onceListeners[$event])) {
+            $this->onceListeners[$event] = [];
+        }
+
+        $this->onceListeners[$event][] = $listener;
+
+        return $this;
+    }
+
+    public function removeListener($event, callable $listener)
+    {
+        if ($event === null) {
+            throw new InvalidArgumentException('event name must not be null');
+        }
+
+        if (isset($this->listeners[$event])) {
+            $index = \array_search($listener, $this->listeners[$event], true);
+            if (false !== $index) {
+                unset($this->listeners[$event][$index]);
+                if (\count($this->listeners[$event]) === 0) {
+                    unset($this->listeners[$event]);
+                }
+            }
+        }
+
+        if (isset($this->onceListeners[$event])) {
+            $index = \array_search($listener, $this->onceListeners[$event], true);
+            if (false !== $index) {
+                unset($this->onceListeners[$event][$index]);
+                if (\count($this->onceListeners[$event]) === 0) {
+                    unset($this->onceListeners[$event]);
+                }
+            }
+        }
+    }
+
+    public function removeAllListeners($event = null)
+    {
+        if ($event !== null) {
+            unset($this->listeners[$event]);
+        } else {
+            $this->listeners = [];
+        }
+
+        if ($event !== null) {
+            unset($this->onceListeners[$event]);
+        } else {
+            $this->onceListeners = [];
+        }
+    }
+
+    public function listeners($event = null): array
+    {
+        if ($event === null) {
+            $events = [];
+            $eventNames = \array_unique(
+                \array_merge(\array_keys($this->listeners), \array_keys($this->onceListeners))
+            );
+            foreach ($eventNames as $eventName) {
+                $events[$eventName] = \array_merge(
+                    isset($this->listeners[$eventName]) ? $this->listeners[$eventName] : [],
+                    isset($this->onceListeners[$eventName]) ? $this->onceListeners[$eventName] : []
+                );
+            }
+            return $events;
+        }
+
+        return \array_merge(
+            isset($this->listeners[$event]) ? $this->listeners[$event] : [],
+            isset($this->onceListeners[$event]) ? $this->onceListeners[$event] : []
+        );
+    }
+
+    public function emit($event, array $arguments = [])
+    {
+        if ($event === null) {
+            throw new InvalidArgumentException('event name must not be null');
+        }
+
+        if (isset($this->listeners[$event])) {
+            foreach ($this->listeners[$event] as $listener) {
+                $listener(...$arguments);
+            }
+        }
+
+        if (isset($this->onceListeners[$event])) {
+            $listeners = $this->onceListeners[$event];
+            unset($this->onceListeners[$event]);
+            foreach ($listeners as $listener) {
+                $listener(...$arguments);
+            }
+        }
+    }
+}

--- include/lib/Composer/vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php ---
@@ -0,0 +1,438 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Evenement\Tests;
+
+use Evenement\EventEmitter;
+use InvalidArgumentException;
+use PHPUnit\Framework\TestCase;
+
+class EventEmitterTest extends TestCase
+{
+    private $emitter;
+
+    public function setUp()
+    {
+        $this->emitter = new EventEmitter();
+    }
+
+    public function testAddListenerWithLambda()
+    {
+        $this->emitter->on('foo', function () {});
+    }
+
+    public function testAddListenerWithMethod()
+    {
+        $listener = new Listener();
+        $this->emitter->on('foo', [$listener, 'onFoo']);
+    }
+
+    public function testAddListenerWithStaticMethod()
+    {
+        $this->emitter->on('bar', ['Evenement\Tests\Listener', 'onBar']);
+    }
+
+    public function testAddListenerWithInvalidListener()
+    {
+        try {
+            $this->emitter->on('foo', 'not a callable');
+            $this->fail();
+        } catch (\Exception $e) {
+        } catch (\TypeError $e) {
+        }
+    }
+
+    public function testOnce()
+    {
+        $listenerCalled = 0;
+
+        $this->emitter->once('foo', function () use (&$listenerCalled) {
+            $listenerCalled++;
+        });
+
+        $this->assertSame(0, $listenerCalled);
+
+        $this->emitter->emit('foo');
+
+        $this->assertSame(1, $listenerCalled);
+
+        $this->emitter->emit('foo');
+
+        $this->assertSame(1, $listenerCalled);
+    }
+
+    public function testOnceWithArguments()
+    {
+        $capturedArgs = [];
+
+        $this->emitter->once('foo', function ($a, $b) use (&$capturedArgs) {
+            $capturedArgs = array($a, $b);
+        });
+
+        $this->emitter->emit('foo', array('a', 'b'));
+
+        $this->assertSame(array('a', 'b'), $capturedArgs);
+    }
+
+    public function testEmitWithoutArguments()
+    {
+        $listenerCalled = false;
+
+        $this->emitter->on('foo', function () use (&$listenerCalled) {
+            $listenerCalled = true;
+        });
+
+        $this->assertSame(false, $listenerCalled);
+        $this->emitter->emit('foo');
+        $this->assertSame(true, $listenerCalled);
+    }
+
+    public function testEmitWithOneArgument()
+    {
+        $test = $this;
+
+        $listenerCalled = false;
+
+        $this->emitter->on('foo', function ($value) use (&$listenerCalled, $test) {
+            $listenerCalled = true;
+
+            $test->assertSame('bar', $value);
+        });
+
+        $this->assertSame(false, $listenerCalled);
+        $this->emitter->emit('foo', ['bar']);
+        $this->assertSame(true, $listenerCalled);
+    }
+
+    public function testEmitWithTwoArguments()
+    {
+        $test = $this;
+
+        $listenerCalled = false;
+
+        $this->emitter->on('foo', function ($arg1, $arg2) use (&$listenerCalled, $test) {
+            $listenerCalled = true;
+
+            $test->assertSame('bar', $arg1);
+            $test->assertSame('baz', $arg2);
+        });
+
+        $this->assertSame(false, $listenerCalled);
+        $this->emitter->emit('foo', ['bar', 'baz']);
+        $this->assertSame(true, $listenerCalled);
+    }
+
+    public function testEmitWithNoListeners()
+    {
+        $this->emitter->emit('foo');
+        $this->emitter->emit('foo', ['bar']);
+        $this->emitter->emit('foo', ['bar', 'baz']);
+    }
+
+    public function testEmitWithTwoListeners()
+    {
+        $listenersCalled = 0;
+
+        $this->emitter->on('foo', function () use (&$listenersCalled) {
+            $listenersCalled++;
+        });
+
+        $this->emitter->on('foo', function () use (&$listenersCalled) {
+            $listenersCalled++;
+        });
+
+        $this->assertSame(0, $listenersCalled);
+        $this->emitter->emit('foo');
+        $this->assertSame(2, $listenersCalled);
+    }
+
+    public function testRemoveListenerMatching()
+    {
+        $listenersCalled = 0;
+
+        $listener = function () use (&$listenersCalled) {
+            $listenersCalled++;
+        };
+
+        $this->emitter->on('foo', $listener);
+        $this->emitter->removeListener('foo', $listener);
+
+        $this->assertSame(0, $listenersCalled);
+        $this->emitter->emit('foo');
+        $this->assertSame(0, $listenersCalled);
+    }
+
+    public function testRemoveListenerNotMatching()
+    {
+        $listenersCalled = 0;
+
+        $listener = function () use (&$listenersCalled) {
+            $listenersCalled++;
+        };
+
+        $this->emitter->on('foo', $listener);
+        $this->emitter->removeListener('bar', $listener);
+
+        $this->assertSame(0, $listenersCalled);
+        $this->emitter->emit('foo');
+        $this->assertSame(1, $listenersCalled);
+    }
+
+    public function testRemoveAllListenersMatching()
+    {
+        $listenersCalled = 0;
+
+        $this->emitter->on('foo', function () use (&$listenersCalled) {
+            $listenersCalled++;
+        });
+
+        $this->emitter->removeAllListeners('foo');
+
+        $this->assertSame(0, $listenersCalled);
+        $this->emitter->emit('foo');
+        $this->assertSame(0, $listenersCalled);
+    }
+
+    public function testRemoveAllListenersNotMatching()
+    {
+        $listenersCalled = 0;
+
+        $this->emitter->on('foo', function () use (&$listenersCalled) {
+            $listenersCalled++;
+        });
+
+        $this->emitter->removeAllListeners('bar');
+
+        $this->assertSame(0, $listenersCalled);
+        $this->emitter->emit('foo');
+        $this->assertSame(1, $listenersCalled);
+    }
+
+    public function testRemoveAllListenersWithoutArguments()
+    {
+        $listenersCalled = 0;
+
+        $this->emitter->on('foo', function () use (&$listenersCalled) {
+            $listenersCalled++;
+        });
+
+        $this->emitter->on('bar', function () use (&$listenersCalled) {
+            $listenersCalled++;
+        });
+
+        $this->emitter->removeAllListeners();
+
+        $this->assertSame(0, $listenersCalled);
+        $this->emitter->emit('foo');
+        $this->emitter->emit('bar');
+        $this->assertSame(0, $listenersCalled);
+    }
+
+    public function testCallablesClosure()
+    {
+        $calledWith = null;
+
+        $this->emitter->on('foo', function ($data) use (&$calledWith) {
+            $calledWith = $data;
+        });
+
+        $this->emitter->emit('foo', ['bar']);
+
+        self::assertSame('bar', $calledWith);
+    }
+
+    public function testCallablesClass()
+    {
+        $listener = new Listener();
+        $this->emitter->on('foo', [$listener, 'onFoo']);
+
+        $this->emitter->emit('foo', ['bar']);
+
+        self::assertSame(['bar'], $listener->getData());
+    }
+
+
+    public function testCallablesClassInvoke()
+    {
+        $listener = new Listener();
+        $this->emitter->on('foo', $listener);
+
+        $this->emitter->emit('foo', ['bar']);
+
+        self::assertSame(['bar'], $listener->getMagicData());
+    }
+
+    public function testCallablesStaticClass()
+    {
+        $this->emitter->on('foo', '\Evenement\Tests\Listener::onBar');
+
+        $this->emitter->emit('foo', ['bar']);
+
+        self::assertSame(['bar'], Listener::getStaticData());
+    }
+
+    public function testCallablesFunction()
+    {
+        $this->emitter->on('foo', '\Evenement\Tests\setGlobalTestData');
+
+        $this->emitter->emit('foo', ['bar']);
+
+        self::assertSame('bar', $GLOBALS['evenement-evenement-test-data']);
+
+        unset($GLOBALS['evenement-evenement-test-data']);
+    }
+
+    public function testListeners()
+    {
+        $onA = function () {};
+        $onB = function () {};
+        $onC = function () {};
+        $onceA = function () {};
+        $onceB = function () {};
+        $onceC = function () {};
+
+        self::assertCount(0, $this->emitter->listeners('event'));
+        $this->emitter->on('event', $onA);
+        self::assertCount(1, $this->emitter->listeners('event'));
+        self::assertSame([$onA], $this->emitter->listeners('event'));
+        $this->emitter->once('event', $onceA);
+        self::assertCount(2, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onceA], $this->emitter->listeners('event'));
+        $this->emitter->once('event', $onceB);
+        self::assertCount(3, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onceA, $onceB], $this->emitter->listeners('event'));
+        $this->emitter->on('event', $onB);
+        self::assertCount(4, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onB, $onceA, $onceB], $this->emitter->listeners('event'));
+        $this->emitter->removeListener('event', $onceA);
+        self::assertCount(3, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onB, $onceB], $this->emitter->listeners('event'));
+        $this->emitter->once('event', $onceC);
+        self::assertCount(4, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onB, $onceB, $onceC], $this->emitter->listeners('event'));
+        $this->emitter->on('event', $onC);
+        self::assertCount(5, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onB, $onC, $onceB, $onceC], $this->emitter->listeners('event'));
+        $this->emitter->once('event', $onceA);
+        self::assertCount(6, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onB, $onC, $onceB, $onceC, $onceA], $this->emitter->listeners('event'));
+        $this->emitter->removeListener('event', $onB);
+        self::assertCount(5, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onC, $onceB, $onceC, $onceA], $this->emitter->listeners('event'));
+        $this->emitter->emit('event');
+        self::assertCount(2, $this->emitter->listeners('event'));
+        self::assertSame([$onA, $onC], $this->emitter->listeners('event'));
+    }
+
+    public function testOnceCallIsNotRemovedWhenWorkingOverOnceListeners()
+    {
+        $aCalled = false;
+        $aCallable = function () use (&$aCalled) {
+            $aCalled = true;
+        };
+        $bCalled = false;
+        $bCallable = function () use (&$bCalled, $aCallable) {
+            $bCalled = true;
+            $this->emitter->once('event', $aCallable);
+        };
+        $this->emitter->once('event', $bCallable);
+
+        self::assertFalse($aCalled);
+        self::assertFalse($bCalled);
+        $this->emitter->emit('event');
+
+        self::assertFalse($aCalled);
+        self::assertTrue($bCalled);
+        $this->emitter->emit('event');
+
+        self::assertTrue($aCalled);
+        self::assertTrue($bCalled);
+    }
+
+    public function testEventNameMustBeStringOn()
+    {
+        self::expectException(InvalidArgumentException::class);
+        self::expectExceptionMessage('event name must not be null');
+
+        $this->emitter->on(null, function () {});
+    }
+
+    public function testEventNameMustBeStringOnce()
+    {
+        self::expectException(InvalidArgumentException::class);
+        self::expectExceptionMessage('event name must not be null');
+
+        $this->emitter->once(null, function () {});
+    }
+
+    public function testEventNameMustBeStringRemoveListener()
+    {
+        self::expectException(InvalidArgumentException::class);
+        self::expectExceptionMessage('event name must not be null');
+
+        $this->emitter->removeListener(null, function () {});
+    }
+
+    public function testEventNameMustBeStringEmit()
+    {
+        self::expectException(InvalidArgumentException::class);
+        self::expectExceptionMessage('event name must not be null');
+
+        $this->emitter->emit(null);
+    }
+
+    public function testListenersGetAll()
+    {
+        $a = function () {};
+        $b = function () {};
+        $c = function () {};
+        $d = function () {};
+
+        $this->emitter->once('event2', $c);
+        $this->emitter->on('event', $a);
+        $this->emitter->once('event', $b);
+        $this->emitter->on('event', $c);
+        $this->emitter->once('event', $d);
+
+        self::assertSame(
+            [
+                'event' => [
+                    $a,
+                    $c,
+                    $b,
+                    $d,
+                ],
+                'event2' => [
+                    $c,
+                ],
+            ],
+            $this->emitter->listeners()
+        );
+    }
+
+    public function testOnceNestedCallRegression()
+    {
+        $first = 0;
+        $second = 0;
+
+        $this->emitter->once('event', function () use (&$first, &$second) {
+            $first++;
+            $this->emitter->once('event', function () use (&$second) {
+                $second++;
+            });
+            $this->emitter->emit('event');
+        });
+        $this->emitter->emit('event');
+
+        self::assertSame(1, $first);
+        self::assertSame(1, $second);
+    }
+}

--- include/lib/Composer/vendor/evenement/evenement/tests/Evenement/Tests/Listener.php ---
@@ -0,0 +1,51 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Evenement\Tests;
+
+class Listener
+{
+    private $data = [];
+
+    private $magicData = [];
+
+    private static $staticData = [];
+
+    public function onFoo($data)
+    {
+        $this->data[] = $data;
+    }
+
+    public function __invoke($data)
+    {
+        $this->magicData[] = $data;
+    }
+
+    public static function onBar($data)
+    {
+        self::$staticData[] = $data;
+    }
+
+    public function getData()
+    {
+        return $this->data;
+    }
+
+    public function getMagicData()
+    {
+        return $this->magicData;
+    }
+
+    public static function getStaticData()
+    {
+        return self::$staticData;
+    }
+}

--- include/lib/Composer/vendor/evenement/evenement/tests/Evenement/Tests/functions.php ---
@@ -0,0 +1,17 @@
+<?php declare(strict_types=1);
+
+/*
+ * This file is part of Evenement.
+ *
+ * (c) Igor Wiedler <igor@wiedler.ch>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Evenement\Tests;
+
+function setGlobalTestData($data)
+{
+    $GLOBALS['evenement-evenement-test-data'] = $data;
+}

--- include/lib/Composer/vendor/guzzlehttp/psr7/CHANGELOG.md ---
@@ -0,0 +1,396 @@
+# Change Log
+
+All notable changes to this project will be documented in this file.
+
+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
+and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
+
+## Unreleased
+
+## 2.4.3 - 2022-10-26
+
+### Changed
+
+- Replaced `sha1(uniqid())` by `bin2hex(random_bytes(20))`
+
+## 2.4.2 - 2022-10-25
+
+### Fixed
+
+- Fixed erroneous behaviour when combining host and relative path
+
+## 2.4.1 - 2022-08-28
+
+### Fixed
+
+- Rewind body before reading in `Message::bodySummary`
+
+## 2.4.0 - 2022-06-20
+
+### Added
+
+- Added provisional PHP 8.2 support
+- Added `UriComparator::isCrossOrigin` method
+
+## 2.3.0 - 2022-06-09
+
+### Fixed
+
+- Added `Header::splitList` method
+- Added `Utils::tryGetContents` method
+- Improved `Stream::getContents` method
+- Updated mimetype mappings
+
+## 2.2.2 - 2022-06-08
+
+### Fixed
+
+- Fix `Message::parseRequestUri` for numeric headers
+- Re-wrap exceptions thrown in `fread` into runtime exceptions
+- Throw an exception when multipart options is misformatted
+
+## 2.2.1 - 2022-03-20
+
+### Fixed
+
+- Correct header value validation
+
+## 2.2.0 - 2022-03-20
+
+### Added
+
+- A more compressive list of mime types
+- Add JsonSerializable to Uri
+- Missing return types
+
+### Fixed
+
+- Bug MultipartStream no `uri` metadata
+- Bug MultipartStream with filename for `data://` streams
+- Fixed new line handling in MultipartStream
+- Reduced RAM usage when copying streams
+- Updated parsing in `Header::normalize()`
+
+## 2.1.1 - 2022-03-20
+
+### Fixed
+
+- Validate header values properly
+
+## 2.1.0 - 2021-10-06
+
+### Changed
+
+- Attempting to create a `Uri` object from a malformed URI will no longer throw a generic
+  `InvalidArgumentException`, but rather a `MalformedUriException`, which inherits from the former
+  for backwards compatibility. Callers relying on the exception being thrown to detect invalid
+  URIs should catch the new exception.
+
+### Fixed
+
+- Return `null` in caching stream size if remote size is `null`
+
+## 2.0.0 - 2021-06-30
+
+Identical to the RC release.
+
+## 2.0.0@RC-1 - 2021-04-29
+
+### Fixed
+
+- Handle possibly unset `url` in `stream_get_meta_data`
+
+## 2.0.0@beta-1 - 2021-03-21
+
+### Added
+
+- PSR-17 factories
+- Made classes final
+- PHP7 type hints
+
+### Changed
+
+- When building a query string, booleans are represented as 1 and 0.
+
+### Removed
+
+- PHP < 7.2 support
+- All functions in the `GuzzleHttp\Psr7` namespace
+
+## 1.8.1 - 2021-03-21
+
+### Fixed
+
+- Issue parsing IPv6 URLs
+- Issue modifying ServerRequest lost all its attributes
+
+## 1.8.0 - 2021-03-21
+
+### Added
+
+- Locale independent URL parsing
+- Most classes got a `@final` annotation to prepare for 2.0
+
+### Fixed
+
+- Issue when creating stream from `php://input` and curl-ext is not installed
+- Broken `Utils::tryFopen()` on PHP 8
+
+## 1.7.0 - 2020-09-30
+
+### Added
+
+- Replaced functions by static methods
+
+### Fixed
+
+- Converting a non-seekable stream to a string
+- Handle multiple Set-Cookie correctly
+- Ignore array keys in header values when merging
+- Allow multibyte characters to be parsed in `Message:bodySummary()`
+
+### Changed
+
+- Restored partial HHVM 3 support
+
+
+## [1.6.1] - 2019-07-02
+
+### Fixed
+
+- Accept null and bool header values again
+
+
+## [1.6.0] - 2019-06-30
+
+### Added
+
+- Allowed version `^3.0` of `ralouphie/getallheaders` dependency (#244)
+- Added MIME type for WEBP image format (#246)
+- Added more validation of values according to PSR-7 and RFC standards, e.g. status code range (#250, #272)
+
+### Changed
+
+- Tests don't pass with HHVM 4.0, so HHVM support got dropped. Other libraries like composer have done the same. (#262)
+- Accept port number 0 to be valid (#270)
+
+### Fixed
+
+- Fixed subsequent reads from `php://input` in ServerRequest (#247)
+- Fixed readable/writable detection for certain stream modes (#248)
+- Fixed encoding of special characters in the `userInfo` component of an URI (#253)
+
+
+## [1.5.2] - 2018-12-04
+
+### Fixed
+
+- Check body size when getting the message summary
+
+
+## [1.5.1] - 2018-12-04
+
+### Fixed
+
+- Get the summary of a body only if it is readable
+
+
+## [1.5.0] - 2018-12-03
+
+### Added
+
+- Response first-line to response string exception (fixes #145)
+- A test for #129 behavior
+- `get_message_body_summary` function in order to get the message summary
+- `3gp` and `mkv` mime types
+
+### Changed
+
+- Clarify exception message when stream is detached
+
+### Deprecated
+
+- Deprecated parsing folded header lines as per RFC 7230
+
+### Fixed
+
+- Fix `AppendStream::detach` to not close streams
+- `InflateStream` preserves `isSeekable` attribute of the underlying stream
+- `ServerRequest::getUriFromGlobals` to support URLs in query parameters
+
+
+Several other fixes and improvements.
+
+
+## [1.4.2] - 2017-03-20
+
+### Fixed
+
+- Reverted BC break to `Uri::resolve` and `Uri::removeDotSegments` by removing
+  calls to `trigger_error` when deprecated methods are invoked.
+
+
+## [1.4.1] - 2017-02-27
+
+### Added
+
+- Rriggering of silenced deprecation warnings.
+
+### Fixed
+
+- Reverted BC break by reintroducing behavior to automagically fix a URI with a
+  relative path and an authority by adding a leading slash to the path. It's only
+  deprecated now.
+
+
+## [1.4.0] - 2017-02-21
+
+### Added
+
+- Added common URI utility methods based on RFC 3986 (see documentation in the readme):
+  - `Uri::isDefaultPort`
+  - `Uri::isAbsolute`
+  - `Uri::isNetworkPathReference`
+  - `Uri::isAbsolutePathReference`
+  - `Uri::isRelativePathReference`
+  - `Uri::isSameDocumentReference`
+  - `Uri::composeComponents`
+  - `UriNormalizer::normalize`
+  - `UriNormalizer::isEquivalent`
+  - `UriResolver::relativize`
+
+### Changed
+
+- Ensure `ServerRequest::getUriFromGlobals` returns a URI in absolute form.
+- Allow `parse_response` to parse a response without delimiting space and reason.
+- Ensure each URI modification results in a valid URI according to PSR-7 discussions.
+  Invalid modifications will throw an exception instead of returning a wrong URI or
+  doing some magic.
+  - `(new Uri)->withPath('foo')->withHost('example.com')` will throw an exception
+    because the path of a URI with an authority must start with a slash "/" or be empty
+  - `(new Uri())->withScheme('http')` will return `'http://localhost'`
+
+### Deprecated
+
+- `Uri::resolve` in favor of `UriResolver::resolve`
+- `Uri::removeDotSegments` in favor of `UriResolver::removeDotSegments`
+
+### Fixed
+
+- `Stream::read` when length parameter <= 0.
+- `copy_to_stream` reads bytes in chunks instead of `maxLen` into memory.
+- `ServerRequest::getUriFromGlobals` when `Host` header contains port.
+- Compatibility of URIs with `file` scheme and empty host.
+
+
+## [1.3.1] - 2016-06-25
+
+### Fixed
+
+- `Uri::__toString` for network path references, e.g. `//example.org`.
+- Missing lowercase normalization for host.
+- Handling of URI components in case they are `'0'` in a lot of places,
+  e.g. as a user info password.
+- `Uri::withAddedHeader` to correctly merge headers with different case.
+- Trimming of header values in `Uri::withAddedHeader`. Header values may
+  be surrounded by whitespace which should be ignored according to RFC 7230
+  Section 3.2.4. This does not apply to header names.
+- `Uri::withAddedHeader` with an array of header values.
+- `Uri::resolve` when base path has no slash and handling of fragment.
+- Handling of encoding in `Uri::with(out)QueryValue` so one can pass the
+  key/value both in encoded as well as decoded form to those methods. This is
+  consistent with withPath, withQuery etc.
+- `ServerRequest::withoutAttribute` when attribute value is null.
+
+
+## [1.3.0] - 2016-04-13
+
+### Added
+
+- Remaining interfaces needed for full PSR7 compatibility
+  (ServerRequestInterface, UploadedFileInterface, etc.).
+- Support for stream_for from scalars.
+
+### Changed
+
+- Can now extend Uri.
+
+### Fixed
+- A bug in validating request methods by making it more permissive.
+
+
+## [1.2.3] - 2016-02-18
+
+### Fixed
+
+- Support in `GuzzleHttp\Psr7\CachingStream` for seeking forward on remote
+  streams, which can sometimes return fewer bytes than requested with `fread`.
+- Handling of gzipped responses with FNAME headers.
+
+
+## [1.2.2] - 2016-01-22
+
+### Added
+
+- Support for URIs without any authority.
+- Support for HTTP 451 'Unavailable For Legal Reasons.'
+- Support for using '0' as a filename.
+- Support for including non-standard ports in Host headers.
+
+
+## [1.2.1] - 2015-11-02
+
+### Changes
+
+- Now supporting negative offsets when seeking to SEEK_END.
+
+
+## [1.2.0] - 2015-08-15
+
+### Changed
+
+- Body as `"0"` is now properly added to a response.
+- Now allowing forward seeking in CachingStream.
+- Now properly parsing HTTP requests that contain proxy targets in
+  `parse_request`.
+- functions.php is now conditionally required.
+- user-info is no longer dropped when resolving URIs.
+
+
+## [1.1.0] - 2015-06-24
+
+### Changed
+
+- URIs can now be relative.
+- `multipart/form-data` headers are now overridden case-insensitively.
+- URI paths no longer encode the following characters because they are allowed
+  in URIs: "(", ")", "*", "!", "'"
+- A port is no longer added to a URI when the scheme is missing and no port is
+  present.
+
+
+## 1.0.0 - 2015-05-19
+
+Initial release.
+
+Currently unsupported:
+
+- `Psr\Http\Message\ServerRequestInterface`
+- `Psr\Http\Message\UploadedFileInterface`
+
+
+
+[1.6.0]: https://github.com/guzzle/psr7/compare/1.5.2...1.6.0
+[1.5.2]: https://github.com/guzzle/psr7/compare/1.5.1...1.5.2
+[1.5.1]: https://github.com/guzzle/psr7/compare/1.5.0...1.5.1
+[1.5.0]: https://github.com/guzzle/psr7/compare/1.4.2...1.5.0
+[1.4.2]: https://github.com/guzzle/psr7/compare/1.4.1...1.4.2
+[1.4.1]: https://github.com/guzzle/psr7/compare/1.4.0...1.4.1
+[1.4.0]: https://github.com/guzzle/psr7/compare/1.3.1...1.4.0
+[1.3.1]: https://github.com/guzzle/psr7/compare/1.3.0...1.3.1
+[1.3.0]: https://github.com/guzzle/psr7/compare/1.2.3...1.3.0
+[1.2.3]: https://github.com/guzzle/psr7/compare/1.2.2...1.2.3
+[1.2.2]: https://github.com/guzzle/psr7/compare/1.2.1...1.2.2
+[1.2.1]: https://github.com/guzzle/psr7/compare/1.2.0...1.2.1
+[1.2.0]: https://github.com/guzzle/psr7/compare/1.1.0...1.2.0
+[1.1.0]: https://github.com/guzzle/psr7/compare/1.0.0...1.1.0

--- include/lib/Composer/vendor/guzzlehttp/psr7/LICENSE ---
@@ -0,0 +1,26 @@
+The MIT License (MIT)
+
+Copyright (c) 2015 Michael Dowling <mtdowling@gmail.com>
+Copyright (c) 2015 Márk Sági-Kazár <mark.sagikazar@gmail.com>
+Copyright (c) 2015 Graham Campbell <hello@gjcampbell.co.uk>
+Copyright (c) 2016 Tobias Schultze <webmaster@tubo-world.de>
+Copyright (c) 2016 George Mponos <gmponos@gmail.com>
+Copyright (c) 2018 Tobias Nyholm <tobias.nyholm@gmail.com>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.

--- include/lib/Composer/vendor/guzzlehttp/psr7/README.md ---
@@ -0,0 +1,872 @@
+# PSR-7 Message Implementation
+
+This repository contains a full [PSR-7](https://www.php-fig.org/psr/psr-7/)
+message implementation, several stream decorators, and some helpful
+functionality like query string parsing.
+
+![CI](https://github.com/guzzle/psr7/workflows/CI/badge.svg)
+![Static analysis](https://github.com/guzzle/psr7/workflows/Static%20analysis/badge.svg)
+
+
+# Stream implementation
+
+This package comes with a number of stream implementations and stream
+decorators.
+
+
+## AppendStream
+
+`GuzzleHttp\Psr7\AppendStream`
+
+Reads from multiple streams, one after the other.
+
+```php
+use GuzzleHttp\Psr7;
+
+$a = Psr7\Utils::streamFor('abc, ');
+$b = Psr7\Utils::streamFor('123.');
+$composed = new Psr7\AppendStream([$a, $b]);
+
+$composed->addStream(Psr7\Utils::streamFor(' Above all listen to me'));
+
+echo $composed; // abc, 123. Above all listen to me.
+```
+
+
+## BufferStream
+
+`GuzzleHttp\Psr7\BufferStream`
+
+Provides a buffer stream that can be written to fill a buffer, and read
+from to remove bytes from the buffer.
+
+This stream returns a "hwm" metadata value that tells upstream consumers
+what the configured high water mark of the stream is, or the maximum
+preferred size of the buffer.
+
+```php
+use GuzzleHttp\Psr7;
+
+// When more than 1024 bytes are in the buffer, it will begin returning
+// false to writes. This is an indication that writers should slow down.
+$buffer = new Psr7\BufferStream(1024);
+```
+
+
+## CachingStream
+
+The CachingStream is used to allow seeking over previously read bytes on
+non-seekable streams. This can be useful when transferring a non-seekable
+entity body fails due to needing to rewind the stream (for example, resulting
+from a redirect). Data that is read from the remote stream will be buffered in
+a PHP temp stream so that previously read bytes are cached first in memory,
+then on disk.
+
+```php
+use GuzzleHttp\Psr7;
+
+$original = Psr7\Utils::streamFor(fopen('http://www.google.com', 'r'));
+$stream = new Psr7\CachingStream($original);
+
+$stream->read(1024);
+echo $stream->tell();
+// 1024
+
+$stream->seek(0);
+echo $stream->tell();
+// 0
+```
+
+
+## DroppingStream
+
+`GuzzleHttp\Psr7\DroppingStream`
+
+Stream decorator that begins dropping data once the size of the underlying
+stream becomes too full.
+
+```php
+use GuzzleHttp\Psr7;
+
+// Create an empty stream
+$stream = Psr7\Utils::streamFor();
+
+// Start dropping data when the stream has more than 10 bytes
+$dropping = new Psr7\DroppingStream($stream, 10);
+
+$dropping->write('01234567890123456789');
+echo $stream; // 0123456789
+```
+
+
+## FnStream
+
+`GuzzleHttp\Psr7\FnStream`
+
+Compose stream implementations based on a hash of functions.
+
+Allows for easy testing and extension of a provided stream without needing
+to create a concrete class for a simple extension point.
+
+```php
+
+use GuzzleHttp\Psr7;
+
+$stream = Psr7\Utils::streamFor('hi');
+$fnStream = Psr7\FnStream::decorate($stream, [
+    'rewind' => function () use ($stream) {
+        echo 'About to rewind - ';
+        $stream->rewind();
+        echo 'rewound!';
+    }
+]);
+
+$fnStream->rewind();
+// Outputs: About to rewind - rewound!
+```
+
+
+## InflateStream
+
+`GuzzleHttp\Psr7\InflateStream`
+
+Uses PHP's zlib.inflate filter to inflate zlib (HTTP deflate, RFC1950) or gzipped (RFC1952) content.
+
+This stream decorator converts the provided stream to a PHP stream resource,
+then appends the zlib.inflate filter. The stream is then converted back
+to a Guzzle stream resource to be used as a Guzzle stream.
+
+
+## LazyOpenStream
+
+`GuzzleHttp\Psr7\LazyOpenStream`
+
+Lazily reads or writes to a file that is opened only after an IO operation
+take place on the stream.
+
+```php
+use GuzzleHttp\Psr7;
+
+$stream = new Psr7\LazyOpenStream('/path/to/file', 'r');
+// The file has not yet been opened...
+
+echo $stream->read(10);
+// The file is opened and read from only when needed.
+```
+
+
+## LimitStream
+
+`GuzzleHttp\Psr7\LimitStream`
+
+LimitStream can be used to read a subset or slice of an existing stream object.
+This can be useful for breaking a large file into smaller pieces to be sent in
+chunks (e.g. Amazon S3's multipart upload API).
+
+```php
+use GuzzleHttp\Psr7;
+
+$original = Psr7\Utils::streamFor(fopen('/tmp/test.txt', 'r+'));
+echo $original->getSize();
+// >>> 1048576
+
+// Limit the size of the body to 1024 bytes and start reading from byte 2048
+$stream = new Psr7\LimitStream($original, 1024, 2048);
+echo $stream->getSize();
+// >>> 1024
+echo $stream->tell();
+// >>> 0
+```
+
+
+## MultipartStream
+
+`GuzzleHttp\Psr7\MultipartStream`
+
+Stream that when read returns bytes for a streaming multipart or
+multipart/form-data stream.
+
+
+## NoSeekStream
+
+`GuzzleHttp\Psr7\NoSeekStream`
+
+NoSeekStream wraps a stream and does not allow seeking.
+
+```php
+use GuzzleHttp\Psr7;
+
+$original = Psr7\Utils::streamFor('foo');
+$noSeek = new Psr7\NoSeekStream($original);
+
+echo $noSeek->read(3);
+// foo
+var_export($noSeek->isSeekable());
+// false
+$noSeek->seek(0);
+var_export($noSeek->read(3));
+// NULL
+```
+
+
+## PumpStream
+
+`GuzzleHttp\Psr7\PumpStream`
+
+Provides a read only stream that pumps data from a PHP callable.
+
+When invoking the provided callable, the PumpStream will pass the amount of
+data requested to read to the callable. The callable can choose to ignore
+this value and return fewer or more bytes than requested. Any extra data
+returned by the provided callable is buffered internally until drained using
+the read() function of the PumpStream. The provided callable MUST return
+false when there is no more data to read.
+
+
+## Implementing stream decorators
+
+Creating a stream decorator is very easy thanks to the
+`GuzzleHttp\Psr7\StreamDecoratorTrait`. This trait provides methods that
+implement `Psr\Http\Message\StreamInterface` by proxying to an underlying
+stream. Just `use` the `StreamDecoratorTrait` and implement your custom
+methods.
+
+For example, let's say we wanted to call a specific function each time the last
+byte is read from a stream. This could be implemented by overriding the
+`read()` method.
+
+```php
+use Psr\Http\Message\StreamInterface;
+use GuzzleHttp\Psr7\StreamDecoratorTrait;
+
+class EofCallbackStream implements StreamInterface
+{
+    use StreamDecoratorTrait;
+
+    private $callback;
+
+    public function __construct(StreamInterface $stream, callable $cb)
+    {
+        $this->stream = $stream;
+        $this->callback = $cb;
+    }
+
+    public function read($length)
+    {
+        $result = $this->stream->read($length);
+
+        // Invoke the callback when EOF is hit.
+        if ($this->eof()) {
+            call_user_func($this->callback);
+        }
+
+        return $result;
+    }
+}
+```
+
+This decorator could be added to any existing stream and used like so:
+
+```php
+use GuzzleHttp\Psr7;
+
+$original = Psr7\Utils::streamFor('foo');
+
+$eofStream = new EofCallbackStream($original, function () {
+    echo 'EOF!';
+});
+
+$eofStream->read(2);
+$eofStream->read(1);
+// echoes "EOF!"
+$eofStream->seek(0);
+$eofStream->read(3);
+// echoes "EOF!"
+```
+
+
+## PHP StreamWrapper
+
+You can use the `GuzzleHttp\Psr7\StreamWrapper` class if you need to use a
+PSR-7 stream as a PHP stream resource.
+
+Use the `GuzzleHttp\Psr7\StreamWrapper::getResource()` method to create a PHP
+stream from a PSR-7 stream.
+
+```php
+use GuzzleHttp\Psr7\StreamWrapper;
+
+$stream = GuzzleHttp\Psr7\Utils::streamFor('hello!');
+$resource = StreamWrapper::getResource($stream);
+echo fread($resource, 6); // outputs hello!
+```
+
+
+# Static API
+
+There are various static methods available under the `GuzzleHttp\Psr7` namespace.
+
+
+## `GuzzleHttp\Psr7\Message::toString`
+
+`public static function toString(MessageInterface $message): string`
+
+Returns the string representation of an HTTP message.
+
+```php
+$request = new GuzzleHttp\Psr7\Request('GET', 'http://example.com');
+echo GuzzleHttp\Psr7\Message::toString($request);
+```
+
+
+## `GuzzleHttp\Psr7\Message::bodySummary`
+
+`public static function bodySummary(MessageInterface $message, int $truncateAt = 120): string|null`
+
+Get a short summary of the message body.
+
+Will return `null` if the response is not printable.
+
+
+## `GuzzleHttp\Psr7\Message::rewindBody`
+
+`public static function rewindBody(MessageInterface $message): void`
+
+Attempts to rewind a message body and throws an exception on failure.
+
+The body of the message will only be rewound if a call to `tell()`
+returns a value other than `0`.
+
+
+## `GuzzleHttp\Psr7\Message::parseMessage`
+
+`public static function parseMessage(string $message): array`
+
+Parses an HTTP message into an associative array.
+
+The array contains the "start-line" key containing the start line of
+the message, "headers" key containing an associative array of header
+array values, and a "body" key containing the body of the message.
+
+
+## `GuzzleHttp\Psr7\Message::parseRequestUri`
+
+`public static function parseRequestUri(string $path, array $headers): string`
+
+Constructs a URI for an HTTP request message.
+
+
+## `GuzzleHttp\Psr7\Message::parseRequest`
+
+`public static function parseRequest(string $message): Request`
+
+Parses a request message string into a request object.
+
+
+## `GuzzleHttp\Psr7\Message::parseResponse`
+
+`public static function parseResponse(string $message): Response`
+
+Parses a response message string into a response object.
+
+
+## `GuzzleHttp\Psr7\Header::parse`
+
+`public static function parse(string|array $header): array`
+
+Parse an array of header values containing ";" separated data into an
+array of associative arrays representing the header key value pair data
+of the header. When a parameter does not contain a value, but just
+contains a key, this function will inject a key with a '' string value.
+
+
+## `GuzzleHttp\Psr7\Header::splitList`
+
+`public static function splitList(string|string[] $header): string[]`
+
+Splits a HTTP header defined to contain a comma-separated list into
+each individual value:
+
+```
+$knownEtags = Header::splitList($request->getHeader('if-none-match'));
+```
+
+Example headers include `accept`, `cache-control` and `if-none-match`.
+
+
+## `GuzzleHttp\Psr7\Header::normalize` (deprecated)
+
+`public static function normalize(string|array $header): array`
+
+`Header::normalize()` is deprecated in favor of [`Header::splitList()`](README.md#guzzlehttppsr7headersplitlist)
+which performs the same operation with a cleaned up API and improved
+documentation.
+
+Converts an array of header values that may contain comma separated
+headers into an array of headers with no comma separated values.
+
+
+## `GuzzleHttp\Psr7\Query::parse`
+
+`public static function parse(string $str, int|bool $urlEncoding = true): array`
+
+Parse a query string into an associative array.
+
+If multiple values are found for the same key, the value of that key
+value pair will become an array. This function does not parse nested
+PHP style arrays into an associative array (e.g., `foo[a]=1&foo[b]=2`
+will be parsed into `['foo[a]' => '1', 'foo[b]' => '2'])`.
+
+
+## `GuzzleHttp\Psr7\Query::build`
+
+`public static function build(array $params, int|false $encoding = PHP_QUERY_RFC3986): string`
+
+Build a query string from an array of key value pairs.
+
+This function can use the return value of `parse()` to build a query
+string. This function does not modify the provided keys when an array is
+encountered (like `http_build_query()` would).
+
+
+## `GuzzleHttp\Psr7\Utils::caselessRemove`
+
+`public static function caselessRemove(iterable<string> $keys, $keys, array $data): array`
+
+Remove the items given by the keys, case insensitively from the data.
+
+
+## `GuzzleHttp\Psr7\Utils::copyToStream`
+
+`public static function copyToStream(StreamInterface $source, StreamInterface $dest, int $maxLen = -1): void`
+
+Copy the contents of a stream into another stream until the given number
+of bytes have been read.
+
+
+## `GuzzleHttp\Psr7\Utils::copyToString`
+
+`public static function copyToString(StreamInterface $stream, int $maxLen = -1): string`
+
+Copy the contents of a stream into a string until the given number of
+bytes have been read.
+
+
+## `GuzzleHttp\Psr7\Utils::hash`
+
+`public static function hash(StreamInterface $stream, string $algo, bool $rawOutput = false): string`
+
+Calculate a hash of a stream.
+
+This method reads the entire stream to calculate a rolling hash, based on
+PHP's `hash_init` functions.
+
+
+## `GuzzleHttp\Psr7\Utils::modifyRequest`
+
+`public static function modifyRequest(RequestInterface $request, array $changes): RequestInterface`
+
+Clone and modify a request with the given changes.
+
+This method is useful for reducing the number of clones needed to mutate
+a message.
+
+- method: (string) Changes the HTTP method.
+- set_headers: (array) Sets the given headers.
+- remove_headers: (array) Remove the given headers.
+- body: (mixed) Sets the given body.
+- uri: (UriInterface) Set the URI.
+- query: (string) Set the query string value of the URI.
+- version: (string) Set the protocol version.
+
+
+## `GuzzleHttp\Psr7\Utils::readLine`
+
+`public static function readLine(StreamInterface $stream, int $maxLength = null): string`
+
+Read a line from the stream up to the maximum allowed buffer length.
+
+
+## `GuzzleHttp\Psr7\Utils::streamFor`
+
+`public static function streamFor(resource|string|null|int|float|bool|StreamInterface|callable|\Iterator $resource = '', array $options = []): StreamInterface`
+
+Create a new stream based on the input type.
+
+Options is an associative array that can contain the following keys:
+
+- metadata: Array of custom metadata.
+- size: Size of the stream.
+
+This method accepts the following `$resource` types:
+
+- `Psr\Http\Message\StreamInterface`: Returns the value as-is.
+- `string`: Creates a stream object that uses the given string as the contents.
+- `resource`: Creates a stream object that wraps the given PHP stream resource.
+- `Iterator`: If the provided value implements `Iterator`, then a read-only
+  stream object will be created that wraps the given iterable. Each time the
+  stream is read from, data from the iterator will fill a buffer and will be
+  continuously called until the buffer is equal to the requested read size.
+  Subsequent read calls will first read from the buffer and then call `next`
+  on the underlying iterator until it is exhausted.
+- `object` with `__toString()`: If the object has the `__toString()` method,
+  the object will be cast to a string and then a stream will be returned that
+  uses the string value.
+- `NULL`: When `null` is passed, an empty stream object is returned.
+- `callable` When a callable is passed, a read-only stream object will be
+  created that invokes the given callable. The callable is invoked with the
+  number of suggested bytes to read. The callable can return any number of
+  bytes, but MUST return `false` when there is no more data to return. The
+  stream object that wraps the callable will invoke the callable until the
+  number of requested bytes are available. Any additional bytes will be
+  buffered and used in subsequent reads.
+
+```php
+$stream = GuzzleHttp\Psr7\Utils::streamFor('foo');
+$stream = GuzzleHttp\Psr7\Utils::streamFor(fopen('/path/to/file', 'r'));
+
+$generator = function ($bytes) {
+    for ($i = 0; $i < $bytes; $i++) {
+        yield ' ';
+    }
+}
+
+$stream = GuzzleHttp\Psr7\Utils::streamFor($generator(100));
+```
+
+
+## `GuzzleHttp\Psr7\Utils::tryFopen`
+
+`public static function tryFopen(string $filename, string $mode): resource`
+
+Safely opens a PHP stream resource using a filename.
+
+When fopen fails, PHP normally raises a warning. This function adds an
+error handler that checks for errors and throws an exception instead.
+
+
+## `GuzzleHttp\Psr7\Utils::tryGetContents`
+
+`public static function tryGetContents(resource $stream): string`
+
+Safely gets the contents of a given stream.
+
+When stream_get_contents fails, PHP normally raises a warning. This
+function adds an error handler that checks for errors and throws an
+exception instead.
+
+
+## `GuzzleHttp\Psr7\Utils::uriFor`
+
+`public static function uriFor(string|UriInterface $uri): UriInterface`
+
+Returns a UriInterface for the given value.
+
+This function accepts a string or UriInterface and returns a
+UriInterface for the given value. If the value is already a
+UriInterface, it is returned as-is.
+
+
+## `GuzzleHttp\Psr7\MimeType::fromFilename`
+
+`public static function fromFilename(string $filename): string|null`
+
+Determines the mimetype of a file by looking at its extension.
+
+
+## `GuzzleHttp\Psr7\MimeType::fromExtension`
+
+`public static function fromExtension(string $extension): string|null`
+
+Maps a file extensions to a mimetype.
+
+
+## Upgrading from Function API
+
+The static API was first introduced in 1.7.0, in order to mitigate problems with functions conflicting between global and local copies of the package. The function API was removed in 2.0.0. A migration table has been provided here for your convenience:
+
+| Original Function | Replacement Method |
+|----------------|----------------|
+| `str` | `Message::toString` |
+| `uri_for` | `Utils::uriFor` |
+| `stream_for` | `Utils::streamFor` |
+| `parse_header` | `Header::parse` |
+| `normalize_header` | `Header::normalize` |
+| `modify_request` | `Utils::modifyRequest` |
+| `rewind_body` | `Message::rewindBody` |
+| `try_fopen` | `Utils::tryFopen` |
+| `copy_to_string` | `Utils::copyToString` |
+| `copy_to_stream` | `Utils::copyToStream` |
+| `hash` | `Utils::hash` |
+| `readline` | `Utils::readLine` |
+| `parse_request` | `Message::parseRequest` |
+| `parse_response` | `Message::parseResponse` |
+| `parse_query` | `Query::parse` |
+| `build_query` | `Query::build` |
+| `mimetype_from_filename` | `MimeType::fromFilename` |
+| `mimetype_from_extension` | `MimeType::fromExtension` |
+| `_parse_message` | `Message::parseMessage` |
+| `_parse_request_uri` | `Message::parseRequestUri` |
+| `get_message_body_summary` | `Message::bodySummary` |
+| `_caseless_remove` | `Utils::caselessRemove` |
+
+
+# Additional URI Methods
+
+Aside from the standard `Psr\Http\Message\UriInterface` implementation in form of the `GuzzleHttp\Psr7\Uri` class,
+this library also provides additional functionality when working with URIs as static methods.
+
+## URI Types
+
+An instance of `Psr\Http\Message\UriInterface` can either be an absolute URI or a relative reference.
+An absolute URI has a scheme. A relative reference is used to express a URI relative to another URI,
+the base URI. Relative references can be divided into several forms according to
+[RFC 3986 Section 4.2](https://tools.ietf.org/html/rfc3986#section-4.2):
+
+- network-path references, e.g. `//example.com/path`
+- absolute-path references, e.g. `/path`
+- relative-path references, e.g. `subpath`
+
+The following methods can be used to identify the type of the URI.
+
+### `GuzzleHttp\Psr7\Uri::isAbsolute`
+
+`public static function isAbsolute(UriInterface $uri): bool`
+
+Whether the URI is absolute, i.e. it has a scheme.
+
+### `GuzzleHttp\Psr7\Uri::isNetworkPathReference`
+
+`public static function isNetworkPathReference(UriInterface $uri): bool`
+
+Whether the URI is a network-path reference. A relative reference that begins with two slash characters is
+termed an network-path reference.
+
+### `GuzzleHttp\Psr7\Uri::isAbsolutePathReference`
+
+`public static function isAbsolutePathReference(UriInterface $uri): bool`
+
+Whether the URI is a absolute-path reference. A relative reference that begins with a single slash character is
+termed an absolute-path reference.
+
+### `GuzzleHttp\Psr7\Uri::isRelativePathReference`
+
+`public static function isRelativePathReference(UriInterface $uri): bool`
+
+Whether the URI is a relative-path reference. A relative reference that does not begin with a slash character is
+termed a relative-path reference.
+
+### `GuzzleHttp\Psr7\Uri::isSameDocumentReference`
+
+`public static function isSameDocumentReference(UriInterface $uri, UriInterface $base = null): bool`
+
+Whether the URI is a same-document reference. A same-document reference refers to a URI that is, aside from its
+fragment component, identical to the base URI. When no base URI is given, only an empty URI reference
+(apart from its fragment) is considered a same-document reference.
+
+## URI Components
+
+Additional methods to work with URI components.
+
+### `GuzzleHttp\Psr7\Uri::isDefaultPort`
+
+`public static function isDefaultPort(UriInterface $uri): bool`
+
+Whether the URI has the default port of the current scheme. `Psr\Http\Message\UriInterface::getPort` may return null
+or the standard port. This method can be used independently of the implementation.
+
+### `GuzzleHttp\Psr7\Uri::composeComponents`
+
+`public static function composeComponents($scheme, $authority, $path, $query, $fragment): string`
+
+Composes a URI reference string from its various components according to
+[RFC 3986 Section 5.3](https://tools.ietf.org/html/rfc3986#section-5.3). Usually this method does not need to be called
+manually but instead is used indirectly via `Psr\Http\Message\UriInterface::__toString`.
+
+### `GuzzleHttp\Psr7\Uri::fromParts`
+
+`public static function fromParts(array $parts): UriInterface`
+
+Creates a URI from a hash of [`parse_url`](https://www.php.net/manual/en/function.parse-url.php) components.
+
+
+### `GuzzleHttp\Psr7\Uri::withQueryValue`
+
+`public static function withQueryValue(UriInterface $uri, $key, $value): UriInterface`
+
+Creates a new URI with a specific query string value. Any existing query string values that exactly match the
+provided key are removed and replaced with the given key value pair. A value of null will set the query string
+key without a value, e.g. "key" instead of "key=value".
+
+### `GuzzleHttp\Psr7\Uri::withQueryValues`
+
+`public static function withQueryValues(UriInterface $uri, array $keyValueArray): UriInterface`
+
+Creates a new URI with multiple query string values. It has the same behavior as `withQueryValue()` but for an
+associative array of key => value.
+
+### `GuzzleHttp\Psr7\Uri::withoutQueryValue`
+
+`public static function withoutQueryValue(UriInterface $uri, $key): UriInterface`
+
+Creates a new URI with a specific query string value removed. Any existing query string values that exactly match the
+provided key are removed.
+
+## Cross-Origin Detection
+
+`GuzzleHttp\Psr7\UriComparator` provides methods to determine if a modified URL should be considered cross-origin.
+
+### `GuzzleHttp\Psr7\UriComparator::isCrossOrigin`
+
+`public static function isCrossOrigin(UriInterface $original, UriInterface $modified): bool`
+
+Determines if a modified URL should be considered cross-origin with respect to an original URL.
+
+## Reference Resolution
+
+`GuzzleHttp\Psr7\UriResolver` provides methods to resolve a URI reference in the context of a base URI according
+to [RFC 3986 Section 5](https://tools.ietf.org/html/rfc3986#section-5). This is for example also what web browsers
+do when resolving a link in a website based on the current request URI.
+
+### `GuzzleHttp\Psr7\UriResolver::resolve`
+
+`public static function resolve(UriInterface $base, UriInterface $rel): UriInterface`
+
+Converts the relative URI into a new URI that is resolved against the base URI.
+
+### `GuzzleHttp\Psr7\UriResolver::removeDotSegments`
+
+`public static function removeDotSegments(string $path): string`
+
+Removes dot segments from a path and returns the new path according to
+[RFC 3986 Section 5.2.4](https://tools.ietf.org/html/rfc3986#section-5.2.4).
+
+### `GuzzleHttp\Psr7\UriResolver::relativize`
+
+`public static function relativize(UriInterface $base, UriInterface $target): UriInterface`
+
+Returns the target URI as a relative reference from the base URI. This method is the counterpart to resolve():
+
+```php
+(string) $target === (string) UriResolver::resolve($base, UriResolver::relativize($base, $target))
+```
+
+One use-case is to use the current request URI as base URI and then generate relative links in your documents
+to reduce the document size or offer self-contained downloadable document archives.
+
+```php
+$base = new Uri('http://example.com/a/b/');
+echo UriResolver::relativize($base, new Uri('http://example.com/a/b/c'));  // prints 'c'.
+echo UriResolver::relativize($base, new Uri('http://example.com/a/x/y'));  // prints '../x/y'.
+echo UriResolver::relativize($base, new Uri('http://example.com/a/b/?q')); // prints '?q'.
+echo UriResolver::relativize($base, new Uri('http://example.org/a/b/'));   // prints '//example.org/a/b/'.
+```
+
+## Normalization and Comparison
+
+`GuzzleHttp\Psr7\UriNormalizer` provides methods to normalize and compare URIs according to
+[RFC 3986 Section 6](https://tools.ietf.org/html/rfc3986#section-6).
+
+### `GuzzleHttp\Psr7\UriNormalizer::normalize`
+
+`public static function normalize(UriInterface $uri, $flags = self::PRESERVING_NORMALIZATIONS): UriInterface`
+
+Returns a normalized URI. The scheme and host component are already normalized to lowercase per PSR-7 UriInterface.
+This methods adds additional normalizations that can be configured with the `$flags` parameter which is a bitmask
+of normalizations to apply. The following normalizations are available:
+
+- `UriNormalizer::PRESERVING_NORMALIZATIONS`
+
+    Default normalizations which only include the ones that preserve semantics.
+
+- `UriNormalizer::CAPITALIZE_PERCENT_ENCODING`
+
+    All letters within a percent-encoding triplet (e.g., "%3A") are case-insensitive, and should be capitalized.
+
+    Example: `http://example.org/a%c2%b1b` → `http://example.org/a%C2%B1b`
+
+- `UriNormalizer::DECODE_UNRESERVED_CHARACTERS`
+
+    Decodes percent-encoded octets of unreserved characters. For consistency, percent-encoded octets in the ranges of
+    ALPHA (%41–%5A and %61–%7A), DIGIT (%30–%39), hyphen (%2D), period (%2E), underscore (%5F), or tilde (%7E) should
+    not be created by URI producers and, when found in a URI, should be decoded to their corresponding unreserved
+    characters by URI normalizers.
+
+    Example: `http://example.org/%7Eusern%61me/` → `http://example.org/~username/`
+
+- `UriNormalizer::CONVERT_EMPTY_PATH`
+
+    Converts the empty path to "/" for http and https URIs.
+
+    Example: `http://example.org` → `http://example.org/`
+
+- `UriNormalizer::REMOVE_DEFAULT_HOST`
+
+    Removes the default host of the given URI scheme from the URI. Only the "file" scheme defines the default host
+    "localhost". All of `file:/myfile`, `file:///myfile`, and `file://localhost/myfile` are equivalent according to
+    RFC 3986.
+
+    Example: `file://localhost/myfile` → `file:///myfile`
+
+- `UriNormalizer::REMOVE_DEFAULT_PORT`
+
+    Removes the default port of the given URI scheme from the URI.
+
+    Example: `http://example.org:80/` → `http://example.org/`
+
+- `UriNormalizer::REMOVE_DOT_SEGMENTS`
+
+    Removes unnecessary dot-segments. Dot-segments in relative-path references are not removed as it would
+    change the semantics of the URI reference.
+
+    Example: `http://example.org/../a/b/../c/./d.html` → `http://example.org/a/c/d.html`
+
+- `UriNormalizer::REMOVE_DUPLICATE_SLASHES`
+
+    Paths which include two or more adjacent slashes are converted to one. Webservers usually ignore duplicate slashes
+    and treat those URIs equivalent. But in theory those URIs do not need to be equivalent. So this normalization
+    may change the semantics. Encoded slashes (%2F) are not removed.
+
+    Example: `http://example.org//foo///bar.html` → `http://example.org/foo/bar.html`
+
+- `UriNormalizer::SORT_QUERY_PARAMETERS`
+
+    Sort query parameters with their values in alphabetical order. However, the order of parameters in a URI may be
+    significant (this is not defined by the standard). So this normalization is not safe and may change the semantics
+    of the URI.
+
+    Example: `?lang=en&article=fred` → `?article=fred&lang=en`
+
+### `GuzzleHttp\Psr7\UriNormalizer::isEquivalent`
+
+`public static function isEquivalent(UriInterface $uri1, UriInterface $uri2, $normalizations = self::PRESERVING_NORMALIZATIONS): bool`
+
+Whether two URIs can be considered equivalent. Both URIs are normalized automatically before comparison with the given
+`$normalizations` bitmask. The method also accepts relative URI references and returns true when they are equivalent.
+This of course assumes they will be resolved against the same base URI. If this is not the case, determination of
+equivalence or difference of relative references does not mean anything.
+
+
+## Version Guidance
+
+| Version | Status         | PHP Version      |
+|---------|----------------|------------------|
+| 1.x     | Security fixes | >=5.4,<8.1       |
+| 2.x     | Latest         | ^7.2.5 \|\| ^8.0 |
+
+
+## Security
+
+If you discover a security vulnerability within this package, please send an email to security@tidelift.com. All security vulnerabilities will be promptly addressed. Please do not disclose security-related issues publicly until a fix has been announced. Please see [Security Policy](https://github.com/guzzle/psr7/security/policy) for more information.
+
+
+## License
+
+Guzzle is made available under the MIT License (MIT). Please see [License File](LICENSE) for more information.
+
+
+## For Enterprise
+
+Available as part of the Tidelift Subscription
+
+The maintainers of Guzzle and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/packagist-guzzlehttp-psr7?utm_source=packagist-guzzlehttp-psr7&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

--- include/lib/Composer/vendor/guzzlehttp/psr7/composer.json ---
@@ -0,0 +1,96 @@
+{
+    "name": "guzzlehttp/psr7",
+    "description": "PSR-7 message implementation that also provides common utility methods",
+    "keywords": [
+        "request",
+        "response",
+        "message",
+        "stream",
+        "http",
+        "uri",
+        "url",
+        "psr-7"
+    ],
+    "license": "MIT",
+    "authors": [
+        {
+            "name": "Graham Campbell",
+            "email": "hello@gjcampbell.co.uk",
+            "homepage": "https://github.com/GrahamCampbell"
+        },
+        {
+            "name": "Michael Dowling",
+            "email": "mtdowling@gmail.com",
+            "homepage": "https://github.com/mtdowling"
+        },
+        {
+            "name": "George Mponos",
+            "email": "gmponos@gmail.com",
+            "homepage": "https://github.com/gmponos"
+        },
+        {
+            "name": "Tobias Nyholm",
+            "email": "tobias.nyholm@gmail.com",
+            "homepage": "https://github.com/Nyholm"
+        },
+        {
+            "name": "Márk Sági-Kazár",
+            "email": "mark.sagikazar@gmail.com",
+            "homepage": "https://github.com/sagikazarmark"
+        },
+        {
+            "name": "Tobias Schultze",
+            "email": "webmaster@tubo-world.de",
+            "homepage": "https://github.com/Tobion"
+        },
+        {
+            "name": "Márk Sági-Kazár",
+            "email": "mark.sagikazar@gmail.com",
+            "homepage": "https://sagikazarmark.hu"
+        }
+    ],
+    "require": {
+        "php": "^7.2.5 || ^8.0",
+        "psr/http-factory": "^1.0",
+        "psr/http-message": "^1.0",
+        "ralouphie/getallheaders": "^3.0"
+    },
+    "provide": {
+        "psr/http-factory-implementation": "1.0",
+        "psr/http-message-implementation": "1.0"
+    },
+    "require-dev": {
+        "bamarni/composer-bin-plugin": "^1.8.1",
+        "http-interop/http-factory-tests": "^0.9",
+        "phpunit/phpunit": "^8.5.29 || ^9.5.23"
+    },
+    "suggest": {
+        "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
+    },
+    "autoload": {
+        "psr-4": {
+            "GuzzleHttp\\Psr7\\": "src/"
+        }
+    },
+    "autoload-dev": {
+        "psr-4": {
+            "GuzzleHttp\\Tests\\Psr7\\": "tests/"
+        }
+    },
+    "extra": {
+        "bamarni-bin": {
+            "bin-links": true,
+            "forward-command": false
+        },
+        "branch-alias": {
+            "dev-master": "2.4-dev"
+        }
+    },
+    "config": {
+        "allow-plugins": {
+            "bamarni/composer-bin-plugin": true
+        },
+        "preferred-install": "dist",
+        "sort-packages": true
+    }
+}

--- include/lib/Composer/vendor/guzzlehttp/psr7/src/AppendStream.php ---
@@ -0,0 +1,248 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GuzzleHttp\Psr7;
+
+use Psr\Http\Message\StreamInterface;
+
+/**
+ * Reads from multiple streams, one after the other.
+ *
+ * This is a read-only stream decorator.
+ */
+final class AppendStream implements StreamInterface
+{
+    /** @var StreamInterface[] Streams being decorated */
+    private $streams = [];
+
+    /** @var bool */
+    private $seekable = true;
+
+    /** @var int */
+    private $current = 0;
+
+    /** @var int */
+    private $pos = 0;
+
+    /**
+     * @param StreamInterface[] $streams Streams to decorate. Each stream must
+     *                                   be readable.
+     */
+    public function __construct(array $streams = [])
+    {
+        foreach ($streams as $stream) {
+            $this->addStream($stream);
+        }
+    }
+
+    public function __toString(): string
+    {
+        try {
+            $this->rewind();
+            return $this->getContents();
+        } catch (\Throwable $e) {
+            if (\PHP_VERSION_ID >= 70400) {
+                throw $e;
+            }
+            trigger_error(sprintf('%s::__toString exception: %s', self::class, (string) $e), E_USER_ERROR);
+            return '';
+        }
+    }
+
+    /**
+     * Add a stream to the AppendStream
+     *
+     * @param StreamInterface $stream Stream to append. Must be readable.
+     *
+     * @throws \InvalidArgumentException if the stream is not readable
+     */
+    public function addStream(StreamInterface $stream): void
+    {
+        if (!$stream->isReadable()) {
+            throw new \InvalidArgumentException('Each stream must be readable');
+        }
+
+        // The stream is only seekable if all streams are seekable
+        if (!$stream->isSeekable()) {
+            $this->seekable = false;
+        }
+
+        $this->streams[] = $stream;
+    }
+
+    public function getContents(): string
+    {
+        return Utils::copyToString($this);
+    }
+
+    /**
+     * Closes each attached stream.
+     */
+    public function close(): void
+    {
+        $this->pos = $this->current = 0;
+        $this->seekable = true;
+
+        foreach ($this->streams as $stream) {
+            $stream->close();
+        }
+
+        $this->streams = [];
+    }
+
+    /**
+     * Detaches each attached stream.
+     *
+     * Returns null as it's not clear which underlying stream resource to return.
+     */
+    public function detach()
+    {
+        $this->pos = $this->current = 0;
+        $this->seekable = true;
+
+        foreach ($this->streams as $stream) {
+            $stream->detach();
+        }
+
+        $this->streams = [];
+
+        return null;
+    }
+
+    public function tell(): int
+    {
+        return $this->pos;
+    }
+
+    /**
+     * Tries to calculate the size by adding the size of each stream.
+     *
+     * If any of the streams do not return a valid number, then the size of the
+     * append stream cannot be determined and null is returned.
+     */
+    public function getSize(): ?int
+    {
+        $size = 0;
+
+        foreach ($this->streams as $stream) {
+            $s = $stream->getSize();
+            if ($s === null) {
+                return null;
+            }
+            $size += $s;
+        }
+
+        return $size;
+    }
+
+    public function eof(): bool
+    {
+        return !$this->streams ||
+            ($this->current >= count($this->streams) - 1 &&
+             $this->streams[$this->current]->eof());
+    }
+
+    public function rewind(): void
+    {
+        $this->seek(0);
+    }
+
+    /**
+     * Attempts to seek to the given position. Only supports SEEK_SET.
+     */
+    public function seek($offset, $whence = SEEK_SET): void
+    {
+        if (!$this->seekable) {
+            throw new \RuntimeException('This AppendStream is not seekable');
+        } elseif ($whence !== SEEK_SET) {
+            throw new \RuntimeException('The AppendStream can only seek with SEEK_SET');
+        }
+
+        $this->pos = $this->current = 0;
+
+        // Rewind each stream
+        foreach ($this->streams as $i => $stream) {
+            try {
+                $stream->rewind();
+            } catch (\Exception $e) {
+                throw new \RuntimeException('Unable to seek stream '
+                    . $i . ' of the AppendStream', 0, $e);
+            }
+        }
+
+        // Seek to the actual position by reading from each stream
+        while ($this->pos < $offset && !$this->eof()) {
+            $result = $this->read(min(8096, $offset - $this->pos));
+            if ($result === '') {
+                break;
+            }
+        }
+    }
+
+    /**
+     * Reads from all of the appended streams until the length is met or EOF.
+     */
+    public function read($length): string
+    {
+        $buffer = '';
+        $total = count($this->streams) - 1;
+        $remaining = $length;
+        $progressToNext = false;
+
+        while ($remaining > 0) {
+            // Progress to the next stream if needed.
+            if ($progressToNext || $this->streams[$this->current]->eof()) {
+                $progressToNext = false;
+                if ($this->current === $total) {
+                    break;
+                }
+                $this->current++;
+            }
+
+            $result = $this->streams[$this->current]->read($remaining);
+
+            if ($result === '') {
+                $progressToNext = true;
+                continue;
+            }
+
+            $buffer .= $result;
+            $remaining = $length - strlen($buffer);
+        }
+
+        $this->pos += strlen($buffer);
+
+        return $buffer;
+    }
+
+    public function isReadable(): bool
+    {
+        return true;
+    }
+
+    public function isWritable(): bool
+    {
+        return false;
+    }
+
+    public function isSeekable(): bool
+    {
+        return $this->seekable;
+    }
+
+    public function write($string): int
+    {
+        throw new \RuntimeException('Cannot write to an AppendStream');
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return mixed
+     */
+    public function getMetadata($key = null)
+    {
+        return $key ? null : [];
+    }
+}

--- include/lib/Composer/vendor/guzzlehttp/psr7/src/BufferStream.php ---
@@ -0,0 +1,149 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GuzzleHttp\Psr7;
+
+use Psr\Http\Message\StreamInterface;
+
+/**
+ * Provides a buffer stream that can be written to to fill a buffer, and read
+ * from to remove bytes from the buffer.
+ *
+ * This stream returns a "hwm" metadata value that tells upstream consumers
+ * what the configured high water mark of the stream is, or the maximum
+ * preferred size of the buffer.
+ */
+final class BufferStream implements StreamInterface
+{
+    /** @var int */
+    private $hwm;
+
+    /** @var string */
+    private $buffer = '';
+
+    /**
+     * @param int $hwm High water mark, representing the preferred maximum
+     *                 buffer size. If the size of the buffer exceeds the high
+     *                 water mark, then calls to write will continue to succeed
+     *                 but will return 0 to inform writers to slow down
+     *                 until the buffer has been drained by reading from it.
+     */
+    public function __construct(int $hwm = 16384)
+    {
+        $this->hwm = $hwm;
+    }
+
+    public function __toString(): string
+    {
+        return $this->getContents();
+    }
+
+    public function getContents(): string
+    {
+        $buffer = $this->buffer;
+        $this->buffer = '';
+
+        return $buffer;
+    }
+
+    public function close(): void
+    {
+        $this->buffer = '';
+    }
+
+    public function detach()
+    {
+        $this->close();
+
+        return null;
+    }
+
+    public function getSize(): ?int
+    {
+        return strlen($this->buffer);
+    }
+
+    public function isReadable(): bool
+    {
+        return true;
+    }
+
+    public function isWritable(): bool
+    {
+        return true;
+    }
+
+    public function isSeekable(): bool
+    {
+        return false;
+    }
+
+    public function rewind(): void
+    {
+        $this->seek(0);
+    }
+
+    public function seek($offset, $whence = SEEK_SET): void
+    {
+        throw new \RuntimeException('Cannot seek a BufferStream');
+    }
+
+    public function eof(): bool
+    {
+        return strlen($this->buffer) === 0;
+    }
+
+    public function tell(): int
+    {
+        throw new \RuntimeException('Cannot determine the position of a BufferStream');
+    }
+
+    /**
+     * Reads data from the buffer.
+     */
+    public function read($length): string
+    {
+        $currentLength = strlen($this->buffer);
+
+        if ($length >= $currentLength) {
+            // No need to slice the buffer because we don't have enough data.
+            $result = $this->buffer;
+            $this->buffer = '';
+        } else {
+            // Slice up the result to provide a subset of the buffer.
+            $result = substr($this->buffer, 0, $length);
+            $this->buffer = substr($this->buffer, $length);
+        }
+
+        return $result;
+    }
+
+    /**
+     * Writes data to the buffer.
+     */
+    public function write($string): int
+    {
+        $this->buffer .= $string;
+
+        if (strlen($this->buffer) >= $this->hwm) {
+            return 0;
+        }
+
+        return strlen($string);
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return mixed
+     */
+    public function getMetadata($key = null)
+    {
+        if ($key === 'hwm') {
+            return $this->hwm;
+        }
+
+        return $key ? null : [];
+    }
+}

--- include/lib/Composer/vendor/guzzlehttp/psr7/src/CachingStream.php ---
@@ -0,0 +1,153 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GuzzleHttp\Psr7;
+
+use Psr\Http\Message\StreamInterface;
+
+/**
+ * Stream decorator that can cache previously read bytes from a sequentially
+ * read stream.
+ */
+final class CachingStream implements StreamInterface
+{
+    use StreamDecoratorTrait;
+
+    /** @var StreamInterface Stream being wrapped */
+    private $remoteStream;
+
+    /** @var int Number of bytes to skip reading due to a write on the buffer */
+    private $skipReadBytes = 0;
+
+    /**
+     * @var StreamInterface
+     */
+    private $stream;
+
+    /**
+     * We will treat the buffer object as the body of the stream
+     *
+     * @param StreamInterface $stream Stream to cache. The cursor is assumed to be at the beginning of the stream.
+     * @param StreamInterface $target Optionally specify where data is cached
+     */
+    public function __construct(
+        StreamInterface $stream,
+        StreamInterface $target = null
+    ) {
+        $this->remoteStream = $stream;
+        $this->stream = $target ?: new Stream(Utils::tryFopen('php://temp', 'r+'));
+    }
+
+    public function getSize(): ?int
+    {
+        $remoteSize = $this->remoteStream->getSize();
+
+        if (null === $remoteSize) {
+            return null;
+        }
+
+        return max($this->stream->getSize(), $remoteSize);
+    }
+
+    public function rewind(): void
+    {
+        $this->seek(0);
+    }
+
+    public function seek($offset, $whence = SEEK_SET): void
+    {
+        if ($whence === SEEK_SET) {
+            $byte = $offset;
+        } elseif ($whence === SEEK_CUR) {
+            $byte = $offset + $this->tell();
+        } elseif ($whence === SEEK_END) {
+            $size = $this->remoteStream->getSize();
+            if ($size === null) {
+                $size = $this->cacheEntireStream();
+            }
+            $byte = $size + $offset;
+        } else {
+            throw new \InvalidArgumentException('Invalid whence');
+        }
+
+        $diff = $byte - $this->stream->getSize();
+
+        if ($diff > 0) {
+            // Read the remoteStream until we have read in at least the amount
+            // of bytes requested, or we reach the end of the file.
+            while ($diff > 0 && !$this->remoteStream->eof()) {
+                $this->read($diff);
+                $diff = $byte - $this->stream->getSize();
+            }
+        } else {
+            // We can just do a normal seek since we've already seen this byte.
+            $this->stream->seek($byte);
+        }
+    }
+
+    public function read($length): string
+    {
+        // Perform a regular read on any previously read data from the buffer
+        $data = $this->stream->read($length);
+        $remaining = $length - strlen($data);
+
+        // More data was requested so read from the remote stream
+        if ($remaining) {
+            // If data was written to the buffer in a position that would have
+            // been filled from the remote stream, then we must skip bytes on
+            // the remote stream to emulate overwriting bytes from that
+            // position. This mimics the behavior of other PHP stream wrappers.
+            $remoteData = $this->remoteStream->read(
+                $remaining + $this->skipReadBytes
+            );
+
+            if ($this->skipReadBytes) {
+                $len = strlen($remoteData);
+                $remoteData = substr($remoteData, $this->skipReadBytes);
+                $this->skipReadBytes = max(0, $this->skipReadBytes - $len);
+            }
+
+            $data .= $remoteData;
+            $this->stream->write($remoteData);
+        }
+
+        return $data;
+    }
+
+    public function write($string): int
+    {
+        // When appending to the end of the currently read stream, you'll want
+        // to skip bytes from being read from the remote stream to emulate
+        // other stream wrappers. Basically replacing bytes of data of a fixed
+        // length.
+        $overflow = (strlen($string) + $this->tell()) - $this->remoteStream->tell();
+        if ($overflow > 0) {
+            $this->skipReadBytes += $overflow;
+        }
+
+        return $this->stream->write($string);
+    }
+
+    public function eof(): bool
+    {
+        return $this->stream->eof() && $this->remoteStream->eof();
+    }
+
+    /**
+     * Close both the remote stream and buffer stream
+     */
+    public function close(): void
+    {
+        $this->remoteStream->close();
+        $this->stream->close();
+    }
+
+    private function cacheEntireStream(): int
+    {
+        $target = new FnStream(['write' => 'strlen']);
+        Utils::copyToStream($this, $target);
+
+        return $this->tell();
+    }
+}

--- include/lib/Composer/vendor/guzzlehttp/psr7/src/DroppingStream.php ---
@@ -0,0 +1,49 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GuzzleHttp\Psr7;
+
+use Psr\Http\Message\StreamInterface;
+
+/**
+ * Stream decorator that begins dropping data once the size of the underlying
+ * stream becomes too full.
+ */
+final class DroppingStream implements StreamInterface
+{
+    use StreamDecoratorTrait;
+
+    /** @var int */
+    private $maxLength;
+
+    /** @var StreamInterface */
+    private $stream;
+
+    /**
+     * @param StreamInterface $stream    Underlying stream to decorate.
+     * @param int             $maxLength Maximum size before dropping data.
+     */
+    public function __construct(StreamInterface $stream, int $maxLength)
+    {
+        $this->stream = $stream;
+        $this->maxLength = $maxLength;
+    }
+
+    public function write($string): int
+    {
+        $diff = $this->maxLength - $this->stream->getSize();
+
+        // Begin returning 0 when the underlying stream is too large.
+        if ($diff <= 0) {
+            return 0;
+        }
+
+        // Write the stream or a subset of the stream if needed.
+        if (strlen($string) < $diff) {
+            return $this->stream->write($string);
+        }
+
+        return $this->stream->write(substr($string, 0, $diff));
+    }
+}

--- include/lib/Composer/vendor/guzzlehttp/psr7/src/Exception/MalformedUriException.php ---
@@ -0,0 +1,14 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GuzzleHttp\Psr7\Exception;
+
+use InvalidArgumentException;
+
+/**
+ * Exception thrown if a URI cannot be parsed because it's malformed.
+ */
+class MalformedUriException extends InvalidArgumentException
+{
+}

