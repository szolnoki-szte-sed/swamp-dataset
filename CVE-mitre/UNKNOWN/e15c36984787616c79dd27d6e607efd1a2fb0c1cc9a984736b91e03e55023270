--- .github/workflows/dart-tests.yaml ---
@@ -87,6 +87,7 @@ jobs:
             "packages/serverpod_serialization",
             "tests/serverpod_test_client",
             "tests/serverpod_test_server",
+            "modules/serverpod_auth/serverpod_auth_server",
           ]
     steps:
       - uses: actions/checkout@v3

--- modules/serverpod_auth/serverpod_auth_server/lib/src/business/config.dart ---
@@ -128,6 +128,11 @@ class AuthConfig {
   /// Default is 8 characters.
   final int minPasswordLength;
 
+  /// True if unsecure random number generation is allowed. If set to false, an
+  /// error will be thrown if the platform does not support secure random number
+  /// generation. Default is true but will be changed to false in Serverpod 2.0.
+  final bool allowUnsecureRandom;
+
   /// Creates a new Auth configuration. Use the [set] method to replace the
   /// default settings. Defaults to `config/firebase_service_account_key.json`.
   AuthConfig({
@@ -156,5 +161,6 @@ class AuthConfig {
         'config/firebase_service_account_key.json',
     this.maxPasswordLength = 128,
     this.minPasswordLength = 8,
+    this.allowUnsecureRandom = true,
   });
 }

--- modules/serverpod_auth/serverpod_auth_server/lib/src/business/email_auth.dart ---
@@ -1,24 +1,136 @@
-import 'dart:convert';
 import 'dart:math';
 
-import 'package:crypto/crypto.dart';
 import 'package:email_validator/email_validator.dart';
 import 'package:serverpod/serverpod.dart';
 import 'package:serverpod_auth_server/module.dart';
+import 'package:serverpod_auth_server/src/business/email_secrets.dart';
+import 'package:serverpod_auth_server/src/business/password_hash.dart';
 import 'package:serverpod_auth_server/src/business/user_images.dart';
 
 /// Collection of utility methods when working with email authentication.
 class Emails {
   /// Generates a password hash from a users password and email. This value
   /// can safely be stored in the database without the risk of exposing
   /// passwords.
-  static String generatePasswordHash(String password, String email) {
-    var salt = Serverpod.instance.getPassword('email_password_salt') ??
-        'serverpod password salt';
-    if (AuthConfig.current.extraSaltyHash) {
-      salt += ':$email';
+  static String generatePasswordHash(String password) {
+    return PasswordHash.argon2id(
+      password,
+      pepper: EmailSecrets.pepper,
+      allowUnsecureRandom: AuthConfig.current.allowUnsecureRandom,
+    );
+  }
+
+  /// Generates a password hash from the password using the provided hash
+  /// algorithm and validates that they match.
+  ///
+  /// If the password hash does not match the provided hash, the
+  /// [onValidationFailure] function is called with the hash and the password
+  /// hash as arguments.
+  ///
+  /// If an error occurs, the [onError] function is called with the error as
+  /// argument.
+  static bool validatePasswordHash(
+    String password,
+    String email,
+    String hash, {
+    void Function(String hash, String passwordHash)? onValidationFailure,
+    void Function(Object e)? onError,
+  }) {
+    try {
+      return PasswordHash(
+        hash,
+        legacySalt: EmailSecrets.legacySalt,
+        legacyEmail: AuthConfig.current.extraSaltyHash ? email : null,
+        pepper: EmailSecrets.pepper,
+      ).validate(password, onValidationFailure: onValidationFailure);
+    } catch (e) {
+      onError?.call(e);
+      return false;
+    }
+  }
+
+  /// Migrates an EmailAuth entry if required.
+  ///
+  /// Returns the new [EmailAuth] object if a migration was required,
+  /// null otherwise.
+  static EmailAuth? tryMigrateAuthEntry({
+    required String password,
+    required EmailAuth entry,
+  }) {
+    if (!PasswordHash(entry.hash, legacySalt: EmailSecrets.legacySalt)
+        .shouldUpdateHash()) {
+      return null;
+    }
+
+    var newHash = PasswordHash.argon2id(
+      password,
+      pepper: EmailSecrets.pepper,
+      allowUnsecureRandom: AuthConfig.current.allowUnsecureRandom,
+    );
+
+    return entry.copyWith(hash: newHash);
+  }
+
+  /// Migrates legacy password hashes to the latest hash algorithm.
+  ///
+  ///[batchSize] is the number of entries to migrate in each batch.
+  ///
+  /// Returns the number of migrated entries.
+  static Future<int> migrateLegacyPasswordHashes(
+    Session session, {
+    int batchSize = 100,
+  }) async {
+    var updatedEntries = 0;
+    int lastEntryId = 0;
+
+    while (true) {
+      var entries = await EmailAuth.db.find(
+        session,
+        where: (t) => t.hash.notLike(r'%$%') & (t.id > lastEntryId),
+        orderBy: (t) => t.id,
+        limit: batchSize,
+      );
+
+      if (entries.isEmpty) {
+        return updatedEntries;
+      }
+
+      lastEntryId = entries.last.id!;
+
+      var migratedEntries = entries.where((entry) {
+        try {
+          return PasswordHash(
+            entry.hash,
+            legacySalt: EmailSecrets.legacySalt,
+          ).isLegacyHash();
+        } catch (e) {
+          session.log(
+            'Error when checking if hash is legacy: $e',
+            level: LogLevel.error,
+          );
+          return false;
+        }
+      }).map((entry) {
+        return entry.copyWith(
+          hash: PasswordHash.migratedLegacyToArgon2idHash(
+            entry.hash,
+            legacySalt: EmailSecrets.legacySalt,
+            pepper: EmailSecrets.pepper,
+            allowUnsecureRandom: AuthConfig.current.allowUnsecureRandom,
+          ),
+        );
+      }).toList();
+
+      try {
+        await EmailAuth.db.update(session, migratedEntries);
+        updatedEntries += migratedEntries.length;
+      } catch (e) {
+        session.log(
+          'Failed to update migrated entries: $e',
+          level: LogLevel.error,
+        );
+      }
     }
-    return sha256.convert(utf8.encode(password + salt)).toString();
   }
 
   /// Creates a new user. Either password or hash needs to be provided.
@@ -58,7 +170,7 @@ class Emails {
     }
 
     session.log('creating email auth', level: LogLevel.debug);
-    hash = hash ?? generatePasswordHash(password!, email);
+    hash = hash ?? generatePasswordHash(password!);
     var auth = EmailAuth(
       userId: userInfo.id!,
       email: email,
@@ -91,12 +203,22 @@ class Emails {
     }
 
     // Check old password
-    if (auth.hash != generatePasswordHash(oldPassword, auth.email)) {
+    if (!validatePasswordHash(
+      oldPassword,
+      auth.email,
+      auth.hash,
+      onError: (e) {
+        session.log(
+          ' - error when validating password hash: $e',
+          level: LogLevel.error,
+        );
+      },
+    )) {
       return false;
     }
 
     // Update password
-    auth.hash = generatePasswordHash(newPassword, auth.email);
+    auth.hash = generatePasswordHash(newPassword);
     await EmailAuth.db.updateRow(session, auth);
 
     return true;
@@ -180,7 +302,7 @@ class Emails {
 
     if (emailAuth == null) return false;
 
-    emailAuth.hash = generatePasswordHash(password, emailAuth.email);
+    emailAuth.hash = generatePasswordHash(password);
     await EmailAuth.db.updateRow(session, emailAuth);
 
     return true;
@@ -226,7 +348,7 @@ class Emails {
         accountRequest = EmailCreateAccountRequest(
           userName: userName,
           email: email,
-          hash: generatePasswordHash(password, email),
+          hash: generatePasswordHash(password),
           verificationCode: _generateVerificationCode(),
         );
         await EmailCreateAccountRequest.db.insertRow(session, accountRequest);
@@ -258,10 +380,142 @@ class Emails {
     );
   }
 
+  /// Authenticates a user with email and password. Returns an
+  /// [AuthenticationResponse] with the users information.
+  static Future<AuthenticationResponse> authenticate(
+    Session session,
+    String email,
+    String password,
+  ) async {
+    email = email.toLowerCase();
+    password = password.trim();
+
+    session.log('authenticate $email / XXXXXXXX', level: LogLevel.debug);
+
+    // Fetch password entry
+    var entry = await EmailAuth.db.findFirstRow(session, where: (t) {
+      return t.email.equals(email);
+    });
+
+    if (entry == null) {
+      return AuthenticationResponse(
+        success: false,
+        failReason: AuthenticationFailReason.invalidCredentials,
+      );
+    }
+
+    if (await _hasTooManyFailedSignIns(session, email)) {
+      return AuthenticationResponse(
+        success: false,
+        failReason: AuthenticationFailReason.tooManyFailedAttempts,
+      );
+    }
+
+    session.log(' - found entry ', level: LogLevel.debug);
+
+    // Check that password is correct
+    if (!Emails.validatePasswordHash(
+      password,
+      email,
+      entry.hash,
+      onValidationFailure: (hash, passwordHash) => session.log(
+        ' - $passwordHash saved: $hash',
+        level: LogLevel.debug,
+      ),
+      onError: (e) {
+        session.log(
+          ' - error when validating password hash: $e',
+          level: LogLevel.error,
+        );
+      },
+    )) {
+      await _logFailedSignIn(session, email);
+      return AuthenticationResponse(
+        success: false,
+        failReason: AuthenticationFailReason.invalidCredentials,
+      );
+    }
+
+    session.log(' - password is correct, userId: ${entry.userId})',
+        level: LogLevel.debug);
+
+    var migratedAuth = Emails.tryMigrateAuthEntry(
+      password: password,
+      entry: entry,
+    );
+
+    if (migratedAuth != null) {
+      session.log(' - migrating authentication entry', level: LogLevel.debug);
+      try {
+        await EmailAuth.db.updateRow(session, migratedAuth);
+      } catch (e) {
+        session.log(
+          ' - failed to update migrated auth: $e',
+          level: LogLevel.error,
+        );
+      }
+    }
+
+    var userInfo = await Users.findUserByUserId(session, entry.userId);
+    if (userInfo == null) {
+      return AuthenticationResponse(
+        success: false,
+        failReason: AuthenticationFailReason.invalidCredentials,
+      );
+    } else if (userInfo.blocked) {
+      return AuthenticationResponse(
+        success: false,
+        failReason: AuthenticationFailReason.blocked,
+      );
+    }
+
+    session.log(' - user found', level: LogLevel.debug);
+
+    // Sign in user and return user info
+    var auth = await session.auth.signInUser(
+      entry.userId,
+      'email',
+      scopes: userInfo.scopes,
+    );
+
+    session.log(' - user signed in', level: LogLevel.debug);
+
+    return AuthenticationResponse(
+      success: true,
+      userInfo: userInfo,
+      key: auth.key,
+      keyId: auth.id,
+    );
+  }
+
   static String _generateVerificationCode() {
     return Random().nextString(
       length: 8,
       chars: '0123456789',
     );
   }
+
+  static Future<bool> _hasTooManyFailedSignIns(
+      Session session, String email) async {
+    var numFailedSignIns = await EmailFailedSignIn.db.count(
+      session,
+      where: (t) =>
+          t.email.equals(email) &
+          (t.time >
+              DateTime.now()
+                  .toUtc()
+                  .subtract(AuthConfig.current.emailSignInFailureResetTime)),
+    );
+    return numFailedSignIns >= AuthConfig.current.maxAllowedEmailSignInAttempts;
+  }
+
+  static Future<void> _logFailedSignIn(Session session, String email) async {
+    session as MethodCallSession;
+    var failedSignIn = EmailFailedSignIn(
+      email: email,
+      time: DateTime.now(),
+      ipAddress: session.httpRequest.remoteIpAddress,
+    );
+    await EmailFailedSignIn.db.insertRow(session, failedSignIn);
+  }
 }

--- modules/serverpod_auth/serverpod_auth_server/lib/src/business/email_secrets.dart ---
@@ -0,0 +1,13 @@
+import 'package:serverpod/serverpod.dart';
+
+/// Secrets used for email authentication.
+abstract class EmailSecrets {
+  /// The salt used for hashing legacy passwords.
+  static String get legacySalt =>
+      Serverpod.instance.getPassword('email_password_salt') ??
+      'serverpod password salt';
+
+  /// The pepper used for hashing passwords.
+  static String? get pepper =>
+      Serverpod.instance.getPassword('emailPasswordPepper');
+}

--- modules/serverpod_auth/serverpod_auth_server/lib/src/business/password_hash.dart ---
@@ -0,0 +1,326 @@
+import 'dart:convert';
+import 'dart:math';
+import 'dart:typed_data';
+
+import 'package:crypto/crypto.dart';
+import 'package:pointycastle/key_derivators/api.dart';
+import 'package:pointycastle/key_derivators/argon2.dart';
+import 'package:serverpod_auth_server/module.dart';
+
+/// Password hash types.
+enum _PasswordHashType {
+  /// A legacy password hash.
+  legacy,
+
+  /// A password hash generated using the Argon2id algorithm.
+  /// See: https://en.wikipedia.org/wiki/Argon2
+  argon2id,
+
+  /// A password hash generated using the Argon2id algorithm, but expecting the
+  /// passed in password hash to be a legacy password hash.
+  ///
+  /// This is used to migrate legacy password hashes to safer Argon2id
+  /// password hashes without forcing users to change their passwords.
+  migratedLegacy;
+
+  factory _PasswordHashType.fromPasswordHash(String passwordHash) {
+    var passwordHashParts = passwordHash.split('\$');
+    if (passwordHashParts.length < 2) {
+      return _PasswordHashType.legacy;
+    }
+
+    var type = passwordHashParts[1];
+    if (type == _PasswordHashType.argon2id.name) {
+      return _PasswordHashType.argon2id;
+    } else if (type == _PasswordHashType.migratedLegacy.name) {
+      return _PasswordHashType.migratedLegacy;
+    }
+
+    throw ArgumentError('Unknown password hash type: $type', 'passwordHash');
+  }
+}
+
+/// A class for handling password hashes.
+class PasswordHash {
+  // Recommended salt length by ietf.
+  // https://www.ietf.org/archive/id/draft-ietf-kitten-password-storage-04.html#name-storage-2
+  static const int _saltLength = 16;
+  late final _PasswordHashType _type;
+
+  late final _PasswordHashGenerator _hashGenerator;
+  late final String _hash;
+
+  /// Creates a new [PasswordHash] from a password hash string used to validate
+  /// passwords using the same hashing algorithm.
+  ///
+  /// Throws an [ArgumentError] if the password hash is not recognized.
+  PasswordHash(
+    String passwordHash, {
+    required String legacySalt,
+    String? legacyEmail,
+    String? pepper,
+  }) {
+    _type = _PasswordHashType.fromPasswordHash(passwordHash);
+    var passwordHashParts = passwordHash.split('\$');
+
+    switch (_type) {
+      case _LegacyPasswordHashGenerator.type:
+        _hash = passwordHash;
+        _hashGenerator = _LegacyPasswordHashGenerator(
+          salt: legacySalt,
+          email: legacyEmail,
+        );
+        break;
+      case _Argon2idPasswordHashGenerator.type:
+        var [_, _, salt, hash] = passwordHashParts;
+        _hash = hash;
+        _hashGenerator = _Argon2idPasswordHashGenerator(
+          salt: salt,
+          pepper: pepper,
+        );
+        break;
+      case _LegacyToArgon2idPasswordHash.type:
+        var [_, _, salt, hash] = passwordHashParts;
+        _hash = hash;
+        _hashGenerator = _LegacyToArgon2idPasswordHash(
+          legacySalt: legacySalt,
+          salt: salt,
+          email: legacyEmail,
+          pepper: pepper,
+        );
+        break;
+    }
+  }
+
+  /// Returns true if the hash was generated using an outdated algorithm.
+  bool shouldUpdateHash() {
+    return [
+      _LegacyPasswordHashGenerator.type,
+      _LegacyToArgon2idPasswordHash.type,
+    ].contains(_type);
+  }
+
+  /// Returns true if the hash was generated using the legacy algorithm.
+  bool isLegacyHash() {
+    return _type == _LegacyPasswordHashGenerator.type;
+  }
+
+  /// Checks if a password matches the hash.
+  ///
+  /// If the password does not match the hash, the [onValidationFailure] function
+  /// will be called with the hash and the password hash as arguments.
+  bool validate(
+    String password, {
+    void Function(String hash, String passwordHash)? onValidationFailure,
+  }) {
+    var passwordHash = _hashGenerator.generateHash(password);
+
+    if (_hash != passwordHash) {
+      onValidationFailure?.call(passwordHash, _hash);
+      return false;
+    }
+
+    return true;
+  }
+
+  /// Creates a new password hash using the legacy algorithm.
+  ///
+  /// If the [email] parameter is provided, the email will be used as an
+  /// additional salt for the password hash.
+  static String legacyHash(String password, String salt, {String? email}) {
+    return _LegacyPasswordHashGenerator(salt: salt, email: email)
+        .generatePasswordHash(password);
+  }
+
+  /// Creates an Argon2id password hash expecting the passed in password hash to
+  /// be a legacy password hash.
+  ///
+  /// This is used to migrate legacy password hashes to Argon2id password
+  /// hashes.
+  ///
+  /// The [legacySalt] parameter is the salt used in the legacy password hash.
+  ///
+  /// The [salt] parameter should only be used in testing and development.
+  /// If omitted a random salt will be generated which is the recommended way
+  /// to use this function in production.
+  ///
+  /// The [allowUnsecureRandom] parameter can be used to allow unsecure random
+  /// number generation. If set to false (default value), an error will be thrown
+  /// if the platform does not support secure random number generation.
+  static String migratedLegacyToArgon2idHash(
+    String legacyHash, {
+    required String legacySalt,
+    String? salt,
+    String? pepper,
+    bool allowUnsecureRandom = false,
+  }) {
+    var encodedSalt = _generateSalt(
+      salt: salt,
+      allowUnsecureRandom: allowUnsecureRandom,
+    );
+
+    return _LegacyToArgon2idPasswordHash(
+      legacySalt: legacySalt,
+      salt: encodedSalt,
+      pepper: pepper,
+    ).generatePasswordHash(legacyHash);
+  }
+
+  /// Creates a new password hash using the Argon2id algorithm.
+  ///
+  /// The [salt] parameter should only be used in testing and development.
+  /// If omitted a random salt will be generated which is the recommended way
+  /// to use this function in production.
+  ///
+  /// The [allowUnsecureRandom] parameter can be used to allow unsecure random
+  /// number generation. If set to false (default value), an error will be thrown
+  /// if the platform does not support secure random number generation.
+  static String argon2id(
+    String password, {
+    String? salt,
+    String? pepper,
+    bool allowUnsecureRandom = false,
+  }) {
+    var encodedSalt = _generateSalt(
+      salt: salt,
+      allowUnsecureRandom: allowUnsecureRandom,
+    );
+
+    return _Argon2idPasswordHashGenerator(
+      salt: encodedSalt,
+      pepper: pepper,
+    ).generatePasswordHash(password);
+  }
+
+  static String _generateSalt({
+    required bool allowUnsecureRandom,
+    String? salt,
+  }) {
+    if (salt != null) {
+      return const Base64Encoder().convert(salt.codeUnits);
+    }
+
+    try {
+      return Random.secure().nextString(
+        length: _saltLength,
+      );
+    } on UnsupportedError {
+      if (!allowUnsecureRandom) {
+        rethrow;
+      }
+    }
+
+    return Random().nextString(
+      length: _saltLength,
+    );
+  }
+}
+
+/// Interface for password hash generators.
+abstract interface class _PasswordHashGenerator {
+  /// Generates a hash from a password.
+  String generateHash(String password);
+}
+
+/// A password hash generator for legacy password hashes.
+class _LegacyPasswordHashGenerator implements _PasswordHashGenerator {
+  /// Creates a new legacy password hash generator from a hash string.
+  final String _salt;
+  final String? _email;
+
+  _LegacyPasswordHashGenerator({required String salt, String? email})
+      : _salt = salt,
+        _email = email;
+
+  String generatePasswordHash(String password) {
+    return generateHash(password);
+  }
+
+  @override
+  String generateHash(String password) {
+    var salt = _salt;
+    if (_email != null) {
+      salt += ':$_email';
+    }
+
+    return sha256.convert(utf8.encode(password + salt)).toString();
+  }
+
+  static const _PasswordHashType type = _PasswordHashType.legacy;
+}
+
+/// A password hash generator for Argon2id password hashes.
+class _Argon2idPasswordHashGenerator implements _PasswordHashGenerator {
+  final String _salt;
+  final String? _pepper;
+
+  _Argon2idPasswordHashGenerator({required String salt, String? pepper})
+      : _salt = salt,
+        _pepper = pepper;
+
+  String generatePasswordHash(String password) {
+    var hash = generateHash(password);
+    return '\$${type.name}\$$_salt\$$hash';
+  }
+
+  @override
+  String generateHash(String password) {
+    var parameters = Argon2Parameters(
+      Argon2Parameters.ARGON2_id,
+      // Required cast because of a breaking change in dart 3.2: https://github.com/dart-lang/sdk/issues/52801
+      // ignore: unnecessary_cast
+      utf8.encode(_salt) as Uint8List,
+      desiredKeyLength: 256,
+      // Required cast because of a breaking change in dart 3.2: https://github.com/dart-lang/sdk/issues/52801
+      // ignore: unnecessary_cast
+      secret: _pepper != null ? utf8.encode(_pepper!) as Uint8List : null,
+    );
+
+    var generator = Argon2BytesGenerator()..init(parameters);
+    // Required cast because of a breaking change in dart 3.2: https://github.com/dart-lang/sdk/issues/52801
+    // ignore: unnecessary_cast
+    var hashBytes = generator.process(utf8.encode(password) as Uint8List);
+
+    return const Base64Encoder().convert(hashBytes);
+  }
+
+  static const _PasswordHashType type = _PasswordHashType.argon2id;
+}
+
+class _LegacyToArgon2idPasswordHash implements _PasswordHashGenerator {
+  final String _legacySalt;
+  final String _salt;
+  final String? _email;
+  final String? _pepper;
+
+  _LegacyToArgon2idPasswordHash({
+    required String legacySalt,
+    required String salt,
+    String? email,
+    String? pepper,
+  })  : _legacySalt = legacySalt,
+        _salt = salt,
+        _email = email,
+        _pepper = pepper;
+
+  String generatePasswordHash(String legacyHash) {
+    var hash = _Argon2idPasswordHashGenerator(
+      salt: _salt,
+      pepper: _pepper,
+    ).generateHash(legacyHash);
+    return '\$${type.name}\$$_salt\$$hash';
+  }
+
+  @override
+  String generateHash(String password) {
+    var legacyHash =
+        _LegacyPasswordHashGenerator(salt: _legacySalt, email: _email)
+            .generateHash(password);
+    return _Argon2idPasswordHashGenerator(
+      salt: _salt,
+      pepper: _pepper,
+    ).generateHash(legacyHash);
+  }
+
+  static const _PasswordHashType type = _PasswordHashType.migratedLegacy;
+}

--- modules/serverpod_auth/serverpod_auth_server/lib/src/endpoints/email_endpoint.dart ---
@@ -16,100 +16,7 @@ class EmailEndpoint extends Endpoint {
     String email,
     String password,
   ) async {
-    email = email.toLowerCase();
-    password = password.trim();
-
-    session.log('authenticate $email / XXXXXXXX', level: LogLevel.debug);
-
-    // Fetch password entry
-    var entry = await EmailAuth.db.findFirstRow(session, where: (t) {
-      return t.email.equals(email);
-    });
-
-    if (entry == null) {
-      return AuthenticationResponse(
-        success: false,
-        failReason: AuthenticationFailReason.invalidCredentials,
-      );
-    }
-
-    if (await _hasTooManyFailedSignIns(session, email)) {
-      return AuthenticationResponse(
-        success: false,
-        failReason: AuthenticationFailReason.tooManyFailedAttempts,
-      );
-    }
-
-    session.log(' - found entry ', level: LogLevel.debug);
-
-    // Check that password is correct
-    if (entry.hash != Emails.generatePasswordHash(password, email)) {
-      session.log(
-          ' - ${Emails.generatePasswordHash(password, email)} saved: ${entry.hash}',
-          level: LogLevel.debug);
-      await _logFailedSignIn(session, email);
-      return AuthenticationResponse(
-        success: false,
-        failReason: AuthenticationFailReason.invalidCredentials,
-      );
-    }
-
-    session.log(' - password is correct, userId: ${entry.userId})',
-        level: LogLevel.debug);
-
-    var userInfo = await Users.findUserByUserId(session, entry.userId);
-    if (userInfo == null) {
-      return AuthenticationResponse(
-        success: false,
-        failReason: AuthenticationFailReason.invalidCredentials,
-      );
-    } else if (userInfo.blocked) {
-      return AuthenticationResponse(
-        success: false,
-        failReason: AuthenticationFailReason.blocked,
-      );
-    }
-
-    session.log(' - user found', level: LogLevel.debug);
-
-    // Sign in user and return user info
-    var auth = await session.auth.signInUser(
-      entry.userId,
-      'email',
-      scopes: userInfo.scopes,
-    );
-
-    session.log(' - user signed in', level: LogLevel.debug);
-
-    return AuthenticationResponse(
-      success: true,
-      userInfo: userInfo,
-      key: auth.key,
-      keyId: auth.id,
-    );
-  }
-
-  Future<void> _logFailedSignIn(Session session, String email) async {
-    session as MethodCallSession;
-    var failedSignIn = EmailFailedSignIn(
-      email: email,
-      time: DateTime.now(),
-      ipAddress: session.httpRequest.remoteIpAddress,
-    );
-    await EmailFailedSignIn.db.insertRow(session, failedSignIn);
-  }
-
-  Future<bool> _hasTooManyFailedSignIns(Session session, String email) async {
-    var numFailedSignIns = await EmailFailedSignIn.db.count(
-      session,
-      where: (t) =>
-          t.email.equals(email) &
-          (t.time >
-              DateTime.now()
-                  .toUtc()
-                  .subtract(AuthConfig.current.emailSignInFailureResetTime)),
-    );
-    return numFailedSignIns >= AuthConfig.current.maxAllowedEmailSignInAttempts;
+    return Emails.authenticate(session, email, password);
   }
 
   /// Changes a users password.

--- modules/serverpod_auth/serverpod_auth_server/pubspec.yaml ---
@@ -20,9 +20,11 @@ dependencies:
   http: ">=0.13.0 <2.0.0"
   image: ^4.0.15
   jose: ^0.3.3
+  pointycastle: ^3.7.4
 
 dev_dependencies:
   serverpod_lints: 1.2.5
+  test: ^1.24.2
 
 dependency_overrides:
   serverpod:

--- modules/serverpod_auth/serverpod_auth_server/test/password_hash/argon2id_password_hash_test.dart ---
@@ -0,0 +1,228 @@
+import 'dart:convert';
+
+import 'package:serverpod_auth_server/src/business/password_hash.dart';
+import 'package:test/test.dart';
+
+void main() {
+  group('Given password and fixed salt', () {
+    group('when generating password hash', () {
+      test('then hash has 4 sections split by \$.', () {
+        var passwordHash = PasswordHash.argon2id('hunter2', salt: 'saltySalt');
+
+        var parts = passwordHash.split('\$');
+        expect(parts, hasLength(4));
+      });
+
+      test('then second section contains algorithm name.', () {
+        var passwordHash = PasswordHash.argon2id('hunter2', salt: 'saltySalt');
+
+        var parts = passwordHash.split('\$');
+        expect(parts[1], 'argon2id');
+      });
+
+      test('then third section contains encoded salt.', () {
+        var salt = 'saltySalt';
+
+        var passwordHash = PasswordHash.argon2id('hunter2', salt: salt);
+
+        var parts = passwordHash.split('\$');
+        expect(parts[2], const Base64Encoder().convert(salt.codeUnits));
+      });
+
+      test('then fourth section contains hash.', () {
+        var expectedHash =
+            'XE1myFwU/BfI2wTVT3Idp2htwbXRLkY3L5ysvmAR+iJJVfHMJEMFP7eFrRwMvsP0dygxYopuCiDGNHhJaIuE0Bm6SIIAJt/LoktWA+JzMdVAQQDF08anztJL8db3nIjqiRr7fTsEnH88zIMx0z+6X22ZIJoKHQ37wI7jTVhPgtEX8OSubOHA8JSKaGko9GoXa1IEO4PXZ/OWoCf+PELDySMIK5UvakJg4Rx6gjuQQJ612VfB0lI+Dw//h5mdbypxIQWBUp+cc8VYwOtKod2BOhEzn/h0R158/n9NaW4Zxz7mteja3K2Kl/fZwGpronzItYZMbw5j7pS96r/Jf227IQ==';
+
+        var passwordHash = PasswordHash.argon2id('hunter2', salt: 'saltySalt');
+
+        var parts = passwordHash.split('\$');
+        expect(parts[3], expectedHash);
+      });
+    });
+
+    group('when generating password hash with and without pepper', () {
+      var password = 'hunter2';
+      var salt = 'saltySalt';
+      var pepper = 'pepper';
+
+      var withoutPepper = PasswordHash.argon2id(password, salt: salt);
+      var withPepper =
+          PasswordHash.argon2id(password, salt: salt, pepper: pepper);
+      test('then salt is same.', () {
+        var withoutPepperSalt = withoutPepper.split('\$')[2];
+        var withPepperSalt = withPepper.split('\$')[2];
+        expect(withoutPepperSalt, withPepperSalt);
+      });
+
+      test('then hashes are different.', () {
+        var withoutPepperHash = withoutPepper.split('\$')[3];
+        var withPepperHash = withPepper.split('\$')[3];
+        expect(withoutPepperHash, isNot(withPepperHash));
+      });
+    });
+  });
+
+  group('Given password', () {
+    group('when generating password hash multiple times', () {
+      var password = 'hunter2';
+      var firstPasswordHash = PasswordHash.argon2id(password);
+      var secondPasswordHash = PasswordHash.argon2id(password);
+      test('then unique salt is generated.', () {
+        var firstSalt = firstPasswordHash.split('\$')[2];
+        var secondSalt = secondPasswordHash.split('\$')[2];
+        expect(firstSalt, isNot(secondSalt));
+      });
+
+      test('then unique hash is generated.', () {
+        var firstHash = firstPasswordHash.split('\$')[3];
+        var secondHash = secondPasswordHash.split('\$')[3];
+        expect(firstHash, isNot(secondHash));
+      });
+    });
+  });
+
+  group('Given password hash', () {
+    test('when checking if hash should be updated then no update is needed.',
+        () {
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id('hunter2'),
+        legacySalt: 'saltySalt',
+      );
+
+      expect(passwordHash.shouldUpdateHash(), isFalse);
+    });
+
+    test('when checking if hash is legacy hash then method returns false.', () {
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id('hunter2'),
+        legacySalt: 'saltySalt',
+      );
+
+      expect(passwordHash.isLegacyHash(), isFalse);
+    });
+
+    test('when validating with correct password then validator returns true',
+        () {
+      var salt = 'saltySalt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id(password, salt: salt),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test(
+        'when validating with correct password but different legacy salt then validator returns true',
+        () {
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id(password, salt: 'saltySalt'),
+        legacySalt: 'differentSalt' /* field is ignored */,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test('when validating with incorrect password then validator returns false',
+        () {
+      var salt = 'saltySalt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id('hunter2', salt: salt),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.validate('chaser1'), isFalse);
+    });
+
+    test('when validating with modified salt then validator returns false', () {
+      var password = 'hunter2';
+      var originalPasswordHash =
+          PasswordHash.argon2id(password, salt: 'original salt');
+
+      // Replace the salt in the password hash with a different one
+      var parts = originalPasswordHash.split('\$');
+      parts[2] = 'modified salt';
+      var modifiedPasswordHash = parts.join('\$');
+
+      var passwordHash = PasswordHash(
+        modifiedPasswordHash,
+        legacySalt: 'original salt' /* field is ignored */,
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with valid pepper then validator returns true.', () {
+      var salt = 'saltySalt';
+      var password = 'hunter2';
+      var pepper = 'pepper';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id(password, salt: salt, pepper: pepper),
+        legacySalt: salt,
+        pepper: pepper,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test('when validating with invalid pepper then validator returns false.',
+        () {
+      var salt = 'saltySalt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id(password, salt: salt, pepper: 'firstPepper'),
+        legacySalt: salt,
+        pepper: 'differentPepper',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with missing pepper then validator returns false.',
+        () {
+      var salt = 'saltySalt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id(password, salt: salt, pepper: 'pepper'),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with added pepper then validator returns false.', () {
+      var salt = 'saltySalt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.argon2id(password, salt: salt),
+        legacySalt: salt,
+        pepper: 'pepper',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+  });
+
+  group('Given salt that contains \$', () {
+    test(
+        'when generating password hash then hash still only has 4 parts split by \$.',
+        () {
+      var password = 'hunter2';
+      var salt = 'salty\$salt';
+
+      var passwordHash = PasswordHash.argon2id(password, salt: salt);
+      var parts = passwordHash.split('\$');
+
+      expect(parts, hasLength(4));
+    });
+  });
+}

--- modules/serverpod_auth/serverpod_auth_server/test/password_hash/legacy_password_hash_test.dart ---
@@ -0,0 +1,173 @@
+import 'package:serverpod_auth_server/src/business/password_hash.dart';
+import 'package:test/test.dart';
+
+void main() {
+  group('Given password', () {
+    test('when generating hash then hash matches regression value', () {
+      // This regression hash value was derived from the old serverpod hash
+      // generation algorithm.
+      var expectedHash =
+          '0713234b3cb6a6f98f6978f17a55a54578c580698dc1d56371502be6abb457eb';
+
+      var actualHash =
+          PasswordHash.legacyHash('hunter2', 'serverpod password salt');
+
+      expect(actualHash, expectedHash);
+    });
+
+    test('when validating with correct password then validator returns true',
+        () {
+      var salt = 'serverpod password salt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(password, salt),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test('when validating with incorrect password then validator returns false',
+        () {
+      var salt = 'serverpod password salt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash('hunter2', salt),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.validate('chaser1'), isFalse);
+    });
+
+    test('when validating with different salts then validator returns false',
+        () {
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(password, 'first salt'),
+        legacySalt: 'second salt',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+  });
+
+  group('Given password and extra salt email', () {
+    test(
+        'when generating hash with email provided then result matches regression value',
+        () {
+      // This regression hash value was derived from the old serverpod hash
+      // generation algorithm.
+      var expectedHash =
+          '4005303e6e1effd8bc7293bc3e69fe3a480a88249453aef7f58fdcf264419147';
+
+      var actualHash = PasswordHash.legacyHash(
+        'hunter2',
+        'serverpod password salt',
+        email: 'test@serverpod.dev',
+      );
+
+      expect(actualHash, expectedHash);
+    });
+  });
+
+  group('Given password hash', () {
+    test('when checking if hash should be updated then no update is needed.',
+        () {
+      var salt = 'saltySalt';
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(
+          'hunter2',
+          salt,
+        ),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.shouldUpdateHash(), isTrue);
+    });
+
+    test('when checking if hash is legacy hash then method returns true.', () {
+      var salt = 'saltySalt';
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(
+          'hunter2',
+          salt,
+        ),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.isLegacyHash(), isTrue);
+    });
+
+    test('when matching with correct password then it evaluates to true', () {
+      var salt = 'serverpod password salt';
+      var password = 'hunter2';
+      var email = 'test@serverpod.dev';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(
+          password,
+          salt,
+          email: email,
+        ),
+        legacySalt: salt,
+        legacyEmail: email,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test('when matching with incorrect password then it evaluates to false',
+        () {
+      var salt = 'serverpod password salt';
+      var email = 'test@serverpod.dev';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(
+          'hunter2',
+          salt,
+          email: email,
+        ),
+        legacySalt: salt,
+        legacyEmail: email,
+      );
+
+      expect(passwordHash.validate('chaser1'), isFalse);
+    });
+
+    test('when matching with incorrect salt then it evaluates to false', () {
+      var password = 'hunter2';
+      var email = 'test@serverpod.dev';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(
+          password,
+          'first salt',
+          email: email,
+        ),
+        legacySalt: 'second salt',
+        legacyEmail: email,
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when matching with incorrect email then it evaluates to false', () {
+      var salt = 'serverpod password salt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.legacyHash(
+          password,
+          salt,
+          email: 'first@serverpod.dev',
+        ),
+        legacySalt: salt,
+        legacyEmail: 'second@serverpod.dev',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+  });
+}

--- modules/serverpod_auth/serverpod_auth_server/test/password_hash/legacy_to_argon2id_hash_test.dart ---
@@ -0,0 +1,337 @@
+import 'dart:convert';
+
+import 'package:serverpod_auth_server/src/business/password_hash.dart';
+import 'package:test/test.dart';
+
+void main() {
+  test(
+      'Given a hash from the legacy hash used as password for argon2id hash when generating hash using same salt and base password then same hash is produced',
+      () {
+    var password = 'hunter2';
+    var legacySalt = 'legacySalt';
+    var salt = 'saltySalt';
+
+    var legacyHash = PasswordHash.legacyHash(password, legacySalt);
+    var argon2idPasswordHashFromLegacy =
+        PasswordHash.argon2id(legacyHash, salt: salt);
+    var expectedHash = argon2idPasswordHashFromLegacy.split('\$')[3];
+
+    var passwordHash = PasswordHash.migratedLegacyToArgon2idHash(
+      legacyHash,
+      legacySalt: legacySalt,
+      salt: salt,
+    );
+
+    var actualHash = passwordHash.split('\$')[3];
+
+    expect(actualHash, expectedHash);
+  });
+
+  group('Given legacyHash, legacy salt and fixed salt', () {
+    group('when generating password hash', () {
+      test('then hash has 4 sections split by \$.', () {
+        var passwordHash = PasswordHash.migratedLegacyToArgon2idHash(
+          'legacyHash',
+          legacySalt: 'legacySalt',
+          salt: 'saltySalt',
+        );
+
+        var parts = passwordHash.split('\$');
+        expect(parts, hasLength(4));
+      });
+
+      test('then second section contains algorithm name.', () {
+        var passwordHash = PasswordHash.migratedLegacyToArgon2idHash(
+          'legacyHash',
+          legacySalt: 'legacySalt',
+          salt: 'saltySalt',
+        );
+
+        var parts = passwordHash.split('\$');
+        expect(parts[1], 'migratedLegacy');
+      });
+
+      test('then third section contains encoded salt.', () {
+        var salt = 'saltySalt';
+
+        var passwordHash = PasswordHash.migratedLegacyToArgon2idHash(
+          'legacyHash',
+          legacySalt: 'legacySalt',
+          salt: salt,
+        );
+
+        var parts = passwordHash.split('\$');
+        expect(parts[2], const Base64Encoder().convert(salt.codeUnits));
+      });
+
+      test('then fourth section contains hash.', () {
+        var expectedHash =
+            'aF5cAla/wBZ6Ka/kpGfmBC9kOftCRBr5srDZFhtAiF9SUqNUwefbsHBJZDX9cOo2B7MHNZzJDbNRg2VH6+VJtp70gHdveN7EJGrcSsaiReI1x4pX/sQ0l78FhIZ/+vYsuFGDCcr4qg1bkIk6apwmGMzJjKMSKy07bPXNcemm3EPhuCC9OLeBQHtS642TsWVKX9412XxGR2aDbRIDJItBMfWlLH0i3JSWxqcUZLtES7bwcvPdqj68jHT6nzAzFJAiOg4NkaTLye/SlKe/q6LjUci/NYYkJ9ujNnJD410E4AR6yVJqWZaGJMTrr38A0Vigayj4IvPaYaMCwho9Pr8/Jg==';
+
+        var passwordHash = PasswordHash.migratedLegacyToArgon2idHash(
+          'legacyHash',
+          legacySalt: 'legacySalt',
+          salt: 'saltySalt',
+        );
+
+        var parts = passwordHash.split('\$');
+        expect(parts[3], expectedHash);
+      });
+    });
+
+    group('when generating password hash with and without pepper', () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var salt = 'saltySalt';
+      var pepper = 'pepper';
+
+      var withoutPepper = PasswordHash.migratedLegacyToArgon2idHash(
+        password,
+        legacySalt: legacySalt,
+        salt: salt,
+      );
+      var withPepper = PasswordHash.migratedLegacyToArgon2idHash(
+        password,
+        legacySalt: legacySalt,
+        salt: salt,
+        pepper: pepper,
+      );
+
+      test('then salt is same.', () {
+        var withoutPepperSalt = withoutPepper.split('\$')[2];
+        var withPepperSalt = withPepper.split('\$')[2];
+        expect(withoutPepperSalt, withPepperSalt);
+      });
+
+      test('then hashes are different.', () {
+        var withoutPepperHash = withoutPepper.split('\$')[3];
+        var withPepperHash = withPepper.split('\$')[3];
+        expect(withoutPepperHash, isNot(withPepperHash));
+      });
+    });
+  });
+
+  group('Given password', () {
+    group('when generating password hash multiple times', () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var firstPasswordHash = PasswordHash.migratedLegacyToArgon2idHash(
+        password,
+        legacySalt: legacySalt,
+      );
+      var secondPasswordHash = PasswordHash.migratedLegacyToArgon2idHash(
+        password,
+        legacySalt: legacySalt,
+      );
+      test('then unique salt is generated.', () {
+        var firstSalt = firstPasswordHash.split('\$')[2];
+        var secondSalt = secondPasswordHash.split('\$')[2];
+        expect(firstSalt, isNot(secondSalt));
+      });
+
+      test('then unique hash is generated.', () {
+        var firstHash = firstPasswordHash.split('\$')[3];
+        var secondHash = secondPasswordHash.split('\$')[3];
+        expect(firstHash, isNot(secondHash));
+      });
+    });
+  });
+
+  group('Given password hash', () {
+    test('when checking if hash should be updated then no update is needed.',
+        () {
+      var salt = 'saltySalt';
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          'hunter2',
+          legacySalt: salt,
+        ),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.shouldUpdateHash(), isTrue);
+    });
+
+    test('when checking if hash is legacy hash then method returns true.', () {
+      var salt = 'saltySalt';
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          'hunter2',
+          legacySalt: salt,
+        ),
+        legacySalt: salt,
+      );
+
+      expect(passwordHash.isLegacyHash(), isFalse);
+    });
+    test('when validating with correct password then validator returns true',
+        () {
+      var salt = 'saltySalt';
+      var legacySalt = 'legacySalt';
+      var password = 'hunter2';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash(password, legacySalt),
+          legacySalt: legacySalt,
+          salt: salt,
+        ),
+        legacySalt: legacySalt,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test(
+        'when validating with correct password but different legacy salt then validator returns false',
+        () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash(password, legacySalt),
+          legacySalt: legacySalt,
+          salt: 'saltySalt',
+        ),
+        legacySalt: 'differentLegacySalt',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with incorrect password then validator returns false',
+        () {
+      var salt = 'saltySalt';
+      var legacySalt = 'legacySalt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash('hunter2', legacySalt),
+          legacySalt: legacySalt,
+          salt: salt,
+        ),
+        legacySalt: legacySalt,
+      );
+
+      expect(passwordHash.validate('chaser1'), isFalse);
+    });
+
+    test('when validating with modified salt then validator returns false', () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var originalPasswordHash = PasswordHash.migratedLegacyToArgon2idHash(
+        PasswordHash.legacyHash(password, legacySalt),
+        legacySalt: legacySalt,
+        salt: 'original salt',
+      );
+
+      // Replace the salt in the password hash with a different one
+      var parts = originalPasswordHash.split('\$');
+      parts[2] = 'modified salt';
+      var modifiedPasswordHash = parts.join('\$');
+
+      var passwordHash = PasswordHash(
+        modifiedPasswordHash,
+        legacySalt: legacySalt,
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with valid pepper then validator returns true.', () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var salt = 'saltySalt';
+      var pepper = 'pepper';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash(password, legacySalt),
+          legacySalt: legacySalt,
+          salt: salt,
+          pepper: pepper,
+        ),
+        legacySalt: legacySalt,
+        pepper: pepper,
+      );
+
+      expect(passwordHash.validate(password), isTrue);
+    });
+
+    test('when validating with invalid pepper then validator returns false.',
+        () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var salt = 'saltySalt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash(password, legacySalt),
+          legacySalt: legacySalt,
+          salt: salt,
+          pepper: 'pepper',
+        ),
+        legacySalt: legacySalt,
+        pepper: 'differentPepper',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with missing pepper then validator returns false.',
+        () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var salt = 'saltySalt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash(password, legacySalt),
+          legacySalt: legacySalt,
+          salt: salt,
+          pepper: 'pepper',
+        ),
+        legacySalt: legacySalt,
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+
+    test('when validating with added pepper then validator returns false.', () {
+      var password = 'hunter2';
+      var legacySalt = 'legacySalt';
+      var salt = 'saltySalt';
+
+      var passwordHash = PasswordHash(
+        PasswordHash.migratedLegacyToArgon2idHash(
+          PasswordHash.legacyHash(password, legacySalt),
+          legacySalt: legacySalt,
+          salt: salt,
+        ),
+        legacySalt: legacySalt,
+        pepper: 'pepper',
+      );
+
+      expect(passwordHash.validate(password), isFalse);
+    });
+  });
+
+  group('Given salt that contains \$', () {
+    test(
+        'when generating password hash then hash still only has 4 parts split by \$.',
+        () {
+      var legacySalt = 'legacySalt';
+      var salt = 'salty\$salt';
+
+      var passwordHash = PasswordHash.migratedLegacyToArgon2idHash(
+        PasswordHash.legacyHash('hunter2', legacySalt),
+        legacySalt: legacySalt,
+        salt: salt,
+      );
+      var parts = passwordHash.split('\$');
+
+      expect(parts, hasLength(4));
+    });
+  });
+}

--- modules/serverpod_auth/serverpod_auth_server/test/password_hash/password_hash_test.dart ---
@@ -0,0 +1,14 @@
+import 'package:serverpod_auth_server/src/business/password_hash.dart';
+import 'package:test/test.dart';
+
+void main() {
+  test(
+      'Given invalid password hash when instantiating password hash then argument error is thrown.',
+      () {
+    var passwordHash = r'$invalid$password$hash';
+    expect(
+      () => PasswordHash(passwordHash, legacySalt: 'salt'),
+      throwsArgumentError,
+    );
+  });
+}

--- templates/pubspecs/modules/serverpod_auth/serverpod_auth_server/pubspec.yaml ---
@@ -19,9 +19,11 @@ dependencies:
   http: ">=0.13.0 <2.0.0"
   image: ^4.0.15
   jose: ^0.3.3
+  pointycastle: ^3.7.4
 
 dev_dependencies:
   serverpod_lints: VERSION
+  test: ^1.24.2
 
 dependency_overrides:
   serverpod:

--- tests/serverpod_test_client/lib/src/protocol/client.dart ---
@@ -1627,6 +1627,55 @@ class EndpointTransactionsDatabase extends _i1.EndpointRef {
       );
 }
 
+/// {@category Endpoint}
+class EndpointEmailAuthTestMethods extends _i1.EndpointRef {
+  EndpointEmailAuthTestMethods(_i1.EndpointCaller caller) : super(caller);
+
+  @override
+  String get name => 'emailAuthTestMethods';
+
+  _i2.Future<String?> findVerificationCode(
+    String userName,
+    String email,
+  ) =>
+      caller.callServerEndpoint<String?>(
+        'emailAuthTestMethods',
+        'findVerificationCode',
+        {
+          'userName': userName,
+          'email': email,
+        },
+      );
+
+  _i2.Future<String?> findResetCode(String email) =>
+      caller.callServerEndpoint<String?>(
+        'emailAuthTestMethods',
+        'findResetCode',
+        {'email': email},
+      );
+
+  _i2.Future<void> tearDown() => caller.callServerEndpoint<void>(
+        'emailAuthTestMethods',
+        'tearDown',
+        {},
+      );
+
+  _i2.Future<bool> createUser(
+    String userName,
+    String email,
+    String password,
+  ) =>
+      caller.callServerEndpoint<bool>(
+        'emailAuthTestMethods',
+        'createUser',
+        {
+          'userName': userName,
+          'email': email,
+          'password': password,
+        },
+      );
+}
+
 /// {@category Endpoint}
 class EndpointRelation extends _i1.EndpointRef {
   EndpointRelation(_i1.EndpointCaller caller) : super(caller);
@@ -2750,6 +2799,7 @@ class Client extends _i1.ServerpodClient {
     databaseBatchGenerated = EndpointDatabaseBatchGenerated(this);
     databaseListRelationMethods = EndpointDatabaseListRelationMethods(this);
     transactionsDatabase = EndpointTransactionsDatabase(this);
+    emailAuthTestMethods = EndpointEmailAuthTestMethods(this);
     relation = EndpointRelation(this);
     exceptionTest = EndpointExceptionTest(this);
     failedCalls = EndpointFailedCalls(this);
@@ -2813,6 +2863,8 @@ class Client extends _i1.ServerpodClient {
 
   late final EndpointTransactionsDatabase transactionsDatabase;
 
+  late final EndpointEmailAuthTestMethods emailAuthTestMethods;
+
   late final EndpointRelation relation;
 
   late final EndpointExceptionTest exceptionTest;
@@ -2877,6 +2929,7 @@ class Client extends _i1.ServerpodClient {
         'databaseBatchGenerated': databaseBatchGenerated,
         'databaseListRelationMethods': databaseListRelationMethods,
         'transactionsDatabase': transactionsDatabase,
+        'emailAuthTestMethods': emailAuthTestMethods,
         'relation': relation,
         'exceptionTest': exceptionTest,
         'failedCalls': failedCalls,

--- tests/serverpod_test_server/lib/server.dart ---
@@ -39,6 +39,14 @@ void run(List<String> args) async {
     onUserWillBeCreated: (session, userInfo, authMethod) async {
       return (userInfo.email!.endsWith('.bar'));
     },
+    sendValidationEmail: (session, email, validationCode) async {
+      print('Sending validation email to $email with code $validationCode');
+      return true;
+    },
+    sendPasswordResetEmail: (session, userInfo, resetCode) async {
+      print('Sending reset email to ${userInfo.email} with code $resetCode');
+      return true;
+    },
   ));
 
   // Add route to web server

--- tests/serverpod_test_server/lib/src/endpoints/email_auth_provider.dart ---
@@ -0,0 +1,64 @@
+import 'package:serverpod/serverpod.dart';
+import 'package:serverpod_auth_server/module.dart';
+
+class EmailAuthTestMethods extends Endpoint {
+  Future<String?> findVerificationCode(
+    Session session,
+    String userName,
+    String email,
+  ) async {
+    var authRequest = await EmailCreateAccountRequest.db.findFirstRow(
+      session,
+      where: (t) => t.userName.equals(userName) & t.email.equals(email),
+    );
+
+    return authRequest?.verificationCode;
+  }
+
+  Future<String?> findResetCode(Session session, String email) async {
+    var userInfo = await UserInfo.db.findFirstRow(
+      session,
+      where: (t) => t.email.equals(email),
+    );
+
+    var userId = userInfo?.id;
+    if (userId == null) return null;
+
+    var resetRequest = await EmailReset.db.findFirstRow(
+      session,
+      where: (t) => t.userId.equals(userId),
+    );
+
+    return resetRequest?.verificationCode;
+  }
+
+  Future<void> tearDown(Session session) async {
+    await Future.wait([
+      EmailCreateAccountRequest.db.deleteWhere(
+        session,
+        where: (t) => Constant.bool(true),
+      ),
+      EmailAuth.db.deleteWhere(
+        session,
+        where: (t) => Constant.bool(true),
+      ),
+      UserImage.db.deleteWhere(
+        session,
+        where: (t) => Constant.bool(true),
+      ),
+      UserInfo.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+      EmailReset.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+    ]);
+  }
+
+  Future<bool> createUser(
+    Session session,
+    String userName,
+    String email,
+    String password,
+  ) async {
+    var userInfo = await Emails.createUser(session, userName, email, password);
+    print('User info: $userInfo');
+    return userInfo != null;
+  }
+}

--- tests/serverpod_test_server/lib/src/generated/endpoints.dart ---
@@ -29,67 +29,68 @@ import '../endpoints/database_batch.dart' as _i18;
 import '../endpoints/database_batch_generated.dart' as _i19;
 import '../endpoints/database_list_relation_methods.dart' as _i20;
 import '../endpoints/database_transactions.dart' as _i21;
-import '../endpoints/entity_relation.dart' as _i22;
-import '../endpoints/exception_test_endpoint.dart' as _i23;
-import '../endpoints/failed_calls.dart' as _i24;
-import '../endpoints/field_scopes.dart' as _i25;
-import '../endpoints/future_calls.dart' as _i26;
-import '../endpoints/list_parameters.dart' as _i27;
-import '../endpoints/logging.dart' as _i28;
-import '../endpoints/logging_disabled.dart' as _i29;
-import '../endpoints/map_parameters.dart' as _i30;
-import '../endpoints/models_with_relations/one_to_many.dart' as _i31;
-import '../endpoints/module_serialization.dart' as _i32;
-import '../endpoints/named_parameters.dart' as _i33;
-import '../endpoints/optional_parameters.dart' as _i34;
-import '../endpoints/redis.dart' as _i35;
-import '../endpoints/signin_required.dart' as _i36;
-import '../endpoints/simple.dart' as _i37;
-import '../endpoints/streaming.dart' as _i38;
-import '../endpoints/streaming_logging.dart' as _i39;
-import '../endpoints/subDir/subSubDir/subsubdir_test_endpoint.dart' as _i40;
-import '../endpoints/subDir/subdir_test_endpoint.dart' as _i41;
-import 'dart:typed_data' as _i42;
-import 'package:uuid/uuid_value.dart' as _i43;
-import 'package:serverpod_test_server/src/generated/types.dart' as _i44;
-import 'package:serverpod_test_server/src/generated/test_enum.dart' as _i45;
-import 'package:serverpod_test_server/src/custom_classes.dart' as _i46;
-import 'package:serverpod_test_shared/src/external_custom_class.dart' as _i47;
-import 'package:serverpod_test_shared/src/freezed_custom_class.dart' as _i48;
-import 'package:serverpod_test_server/src/generated/simple_data.dart' as _i49;
+import '../endpoints/email_auth_provider.dart' as _i22;
+import '../endpoints/entity_relation.dart' as _i23;
+import '../endpoints/exception_test_endpoint.dart' as _i24;
+import '../endpoints/failed_calls.dart' as _i25;
+import '../endpoints/field_scopes.dart' as _i26;
+import '../endpoints/future_calls.dart' as _i27;
+import '../endpoints/list_parameters.dart' as _i28;
+import '../endpoints/logging.dart' as _i29;
+import '../endpoints/logging_disabled.dart' as _i30;
+import '../endpoints/map_parameters.dart' as _i31;
+import '../endpoints/models_with_relations/one_to_many.dart' as _i32;
+import '../endpoints/module_serialization.dart' as _i33;
+import '../endpoints/named_parameters.dart' as _i34;
+import '../endpoints/optional_parameters.dart' as _i35;
+import '../endpoints/redis.dart' as _i36;
+import '../endpoints/signin_required.dart' as _i37;
+import '../endpoints/simple.dart' as _i38;
+import '../endpoints/streaming.dart' as _i39;
+import '../endpoints/streaming_logging.dart' as _i40;
+import '../endpoints/subDir/subSubDir/subsubdir_test_endpoint.dart' as _i41;
+import '../endpoints/subDir/subdir_test_endpoint.dart' as _i42;
+import 'dart:typed_data' as _i43;
+import 'package:uuid/uuid_value.dart' as _i44;
+import 'package:serverpod_test_server/src/generated/types.dart' as _i45;
+import 'package:serverpod_test_server/src/generated/test_enum.dart' as _i46;
+import 'package:serverpod_test_server/src/custom_classes.dart' as _i47;
+import 'package:serverpod_test_shared/src/external_custom_class.dart' as _i48;
+import 'package:serverpod_test_shared/src/freezed_custom_class.dart' as _i49;
+import 'package:serverpod_test_server/src/generated/simple_data.dart' as _i50;
 import 'package:serverpod_test_server/src/generated/object_with_enum.dart'
-    as _i50;
-import 'package:serverpod_test_server/src/generated/object_with_object.dart'
     as _i51;
-import 'package:serverpod_test_server/src/generated/unique_data.dart' as _i52;
+import 'package:serverpod_test_server/src/generated/object_with_object.dart'
+    as _i52;
+import 'package:serverpod_test_server/src/generated/unique_data.dart' as _i53;
 import 'package:serverpod_test_server/src/generated/related_unique_data.dart'
-    as _i53;
-import 'package:serverpod_test_server/src/generated/models_with_list_relations/city.dart'
     as _i54;
-import 'package:serverpod_test_server/src/generated/models_with_list_relations/organization.dart'
+import 'package:serverpod_test_server/src/generated/models_with_list_relations/city.dart'
     as _i55;
-import 'package:serverpod_test_server/src/generated/models_with_list_relations/person.dart'
+import 'package:serverpod_test_server/src/generated/models_with_list_relations/organization.dart'
     as _i56;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/citizen.dart'
+import 'package:serverpod_test_server/src/generated/models_with_list_relations/person.dart'
     as _i57;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/company.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/citizen.dart'
     as _i58;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/address.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/company.dart'
     as _i59;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/town.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/address.dart'
     as _i60;
-import 'package:serverpod_test_server/src/generated/models_with_relations/self_relation/one_to_one/post.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_one/town.dart'
     as _i61;
-import 'package:serverpod_test_server/src/generated/object_field_scopes.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/self_relation/one_to_one/post.dart'
     as _i62;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_many/comment.dart'
+import 'package:serverpod_test_server/src/generated/object_field_scopes.dart'
     as _i63;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_many/order.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_many/comment.dart'
     as _i64;
-import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_many/customer.dart'
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_many/order.dart'
     as _i65;
-import 'package:serverpod_test_module_server/module.dart' as _i66;
-import 'package:serverpod_auth_server/module.dart' as _i67;
+import 'package:serverpod_test_server/src/generated/models_with_relations/one_to_many/customer.dart'
+    as _i66;
+import 'package:serverpod_test_module_server/module.dart' as _i67;
+import 'package:serverpod_auth_server/module.dart' as _i68;
 
 class Endpoints extends _i1.EndpointDispatch {
   @override
@@ -215,121 +216,127 @@ class Endpoints extends _i1.EndpointDispatch {
           'transactionsDatabase',
           null,
         ),
-      'relation': _i22.RelationEndpoint()
+      'emailAuthTestMethods': _i22.EmailAuthTestMethods()
+        ..initialize(
+          server,
+          'emailAuthTestMethods',
+          null,
+        ),
+      'relation': _i23.RelationEndpoint()
         ..initialize(
           server,
           'relation',
           null,
         ),
-      'exceptionTest': _i23.ExceptionTestEndpoint()
+      'exceptionTest': _i24.ExceptionTestEndpoint()
         ..initialize(
           server,
           'exceptionTest',
           null,
         ),
-      'failedCalls': _i24.FailedCallsEndpoint()
+      'failedCalls': _i25.FailedCallsEndpoint()
         ..initialize(
           server,
           'failedCalls',
           null,
         ),
-      'fieldScopes': _i25.FieldScopesEndpoint()
+      'fieldScopes': _i26.FieldScopesEndpoint()
         ..initialize(
           server,
           'fieldScopes',
           null,
         ),
-      'futureCalls': _i26.FutureCallsEndpoint()
+      'futureCalls': _i27.FutureCallsEndpoint()
         ..initialize(
           server,
           'futureCalls',
           null,
         ),
-      'listParameters': _i27.ListParametersEndpoint()
+      'listParameters': _i28.ListParametersEndpoint()
         ..initialize(
           server,
           'listParameters',
           null,
         ),
-      'logging': _i28.LoggingEndpoint()
+      'logging': _i29.LoggingEndpoint()
         ..initialize(
           server,
           'logging',
           null,
         ),
-      'loggingDisabled': _i29.LoggingDisabledEndpoint()
+      'loggingDisabled': _i30.LoggingDisabledEndpoint()
         ..initialize(
           server,
           'loggingDisabled',
           null,
         ),
-      'mapParameters': _i30.MapParametersEndpoint()
+      'mapParameters': _i31.MapParametersEndpoint()
         ..initialize(
           server,
           'mapParameters',
           null,
         ),
-      'oneToMany': _i31.OneToManyEndpoint()
+      'oneToMany': _i32.OneToManyEndpoint()
         ..initialize(
           server,
           'oneToMany',
           null,
         ),
-      'moduleSerialization': _i32.ModuleSerializationEndpoint()
+      'moduleSerialization': _i33.ModuleSerializationEndpoint()
         ..initialize(
           server,
           'moduleSerialization',
           null,
         ),
-      'namedParameters': _i33.NamedParametersEndpoint()
+      'namedParameters': _i34.NamedParametersEndpoint()
         ..initialize(
           server,
           'namedParameters',
           null,
         ),
-      'optionalParameters': _i34.OptionalParametersEndpoint()
+      'optionalParameters': _i35.OptionalParametersEndpoint()
         ..initialize(
           server,
           'optionalParameters',
           null,
         ),
-      'redis': _i35.RedisEndpoint()
+      'redis': _i36.RedisEndpoint()
         ..initialize(
           server,
           'redis',
           null,
         ),
-      'signInRequired': _i36.SignInRequiredEndpoint()
+      'signInRequired': _i37.SignInRequiredEndpoint()
         ..initialize(
           server,
           'signInRequired',
           null,
         ),
-      'simple': _i37.SimpleEndpoint()
+      'simple': _i38.SimpleEndpoint()
         ..initialize(
           server,
           'simple',
           null,
         ),
-      'streaming': _i38.StreamingEndpoint()
+      'streaming': _i39.StreamingEndpoint()
         ..initialize(
           server,
           'streaming',
           null,
         ),
-      'streamingLogging': _i39.StreamingLoggingEndpoint()
+      'streamingLogging': _i40.StreamingLoggingEndpoint()
         ..initialize(
           server,
           'streamingLogging',
           null,
         ),
-      'subSubDirTest': _i40.SubSubDirTestEndpoint()
+      'subSubDirTest': _i41.SubSubDirTestEndpoint()
         ..initialize(
           server,
           'subSubDirTest',
           null,
         ),
-      'subDirTest': _i41.SubDirTestEndpoint()
+      'subDirTest': _i42.SubDirTestEndpoint()
         ..initialize(
           server,
           'subDirTest',
@@ -571,7 +578,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i42.ByteData?>(),
+              type: _i1.getType<_i43.ByteData?>(),
               nullable: true,
             )
           },
@@ -607,7 +614,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i43.UuidValue?>(),
+              type: _i1.getType<_i44.UuidValue?>(),
               nullable: true,
             )
           },
@@ -646,7 +653,7 @@ class Endpoints extends _i1.EndpointDispatch {
             ),
             'byteData': _i1.ParameterDescription(
               name: 'byteData',
-              type: _i1.getType<_i42.ByteData>(),
+              type: _i1.getType<_i43.ByteData>(),
               nullable: false,
             ),
           },
@@ -791,7 +798,7 @@ class Endpoints extends _i1.EndpointDispatch {
             ),
             'byteData': _i1.ParameterDescription(
               name: 'byteData',
-              type: _i1.getType<_i42.ByteData>(),
+              type: _i1.getType<_i43.ByteData>(),
               nullable: false,
             ),
           },
@@ -931,7 +938,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -1052,7 +1059,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -1312,7 +1319,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -1572,7 +1579,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -1832,7 +1839,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -1871,7 +1878,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i45.TestEnum?>(),
+              type: _i1.getType<_i46.TestEnum?>(),
               nullable: true,
             )
           },
@@ -1890,7 +1897,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i45.TestEnum?>(),
+              type: _i1.getType<_i46.TestEnum?>(),
               nullable: true,
             )
           },
@@ -1909,7 +1916,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i45.TestEnum>>(),
+              type: _i1.getType<List<_i46.TestEnum>>(),
               nullable: false,
             )
           },
@@ -1928,7 +1935,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i45.TestEnum>>(),
+              type: _i1.getType<List<_i46.TestEnum>>(),
               nullable: false,
             )
           },
@@ -1953,7 +1960,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -2200,7 +2207,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -2368,7 +2375,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -2407,7 +2414,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i43.UuidValue?>(),
+              type: _i1.getType<_i44.UuidValue?>(),
               nullable: true,
             )
           },
@@ -2426,7 +2433,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i43.UuidValue?>(),
+              type: _i1.getType<_i44.UuidValue?>(),
               nullable: true,
             )
           },
@@ -2445,7 +2452,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i43.UuidValue>>(),
+              type: _i1.getType<List<_i44.UuidValue>>(),
               nullable: false,
             )
           },
@@ -2464,7 +2471,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i43.UuidValue>>(),
+              type: _i1.getType<List<_i44.UuidValue>>(),
               nullable: false,
             )
           },
@@ -2489,7 +2496,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i46.CustomClass>(),
+              type: _i1.getType<_i47.CustomClass>(),
               nullable: false,
             )
           },
@@ -2508,7 +2515,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i46.CustomClass?>(),
+              type: _i1.getType<_i47.CustomClass?>(),
               nullable: true,
             )
           },
@@ -2527,7 +2534,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i46.CustomClass2>(),
+              type: _i1.getType<_i47.CustomClass2>(),
               nullable: false,
             )
           },
@@ -2546,7 +2553,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i46.CustomClass2?>(),
+              type: _i1.getType<_i47.CustomClass2?>(),
               nullable: true,
             )
           },
@@ -2565,7 +2572,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i47.ExternalCustomClass>(),
+              type: _i1.getType<_i48.ExternalCustomClass>(),
               nullable: false,
             )
           },
@@ -2584,7 +2591,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i47.ExternalCustomClass?>(),
+              type: _i1.getType<_i48.ExternalCustomClass?>(),
               nullable: true,
             )
           },
@@ -2603,7 +2610,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i48.FreezedCustomClass>(),
+              type: _i1.getType<_i49.FreezedCustomClass>(),
               nullable: false,
             )
           },
@@ -2622,7 +2629,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i48.FreezedCustomClass?>(),
+              type: _i1.getType<_i49.FreezedCustomClass?>(),
               nullable: true,
             )
           },
@@ -2709,7 +2716,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'simpleData': _i1.ParameterDescription(
               name: 'simpleData',
-              type: _i1.getType<_i49.SimpleData>(),
+              type: _i1.getType<_i50.SimpleData>(),
               nullable: false,
             )
           },
@@ -2728,7 +2735,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'simpleData': _i1.ParameterDescription(
               name: 'simpleData',
-              type: _i1.getType<_i49.SimpleData>(),
+              type: _i1.getType<_i50.SimpleData>(),
               nullable: false,
             )
           },
@@ -2747,7 +2754,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'simpleData': _i1.ParameterDescription(
               name: 'simpleData',
-              type: _i1.getType<_i49.SimpleData>(),
+              type: _i1.getType<_i50.SimpleData>(),
               nullable: false,
             )
           },
@@ -2786,7 +2793,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i44.Types>(),
+              type: _i1.getType<_i45.Types>(),
               nullable: false,
             )
           },
@@ -2804,7 +2811,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i44.Types>(),
+              type: _i1.getType<_i45.Types>(),
               nullable: false,
             )
           },
@@ -2838,7 +2845,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'types': _i1.ParameterDescription(
               name: 'types',
-              type: _i1.getType<_i44.Types>(),
+              type: _i1.getType<_i45.Types>(),
               nullable: false,
             )
           },
@@ -2876,7 +2883,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'object': _i1.ParameterDescription(
               name: 'object',
-              type: _i1.getType<_i50.ObjectWithEnum>(),
+              type: _i1.getType<_i51.ObjectWithEnum>(),
               nullable: false,
             )
           },
@@ -3092,7 +3099,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'object': _i1.ParameterDescription(
               name: 'object',
-              type: _i1.getType<_i51.ObjectWithObject>(),
+              type: _i1.getType<_i52.ObjectWithObject>(),
               nullable: false,
             )
           },
@@ -3156,7 +3163,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i52.UniqueData>>(),
+              type: _i1.getType<List<_i53.UniqueData>>(),
               nullable: false,
             )
           },
@@ -3174,7 +3181,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -3193,7 +3200,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i52.UniqueData>>(),
+              type: _i1.getType<List<_i53.UniqueData>>(),
               nullable: false,
             )
           },
@@ -3211,7 +3218,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -3230,7 +3237,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i52.UniqueData>>(),
+              type: _i1.getType<List<_i53.UniqueData>>(),
               nullable: false,
             )
           },
@@ -3248,7 +3255,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i53.RelatedUniqueData>(),
+              type: _i1.getType<_i54.RelatedUniqueData>(),
               nullable: false,
             )
           },
@@ -3329,7 +3336,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i52.UniqueData>>(),
+              type: _i1.getType<List<_i53.UniqueData>>(),
               nullable: false,
             )
           },
@@ -3349,7 +3356,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -3369,7 +3376,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i52.UniqueData>>(),
+              type: _i1.getType<List<_i53.UniqueData>>(),
               nullable: false,
             )
           },
@@ -3389,7 +3396,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i44.Types>>(),
+              type: _i1.getType<List<_i45.Types>>(),
               nullable: false,
             )
           },
@@ -3409,7 +3416,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<List<_i52.UniqueData>>(),
+              type: _i1.getType<List<_i53.UniqueData>>(),
               nullable: false,
             )
           },
@@ -3429,7 +3436,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'value': _i1.ParameterDescription(
               name: 'value',
-              type: _i1.getType<_i53.RelatedUniqueData>(),
+              type: _i1.getType<_i54.RelatedUniqueData>(),
               nullable: false,
             )
           },
@@ -3517,7 +3524,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'city': _i1.ParameterDescription(
               name: 'city',
-              type: _i1.getType<_i54.City>(),
+              type: _i1.getType<_i55.City>(),
               nullable: false,
             )
           },
@@ -3537,7 +3544,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'organization': _i1.ParameterDescription(
               name: 'organization',
-              type: _i1.getType<_i55.Organization>(),
+              type: _i1.getType<_i56.Organization>(),
               nullable: false,
             )
           },
@@ -3557,7 +3564,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'person': _i1.ParameterDescription(
               name: 'person',
-              type: _i1.getType<_i56.Person>(),
+              type: _i1.getType<_i57.Person>(),
               nullable: false,
             )
           },
@@ -3577,12 +3584,12 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'city': _i1.ParameterDescription(
               name: 'city',
-              type: _i1.getType<_i54.City>(),
+              type: _i1.getType<_i55.City>(),
               nullable: false,
             ),
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i56.Person>(),
+              type: _i1.getType<_i57.Person>(),
               nullable: false,
             ),
           },
@@ -3603,12 +3610,12 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'city': _i1.ParameterDescription(
               name: 'city',
-              type: _i1.getType<_i54.City>(),
+              type: _i1.getType<_i55.City>(),
               nullable: false,
             ),
             'citizens': _i1.ParameterDescription(
               name: 'citizens',
-              type: _i1.getType<List<_i56.Person>>(),
+              type: _i1.getType<List<_i57.Person>>(),
               nullable: false,
             ),
           },
@@ -3629,7 +3636,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i56.Person>(),
+              type: _i1.getType<_i57.Person>(),
               nullable: false,
             )
           },
@@ -3649,7 +3656,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'citizens': _i1.ParameterDescription(
               name: 'citizens',
-              type: _i1.getType<List<_i56.Person>>(),
+              type: _i1.getType<List<_i57.Person>>(),
               nullable: false,
             )
           },
@@ -3689,12 +3696,12 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'org': _i1.ParameterDescription(
               name: 'org',
-              type: _i1.getType<_i55.Organization>(),
+              type: _i1.getType<_i56.Organization>(),
               nullable: false,
             ),
             'person': _i1.ParameterDescription(
               name: 'person',
-              type: _i1.getType<_i56.Person>(),
+              type: _i1.getType<_i57.Person>(),
               nullable: false,
             ),
           },
@@ -3715,12 +3722,12 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'org': _i1.ParameterDescription(
               name: 'org',
-              type: _i1.getType<_i55.Organization>(),
+              type: _i1.getType<_i56.Organization>(),
               nullable: false,
             ),
             'persons': _i1.ParameterDescription(
               name: 'persons',
-              type: _i1.getType<List<_i56.Person>>(),
+              type: _i1.getType<List<_i57.Person>>(),
               nullable: false,
             ),
           },
@@ -3741,7 +3748,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'person': _i1.ParameterDescription(
               name: 'person',
-              type: _i1.getType<_i56.Person>(),
+              type: _i1.getType<_i57.Person>(),
               nullable: false,
             )
           },
@@ -3761,7 +3768,7 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'persons': _i1.ParameterDescription(
               name: 'persons',
-              type: _i1.getType<List<_i56.Person>>(),
+              type: _i1.getType<List<_i57.Person>>(),
               nullable: false,
             )
           },
@@ -3867,6 +3874,97 @@ class Endpoints extends _i1.EndpointDispatch {
         ),
       },
     );
+    connectors['emailAuthTestMethods'] = _i1.EndpointConnector(
+      name: 'emailAuthTestMethods',
+      endpoint: endpoints['emailAuthTestMethods']!,
+      methodConnectors: {
+        'findVerificationCode': _i1.MethodConnector(
+          name: 'findVerificationCode',
+          params: {
+            'userName': _i1.ParameterDescription(
+              name: 'userName',
+              type: _i1.getType<String>(),
+              nullable: false,
+            ),
+            'email': _i1.ParameterDescription(
+              name: 'email',
+              type: _i1.getType<String>(),
+              nullable: false,
+            ),
+          },
+          call: (
+            _i1.Session session,
+            Map<String, dynamic> params,
+          ) async =>
+              (endpoints['emailAuthTestMethods'] as _i22.EmailAuthTestMethods)
+                  .findVerificationCode(
+            session,
+            params['userName'],
+            params['email'],
+          ),
+        ),
+        'findResetCode': _i1.MethodConnector(
+          name: 'findResetCode',
+          params: {
+            'email': _i1.ParameterDescription(
+              name: 'email',
+              type: _i1.getType<String>(),
+              nullable: false,
+            )
+          },
+          call: (
+            _i1.Session session,
+            Map<String, dynamic> params,
+          ) async =>
+              (endpoints['emailAuthTestMethods'] as _i22.EmailAuthTestMethods)
+                  .findResetCode(
+            session,
+            params['email'],
+          ),
+        ),
+        'tearDown': _i1.MethodConnector(
+          name: 'tearDown',
+          params: {},
+          call: (
+            _i1.Session session,
+            Map<String, dynamic> params,
+          ) async =>
+              (endpoints['emailAuthTestMethods'] as _i22.EmailAuthTestMethods)
+                  .tearDown(session),
+        ),
+        'createUser': _i1.MethodConnector(
+          name: 'createUser',
+          params: {
+            'userName': _i1.ParameterDescription(
+              name: 'userName',
+              type: _i1.getType<String>(),
+              nullable: false,
+            ),
+            'email': _i1.ParameterDescription(
+              name: 'email',
+              type: _i1.getType<String>(),
+              nullable: false,
+            ),
+            'password': _i1.ParameterDescription(
+              name: 'password',
+              type: _i1.getType<String>(),
+              nullable: false,
+            ),
+          },
+          call: (
+            _i1.Session session,
+            Map<String, dynamic> params,
+          ) async =>
+              (endpoints['emailAuthTestMethods'] as _i22.EmailAuthTestMethods)
+                  .createUser(
+            session,
+            params['userName'],
+            params['email'],
+            params['password'],
+          ),
+        ),
+      },
+    );
     connectors['relation'] = _i1.EndpointConnector(
       name: 'relation',
       endpoint: endpoints['relation']!,
@@ -3884,7 +3982,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindWhereCompanyNameIs(
             session,
             companyName: params['companyName'],
@@ -3903,7 +4001,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindWhereCompanyTownNameIs(
             session,
             townName: params['townName'],
@@ -3916,7 +4014,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindOrderedByCompanyName(session),
         ),
         'citizenFindOrderedByCompanyTownName': _i1.MethodConnector(
@@ -3926,7 +4024,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindOrderedByCompanyTownName(session),
         ),
         'citizenDeleteWhereCompanyNameIs': _i1.MethodConnector(
@@ -3942,7 +4040,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenDeleteWhereCompanyNameIs(
             session,
             companyName: params['companyName'],
@@ -3961,7 +4059,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenDeleteWhereCompanyTownNameIs(
             session,
             townName: params['townName'],
@@ -3980,7 +4078,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenCountWhereCompanyNameIs(
             session,
             companyName: params['companyName'],
@@ -3999,7 +4097,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenCountWhereCompanyTownNameIs(
             session,
             townName: params['townName'],
@@ -4012,7 +4110,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindAll(session),
         ),
         'citizenFindAllWithDeepIncludes': _i1.MethodConnector(
@@ -4022,7 +4120,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindAllWithDeepIncludes(session),
         ),
         'citizenFindAllWithNamedRelationNoneOriginSide': _i1.MethodConnector(
@@ -4032,7 +4130,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindAllWithNamedRelationNoneOriginSide(session),
         ),
         'citizenFindAllWithShallowIncludes': _i1.MethodConnector(
@@ -4042,7 +4140,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindAllWithShallowIncludes(session),
         ),
         'citizenFindByIdWithIncludes': _i1.MethodConnector(
@@ -4058,7 +4156,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenFindByIdWithIncludes(
             session,
             params['id'],
@@ -4071,7 +4169,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .addressFindAll(session),
         ),
         'addressFindById': _i1.MethodConnector(
@@ -4087,7 +4185,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint).addressFindById(
+              (endpoints['relation'] as _i23.RelationEndpoint).addressFindById(
             session,
             params['id'],
           ),
@@ -4099,28 +4197,28 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .findAllPostsIncludingNextAndPrevious(session),
         ),
         'citizenAttachCompany': _i1.MethodConnector(
           name: 'citizenAttachCompany',
           params: {
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i57.Citizen>(),
+              type: _i1.getType<_i58.Citizen>(),
               nullable: false,
             ),
             'company': _i1.ParameterDescription(
               name: 'company',
-              type: _i1.getType<_i58.Company>(),
+              type: _i1.getType<_i59.Company>(),
               nullable: false,
             ),
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenAttachCompany(
             session,
             params['citizen'],
@@ -4132,20 +4230,20 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i57.Citizen>(),
+              type: _i1.getType<_i58.Citizen>(),
               nullable: false,
             ),
             'address': _i1.ParameterDescription(
               name: 'address',
-              type: _i1.getType<_i59.Address>(),
+              type: _i1.getType<_i60.Address>(),
               nullable: false,
             ),
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenAttachAddress(
             session,
             params['citizen'],
@@ -4157,15 +4255,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i57.Citizen>(),
+              type: _i1.getType<_i58.Citizen>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .citizenDetachAddress(
             session,
             params['citizen'],
@@ -4176,20 +4274,20 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'address': _i1.ParameterDescription(
               name: 'address',
-              type: _i1.getType<_i59.Address>(),
+              type: _i1.getType<_i60.Address>(),
               nullable: false,
             ),
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i57.Citizen>(),
+              type: _i1.getType<_i58.Citizen>(),
               nullable: false,
             ),
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .addressAttachCitizen(
             session,
             params['address'],
@@ -4201,15 +4299,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'address': _i1.ParameterDescription(
               name: 'address',
-              type: _i1.getType<_i59.Address>(),
+              type: _i1.getType<_i60.Address>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .addressDetachCitizen(
             session,
             params['address'],
@@ -4222,23 +4320,23 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .companyFindAll(session),
         ),
         'citizenInsert': _i1.MethodConnector(
           name: 'citizenInsert',
           params: {
             'citizen': _i1.ParameterDescription(
               name: 'citizen',
-              type: _i1.getType<_i57.Citizen>(),
+              type: _i1.getType<_i58.Citizen>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint).citizenInsert(
+              (endpoints['relation'] as _i23.RelationEndpoint).citizenInsert(
             session,
             params['citizen'],
           ),
@@ -4248,15 +4346,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'company': _i1.ParameterDescription(
               name: 'company',
-              type: _i1.getType<_i58.Company>(),
+              type: _i1.getType<_i59.Company>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint).companyInsert(
+              (endpoints['relation'] as _i23.RelationEndpoint).companyInsert(
             session,
             params['company'],
           ),
@@ -4266,15 +4364,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'town': _i1.ParameterDescription(
               name: 'town',
-              type: _i1.getType<_i60.Town>(),
+              type: _i1.getType<_i61.Town>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint).townInsert(
+              (endpoints['relation'] as _i23.RelationEndpoint).townInsert(
             session,
             params['town'],
           ),
@@ -4284,15 +4382,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'address': _i1.ParameterDescription(
               name: 'address',
-              type: _i1.getType<_i59.Address>(),
+              type: _i1.getType<_i60.Address>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint).addressInsert(
+              (endpoints['relation'] as _i23.RelationEndpoint).addressInsert(
             session,
             params['address'],
           ),
@@ -4302,15 +4400,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'post': _i1.ParameterDescription(
               name: 'post',
-              type: _i1.getType<_i61.Post>(),
+              type: _i1.getType<_i62.Post>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint).postInsert(
+              (endpoints['relation'] as _i23.RelationEndpoint).postInsert(
             session,
             params['post'],
           ),
@@ -4322,7 +4420,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['relation'] as _i22.RelationEndpoint)
+              (endpoints['relation'] as _i23.RelationEndpoint)
                   .deleteAll(session),
         ),
       },
@@ -4338,7 +4436,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['exceptionTest'] as _i23.ExceptionTestEndpoint)
+              (endpoints['exceptionTest'] as _i24.ExceptionTestEndpoint)
                   .throwNormalException(session),
         ),
         'throwExceptionWithData': _i1.MethodConnector(
@@ -4348,7 +4446,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['exceptionTest'] as _i23.ExceptionTestEndpoint)
+              (endpoints['exceptionTest'] as _i24.ExceptionTestEndpoint)
                   .throwExceptionWithData(session),
         ),
         'workingWithoutException': _i1.MethodConnector(
@@ -4358,7 +4456,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['exceptionTest'] as _i23.ExceptionTestEndpoint)
+              (endpoints['exceptionTest'] as _i24.ExceptionTestEndpoint)
                   .workingWithoutException(session),
         ),
       },
@@ -4374,7 +4472,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['failedCalls'] as _i24.FailedCallsEndpoint)
+              (endpoints['failedCalls'] as _i25.FailedCallsEndpoint)
                   .failedCall(session),
         ),
         'failedDatabaseQuery': _i1.MethodConnector(
@@ -4384,7 +4482,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['failedCalls'] as _i24.FailedCallsEndpoint)
+              (endpoints['failedCalls'] as _i25.FailedCallsEndpoint)
                   .failedDatabaseQuery(session),
         ),
         'failedDatabaseQueryCaughtException': _i1.MethodConnector(
@@ -4394,7 +4492,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['failedCalls'] as _i24.FailedCallsEndpoint)
+              (endpoints['failedCalls'] as _i25.FailedCallsEndpoint)
                   .failedDatabaseQueryCaughtException(session),
         ),
         'slowCall': _i1.MethodConnector(
@@ -4404,7 +4502,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['failedCalls'] as _i24.FailedCallsEndpoint)
+              (endpoints['failedCalls'] as _i25.FailedCallsEndpoint)
                   .slowCall(session),
         ),
         'caughtException': _i1.MethodConnector(
@@ -4414,7 +4512,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['failedCalls'] as _i24.FailedCallsEndpoint)
+              (endpoints['failedCalls'] as _i25.FailedCallsEndpoint)
                   .caughtException(session),
         ),
       },
@@ -4428,15 +4526,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'object': _i1.ParameterDescription(
               name: 'object',
-              type: _i1.getType<_i62.ObjectFieldScopes>(),
+              type: _i1.getType<_i63.ObjectFieldScopes>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['fieldScopes'] as _i25.FieldScopesEndpoint)
+              (endpoints['fieldScopes'] as _i26.FieldScopesEndpoint)
                   .storeObject(
             session,
             params['object'],
@@ -4449,7 +4547,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['fieldScopes'] as _i25.FieldScopesEndpoint)
+              (endpoints['fieldScopes'] as _i26.FieldScopesEndpoint)
                   .retrieveObject(session),
         ),
       },
@@ -4463,15 +4561,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i49.SimpleData?>(),
+              type: _i1.getType<_i50.SimpleData?>(),
               nullable: true,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['futureCalls'] as _i26.FutureCallsEndpoint)
+              (endpoints['futureCalls'] as _i27.FutureCallsEndpoint)
                   .makeFutureCall(
             session,
             params['data'],
@@ -4496,7 +4594,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnIntList(
             session,
             params['list'],
@@ -4515,7 +4613,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnIntListList(
             session,
             params['list'],
@@ -4534,7 +4632,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnIntListNullable(
             session,
             params['list'],
@@ -4553,7 +4651,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnIntListNullableList(
             session,
             params['list'],
@@ -4572,7 +4670,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnIntListListNullable(
             session,
             params['list'],
@@ -4591,7 +4689,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnIntListNullableInts(
             session,
             params['list'],
@@ -4610,7 +4708,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnNullableIntListNullableInts(
             session,
             params['list'],
@@ -4629,7 +4727,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnDoubleList(
             session,
             params['list'],
@@ -4648,7 +4746,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnDoubleListNullableDoubles(
             session,
             params['list'],
@@ -4667,7 +4765,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnBoolList(
             session,
             params['list'],
@@ -4686,7 +4784,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnBoolListNullableBools(
             session,
             params['list'],
@@ -4705,7 +4803,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnStringList(
             session,
             params['list'],
@@ -4724,7 +4822,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnStringListNullableStrings(
             session,
             params['list'],
@@ -4743,7 +4841,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnDateTimeList(
             session,
             params['list'],
@@ -4762,7 +4860,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnDateTimeListNullableDateTimes(
             session,
             params['list'],
@@ -4773,15 +4871,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'list': _i1.ParameterDescription(
               name: 'list',
-              type: _i1.getType<List<_i42.ByteData>>(),
+              type: _i1.getType<List<_i43.ByteData>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnByteDataList(
             session,
             params['list'],
@@ -4792,15 +4890,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'list': _i1.ParameterDescription(
               name: 'list',
-              type: _i1.getType<List<_i42.ByteData?>>(),
+              type: _i1.getType<List<_i43.ByteData?>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnByteDataListNullableByteDatas(
             session,
             params['list'],
@@ -4811,15 +4909,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'list': _i1.ParameterDescription(
               name: 'list',
-              type: _i1.getType<List<_i49.SimpleData>>(),
+              type: _i1.getType<List<_i50.SimpleData>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnSimpleDataList(
             session,
             params['list'],
@@ -4830,15 +4928,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'list': _i1.ParameterDescription(
               name: 'list',
-              type: _i1.getType<List<_i49.SimpleData?>>(),
+              type: _i1.getType<List<_i50.SimpleData?>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnSimpleDataListNullableSimpleData(
             session,
             params['list'],
@@ -4849,15 +4947,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'list': _i1.ParameterDescription(
               name: 'list',
-              type: _i1.getType<List<_i49.SimpleData>?>(),
+              type: _i1.getType<List<_i50.SimpleData>?>(),
               nullable: true,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnSimpleDataListNullable(
             session,
             params['list'],
@@ -4868,15 +4966,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'list': _i1.ParameterDescription(
               name: 'list',
-              type: _i1.getType<List<_i49.SimpleData?>?>(),
+              type: _i1.getType<List<_i50.SimpleData?>?>(),
               nullable: true,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnNullableSimpleDataListNullableSimpleData(
             session,
             params['list'],
@@ -4895,7 +4993,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnDurationList(
             session,
             params['list'],
@@ -4914,7 +5012,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['listParameters'] as _i27.ListParametersEndpoint)
+              (endpoints['listParameters'] as _i28.ListParametersEndpoint)
                   .returnDurationListNullableDurations(
             session,
             params['list'],
@@ -4939,7 +5037,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['logging'] as _i28.LoggingEndpoint).logInfo(
+              (endpoints['logging'] as _i29.LoggingEndpoint).logInfo(
             session,
             params['message'],
           ),
@@ -4967,7 +5065,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['logging'] as _i28.LoggingEndpoint)
+              (endpoints['logging'] as _i29.LoggingEndpoint)
                   .logDebugAndInfoAndError(
             session,
             params['debug'],
@@ -4982,7 +5080,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['logging'] as _i28.LoggingEndpoint)
+              (endpoints['logging'] as _i29.LoggingEndpoint)
                   .twoQueries(session),
         ),
       },
@@ -5004,7 +5102,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['loggingDisabled'] as _i29.LoggingDisabledEndpoint)
+              (endpoints['loggingDisabled'] as _i30.LoggingDisabledEndpoint)
                   .logInfo(
             session,
             params['message'],
@@ -5029,7 +5127,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnIntMap(
             session,
             params['map'],
@@ -5048,7 +5146,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnIntMapNullable(
             session,
             params['map'],
@@ -5067,7 +5165,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnNestedIntMap(
             session,
             params['map'],
@@ -5086,7 +5184,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnIntMapNullableInts(
             session,
             params['map'],
@@ -5105,7 +5203,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnNullableIntMapNullableInts(
             session,
             params['map'],
@@ -5124,7 +5222,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnIntIntMap(
             session,
             params['map'],
@@ -5135,15 +5233,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<_i45.TestEnum, int>>(),
+              type: _i1.getType<Map<_i46.TestEnum, int>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnEnumIntMap(
             session,
             params['map'],
@@ -5154,15 +5252,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i45.TestEnum>>(),
+              type: _i1.getType<Map<String, _i46.TestEnum>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnEnumMap(
             session,
             params['map'],
@@ -5181,7 +5279,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnDoubleMap(
             session,
             params['map'],
@@ -5200,7 +5298,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnDoubleMapNullableDoubles(
             session,
             params['map'],
@@ -5219,7 +5317,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnBoolMap(
             session,
             params['map'],
@@ -5238,7 +5336,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnBoolMapNullableBools(
             session,
             params['map'],
@@ -5257,7 +5355,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnStringMap(
             session,
             params['map'],
@@ -5276,7 +5374,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnStringMapNullableStrings(
             session,
             params['map'],
@@ -5295,7 +5393,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnDateTimeMap(
             session,
             params['map'],
@@ -5314,7 +5412,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnDateTimeMapNullableDateTimes(
             session,
             params['map'],
@@ -5325,15 +5423,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i42.ByteData>>(),
+              type: _i1.getType<Map<String, _i43.ByteData>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnByteDataMap(
             session,
             params['map'],
@@ -5344,15 +5442,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i42.ByteData?>>(),
+              type: _i1.getType<Map<String, _i43.ByteData?>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnByteDataMapNullableByteDatas(
             session,
             params['map'],
@@ -5363,15 +5461,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i49.SimpleData>>(),
+              type: _i1.getType<Map<String, _i50.SimpleData>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnSimpleDataMap(
             session,
             params['map'],
@@ -5382,15 +5480,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i49.SimpleData?>>(),
+              type: _i1.getType<Map<String, _i50.SimpleData?>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnSimpleDataMapNullableSimpleData(
             session,
             params['map'],
@@ -5401,15 +5499,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i49.SimpleData>?>(),
+              type: _i1.getType<Map<String, _i50.SimpleData>?>(),
               nullable: true,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnSimpleDataMapNullable(
             session,
             params['map'],
@@ -5420,15 +5518,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'map': _i1.ParameterDescription(
               name: 'map',
-              type: _i1.getType<Map<String, _i49.SimpleData?>?>(),
+              type: _i1.getType<Map<String, _i50.SimpleData?>?>(),
               nullable: true,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnNullableSimpleDataMapNullableSimpleData(
             session,
             params['map'],
@@ -5447,7 +5545,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnDurationMap(
             session,
             params['map'],
@@ -5466,7 +5564,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['mapParameters'] as _i30.MapParametersEndpoint)
+              (endpoints['mapParameters'] as _i31.MapParametersEndpoint)
                   .returnDurationMapNullableDurations(
             session,
             params['map'],
@@ -5485,7 +5583,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['oneToMany'] as _i31.OneToManyEndpoint)
+              (endpoints['oneToMany'] as _i32.OneToManyEndpoint)
                   .customerOrderByOrderCountAscending(session),
         ),
         'customerOrderByOrderCountAscendingWhereDescriptionIs':
@@ -5502,7 +5600,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['oneToMany'] as _i31.OneToManyEndpoint)
+              (endpoints['oneToMany'] as _i32.OneToManyEndpoint)
                   .customerOrderByOrderCountAscendingWhereDescriptionIs(
             session,
             params['description'],
@@ -5513,15 +5611,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'comments': _i1.ParameterDescription(
               name: 'comments',
-              type: _i1.getType<List<_i63.Comment>>(),
+              type: _i1.getType<List<_i64.Comment>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['oneToMany'] as _i31.OneToManyEndpoint).commentInsert(
+              (endpoints['oneToMany'] as _i32.OneToManyEndpoint).commentInsert(
             session,
             params['comments'],
           ),
@@ -5531,15 +5629,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'orders': _i1.ParameterDescription(
               name: 'orders',
-              type: _i1.getType<List<_i64.Order>>(),
+              type: _i1.getType<List<_i65.Order>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['oneToMany'] as _i31.OneToManyEndpoint).orderInsert(
+              (endpoints['oneToMany'] as _i32.OneToManyEndpoint).orderInsert(
             session,
             params['orders'],
           ),
@@ -5549,15 +5647,15 @@ class Endpoints extends _i1.EndpointDispatch {
           params: {
             'customers': _i1.ParameterDescription(
               name: 'customers',
-              type: _i1.getType<List<_i65.Customer>>(),
+              type: _i1.getType<List<_i66.Customer>>(),
               nullable: false,
             )
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['oneToMany'] as _i31.OneToManyEndpoint).customerInsert(
+              (endpoints['oneToMany'] as _i32.OneToManyEndpoint).customerInsert(
             session,
             params['customers'],
           ),
@@ -5569,7 +5667,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['oneToMany'] as _i31.OneToManyEndpoint)
+              (endpoints['oneToMany'] as _i32.OneToManyEndpoint)
                   .deleteAll(session),
         ),
       },
@@ -5586,15 +5684,15 @@ class Endpoints extends _i1.EndpointDispatch {
             Map<String, dynamic> params,
           ) async =>
               (endpoints['moduleSerialization']
-                      as _i32.ModuleSerializationEndpoint)
+                      as _i33.ModuleSerializationEndpoint)
                   .serializeModuleObject(session),
         ),
         'modifyModuleObject': _i1.MethodConnector(
           name: 'modifyModuleObject',
           params: {
             'object': _i1.ParameterDescription(
               name: 'object',
-              type: _i1.getType<_i66.ModuleClass>(),
+              type: _i1.getType<_i67.ModuleClass>(),
               nullable: false,
             )
           },
@@ -5603,7 +5701,7 @@ class Endpoints extends _i1.EndpointDispatch {
             Map<String, dynamic> params,
           ) async =>
               (endpoints['moduleSerialization']
-                      as _i32.ModuleSerializationEndpoint)
+                      as _i33.ModuleSerializationEndpoint)
                   .modifyModuleObject(
             session,
             params['object'],
@@ -5617,7 +5715,7 @@ class Endpoints extends _i1.EndpointDispatch {
             Map<String, dynamic> params,
           ) async =>
               (endpoints['moduleSerialization']
-                      as _i32.ModuleSerializationEndpoint)
+                      as _i33.ModuleSerializationEndpoint)
                   .serializeNestedModuleObject(session),
         ),
       },
@@ -5654,7 +5752,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['namedParameters'] as _i33.NamedParametersEndpoint)
+              (endpoints['namedParameters'] as _i34.NamedParametersEndpoint)
                   .namedParametersMethod(
             session,
             namedInt: params['namedInt'],
@@ -5681,7 +5779,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['namedParameters'] as _i33.NamedParametersEndpoint)
+              (endpoints['namedParameters'] as _i34.NamedParametersEndpoint)
                   .namedParametersMethodEqualInts(
             session,
             namedInt: params['namedInt'],
@@ -5708,7 +5806,7 @@ class Endpoints extends _i1.EndpointDispatch {
             Map<String, dynamic> params,
           ) async =>
               (endpoints['optionalParameters']
-                      as _i34.OptionalParametersEndpoint)
+                      as _i35.OptionalParametersEndpoint)
                   .returnOptionalInt(
             session,
             params['optionalInt'],
@@ -5730,15 +5828,15 @@ class Endpoints extends _i1.EndpointDispatch {
             ),
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i49.SimpleData>(),
+              type: _i1.getType<_i50.SimpleData>(),
               nullable: false,
             ),
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint).setSimpleData(
+              (endpoints['redis'] as _i36.RedisEndpoint).setSimpleData(
             session,
             params['key'],
             params['data'],
@@ -5754,15 +5852,15 @@ class Endpoints extends _i1.EndpointDispatch {
             ),
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i49.SimpleData>(),
+              type: _i1.getType<_i50.SimpleData>(),
               nullable: false,
             ),
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint)
+              (endpoints['redis'] as _i36.RedisEndpoint)
                   .setSimpleDataWithLifetime(
             session,
             params['key'],
@@ -5782,7 +5880,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint).getSimpleData(
+              (endpoints['redis'] as _i36.RedisEndpoint).getSimpleData(
             session,
             params['key'],
           ),
@@ -5800,7 +5898,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint).deleteSimpleData(
+              (endpoints['redis'] as _i36.RedisEndpoint).deleteSimpleData(
             session,
             params['key'],
           ),
@@ -5812,7 +5910,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint)
+              (endpoints['redis'] as _i36.RedisEndpoint)
                   .resetMessageCentralTest(session),
         ),
         'listenToChannel': _i1.MethodConnector(
@@ -5828,7 +5926,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint).listenToChannel(
+              (endpoints['redis'] as _i36.RedisEndpoint).listenToChannel(
             session,
             params['channel'],
           ),
@@ -5843,15 +5941,15 @@ class Endpoints extends _i1.EndpointDispatch {
             ),
             'data': _i1.ParameterDescription(
               name: 'data',
-              type: _i1.getType<_i49.SimpleData>(),
+              type: _i1.getType<_i50.SimpleData>(),
               nullable: false,
             ),
           },
           call: (
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint).postToChannel(
+              (endpoints['redis'] as _i36.RedisEndpoint).postToChannel(
             session,
             params['channel'],
             params['data'],
@@ -5864,7 +5962,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['redis'] as _i35.RedisEndpoint)
+              (endpoints['redis'] as _i36.RedisEndpoint)
                   .countSubscribedChannels(session),
         ),
       },
@@ -5880,7 +5978,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['signInRequired'] as _i36.SignInRequiredEndpoint)
+              (endpoints['signInRequired'] as _i37.SignInRequiredEndpoint)
                   .testMethod(session),
         )
       },
@@ -5907,7 +6005,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['simple'] as _i37.SimpleEndpoint).setGlobalInt(
+              (endpoints['simple'] as _i38.SimpleEndpoint).setGlobalInt(
             session,
             params['value'],
             params['secondValue'],
@@ -5920,7 +6018,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['simple'] as _i37.SimpleEndpoint)
+              (endpoints['simple'] as _i38.SimpleEndpoint)
                   .addToGlobalInt(session),
         ),
         'getGlobalInt': _i1.MethodConnector(
@@ -5930,7 +6028,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['simple'] as _i37.SimpleEndpoint)
+              (endpoints['simple'] as _i38.SimpleEndpoint)
                   .getGlobalInt(session),
         ),
         'hello': _i1.MethodConnector(
@@ -5946,7 +6044,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['simple'] as _i37.SimpleEndpoint).hello(
+              (endpoints['simple'] as _i38.SimpleEndpoint).hello(
             session,
             params['name'],
           ),
@@ -5974,7 +6072,7 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['subSubDirTest'] as _i40.SubSubDirTestEndpoint)
+              (endpoints['subSubDirTest'] as _i41.SubSubDirTestEndpoint)
                   .testMethod(session),
         )
       },
@@ -5990,13 +6088,13 @@ class Endpoints extends _i1.EndpointDispatch {
             _i1.Session session,
             Map<String, dynamic> params,
           ) async =>
-              (endpoints['subDirTest'] as _i41.SubDirTestEndpoint)
+              (endpoints['subDirTest'] as _i42.SubDirTestEndpoint)
                   .testMethod(session),
         )
       },
     );
-    modules['serverpod_auth'] = _i67.Endpoints()..initializeEndpoints(server);
-    modules['serverpod_test_module'] = _i66.Endpoints()
+    modules['serverpod_auth'] = _i68.Endpoints()..initializeEndpoints(server);
+    modules['serverpod_test_module'] = _i67.Endpoints()
       ..initializeEndpoints(server);
   }
 }

--- tests/serverpod_test_server/lib/src/generated/protocol.yaml ---
@@ -203,6 +203,11 @@ databaseListRelationMethods:
 transactionsDatabase:
   - removeRow:
   - updateInsertDelete:
+emailAuthTestMethods:
+  - findVerificationCode:
+  - findResetCode:
+  - tearDown:
+  - createUser:
 relation:
   - citizenFindWhereCompanyNameIs:
   - citizenFindWhereCompanyTownNameIs:

--- tests/serverpod_test_server/lib/test_util/test_key_manager.dart ---
@@ -0,0 +1,18 @@
+import 'package:serverpod_test_client/serverpod_test_client.dart';
+
+class TestAuthKeyManager extends AuthenticationKeyManager {
+  String? _key;
+
+  @override
+  Future<String?> get() async => _key;
+
+  @override
+  Future<void> put(String key) async {
+    _key = key;
+  }
+
+  @override
+  Future<void> remove() async {
+    _key = null;
+  }
+}

--- tests/serverpod_test_server/test_e2e/authentication_test.dart ---
@@ -1,5 +1,6 @@
 import 'package:serverpod_test_client/serverpod_test_client.dart';
 import 'package:serverpod_test_server/test_util/config.dart';
+import 'package:serverpod_test_server/test_util/test_key_manager.dart';
 import 'package:test/test.dart';
 
 void main() {
@@ -116,20 +117,3 @@ void main() {
     });
   });
 }
-
-class TestAuthKeyManager extends AuthenticationKeyManager {
-  String? _key;
-
-  @override
-  Future<String?> get() async => _key;
-
-  @override
-  Future<void> put(String key) async {
-    _key = key;
-  }
-
-  @override
-  Future<void> remove() async {
-    _key = null;
-  }
-}

--- tests/serverpod_test_server/test_e2e/email_authentication_provider_test.dart ---
@@ -0,0 +1,163 @@
+import 'package:serverpod_test_client/serverpod_test_client.dart';
+import 'package:serverpod_test_server/test_util/config.dart';
+import 'package:serverpod_test_server/test_util/test_key_manager.dart';
+import 'package:test/test.dart';
+
+void main() {
+  var client = Client(
+    serverUrl,
+    authenticationKeyManager: TestAuthKeyManager(),
+  );
+  // ".bar" is the only valid top level domain for test email addresses
+  const email = 'test@serverpod.bar';
+  const password = 'password';
+  const userName = 'test';
+
+  tearDown(() async => await client.emailAuthTestMethods.tearDown());
+  test(
+      'Given no user exists when creating user then user is created and can be authenticated',
+      () async {
+    var createAccountRequest =
+        await client.modules.auth.email.createAccountRequest(
+      userName,
+      email,
+      password,
+    );
+    expect(createAccountRequest, isTrue,
+        reason: 'Failed to submit create account request');
+
+    var verificationCode =
+        await client.emailAuthTestMethods.findVerificationCode(userName, email);
+    expect(verificationCode, isNotNull,
+        reason: 'Failed to find verification code');
+
+    var response = await client.modules.auth.email.createAccount(
+      email,
+      verificationCode!,
+    );
+
+    expect(response, isNotNull,
+        reason: 'Failed to create account using verification code');
+
+    var authResponse =
+        await client.modules.auth.email.authenticate(email, password);
+    expect(authResponse.success, isTrue, reason: 'Failed to authenticate user');
+  });
+
+  group('Given existing user', () {
+    setUp(
+      () async {
+        var createUserRequest = await client.emailAuthTestMethods.createUser(
+          userName,
+          email,
+          password,
+        );
+        assert(createUserRequest, 'Failed to create user');
+
+        var authResponse =
+            await client.modules.auth.email.authenticate(email, password);
+        assert(authResponse.success, 'Failed to authenticate user');
+      },
+    );
+
+    test(
+        'when changing password using password reset then user can authenticate using new password',
+        () async {
+      var initiatePasswordResetResponse =
+          await client.modules.auth.email.initiatePasswordReset(email);
+      expect(
+        initiatePasswordResetResponse,
+        isTrue,
+        reason: 'Failed to initiate password reset',
+      );
+
+      var resetCode = await client.emailAuthTestMethods.findResetCode(email);
+      expect(
+        resetCode,
+        isNotNull,
+        reason: 'Failed to find password reset code',
+      );
+
+      var newPassword = '$password-with-addition';
+      var resetPasswordResponse = await client.modules.auth.email.resetPassword(
+        resetCode!,
+        newPassword,
+      );
+      expect(
+        resetPasswordResponse,
+        isTrue,
+        reason: 'Failed to reset password',
+      );
+
+      var authResponse =
+          await client.modules.auth.email.authenticate(email, newPassword);
+      expect(
+        authResponse.success,
+        isTrue,
+        reason: 'Failed to authenticate user with new password',
+      );
+    });
+
+    test('when authenticating with wrong password then authentication fails',
+        () async {
+      var wrongPassword = '$password-wrong';
+      var authResponse =
+          await client.modules.auth.email.authenticate(email, wrongPassword);
+
+      expect(
+        authResponse.success,
+        isFalse,
+        reason: 'User authenticated with wrong password',
+      );
+    });
+  });
+
+  group('Given existing and authenticated user', () {
+    setUp(
+      () async {
+        var createUserRequest = await client.emailAuthTestMethods.createUser(
+          userName,
+          email,
+          password,
+        );
+        assert(createUserRequest, 'Failed to create user');
+
+        var authResponse =
+            await client.modules.auth.email.authenticate(email, password);
+        assert(authResponse.success, 'Failed to authenticate user');
+        assert(authResponse.key != null, 'Failed to retrieve auth key');
+        await client.authenticationKeyManager
+            ?.put('${authResponse.keyId}:${authResponse.key}');
+
+        assert(await client.modules.auth.status.isSignedIn(),
+            'User not signed in');
+      },
+    );
+
+    tearDown(() async => await client.authenticationKeyManager?.remove());
+
+    test('when changing password then user can authenticate with new password',
+        () async {
+      var newPassword = '$password-with-addition';
+      var changePasswordResponse =
+          await client.modules.auth.email.changePassword(
+        password,
+        newPassword,
+      );
+
+      expect(
+        changePasswordResponse,
+        isTrue,
+        reason: 'Password change request failed.',
+      );
+
+      var authResponse =
+          await client.modules.auth.email.authenticate(email, newPassword);
+      expect(
+        authResponse.success,
+        isTrue,
+        reason: 'Failed to authenticate user with new password',
+      );
+    });
+  });
+}

--- tests/serverpod_test_server/test_e2e/websocket_test.dart ---
@@ -2,10 +2,9 @@ import 'package:serverpod_test_client/serverpod_test_client.dart';
 import 'package:serverpod_test_module_client/module.dart';
 import 'package:serverpod_test_client/src/custom_classes.dart';
 import 'package:serverpod_test_server/test_util/config.dart';
+import 'package:serverpod_test_server/test_util/test_key_manager.dart';
 import 'package:test/test.dart';
 
-import 'authentication_test.dart';
-
 void main() {
   var client = Client(
     serverUrl,

--- tests/serverpod_test_server/test_integration/authentication/email_auth_provider_test.dart ---
@@ -0,0 +1,309 @@
+import 'package:serverpod/database.dart';
+import 'package:serverpod_auth_server/module.dart';
+import 'package:serverpod_test_server/test_util/test_serverpod.dart';
+import 'package:test/test.dart';
+
+void main() async {
+  var session = await IntegrationTestServer().session();
+  AuthConfig.set(
+    AuthConfig(
+      sendValidationEmail: (session, email, validationCode) async {
+        print('Sending validation email to $email with code $validationCode');
+        return true;
+      },
+      extraSaltyHash: false,
+    ),
+  );
+
+  group('Given create account request ', () {
+    var userName = 'test';
+    var email = 'test@serverpod.dev';
+    var password = 'password';
+
+    tearDown(() async {
+      await EmailCreateAccountRequest.db
+          .deleteWhere(session, where: (t) => Constant.bool(true));
+    });
+
+    setUp(() async {
+      await Emails.createAccountRequest(session, userName, email, password);
+    });
+
+    test('when inspecting password hash then password is hashed using Argon2id',
+        () async {
+      var createAccountRequest =
+          await EmailCreateAccountRequest.db.findFirstRow(
+        session,
+        where: (t) => t.userName.equals(userName) & t.email.equals(email),
+      );
+
+      expect(
+        createAccountRequest,
+        isNotNull,
+        reason: 'Failed to find create account request',
+      );
+      var passwordHash = createAccountRequest!.hash;
+
+      expect(
+        passwordHash,
+        contains('argon2id'),
+        reason: 'Password hash is not using Argon2id',
+      );
+    });
+  });
+
+  group('Given a created user', () {
+    var userName = 'test';
+    var email = 'test@serverpod.dev';
+    var password = 'password';
+
+    tearDown(() async {
+      await Future.wait([
+        UserInfo.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+        EmailAuth.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+        UserImage.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+      ]);
+    });
+
+    setUp(() async {
+      await Emails.createUser(session, userName, email, password);
+    });
+
+    test(
+        'when inspecting email auth hash then password is hashed using Argon2id',
+        () async {
+      var emailAuth = await EmailAuth.db.findFirstRow(
+        session,
+        where: (t) => t.email.equals(email),
+      );
+      expect(
+        emailAuth,
+        isNotNull,
+        reason: 'Failed to find email auth entry',
+      );
+
+      var passwordHash = emailAuth!.hash;
+      expect(
+        passwordHash,
+        contains('argon2id'),
+        reason: 'Password hash is not using Argon2id',
+      );
+    });
+  });
+
+  group('Given user with legacy password hash when authenticating', () {
+    var userName = 'test';
+    var email = 'test@serverpod.dev';
+    var password = 'hunter2';
+
+    tearDown(() async {
+      await Future.wait([
+        UserInfo.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+        EmailAuth.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+        UserImage.db.deleteWhere(session, where: (t) => Constant.bool(true)),
+      ]);
+    });
+
+    setUp(() async {
+      await Emails.createUser(session, userName, email, password);
+      var entry = await EmailAuth.db
+          .findFirstRow(session, where: (t) => t.email.equals(email));
+      assert(entry != null, 'Failed to find email auth entry');
+      var withLegacyHash = entry!.copyWith(
+        // Legacy hash of the password 'hunter2'
+        hash:
+            '0713234b3cb6a6f98f6978f17a55a54578c580698dc1d56371502be6abb457eb',
+      );
+      await EmailAuth.db.updateRow(session, withLegacyHash);
+    });
+
+    test('then user can authenticate', () async {
+      var authResponse = await Emails.authenticate(session, email, password);
+      expect(authResponse.success, isTrue,
+          reason: 'Failed to authenticate user.');
+    });
+
+    test('then hash is migrated.', () async {
+      await Emails.authenticate(session, email, password);
+      var emailAuth = await EmailAuth.db.findFirstRow(
+        session,
+        where: (t) => t.email.equals(email),
+      );
+      expect(
+        emailAuth,
+        isNotNull,
+        reason: 'Failed to find email auth entry for user.',
+      );
+
+      var passwordHash = emailAuth!.hash;
+      expect(
+        passwordHash,
+        contains('argon2id'),
+        reason: 'Password hash was not migrated to Argon2id.',
+      );
+    });
+  });
+
+  group('Given all password hash types in database', () {
+    tearDown(
+      () async => await EmailAuth.db
+          .deleteWhere(session, where: (t) => Constant.bool(true)),
+    );
+
+    setUp(
+      () async => await EmailAuth.db.insert(session, [
+        // These entries where generated using the hash algorithms.
+        // The salt for all passwords is 'serverpod password salt'.
+        EmailAuth(
+          userId: 1,
+          email: 'test1@serverpod.dev',
+          // This is the hash of the password 'hunter0'
+          hash:
+              '8be0c8699ff49f0f0edaa3a69e9e175504e2b7909a1b9cb24b5fd448171da49f',
+        ),
+        EmailAuth(
+          userId: 2,
+          email: 'test2@serverpod.dev',
+          // This is the hash of the password 'hunter1'
+          hash:
+              '51c7c7e0c3e275b1c6a9076701bf3234d7a60da111cf0ee719a6fe2884c4cf89',
+        ),
+        EmailAuth(
+          userId: 3,
+          email: 'test3@serverpod.dev',
+          // This is the hash of the password 'hunter2'
+          hash:
+              '0713234b3cb6a6f98f6978f17a55a54578c580698dc1d56371502be6abb457eb',
+        ),
+        EmailAuth(
+          userId: 4,
+          email: 'test4@serverpod.dev',
+          // This is the hash of the password 'hunter3'
+          hash:
+              'e0bbc3d67336323cfdaf616ca1a4cbc68aee7fdb1cf107349ff7328fcaace081',
+        ),
+        EmailAuth(
+          userId: 5,
+          email: 'test5@serverpod.dev',
+          // This is the hash of the password 'hunter4'
+          hash:
+              '2ee3dc6432300eabf9630ac7827d6dd23fd23cc9120ec4cd58f8f66bd3ce2db9',
+        ),
+        EmailAuth(
+          userId: 6,
+          email: 'test6@serverpod.dev',
+          // This is the hash from the password 'hunter2'
+          hash:
+              r'$migratedLegacy$c2VydmVycG9kIHBhc3N3b3JkIHNhbHQ=$zr46HulgsH9Kv8dZR/oNKPkltWHz5axYpINct5ZSRM7mgk7DMXeHI4vyPZkAvICQJPG50OKQdRAnIxaIyitIXvQBhQhcdHYZTAc2wOZfXEwDQGFJahy+N8xLwiT2FFlcaR7rorYKIEwpxZ+haihLauN4G4hFPVoftVbHz6KCY0ZzLbrHxbZtHCRWDy/dmlA0OegUu0Q1cwAXTCOZjobWOUn6uEM0/JbRJ26Mhe2UqTOFdSY/SSVIXyYuDrGDuOtm1OhOTcaLFA68FHANSOzlYPPUy6JHOvTeGfcsjdDWF720uVYUSxP5VDb4MvWWRoB212VXasswtNc2xwBOLO++4Q==',
+        ),
+        EmailAuth(
+          userId: 7,
+          email: 'test7@serverpod.dev',
+          // This is the hash from the password 'hunter2'
+          hash:
+              r'$argon2id$c2VydmVycG9kIHBhc3N3b3JkIHNhbHQ=$lratTXSlVuxb6xwzHQzMu4Ra0pPVl1YLDdR8AwPY0gRlvF/5M7jxf6tODW9+KOgowfbP1tSGFHQebAjEOsmvL5NvAOrFDI3u0mD/414W8wR0Cni1KpATP7p5MHr5OZ2O4gEtOWfSJfgPTcq0X/uWZjRi1m4mc40TkyIFbMOfyO05JtoX0hi6r/4fTlIgIp1s7KgXEwF7B8IrmEb5zdnDgUs4qUifUM+SEH2S59fNBAt5CIviCOK7VreBztQw+L5S58ZHYSWWyB7bHJLcg1pDV9uiBb+q7qmXWJqDUBQjeJMH4nePzDmy7zarA04zQFhd6d5wIfZilJxJb8XXVGKZrQ==',
+        ),
+      ]),
+    );
+
+    test(
+        'when migrating auth entries then updated rows matches legacy hashes stored.',
+        () async {
+      var updatedRows = await Emails.migrateLegacyPasswordHashes(
+        session,
+        batchSize: 2,
+      );
+      expect(updatedRows, 5);
+    });
+
+    test(
+        'when migrating auth entries then all legacy hashes are stored with migrate algorithm.',
+        () async {
+      await Emails.migrateLegacyPasswordHashes(session, batchSize: 2);
+
+      var emailAuth = await EmailAuth.db.find(
+        session,
+        where: (t) => t.email.inSet({
+          'test1@serverpod.dev',
+          'test2@serverpod.dev',
+          'test3@serverpod.dev',
+          'test4@serverpod.dev',
+          'test5@serverpod.dev',
+        }),
+      );
+
+      expect(emailAuth, hasLength(5));
+      var hashes = emailAuth.map((e) => e.hash).toList();
+      expect(
+        hashes,
+        everyElement(contains('migratedLegacy')),
+        reason:
+            'Not all legacy hashes where migrated to migratedLegacy algorithm',
+      );
+    });
+
+    group('when migrating auth entries', () {
+      setUp(() async => await Emails.migrateLegacyPasswordHashes(session));
+
+      test('then user that had legacy password passes validation.', () async {
+        var emailAuth = await EmailAuth.db.findFirstRow(
+          session,
+          where: (t) => t.email.equals('test1@serverpod.dev'),
+        );
+
+        expect(emailAuth, isNotNull, reason: 'Failed to find email auth entry');
+        var passwordHash = emailAuth!.hash;
+
+        expect(
+          Emails.validatePasswordHash(
+            'hunter0',
+            'test1@serverpod.dev',
+            passwordHash,
+          ),
+          isTrue,
+        );
+      });
+
+      test(
+          'then user with already migrated legacy password hash can passes validation.',
+          () async {
+        var emailAuth = await EmailAuth.db.findFirstRow(
+          session,
+          where: (t) => t.email.equals('test6@serverpod.dev'),
+        );
+
+        expect(emailAuth, isNotNull, reason: 'Failed to find email auth entry');
+        var passwordHash = emailAuth!.hash;
+
+        expect(
+          Emails.validatePasswordHash(
+            'hunter2',
+            'test6@serverpod.dev',
+            passwordHash,
+          ),
+          isTrue,
+        );
+      });
+
+      test('then user with argon2id password hash passes validation.',
+          () async {
+        var emailAuth = await EmailAuth.db.findFirstRow(
+          session,
+          where: (t) => t.email.equals('test7@serverpod.dev'),
+        );
+
+        expect(emailAuth, isNotNull, reason: 'Failed to find email auth entry');
+        var passwordHash = emailAuth!.hash;
+
+        expect(
+          Emails.validatePasswordHash(
+            'hunter2',
+            'test7@serverpod.dev',
+            passwordHash,
+          ),
+          isTrue,
+        );
+      });
+    });
+  });
+}

--- util/run_tests_unit ---
@@ -15,6 +15,7 @@ declare -a projectPaths=(
     "packages/serverpod_serialization"
     "tests/serverpod_test_client"
     "tests/serverpod_test_server"
+    "modules/serverpod_auth/serverpod_auth_server"
 )
 
 exit_code=0

