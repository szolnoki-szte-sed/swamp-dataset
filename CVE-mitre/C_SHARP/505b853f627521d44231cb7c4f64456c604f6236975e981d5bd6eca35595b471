--- Classes/Base.cs ---
@@ -1,8 +1,4 @@
 ﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
 namespace IcepayRestClient.Classes
 {

--- Classes/Payment/AutomaticCheckout.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Payment
 {
     public class AutomaticCheckoutRequest : CheckoutRequest { }

--- Classes/Payment/Checkout.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Payment
 {
     public class CheckoutRequest : Base

--- Classes/Payment/GetMyPaymentMethods.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Payment
 {
     public class GetMyPaymentMethodsRequest : Base { }

--- Classes/Payment/GetPayment.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Payment
 {
     public class GetPaymentRequest :Base

--- Classes/Payment/VaultCheckout.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Payment
 {
     public class VaultCheckoutRequest:CheckoutRequest

--- Classes/Refund/CancelRefund.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Refund
 {
     public class CancelRefundRequest : Base

--- Classes/Refund/GetPaymentRefunds.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Refund
 {
     public class GetPaymentRefundsRequest : Base

--- Classes/Refund/RequestRefund.cs ---
@@ -1,9 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
+﻿
 namespace IcepayRestClient.Classes.Refund
 {
     public class RequestRefundRequest : Base

--- Classes/RestClient.cs ---
@@ -1,5 +1,4 @@
 ﻿using Newtonsoft.Json;
-using System;
 using System.IO;
 using System.Net;
 using System.Security.Cryptography;
@@ -59,16 +58,31 @@ public static TResponse SendAndReceive<TRequest, TResponse>(string service, stri
             response = JsonConvert.DeserializeObject<TResponse>(rawResponse);
 
             //verify response checksum
+            //always require presence of a checksum header
             if (!string.IsNullOrWhiteSpace(webresponse.Headers["Checksum"]))
             {
                 var responseChecksum = webresponse.Headers["Checksum"];
                 var responseSignString = webresponse.ResponseUri.AbsoluteUri + "POST" + merchantID.ToString() + merchantSecret + rawResponse;
                 var responseVerificationChecksum = Sha256(responseSignString);
                 if (!responseChecksum.Equals(responseVerificationChecksum, System.StringComparison.InvariantCultureIgnoreCase))
                 {
-                    response = new TResponse { Message = "Response signature invalid." };
+                    if (string.IsNullOrWhiteSpace(response.Message))
+                    {
+                        response = new TResponse { Message = "Authentication error: the checksum was incorrect. Verify your secret code." };
+                    }
+                    response = new TResponse { Message = response.Message };
                 }
             }
+            else
+            {
+                //if no checksum header was present in the response, the most likely cause is that the sender ID was invalid
+                //return only the response message and regard the response as failed
+                if (string.IsNullOrWhiteSpace(response.Message))
+                {
+                    response = new TResponse { Message = "Authentication error: no checksum found. Verify your merchant ID." };
+                }
+                response = new TResponse { Message = response.Message };
+            }
 
             //close streams
             writer.Dispose();

--- LICENSE ---
@@ -1,4 +1,4 @@
-Copyright (c) 2015, ICEPAY - Transaction Performance
+Copyright (c) 2015-2016, ICEPAY - Transaction Performance
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without

--- Refund.cs ---
@@ -1,9 +1,4 @@
 ﻿using IcepayRestClient.Classes.Refund;
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
 namespace IcepayRestClient
 {

--- ServiceBase.cs ---
@@ -1,10 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace IcepayRestClient
+﻿namespace IcepayRestClient
 {
     public abstract class ServiceBase
     {
@@ -14,7 +8,7 @@ public abstract class ServiceBase
         public ServiceBase(int merchantID, string merchantSecret)
         {
             this.MerchantID = merchantID;
-            this.MerchantSecret=merchantSecret;
+            this.MerchantSecret = merchantSecret;
         }
     }
 }

