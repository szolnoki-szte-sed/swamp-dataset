--- packages/serverpod_client/lib/src/serverpod_client_io.dart ---
@@ -35,21 +35,6 @@ abstract class ServerpodClient extends ServerpodClientShared {
     // Setup client
     _httpClient = HttpClient(context: securityContext);
     _httpClient.connectionTimeout = connectionTimeout;
-
-    // TODO: Generate working certificates
-    _httpClient.badCertificateCallback =
-        ((X509Certificate cert, String host, int port) {
-//      print('Failed to verify server certificate');
-//      print('pem: ${cert.pem}');
-//      print('subject: ${cert.subject}');
-//      print('issuer: ${cert.issuer}');
-//      print('valid from: ${cert.startValidity}');
-//      print('valid to: ${cert.endValidity}');
-//      print('host: $host');
-//      print('port: $port');
-//      return false;
-      return true;
-    });
   }
 
   Future<void> _initialize() async {

--- tests/serverpod_test_server/test_e2e/tsl_client_test.dart ---
@@ -0,0 +1,31 @@
+import 'dart:io';
+
+import 'package:serverpod_service_client/serverpod_service_client.dart';
+import 'package:test/test.dart';
+
+void main() {
+  test(
+      'Given valid certificates when a call to the health endpoint of a service with a valid certificate then the requests completes successfully.',
+      () async {
+    var client = Client('https://api.serverpod.app/');
+
+    expectLater(
+      client.callServerEndpoint<void>('', '', {}),
+      completes,
+    );
+  });
+
+  test(
+      'Given no valid certificates when a call to the health endpoint of a service then the requests is rejected with a handshake exception.',
+      () async {
+    var client = Client(
+      'https://api.serverpod.app/',
+      securityContext: SecurityContext(withTrustedRoots: false),
+    );
+
+    expectLater(
+      client.callServerEndpoint<void>('', '', {}),
+      throwsA(isA<HandshakeException>()),
+    );
+  });
+}

