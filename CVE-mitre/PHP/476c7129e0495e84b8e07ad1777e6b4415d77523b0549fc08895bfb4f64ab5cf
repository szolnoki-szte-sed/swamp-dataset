--- ajax/ajax_task.php ---
@@ -0,0 +1,41 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author nuxsmin
+ * @link http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+use SP\Controller\TaskController;
+use SP\Http\Request;
+
+define('APP_ROOT', '..');
+
+require_once APP_ROOT . DIRECTORY_SEPARATOR . 'inc' . DIRECTORY_SEPARATOR . 'Base.php';
+
+session_write_close();
+
+Request::checkReferer('GET');
+
+header('Content-Type: text/event-stream');
+header('Cache-Control: no-store, no-cache');
+header('Access-Control-Allow-Origin: *');
+
+$Controller = new TaskController();
+$Controller->doAction();
\ No newline at end of file

--- ajax/ajax_upgrade.php ---
@@ -0,0 +1,36 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+use SP\Controller\MainActionController;
+use SP\Http\Request;
+
+define('APP_ROOT', '..');
+define('IS_UPGRADE', 1);
+
+require_once APP_ROOT . DIRECTORY_SEPARATOR . 'inc' . DIRECTORY_SEPARATOR . 'Base.php';
+
+Request::checkReferer('GET');
+
+$Controller = new MainActionController();
+$Controller->doAction();
\ No newline at end of file

--- inc/Base.php ---
@@ -38,9 +38,14 @@
 define('PLUGINS_PATH', __DIR__ . DIRECTORY_SEPARATOR . 'Plugins');
 define('LOCALES_PATH', __DIR__ . DIRECTORY_SEPARATOR . 'locales');
 define('SQL_PATH', __DIR__ . DIRECTORY_SEPARATOR . 'sql');
+define('LOG_FILE', __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'syspass.log');
 
 define('DEBUG', false);
 
+// Required random_compat polyfill for random_bytes() and random_int()
+// @see https://github.com/paragonie/random_compat/tree/v2.0.4#random_compat
+require_once EXTENSIONS_PATH . DIRECTORY_SEPARATOR . 'random_compat' . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'random.php';
+
 require 'SplClassLoader.php';
 
 $ClassLoader = new SplClassLoader('SP');
@@ -66,15 +71,21 @@
  */
 function debugLog($data, $printLastCaller = false)
 {
-    error_log(print_r($data, true));
+    if (!error_log(date('Y-m-d H:i:s') . ' - ' . print_r($data, true) . PHP_EOL, 3, LOG_FILE)) {
+        error_log(print_r($data, true));
+    }
 
     if ($printLastCaller === true) {
         $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
         $n = count($backtrace);
 
         for ($i = 1; $i <= $n - 1; $i++) {
             $class = isset($backtrace[$i]['class']) ? $backtrace[$i]['class'] : '';
-            error_log(sprintf('Caller %d: %s\%s', $i, $class, $backtrace[$i]['function']));
+            $line = sprintf('Caller %d: %s\%s', $i, $class, $backtrace[$i]['function']);
+
+            if (!error_log($line . PHP_EOL, 3, LOG_FILE)) {
+                error_log($line);
+            }
         }
     }
 }
@@ -83,7 +94,7 @@ function debugLog($data, $printLastCaller = false)
  * Alias gettext function
  *
  * @param string $string
- * @param bool   $tranlate Si es necesario traducir
+ * @param bool $tranlate Si es necesario traducir
  * @return string
  */
 function __($string, $tranlate = true)

--- inc/Exts/Defuse/Crypto/Core.php ---
@@ -0,0 +1,434 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+final class Core
+{
+    const HEADER_VERSION_SIZE               = 4;
+    const MINIMUM_CIPHERTEXT_SIZE           = 84;
+
+    const CURRENT_VERSION                   = "\xDE\xF5\x02\x00";
+
+    const CIPHER_METHOD                     = 'aes-256-ctr';
+    const BLOCK_BYTE_SIZE                   = 16;
+    const KEY_BYTE_SIZE                     = 32;
+    const SALT_BYTE_SIZE                    = 32;
+    const MAC_BYTE_SIZE                     = 32;
+    const HASH_FUNCTION_NAME                = 'sha256';
+    const ENCRYPTION_INFO_STRING            = 'DefusePHP|V2|KeyForEncryption';
+    const AUTHENTICATION_INFO_STRING        = 'DefusePHP|V2|KeyForAuthentication';
+    const BUFFER_BYTE_SIZE                  = 1048576;
+
+    const LEGACY_CIPHER_METHOD              = 'aes-128-cbc';
+    const LEGACY_BLOCK_BYTE_SIZE            = 16;
+    const LEGACY_KEY_BYTE_SIZE              = 16;
+    const LEGACY_HASH_FUNCTION_NAME         = 'sha256';
+    const LEGACY_MAC_BYTE_SIZE              = 32;
+    const LEGACY_ENCRYPTION_INFO_STRING     = 'DefusePHP|KeyForEncryption';
+    const LEGACY_AUTHENTICATION_INFO_STRING = 'DefusePHP|KeyForAuthentication';
+
+    /*
+     * V2.0 Format: VERSION (4 bytes) || SALT (32 bytes) || IV (16 bytes) ||
+     *              CIPHERTEXT (varies) || HMAC (32 bytes)
+     *
+     * V1.0 Format: HMAC (32 bytes) || IV (16 bytes) || CIPHERTEXT (varies).
+     */
+
+    /**
+     * Adds an integer to a block-sized counter.
+     *
+     * @param string $ctr
+     * @param int    $inc
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function incrementCounter($ctr, $inc)
+    {
+        if (Core::ourStrlen($ctr) !== Core::BLOCK_BYTE_SIZE) {
+            throw new Ex\EnvironmentIsBrokenException(
+              'Trying to increment a nonce of the wrong size.'
+            );
+        }
+
+        if (! \is_int($inc)) {
+            throw new Ex\EnvironmentIsBrokenException(
+              'Trying to increment nonce by a non-integer.'
+            );
+        }
+
+        if ($inc < 0) {
+            throw new Ex\EnvironmentIsBrokenException(
+              'Trying to increment nonce by a negative amount.'
+            );
+        }
+
+        if ($inc > PHP_INT_MAX - 255) {
+            throw new Ex\EnvironmentIsBrokenException(
+              'Integer overflow may occur.'
+            );
+        }
+
+        /*
+         * We start at the rightmost byte (big-endian)
+         * So, too, does OpenSSL: http://stackoverflow.com/a/3146214/2224584
+         */
+        for ($i = Core::BLOCK_BYTE_SIZE - 1; $i >= 0; --$i) {
+            $sum = \ord($ctr[$i]) + $inc;
+
+            /* Detect integer overflow and fail. */
+            if (! \is_int($sum)) {
+                throw new Ex\EnvironmentIsBrokenException(
+                  'Integer overflow in CTR mode nonce increment.'
+                );
+            }
+
+            $ctr[$i] = \pack('C', $sum & 0xFF);
+            $inc     = $sum >> 8;
+        }
+        return $ctr;
+    }
+
+    /**
+     * Returns a random byte string of the specified length.
+     *
+     * @param int $octets
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function secureRandom($octets)
+    {
+        self::ensureFunctionExists('random_bytes');
+        try {
+            return \random_bytes($octets);
+        } catch (\Exception $ex) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Your system does not have a secure random number generator.'
+            );
+        }
+    }
+
+    /**
+     * Computes the HKDF key derivation function specified in
+     * http://tools.ietf.org/html/rfc5869.
+     *
+     * @param string $hash   Hash Function
+     * @param string $ikm    Initial Keying Material
+     * @param int    $length How many bytes?
+     * @param string $info   What sort of key are we deriving?
+     * @param string $salt
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function HKDF($hash, $ikm, $length, $info = '', $salt = null)
+    {
+        $digest_length = Core::ourStrlen(\hash_hmac($hash, '', '', true));
+
+        // Sanity-check the desired output length.
+        if (empty($length) || ! \is_int($length) ||
+            $length < 0 || $length > 255 * $digest_length) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Bad output length requested of HKDF.'
+            );
+        }
+
+        // "if [salt] not provided, is set to a string of HashLen zeroes."
+        if (\is_null($salt)) {
+            $salt = \str_repeat("\x00", $digest_length);
+        }
+
+        // HKDF-Extract:
+        // PRK = HMAC-Hash(salt, IKM)
+        // The salt is the HMAC key.
+        $prk = \hash_hmac($hash, $ikm, $salt, true);
+
+        // HKDF-Expand:
+
+        // This check is useless, but it serves as a reminder to the spec.
+        if (Core::ourStrlen($prk) < $digest_length) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // T(0) = ''
+        $t          = '';
+        $last_block = '';
+        for ($block_index = 1; Core::ourStrlen($t) < $length; ++$block_index) {
+            // T(i) = HMAC-Hash(PRK, T(i-1) | info | 0x??)
+            $last_block = \hash_hmac(
+                $hash,
+                $last_block . $info . \chr($block_index),
+                $prk,
+                true
+            );
+            // T = T(1) | T(2) | T(3) | ... | T(N)
+            $t .= $last_block;
+        }
+
+        // ORM = first L octets of T
+        $orm = Core::ourSubstr($t, 0, $length);
+        if ($orm === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+        return $orm;
+    }
+
+    /**
+     * Checks if two equal-length strings are the same without leaking
+     * information through side channels.
+     *
+     * @param string $expected
+     * @param string $given
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return bool
+     */
+    public static function hashEquals($expected, $given)
+    {
+        static $native = null;
+        if ($native === null) {
+            $native = \function_exists('hash_equals');
+        }
+        if ($native) {
+            return \hash_equals($expected, $given);
+        }
+
+        // We can't just compare the strings with '==', since it would make
+        // timing attacks possible. We could use the XOR-OR constant-time
+        // comparison algorithm, but that may not be a reliable defense in an
+        // interpreted language. So we use the approach of HMACing both strings
+        // with a random key and comparing the HMACs.
+
+        // We're not attempting to make variable-length string comparison
+        // secure, as that's very difficult. Make sure the strings are the same
+        // length.
+        if (Core::ourStrlen($expected) !== Core::ourStrlen($given)) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        $blind           = Core::secureRandom(32);
+        $message_compare = \hash_hmac(Core::HASH_FUNCTION_NAME, $given, $blind);
+        $correct_compare = \hash_hmac(Core::HASH_FUNCTION_NAME, $expected, $blind);
+        return $correct_compare === $message_compare;
+    }
+    /**
+     * Throws an exception if the constant doesn't exist.
+     *
+     * @param string $name
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    public static function ensureConstantExists($name)
+    {
+        if (! \defined($name)) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+    }
+
+    /**
+     * Throws an exception if the function doesn't exist.
+     *
+     * @param string $name
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    public static function ensureFunctionExists($name)
+    {
+        if (! \function_exists($name)) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+    }
+
+    /*
+     * We need these strlen() and substr() functions because when
+     * 'mbstring.func_overload' is set in php.ini, the standard strlen() and
+     * substr() are replaced by mb_strlen() and mb_substr().
+     */
+
+    /**
+     * Computes the length of a string in bytes.
+     *
+     * @param string $str
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return int
+     */
+    public static function ourStrlen($str)
+    {
+        static $exists = null;
+        if ($exists === null) {
+            $exists = \function_exists('mb_strlen');
+        }
+        if ($exists) {
+            $length = \mb_strlen($str, '8bit');
+            if ($length === false) {
+                throw new Ex\EnvironmentIsBrokenException();
+            }
+            return $length;
+        } else {
+            return \strlen($str);
+        }
+    }
+
+    /**
+     * Behaves roughly like the function substr() in PHP 7 does.
+     *
+     * @param string $str
+     * @param int    $start
+     * @param int    $length
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function ourSubstr($str, $start, $length = null)
+    {
+        static $exists = null;
+        if ($exists === null) {
+            $exists = \function_exists('mb_substr');
+        }
+
+        if ($exists) {
+            // mb_substr($str, 0, NULL, '8bit') returns an empty string on PHP
+            // 5.3, so we have to find the length ourselves.
+            if (! isset($length)) {
+                if ($start >= 0) {
+                    $length = Core::ourStrlen($str) - $start;
+                } else {
+                    $length = -$start;
+                }
+            }
+
+            // This is required to make mb_substr behavior identical to substr.
+            // Without this, mb_substr() would return false, contra to what the
+            // PHP documentation says (it doesn't say it can return false.)
+            if ($start === Core::ourStrlen($str) && $length === 0) {
+                return '';
+            }
+
+            if ($start > Core::ourStrlen($str)) {
+                return false;
+            }
+
+            $substr = \mb_substr($str, $start, $length, '8bit');
+            if (Core::ourStrlen($substr) !== $length) {
+                throw new Ex\EnvironmentIsBrokenException(
+                    'Your version of PHP has bug #66797. Its implementation of
+                    mb_substr() is incorrect. See the details here:
+                    https://bugs.php.net/bug.php?id=66797'
+                );
+            }
+            return $substr;
+        }
+
+        // Unlike mb_substr(), substr() doesn't accept NULL for length
+        if (isset($length)) {
+            return \substr($str, $start, $length);
+        } else {
+            return \substr($str, $start);
+        }
+    }
+
+    /**
+     * Computes the PBKDF2 password-based key derivation function.
+     *
+     * The PBKDF2 function is defined in RFC 2898. Test vectors can be found in
+     * RFC 6070. This implementation of PBKDF2 was originally created by Taylor
+     * Hornby, with improvements from http://www.variations-of-shadow.com/.
+     *
+     * @param string $algorithm  The hash algorithm to use. Recommended: SHA256
+     * @param string $password   The password.
+     * @param string $salt       A salt that is unique to the password.
+     * @param int    $count      Iteration count. Higher is better, but slower. Recommended: At least 1000.
+     * @param int    $key_length The length of the derived key in bytes.
+     * @param bool   $raw_output If true, the key is returned in raw binary format. Hex encoded otherwise.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string A $key_length-byte key derived from the password and salt.
+     */
+    public static function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
+    {
+        // Type checks:
+        if (! \is_string($algorithm)) {
+            throw new \InvalidArgumentException(
+                'pbkdf2(): algorithm must be a string'
+            );
+        }
+        if (! \is_string($password)) {
+            throw new \InvalidArgumentException(
+                'pbkdf2(): password must be a string'
+            );
+        }
+        if (! \is_string($salt)) {
+            throw new \InvalidArgumentException(
+                'pbkdf2(): salt must be a string'
+            );
+        }
+        // Coerce strings to integers with no information loss or overflow
+        $count += 0;
+        $key_length += 0;
+
+        $algorithm = \strtolower($algorithm);
+        if (! \in_array($algorithm, \hash_algos(), true)) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Invalid or unsupported hash algorithm.'
+            );
+        }
+
+        // Whitelist, or we could end up with people using CRC32.
+        $ok_algorithms = [
+            'sha1', 'sha224', 'sha256', 'sha384', 'sha512',
+            'ripemd160', 'ripemd256', 'ripemd320', 'whirlpool',
+        ];
+        if (! \in_array($algorithm, $ok_algorithms, true)) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Algorithm is not a secure cryptographic hash function.'
+            );
+        }
+
+        if ($count <= 0 || $key_length <= 0) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Invalid PBKDF2 parameters.'
+            );
+        }
+
+        if (\function_exists('hash_pbkdf2')) {
+            // The output length is in NIBBLES (4-bits) if $raw_output is false!
+            if (! $raw_output) {
+                $key_length = $key_length * 2;
+            }
+            return \hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output);
+        }
+
+        $hash_length = Core::ourStrlen(\hash($algorithm, '', true));
+        $block_count = \ceil($key_length / $hash_length);
+
+        $output = '';
+        for ($i = 1; $i <= $block_count; $i++) {
+            // $i encoded as 4 bytes, big endian.
+            $last = $salt . \pack('N', $i);
+            // first iteration
+            $last = $xorsum = \hash_hmac($algorithm, $last, $password, true);
+            // perform the other $count - 1 iterations
+            for ($j = 1; $j < $count; $j++) {
+                $xorsum ^= ($last = \hash_hmac($algorithm, $last, $password, true));
+            }
+            $output .= $xorsum;
+        }
+
+        if ($raw_output) {
+            return Core::ourSubstr($output, 0, $key_length);
+        } else {
+            return Encoding::binToHex(Core::ourSubstr($output, 0, $key_length));
+        }
+    }
+}

--- inc/Exts/Defuse/Crypto/Crypto.php ---
@@ -0,0 +1,372 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+class Crypto
+{
+    /**
+     * Encrypts a string with a Key.
+     *
+     * @param string $plaintext
+     * @param Key    $key
+     * @param bool   $raw_binary
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function encrypt($plaintext, Key $key, $raw_binary = false)
+    {
+        return self::encryptInternal(
+            $plaintext,
+            KeyOrPassword::createFromKey($key),
+            $raw_binary
+        );
+    }
+
+    /**
+     * Encrypts a string with a password, using a slow key derivation function
+     * to make password cracking more expensive.
+     *
+     * @param string $plaintext
+     * @param string $password
+     * @param bool   $raw_binary
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function encryptWithPassword($plaintext, $password, $raw_binary = false)
+    {
+        return self::encryptInternal(
+            $plaintext,
+            KeyOrPassword::createFromPassword($password),
+            $raw_binary
+        );
+    }
+
+    /**
+     * Decrypts a ciphertext to a string with a Key.
+     *
+     * @param string $ciphertext
+     * @param Key    $key
+     * @param bool   $raw_binary
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     *
+     * @return string
+     */
+    public static function decrypt($ciphertext, Key $key, $raw_binary = false)
+    {
+        return self::decryptInternal(
+            $ciphertext,
+            KeyOrPassword::createFromKey($key),
+            $raw_binary
+        );
+    }
+
+    /**
+     * Decrypts a ciphertext to a string with a password, using a slow key
+     * derivation function to make password cracking more expensive.
+     *
+     * @param string $ciphertext
+     * @param string $password
+     * @param bool   $raw_binary
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     *
+     * @return string
+     */
+    public static function decryptWithPassword($ciphertext, $password, $raw_binary = false)
+    {
+        return self::decryptInternal(
+            $ciphertext,
+            KeyOrPassword::createFromPassword($password),
+            $raw_binary
+        );
+    }
+
+    /**
+     * Decrypts a legacy ciphertext produced by version 1 of this library.
+     *
+     * @param string $ciphertext
+     * @param string $key
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     *
+     * @return string
+     */
+    public static function legacyDecrypt($ciphertext, $key)
+    {
+        RuntimeTests::runtimeTest();
+
+        // Extract the HMAC from the front of the ciphertext.
+        if (Core::ourStrlen($ciphertext) <= Core::LEGACY_MAC_BYTE_SIZE) {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Ciphertext is too short.'
+            );
+        }
+        $hmac = Core::ourSubstr($ciphertext, 0, Core::LEGACY_MAC_BYTE_SIZE);
+        if ($hmac === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+        $ciphertext = Core::ourSubstr($ciphertext, Core::LEGACY_MAC_BYTE_SIZE);
+        if ($ciphertext === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Regenerate the same authentication sub-key.
+        $akey = Core::HKDF(
+            Core::LEGACY_HASH_FUNCTION_NAME,
+            $key,
+            Core::LEGACY_KEY_BYTE_SIZE,
+            Core::LEGACY_AUTHENTICATION_INFO_STRING,
+            null
+        );
+
+        if (self::verifyHMAC($hmac, $ciphertext, $akey)) {
+            // Regenerate the same encryption sub-key.
+            $ekey = Core::HKDF(
+                Core::LEGACY_HASH_FUNCTION_NAME,
+                $key,
+                Core::LEGACY_KEY_BYTE_SIZE,
+                Core::LEGACY_ENCRYPTION_INFO_STRING,
+                null
+            );
+
+            // Extract the IV from the ciphertext.
+            if (Core::ourStrlen($ciphertext) <= Core::LEGACY_BLOCK_BYTE_SIZE) {
+                throw new Ex\WrongKeyOrModifiedCiphertextException(
+                    'Ciphertext is too short.'
+                );
+            }
+            $iv = Core::ourSubstr($ciphertext, 0, Core::LEGACY_BLOCK_BYTE_SIZE);
+            if ($iv === false) {
+                throw new Ex\EnvironmentIsBrokenException();
+            }
+            $ciphertext = Core::ourSubstr($ciphertext, Core::LEGACY_BLOCK_BYTE_SIZE);
+            if ($ciphertext === false) {
+                throw new Ex\EnvironmentIsBrokenException();
+            }
+
+            // Do the decryption.
+            $plaintext = self::plainDecrypt($ciphertext, $ekey, $iv, Core::LEGACY_CIPHER_METHOD);
+            return $plaintext;
+        } else {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Integrity check failed.'
+            );
+        }
+    }
+
+    /**
+     * Encrypts a string with either a key or a password.
+     *
+     * @param string        $plaintext
+     * @param KeyOrPassword $secret
+     * @param bool          $raw_binary
+     *
+     * @return string
+     */
+    private static function encryptInternal($plaintext, KeyOrPassword $secret, $raw_binary)
+    {
+        RuntimeTests::runtimeTest();
+
+        $salt = Core::secureRandom(Core::SALT_BYTE_SIZE);
+        $keys = $secret->deriveKeys($salt);
+        $ekey = $keys->getEncryptionKey();
+        $akey = $keys->getAuthenticationKey();
+        $iv     = Core::secureRandom(Core::BLOCK_BYTE_SIZE);
+
+        $ciphertext = Core::CURRENT_VERSION . $salt . $iv . self::plainEncrypt($plaintext, $ekey, $iv);
+        $auth       = \hash_hmac(Core::HASH_FUNCTION_NAME, $ciphertext, $akey, true);
+        $ciphertext = $ciphertext . $auth;
+
+        if ($raw_binary) {
+            return $ciphertext;
+        }
+        return Encoding::binToHex($ciphertext);
+    }
+
+    /**
+     * Decrypts a ciphertext to a string with either a key or a password.
+     *
+     * @param string        $ciphertext
+     * @param KeyOrPassword $secret
+     * @param bool          $raw_binary
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     *
+     * @return string
+     */
+    private static function decryptInternal($ciphertext, KeyOrPassword $secret, $raw_binary)
+    {
+        RuntimeTests::runtimeTest();
+
+        if (! $raw_binary) {
+            try {
+                $ciphertext = Encoding::hexToBin($ciphertext);
+            } catch (Ex\BadFormatException $ex) {
+                throw new Ex\WrongKeyOrModifiedCiphertextException(
+                    'Ciphertext has invalid hex encoding.'
+                );
+            }
+        }
+
+        if (Core::ourStrlen($ciphertext) < Core::MINIMUM_CIPHERTEXT_SIZE) {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Ciphertext is too short.'
+            );
+        }
+
+        // Get and check the version header.
+        $header = Core::ourSubstr($ciphertext, 0, Core::HEADER_VERSION_SIZE);
+        if ($header !== Core::CURRENT_VERSION) {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Bad version header.'
+            );
+        }
+
+        // Get the salt.
+        $salt = Core::ourSubstr(
+            $ciphertext,
+            Core::HEADER_VERSION_SIZE,
+            Core::SALT_BYTE_SIZE
+        );
+        if ($salt === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Get the IV.
+        $iv = Core::ourSubstr(
+            $ciphertext,
+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE,
+            Core::BLOCK_BYTE_SIZE
+        );
+        if ($iv === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Get the HMAC.
+        $hmac = Core::ourSubstr(
+            $ciphertext,
+            Core::ourStrlen($ciphertext) - Core::MAC_BYTE_SIZE,
+            Core::MAC_BYTE_SIZE
+        );
+        if ($hmac === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Get the actual encrypted ciphertext.
+        $encrypted = Core::ourSubstr(
+            $ciphertext,
+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE +
+                Core::BLOCK_BYTE_SIZE,
+            Core::ourStrlen($ciphertext) - Core::MAC_BYTE_SIZE - Core::SALT_BYTE_SIZE -
+                Core::BLOCK_BYTE_SIZE - Core::HEADER_VERSION_SIZE
+        );
+        if ($encrypted === false) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Derive the separate encryption and authentication keys from the key
+        // or password, whichever it is.
+        $keys = $secret->deriveKeys($salt);
+
+        if (self::verifyHMAC($hmac, $header . $salt . $iv . $encrypted, $keys->getAuthenticationKey())) {
+            $plaintext = self::plainDecrypt($encrypted, $keys->getEncryptionKey(), $iv, Core::CIPHER_METHOD);
+            return $plaintext;
+        } else {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Integrity check failed.'
+            );
+        }
+    }
+
+    /**
+     * Raw unauthenticated encryption (insecure on its own).
+     *
+     * @param string $plaintext
+     * @param string $key
+     * @param string $iv
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    protected static function plainEncrypt($plaintext, $key, $iv)
+    {
+        Core::ensureConstantExists('OPENSSL_RAW_DATA');
+        Core::ensureFunctionExists('openssl_encrypt');
+        $ciphertext = \openssl_encrypt(
+            $plaintext,
+            Core::CIPHER_METHOD,
+            $key,
+            OPENSSL_RAW_DATA,
+            $iv
+        );
+
+        if ($ciphertext === false) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'openssl_encrypt() failed.'
+            );
+        }
+
+        return $ciphertext;
+    }
+
+    /**
+     * Raw unauthenticated decryption (insecure on its own).
+     *
+     * @param string $ciphertext
+     * @param string $key
+     * @param string $iv
+     * @param string $cipherMethod
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    protected static function plainDecrypt($ciphertext, $key, $iv, $cipherMethod)
+    {
+        Core::ensureConstantExists('OPENSSL_RAW_DATA');
+        Core::ensureFunctionExists('openssl_decrypt');
+        $plaintext = \openssl_decrypt(
+            $ciphertext,
+            $cipherMethod,
+            $key,
+            OPENSSL_RAW_DATA,
+            $iv
+        );
+        if ($plaintext === false) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'openssl_decrypt() failed.'
+            );
+        }
+
+        return $plaintext;
+    }
+
+    /**
+     * Verifies an HMAC without leaking information through side-channels.
+     *
+     * @param string $correct_hmac
+     * @param string $message
+     * @param string $key
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return bool
+     */
+    protected static function verifyHMAC($correct_hmac, $message, $key)
+    {
+        $message_hmac = \hash_hmac(Core::HASH_FUNCTION_NAME, $message, $key, true);
+        return Core::hashEquals($correct_hmac, $message_hmac);
+    }
+}

--- inc/Exts/Defuse/Crypto/DerivedKeys.php ---
@@ -0,0 +1,37 @@
+<?php
+
+namespace Defuse\Crypto;
+
+final class DerivedKeys
+{
+    private $akey = null;
+    private $ekey = null;
+
+    /**
+     * Returns the authentication key.
+     */
+    public function getAuthenticationKey()
+    {
+        return $this->akey;
+    }
+
+    /**
+     * Returns the encryption key.
+     */
+    public function getEncryptionKey()
+    {
+        return $this->ekey;
+    }
+
+    /**
+     * Constructor for DerivedKeys.
+     *
+     * @param string $akey
+     * @param string $ekey
+     */
+    public function __construct($akey, $ekey)
+    {
+        $this->akey = $akey;
+        $this->ekey = $ekey;
+    }
+}

--- inc/Exts/Defuse/Crypto/Encoding.php ---
@@ -0,0 +1,212 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+final class Encoding
+{
+    const CHECKSUM_BYTE_SIZE     = 32;
+    const CHECKSUM_HASH_ALGO     = 'sha256';
+    const SERIALIZE_HEADER_BYTES = 4;
+
+    /**
+     * Converts a byte string to a hexadecimal string without leaking
+     * information through side channels.
+     *
+     * @param string $byte_string
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function binToHex($byte_string)
+    {
+        $hex = '';
+        $len = Core::ourStrlen($byte_string);
+        for ($i = 0; $i < $len; ++$i) {
+            $c = \ord($byte_string[$i]) & 0xf;
+            $b = \ord($byte_string[$i]) >> 4;
+            $hex .= \pack(
+                'CC',
+                87 + $b + ((($b - 10) >> 8) & ~38),
+                87 + $c + ((($c - 10) >> 8) & ~38)
+            );
+        }
+        return $hex;
+    }
+
+    /**
+     * Converts a hexadecimal string into a byte string without leaking
+     * information through side channels.
+     *
+     * @param string $hex_string
+     *
+     * @throws Ex\BadFormatException
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function hexToBin($hex_string)
+    {
+        $hex_pos = 0;
+        $bin     = '';
+        $hex_len = Core::ourStrlen($hex_string);
+        $state   = 0;
+        $c_acc   = 0;
+
+        while ($hex_pos < $hex_len) {
+            $c        = \ord($hex_string[$hex_pos]);
+            $c_num    = $c ^ 48;
+            $c_num0   = ($c_num - 10) >> 8;
+            $c_alpha  = ($c & ~32) - 55;
+            $c_alpha0 = (($c_alpha - 10) ^ ($c_alpha - 16)) >> 8;
+            if (($c_num0 | $c_alpha0) === 0) {
+                throw new Ex\BadFormatException(
+                    'Encoding::hexToBin() input is not a hex string.'
+                );
+            }
+            $c_val = ($c_num0 & $c_num) | ($c_alpha & $c_alpha0);
+            if ($state === 0) {
+                $c_acc = $c_val * 16;
+            } else {
+                $bin .= \pack('C', $c_acc | $c_val);
+            }
+            $state ^= 1;
+            ++$hex_pos;
+        }
+        return $bin;
+    }
+
+    /*
+     * SECURITY NOTE ON APPLYING CHECKSUMS TO SECRETS:
+     *
+     *      The checksum introduces a potential security weakness. For example,
+     *      suppose we apply a checksum to a key, and that an adversary has an
+     *      exploit against the process containing the key, such that they can
+     *      overwrite an arbitrary byte of memory and then cause the checksum to
+     *      be verified and learn the result.
+     *
+     *      In this scenario, the adversary can extract the key one byte at
+     *      a time by overwriting it with their guess of its value and then
+     *      asking if the checksum matches. If it does, their guess was right.
+     *      This kind of attack may be more easy to implement and more reliable
+     *      than a remote code execution attack.
+     *
+     *      This attack also applies to authenticated encryption as a whole, in
+     *      the situation where the adversary can overwrite a byte of the key
+     *      and then cause a valid ciphertext to be decrypted, and then
+     *      determine whether the MAC check passed or failed.
+     *
+     *      By using the full SHA256 hash instead of truncating it, I'm ensuring
+     *      that both ways of going about the attack are equivalently difficult.
+     *      A shorter checksum of say 32 bits might be more useful to the
+     *      adversary as an oracle in case their writes are coarser grained.
+     *
+     *      Because the scenario assumes a serious vulnerability, we don't try
+     *      to prevent attacks of this style.
+     */
+
+    /**
+     * INTERNAL USE ONLY: Applies a version header, applies a checksum, and
+     * then encodes a byte string into a range of printable ASCII characters.
+     *
+     * @param string $header
+     * @param string $bytes
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function saveBytesToChecksummedAsciiSafeString($header, $bytes)
+    {
+        // Headers must be a constant length to prevent one type's header from
+        // being a prefix of another type's header, leading to ambiguity.
+        if (Core::ourStrlen($header) !== self::SERIALIZE_HEADER_BYTES) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Header must be ' . self::SERIALIZE_HEADER_BYTES . ' bytes.'
+            );
+        }
+
+        return Encoding::binToHex(
+            $header .
+            $bytes .
+            \hash(
+                self::CHECKSUM_HASH_ALGO,
+                $header . $bytes,
+                true
+            )
+        );
+    }
+
+    /**
+     * INTERNAL USE ONLY: Decodes, verifies the header and checksum, and returns
+     * the encoded byte string.
+     *
+     * @param string $expected_header
+     * @param string $string
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\BadFormatException
+     *
+     * @return string
+     */
+    public static function loadBytesFromChecksummedAsciiSafeString($expected_header, $string)
+    {
+        // Headers must be a constant length to prevent one type's header from
+        // being a prefix of another type's header, leading to ambiguity.
+        if (Core::ourStrlen($expected_header) !== self::SERIALIZE_HEADER_BYTES) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Header must be 4 bytes.'
+            );
+        }
+
+        $bytes = Encoding::hexToBin($string);
+
+        /* Make sure we have enough bytes to get the version header and checksum. */
+        if (Core::ourStrlen($bytes) < self::SERIALIZE_HEADER_BYTES + self::CHECKSUM_BYTE_SIZE) {
+            throw new Ex\BadFormatException(
+                'Encoded data is shorter than expected.'
+            );
+        }
+
+        /* Grab the version header. */
+        $actual_header = Core::ourSubstr($bytes, 0, self::SERIALIZE_HEADER_BYTES);
+
+        if ($actual_header !== $expected_header) {
+            throw new Ex\BadFormatException(
+                'Invalid header.'
+            );
+        }
+
+        /* Grab the bytes that are part of the checksum. */
+        $checked_bytes = Core::ourSubstr(
+            $bytes,
+            0,
+            Core::ourStrlen($bytes) - self::CHECKSUM_BYTE_SIZE
+        );
+
+        /* Grab the included checksum. */
+        $checksum_a = Core::ourSubstr(
+            $bytes,
+            Core::ourStrlen($bytes) - self::CHECKSUM_BYTE_SIZE,
+            self::CHECKSUM_BYTE_SIZE
+        );
+
+        /* Re-compute the checksum. */
+        $checksum_b = \hash(self::CHECKSUM_HASH_ALGO, $checked_bytes, true);
+
+        /* Check if the checksum matches. */
+        if (! Core::hashEquals($checksum_a, $checksum_b)) {
+            throw new Ex\BadFormatException(
+                "Data is corrupted, the checksum doesn't match"
+            );
+        }
+
+        return Core::ourSubstr(
+            $bytes,
+            self::SERIALIZE_HEADER_BYTES,
+            Core::ourStrlen($bytes) - self::SERIALIZE_HEADER_BYTES - self::CHECKSUM_BYTE_SIZE
+        );
+    }
+}

--- inc/Exts/Defuse/Crypto/Exception/BadFormatException.php ---
@@ -0,0 +1,7 @@
+<?php
+
+namespace Defuse\Crypto\Exception;
+
+class BadFormatException extends \Defuse\Crypto\Exception\CryptoException
+{
+}

--- inc/Exts/Defuse/Crypto/Exception/CryptoException.php ---
@@ -0,0 +1,7 @@
+<?php
+
+namespace Defuse\Crypto\Exception;
+
+class CryptoException extends \Exception
+{
+}

--- inc/Exts/Defuse/Crypto/Exception/EnvironmentIsBrokenException.php ---
@@ -0,0 +1,7 @@
+<?php
+
+namespace Defuse\Crypto\Exception;
+
+class EnvironmentIsBrokenException extends \Defuse\Crypto\Exception\CryptoException
+{
+}

--- inc/Exts/Defuse/Crypto/Exception/IOException.php ---
@@ -0,0 +1,7 @@
+<?php
+
+namespace Defuse\Crypto\Exception;
+
+class IOException extends \Defuse\Crypto\Exception\CryptoException
+{
+}

--- inc/Exts/Defuse/Crypto/Exception/WrongKeyOrModifiedCiphertextException.php ---
@@ -0,0 +1,7 @@
+<?php
+
+namespace Defuse\Crypto\Exception;
+
+class WrongKeyOrModifiedCiphertextException extends \Defuse\Crypto\Exception\CryptoException
+{
+}

--- inc/Exts/Defuse/Crypto/File.php ---
@@ -0,0 +1,755 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+final class File
+{
+    /**
+     * Encrypts the input file, saving the ciphertext to the output file.
+     *
+     * @param string $inputFilename
+     * @param string $outputFilename
+     * @param Key    $key
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     */
+    public static function encryptFile($inputFilename, $outputFilename, Key $key)
+    {
+        self::encryptFileInternal(
+            $inputFilename,
+            $outputFilename,
+            KeyOrPassword::createFromKey($key)
+        );
+    }
+
+    /**
+     * Encrypts a file with a password, using a slow key derivation function to
+     * make password cracking more expensive.
+     *
+     * @param string $inputFilename
+     * @param string $outputFilename
+     * @param string $password
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     */
+    public static function encryptFileWithPassword($inputFilename, $outputFilename, $password)
+    {
+        self::encryptFileInternal(
+            $inputFilename,
+            $outputFilename,
+            KeyOrPassword::createFromPassword($password)
+        );
+    }
+
+    /**
+     * Decrypts the input file, saving the plaintext to the output file.
+     *
+     * @param string $inputFilename
+     * @param string $outputFilename
+     * @param Key    $key
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function decryptFile($inputFilename, $outputFilename, Key $key)
+    {
+        self::decryptFileInternal(
+            $inputFilename,
+            $outputFilename,
+            KeyOrPassword::createFromKey($key)
+        );
+    }
+
+    /**
+     * Decrypts a file with a password, using a slow key derivation function to
+     * make password cracking more expensive.
+     *
+     * @param string $inputFilename
+     * @param string $outputFilename
+     * @param string $password
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function decryptFileWithPassword($inputFilename, $outputFilename, $password)
+    {
+        self::decryptFileInternal(
+            $inputFilename,
+            $outputFilename,
+            KeyOrPassword::createFromPassword($password)
+        );
+    }
+
+    /**
+     * Takes two resource handles and encrypts the contents of the first,
+     * writing the ciphertext into the second.
+     *
+     * @param resource $inputHandle
+     * @param resource $outputHandle
+     * @param Key      $key
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function encryptResource($inputHandle, $outputHandle, Key $key)
+    {
+        self::encryptResourceInternal(
+            $inputHandle,
+            $outputHandle,
+            KeyOrPassword::createFromKey($key)
+        );
+    }
+
+    /**
+     * Encrypts the contents of one resource handle into another with a
+     * password, using a slow key derivation function to make password cracking
+     * more expensive.
+     *
+     * @param resource $inputHandle
+     * @param resource $outputHandle
+     * @param string   $password
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function encryptResourceWithPassword($inputHandle, $outputHandle, $password)
+    {
+        self::encryptResourceInternal(
+            $inputHandle,
+            $outputHandle,
+            KeyOrPassword::createFromPassword($password)
+        );
+    }
+
+    /**
+     * Takes two resource handles and decrypts the contents of the first,
+     * writing the plaintext into the second.
+     *
+     * @param resource $inputHandle
+     * @param resource $outputHandle
+     * @param Key      $key
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function decryptResource($inputHandle, $outputHandle, Key $key)
+    {
+        self::decryptResourceInternal(
+            $inputHandle,
+            $outputHandle,
+            KeyOrPassword::createFromKey($key)
+        );
+    }
+
+    /**
+     * Decrypts the contents of one resource into another with a password, using
+     * a slow key derivation function to make password cracking more expensive.
+     *
+     * @param resource $inputHandle
+     * @param resource $outputHandle
+     * @param string   $password
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function decryptResourceWithPassword($inputHandle, $outputHandle, $password)
+    {
+        self::decryptResourceInternal(
+            $inputHandle,
+            $outputHandle,
+            KeyOrPassword::createFromPassword($password)
+        );
+    }
+
+    /**
+     * Encrypts a file with either a key or a password.
+     *
+     * @param string        $inputFilename
+     * @param string        $outputFilename
+     * @param KeyOrPassword $secret
+     *
+     * @throws Ex\CryptoException
+     * @throws Ex\IOException
+     */
+    private static function encryptFileInternal($inputFilename, $outputFilename, KeyOrPassword $secret)
+    {
+        /* Open the input file. */
+        $if = @\fopen($inputFilename, 'rb');
+        if ($if === false) {
+            throw new Ex\IOException(
+                'Cannot open input file for encrypting: ' .
+                self::getLastErrorMessage()
+            );
+        }
+        if (\is_callable('\\stream_set_read_buffer')) {
+            /* This call can fail, but the only consequence is performance. */
+            \stream_set_read_buffer($if, 0);
+        }
+
+        /* Open the output file. */
+        $of = @\fopen($outputFilename, 'wb');
+        if ($of === false) {
+            \fclose($if);
+            throw new Ex\IOException(
+                'Cannot open output file for encrypting: ' .
+                self::getLastErrorMessage()
+            );
+        }
+        if (\is_callable('\\stream_set_write_buffer')) {
+            /* This call can fail, but the only consequence is performance. */
+            \stream_set_write_buffer($of, 0);
+        }
+
+        /* Perform the encryption. */
+        try {
+            self::encryptResourceInternal($if, $of, $secret);
+        } catch (Ex\CryptoException $ex) {
+            \fclose($if);
+            \fclose($of);
+            throw $ex;
+        }
+
+        /* Close the input file. */
+        if (\fclose($if) === false) {
+            \fclose($of);
+            throw new Ex\IOException(
+                'Cannot close input file after encrypting'
+            );
+        }
+
+        /* Close the output file. */
+        if (\fclose($of) === false) {
+            throw new Ex\IOException(
+                'Cannot close output file after encrypting'
+            );
+        }
+    }
+
+    /**
+     * Decrypts a file with either a key or a password.
+     *
+     * @param string        $inputFilename
+     * @param string        $outputFilename
+     * @param KeyOrPassword $secret
+     *
+     * @throws Ex\CryptoException
+     * @throws Ex\IOException
+     */
+    private static function decryptFileInternal($inputFilename, $outputFilename, KeyOrPassword $secret)
+    {
+        /* Open the input file. */
+        $if = @\fopen($inputFilename, 'rb');
+        if ($if === false) {
+            throw new Ex\IOException(
+                'Cannot open input file for decrypting: ' .
+                self::getLastErrorMessage()
+            );
+        }
+        
+        if (\is_callable('\\stream_set_read_buffer')) {
+            /* This call can fail, but the only consequence is performance. */
+            \stream_set_read_buffer($if, 0);
+        }
+
+        /* Open the output file. */
+        $of = @\fopen($outputFilename, 'wb');
+        if ($of === false) {
+            \fclose($if);
+            throw new Ex\IOException(
+                'Cannot open output file for decrypting: ' .
+                self::getLastErrorMessage()
+            );
+        }
+        
+        if (\is_callable('\\stream_set_write_buffer')) {
+            /* This call can fail, but the only consequence is performance. */
+            \stream_set_write_buffer($of, 0);
+        }
+
+        /* Perform the decryption. */
+        try {
+            self::decryptResourceInternal($if, $of, $secret);
+        } catch (Ex\CryptoException $ex) {
+            \fclose($if);
+            \fclose($of);
+            throw $ex;
+        }
+
+        /* Close the input file. */
+        if (\fclose($if) === false) {
+            \fclose($of);
+            throw new Ex\IOException(
+                'Cannot close input file after decrypting'
+            );
+        }
+
+        /* Close the output file. */
+        if (\fclose($of) === false) {
+            throw new Ex\IOException(
+                'Cannot close output file after decrypting'
+            );
+        }
+    }
+
+    /**
+     * Encrypts a resource with either a key or a password.
+     *
+     * @param resource      $inputHandle
+     * @param resource      $outputHandle
+     * @param KeyOrPassword $secret
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     */
+    private static function encryptResourceInternal($inputHandle, $outputHandle, KeyOrPassword $secret)
+    {
+        if (! \is_resource($inputHandle)) {
+            throw new Ex\IOException(
+                'Input handle must be a resource!'
+            );
+        }
+        if (! \is_resource($outputHandle)) {
+            throw new Ex\IOException(
+                'Output handle must be a resource!'
+            );
+        }
+
+        $inputStat = \fstat($inputHandle);
+        $inputSize = $inputStat['size'];
+
+        $file_salt = Core::secureRandom(Core::SALT_BYTE_SIZE);
+        $keys = $secret->deriveKeys($file_salt);
+        $ekey = $keys->getEncryptionKey();
+        $akey = $keys->getAuthenticationKey();
+
+        $ivsize = Core::BLOCK_BYTE_SIZE;
+        $iv     = Core::secureRandom($ivsize);
+
+        /* Initialize a streaming HMAC state. */
+        $hmac = \hash_init(Core::HASH_FUNCTION_NAME, HASH_HMAC, $akey);
+        if ($hmac === false) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Cannot initialize a hash context'
+            );
+        }
+
+        /* Write the header, salt, and IV. */
+        self::writeBytes(
+            $outputHandle,
+            Core::CURRENT_VERSION . $file_salt . $iv,
+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE + $ivsize
+        );
+
+        /* Add the header, salt, and IV to the HMAC. */
+        \hash_update($hmac, Core::CURRENT_VERSION);
+        \hash_update($hmac, $file_salt);
+        \hash_update($hmac, $iv);
+
+        /* $thisIv will be incremented after each call to the encryption. */
+        $thisIv = $iv;
+
+        /* How many blocks do we encrypt at a time? We increment by this value. */
+        $inc = Core::BUFFER_BYTE_SIZE / Core::BLOCK_BYTE_SIZE;
+
+        /* Loop until we reach the end of the input file. */
+        $at_file_end = false;
+        while (! (\feof($inputHandle) || $at_file_end)) {
+            /* Find out if we can read a full buffer, or only a partial one. */
+            $pos = \ftell($inputHandle);
+            if ($pos === false) {
+                throw new Ex\IOException(
+                    'Could not get current position in input file during encryption'
+                );
+            }
+            if ($pos + Core::BUFFER_BYTE_SIZE >= $inputSize) {
+                /* We're at the end of the file, so we need to break out of the loop. */
+                $at_file_end = true;
+                $read = self::readBytes(
+                    $inputHandle,
+                    $inputSize - $pos
+                );
+            } else {
+                $read = self::readBytes(
+                    $inputHandle,
+                    Core::BUFFER_BYTE_SIZE
+                );
+            }
+
+            /* Encrypt this buffer. */
+            $encrypted = \openssl_encrypt(
+                $read,
+                Core::CIPHER_METHOD,
+                $ekey,
+                OPENSSL_RAW_DATA,
+                $thisIv
+            );
+
+            if ($encrypted === false) {
+                throw new Ex\EnvironmentIsBrokenException(
+                    'OpenSSL encryption error'
+                );
+            }
+
+            /* Write this buffer's ciphertext. */
+            self::writeBytes($outputHandle, $encrypted, Core::ourStrlen($encrypted));
+            /* Add this buffer's ciphertext to the HMAC. */
+            \hash_update($hmac, $encrypted);
+
+            /* Increment the counter by the number of blocks in a buffer. */
+            $thisIv = Core::incrementCounter($thisIv, $inc);
+            /* WARNING: Usually, unless the file is a multiple of the buffer
+             * size, $thisIv will contain an incorrect value here on the last
+             * iteration of this loop. */
+        }
+
+        /* Get the HMAC and append it to the ciphertext. */
+        $final_mac = \hash_final($hmac, true);
+        self::writeBytes($outputHandle, $final_mac, Core::MAC_BYTE_SIZE);
+    }
+
+    /**
+     * Decrypts a file-backed resource with either a key or a password.
+     *
+     * @param resource      $inputHandle
+     * @param resource      $outputHandle
+     * @param KeyOrPassword $secret
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\IOException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     */
+    public static function decryptResourceInternal($inputHandle, $outputHandle, KeyOrPassword $secret)
+    {
+        if (! \is_resource($inputHandle)) {
+            throw new Ex\IOException(
+                'Input handle must be a resource!'
+            );
+        }
+        if (! \is_resource($outputHandle)) {
+            throw new Ex\IOException(
+                'Output handle must be a resource!'
+            );
+        }
+
+        /* Make sure the file is big enough for all the reads we need to do. */
+        $stat = \fstat($inputHandle);
+        if ($stat['size'] < Core::MINIMUM_CIPHERTEXT_SIZE) {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Input file is too small to have been created by this library.'
+            );
+        }
+
+        /* Check the version header. */
+        $header = self::readBytes($inputHandle, Core::HEADER_VERSION_SIZE);
+        if ($header !== Core::CURRENT_VERSION) {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Bad version header.'
+            );
+        }
+
+        /* Get the salt. */
+        $file_salt = self::readBytes($inputHandle, Core::SALT_BYTE_SIZE);
+
+        /* Get the IV. */
+        $ivsize = Core::BLOCK_BYTE_SIZE;
+        $iv     = self::readBytes($inputHandle, $ivsize);
+
+        /* Derive the authentication and encryption keys. */
+        $keys = $secret->deriveKeys($file_salt);
+        $ekey = $keys->getEncryptionKey();
+        $akey = $keys->getAuthenticationKey();
+
+        /* We'll store the MAC of each buffer-sized chunk as we verify the
+         * actual MAC, so that we can check them again when decrypting. */
+        $macs = [];
+
+        /* $thisIv will be incremented after each call to the decryption. */
+        $thisIv = $iv;
+
+        /* How many blocks do we encrypt at a time? We increment by this value. */
+        $inc = Core::BUFFER_BYTE_SIZE / Core::BLOCK_BYTE_SIZE;
+
+        /* Get the HMAC. */
+        if (\fseek($inputHandle, (-1 * Core::MAC_BYTE_SIZE), SEEK_END) === false) {
+            throw new Ex\IOException(
+                'Cannot seek to beginning of MAC within input file'
+            );
+        }
+
+        /* Get the position of the last byte in the actual ciphertext. */
+        $cipher_end = \ftell($inputHandle);
+        if ($cipher_end === false) {
+            throw new Ex\IOException(
+                'Cannot read input file'
+            );
+        }
+        /* We have the position of the first byte of the HMAC. Go back by one. */
+        --$cipher_end;
+
+        /* Read the HMAC. */
+        $stored_mac = self::readBytes($inputHandle, Core::MAC_BYTE_SIZE);
+
+        /* Initialize a streaming HMAC state. */
+        $hmac = \hash_init(Core::HASH_FUNCTION_NAME, HASH_HMAC, $akey);
+        if ($hmac === false) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Cannot initialize a hash context'
+            );
+        }
+
+        /* Reset file pointer to the beginning of the file after the header */
+        if (\fseek($inputHandle, Core::HEADER_VERSION_SIZE, SEEK_SET) === false) {
+            throw new Ex\IOException(
+                'Cannot read seek within input file'
+            );
+        }
+
+        /* Seek to the start of the actual ciphertext. */
+        if (\fseek($inputHandle, Core::SALT_BYTE_SIZE + $ivsize, SEEK_CUR) === false) {
+            throw new Ex\IOException(
+                'Cannot seek input file to beginning of ciphertext'
+            );
+        }
+
+        /* PASS #1: Calculating the HMAC. */
+
+        \hash_update($hmac, $header);
+        \hash_update($hmac, $file_salt);
+        \hash_update($hmac, $iv);
+        $hmac2 = \hash_copy($hmac);
+
+        $break = false;
+        while (! $break) {
+            $pos = \ftell($inputHandle);
+            if ($pos === false) {
+                throw new Ex\IOException(
+                    'Could not get current position in input file during decryption'
+                );
+            }
+
+            /* Read the next buffer-sized chunk (or less). */
+            if ($pos + Core::BUFFER_BYTE_SIZE >= $cipher_end) {
+                $break = true;
+                $read  = self::readBytes(
+                    $inputHandle,
+                    $cipher_end - $pos + 1
+                );
+            } else {
+                $read = self::readBytes(
+                    $inputHandle,
+                    Core::BUFFER_BYTE_SIZE
+                );
+            }
+
+            /* Update the HMAC. */
+            \hash_update($hmac, $read);
+
+            /* Remember this buffer-sized chunk's HMAC. */
+            $chunk_mac = \hash_copy($hmac);
+            if ($chunk_mac === false) {
+                throw new Ex\EnvironmentIsBrokenException(
+                    'Cannot duplicate a hash context'
+                );
+            }
+            $macs []= \hash_final($chunk_mac);
+        }
+
+        /* Get the final HMAC, which should match the stored one. */
+        $final_mac = \hash_final($hmac, true);
+
+        /* Verify the HMAC. */
+        if (! Core::hashEquals($final_mac, $stored_mac)) {
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                'Integrity check failed.'
+            );
+        }
+
+        /* PASS #2: Decrypt and write output. */
+
+        /* Rewind to the start of the actual ciphertext. */
+        if (\fseek($inputHandle, Core::SALT_BYTE_SIZE + $ivsize + Core::HEADER_VERSION_SIZE, SEEK_SET) === false) {
+            throw new Ex\IOException(
+                'Could not move the input file pointer during decryption'
+            );
+        }
+
+        $at_file_end = false;
+        while (! $at_file_end) {
+            $pos = \ftell($inputHandle);
+            if ($pos === false) {
+                throw new Ex\IOException(
+                    'Could not get current position in input file during decryption'
+                );
+            }
+
+            /* Read the next buffer-sized chunk (or less). */
+            if ($pos + Core::BUFFER_BYTE_SIZE >= $cipher_end) {
+                $at_file_end = true;
+                $read   = self::readBytes(
+                    $inputHandle,
+                    $cipher_end - $pos + 1
+                );
+            } else {
+                $read = self::readBytes(
+                    $inputHandle,
+                    Core::BUFFER_BYTE_SIZE
+                );
+            }
+
+            /* Recalculate the MAC (so far) and compare it with the one we
+             * remembered from pass #1 to ensure attackers didn't change the
+             * ciphertext after MAC verification. */
+            \hash_update($hmac2, $read);
+            $calc_mac = \hash_copy($hmac2);
+            if ($calc_mac === false) {
+                throw new Ex\EnvironmentIsBrokenException(
+                    'Cannot duplicate a hash context'
+                );
+            }
+            $calc = \hash_final($calc_mac);
+
+            if (empty($macs)) {
+                throw new Ex\WrongKeyOrModifiedCiphertextException(
+                    'File was modified after MAC verification'
+                );
+            } elseif (! Core::hashEquals(\array_shift($macs), $calc)) {
+                throw new Ex\WrongKeyOrModifiedCiphertextException(
+                    'File was modified after MAC verification'
+                );
+            }
+
+            /* Decrypt this buffer-sized chunk. */
+            $decrypted = \openssl_decrypt(
+                $read,
+                Core::CIPHER_METHOD,
+                $ekey,
+                OPENSSL_RAW_DATA,
+                $thisIv
+            );
+            if ($decrypted === false) {
+                throw new Ex\EnvironmentIsBrokenException(
+                    'OpenSSL decryption error'
+                );
+            }
+
+            /* Write the plaintext to the output file. */
+            self::writeBytes(
+                $outputHandle,
+                $decrypted,
+                Core::ourStrlen($decrypted)
+            );
+
+            /* Increment the IV by the amount of blocks in a buffer. */
+            $thisIv = Core::incrementCounter($thisIv, $inc);
+            /* WARNING: Usually, unless the file is a multiple of the buffer
+             * size, $thisIv will contain an incorrect value here on the last
+             * iteration of this loop. */
+        }
+    }
+
+    /**
+     * Read from a stream; prevent partial reads.
+     *
+     * @param resource $stream
+     * @param int      $num_bytes
+     *
+     * @throws Ex\IOException
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public static function readBytes($stream, $num_bytes)
+    {
+        if ($num_bytes < 0) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Tried to read less than 0 bytes'
+            );
+        } elseif ($num_bytes === 0) {
+            return '';
+        }
+        $buf       = '';
+        $remaining = $num_bytes;
+        while ($remaining > 0 && ! \feof($stream)) {
+            $read = \fread($stream, $remaining);
+
+            if ($read === false) {
+                throw new Ex\IOException(
+                    'Could not read from the file'
+                );
+            }
+            $buf .= $read;
+            $remaining -= Core::ourStrlen($read);
+        }
+        if (Core::ourStrlen($buf) !== $num_bytes) {
+            throw new Ex\IOException(
+                'Tried to read past the end of the file'
+            );
+        }
+        return $buf;
+    }
+
+    /**
+     * Write to a stream; prevents partial writes.
+     *
+     * @param resource $stream
+     * @param string   $buf
+     * @param int      $num_bytes
+     *
+     * @throws Ex\IOException
+     *
+     * @return string
+     */
+    public static function writeBytes($stream, $buf, $num_bytes = null)
+    {
+        $bufSize = Core::ourStrlen($buf);
+        if ($num_bytes === null) {
+            $num_bytes = $bufSize;
+        }
+        if ($num_bytes > $bufSize) {
+            throw new Ex\IOException(
+                'Trying to write more bytes than the buffer contains.'
+            );
+        }
+        if ($num_bytes < 0) {
+            throw new Ex\IOException(
+                'Tried to write less than 0 bytes'
+            );
+        }
+        $remaining = $num_bytes;
+        while ($remaining > 0) {
+            $written = \fwrite($stream, $buf, $remaining);
+            if ($written === false) {
+                throw new Ex\IOException(
+                    'Could not write to the file'
+                );
+            }
+            $buf = Core::ourSubstr($buf, $written, null);
+            $remaining -= $written;
+        }
+        return $num_bytes;
+    }
+
+    /**
+     * Returns the last PHP error's or warning's message string.
+     *
+     * @return string
+     */
+    private static function getLastErrorMessage()
+    {
+        $error = error_get_last();
+        if ($error === null) {
+            return '[no PHP error]';
+        } else {
+            return $error['message'];
+        }
+    }
+}

--- inc/Exts/Defuse/Crypto/Key.php ---
@@ -0,0 +1,84 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+final class Key
+{
+    const KEY_CURRENT_VERSION = "\xDE\xF0\x00\x00";
+    const KEY_BYTE_SIZE       = 32;
+
+    private $key_bytes = null;
+
+    /**
+     * Creates new random key.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return Key
+     */
+    public static function createNewRandomKey()
+    {
+        return new Key(Core::secureRandom(self::KEY_BYTE_SIZE));
+    }
+
+    /**
+     * Loads a Key from its encoded form.
+     *
+     * @param string $saved_key_string
+     *
+     * @throws Ex\BadFormatException
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return Key
+     */
+    public static function loadFromAsciiSafeString($saved_key_string)
+    {
+        $key_bytes = Encoding::loadBytesFromChecksummedAsciiSafeString(self::KEY_CURRENT_VERSION, $saved_key_string);
+        return new Key($key_bytes);
+    }
+
+    /**
+     * Encodes the Key into a string of printable ASCII characters.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public function saveToAsciiSafeString()
+    {
+        return Encoding::saveBytesToChecksummedAsciiSafeString(
+            self::KEY_CURRENT_VERSION,
+            $this->key_bytes
+        );
+    }
+
+    /**
+     * Gets the raw bytes of the key.
+     *
+     * @return string
+     */
+    public function getRawBytes()
+    {
+        return $this->key_bytes;
+    }
+
+    /**
+     * Constructs a new Key object from a string of raw bytes.
+     *
+     * @param string $bytes
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    private function __construct($bytes)
+    {
+        if (Core::ourStrlen($bytes) !== self::KEY_BYTE_SIZE) {
+            throw new Ex\EnvironmentIsBrokenException(
+                'Bad key length.'
+            );
+        }
+        $this->key_bytes = $bytes;
+    }
+
+}

--- inc/Exts/Defuse/Crypto/KeyOrPassword.php ---
@@ -0,0 +1,119 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+final class KeyOrPassword
+{
+    const PBKDF2_ITERATIONS    = 100000;
+    const SECRET_TYPE_KEY      = 1;
+    const SECRET_TYPE_PASSWORD = 2;
+
+    private $secret_type = null;
+    private $secret      = null;
+
+    /**
+     * Initializes an instance of KeyOrPassword from a key.
+     *
+     * @param Key $key
+     *
+     * @return KeyOrPassword
+     */
+    public static function createFromKey(Key $key)
+    {
+        return new KeyOrPassword(self::SECRET_TYPE_KEY, $key);
+    }
+
+    /**
+     * Initializes an instance of KeyOrPassword from a password.
+     *
+     * @param string $password
+     *
+     * @return KeyOrPassword
+     */
+    public static function createFromPassword($password)
+    {
+        return new KeyOrPassword(self::SECRET_TYPE_PASSWORD, $password);
+    }
+
+    /**
+     * Derives authentication and encryption keys from the secret, using a slow
+     * key derivation function if the secret is a password.
+     *
+     * @param string $salt
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return DerivedKeys
+     */
+    public function deriveKeys($salt)
+    {
+        if (Core::ourStrlen($salt) !== Core::SALT_BYTE_SIZE) {
+            throw new Ex\EnvironmentIsBrokenException('Bad salt.');
+        }
+
+        if ($this->secret_type === self::SECRET_TYPE_KEY) {
+            $akey = Core::HKDF(
+                Core::HASH_FUNCTION_NAME,
+                $this->secret->getRawBytes(),
+                Core::KEY_BYTE_SIZE,
+                Core::AUTHENTICATION_INFO_STRING,
+                $salt
+            );
+            $ekey = Core::HKDF(
+                Core::HASH_FUNCTION_NAME,
+                $this->secret->getRawBytes(),
+                Core::KEY_BYTE_SIZE,
+                Core::ENCRYPTION_INFO_STRING,
+                $salt
+            );
+            return new DerivedKeys($akey, $ekey);
+        } elseif ($this->secret_type === self::SECRET_TYPE_PASSWORD) {
+            /* Our PBKDF2 polyfill is vulnerable to a DoS attack documented in
+             * GitHub issue #230. The fix is to pre-hash the password to ensure
+             * it is short. We do the prehashing here instead of in pbkdf2() so
+             * that pbkdf2() still computes the function as defined by the
+             * standard. */
+            $prehash = \hash(Core::HASH_FUNCTION_NAME, $this->secret, true);
+            $prekey = Core::pbkdf2(
+                Core::HASH_FUNCTION_NAME,
+                $prehash,
+                $salt,
+                self::PBKDF2_ITERATIONS,
+                Core::KEY_BYTE_SIZE,
+                true
+            );
+            $akey = Core::HKDF(
+                Core::HASH_FUNCTION_NAME,
+                $prekey,
+                Core::KEY_BYTE_SIZE,
+                Core::AUTHENTICATION_INFO_STRING,
+                $salt
+            );
+            /* Note the cryptographic re-use of $salt here. */
+            $ekey = Core::HKDF(
+                Core::HASH_FUNCTION_NAME,
+                $prekey,
+                Core::KEY_BYTE_SIZE,
+                Core::ENCRYPTION_INFO_STRING,
+                $salt
+            );
+            return new DerivedKeys($akey, $ekey);
+        } else {
+            throw new Ex\EnvironmentIsBrokenException('Bad secret type.');
+        }
+    }
+
+    /**
+     * Constructor for KeyOrPassword.
+     *
+     * @param int   $secret_type
+     * @param mixed $secret      (either a Key or a password string)
+     */
+    private function __construct($secret_type, $secret)
+    {
+        $this->secret_type = $secret_type;
+        $this->secret = $secret;
+    }
+}

--- inc/Exts/Defuse/Crypto/KeyProtectedByPassword.php ---
@@ -0,0 +1,112 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+final class KeyProtectedByPassword
+{
+    const PASSWORD_KEY_CURRENT_VERSION = "\xDE\xF1\x00\x00";
+
+    private $encrypted_key = null;
+
+    /**
+     * Creates a random key protected by the provided password.
+     *
+     * @param string $password
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return KeyProtectedByPassword
+     */
+    public static function createRandomPasswordProtectedKey($password)
+    {
+        $inner_key = Key::createNewRandomKey();
+        /* The password is hashed as a form of poor-man's domain separation
+         * between this use of encryptWithPassword() and other uses of
+         * encryptWithPassword() that the user may also be using as part of the
+         * same protocol. */
+        $encrypted_key = Crypto::encryptWithPassword(
+            $inner_key->saveToAsciiSafeString(),
+            \hash(Core::HASH_FUNCTION_NAME, $password, true),
+            true
+        );
+
+        return new KeyProtectedByPassword($encrypted_key);
+    }
+
+    /**
+     * Loads a KeyProtectedByPassword from its encoded form.
+     *
+     * @param string $saved_key_string
+     *
+     * @throws Ex\BadFormatException
+     *
+     * @return KeyProtectedByPassword
+     */
+    public static function loadFromAsciiSafeString($saved_key_string)
+    {
+        $encrypted_key = Encoding::loadBytesFromChecksummedAsciiSafeString(
+            self::PASSWORD_KEY_CURRENT_VERSION,
+            $saved_key_string
+        );
+        return new KeyProtectedByPassword($encrypted_key);
+    }
+
+    /**
+     * Encodes the KeyProtectedByPassword into a string of printable ASCII
+     * characters.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     *
+     * @return string
+     */
+    public function saveToAsciiSafeString()
+    {
+        return Encoding::saveBytesToChecksummedAsciiSafeString(
+            self::PASSWORD_KEY_CURRENT_VERSION,
+            $this->encrypted_key
+        );
+    }
+
+    /**
+     * Decrypts the protected key, returning an unprotected Key object that can
+     * be used for encryption and decryption.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     * @throws Ex\WrongKeyOrModifiedCiphertextException
+     *
+     * @return Key
+     */
+    public function unlockKey($password)
+    {
+        try {
+            $inner_key_encoded = Crypto::decryptWithPassword(
+                $this->encrypted_key,
+                \hash(Core::HASH_FUNCTION_NAME, $password, true),
+                true
+            );
+            return Key::loadFromAsciiSafeString($inner_key_encoded);
+        } catch (Ex\BadFormatException $ex) {
+            /* This should never happen unless an attacker replaced the
+             * encrypted key ciphertext with some other ciphertext that was
+             * encrypted with the same password. We transform the exception type
+             * here in order to make the API simpler, avoiding the need to
+             * document that this method might throw an Ex\BadFormatException. */
+            throw new Ex\WrongKeyOrModifiedCiphertextException(
+                "The decrypted key was found to be in an invalid format. " .
+                "This very likely indicates it was modified by an attacker."
+            );
+        }
+    }
+
+    /**
+     * Constructor for KeyProtectedByPassword.
+     *
+     * @param string $encrypted_key
+     */
+    private function __construct($encrypted_key)
+    {
+        $this->encrypted_key = $encrypted_key;
+    }
+}

--- inc/Exts/Defuse/Crypto/RuntimeTests.php ---
@@ -0,0 +1,242 @@
+<?php
+
+namespace Defuse\Crypto;
+
+use Defuse\Crypto\Exception as Ex;
+
+/*
+ * We're using static class inheritance to get access to protected methods
+ * inside Crypto. To make it easy to know where the method we're calling can be
+ * found, within this file, prefix calls with `Crypto::` or `RuntimeTests::`,
+ * and don't use `self::`.
+ */
+
+class RuntimeTests extends Crypto
+{
+    /**
+     * Runs the runtime tests.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    public static function runtimeTest()
+    {
+        // 0: Tests haven't been run yet.
+        // 1: Tests have passed.
+        // 2: Tests are running right now.
+        // 3: Tests have failed.
+        static $test_state = 0;
+
+        if ($test_state === 1 || $test_state === 2) {
+            return;
+        }
+
+        if ($test_state === 3) {
+            /* If an intermittent problem caused a test to fail previously, we
+             * want that to be indicated to the user with every call to this
+             * library. This way, if the user first does something they really
+             * don't care about, and just ignores all exceptions, they won't get
+             * screwed when they then start to use the library for something
+             * they do care about. */
+            throw new Ex\EnvironmentIsBrokenException('Tests failed previously.');
+        }
+
+        try {
+            $test_state = 2;
+
+            Core::ensureFunctionExists('openssl_get_cipher_methods');
+            if (\in_array(Core::CIPHER_METHOD, \openssl_get_cipher_methods()) === false) {
+                throw new Ex\EnvironmentIsBrokenException(
+                    'Cipher method not supported. This is normally caused by an outdated ' .
+                    'version of OpenSSL (and/or OpenSSL compiled for FIPS compliance). ' .
+                    'Please upgrade to a newer version of OpenSSL that supports ' .
+                    Core::CIPHER_METHOD . ' to use this library.'
+                );
+            }
+
+            RuntimeTests::AESTestVector();
+            RuntimeTests::HMACTestVector();
+            RuntimeTests::HKDFTestVector();
+
+            RuntimeTests::testEncryptDecrypt();
+            if (Core::ourStrlen(Key::createNewRandomKey()->getRawBytes()) != Core::KEY_BYTE_SIZE) {
+                throw new Ex\EnvironmentIsBrokenException();
+            }
+
+            if (Core::ENCRYPTION_INFO_STRING == Core::AUTHENTICATION_INFO_STRING) {
+                throw new Ex\EnvironmentIsBrokenException();
+            }
+        } catch (Ex\EnvironmentIsBrokenException $ex) {
+            // Do this, otherwise it will stay in the "tests are running" state.
+            $test_state = 3;
+            throw $ex;
+        }
+
+        // Change this to '0' make the tests always re-run (for benchmarking).
+        $test_state = 1;
+    }
+
+    /**
+     * High-level tests of Crypto operations.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    private static function testEncryptDecrypt()
+    {
+        $key  = Key::createNewRandomKey();
+        $data = "EnCrYpT EvErYThInG\x00\x00";
+
+        // Make sure encrypting then decrypting doesn't change the message.
+        $ciphertext = Crypto::encrypt($data, $key, true);
+        try {
+            $decrypted = Crypto::decrypt($ciphertext, $key, true);
+        } catch (Ex\WrongKeyOrModifiedCiphertextException $ex) {
+            // It's important to catch this and change it into a
+            // Ex\EnvironmentIsBrokenException, otherwise a test failure could trick
+            // the user into thinking it's just an invalid ciphertext!
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+        if ($decrypted !== $data) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Modifying the ciphertext: Appending a string.
+        try {
+            Crypto::decrypt($ciphertext . 'a', $key, true);
+            throw new Ex\EnvironmentIsBrokenException();
+        } catch (Ex\WrongKeyOrModifiedCiphertextException $e) { /* expected */
+        }
+
+        // Modifying the ciphertext: Changing an HMAC byte.
+        $indices_to_change = [
+            0, // The header.
+            Core::HEADER_VERSION_SIZE + 1, // the salt
+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE + 1, // the IV
+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE + Core::BLOCK_BYTE_SIZE + 1, // the ciphertext
+        ];
+
+        foreach ($indices_to_change as $index) {
+            try {
+                $ciphertext[$index] = \chr((\ord($ciphertext[$index]) + 1) % 256);
+                Crypto::decrypt($ciphertext, $key, true);
+                throw new Ex\EnvironmentIsBrokenException();
+            } catch (Ex\WrongKeyOrModifiedCiphertextException $e) { /* expected */
+            }
+        }
+
+        // Decrypting with the wrong key.
+        $key        = Key::createNewRandomKey();
+        $data       = 'abcdef';
+        $ciphertext = Crypto::encrypt($data, $key, true);
+        $wrong_key  = Key::createNewRandomKey();
+        try {
+            Crypto::decrypt($ciphertext, $wrong_key, true);
+            throw new Ex\EnvironmentIsBrokenException();
+        } catch (Ex\WrongKeyOrModifiedCiphertextException $e) { /* expected */
+        }
+
+        // Ciphertext too small.
+        $key        = Key::createNewRandomKey();
+        $ciphertext = \str_repeat('A', Core::MINIMUM_CIPHERTEXT_SIZE - 1);
+        try {
+            Crypto::decrypt($ciphertext, $key, true);
+            throw new Ex\EnvironmentIsBrokenException();
+        } catch (Ex\WrongKeyOrModifiedCiphertextException $e) { /* expected */
+        }
+    }
+
+    /**
+     * Test HKDF against test vectors.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    private static function HKDFTestVector()
+    {
+        // HKDF test vectors from RFC 5869
+
+        // Test Case 1
+        $ikm    = \str_repeat("\x0b", 22);
+        $salt   = Encoding::hexToBin('000102030405060708090a0b0c');
+        $info   = Encoding::hexToBin('f0f1f2f3f4f5f6f7f8f9');
+        $length = 42;
+        $okm    = Encoding::hexToBin(
+            '3cb25f25faacd57a90434f64d0362f2a' .
+            '2d2d0a90cf1a5a4c5db02d56ecc4c5bf' .
+            '34007208d5b887185865'
+        );
+        $computed_okm = Core::HKDF('sha256', $ikm, $length, $info, $salt);
+        if ($computed_okm !== $okm) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        // Test Case 7
+        $ikm    = \str_repeat("\x0c", 22);
+        $length = 42;
+        $okm    = Encoding::hexToBin(
+            '2c91117204d745f3500d636a62f64f0a' .
+            'b3bae548aa53d423b0d1f27ebba6f5e5' .
+            '673a081d70cce7acfc48'
+        );
+        $computed_okm = Core::HKDF('sha1', $ikm, $length, '', null);
+        if ($computed_okm !== $okm) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+    }
+
+    /**
+     * Test HMAC against test vectors.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    private static function HMACTestVector()
+    {
+        // HMAC test vector From RFC 4231 (Test Case 1)
+        $key     = \str_repeat("\x0b", 20);
+        $data    = 'Hi There';
+        $correct = 'b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7';
+        if (\hash_hmac(Core::HASH_FUNCTION_NAME, $data, $key) !== $correct) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+    }
+
+    /**
+     * Test AES against test vectors.
+     *
+     * @throws Ex\EnvironmentIsBrokenException
+     */
+    private static function AESTestVector()
+    {
+        // AES CTR mode test vector from NIST SP 800-38A
+        $key = Encoding::hexToBin(
+            '603deb1015ca71be2b73aef0857d7781' .
+            '1f352c073b6108d72d9810a30914dff4'
+        );
+        $iv        = Encoding::hexToBin('f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff');
+        $plaintext = Encoding::hexToBin(
+            '6bc1bee22e409f96e93d7e117393172a' .
+            'ae2d8a571e03ac9c9eb76fac45af8e51' .
+            '30c81c46a35ce411e5fbc1191a0a52ef' .
+            'f69f2445df4f9b17ad2b417be66c3710'
+        );
+        $ciphertext = Encoding::hexToBin(
+            '601ec313775789a5b7a7f504bbf3d228' .
+            'f443e3ca4d62b59aca84e990cacaf5c5' .
+            '2b0930daa23de94ce87017ba2d84988d' .
+            'dfc9c58db67aada613c2dd08457941a6'
+        );
+
+        $computed_ciphertext = Crypto::plainEncrypt($plaintext, $key, $iv);
+        if ($computed_ciphertext !== $ciphertext) {
+            echo \str_repeat("\n", 30);
+            echo \bin2hex($computed_ciphertext);
+            echo "\n---\n";
+            echo \bin2hex($ciphertext);
+            echo \str_repeat("\n", 30);
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+
+        $computed_plaintext = Crypto::plainDecrypt($ciphertext, $key, $iv, Core::CIPHER_METHOD);
+        if ($computed_plaintext !== $plaintext) {
+            throw new Ex\EnvironmentIsBrokenException();
+        }
+    }
+}

--- inc/Exts/Defuse/LICENSE ---
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2016 Taylor Hornby <https://defuse.ca> and Paragon Initiative
+Enterprises <https://paragonie.com>.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--- inc/Exts/Defuse/README.md ---
@@ -0,0 +1,87 @@
+php-encryption
+===============
+
+[![Build Status](https://travis-ci.org/defuse/php-encryption.svg?branch=master)](https://travis-ci.org/defuse/php-encryption)
+
+This is a library for encrypting data with a key or password in PHP. **It
+requires PHP 5.4 or newer.** The current version is v2.0.0, which is expected to
+remain stable and supported by its authors with security and bugfixes until at
+least January 1st, 2019.
+
+The library is a joint effort between [Taylor Hornby](https://defuse.ca/) and
+[Scott Arciszewski](https://paragonie.com/blog/author/scott-arcizewski) as well
+as numerous open-source contributors.
+
+What separates this library from other PHP encryption libraries is, firstly,
+that it is secure. The authors used to encounter insecure PHP encryption code on
+a daily basis, so they created this library to bring more security to the
+ecosystem. Secondly, this library is "difficult to misuse." Like
+[libsodium](https://github.com/jedisct1/libsodium), its API is designed to be
+easy to use in a secure way and hard to use in an insecure way.
+
+Dependencies
+------------
+
+This library requres no special dependencies except for PHP 5.4 or newer with
+the OpenSSL extensions enabled (this is the default). It uses
+[random\_compat](https://github.com/paragonie/random_compat), which is bundled
+in with this library so that your users will not need to follow any special
+installation steps.
+
+Getting Started
+----------------
+
+Start with the [**Tutorial**](docs/Tutorial.md). You can find instructions for
+obtaining this library's code securely in the [Installing and
+Verifying](docs/InstallingAndVerifying.md) documentation.
+
+After you've read the tutorial and got the code, refer to the formal
+documentation for each of the classes this library provides:
+
+- [Crypto](docs/classes/Crypto.md)
+- [File](docs/classes/File.md)
+- [Key](docs/classes/Key.md)
+- [KeyProtectedByPassword](docs/classes/KeyProtectedByPassword.md)
+
+If you encounter difficulties, see the [FAQ](docs/FAQ.md) answers. The fixes to
+the most commonly-reported problems are explained there.
+
+If you're a cryptographer and want to understand the nitty-gritty details of how
+this library works, look at the [Cryptography Details](docs/CryptoDetails.md)
+documentation.
+
+If you're interested in contributing to this library, see the [Internal
+Developer Documentation](docs/InternalDeveloperDocs.md).
+
+Examples
+---------
+
+If the documentation is not enough for you to understand how to use this
+library, then you can look at an example project that uses this library:
+
+- [encutil](https://github.com/defuse/encutil)
+
+Security Audit Status
+---------------------
+
+This code has not been subjected to a formal, paid, security audit. However, it
+has received lots of review from members of the PHP security community, and the
+authors are experienced with cryptography. In all likelihood, you are safer
+using this library than almost any other encryption library for PHP.
+
+If you use this library as a part of your business and would like to help fund
+a formal audit, please [contact Taylor Hornby](https://defuse.ca/contact.htm).
+
+Public Keys
+------------
+
+The GnuPG public key used to sign releases is available in
+[dist/signingkey.asc](https://github.com/defuse/php-encryption/raw/master/dist/signingkey.asc). Its fingerprint is:
+
+```
+2FA6 1D8D 99B9 2658 6BAC  3D53 385E E055 A129 1538
+```
+
+You can verify it against the Taylor Hornby's [contact
+page](https://defuse.ca/contact.htm) and
+[twitter](https://twitter.com/DefuseSec/status/723741424253059074).

--- inc/Exts/phpseclib/Crypt/Base.php ---
@@ -540,7 +540,7 @@ function setKey($key)
      *
      *         Where $hash (default = sha1) currently supports the following hashes: see: Crypt/Hash.php
      *
-     * @see Crypt/Hash.php
+     * @see OldCrypt/Hash.php
      * @param string $password
      * @param string $method
      * @throws \LengthException if pbkdf1 is being used and the derived key length exceeds the hash length

--- inc/Exts/random_compat/lib/byte_safe_strings.php ---
@@ -0,0 +1,181 @@
+<?php
+/**
+ * Random_* Compatibility Library
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ *
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!is_callable('RandomCompat_strlen')) {
+    if (
+        defined('MB_OVERLOAD_STRING') &&
+        ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING
+    ) {
+        /**
+         * strlen() implementation that isn't brittle to mbstring.func_overload
+         *
+         * This version uses mb_strlen() in '8bit' mode to treat strings as raw
+         * binary rather than UTF-8, ISO-8859-1, etc
+         *
+         * @param string $binary_string
+         *
+         * @throws TypeError
+         *
+         * @return int
+         */
+        function RandomCompat_strlen($binary_string)
+        {
+            if (!is_string($binary_string)) {
+                throw new TypeError(
+                    'RandomCompat_strlen() expects a string'
+                );
+            }
+
+            return mb_strlen($binary_string, '8bit');
+        }
+
+    } else {
+        /**
+         * strlen() implementation that isn't brittle to mbstring.func_overload
+         *
+         * This version just used the default strlen()
+         *
+         * @param string $binary_string
+         *
+         * @throws TypeError
+         *
+         * @return int
+         */
+        function RandomCompat_strlen($binary_string)
+        {
+            if (!is_string($binary_string)) {
+                throw new TypeError(
+                    'RandomCompat_strlen() expects a string'
+                );
+            }
+            return strlen($binary_string);
+        }
+    }
+}
+
+if (!is_callable('RandomCompat_substr')) {
+
+    if (
+        defined('MB_OVERLOAD_STRING')
+        &&
+        ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING
+    ) {
+        /**
+         * substr() implementation that isn't brittle to mbstring.func_overload
+         *
+         * This version uses mb_substr() in '8bit' mode to treat strings as raw
+         * binary rather than UTF-8, ISO-8859-1, etc
+         *
+         * @param string $binary_string
+         * @param int $start
+         * @param int $length (optional)
+         *
+         * @throws TypeError
+         *
+         * @return string
+         */
+        function RandomCompat_substr($binary_string, $start, $length = null)
+        {
+            if (!is_string($binary_string)) {
+                throw new TypeError(
+                    'RandomCompat_substr(): First argument should be a string'
+                );
+            }
+
+            if (!is_int($start)) {
+                throw new TypeError(
+                    'RandomCompat_substr(): Second argument should be an integer'
+                );
+            }
+
+            if ($length === null) {
+                /**
+                 * mb_substr($str, 0, NULL, '8bit') returns an empty string on
+                 * PHP 5.3, so we have to find the length ourselves.
+                 */
+                $length = RandomCompat_strlen($length) - $start;
+            } elseif (!is_int($length)) {
+                throw new TypeError(
+                    'RandomCompat_substr(): Third argument should be an integer, or omitted'
+                );
+            }
+
+            // Consistency with PHP's behavior
+            if ($start === RandomCompat_strlen($binary_string) && $length === 0) {
+                return '';
+            }
+            if ($start > RandomCompat_strlen($binary_string)) {
+                return false;
+            }
+
+            return mb_substr($binary_string, $start, $length, '8bit');
+        }
+
+    } else {
+
+        /**
+         * substr() implementation that isn't brittle to mbstring.func_overload
+         *
+         * This version just uses the default substr()
+         *
+         * @param string $binary_string
+         * @param int $start
+         * @param int $length (optional)
+         *
+         * @throws TypeError
+         *
+         * @return string
+         */
+        function RandomCompat_substr($binary_string, $start, $length = null)
+        {
+            if (!is_string($binary_string)) {
+                throw new TypeError(
+                    'RandomCompat_substr(): First argument should be a string'
+                );
+            }
+
+            if (!is_int($start)) {
+                throw new TypeError(
+                    'RandomCompat_substr(): Second argument should be an integer'
+                );
+            }
+
+            if ($length !== null) {
+                if (!is_int($length)) {
+                    throw new TypeError(
+                        'RandomCompat_substr(): Third argument should be an integer, or omitted'
+                    );
+                }
+
+                return substr($binary_string, $start, $length);
+            }
+
+            return substr($binary_string, $start);
+        }
+    }
+}

--- inc/Exts/random_compat/lib/cast_to_int.php ---
@@ -0,0 +1,71 @@
+<?php
+/**
+ * Random_* Compatibility Library
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ *
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!is_callable('RandomCompat_intval')) {
+    
+    /**
+     * Cast to an integer if we can, safely.
+     * 
+     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)
+     * (non-inclusive), it will sanely cast it to an int. If you it's equal to
+     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats 
+     * lose precision, so the <= and => operators might accidentally let a float
+     * through.
+     * 
+     * @param int|float $number    The number we want to convert to an int
+     * @param boolean   $fail_open Set to true to not throw an exception
+     * 
+     * @return int (or float if $fail_open)
+     *
+     * @throws TypeError
+     */
+    function RandomCompat_intval($number, $fail_open = false)
+    {
+        if (is_numeric($number)) {
+            $number += 0;
+        }
+
+        if (
+            is_float($number)
+            &&
+            $number > ~PHP_INT_MAX
+            &&
+            $number < PHP_INT_MAX
+        ) {
+            $number = (int) $number;
+        }
+
+        if (is_int($number) || $fail_open) {
+            return $number;
+        }
+
+        throw new TypeError(
+            'Expected an integer.'
+        );
+    }
+}

--- inc/Exts/random_compat/lib/error_polyfill.php ---
@@ -0,0 +1,49 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!class_exists('Error', false)) {
+    // We can't really avoid making this extend Exception in PHP 5.
+    class Error extends Exception
+    {
+        
+    }
+}
+
+if (!class_exists('TypeError', false)) {
+    if (is_subclass_of('Error', 'Exception')) {
+        class TypeError extends Error
+        {
+            
+        }
+    } else {
+        class TypeError extends Exception
+        {
+            
+        }
+    }
+}

--- inc/Exts/random_compat/lib/random.php ---
@@ -0,0 +1,215 @@
+<?php
+/**
+ * Random_* Compatibility Library
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ *
+ * @version 2.0.4
+ * @released 2016-11-07
+ *
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!defined('PHP_VERSION_ID')) {
+    // This constant was introduced in PHP 5.2.7
+    $RandomCompatversion = array_map('intval', explode('.', PHP_VERSION));
+    define(
+        'PHP_VERSION_ID',
+        $RandomCompatversion[0] * 10000
+        + $RandomCompatversion[1] * 100
+        + $RandomCompatversion[2]
+    );
+    $RandomCompatversion = null;
+}
+
+/**
+ * PHP 7.0.0 and newer have these functions natively.
+ */
+if (PHP_VERSION_ID < 70000) {
+    if (!defined('RANDOM_COMPAT_READ_BUFFER')) {
+        define('RANDOM_COMPAT_READ_BUFFER', 8);
+    }
+
+    $RandomCompatDIR = dirname(__FILE__);
+
+    require_once $RandomCompatDIR.'/byte_safe_strings.php';
+    require_once $RandomCompatDIR.'/cast_to_int.php';
+    require_once $RandomCompatDIR.'/error_polyfill.php';
+
+    if (!is_callable('random_bytes')) {
+        /**
+         * PHP 5.2.0 - 5.6.x way to implement random_bytes()
+         *
+         * We use conditional statements here to define the function in accordance
+         * to the operating environment. It's a micro-optimization.
+         *
+         * In order of preference:
+         *   1. Use libsodium if available.
+         *   2. fread() /dev/urandom if available (never on Windows)
+         *   3. mcrypt_create_iv($bytes, MCRYPT_DEV_URANDOM)
+         *   4. COM('CAPICOM.Utilities.1')->GetRandom()
+         *   5. openssl_random_pseudo_bytes() (absolute last resort)
+         *
+         * See RATIONALE.md for our reasoning behind this particular order
+         */
+        if (extension_loaded('libsodium')) {
+            // See random_bytes_libsodium.php
+            if (PHP_VERSION_ID >= 50300 && is_callable('\\Sodium\\randombytes_buf')) {
+                require_once $RandomCompatDIR.'/random_bytes_libsodium.php';
+            } elseif (method_exists('Sodium', 'randombytes_buf')) {
+                require_once $RandomCompatDIR.'/random_bytes_libsodium_legacy.php';
+            }
+        }
+
+        /**
+         * Reading directly from /dev/urandom:
+         */
+        if (DIRECTORY_SEPARATOR === '/') {
+            // DIRECTORY_SEPARATOR === '/' on Unix-like OSes -- this is a fast
+            // way to exclude Windows.
+            $RandomCompatUrandom = true;
+            $RandomCompat_basedir = ini_get('open_basedir');
+
+            if (!empty($RandomCompat_basedir)) {
+                $RandomCompat_open_basedir = explode(
+                    PATH_SEPARATOR,
+                    strtolower($RandomCompat_basedir)
+                );
+                $RandomCompatUrandom = (array() !== array_intersect(
+                    array('/dev', '/dev/', '/dev/urandom'),
+                    $RandomCompat_open_basedir
+                ));
+                $RandomCompat_open_basedir = null;
+            }
+
+            if (
+                !is_callable('random_bytes')
+                &&
+                $RandomCompatUrandom
+                &&
+                @is_readable('/dev/urandom')
+            ) {
+                // Error suppression on is_readable() in case of an open_basedir
+                // or safe_mode failure. All we care about is whether or not we
+                // can read it at this point. If the PHP environment is going to
+                // panic over trying to see if the file can be read in the first
+                // place, that is not helpful to us here.
+
+                // See random_bytes_dev_urandom.php
+                require_once $RandomCompatDIR.'/random_bytes_dev_urandom.php';
+            }
+            // Unset variables after use
+            $RandomCompat_basedir = null;
+        } else {
+            $RandomCompatUrandom = false;
+        }
+
+        /**
+         * mcrypt_create_iv()
+         *
+         * We only want to use mcypt_create_iv() if:
+         *
+         * - random_bytes() hasn't already been defined
+         * - PHP >= 5.3.7
+         * - the mcrypt extensions is loaded
+         * - One of these two conditions is true:
+         *   - We're on Windows (DIRECTORY_SEPARATOR !== '/')
+         *   - We're not on Windows and /dev/urandom is readabale
+         *     (i.e. we're not in a chroot jail)
+         * - Special case:
+         *   - If we're not on Windows, but the PHP version is between
+         *     5.6.10 and 5.6.12, we don't want to use mcrypt. It will
+         *     hang indefinitely. This is bad.
+         */
+        if (
+            !is_callable('random_bytes')
+            &&
+            PHP_VERSION_ID >= 50307
+            &&
+            extension_loaded('mcrypt')
+        ) {
+            // Prevent this code from hanging indefinitely on non-Windows;
+            // see https://bugs.php.net/bug.php?id=69833
+            if (
+                DIRECTORY_SEPARATOR !== '/' || 
+                (PHP_VERSION_ID <= 50609 || PHP_VERSION_ID >= 50613)
+            ) {
+                // See random_bytes_mcrypt.php
+                require_once $RandomCompatDIR.'/random_bytes_mcrypt.php';
+            }
+        }
+        $RandomCompatUrandom = null;
+
+        /**
+         * This is a Windows-specific fallback, for when the mcrypt extension
+         * isn't loaded.
+         */
+        if (
+            !is_callable('random_bytes')
+            &&
+            extension_loaded('com_dotnet')
+            &&
+            class_exists('COM')
+        ) {
+            $RandomCompat_disabled_classes = preg_split(
+                '#\s*,\s*#',
+                strtolower(ini_get('disable_classes'))
+            );
+
+            if (!in_array('com', $RandomCompat_disabled_classes)) {
+                try {
+                    $RandomCompatCOMtest = new COM('CAPICOM.Utilities.1');
+                    if (method_exists($RandomCompatCOMtest, 'GetRandom')) {
+                        // See random_bytes_com_dotnet.php
+                        require_once $RandomCompatDIR.'/random_bytes_com_dotnet.php';
+                    }
+                } catch (com_exception $e) {
+                    // Don't try to use it.
+                }
+            }
+            $RandomCompat_disabled_classes = null;
+            $RandomCompatCOMtest = null;
+        }
+
+        /**
+         * throw new Exception
+         */
+        if (!is_callable('random_bytes')) {
+            /**
+             * We don't have any more options, so let's throw an exception right now
+             * and hope the developer won't let it fail silently.
+             */
+            function random_bytes($length)
+            {
+                throw new Exception(
+                    'There is no suitable CSPRNG installed on your system'
+                );
+            }
+        }
+    }
+
+    if (!is_callable('random_int')) {
+        require_once $RandomCompatDIR.'/random_int.php';
+    }
+
+    $RandomCompatDIR = null;
+}

--- inc/Exts/random_compat/lib/random_bytes_com_dotnet.php ---
@@ -0,0 +1,83 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ * 
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!is_callable('random_bytes')) {
+    /**
+     * Windows with PHP < 5.3.0 will not have the function
+     * openssl_random_pseudo_bytes() available, so let's use
+     * CAPICOM to work around this deficiency.
+     *
+     * @param int $bytes
+     *
+     * @throws Exception
+     *
+     * @return string
+     */
+    function random_bytes($bytes)
+    {
+        try {
+            $bytes = RandomCompat_intval($bytes);
+        } catch (TypeError $ex) {
+            throw new TypeError(
+                'random_bytes(): $bytes must be an integer'
+            );
+        }
+
+        if ($bytes < 1) {
+            throw new Error(
+                'Length must be greater than 0'
+            );
+        }
+
+        $buf = '';
+        $util = new COM('CAPICOM.Utilities.1');
+        $execCount = 0;
+
+        /**
+         * Let's not let it loop forever. If we run N times and fail to
+         * get N bytes of random data, then CAPICOM has failed us.
+         */
+        do {
+            $buf .= base64_decode($util->GetRandom($bytes, 0));
+            if (RandomCompat_strlen($buf) >= $bytes) {
+                /**
+                 * Return our random entropy buffer here:
+                 */
+                return RandomCompat_substr($buf, 0, $bytes);
+            }
+            ++$execCount;
+        } while ($execCount < $bytes);
+
+        /**
+         * If we reach here, PHP has failed us.
+         */
+        throw new Exception(
+            'Could not gather sufficient random data'
+        );
+    }
+}
\ No newline at end of file

--- inc/Exts/random_compat/lib/random_bytes_dev_urandom.php ---
@@ -0,0 +1,150 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!defined('RANDOM_COMPAT_READ_BUFFER')) {
+    define('RANDOM_COMPAT_READ_BUFFER', 8);
+}
+
+if (!is_callable('random_bytes')) {
+    /**
+     * Unless open_basedir is enabled, use /dev/urandom for
+     * random numbers in accordance with best practices
+     *
+     * Why we use /dev/urandom and not /dev/random
+     * @ref http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers
+     *
+     * @param int $bytes
+     *
+     * @throws Exception
+     *
+     * @return string
+     */
+    function random_bytes($bytes)
+    {
+        static $fp = null;
+        /**
+         * This block should only be run once
+         */
+        if (empty($fp)) {
+            /**
+             * We use /dev/urandom if it is a char device.
+             * We never fall back to /dev/random
+             */
+            $fp = fopen('/dev/urandom', 'rb');
+            if (!empty($fp)) {
+                $st = fstat($fp);
+                if (($st['mode'] & 0170000) !== 020000) {
+                    fclose($fp);
+                    $fp = false;
+                }
+            }
+
+            if (!empty($fp)) {
+                /**
+                 * stream_set_read_buffer() does not exist in HHVM
+                 *
+                 * If we don't set the stream's read buffer to 0, PHP will
+                 * internally buffer 8192 bytes, which can waste entropy
+                 *
+                 * stream_set_read_buffer returns 0 on success
+                 */
+                if (is_callable('stream_set_read_buffer')) {
+                    stream_set_read_buffer($fp, RANDOM_COMPAT_READ_BUFFER);
+                }
+                if (is_callable('stream_set_chunk_size')) {
+                    stream_set_chunk_size($fp, RANDOM_COMPAT_READ_BUFFER);
+                }
+            }
+        }
+
+        try {
+            $bytes = RandomCompat_intval($bytes);
+        } catch (TypeError $ex) {
+            throw new TypeError(
+                'random_bytes(): $bytes must be an integer'
+            );
+        }
+
+        if ($bytes < 1) {
+            throw new Error(
+                'Length must be greater than 0'
+            );
+        }
+
+        /**
+         * This if() block only runs if we managed to open a file handle
+         *
+         * It does not belong in an else {} block, because the above
+         * if (empty($fp)) line is logic that should only be run once per
+         * page load.
+         */
+        if (!empty($fp)) {
+            $remaining = $bytes;
+            $buf = '';
+
+            /**
+             * We use fread() in a loop to protect against partial reads
+             */
+            do {
+                $read = fread($fp, $remaining);
+                if ($read === false) {
+                    /**
+                     * We cannot safely read from the file. Exit the
+                     * do-while loop and trigger the exception condition
+                     */
+                    $buf = false;
+                    break;
+                }
+                /**
+                 * Decrease the number of bytes returned from remaining
+                 */
+                $remaining -= RandomCompat_strlen($read);
+                $buf .= $read;
+            } while ($remaining > 0);
+
+            /**
+             * Is our result valid?
+             */
+            if ($buf !== false) {
+                if (RandomCompat_strlen($buf) === $bytes) {
+                    /**
+                     * Return our random entropy buffer here:
+                     */
+                    return $buf;
+                }
+            }
+        }
+
+        /**
+         * If we reach here, PHP has failed us.
+         */
+        throw new Exception(
+            'Error reading from source device'
+        );
+    }
+}

--- inc/Exts/random_compat/lib/random_bytes_libsodium.php ---
@@ -0,0 +1,88 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!is_callable('random_bytes')) {
+    /**
+     * If the libsodium PHP extension is loaded, we'll use it above any other
+     * solution.
+     *
+     * libsodium-php project:
+     * @ref https://github.com/jedisct1/libsodium-php
+     *
+     * @param int $bytes
+     *
+     * @throws Exception
+     *
+     * @return string
+     */
+    function random_bytes($bytes)
+    {
+        try {
+            $bytes = RandomCompat_intval($bytes);
+        } catch (TypeError $ex) {
+            throw new TypeError(
+                'random_bytes(): $bytes must be an integer'
+            );
+        }
+
+        if ($bytes < 1) {
+            throw new Error(
+                'Length must be greater than 0'
+            );
+        }
+
+        /**
+         * \Sodium\randombytes_buf() doesn't allow more than 2147483647 bytes to be
+         * generated in one invocation.
+         */
+        if ($bytes > 2147483647) {
+            $buf = '';
+            for ($i = 0; $i < $bytes; $i += 1073741824) {
+                $n = ($bytes - $i) > 1073741824
+                    ? 1073741824
+                    : $bytes - $i;
+                $buf .= \Sodium\randombytes_buf($n);
+            }
+        } else {
+            $buf = \Sodium\randombytes_buf($bytes);
+        }
+
+        if ($buf !== false) {
+            if (RandomCompat_strlen($buf) === $bytes) {
+                return $buf;
+            }
+        }
+
+        /**
+         * If we reach here, PHP has failed us.
+         */
+        throw new Exception(
+            'Could not gather sufficient random data'
+        );
+    }
+}

--- inc/Exts/random_compat/lib/random_bytes_libsodium_legacy.php ---
@@ -0,0 +1,88 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!is_callable('random_bytes')) {
+    /**
+     * If the libsodium PHP extension is loaded, we'll use it above any other
+     * solution.
+     *
+     * libsodium-php project:
+     * @ref https://github.com/jedisct1/libsodium-php
+     *
+     * @param int $bytes
+     *
+     * @throws Exception
+     *
+     * @return string
+     */
+    function random_bytes($bytes)
+    {
+        try {
+            $bytes = RandomCompat_intval($bytes);
+        } catch (TypeError $ex) {
+            throw new TypeError(
+                'random_bytes(): $bytes must be an integer'
+            );
+        }
+
+        if ($bytes < 1) {
+            throw new Error(
+                'Length must be greater than 0'
+            );
+        }
+
+        /**
+         * \Sodium\randombytes_buf() doesn't allow more than 2147483647 bytes to be
+         * generated in one invocation.
+         */
+        if ($bytes > 2147483647) {
+            $buf = '';
+            for ($i = 0; $i < $bytes; $i += 1073741824) {
+                $n = ($bytes - $i) > 1073741824
+                    ? 1073741824
+                    : $bytes - $i;
+                $buf .= Sodium::randombytes_buf($n);
+            }
+        } else {
+            $buf = Sodium::randombytes_buf($bytes);
+        }
+
+        if ($buf !== false) {
+            if (RandomCompat_strlen($buf) === $bytes) {
+                return $buf;
+            }
+        }
+
+        /**
+         * If we reach here, PHP has failed us.
+         */
+        throw new Exception(
+            'Could not gather sufficient random data'
+        );
+    }
+}

--- inc/Exts/random_compat/lib/random_bytes_mcrypt.php ---
@@ -0,0 +1,77 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+if (!is_callable('random_bytes')) {
+    /**
+     * Powered by ext/mcrypt (and thankfully NOT libmcrypt)
+     *
+     * @ref https://bugs.php.net/bug.php?id=55169
+     * @ref https://github.com/php/php-src/blob/c568ffe5171d942161fc8dda066bce844bdef676/ext/mcrypt/mcrypt.c#L1321-L1386
+     *
+     * @param int $bytes
+     *
+     * @throws Exception
+     *
+     * @return string
+     */
+    function random_bytes($bytes)
+    {
+        try {
+            $bytes = RandomCompat_intval($bytes);
+        } catch (TypeError $ex) {
+            throw new TypeError(
+                'random_bytes(): $bytes must be an integer'
+            );
+        }
+
+        if ($bytes < 1) {
+            throw new Error(
+                'Length must be greater than 0'
+            );
+        }
+
+        $buf = @mcrypt_create_iv($bytes, MCRYPT_DEV_URANDOM);
+        if (
+            $buf !== false
+            &&
+            RandomCompat_strlen($buf) === $bytes
+        ) {
+            /**
+             * Return our random entropy buffer here:
+             */
+            return $buf;
+        }
+
+        /**
+         * If we reach here, PHP has failed us.
+         */
+        throw new Exception(
+            'Could not gather sufficient random data'
+        );
+    }
+}

--- inc/Exts/random_compat/lib/random_int.php ---
@@ -0,0 +1,191 @@
+<?php
+/**
+ * Random_* Compatibility Library 
+ * for using the new PHP 7 random_* API in PHP 5 projects
+ * 
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+/**
+ * Fetch a random integer between $min and $max inclusive
+ * 
+ * @param int $min
+ * @param int $max
+ * 
+ * @throws Exception
+ * 
+ * @return int
+ */
+function random_int($min, $max)
+{
+    /**
+     * Type and input logic checks
+     * 
+     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)
+     * (non-inclusive), it will sanely cast it to an int. If you it's equal to
+     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats 
+     * lose precision, so the <= and => operators might accidentally let a float
+     * through.
+     */
+    
+    try {
+        $min = RandomCompat_intval($min);
+    } catch (TypeError $ex) {
+        throw new TypeError(
+            'random_int(): $min must be an integer'
+        );
+    }
+
+    try {
+        $max = RandomCompat_intval($max);
+    } catch (TypeError $ex) {
+        throw new TypeError(
+            'random_int(): $max must be an integer'
+        );
+    }
+    
+    /**
+     * Now that we've verified our weak typing system has given us an integer,
+     * let's validate the logic then we can move forward with generating random
+     * integers along a given range.
+     */
+    if ($min > $max) {
+        throw new Error(
+            'Minimum value must be less than or equal to the maximum value'
+        );
+    }
+
+    if ($max === $min) {
+        return $min;
+    }
+
+    /**
+     * Initialize variables to 0
+     * 
+     * We want to store:
+     * $bytes => the number of random bytes we need
+     * $mask => an integer bitmask (for use with the &) operator
+     *          so we can minimize the number of discards
+     */
+    $attempts = $bits = $bytes = $mask = $valueShift = 0;
+
+    /**
+     * At this point, $range is a positive number greater than 0. It might
+     * overflow, however, if $max - $min > PHP_INT_MAX. PHP will cast it to
+     * a float and we will lose some precision.
+     */
+    $range = $max - $min;
+
+    /**
+     * Test for integer overflow:
+     */
+    if (!is_int($range)) {
+
+        /**
+         * Still safely calculate wider ranges.
+         * Provided by @CodesInChaos, @oittaa
+         * 
+         * @ref https://gist.github.com/CodesInChaos/03f9ea0b58e8b2b8d435
+         * 
+         * We use ~0 as a mask in this case because it generates all 1s
+         * 
+         * @ref https://eval.in/400356 (32-bit)
+         * @ref http://3v4l.org/XX9r5  (64-bit)
+         */
+        $bytes = PHP_INT_SIZE;
+        $mask = ~0;
+
+    } else {
+
+        /**
+         * $bits is effectively ceil(log($range, 2)) without dealing with 
+         * type juggling
+         */
+        while ($range > 0) {
+            if ($bits % 8 === 0) {
+               ++$bytes;
+            }
+            ++$bits;
+            $range >>= 1;
+            $mask = $mask << 1 | 1;
+        }
+        $valueShift = $min;
+    }
+
+    /**
+     * Now that we have our parameters set up, let's begin generating
+     * random integers until one falls between $min and $max
+     */
+    do {
+        /**
+         * The rejection probability is at most 0.5, so this corresponds
+         * to a failure probability of 2^-128 for a working RNG
+         */
+        if ($attempts > 128) {
+            throw new Exception(
+                'random_int: RNG is broken - too many rejections'
+            );
+        }
+
+        /**
+         * Let's grab the necessary number of random bytes
+         */
+        $randomByteString = random_bytes($bytes);
+        if ($randomByteString === false) {
+            throw new Exception(
+                'Random number generator failure'
+            );
+        }
+
+        /**
+         * Let's turn $randomByteString into an integer
+         * 
+         * This uses bitwise operators (<< and |) to build an integer
+         * out of the values extracted from ord()
+         * 
+         * Example: [9F] | [6D] | [32] | [0C] =>
+         *   159 + 27904 + 3276800 + 201326592 =>
+         *   204631455
+         */
+        $val = 0;
+        for ($i = 0; $i < $bytes; ++$i) {
+            $val |= ord($randomByteString[$i]) << ($i * 8);
+        }
+
+        /**
+         * Apply mask
+         */
+        $val &= $mask;
+        $val += $valueShift;
+
+        ++$attempts;
+        /**
+         * If $val overflows to a floating point number,
+         * ... or is larger than $max,
+         * ... or smaller than $min,
+         * then try again.
+         */
+    } while (!is_int($val) || $val > $max || $val < $min);
+
+    return (int) $val;
+}

--- inc/Plugins/Authenticator/PreferencesController.class.php ---
@@ -26,10 +26,11 @@
 
 use InvalidArgumentException;
 use SP\Controller\TabControllerBase;
-use SP\Core\Crypt;
+use SP\Core\OldCrypt;
 use SP\Core\Plugin\PluginBase;
 use SP\Core\Plugin\PluginInterface;
 use SP\Util\ArrayUtil;
+use SP\Util\Util;
 
 /**
  * Class Controller
@@ -79,7 +80,7 @@ public function getSecurityTab()
             $IV = null;
 
             if (!$AuthenticatorData->isTwofaEnabled()) {
-                $IV = Crypt::getIV();
+                $IV = Util::generateRandomBytes();
                 $AuthenticatorData->setIV($IV);
 
                 Session::setUserData($AuthenticatorData);

--- inc/SP/Account/Account.class.php ---
@@ -24,19 +24,20 @@
 
 namespace SP\Account;
 
-use SP\Core\Crypt;
+use Defuse\Crypto\Exception\CryptoException;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Session as CryptSession;
+use SP\Core\Exceptions\QueryException;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Session;
 use SP\DataModel\AccountData;
 use SP\DataModel\AccountExtData;
 use SP\DataModel\GroupAccountsData;
-use SP\Log\Email;
 use SP\Log\Log;
 use SP\Mgmt\Groups\GroupAccounts;
 use SP\Mgmt\Groups\GroupAccountsUtil;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
-use SP\Util\Checks;
 
 defined('APP_ROOT') || die();
 
@@ -157,7 +158,7 @@ public function restoreFromHistory($id)
             . 'dst.account_otherUserEdit = src.acchistory_otherUserEdit + 0,'
             . 'dst.account_otherGroupEdit = src.acchistory_otherGroupEdit + 0,'
             . 'dst.account_pass = src.acchistory_pass,'
-            . 'dst.account_IV = src.acchistory_IV,'
+            . 'dst.account_key = src.acchistory_key,'
             . 'dst.account_passDate = src.acchistory_passDate,'
             . 'dst.account_passDateChange = src.acchistory_passDateChange, '
             . 'dst.account_parentId = src.acchistory_parentId, '
@@ -215,6 +216,11 @@ public function getData()
      *
      * @param bool $encryptPass Encriptar la clave?
      * @return $this
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      * @throws SPException
      */
     public function createAccount($encryptPass = true)
@@ -231,7 +237,7 @@ public function createAccount($encryptPass = true)
             . 'account_login = :accountLogin,'
             . 'account_url = :accountUrl,'
             . 'account_pass = :accountPass,'
-            . 'account_IV = :accountIV,'
+            . 'account_key = :accountKey,'
             . 'account_notes = :accountNotes,'
             . 'account_dateAdd = NOW(),'
             . 'account_userId = :accountUserId,'
@@ -253,7 +259,7 @@ public function createAccount($encryptPass = true)
         $Data->addParam($this->accountData->getAccountLogin(), 'accountLogin');
         $Data->addParam($this->accountData->getAccountUrl(), 'accountUrl');
         $Data->addParam($this->accountData->getAccountPass(), 'accountPass');
-        $Data->addParam($this->accountData->getAccountIV(), 'accountIV');
+        $Data->addParam($this->accountData->getAccountKey(), 'accountKey');
         $Data->addParam($this->accountData->getAccountNotes(), 'accountNotes');
         $Data->addParam($this->accountData->getAccountUserId(), 'accountUserId');
         $Data->addParam($this->accountData->getAccountUserGroupId() ?: Session::getUserData()->getUserGroupId(), 'accountUserGroupId');
@@ -300,13 +306,23 @@ public function createAccount($encryptPass = true)
      *
      * @param string $masterPass Clave maestra a utilizar
      * @throws \SP\Core\Exceptions\SPException
+     * @throws \SP\Core\Exceptions\QueryException
      */
-    protected function setPasswordEncrypted($masterPass = null)
+    public function setPasswordEncrypted($masterPass = null)
     {
-        $pass = Crypt::encryptData($this->accountData->getAccountPass(), $masterPass);
+        try {
+            $masterPass = $masterPass ?: CryptSession::getSessionKey();
+            $securedKey = Crypt::makeSecuredKey($masterPass);
+
+            $this->accountData->setAccountPass(Crypt::encrypt($this->accountData->getAccountPass(), $securedKey, $masterPass));
+            $this->accountData->setAccountKey($securedKey);
 
-        $this->accountData->setAccountPass($pass['data']);
-        $this->accountData->setAccountIV($pass['iv']);
+            if (strlen($securedKey) > 1000 || strlen($this->accountData->getAccountPass()) > 1000) {
+                throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+            }
+        } catch (CryptoException $e) {
+            throw new SPException(SPException::SP_ERROR, __('Error interno', false));
+        }
     }
 
     /**
@@ -346,149 +362,50 @@ public function deleteAccount($id)
     /**
      * Incrementa el contador de visitas de una cuenta en la BBDD
      *
+     * @param int $id
      * @return bool
      * @throws \SP\Core\Exceptions\QueryException
      * @throws \SP\Core\Exceptions\ConstraintException
      */
-    public function incrementViewCounter()
+    public function incrementViewCounter($id = null)
     {
         $query = /** @lang SQL */
             'UPDATE accounts SET account_countView = (account_countView + 1) WHERE account_id = ? LIMIT 1';
 
         $Data = new QueryData();
         $Data->setQuery($query);
-        $Data->addParam($this->accountData->getAccountId());
+        $Data->addParam($id ?: $this->accountData->getAccountId());
 
         return DB::getQuery($Data);
     }
 
     /**
      * Incrementa el contador de vista de clave de una cuenta en la BBDD
      *
+     * @param null $id
      * @return bool
      * @throws \SP\Core\Exceptions\QueryException
      * @throws \SP\Core\Exceptions\ConstraintException
      */
-    public function incrementDecryptCounter()
+    public function incrementDecryptCounter($id = null)
     {
         $query = /** @lang SQL */
             'UPDATE accounts SET account_countDecrypt = (account_countDecrypt + 1) WHERE account_id = ? LIMIT 1';
 
         $Data = new QueryData();
         $Data->setQuery($query);
-        $Data->addParam($this->accountData->getAccountId());
+        $Data->addParam($id ?: $this->accountData->getAccountId());
 
         return DB::getQuery($Data);
     }
 
-    /**
-     * Actualiza las claves de todas las cuentas con la nueva clave maestra.
-     *
-     * @param string $currentMasterPass con la clave maestra actual
-     * @param string $newMasterPass     con la nueva clave maestra
-     * @param string $newHash           con el nuevo hash de la clave maestra
-     * @return bool
-     * @throws \phpmailer\phpmailerException
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public function updateAccountsMasterPass($currentMasterPass, $newMasterPass, $newHash = null)
-    {
-        $accountsOk = [];
-        $userId = Session::getUserData()->getUserId();
-        $demoEnabled = Checks::demoIsEnabled();
-        $errorCount = 0;
-
-        $Log = new Log();
-        $LogMessage = $Log->getLogMessage();
-        $LogMessage->setAction(__('Actualizar Clave Maestra', false));
-        $LogMessage->addDescription(__('Inicio', false));
-        $Log->writeLog(true);
-
-        if (!Crypt::checkCryptModule()) {
-            $LogMessage->addDescription(__('Error en el módulo de encriptación', false));
-            $Log->setLogLevel(Log::ERROR);
-            $Log->writeLog();
-            return false;
-        }
-
-        $accountsPass = $this->getAccountsPassData();
-
-        if (!$accountsPass) {
-            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));
-            $Log->setLogLevel(Log::ERROR);
-            $Log->writeLog();
-            return false;
-        }
-
-        foreach ($accountsPass as $account) {
-            $this->accountData->setAccountId($account->account_id);
-            $this->accountData->setAccountUserEditId($userId);
-
-            // No realizar cambios si está en modo demo
-            if ($demoEnabled) {
-                $accountsOk[] = $this->accountData->getAccountId();
-                continue;
-            }
-
-            if (empty($account->account_pass)) {
-                $LogMessage->addDetails(__('Clave de cuenta vacía', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));
-                continue;
-            }
-
-            if (strlen($account->account_IV) < 32) {
-                $LogMessage->addDetails(__('IV de encriptación incorrecto', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));
-            }
-
-            $decryptedPass = Crypt::getDecrypt($account->account_pass, $account->account_IV, $currentMasterPass);
-            $this->accountData->setAccountPass($decryptedPass);
-            $this->setPasswordEncrypted($newMasterPass);
-
-            if ($this->accountData->getAccountPass() === false) {
-                $errorCount++;
-                $LogMessage->addDetails(__('No es posible desencriptar la clave de la cuenta', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));
-                continue;
-            }
-
-            try {
-                $this->updateAccountPass(true);
-                $accountsOk[] = $this->accountData->getAccountId();
-            } catch (SPException $e) {
-                $errorCount++;
-                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));
-                continue;
-            }
-        }
-
-        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));
-        $LogMessage->addDetails(__('Errores', false), $errorCount);
-        $Log->writeLog();
-
-        Email::sendEmail($LogMessage);
-
-        return true;
-    }
-
-    /**
-     * Obtener los datos relativos a la clave de todas las cuentas.
-     *
-     * @return array Con los datos de la clave
-     */
-    protected function getAccountsPassData()
-    {
-        $query = /** @lang SQL */
-            'SELECT account_id, account_name, account_pass, account_IV FROM accounts';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-
-        return DB::getResultsArray($Data);
-    }
-
     /**
      * Actualiza la clave de una cuenta en la BBDD.
      *
      * @param bool $isMassive para no actualizar el histórico ni enviar mensajes
      * @return bool
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \SP\Core\Exceptions\QueryException
      * @throws \SP\Core\Exceptions\SPException
      */
     public function updateAccountPass($isMassive = false)
@@ -503,7 +420,7 @@ public function updateAccountPass($isMassive = false)
         $query = /** @lang SQL */
             'UPDATE accounts SET '
             . 'account_pass = :accountPass,'
-            . 'account_IV = :accountIV,'
+            . 'account_key = :accountKey,'
             . 'account_userEditId = :accountUserEditId,'
             . 'account_dateEdit = NOW(), '
             . 'account_passDate = UNIX_TIMESTAMP(), '
@@ -513,7 +430,7 @@ public function updateAccountPass($isMassive = false)
         $Data = new QueryData();
         $Data->setQuery($query);
         $Data->addParam($this->accountData->getAccountPass(), 'accountPass');
-        $Data->addParam($this->accountData->getAccountIV(), 'accountIV');
+        $Data->addParam($this->accountData->getAccountKey(), 'accountKey');
         $Data->addParam($this->accountData->getAccountUserEditId(), 'accountUserEditId');
         $Data->addParam($this->accountData->getAccountPassDateChange(), 'accountPassDateChange');
         $Data->addParam($this->accountData->getAccountId(), 'accountId');
@@ -538,7 +455,7 @@ public function getAccountPassData()
             . 'account_userGroupId,'
             . 'account_login,'
             . 'account_pass,'
-            . 'account_IV,'
+            . 'account_key,'
             . 'customer_name '
             . 'FROM accounts '
             . 'LEFT JOIN customers ON account_customerId = customer_id '
@@ -555,4 +472,44 @@ public function getAccountPassData()
 
         return DB::getResults($Data);
     }
+
+    /**
+     * Obtener los datos de una cuenta.
+     * Esta funcion realiza la consulta a la BBDD y guarda los datos en las variables de la clase.
+     *
+     * @return AccountExtData
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function getDataForLink()
+    {
+        $query = /** @lang SQL */
+            'SELECT account_name,'
+            . 'account_login,'
+            . 'account_pass,'
+            . 'account_key,'
+            . 'account_url,'
+            . 'account_notes,'
+            . 'category_name,'
+            . 'customer_name '
+            . 'FROM accounts '
+            . 'LEFT JOIN customers ON account_customerId = customer_id '
+            . 'LEFT JOIN categories ON account_categoryId = category_id '
+            . 'WHERE account_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->setMapClass($this->accountData);
+        $Data->addParam($this->accountData->getAccountId());
+
+        /** @var AccountExtData|array $queryRes */
+        $queryRes = DB::getResults($Data);
+
+        if ($queryRes === false) {
+            throw new SPException(SPException::SP_CRITICAL, __('No se pudieron obtener los datos de la cuenta', false));
+        } elseif (is_array($queryRes) && count($queryRes) === 0) {
+            throw new SPException(SPException::SP_CRITICAL, __('La cuenta no existe', false));
+        }
+
+        return $this->accountData;
+    }
 }
\ No newline at end of file

--- inc/SP/Account/AccountBase.class.php ---
@@ -108,9 +108,4 @@ public function getAccountData()
      * Esta funcion realiza la consulta a la BBDD y devuelve los datos.
      */
     protected abstract function getAccountPassData();
-
-    /**
-     * Obtener los datos relativos a la clave de todas las cuentas.
-     */
-    protected abstract function getAccountsPassData();
 }
\ No newline at end of file

--- inc/SP/Account/AccountCrypt.class.php ---
@@ -0,0 +1,279 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Account;
+
+use Defuse\Crypto\Exception\CryptoException;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Exceptions\QueryException;
+use SP\Core\Messages\TaskMessage;
+use SP\Core\OldCrypt;
+use SP\Core\Exceptions\SPException;
+use SP\Core\Session;
+use SP\Core\Task;
+use SP\Core\TaskFactory;
+use SP\DataModel\AccountData;
+use SP\Log\Email;
+use SP\Log\Log;
+use SP\Storage\DB;
+use SP\Storage\QueryData;
+use SP\Util\Checks;
+use SP\Util\Util;
+
+/**
+ * Class AccountCrypt
+ *
+ * @package SP\Account
+ */
+class AccountCrypt
+{
+    /**
+     * Actualiza las claves de todas las cuentas con la clave maestra actual
+     * usando nueva encriptación.
+     *
+     * @param string $currentMasterPass
+     * @return bool
+     */
+    public function updateOldPass(&$currentMasterPass)
+    {
+        set_time_limit(0);
+
+        $accountsOk = [];
+        $userId = Session::getUserData()->getUserId();
+        $demoEnabled = Checks::demoIsEnabled();
+        $errorCount = 0;
+
+        $Log = new Log();
+        $LogMessage = $Log->getLogMessage();
+        $LogMessage->setAction(__('Actualizar Clave Maestra', false));
+        $LogMessage->addDescription(__('Inicio', false));
+        $Log->writeLog(true);
+
+        if (!OldCrypt::checkCryptModule()) {
+            $LogMessage->addDescription(__('Error en el módulo de encriptación', false));
+            $Log->setLogLevel(Log::ERROR);
+            $Log->writeLog();
+            return false;
+        }
+
+        $accountsPass = $this->getAccountsPassData();
+        $numAccounts = count($accountsPass);
+
+        if ($numAccounts === 0) {
+            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));
+            $Log->setLogLevel(Log::ERROR);
+            $Log->writeLog();
+            return false;
+        }
+
+        $AccountDataBase = new AccountData();
+
+        TaskFactory::$Message->setTask(__('Actualizar Clave Maestra'));
+        TaskFactory::sendTaskMessage();
+
+        $counter = 0;
+        $startTime = time();
+
+        foreach ($accountsPass as $account) {
+            // No realizar cambios si está en modo demo
+            if ($demoEnabled) {
+                $accountsOk[] = $account->account_id;
+                continue;
+            } elseif ($LogMessage->getDetailsCounter() >= 100) {
+                $Log->writeLog(false, true);
+            }
+
+            if ($counter % 100 === 0) {
+                $eta = Util::getETA($startTime, $counter, $numAccounts);
+
+                TaskFactory::$Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);
+                TaskFactory::$Message->setProgress(round(($counter * 100) / $numAccounts, 2));
+                TaskFactory::$Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));
+                TaskFactory::sendTaskMessage();
+            }
+
+            $AccountData = clone $AccountDataBase;
+
+            $AccountData->setAccountId($account->account_id);
+            $AccountData->setAccountUserEditId($userId);
+
+//            } elseif (strlen($account->account_key) < 32) {
+//                $LogMessage->addDetails(__('IV de encriptación incorrecto', false), sprintf('%s (%d)', $account->account_name, $account->account_id));
+//            }
+
+            try {
+                $decryptedPass = OldCrypt::getDecrypt($account->account_pass, $account->account_key, $currentMasterPass);
+
+                $securedKey = Crypt::makeSecuredKey($currentMasterPass);
+
+                $AccountData->setAccountPass(Crypt::encrypt($decryptedPass, $securedKey, $currentMasterPass));
+                $AccountData->setAccountKey($securedKey);
+
+                if (strlen($securedKey) > 1000 || strlen($AccountData->getAccountPass()) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+                }
+
+                $Account = new Account($AccountData);
+                $Account->updateAccountPass(true);
+
+                $accountsOk[] = $account->account_id;
+                $counter++;
+            } catch (SPException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));
+            } catch (CryptoException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));
+            }
+        }
+
+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));
+        $LogMessage->addDetails(__('Errores', false), $errorCount);
+        $Log->writeLog();
+
+        Email::sendEmail($LogMessage);
+
+        return true;
+    }
+
+    /**
+     * Obtener los datos relativos a la clave de todas las cuentas.
+     *
+     * @return array Con los datos de la clave
+     */
+    protected function getAccountsPassData()
+    {
+        $query = /** @lang SQL */
+            'SELECT account_id, account_name, account_pass, account_key 
+            FROM accounts WHERE BIT_LENGTH(account_pass) > 0';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+
+        return DB::getResultsArray($Data);
+    }
+
+    /**
+     * Actualiza las claves de todas las cuentas con la nueva clave maestra.
+     *
+     * @param string $currentMasterPass
+     * @param string $newMasterPass
+     * @param Task   $Task
+     * @return bool
+     */
+    public function updatePass($currentMasterPass, $newMasterPass, Task $Task)
+    {
+        set_time_limit(0);
+
+        $accountsOk = [];
+        $userId = Session::getUserData()->getUserId();
+        $demoEnabled = Checks::demoIsEnabled();
+        $errorCount = 0;
+
+        $Log = new Log();
+        $LogMessage = $Log->getLogMessage();
+        $LogMessage->setAction(__('Actualizar Clave Maestra', false));
+        $LogMessage->addDescription(__('Inicio', false));
+        $Log->writeLog(true);
+
+        $accountsPass = $this->getAccountsPassData();
+        $numAccounts = count($accountsPass);
+
+        if ($numAccounts === 0) {
+            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));
+            $Log->setLogLevel(Log::ERROR);
+            $Log->writeLog();
+            return false;
+        }
+
+        $AccountDataBase = new AccountData();
+
+        $Message = new TaskMessage();
+        $Message->setTaskId($Task->getTaskId());
+        $Message->setTask(__('Actualizar Clave Maestra'));
+
+        $Task->writeJsonStatusAndFlush($Message);
+
+        $counter = 0;
+        $startTime = time();
+
+        foreach ($accountsPass as $account) {
+            // No realizar cambios si está en modo demo
+            if ($demoEnabled) {
+                $accountsOk[] = $account->account_id;
+                continue;
+            } elseif ($LogMessage->getDetailsCounter() >= 100) {
+                $Log->writeLog(false, true);
+            }
+
+            if ($counter % 100 === 0) {
+                $eta = Util::getETA($startTime, $counter, $numAccounts);
+
+                $Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);
+                $Message->setProgress(round(($counter * 100) / $numAccounts, 2));
+                $Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));
+
+                $Task->writeJsonStatusAndFlush($Message);
+            }
+
+            $AccountData = clone $AccountDataBase;
+
+            $AccountData->setAccountId($account->account_id);
+            $AccountData->setAccountUserEditId($userId);
+
+            try {
+                $currentSecuredKey = Crypt::unlockSecuredKey($account->account_key, $currentMasterPass);
+                $decryptedPass = Crypt::decrypt($account->account_pass, $currentSecuredKey);
+
+                $newSecuredKey = Crypt::makeSecuredKey($newMasterPass);
+                $AccountData->setAccountPass(Crypt::encrypt($decryptedPass, $newSecuredKey, $newMasterPass));
+                $AccountData->setAccountKey($newSecuredKey);
+
+                if (strlen($newSecuredKey) > 1000 || strlen($AccountData->getAccountPass()) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+                }
+
+                $Account = new Account($AccountData);
+                $Account->updateAccountPass(true);
+
+                $accountsOk[] = $account->account_id;
+                $counter++;
+            } catch (SPException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));
+            } catch (CryptoException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));
+            }
+        }
+
+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));
+        $LogMessage->addDetails(__('Errores', false), $errorCount);
+        $Log->writeLog();
+
+        Email::sendEmail($LogMessage);
+
+        return true;
+    }
+}
\ No newline at end of file

--- inc/SP/Account/AccountHistory.class.php ---
@@ -25,7 +25,7 @@
 namespace SP\Account;
 
 use SP\Config\ConfigDB;
-use SP\Core\Crypt;
+use SP\Core\OldCrypt;
 use SP\Core\Exceptions\SPException;
 use SP\Log\Log;
 use SP\Storage\DB;
@@ -115,7 +115,7 @@ public static function addHistory($id, $isDelete = false)
                 . 'account_login,'
                 . 'account_url,'
                 . 'account_pass,'
-                . 'account_IV,'
+                . 'account_key,'
                 . 'account_notes,'
                 . 'account_countView,'
                 . 'account_countDecrypt,'
@@ -143,7 +143,7 @@ public static function addHistory($id, $isDelete = false)
                 . 'account_login,'
                 . 'account_url,'
                 . 'account_pass,'
-                . 'account_IV,'
+                . 'account_key,'
                 . 'account_notes,'
                 . 'account_countView,'
                 . 'account_countDecrypt,'
@@ -171,7 +171,7 @@ public static function addHistory($id, $isDelete = false)
             . 'acchistory_login,'
             . 'acchistory_url,'
             . 'acchistory_pass,'
-            . 'acchistory_IV,'
+            . 'acchistory_key,'
             . 'acchistory_notes,'
             . 'acchistory_countView,'
             . 'acchistory_countDecrypt,'
@@ -242,116 +242,6 @@ public static function updateAccountsMPassHash($newHash)
         return DB::getQuery($Data);
     }
 
-    /**
-     * Actualiza las claves de todas las cuentas en el histórico con la nueva clave maestra.
-     *
-     * @param string $currentMasterPass con la clave maestra actual
-     * @param string $newMasterPass     con la nueva clave maestra
-     * @param string $newHash           con el nuevo hash de la clave maestra
-     * @return bool
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public function updateAccountsMasterPass($currentMasterPass, $newMasterPass, $newHash = null)
-    {
-        $accountsOk = [];
-        $errorCount = 0;
-        $demoEnabled = Checks::demoIsEnabled();
-
-        $Log = new Log();
-        $LogMessage = $Log->getLogMessage();
-        $LogMessage->setAction(__('Actualizar Clave Maestra (H)', false));
-        $LogMessage->addDescription(__('Inicio', false));
-        $Log->writeLog(true);
-
-        if (!Crypt::checkCryptModule()) {
-            $Log->setLogLevel(Log::ERROR);
-            $LogMessage->addDescription(__('Error en el módulo de encriptación', false));
-            $Log->writeLog();
-            return false;
-        }
-
-        $accountsPass = $this->getAccountsPassData();
-
-        if (!$accountsPass) {
-            $Log->setLogLevel(Log::ERROR);
-            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));
-            $Log->writeLog();
-            return false;
-        }
-
-        $AccountDataBase = new \stdClass();
-        $AccountDataBase->id = 0;
-        $AccountDataBase->pass = '';
-        $AccountDataBase->iv = '';
-        $AccountDataBase->hash = $newHash;
-
-        foreach ($accountsPass as $account) {
-            $AccountData = clone $AccountDataBase;
-            $AccountData->id = $account->acchistory_id;
-
-            // No realizar cambios si está en modo demo
-            if ($demoEnabled) {
-                $accountsOk[] = $account->acchistory_id;
-                continue;
-            }
-
-            if (!$this->checkAccountMPass()) {
-                $errorCount++;
-                $LogMessage->addDetails(__('La clave maestra del registro no coincide', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
-                continue;
-            }
-
-            if ($account->acchistory_pass === '') {
-                $LogMessage->addDetails(__('Clave de cuenta vacía', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
-                continue;
-            }
-
-            if (strlen($account->acchistory_IV) < 32) {
-                $LogMessage->addDetails(__('IV de encriptación incorrecto', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
-            }
-
-            $decryptedPass = Crypt::getDecrypt($account->acchistory_pass, $account->acchistory_IV, $currentMasterPass);
-            $AccountData->pass = Crypt::mkEncrypt($decryptedPass, $newMasterPass);
-            $AccountData->iv = Crypt::$strInitialVector;
-
-            if ($AccountData->pass === false) {
-                $errorCount++;
-                $LogMessage->addDetails(__('No es posible desencriptar la clave de la cuenta', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
-                continue;
-            }
-
-            try {
-                $this->updateAccountPass($AccountData);
-                $accountsOk[] = $account->acchistory_id;
-            } catch (SPException $e) {
-                $errorCount++;
-                $LogMessage->addDetails(__('Fallo al actualizar la clave del histórico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
-            }
-        }
-
-        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));
-        $LogMessage->addDetails(__('Errores', false), $errorCount);
-        $Log->writeLog();
-
-        return true;
-    }
-
-    /**
-     * Obtener los datos relativos a la clave de todas las cuentas del histórico.
-     *
-     * @return false|array con los datos de la clave
-     */
-    protected function getAccountsPassData()
-    {
-        $query = /** @lang SQL */
-            'SELECT acchistory_id, acchistory_name, acchistory_pass, acchistory_IV FROM accHistory';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-
-        return DB::getResultsArray($Data);
-    }
-
     /**
      * Comprueba el hash de la clave maestra del registro de histórico de una cuenta.
      *
@@ -387,16 +277,16 @@ public function updateAccountPass($AccountData)
         $query = /** @lang SQL */
             'UPDATE accHistory SET '
             . 'acchistory_pass = :accountPass,'
-            . 'acchistory_IV = :accountIV,'
-            . 'acchistory_mPassHash = :newHash '
+            . 'acchistory_key = :accountKey,'
+            . 'acchistory_mPassHash = :hash '
             . 'WHERE acchistory_id = :id';
 
         $Data = new QueryData();
         $Data->setQuery($query);
         $Data->addParam($AccountData->id, 'id');
         $Data->addParam($AccountData->pass, 'accountPass');
-        $Data->addParam($AccountData->iv, 'accountIV');
-        $Data->addParam($AccountData->hash, 'newHash');
+        $Data->addParam($AccountData->key, 'accountKey');
+        $Data->addParam($AccountData->hash, 'hash');
 
         return DB::getQuery($Data);
     }
@@ -415,7 +305,7 @@ public function getAccountPassData()
             . 'acchistory_userGroupId AS account_userGroupId,'
             . 'acchistory_login AS account_login,'
             . 'acchistory_pass AS account_pass,'
-            . 'acchistory_IV AS account_IV,'
+            . 'acchistory_key AS account_key,'
             . 'customer_name '
             . 'FROM accHistory '
             . 'LEFT JOIN customers ON acchistory_customerId = customer_id '
@@ -463,7 +353,7 @@ public function getData()
             . 'acchistory_login as account_login,'
             . 'acchistory_url as account_url,'
             . 'acchistory_pass as account_pass,'
-            . 'acchistory_IV as account_IV,'
+            . 'acchistory_key as account_key,'
             . 'acchistory_notes as account_notes,'
             . 'acchistory_countView as account_countView,'
             . 'acchistory_countDecrypt as account_countDecrypt,'
@@ -527,7 +417,7 @@ public function createAccount($encryptPass = true)
             . 'acchistory_login = :accountLogin,'
             . 'acchistory_url = :accountUrl,'
             . 'acchistory_pass = :accountPass,'
-            . 'acchistory_IV = :accountIV,'
+            . 'acchistory_key = :accountKey,'
             . 'acchistory_notes = :accountNotes,'
             . 'acchistory_dateAdd = :accountDateAdd,'
             . 'acchistory_dateEdit = :accountDateEdit,'
@@ -552,7 +442,7 @@ public function createAccount($encryptPass = true)
         $Data->addParam($this->accountData->getAccountLogin(), 'accountLogin');
         $Data->addParam($this->accountData->getAccountUrl(), 'accountUrl');
         $Data->addParam($this->accountData->getAccountPass(), 'accountPass');
-        $Data->addParam($this->accountData->getAccountIV(), 'accountIV');
+        $Data->addParam($this->accountData->getAccountKey(), 'accountKey');
         $Data->addParam($this->accountData->getAccountNotes(), 'accountNotes');
         $Data->addParam($this->accountData->getAccountUserId(), 'accountUserId');
         $Data->addParam($this->accountData->getAccountUserGroupId(), 'accountUserGroupId');

--- inc/SP/Account/AccountHistoryCrypt.class.php ---
@@ -0,0 +1,298 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Account;
+
+use Defuse\Crypto\Exception\CryptoException;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Hash;
+use SP\Core\Exceptions\QueryException;
+use SP\Core\Messages\TaskMessage;
+use SP\Core\OldCrypt;
+use SP\Core\Exceptions\SPException;
+use SP\Core\Task;
+use SP\Core\TaskFactory;
+use SP\Log\Email;
+use SP\Log\Log;
+use SP\Storage\DB;
+use SP\Storage\QueryData;
+use SP\Util\Checks;
+use SP\Util\Util;
+
+/**
+ * Class AccountHistoryCrypt
+ *
+ * @package SP\Account
+ */
+class AccountHistoryCrypt
+{
+    /**
+     * @var string
+     */
+    public static $currentMPassHash;
+
+    /**
+     * Actualiza las claves de todas las cuentas con la clave maestra actual
+     * usando nueva encriptación.
+     *
+     * @param string $currentMasterPass
+     * @return bool
+     */
+    public function updateOldPass(&$currentMasterPass)
+    {
+        set_time_limit(0);
+
+        $accountsOk = [];
+        $demoEnabled = Checks::demoIsEnabled();
+        $errorCount = 0;
+
+        $Log = new Log();
+        $LogMessage = $Log->getLogMessage();
+        $LogMessage->setAction(__('Actualizar Clave Maestra (H)', false));
+        $LogMessage->addDescription(__('Inicio', false));
+        $Log->writeLog(true);
+
+        if (!OldCrypt::checkCryptModule()) {
+            $LogMessage->addDescription(__('Error en el módulo de encriptación', false));
+            $Log->setLogLevel(Log::ERROR);
+            $Log->writeLog();
+            return false;
+        }
+
+        $accountsPass = $this->getAccountsPassData();
+        $numAccounts = count($accountsPass);
+
+        if ($numAccounts === 0) {
+            $LogMessage->addDescription(__('No se encontraron registros', false));
+            $Log->setLogLevel(Log::ERROR);
+            $Log->writeLog();
+            return true;
+        }
+
+        $AccountDataBase = new \stdClass();
+        $AccountDataBase->id = 0;
+        $AccountDataBase->pass = '';
+        $AccountDataBase->key = '';
+        $AccountDataBase->hash = Hash::hashKey($currentMasterPass);
+
+        TaskFactory::$Message->setTask(__('Actualizar Clave Maestra (H)'));
+        TaskFactory::sendTaskMessage();
+
+        $counter = 0;
+        $startTime = time();
+
+        foreach ($accountsPass as $account) {
+            // No realizar cambios si está en modo demo
+            if ($demoEnabled) {
+                $accountsOk[] = $account->acchistory_id;
+                continue;
+            } elseif ($LogMessage->getDetailsCounter() >= 100) {
+                $Log->writeLog(false, true);
+            }
+
+            if ($counter % 100 === 0) {
+                $eta = Util::getETA($startTime, $counter, $numAccounts);
+
+                TaskFactory::$Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);
+                TaskFactory::$Message->setProgress(round(($counter * 100) / $numAccounts, 2));
+                TaskFactory::$Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));
+
+                TaskFactory::sendTaskMessage();
+            }
+
+            $AccountData = clone $AccountDataBase;
+
+            $AccountData->id = $account->acchistory_id;
+
+            if (!self::$currentMPassHash === $account->acchistory_mPassHash
+                && !hash_equals($currentMasterPass, $account->acchistory_mPassHash)
+            ) {
+                $errorCount++;
+                $LogMessage->addDetails(__('La clave maestra del registro no coincide', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
+                continue;
+            }
+
+            try {
+                $decryptedPass = OldCrypt::getDecrypt($account->acchistory_pass, $account->acchistory_key, $currentMasterPass);
+
+                $securedKey = Crypt::makeSecuredKey($currentMasterPass);
+
+                $AccountData->pass = Crypt::encrypt($decryptedPass, $securedKey, $currentMasterPass);
+                $AccountData->key = $securedKey;
+
+                if (strlen($securedKey) > 1000 || strlen($AccountData->pass) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+                }
+
+                $Account = new AccountHistory();
+                $Account->updateAccountPass($AccountData);
+
+                $accountsOk[] = $account->acchistory_id;
+                $counter++;
+            } catch (SPException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave del histórico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
+            } catch (CryptoException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave del histórico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
+            }
+        }
+
+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));
+        $LogMessage->addDetails(__('Errores', false), $errorCount);
+        $Log->writeLog();
+
+        Email::sendEmail($LogMessage);
+
+        return true;
+    }
+
+    /**
+     * Obtener los datos relativos a la clave de todas las cuentas.
+     *
+     * @return array Con los datos de la clave
+     */
+    protected function getAccountsPassData()
+    {
+        $query = /** @lang SQL */
+            'SELECT acchistory_id, acchistory_name, acchistory_pass, acchistory_key, acchistory_mPassHash
+            FROM accHistory WHERE BIT_LENGTH(acchistory_pass) > 0';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+
+        return DB::getResultsArray($Data);
+    }
+
+    /**
+     * Actualiza las claves de todas las cuentas con la nueva clave maestra.
+     *
+     * @param string $currentMasterPass
+     * @param string $newMasterPass
+     * @param Task   $Task
+     * @return bool
+     */
+    public function updatePass($currentMasterPass, $newMasterPass, Task $Task)
+    {
+        set_time_limit(0);
+
+        $accountsOk = [];
+        $demoEnabled = Checks::demoIsEnabled();
+        $errorCount = 0;
+
+        $Log = new Log();
+        $LogMessage = $Log->getLogMessage();
+        $LogMessage->setAction(__('Actualizar Clave Maestra (H)', false));
+        $LogMessage->addDescription(__('Inicio', false));
+        $Log->writeLog(true);
+
+        $accountsPass = $this->getAccountsPassData();
+        $numAccounts = count($accountsPass);
+
+        if ($numAccounts === 0) {
+            $LogMessage->addDescription(__('No se encontraron registros', false));
+            $Log->setLogLevel(Log::ERROR);
+            $Log->writeLog();
+            return true;
+        }
+
+        $AccountDataBase = new \stdClass();
+        $AccountDataBase->id = 0;
+        $AccountDataBase->pass = '';
+        $AccountDataBase->key = '';
+        $AccountDataBase->hash = Hash::hashKey($newMasterPass);
+
+        $Message = new TaskMessage();
+        $Message->setTaskId($Task->getTaskId());
+        $Message->setTask(__('Actualizar Clave Maestra (H)'));
+
+        $Task->writeJsonStatusAndFlush($Message);
+
+        $counter = 0;
+        $startTime = time();
+
+        foreach ($accountsPass as $account) {
+            // No realizar cambios si está en modo demo
+            if ($demoEnabled) {
+                $accountsOk[] = $account->acchistory_id;
+                continue;
+            } elseif ($LogMessage->getDetailsCounter() >= 100) {
+                $Log->writeLog(false, true);
+            }
+
+            if ($counter % 100 === 0) {
+                $eta = Util::getETA($startTime, $counter, $numAccounts);
+
+                $Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);
+                $Message->setProgress(round(($counter * 100) / $numAccounts, 2));
+                $Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));
+
+                $Task->writeJsonStatusAndFlush($Message);
+            }
+
+            $AccountData = clone $AccountDataBase;
+
+            $AccountData->id = $account->acchistory_id;
+
+            if (!Hash::checkHashKey($currentMasterPass, $account->acchistory_mPassHash)) {
+                $errorCount++;
+                $LogMessage->addDetails(__('La clave maestra del registro no coincide', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
+                continue;
+            }
+
+            try {
+                $currentSecuredKey = Crypt::unlockSecuredKey($account->acchistory_key, $currentMasterPass);
+                $decryptedPass = Crypt::decrypt($account->acchistory_pass, $currentSecuredKey);
+
+                $newSecuredKey = Crypt::makeSecuredKey($newMasterPass);
+                $AccountData->pass = Crypt::encrypt($decryptedPass, $newSecuredKey, $newMasterPass);
+                $AccountData->key = $newSecuredKey;
+
+                if (strlen($newSecuredKey) > 1000 || strlen($AccountData->pass) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+                }
+
+                $Account = new AccountHistory();
+                $Account->updateAccountPass($AccountData);
+
+                $accountsOk[] = $account->acchistory_id;
+                $counter++;
+            } catch (SPException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave del histórico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
+            } catch (CryptoException $e) {
+                $errorCount++;
+                $LogMessage->addDetails(__('Fallo al actualizar la clave del histórico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));
+            }
+        }
+
+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));
+        $LogMessage->addDetails(__('Errores', false), $errorCount);
+        $Log->writeLog();
+
+        Email::sendEmail($LogMessage);
+
+        return true;
+    }
+}
\ No newline at end of file

--- inc/SP/Account/AccountHistoryUtil.class.php ---
@@ -117,6 +117,7 @@ public static function getAccountsMgmtSearch(ItemSearchData $SearchData)
      * @param $id int El Id del registro en el histórico
      * @param $accountId
      * @return bool
+     * @throws \SP\Core\Exceptions\SPException
      */
     public static function restoreFromHistory($id, $accountId)
     {
@@ -138,7 +139,7 @@ public static function restoreFromHistory($id, $accountId)
             . 'dst.account_otherUserEdit = src.acchistory_otherUserEdit + 0,'
             . 'dst.account_otherGroupEdit = src.acchistory_otherGroupEdit + 0,'
             . 'dst.account_pass = src.acchistory_pass,'
-            . 'dst.account_IV = src.acchistory_IV,'
+            . 'dst.account_key = src.acchistory_key,'
             . 'dst.account_passDate = src.acchistory_passDate,'
             . 'dst.account_passDateChange = src.acchistory_passDateChange, '
             . 'dst.account_parentId = src.acchistory_parentId, '

--- inc/SP/Account/AccountInterface.class.php ---
@@ -51,12 +51,4 @@ public function createAccount($encryptPass = true);
      * @return mixed
      */
     public function deleteAccount($id);
-
-    /**
-     * @param      $currentMasterPass
-     * @param      $newMasterPass
-     * @param null $newHash
-     * @return mixed
-     */
-    public function updateAccountsMasterPass($currentMasterPass, $newMasterPass, $newHash = null);
 }
\ No newline at end of file

--- inc/SP/Account/AccountUtil.class.php ---
@@ -119,7 +119,7 @@ public static function getAccountsData()
             account_login,
             account_url,
             account_pass,
-            account_IV,
+            account_key,
             account_notes 
             FROM accounts';
 
@@ -296,4 +296,20 @@ public static function getAccountsForUser($accountId = 0)
 
         return DB::getResultsArray($Data);
     }
+
+    /**
+     * Devolver el número de cuentas a procesar
+     *
+     * @return int
+     */
+    public static function getTotalNumAccounts()
+    {
+        $query = /** @lang SQL */
+            'SELECT SUM(n) AS num FROM (SELECT COUNT(*) AS n FROM accounts UNION SELECT COUNT(*) AS n FROM accHistory) a';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+
+        return (int)DB::getResults($Data)->num;
+    }
 }
\ No newline at end of file

--- inc/SP/Api/ApiBase.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -26,17 +26,18 @@
 
 defined('APP_ROOT') || die();
 
-use SP\Auth\Auth;
-use SP\Auth\AuthResult;
-use SP\Auth\AuthUtil;
+use Defuse\Crypto\Exception\CryptoException;
+use SP\Core\Crypt\Hash;
+use SP\Core\Crypt\Vault;
 use SP\Core\Exceptions\InvalidArgumentException;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Session;
 use SP\Core\SessionUtil;
-use SP\DataModel\UserData;
+use SP\DataModel\ApiTokenData;
+use SP\DataModel\UserLoginData;
 use SP\Log\Log;
+use SP\Mgmt\ApiTokens\ApiToken;
 use SP\Mgmt\Users\User;
-use SP\Mgmt\Users\UserPass;
 use SP\Util\Json;
 
 /**
@@ -71,17 +72,17 @@ abstract class ApiBase implements ApiInterface
      */
     protected $data;
     /**
-     * @var string
-     */
-    protected $mPass = '';
-    /**
-     * @var UserData
+     * @var UserLoginData
      */
     protected $UserData;
     /**
      * @var Log
      */
     protected $Log;
+    /**
+     * @var ApiTokenData
+     */
+    protected $ApiTokenData;
 
     /**
      * @param $data
@@ -90,18 +91,21 @@ abstract class ApiBase implements ApiInterface
     public function __construct($data)
     {
         $this->actionId = $this->getActionId($data->method);
+        $this->ApiTokenData = ApiToken::getItem()->getTokenByToken($this->actionId, $data->params->authToken);
+
+        if ($this->ApiTokenData === false) {
+            ApiUtil::addTracking();
 
-        if (!AuthUtil::checkAuthToken($this->actionId, $data->params->authToken)) {
             throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));
         }
 
         $this->data = $data;
 
-        $this->userId = ApiTokensUtil::getUserIdForToken($data->params->authToken);
+        $this->userId = $this->ApiTokenData->getAuthtokenUserId();
 
         $this->loadUserData();
 
-        if ($this->getParam('userPass') !== null) {
+        if ($this->passIsNeeded()) {
             $this->doAuth();
         }
 
@@ -126,27 +130,42 @@ protected function getActionId($action)
     /**
      * Cargar los datos del usuario
      *
-     * @return UserData
-     * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \SP\Core\Exceptions\SPException
      */
     protected function loadUserData()
     {
-        $UserData = new UserData();
-        $UserData->setUserId($this->userId);
-        $UserData->setUserPass($this->getParam('userPass'));
-
-        $this->UserData = User::getItem($UserData)->getById($this->userId);
+        $this->UserData = User::getItem()->getById($this->ApiTokenData->getAuthtokenUserId());
 
         SessionUtil::loadUserSession($this->UserData);
     }
 
+    /**
+     * @return bool
+     */
+    protected abstract function passIsNeeded();
+
+    /**
+     * Realizar la autentificación del usuario
+     *
+     * @throws SPException
+     */
+    protected function doAuth()
+    {
+        if ($this->UserData->isUserIsDisabled()
+            || !Hash::checkHashKey($this->getParam('tokenPass', true), $this->ApiTokenData->getAuthtokenHash())
+        ) {
+            ApiUtil::addTracking();
+
+            throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));
+        }
+    }
+
     /**
      * Devolver el valor de un parámetro
      *
-     * @param string $name Nombre del parámetro
-     * @param bool $required Si es requerido
-     * @param mixed $default Valor por defecto
+     * @param string $name     Nombre del parámetro
+     * @param bool   $required Si es requerido
+     * @param mixed  $default  Valor por defecto
      * @return int|string
      * @throws SPException
      */
@@ -164,39 +183,24 @@ protected function getParam($name, $required = false, $default = null)
     }
 
     /**
-     * Realizar la autentificación del usuario
+     * Devolver la clave maestra
      *
+     * @return string
      * @throws SPException
-     * @throws \SP\Core\Exceptions\InvalidClassException
      */
-    protected function doAuth()
+    protected function getMPass()
     {
-        $Auth = new Auth($this->UserData);
-        $resAuth = $Auth->doAuth();
-
-        if ($resAuth !== false) {
-            /** @var AuthResult $AuthResult */
-            foreach ($resAuth as $AuthResult) {
-                $data = $AuthResult->getData();
-
-                if ($data->getAuthenticated() && $data->getStatusCode() === 0) {
-                    break;
-                }
+        try {
+            /** @var Vault $Vault */
+            $Vault = unserialize($this->ApiTokenData->getAuthtokenVault());
+
+            if ($Vault && $pass = $Vault->getData($this->getParam('tokenPass') . $this->getParam('authToken'))) {
+                return $pass;
+            } else {
+                throw new SPException(SPException::SP_ERROR, __('Error interno', false), __('Datos inválidos', false));
             }
-        } else {
-            throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));
-        }
-
-        $UserPass = UserPass::getItem($this->UserData);
-
-        if (!$this->UserData->isUserIsDisabled()
-            && $UserPass->checkUserUpdateMPass()
-            && $UserPass->loadUserMPass()
-        ) {
-            $this->auth = true;
-            $this->mPass = $UserPass->getClearUserMPass();
-        } else {
-            throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));
+        } catch (CryptoException $e) {
+            throw new SPException(SPException::SP_ERROR, __('Error interno', false), $e->getMessage());
         }
     }
 
@@ -209,6 +213,8 @@ protected function doAuth()
     protected function checkActionAccess($action)
     {
         if ($this->actionId !== $action) {
+            ApiUtil::addTracking();
+
             throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));
         }
     }
@@ -241,6 +247,8 @@ protected function wrapJSON(&$data)
     protected function checkAuth()
     {
         if ($this->auth === false) {
+            ApiUtil::addTracking();
+
             throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));
         }
     }

--- inc/SP/Api/ApiRequest.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -24,14 +24,16 @@
 
 namespace SP\Api;
 
+defined('APP_ROOT') || die();
+
 use ReflectionClass;
 use SP\Core\Exceptions\InvalidArgumentException;
 use SP\Core\Exceptions\SPException;
+use SP\DataModel\TrackData;
 use SP\Http\Request;
+use SP\Mgmt\Tracks\Track;
 use SP\Util\Json;
 
-defined('APP_ROOT') || die();
-
 /**
  * Class ApiRequest encargada de atender la peticiones a la API de sysPass
  *
@@ -49,6 +51,8 @@ class ApiRequest
      */
     const ACTION = 'action';
     const AUTH_TOKEN = 'authToken';
+    const TIME_TRACKING_MAX_ATTEMPTS = 5;
+    const TIME_TRACKING = 300;
 
     /**
      * @var \stdClass
@@ -76,7 +80,7 @@ public function formatJsonError($e)
             'error' => [
                 'code' => $code,
                 'message' => __($e->getMessage()),
-                'data' => $class === SPException::class || $class === InvalidArgumentException::class ? $e->getHint() : ''
+                'data' => $class === SPException::class || $class === InvalidArgumentException::class ? __($e->getHint()) : ''
             ],
             'id' => ($code === -32700 || $code === -32600) ? null : $this->getId()
         ];
@@ -115,6 +119,7 @@ public function runApi()
     protected function init()
     {
         try {
+            $this->checkTracking();
             $this->analyzeRequestMethod();
             $this->getRequestData();
             $this->checkBasicData();
@@ -124,6 +129,33 @@ protected function init()
         }
     }
 
+    /**
+     * Comprobar los intentos de login
+     *
+     * @throws \SP\Core\Exceptions\AuthException
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    private function checkTracking()
+    {
+        try {
+            $TrackData = new TrackData();
+            $TrackData->setTrackSource('API');
+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);
+
+            $attempts = count(Track::getItem($TrackData)->getTracksForClientFromTime(time() - self::TIME_TRACKING));
+        } catch (SPException $e) {
+            throw new SPException(SPException::SP_ERROR, __('Error interno', false), __FUNCTION__, -32601);
+        }
+
+        if ($attempts >= self::TIME_TRACKING_MAX_ATTEMPTS) {
+            ApiUtil::addTracking();
+
+            sleep(0.3 * $attempts);
+
+            throw new SPException(SPException::SP_INFO, __('Intentos excedidos', false), '', -32601);
+        }
+    }
+
     /**
      * Analizar y establecer el método HTTP a utilizar
      *
@@ -189,10 +221,13 @@ private function checkAction()
         $this->ApiReflection = new ReflectionClass(SyspassApi::class);
 
         if (!$this->ApiReflection->hasMethod($this->data->method)) {
+            ApiUtil::addTracking();
+
             throw new SPException(SPException::SP_WARNING, __('Acción Inválida', false), '', -32601);
         }
     }
 
+
     /**
      * Obtener el id de la acción
      *

--- inc/SP/Api/ApiTokens.class.php ---
@@ -1,314 +0,0 @@
-<?php
-/**
- * sysPass
- *
- * @author    nuxsmin
- * @link      http://syspass.org
- * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
- *
- * This file is part of sysPass.
- *
- * sysPass is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * sysPass is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-namespace SP\Api;
-
-defined('APP_ROOT') || die();
-
-use SP\Core\Exceptions\SPException;
-use SP\Core\Session;
-use SP\Storage\DB;
-use SP\Storage\QueryData;
-
-/**
- * Class ApiTokens para la gestión de autorizaciones de acceso a la API de sysPass
- *
- * @package SP
- */
-class ApiTokens
-{
-    /**
-     * @var int
-     */
-    private $tokenId = 0;
-    /**
-     * @var int
-     */
-    private $userId = 0;
-    /**
-     * @var int
-     */
-    private $actionId = 0;
-    /**
-     * @var string
-     */
-    private $token = '';
-    /**
-     * @var bool
-     */
-    private $refreshToken = false;
-
-    /**
-     * @param boolean $refreshToken
-     */
-    public function setRefreshToken($refreshToken)
-    {
-        $this->refreshToken = $refreshToken;
-    }
-
-    /**
-     * Añadir un nuevo token
-     *
-     * @throws SPException
-     */
-    public function addToken()
-    {
-        $this->checkTokenExist();
-
-        if ($this->refreshToken) {
-            $this->refreshToken();
-        }
-
-        $query = /** @lang SQL */
-            'INSERT INTO authTokens 
-            SET authtoken_userId = :userid,
-            authtoken_actionId = :actionid,
-            authtoken_createdBy = :createdby,
-            authtoken_token = :token,
-            authtoken_startDate = UNIX_TIMESTAMP()';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($this->userId, 'userid');
-        $Data->addParam($this->actionId, 'actionid');
-        $Data->addParam(Session::getUserData()->getUserId(), 'createdby');
-        $Data->addParam($this->getUserToken() ? $this->token : $this->generateToken(), 'token');
-        $Data->setOnErrorMessage(__('Error interno', false));
-
-        DB::getQuery($Data);
-    }
-
-    /**
-     * Comprobar si el token ya existe
-     *
-     * @return bool
-     * @throws SPException
-     */
-    private function checkTokenExist()
-    {
-        $query = /** @lang SQL */
-            'SELECT authtoken_id FROM authTokens 
-            WHERE authtoken_userId = :userid 
-            AND authtoken_actionId = :actionid 
-            AND authtoken_id <> :id LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($this->tokenId, 'id');
-        $Data->addParam($this->userId, 'userid');
-        $Data->addParam($this->actionId, 'actionid');
-
-        try {
-            DB::getResults($Data);
-        } catch (SPException $e) {
-            throw new SPException(SPException::SP_CRITICAL, __('Error interno', false));
-        }
-
-        if ($Data->getQueryNumRows() === 1) {
-            throw new SPException(SPException::SP_WARNING, __('La autorización ya existe', false));
-        }
-    }
-
-    /**
-     * Regenerar el hash de los tokens de un usuario
-     *
-     * @throws SPException
-     */
-    private function refreshToken()
-    {
-        $query = /** @lang SQL */
-            'UPDATE authTokens SET 
-            authtoken_token = :token,
-            authtoken_startDate = UNIX_TIMESTAMP() 
-            WHERE authtoken_userId = :userid';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($this->userId, 'userid');
-        $Data->addParam($this->generateToken(), 'token');
-        $Data->setOnErrorMessage(__('Error interno', false));
-
-        DB::getQuery($Data);
-    }
-
-    /**
-     * Generar un token de acceso
-     *
-     * @return string
-     */
-    private function generateToken()
-    {
-        return sha1(uniqid('sysPass-API', true) . time());
-    }
-
-    /**
-     * Obtener el token de la API de un usuario
-     *
-     * @return bool
-     * @throws SPException
-     */
-    private function getUserToken()
-    {
-        $query = /** @lang SQL */
-            'SELECT authtoken_token FROM authTokens WHERE authtoken_userId = :userid LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($this->userId, 'userid');
-
-        try {
-            $queryRes = DB::getResults($Data);
-        } catch (SPException $e) {
-            throw new SPException(SPException::SP_CRITICAL, __('Error interno', false));
-        }
-
-        if ($Data->getQueryNumRows() === 0) {
-            return false;
-        }
-
-        $this->token = $queryRes->authtoken_token;
-
-        return true;
-    }
-
-    /**
-     * Actualizar un token
-     *
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public function updateToken()
-    {
-        $this->checkTokenExist();
-
-        if ($this->refreshToken) {
-            $this->refreshToken();
-        }
-
-        $query = /** @lang SQL */
-            'UPDATE authTokens 
-            SET authtoken_userId = :userid,
-            authtoken_actionId = :actionid,
-            authtoken_createdBy = :createdby,
-            authtoken_token = :token,
-            authtoken_startDate = UNIX_TIMESTAMP() 
-            WHERE authtoken_id = :id LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($this->tokenId, 'id');
-        $Data->addParam($this->userId, 'userid');
-        $Data->addParam($this->actionId, 'actionid');
-        $Data->addParam(Session::getUserData()->getUserId(), 'createdby');
-        $Data->addParam($this->getUserToken() ? $this->token : $this->generateToken(), 'token');
-        $Data->setOnErrorMessage(__('Error interno', false));
-
-        DB::getQuery($Data);
-    }
-
-    /**
-     * Eliminar token
-     *
-     * @param $id
-     */
-    public function deleteToken($id)
-    {
-        $query = /** @lang SQL */
-            'DELETE FROM authTokens WHERE authtoken_id = ? LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($id);
-        $Data->setOnErrorMessage(__('Error interno', false));
-
-        DB::getQuery($Data);
-    }
-
-
-    /**
-     * Eliminar token
-     *
-     * @param array $ids
-     * @throws \SP\Core\Exceptions\ConstraintException
-     */
-    public function deleteTokenBatch(array $ids)
-    {
-        $query = /** @lang SQL */
-            'DELETE FROM authTokens WHERE authtoken_id IN (' . implode(',', array_fill(0, count($ids), '?')) . ')';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->setParams($ids);
-        $Data->setOnErrorMessage(__('Error interno', false));
-
-        DB::getQuery($Data);
-    }
-
-    /**
-     * @return int
-     */
-    public function getUserId()
-    {
-        return $this->userId;
-    }
-
-    /**
-     * @param int $userId
-     */
-    public function setUserId($userId)
-    {
-        $this->userId = $userId;
-    }
-
-    /**
-     * @return int
-     */
-    public function getTokenId()
-    {
-        return $this->tokenId;
-    }
-
-    /**
-     * @param int $tokenId
-     */
-    public function setTokenId($tokenId)
-    {
-        $this->tokenId = $tokenId;
-    }
-
-    /**
-     * @return int
-     */
-    public function getActionId()
-    {
-        return $this->actionId;
-    }
-
-    /**
-     * @param int $actionId
-     */
-    public function setActionId($actionId)
-    {
-        $this->actionId = $actionId;
-    }
-}
\ No newline at end of file

--- inc/SP/Api/ApiTokensUtil.class.php ---
@@ -1,177 +0,0 @@
-<?php
-/**
- * sysPass
- *
- * @author nuxsmin
- * @link http://syspass.org
- * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
- *
- * This file is part of sysPass.
- *
- * sysPass is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * sysPass is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-namespace SP\Api;
-
-use SP\Core\Acl;
-use SP\Core\ActionsInterface;
-use SP\Core\Exceptions\SPException;
-use SP\DataModel\ItemSearchData;
-use SP\Storage\DB;
-use SP\Storage\QueryData;
-
-defined('APP_ROOT') || die();
-
-/**
- * Class ApiTokensUtil con utilidades para la gestión de tokens API
- *
- * @package SP\Api
- */
-class ApiTokensUtil
-{
-    /**
-     * Obtener los tokens de la API
-     *
-     * @param int $tokenId opcional, con el Id del token a consultar
-     * @param bool $returnRawData Devolver la consulta tal cual
-     * @return array|object con la lista de tokens
-     */
-    public static function getTokens($tokenId = null, $returnRawData = false)
-    {
-        $query = 'SELECT authtoken_id,' .
-            'authtoken_userId,' .
-            'authtoken_actionId, ' .
-            'authtoken_token, ' .
-            'user_login ' .
-            'FROM authTokens ' .
-            'LEFT JOIN usrData ON user_id = authtoken_userId ';
-
-        $Data = new QueryData();
-
-        if (null !== $tokenId) {
-            $query .= 'WHERE authtoken_id = ? LIMIT 1';
-            $Data->addParam($tokenId);
-        } else {
-            $query .= 'ORDER BY user_login';
-        }
-
-        $Data->setQuery($query);
-
-        if (!$returnRawData) {
-            $queryRes = DB::getResultsArray($Data);
-
-            foreach ($queryRes as &$token) {
-                $token->authtoken_actionId = Acl::getActionName($token->authtoken_actionId);
-            }
-        } else {
-            $queryRes = DB::getResults($Data);
-        }
-
-        return $queryRes;
-    }
-
-    /**
-     * Obtener los tokens de la API de una búsqueda
-     * @param ItemSearchData $SearchData
-     * @return array|object con la lista de tokens
-     */
-    public static function getTokensMgmtSearch(ItemSearchData $SearchData)
-    {
-        $query = 'SELECT authtoken_id,' .
-            'authtoken_userId,' .
-            'authtoken_actionId, ' .
-            'authtoken_token, ' .
-            'user_login ' .
-            'FROM authTokens ' .
-            'LEFT JOIN usrData ON user_id = authtoken_userId ';
-
-        $Data = new QueryData();
-
-        if ($SearchData->getSeachString() !== '') {
-            $search = '%' . $SearchData->getSeachString() . '%';
-            $query .= ' WHERE user_login LIKE ?';
-
-            $Data->addParam($search);
-        }
-
-        $query .= ' ORDER BY user_login';
-        $query .= ' LIMIT ?, ?';
-
-        $Data->addParam($SearchData->getLimitStart());
-        $Data->addParam($SearchData->getLimitCount());
-
-        $Data->setQuery($query);
-
-        DB::setFullRowCount();
-
-        $queryRes = DB::getResultsArray($Data);
-
-        foreach ($queryRes as &$token) {
-            $token->authtoken_actionId = Acl::getActionName($token->authtoken_actionId);
-        }
-
-        $queryRes['count'] = $Data->getQueryNumRows();
-
-        return $queryRes;
-    }
-
-    /**
-     * Devuelver un array de acciones posibles para los tokens
-     *
-     * @return array
-     */
-    public static function getTokenActions()
-    {
-        $actions = [
-            ActionsInterface::ACTION_ACC_SEARCH => Acl::getActionName(ActionsInterface::ACTION_ACC_SEARCH),
-            ActionsInterface::ACTION_ACC_VIEW => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW),
-            ActionsInterface::ACTION_ACC_VIEW_PASS => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW_PASS),
-            ActionsInterface::ACTION_ACC_DELETE => Acl::getActionName(ActionsInterface::ACTION_ACC_DELETE),
-            ActionsInterface::ACTION_ACC_NEW => Acl::getActionName(ActionsInterface::ACTION_ACC_NEW),
-            ActionsInterface::ACTION_CFG_BACKUP => Acl::getActionName(ActionsInterface::ACTION_CFG_BACKUP),
-            ActionsInterface::ACTION_MGM_CATEGORIES => Acl::getActionName(ActionsInterface::ACTION_MGM_CATEGORIES),
-            ActionsInterface::ACTION_MGM_CUSTOMERS => Acl::getActionName(ActionsInterface::ACTION_MGM_CUSTOMERS)
-        ];
-
-        return $actions;
-    }
-
-    /**
-     * Obtener el usuario a partir del token
-     *
-     * @param $token string El token de autorización
-     * @return bool|mixed
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public static function getUserIdForToken($token)
-    {
-        $query = 'SELECT authtoken_userId FROM authTokens WHERE authtoken_token = ? LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($token);
-
-        try {
-            $queryRes = DB::getResults($Data);
-        } catch (SPException $e) {
-            throw new SPException(SPException::SP_CRITICAL, __('Error interno', false));
-        }
-
-        if ($Data->getQueryNumRows() === 0) {
-            return false;
-        }
-
-        return $queryRes->authtoken_userId;
-    }
-}
\ No newline at end of file

--- inc/SP/Api/ApiUtil.class.php ---
@@ -0,0 +1,57 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author nuxsmin
+ * @link http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Api;
+
+defined('APP_ROOT') || die();
+
+use SP\Core\Exceptions\SPException;
+use SP\DataModel\TrackData;
+use SP\Mgmt\Tracks\Track;
+
+/**
+ * Class ApiUtil
+ *
+ * @package SP\Api
+ */
+class ApiUtil
+{
+    /**
+     * Añadir un seguimiento
+     *
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public static function addTracking()
+    {
+        try {
+            $TrackData = new TrackData();
+            $TrackData->setTrackSource('API');
+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);
+
+            Track::getItem($TrackData)->add();
+        } catch (SPException $e) {
+            throw new SPException(SPException::SP_WARNING, __('Error interno', false), '', -32601);
+        }
+    }
+}
\ No newline at end of file

--- inc/SP/Api/SyspassApi.class.php ---
@@ -24,14 +24,15 @@
 
 namespace SP\Api;
 
+defined('APP_ROOT') || die();
+
 use SP\Account\Account;
 use SP\Account\AccountAcl;
 use SP\Account\AccountSearch;
 use SP\Account\AccountUtil;
-use SP\Core\Acl;
 use SP\Core\ActionsInterface;
 use SP\Core\Backup;
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\AccountExtData;
 use SP\DataModel\CategoryData;
@@ -42,8 +43,6 @@
 use SP\Mgmt\Customers\Customer;
 use SP\Mgmt\Customers\CustomerSearch;
 
-defined('APP_ROOT') || die();
-
 /**
  * Class Api para la gestión de peticiones a la API de sysPass
  *
@@ -55,6 +54,9 @@ class SyspassApi extends ApiBase
      * Devolver la clave de una cuenta
      *
      * @return string La cadena en formato JSON
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      * @throws \SP\Core\Exceptions\SPException
      */
     public function getAccountPassword()
@@ -84,15 +86,18 @@ public function getAccountPassword()
         $LogMessage->addDetails(__('Origen', false), 'API');
         $this->Log->writeLog();
 
+        $mPass = $this->getMPass();
+        $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $mPass);
+
         $ret = [
             'itemId' => $accountId,
-            'pass' => Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountIV(), $this->mPass)
+            'pass' => Crypt::decrypt($AccountData->getAccountPass(), $securedKey, $mPass)
         ];
 
         if ($this->getParam('details', false, 0)) {
             // Para evitar los caracteres especiales
             $AccountData->setAccountPass('');
-            $AccountData->setAccountIV('');
+            $AccountData->setAccountKey('');
 
             $ret['details'] = $AccountData;
         }
@@ -152,6 +157,11 @@ public function getAccountData()
      * Añadir una nueva cuenta
      *
      * @return string La cadena en formato JSON
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      * @throws \SP\Core\Exceptions\SPException
      */
     public function addAccount()
@@ -172,7 +182,8 @@ public function addAccount()
 
         $Account = new Account($AccountData);
 
-        $Account->createAccount();
+        $Account->setPasswordEncrypted($this->getMPass());
+        $Account->createAccount(false);
 
         $LogMessage = $this->Log->getLogMessage();
         $LogMessage->setAction(__('Crear Cuenta', false));
@@ -453,7 +464,7 @@ public function getActions()
                 'id' => ActionsInterface::ACTION_ACC_VIEW_PASS,
                 'help' => [
                     'id' => __('Id de la cuenta'),
-                    'userPass' => __('Clave del usuario asociado al token'),
+                    'tokenPass' => __('Clave del token'),
                     'details' => __('Devolver detalles en la respuesta')
                 ]
             ],
@@ -469,8 +480,7 @@ public function getActions()
             'getAccountData' => [
                 'id' => ActionsInterface::ACTION_ACC_VIEW,
                 'help' => [
-                    'id' => __('Id de la cuenta'),
-                    'userPass' => __('Clave del usuario asociado al token')
+                    'id' => __('Id de la cuenta')
                 ]
             ],
             'deleteAccount' => [
@@ -482,7 +492,7 @@ public function getActions()
             'addAccount' => [
                 'id' => ActionsInterface::ACTION_ACC_NEW,
                 'help' => [
-                    'userPass' => __('Clave del usuario asociado al token'),
+                    'tokenPass' => __('Clave del token'),
                     'name' => __('Nombre de cuenta'),
                     'categoryId' => __('Id de categoría'),
                     'customerId' => __('Id de cliente'),
@@ -538,4 +548,12 @@ public function getActions()
             ]
         ];
     }
+
+    /**
+     * @return bool
+     */
+    protected function passIsNeeded()
+    {
+        return $this->actionId === ActionsInterface::ACTION_ACC_VIEW_PASS;
+    }
 }
\ No newline at end of file

--- inc/SP/Auth/Auth.class.php ---
@@ -34,6 +34,7 @@
 use SP\Config\Config;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 use SP\Util\Checks;
 
 defined('APP_ROOT') || die();
@@ -52,17 +53,17 @@ class Auth
      */
     protected $auths = [];
     /**
-     * @var UserData
+     * @var UserLoginData
      */
     protected $UserData;
 
     /**
      * Auth constructor.
      *
-     * @param UserData $UserData
+     * @param UserLoginData $UserData
      * @throws \SP\Core\Exceptions\SPException
      */
-    public function __construct(UserData $UserData)
+    public function __construct(UserLoginData $UserData)
     {
         $this->UserData = $UserData;
 
@@ -146,6 +147,8 @@ public function authLdap()
      * se ejecuta el proceso para actualizar la clave.
      *
      * @return DatabaseAuthData
+     * @throws \phpmailer\phpmailerException
+     * @throws \SP\Core\Exceptions\SPException
      */
     public function authDatabase()
     {

--- inc/SP/Auth/AuthInterface.class.php ---
@@ -24,7 +24,7 @@
 
 namespace SP\Auth;
 
-use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 
 /**
  * Interface AuthInterface
@@ -35,8 +35,8 @@ interface AuthInterface
     /**
      * Autentificar al usuario
      *
-     * @param UserData $UserData Datos del usuario
+     * @param UserLoginData $UserData Datos del usuario
      * @return mixed|AuthDataBase
      */
-    public function authenticate(UserData $UserData);
+    public function authenticate(UserLoginData $UserData);
 }
\ No newline at end of file

--- inc/SP/Auth/AuthUtil.class.php ---
@@ -31,8 +31,6 @@
 use SP\Html\Html;
 use SP\Log\Email;
 use SP\Mgmt\Users\UserPassRecover;
-use SP\Storage\DB;
-use SP\Storage\QueryData;
 use SP\Util\Util;
 
 /**
@@ -79,32 +77,6 @@ public static function mailPassRecover(UserData $UserData)
         return false;
     }
 
-    /**
-     * Comprobar el token de seguridad
-     *
-     * @param $actionId int El id de la accion
-     * @param $token    string El token de seguridad
-     * @return bool
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public static function checkAuthToken($actionId, $token)
-    {
-        $query = /** @lang SQL */
-            'SELECT authtoken_id
-            FROM authTokens
-            WHERE authtoken_actionId = ?
-            AND authtoken_token = ? LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($actionId);
-        $Data->addParam($token);
-
-        DB::getQuery($Data);
-
-        return $Data->getQueryNumRows() === 1;
-    }
-
     /**
      * Devuelve el typo de autentificación del servidor web
      *

--- inc/SP/Auth/Browser/Browser.class.php ---
@@ -25,7 +25,7 @@
 namespace SP\Auth\Browser;
 
 use SP\Auth\AuthInterface;
-use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 
 /**
  * Class Browser
@@ -39,13 +39,13 @@ class Browser implements AuthInterface
     /**
      * Autentificar al usuario
      *
-     * @param UserData $UserData Datos del usuario
+     * @param UserLoginData $UserData Datos del usuario
      * @return BrowserAuthData
      */
-    public function authenticate(UserData $UserData)
+    public function authenticate(UserLoginData $UserData)
     {
         $AuthData = new BrowserAuthData();
-        $AuthData->setAuthenticated($this->checkServerAuthUser($UserData->getUserLogin()));
+        $AuthData->setAuthenticated($this->checkServerAuthUser($UserData->getLogin()));
 
         return $AuthData;
     }

--- inc/SP/Auth/Database/Database.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -25,10 +25,12 @@
 namespace SP\Auth\Database;
 
 use SP\Auth\AuthInterface;
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\SPException;
-use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 use SP\DataModel\UserPassData;
 use SP\Log\Log;
+use SP\Mgmt\Users\User;
 use SP\Mgmt\Users\UserMigrate;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
@@ -43,67 +45,57 @@
 class Database implements AuthInterface
 {
     /**
-     * @var UserData $UserData
+     * @var UserLoginData $UserData
      */
     protected $UserData;
 
+    /**
+     * Autentificar al usuario
+     *
+     * @param UserLoginData $UserData Datos del usuario
+     * @return DatabaseAuthData
+     * @throws \SP\Core\Exceptions\SPException
+     * @throws \phpmailer\phpmailerException
+     */
+    public function authenticate(UserLoginData $UserData)
+    {
+        $this->UserData = $UserData;
+
+        $AuthData = new DatabaseAuthData();
+        $AuthData->setAuthenticated($this->authUser());
+
+        return $AuthData;
+    }
+
     /**
      * Autentificación de usuarios con BD.
      *
      * Esta función comprueba la clave del usuario. Si el usuario necesita ser migrado desde phpPMS,
      * se ejecuta el proceso para actualizar la clave.
      *
      * @return bool
+     * @throws \SP\Core\Exceptions\SPException
+     * @throws \phpmailer\phpmailerException
      */
     protected function authUser()
     {
-        if (UserMigrate::checkUserIsMigrate($this->UserData->getUserLogin())) {
-            try {
-                UserMigrate::migrateUser($this->UserData->getUserLogin(), $this->UserData->getUserPass());
-            } catch (SPException $e) {
-                $Log = new Log();
-                $LogMessage = $Log->getLogMessage();
-                $LogMessage->setAction(__FUNCTION__);
-                $LogMessage->addDescription($e->getMessage());
-                $LogMessage->addDetails(__('Login', false), $this->UserData->getUserLogin());
-                $Log->writeLog();
+        try {
+            User::getItem($this->UserData)->getByLogin($this->UserData->getLogin());
 
+            if ($this->UserData->isUserIsMigrate() && !UserMigrate::migrateUserPass($this->UserData)) {
                 return false;
             }
-        }
-
-        $query = /** @lang SQL */
-            'SELECT user_pass, user_hashSalt
-            FROM usrData
-            WHERE user_login = ? 
-            AND user_isMigrate = 0 LIMIT 1';
 
-        $Data = new QueryData();
-        $Data->setMapClassName(UserPassData::class);
-        $Data->setQuery($query);
-        $Data->addParam($this->UserData->getUserLogin());
+            return Hash::checkHashKey($this->UserData->getLoginPass(), $this->UserData->getUserPass());
+        } catch (SPException $e) {
+            $Log = new Log();
+            $LogMessage = $Log->getLogMessage();
+            $LogMessage->setAction(__FUNCTION__);
+            $LogMessage->addDescription($e->getMessage());
+            $LogMessage->addDetails(__('Login', false), $this->UserData->getLogin());
+            $Log->writeLog();
 
-        /** @var UserPassData $queryRes */
-        $queryRes = DB::getResults($Data);
-
-        return ($queryRes !== false
-            && $Data->getQueryNumRows() === 1
-            && $queryRes->getUserPass() === crypt($this->UserData->getUserPass(), $queryRes->getUserHashSalt()));
-    }
-
-    /**
-     * Autentificar al usuario
-     *
-     * @param UserData $UserData Datos del usuario
-     * @return DatabaseAuthData
-     */
-    public function authenticate(UserData $UserData)
-    {
-        $this->UserData = $UserData;
-
-        $AuthData = new DatabaseAuthData();
-        $AuthData->setAuthenticated($this->authUser());
-
-        return $AuthData;
+            return false;
+        }
     }
 }
\ No newline at end of file

--- inc/SP/Auth/Ldap/LdapBase.class.php ---
@@ -28,7 +28,7 @@
 use SP\Config\Config;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Messages\LogMessage;
-use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 use SP\Log\Log;
 
 /**
@@ -405,22 +405,22 @@ public function setUserLogin($userLogin)
     /**
      * Autentificar al usuario
      *
-     * @param UserData $UserData Datos del usuario
+     * @param UserLoginData $UserData Datos del usuario
      * @return bool
      */
-    public function authenticate(UserData $UserData)
+    public function authenticate(UserLoginData $UserData)
     {
         if (!$this->checkParams()) {
             return false;
         }
 
         try {
-            $this->setUserLogin($UserData->getUserLogin());
+            $this->setUserLogin($UserData->getLogin());
 
             $this->connect();
             $this->bind();
             $this->getAttributes();
-            $this->bind($this->LdapAuthData->getDn(), $UserData->getUserPass());
+            $this->bind($this->LdapAuthData->getDn(), $UserData->getLoginPass());
         } catch (SPException $e) {
             return false;
         }
@@ -511,7 +511,7 @@ public function getAttributes()
             }
         }
 
-        if (!empty($res["fullname"])) {
+        if (!empty($res['fullname'])) {
             $this->LdapAuthData->setName($res['fullname']);
         } else {
             $this->LdapAuthData->setName($res['name'] . ' ' . $res['sn']);

--- inc/SP/Controller/AccountController.class.php ---
@@ -34,12 +34,14 @@
 use SP\Config\Config;
 use SP\Core\Acl;
 use SP\Core\ActionsInterface;
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
+use SP\Core\OldCrypt;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Init;
 use SP\Core\Session;
 use SP\Core\SessionUtil;
 use SP\Core\Template;
+use SP\DataModel\AccountData;
 use SP\DataModel\AccountExtData;
 use SP\DataModel\CustomFieldData;
 use SP\DataModel\PublicLinkData;
@@ -121,22 +123,12 @@ private function isGotData()
      * Obtener la vista de detalles de cuenta para enlaces públicos
      *
      * @param PublicLinkData $PublicLinkData
-     * @return bool
-     * @throws \SP\Core\Exceptions\SPException
-     * @throws \SP\Core\Exceptions\FileNotFoundException
-     * @throws \SP\Core\Exceptions\QueryException
-     * @throws \SP\Core\Exceptions\ConstraintException
      *
      */
     public function getAccountFromLink(PublicLinkData $PublicLinkData)
     {
         $this->setAction(self::ACTION_ACC_VIEW);
 
-        // Obtener los datos de la cuenta antes y comprobar el acceso
-        if (!$this->setAccountData()) {
-            return false;
-        }
-
         $this->view->addTemplate('account-link');
         $this->view->assign('title',
             [
@@ -145,48 +137,27 @@ public function getAccountFromLink(PublicLinkData $PublicLinkData)
                 'icon' => $this->icons->getIconView()->getIcon()
             ]
         );
-        $this->Account->incrementViewCounter();
-        $this->Account->incrementDecryptCounter();
-        $AccountPassData = $this->Account->getAccountPassData();
 
-        // Desencriptar la clave de la cuenta
-        $pass = Crypt::generateAesKey($PublicLinkData->getLinkHash());
-        $masterPass = Crypt::getDecrypt($PublicLinkData->getPass(), $PublicLinkData->getPassIV(), $pass);
-        $accountPass = Crypt::getDecrypt($AccountPassData->getAccountPass(), $AccountPassData->getAccountIV(), $masterPass);
+        try {
+            $Account = new Account();
+            $Account->incrementViewCounter($PublicLinkData->getItemId());
+            $Account->incrementDecryptCounter($PublicLinkData->getItemId());
 
-        $this->view->assign('useImage', Config::getConfig()->isPublinksImageEnabled() || Config::getConfig()->isAccountPassToImage());
+            $key = Config::getConfig()->getPasswordSalt() . $PublicLinkData->getLinkHash();
+            $securedKey = Crypt::unlockSecuredKey($PublicLinkData->getPassIV(), $key);
 
-        if ($this->view->useImage) {
-            $accountPass = ImageUtil::convertText($accountPass);
-        }
+            /** @var AccountExtData $AccountData */
+            $AccountData = unserialize(Crypt::decrypt($PublicLinkData->getData(), $securedKey, $key));
 
-        $this->view->assign('accountPass', $accountPass);
-    }
+            $this->view->assign('useImage', Config::getConfig()->isPublinksImageEnabled() || Config::getConfig()->isAccountPassToImage());
 
-    /**
-     * Establecer las variables que contienen la información de la cuenta.
-     *
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    private function setAccountData()
-    {
-        $Account = new Account(new AccountExtData($this->getId()));
-        $this->Account = $Account;
-        $this->AccountData = $Account->getData();
-
-        $this->view->assign('accountId', $this->getId());
-        $this->view->assign('accountData', $this->AccountData);
-        $this->view->assign('gotData', $this->isGotData());
+            $accountPass = $this->view->useImage ? ImageUtil::convertText($AccountData->getAccountPass()) : $AccountData->getAccountPass();
 
-        return true;
-    }
-
-    /**
-     * @return int
-     */
-    private function getId()
-    {
-        return $this->id;
+            $this->view->assign('accountPass', $accountPass);
+            $this->view->assign('accountData', $AccountData);
+        } catch (\Exception $e) {
+            $this->showError(self::ERR_EXCEPTION);
+        }
     }
 
     /**
@@ -278,7 +249,7 @@ protected function checkAccess($action = null)
         if (!Acl::checkUserAccess($this->getAction())) {
             $this->showError(self::ERR_PAGE_NO_PERMISSION);
             return false;
-        } elseif (!UserPass::getItem($this->UserData)->checkUserUpdateMPass()) {
+        } elseif (!UserPass::checkUserUpdateMPass($this->UserData->getUserId())) {
             $this->showError(self::ERR_UPDATE_MPASS);
             return false;
         } elseif ($this->id > 0) {
@@ -314,8 +285,9 @@ private function setCommonData()
 
             $PublicLinkData = PublicLink::getItem()->getHashForItem($this->getId());
 
-            $publicLinkUrl = (Checks::publicLinksIsEnabled() && $PublicLinkData ? Init::$WEBURI . '/index.php?h=' . $PublicLinkData->getPublicLinkHash() . '&a=link' : '');
+            $publicLinkUrl = (Checks::publicLinksIsEnabled() && $PublicLinkData ? Init::$WEBURI . '/index.php?h=' . $PublicLinkData->getPublicLinkHash() . '&a=link' : null);
             $this->view->assign('publicLinkUrl', $publicLinkUrl);
+            $this->view->assign('publicLinkId', $PublicLinkData ? $PublicLinkData->getPublicLinkId() : 0);
 
             $this->view->assign('accountPassDate', date('Y-m-d H:i:s', $this->AccountData->getAccountPassDate()));
             $this->view->assign('accountPassDateChange', date('Y-m-d', $this->AccountData->getAccountPassDateChange() ?: 0));
@@ -352,6 +324,14 @@ private function getCustomFieldsForItem()
         $this->view->assign('customFields', CustomField::getItem(new CustomFieldData(ActionsInterface::ACTION_ACC))->getById($this->getId()));
     }
 
+    /**
+     * @return int
+     */
+    private function getId()
+    {
+        return $this->id;
+    }
+
     /**
      * @return \SP\Account\Account|AccountHistory
      */
@@ -388,6 +368,24 @@ public function getCopyAccount()
         $this->setCommonData();
     }
 
+    /**
+     * Establecer las variables que contienen la información de la cuenta.
+     *
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    private function setAccountData()
+    {
+        $Account = new Account(new AccountExtData($this->getId()));
+        $this->Account = $Account;
+        $this->AccountData = $Account->getData();
+
+        $this->view->assign('accountId', $this->getId());
+        $this->view->assign('accountData', $this->AccountData);
+        $this->view->assign('gotData', $this->isGotData());
+
+        return true;
+    }
+
     /**
      * Obtener los datos para mostrar el interface para editar cuenta
      *

--- inc/SP/Controller/ConfigActionController.class.php ---
@@ -24,22 +24,22 @@
 
 namespace SP\Controller;
 
-use SP\Account\Account;
-use SP\Account\AccountHistory;
+use SP\Account\AccountCrypt;
+use SP\Account\AccountHistoryCrypt;
 use SP\Config\Config;
 use SP\Config\ConfigDB;
 use SP\Core\ActionsInterface;
 use SP\Core\Backup;
-use SP\Core\Crypt;
+use SP\Core\Crypt\Hash;
+use SP\Core\Crypt\Session as CryptSession;
 use SP\Core\CryptMasterPass;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Init;
 use SP\Core\Messages\LogMessage;
 use SP\Core\Messages\NoticeMessage;
 use SP\Core\Session;
-use SP\Core\SessionUtil;
+use SP\Core\Task;
 use SP\Core\XmlExport;
-use SP\Html\Html;
 use SP\Http\Request;
 use SP\Import\Import;
 use SP\Import\ImportParams;
@@ -421,7 +421,6 @@ protected function ldapAction()
      */
     protected function mailAction()
     {
-        $Log = Log::newLog(__('Modificar Configuración', false));
         $Config = Session::getConfig();
 
         // Mail
@@ -483,7 +482,7 @@ protected function masterPassAction()
         $confirmPassChange = Request::analyze('confirmPassChange', 0, false, 1);
         $noAccountPassChange = Request::analyze('chkNoAccountChange', 0, false, 1);
 
-        if (!UserPass::getItem(Session::getUserData())->checkUserUpdateMPass()) {
+        if (!UserPass::checkUserUpdateMPass(Session::getUserData()->getUserId())) {
             $this->JsonResponse->setDescription(__('Clave maestra actualizada', false));
             $this->JsonResponse->addMessage(__('Reinicie la sesión para cambiarla', false));
             $this->JsonResponse->setStatus(100);
@@ -502,7 +501,7 @@ protected function masterPassAction()
         } elseif ($newMasterPass !== $newMasterPassR) {
             $this->JsonResponse->setDescription(__('Las claves maestras no coinciden', false));
             return;
-        } elseif (!Crypt::checkHashPass($currentMasterPass, ConfigDB::getValue('masterPwd'), true)) {
+        } elseif (!Hash::checkHashKey($currentMasterPass, ConfigDB::getValue('masterPwd'))) {
             $this->JsonResponse->setDescription(__('La clave maestra actual no coincide', false));
             return;
         }
@@ -512,8 +511,6 @@ protected function masterPassAction()
             return;
         }
 
-        $hashMPass = Crypt::mkHashPassword($newMasterPass);
-
         if (!$noAccountPassChange) {
             Util::lockApp();
 
@@ -522,40 +519,53 @@ protected function masterPassAction()
                 return;
             }
 
-            $Account = new Account();
+            $Task = new Task(__FUNCTION__, Request::analyze('taskId'));
+            $Task->register();
+
+            $Account = new AccountCrypt();
 
-            if (!$Account->updateAccountsMasterPass($currentMasterPass, $newMasterPass)) {
+            if (!$Account->updatePass($currentMasterPass, $newMasterPass, $Task)) {
                 DB::rollbackTransaction();
 
+                $Task->end();
+
                 $this->JsonResponse->setDescription(__('Errores al actualizar las claves de las cuentas', false));
                 return;
             }
 
-            $AccountHistory = new AccountHistory();
+            $AccountHistory = new AccountHistoryCrypt();
 
-            if (!$AccountHistory->updateAccountsMasterPass($currentMasterPass, $newMasterPass, $hashMPass)) {
+            if (!$AccountHistory->updatePass($currentMasterPass, $newMasterPass, $Task)) {
                 DB::rollbackTransaction();
 
+                $Task->end();
+
                 $this->JsonResponse->setDescription(__('Errores al actualizar las claves de las cuentas del histórico', false));
                 return;
             }
 
             if (!CustomFieldsUtil::updateCustomFieldsCrypt($currentMasterPass, $newMasterPass)) {
                 DB::rollbackTransaction();
 
+                $Task->end();
+
                 $this->JsonResponse->setDescription(__('Errores al actualizar datos de campos personalizados', false));
                 return;
             }
 
             if (!DB::endTransaction()) {
+                $Task->end();
+
                 $this->JsonResponse->setDescription(__('No es posible finalizar una transacción', false));
                 return;
             }
 
+            $Task->end();
+
             Util::unlockApp();
         }
 
-        ConfigDB::setCacheConfigValue('masterPwd', $hashMPass);
+        ConfigDB::setCacheConfigValue('masterPwd', Hash::hashKey($newMasterPass));
         ConfigDB::setCacheConfigValue('lastupdatempass', time());
 
         $this->LogMessage->setAction(__('Actualizar Clave Maestra', false));
@@ -574,6 +584,10 @@ protected function masterPassAction()
 
     /**
      * Regenerar el hash de la clave maestra
+     *
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      */
     protected function masterPassRefreshAction()
     {
@@ -584,7 +598,7 @@ protected function masterPassRefreshAction()
 
         $this->LogMessage->setAction(__('Actualizar Clave Maestra', false));
 
-        if (ConfigDB::setValue('masterPwd', Crypt::mkHashPassword(SessionUtil::getSessionMPass()))) {
+        if (ConfigDB::setValue('masterPwd', Hash::hashKey(CryptSession::getSessionKey()))) {
             $this->LogMessage->addDescription(__('Hash de clave maestra actualizado', false));
 
             $this->JsonResponse->setStatus(0);
@@ -600,6 +614,9 @@ protected function masterPassRefreshAction()
      *
      * @throws \SP\Core\Exceptions\SPException
      * @throws \phpmailer\phpmailerException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      */
     protected function tempMasterPassAction()
     {

--- inc/SP/Controller/ConfigController.class.php ---
@@ -26,6 +26,7 @@
 
 defined('APP_ROOT') || die();
 
+use SP\Account\AccountUtil;
 use SP\Config\Config;
 use SP\Config\ConfigData;
 use SP\Config\ConfigDB;
@@ -37,6 +38,7 @@
 use SP\Core\Plugin\PluginUtil;
 use SP\Core\Session;
 use SP\Core\SessionUtil;
+use SP\Core\Task;
 use SP\Core\Template;
 use SP\Mgmt\Groups\Group;
 use SP\Mgmt\Profiles\Profile;
@@ -312,6 +314,9 @@ protected function getEncryptionTab()
 
         $this->view->addTemplate('encryption');
 
+        $this->view->assign('numAccounts', AccountUtil::getTotalNumAccounts());
+        $this->view->assign('taskId', Task::genTaskId('masterpass'));
+
         $this->view->assign('lastUpdateMPass', isset($this->configDB['lastupdatempass']) ? $this->configDB['lastupdatempass'] : 0);
         $this->view->assign('tempMasterPassTime', isset($this->configDB['tempmaster_passtime']) ? $this->configDB['tempmaster_passtime'] : 0);
         $this->view->assign('tempMasterMaxTime', isset($this->configDB['tempmaster_maxtime']) ? $this->configDB['tempmaster_maxtime'] : 0);

--- inc/SP/Controller/ItemActionController.class.php ---
@@ -29,11 +29,9 @@
 use SP\Account\AccountHistory;
 use SP\Account\AccountHistoryUtil;
 use SP\Account\AccountUtil;
-use SP\Api\ApiTokens;
 use SP\Auth\AuthUtil;
 use SP\Core\ActionsInterface;
 use SP\Core\Messages\LogMessage;
-use SP\Core\Messages\NoticeMessage;
 use SP\Core\Session;
 use SP\DataModel\CustomFieldData;
 use SP\DataModel\NoticeData;
@@ -52,6 +50,7 @@
 use SP\Http\Request;
 use SP\Log\Email;
 use SP\Log\Log;
+use SP\Mgmt\ApiTokens\ApiToken;
 use SP\Mgmt\Categories\Category;
 use SP\Mgmt\Customers\Customer;
 use SP\Mgmt\CustomFields\CustomField;
@@ -212,6 +211,7 @@ public function doAction()
      * @throws \SP\Core\Exceptions\ValidationException
      * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \phpmailer\phpmailerException
+     * @throws \SP\Core\Exceptions\ConstraintException
      */
     protected function userAction()
     {
@@ -299,7 +299,6 @@ protected function setCustomFieldData($moduleId)
     /**
      * Guardar los datos de los campos personalizados del módulo
      *
-     * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \SP\Core\Exceptions\SPException
      */
     protected function addCustomFieldData()
@@ -314,7 +313,6 @@ protected function addCustomFieldData()
     /**
      * Actualizar los datos de los campos personalizados del módulo
      *
-     * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \SP\Core\Exceptions\SPException
      */
     protected function updateCustomFieldData()
@@ -595,37 +593,48 @@ protected function categoryAction()
      * @throws \SP\Core\Exceptions\SPException
      * @throws \phpmailer\phpmailerException
      * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \SP\Core\Exceptions\QueryException
      */
     protected function tokenAction()
     {
         $Form = new ApiTokenForm($this->itemId);
 
+        $refresh = Request::analyze('refreshtoken', false, false, true);
+
         switch ($this->actionId) {
             case ActionsInterface::ACTION_MGM_APITOKENS_NEW:
                 $Form->validate($this->actionId);
-                $Form->getItemData()->addToken();
+
+                if ($refresh === true) {
+                    ApiToken::getItem($Form->getItemData())->refreshToken()->add();
+                } else {
+                    ApiToken::getItem($Form->getItemData())->add();
+                }
 
                 $this->LogMessage->setAction(__('Crear Autorización', false));
                 $this->LogMessage->addDescription(__('Autorización creada', false));
-                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getUserId()));
+                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getAuthtokenUserId()));
                 break;
             case ActionsInterface::ACTION_MGM_APITOKENS_EDIT:
                 $Form->validate($this->actionId);
-                $Form->getItemData()->updateToken();
+
+                if ($refresh === true) {
+                    ApiToken::getItem($Form->getItemData())->refreshToken()->update();
+                } else {
+                    ApiToken::getItem($Form->getItemData())->update();
+                }
 
                 $this->LogMessage->setAction(__('Actualizar Autorización', false));
                 $this->LogMessage->addDescription(__('Autorización actualizada', false));
-                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getUserId()));
+                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getAuthtokenUserId()));
                 break;
             case ActionsInterface::ACTION_MGM_APITOKENS_DELETE:
-                $ApiToken = new ApiTokens();
-
                 if (is_array($this->itemId)) {
-                    $ApiToken->deleteTokenBatch($this->itemId);
+                    ApiToken::getItem()->deleteBatch($this->itemId);
 
                     $this->LogMessage->addDescription(__('Autorizaciones eliminadas', false));
                 } else {
-                    $ApiToken->deleteToken($this->itemId);
+                    ApiToken::getItem()->delete($this->itemId);
 
                     $this->LogMessage->addDescription(__('Autorización eliminada', false));
                 }
@@ -694,6 +703,9 @@ protected function customFieldAction()
      * @throws \SP\Core\Exceptions\SPException
      * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \phpmailer\phpmailerException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
      */
     protected function publicLinkAction()
     {
@@ -884,6 +896,8 @@ protected function pluginAction()
      * @throws \SP\Core\Exceptions\SPException
      * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \phpmailer\phpmailerException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \SP\Core\Exceptions\QueryException
      */
     protected function accountAction()
     {
@@ -972,6 +986,56 @@ protected function accountAction()
         $this->JsonResponse->setStatus(0);
     }
 
+    /**
+     * Acción para eliminar una cuenta del historial
+     *
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    protected function accountHistoryAction()
+    {
+        $Account = new AccountHistory();
+
+        switch ($this->actionId) {
+            case ActionsInterface::ACTION_MGM_ACCOUNTS_EDIT_RESTORE:
+                AccountHistoryUtil::restoreFromHistory($this->itemId, Request::analyze('accountId', 0));
+
+                $this->LogMessage->setAction(__('Restaurar Cuenta', false));
+                $this->LogMessage->addDescription(__('Cuenta restaurada', false));
+                $this->LogMessage->addDetails(__('Nombre', false), AccountUtil::getAccountNameById($this->itemId));
+
+                $this->JsonResponse->setData(['itemId' => $this->itemId, 'nextActionId' => ActionsInterface::ACTION_ACC_VIEW]);
+                break;
+            case ActionsInterface::ACTION_MGM_ACCOUNTS_DELETE_HISTORY:
+                if (is_array($this->itemId)) {
+                    $accounts = AccountHistoryUtil::getAccountNameByIdBatch($this->itemId);
+                    $numAccounts = count($accounts);
+                } else {
+                    $accounts = AccountHistoryUtil::getAccountNameById($this->itemId);
+                    $numAccounts = 1;
+                }
+
+                $Account->deleteAccount($this->itemId);
+
+                $this->LogMessage->setAction(__('Eliminar Cuenta (H)', false));
+
+                if ($numAccounts > 1) {
+                    $this->LogMessage->addDescription(__('Cuentas eliminadas', false));
+
+                    foreach ($accounts as $account) {
+                        $this->LogMessage->addDetails(__('Nombre', false), $account->acchistory_name);
+                    }
+                } elseif ($numAccounts === 1) {
+                    $this->LogMessage->addDescription(__('Cuenta eliminada', false));
+                    $this->LogMessage->addDetails(__('Nombre', false), $accounts->acchistory_name);
+                }
+                break;
+        }
+
+        Email::sendEmail($this->LogMessage);
+
+        $this->JsonResponse->setStatus(0);
+    }
+
     /**
      * Acciones sobre cuentas favoritas
      *
@@ -1127,58 +1191,7 @@ protected function requestAccountAction()
             Notice::getItem($NoticeData)->add();
         }
 
-
         $this->LogMessage->addDescription(__('Solicitud realizada', false));
         $this->JsonResponse->setStatus(0);
     }
-
-    /**
-     * Acción para eliminar una cuenta del historial
-     *
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    protected function accountHistoryAction()
-    {
-        $Account = new AccountHistory();
-
-        switch ($this->actionId) {
-            case ActionsInterface::ACTION_MGM_ACCOUNTS_EDIT_RESTORE:
-                AccountHistoryUtil::restoreFromHistory($this->itemId, Request::analyze('accountId', 0));
-
-                $this->LogMessage->setAction(__('Restaurar Cuenta', false));
-                $this->LogMessage->addDescription(__('Cuenta restaurada', false));
-                $this->LogMessage->addDetails(__('Nombre', false), AccountUtil::getAccountNameById($this->itemId));
-
-                $this->JsonResponse->setData(['itemId' => $this->itemId, 'nextActionId' => ActionsInterface::ACTION_ACC_VIEW]);
-                break;
-            case ActionsInterface::ACTION_MGM_ACCOUNTS_DELETE_HISTORY:
-                if (is_array($this->itemId)) {
-                    $accounts = AccountHistoryUtil::getAccountNameByIdBatch($this->itemId);
-                    $numAccounts = count($accounts);
-                } else {
-                    $accounts = AccountHistoryUtil::getAccountNameById($this->itemId);
-                    $numAccounts = 1;
-                }
-
-                $Account->deleteAccount($this->itemId);
-
-                $this->LogMessage->setAction(__('Eliminar Cuenta (H)', false));
-
-                if ($numAccounts > 1) {
-                    $this->LogMessage->addDescription(__('Cuentas eliminadas', false));
-
-                    foreach ($accounts as $account) {
-                        $this->LogMessage->addDetails(__('Nombre', false), $account->acchistory_name);
-                    }
-                } elseif ($numAccounts === 1) {
-                    $this->LogMessage->addDescription(__('Cuenta eliminada', false));
-                    $this->LogMessage->addDetails(__('Nombre', false), $accounts->acchistory_name);
-                }
-                break;
-        }
-
-        Email::sendEmail($this->LogMessage);
-
-        $this->JsonResponse->setStatus(0);
-    }
 }
\ No newline at end of file

--- inc/SP/Controller/ItemListController.class.php ---
@@ -28,14 +28,14 @@
 
 use SP\Account\AccountHistoryUtil;
 use SP\Account\AccountUtil;
-use SP\Api\ApiTokensUtil;
 use SP\Config\Config;
 use SP\Controller\Grids\Items;
 use SP\Core\ActionsInterface;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Template;
 use SP\DataModel\ItemSearchData;
 use SP\Http\Request;
+use SP\Mgmt\ApiTokens\ApiTokenSearch;
 use SP\Mgmt\Categories\CategorySearch;
 use SP\Mgmt\Customers\CustomerSearch;
 use SP\Mgmt\CustomFields\CustomFieldDefSearch;
@@ -377,7 +377,7 @@ public function getAPITokensList()
         }
 
         $Grid = $this->getGrids()->getTokensGrid();
-        $Grid->getData()->setData(ApiTokensUtil::getTokensMgmtSearch($this->ItemSearchData));
+        $Grid->getData()->setData(ApiTokenSearch::getItem()->getMgmtSearch($this->ItemSearchData));
         $Grid->updatePager();
 
         $this->view->append('tabs', $Grid);

--- inc/SP/Controller/ItemSearchController.class.php ---
@@ -28,14 +28,14 @@
 
 use SP\Account\AccountHistoryUtil;
 use SP\Account\AccountUtil;
-use SP\Api\ApiTokensUtil;
 use SP\Config\Config;
 use SP\Controller\Grids\Items;
 use SP\Core\ActionsInterface;
 use SP\Core\SessionUtil;
 use SP\Core\Template;
 use SP\DataModel\ItemSearchData;
 use SP\Http\Request;
+use SP\Mgmt\ApiTokens\ApiTokenSearch;
 use SP\Mgmt\Categories\CategorySearch;
 use SP\Mgmt\Customers\CustomerSearch;
 use SP\Mgmt\CustomFields\CustomFieldDefSearch;
@@ -248,6 +248,7 @@ public function getProfiles()
      * Obtener los tokens API de una búsqueda
      *
      * @throws \InvalidArgumentException
+     * @throws \SP\Core\Exceptions\InvalidArgumentException
      */
     public function getTokens()
     {
@@ -260,7 +261,7 @@ public function getTokens()
         $this->view->addTemplate('datagrid-table', 'grid');
 
         $Grid = $this->getGrids()->getTokensGrid();
-        $Grid->getData()->setData(ApiTokensUtil::getTokensMgmtSearch($this->ItemSearchData));
+        $Grid->getData()->setData(ApiTokenSearch::getItem()->getMgmtSearch($this->ItemSearchData));
         $Grid->updatePager();
 
         $this->updatePager($Grid->getPager(), $this->ItemSearchData);

--- inc/SP/Controller/ItemShowController.class.php ---
@@ -29,15 +29,17 @@
 use SP\Account\Account;
 use SP\Account\AccountAcl;
 use SP\Account\AccountHistory;
-use SP\Api\ApiTokensUtil;
+use SP\Mgmt\ApiTokens\ApiTokensUtil;
 use SP\Core\ActionsInterface;
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Session as CryptSession;
 use SP\Core\Exceptions\ItemException;
 use SP\Core\Plugin\PluginUtil;
 use SP\Core\Session;
 use SP\Core\SessionUtil;
 use SP\Core\Template;
 use SP\DataModel\AccountExtData;
+use SP\DataModel\ApiTokenData;
 use SP\DataModel\CategoryData;
 use SP\DataModel\CustomerData;
 use SP\DataModel\CustomFieldData;
@@ -46,10 +48,10 @@
 use SP\DataModel\ProfileData;
 use SP\DataModel\TagData;
 use SP\DataModel\UserData;
-use SP\DataModel\UserPassData;
 use SP\Http\Request;
 use SP\Log\Email;
 use SP\Log\Log;
+use SP\Mgmt\ApiTokens\ApiToken;
 use SP\Mgmt\Categories\Category;
 use SP\Mgmt\Customers\Customer;
 use SP\Mgmt\CustomFields\CustomField;
@@ -65,10 +67,10 @@
 use SP\Mgmt\Tags\Tag;
 use SP\Mgmt\Users\User;
 use SP\Mgmt\Users\UserPass;
+use SP\Mgmt\Users\UserUtil;
 use SP\Util\Checks;
 use SP\Util\ImageUtil;
 use SP\Util\Json;
-use SP\Util\Util;
 
 /**
  * Class AccItemMgmt
@@ -391,18 +393,19 @@ protected function getToken()
         $this->module = self::ACTION_MGM_APITOKENS;
         $this->view->addTemplate('tokens');
 
-        $token = ApiTokensUtil::getTokens($this->itemId, true);
+        $ApiTokenData = $this->itemId ? ApiToken::getItem()->getById($this->itemId) : new ApiTokenData();
 
         $this->view->assign('users', User::getItem()->getItemsForSelect());
         $this->view->assign('actions', ApiTokensUtil::getTokenActions());
-        $this->view->assign('token', $token);
-        $this->view->assign('gotData', is_object($token));
+        $this->view->assign('ApiTokenData', $ApiTokenData);
+        $this->view->assign('isDisabled', ($this->view->actionId === self::ACTION_MGM_APITOKENS_VIEW) ? 'disabled' : '');
+        $this->view->assign('isReadonly', $this->view->isDisabled ? 'readonly' : '');
 
         if ($this->view->isView === true) {
             $Log = Log::newLog(__('Autorizaciones', false));
             $LogMessage = $Log->getLogMessage();
             $LogMessage->addDescription(__('Token de autorización visualizado'));
-            $LogMessage->addDetails(__('Usuario'), $token->user_login);
+            $LogMessage->addDetails(__('Usuario'), UserUtil::getUserLoginById($ApiTokenData->authtoken_userId));
             $Log->writeLog();
 
             Email::sendEmail($LogMessage);
@@ -477,6 +480,9 @@ protected function getTag()
      * @throws \SP\Core\Exceptions\ConstraintException
      * @throws \SP\Core\Exceptions\QueryException
      * @throws \SP\Core\Exceptions\FileNotFoundException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
      */
     public function getAccountPass()
     {
@@ -504,16 +510,15 @@ public function getAccountPass()
         $AccountAcl = new AccountAcl($Account, ActionsInterface::ACTION_ACC_VIEW_PASS);
         $Acl = $AccountAcl->getAcl();
 
-        $UserPass = new UserPass(new UserPassData());
-        $UserPass->getItemData()->setUserId(Session::getUserData()->getUserId());
-
         if (!$Acl->isShowViewPass()) {
             throw new ItemException(__('No tiene permisos para acceder a esta cuenta', false));
-        } elseif (!$UserPass->checkUserUpdateMPass()) {
+        } elseif (!UserPass::checkUserUpdateMPass(Session::getUserData()->getUserId())) {
             throw new ItemException(__('Clave maestra actualizada', false) . '<br>' . __('Reinicie la sesión para cambiarla', false));
         }
 
-        $accountClearPass = Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountIV());
+        $key = CryptSession::getSessionKey();
+        $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $key);
+        $accountClearPass = Crypt::decrypt($AccountData->getAccountPass(), $securedKey, $key);
 
         if (!$isHistory) {
             $Account->incrementDecryptCounter();

--- inc/SP/Controller/LoginController.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -24,6 +24,10 @@
 
 namespace SP\Controller;
 
+defined('APP_ROOT') || die();
+
+use Defuse\Crypto\Exception\BadFormatException;
+use Defuse\Crypto\Exception\CryptoException;
 use SP\Auth\Auth;
 use SP\Auth\AuthResult;
 use SP\Auth\AuthUtil;
@@ -39,14 +43,15 @@
 use SP\Core\Messages\LogMessage;
 use SP\Core\Session;
 use SP\Core\SessionUtil;
-use SP\DataModel\UserData;
+use SP\DataModel\TrackData;
+use SP\DataModel\UserLoginData;
 use SP\DataModel\UserPassRecoverData;
 use SP\Http\JsonResponse;
 use SP\Http\Request;
 use SP\Log\Log;
 use SP\Mgmt\Groups\Group;
 use SP\Mgmt\Profiles\Profile;
-use SP\Mgmt\Users\User;
+use SP\Mgmt\Tracks\Track;
 use SP\Mgmt\Users\UserLdap;
 use SP\Mgmt\Users\UserPass;
 use SP\Mgmt\Users\UserPassRecover;
@@ -63,18 +68,27 @@
  */
 class LoginController
 {
+    /**
+     * Estados
+     */
     const STATUS_INVALID_LOGIN = 1;
     const STATUS_INVALID_MASTER_PASS = 2;
     const STATUS_USER_DISABLED = 3;
     const STATUS_INTERNAL_ERROR = 4;
     const STATUS_NEED_OLD_PASS = 5;
+    const STATUS_MAX_ATTEMPTS_EXCEEDED = 6;
+    /**
+     * Tiempo para contador de intentos
+     */
+    const TIME_TRACKING = 600;
+    const TIME_TRACKING_MAX_ATTEMPTS = 5;
 
     /**
      * @var JsonResponse
      */
     protected $jsonResponse;
     /**
-     * @var UserData
+     * @var UserLoginData
      */
     protected $UserData;
     /**
@@ -88,7 +102,7 @@ class LoginController
     public function __construct()
     {
         $this->jsonResponse = new JsonResponse();
-        $this->UserData = new UserData();
+        $this->UserData = new UserLoginData();
         $this->LogMessage = new LogMessage();
         $this->LogMessage->setAction(__('Inicio sesión', false));
     }
@@ -110,12 +124,14 @@ public function doLogin()
             Json::returnJson($this->jsonResponse);
         }
 
-        $this->UserData->setUserLogin($userLogin);
-        $this->UserData->setUserPass($userPass);
+        $this->UserData->setLogin($userLogin);
+        $this->UserData->setLoginPass($userPass);
 
         $Log = new Log($this->LogMessage);
 
         try {
+            $this->checkTracking();
+
             $Auth = new Auth($this->UserData);
             $result = $Auth->doAuth();
 
@@ -129,14 +145,17 @@ public function doLogin()
                     }
                 }
             } else {
+                $this->addTracking();
+
                 throw new AuthException(SPException::SP_INFO, __('Login incorrecto', false), '', self::STATUS_INVALID_LOGIN);
             }
 
-            $this->getUserData($userPass);
-            $this->checkUserDisabled();
-            $this->checkPasswordChange();
+            $this->getUserData();
+            $this->checkUser();
+            $this->loadMasterPass();
             $this->setUserSession();
             $this->loadUserPreferences();
+            $this->cleanUserData();
         } catch (SPException $e) {
             $Log->setLogLevel(Log::ERROR);
             $Log->writeLog();
@@ -161,20 +180,65 @@ public function doLogin()
         Json::returnJson($this->jsonResponse);
     }
 
+    /**
+     * Comprobar los intentos de login
+     *
+     * @throws \SP\Core\Exceptions\AuthException
+     */
+    private function checkTracking()
+    {
+        try {
+            $TrackData = new TrackData();
+            $TrackData->setTrackSource('Login');
+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);
+
+            $attempts = count(Track::getItem($TrackData)->getTracksForClientFromTime(time() - self::TIME_TRACKING));
+        } catch (SPException $e) {
+            $this->LogMessage->addDescription($e->getMessage());
+
+            throw new AuthException(SPException::SP_ERROR, __('Error interno', false), '', self::STATUS_INTERNAL_ERROR);
+        }
+
+        if ($attempts >= self::TIME_TRACKING_MAX_ATTEMPTS) {
+            $this->addTracking();
+
+            sleep(0.3 * $attempts);
+
+            $this->LogMessage->addDescription(sprintf(__('Intentos excedidos (%d/%d)'), $attempts, self::TIME_TRACKING_MAX_ATTEMPTS));
+
+            throw new AuthException(SPException::SP_INFO, __('Intentos excedidos', false), '', self::STATUS_MAX_ATTEMPTS_EXCEEDED);
+        }
+    }
+
+    /**
+     * Añadir un seguimiento
+     *
+     * @throws \SP\Core\Exceptions\AuthException
+     */
+    private function addTracking()
+    {
+        try {
+            $TrackData = new TrackData();
+            $TrackData->setTrackSource('Login');
+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);
+
+            Track::getItem($TrackData)->add();
+        } catch (SPException $e) {
+            throw new AuthException(SPException::SP_ERROR, __('Error interno', false), '', self::STATUS_INTERNAL_ERROR);
+        }
+    }
+
     /**
      * Obtener los datos del usuario
      *
-     * @param $userPass
      * @throws SPException
      * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \SP\Core\Exceptions\AuthException
      * @throws \InvalidArgumentException
      */
-    protected function getUserData($userPass)
+    protected function getUserData()
     {
         try {
-            $this->UserData = User::getItem($this->UserData)->getByLogin($this->UserData->getUserLogin());
-            $this->UserData->setUserPass($userPass);
             $this->UserData->setUserPreferences(UserPreferences::getItem()->getById($this->UserData->getUserId()));
         } catch (SPException $e) {
             $this->LogMessage->addDescription(__('Error al obtener los datos del usuario de la BBDD', false));
@@ -184,33 +248,21 @@ protected function getUserData($userPass)
     }
 
     /**
-     * omprobar si el usuario está deshabilitado
+     * Comprobar estado del usuario
      *
      * @throws \SP\Core\Exceptions\SPException
      */
-    protected function checkUserDisabled()
+    protected function checkUser()
     {
         // Comprobar si el usuario está deshabilitado
         if ($this->UserData->isUserIsDisabled()) {
             $this->LogMessage->addDescription(__('Usuario deshabilitado', false));
-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());
+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());
 
-            throw new AuthException(SPException::SP_INFO, __('Usuario deshabilitado', false), '', self::STATUS_USER_DISABLED);
-        }
-
-        return false;
-    }
+            $this->addTracking();
 
-    /**
-     * Comprobar si se ha forzado un cambio de clave
-     *
-     * @throws \SP\Core\Exceptions\SPException
-     * @throws \SP\Core\Exceptions\InvalidClassException
-     */
-    protected function checkPasswordChange()
-    {
-        // Comprobar si se ha forzado un cambio de clave
-        if ($this->UserData->isUserIsChangePass()) {
+            throw new AuthException(SPException::SP_INFO, __('Usuario deshabilitado', false), '', self::STATUS_USER_DISABLED);
+        } elseif ($this->UserData->isUserIsChangePass()) {
             $hash = Util::generateRandomBytes();
 
             $UserPassRecoverData = new UserPassRecoverData();
@@ -229,27 +281,90 @@ protected function checkPasswordChange()
     }
 
     /**
-     * Cargar la sesión del usuario
+     * Cargar la clave maestra o solicitarla
      *
      * @throws \SP\Core\Exceptions\SPException
      * @throws \SP\Core\Exceptions\AuthException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \SP\Core\Exceptions\QueryException
+     */
+    protected function loadMasterPass()
+    {
+        $masterPass = Request::analyzeEncrypted('mpass');
+        $oldPass = Request::analyzeEncrypted('oldpass');
+
+        try {
+            if ($masterPass) {
+                if (CryptMasterPass::checkTempMasterPass($masterPass)) {
+                    $this->LogMessage->addDescription(__('Usando clave temporal', false));
+
+                    $masterPass = CryptMasterPass::getTempMasterPass($masterPass);
+                }
+
+                if (!UserPass::updateUserMPass($masterPass, $this->UserData)) {
+                    $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));
+
+                    $this->addTracking();
+
+                    throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
+                } else {
+                    $this->LogMessage->addDescription(__('Clave maestra actualizada', false));
+                }
+            } else if ($oldPass) {
+                if (!UserPass::updateMasterPassFromOldPass($oldPass, $this->UserData)) {
+                    $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));
+
+                    $this->addTracking();
+
+                    throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
+                } else {
+                    $this->LogMessage->addDescription(__('Clave maestra actualizada', false));
+                }
+            } else {
+                switch (UserPass::loadUserMPass($this->UserData)) {
+                    case UserPass::MPASS_CHECKOLD:
+                        throw new AuthException(SPException::SP_INFO, __('Es necesaria su clave anterior', false), '', self::STATUS_NEED_OLD_PASS);
+                        break;
+                    case UserPass::MPASS_NOTSET:
+                    case UserPass::MPASS_CHANGED:
+                    case UserPass::MPASS_WRONG:
+                        $this->addTracking();
+
+                        throw new AuthException(SPException::SP_INFO, __('La clave maestra no ha sido guardada o es incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
+                        break;
+                }
+            }
+        } catch (BadFormatException $e) {
+            $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));
+
+            throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
+        } catch (CryptoException $e) {
+            $this->LogMessage->addDescription(__('Error interno', false));
+
+            throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), $e->getMessage(), self::STATUS_INTERNAL_ERROR);
+        }
+    }
+
+    /**
+     * Cargar la sesión del usuario
+     *
+     * @throws \SP\Core\Exceptions\SPException
      * @throws \InvalidArgumentException
+     * @throws \SP\Core\Exceptions\AuthException
      * @throws \SP\Core\Exceptions\ConstraintException
      * @throws \SP\Core\Exceptions\QueryException
      */
     protected function setUserSession()
     {
-        $UserPass = $this->loadMasterPass();
-
         // Obtenemos la clave maestra del usuario
-        if ($UserPass->getClearUserMPass() !== '') {
+        if (UserPass::$gotMPass === true) {
             // Actualizar el último login del usuario
             UserUtil::setUserLastLogin($this->UserData->getUserId());
 
             // Cargar las variables de sesión del usuario
             SessionUtil::loadUserSession($this->UserData);
 
-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());
+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());
             $this->LogMessage->addDetails(__('Perfil', false), Profile::getItem()->getById($this->UserData->getUserProfileId())->getUserprofileName());
             $this->LogMessage->addDetails(__('Grupo', false), Group::getItem()->getById($this->UserData->getUserGroupId())->getUsergroupName());
         } else {
@@ -260,74 +375,59 @@ protected function setUserSession()
     }
 
     /**
-     * Cargar la clave maestra o solicitarla
+     * Cargar las preferencias del usuario y comprobar si usa 2FA
      *
      * @throws \SP\Core\Exceptions\SPException
-     * @throws \SP\Core\Exceptions\AuthException
+     * @throws \SP\Core\Exceptions\InvalidClassException
      */
-    protected function loadMasterPass()
+    protected function loadUserPreferences()
     {
-        $masterPass = Request::analyzeEncrypted('mpass');
-        $oldPass = Request::analyzeEncrypted('oldpass');
-
-        $UserPass = UserPass::getItem($this->UserData);
-
-        if ($masterPass) {
-            if (CryptMasterPass::checkTempMasterPass($masterPass)) {
-                $this->LogMessage->addDescription(__('Usando clave temporal', false));
-
-                $masterPass = CryptMasterPass::getTempMasterPass($masterPass);
-            }
-
-            if (!$UserPass->updateUserMPass($masterPass)) {
-                $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));
-
-                throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
-            } else {
-                SessionUtil::saveSessionMPass($UserPass->getClearUserMPass());
-
-                $this->LogMessage->addDescription(__('Clave maestra actualizada', false));
-            }
-        } else if ($oldPass) {
-            if (!$UserPass->updateMasterPass($oldPass)) {
-                $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));
+        Language::setLanguage(true);
+        DiFactory::getTheme()->initTheme(true);
 
-                throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
-            } else {
-                SessionUtil::saveSessionMPass($UserPass->getClearUserMPass());
+        Session::setUserPreferences($this->UserData->getUserPreferences());
+        Session::setSessionType(Session::SESSION_INTERACTIVE);
+        Session::setAuthCompleted(true);
 
-                $this->LogMessage->addDescription(__('Clave maestra actualizada', false));
-            }
-        } else {
-            $loadMPass = $UserPass->loadUserMPass();
-
-            // Comprobar si es necesario actualizar la clave maestra
-            if ($loadMPass === null) {
-                throw new AuthException(SPException::SP_INFO, __('Es necesaria su clave anterior', false), '', self::STATUS_NEED_OLD_PASS);
-                // La clave no está establecida o se ha sido cambiada por el administrador
-            } else if ($loadMPass === false) {
-                throw new AuthException(SPException::SP_INFO, __('La clave maestra no ha sido guardada o es incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);
-            }
-        }
+        DiFactory::getEventDispatcher()->notifyEvent('login.preferences', $this);
+    }
 
-        return $UserPass;
+    /**
+     * Limpiar datos de usuario
+     */
+    private function cleanUserData()
+    {
+        $this->UserData->setLogin(null);
+        $this->UserData->setLoginPass(null);
+        $this->UserData->setUserMPass(null);
+        $this->UserData->setUserMKey(null);
     }
 
     /**
-     * Cargar las preferencias del usuario y comprobar si usa 2FA
+     * Comprobar si se ha forzado un cambio de clave
      *
      * @throws \SP\Core\Exceptions\SPException
      * @throws \SP\Core\Exceptions\InvalidClassException
      */
-    protected function loadUserPreferences()
+    protected function checkPasswordChange()
     {
-        Language::setLanguage(true);
-        DiFactory::getTheme()->initTheme(true);
-        Session::setUserPreferences($this->UserData->getUserPreferences());
-        Session::setSessionType(Session::SESSION_INTERACTIVE);
-        Session::setAuthCompleted(true);
+        // Comprobar si se ha forzado un cambio de clave
+        if ($this->UserData->isUserIsChangePass()) {
+            $hash = Util::generateRandomBytes();
 
-        DiFactory::getEventDispatcher()->notifyEvent('login.preferences', $this);
+            $UserPassRecoverData = new UserPassRecoverData();
+            $UserPassRecoverData->setUserpassrUserId($this->UserData->getUserId());
+            $UserPassRecoverData->setUserpassrHash($hash);
+
+            UserPassRecover::getItem($UserPassRecoverData)->add();
+
+            $data = ['url' => Init::$WEBURI . '/index.php?a=passreset&h=' . $hash . '&t=' . time() . '&f=1'];
+            $this->jsonResponse->setData($data);
+            $this->jsonResponse->setStatus(0);
+            Json::returnJson($this->jsonResponse);
+        }
+
+        return false;
     }
 
     /**
@@ -343,11 +443,13 @@ protected function authLdap(LdapAuthData $LdapAuthData)
     {
         if ($LdapAuthData->getStatusCode() > 0) {
             $this->LogMessage->addDetails(__('Tipo', false), __FUNCTION__);
-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());
+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());
 
             if ($LdapAuthData->getStatusCode() === 49) {
                 $this->LogMessage->addDescription(__('Login incorrecto', false));
 
+                $this->addTracking();
+
                 throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), '', self::STATUS_INVALID_LOGIN);
             } elseif ($LdapAuthData->getStatusCode() === 701) {
                 $this->LogMessage->addDescription(__('Cuenta expirada', false));
@@ -372,7 +474,7 @@ protected function authLdap(LdapAuthData $LdapAuthData)
 
         try {
             // Verificamos si el usuario existe en la BBDD
-            if (UserLdap::checkLDAPUserInDB($this->UserData->getUserLogin())) {
+            if (UserLdap::checkLDAPUserInDB($this->UserData->getLogin())) {
                 // Actualizamos el usuario de LDAP en MySQL
                 UserLdap::getItem($this->UserData)->update();
             } else {
@@ -401,7 +503,9 @@ protected function authDatabase(DatabaseAuthData $AuthData)
         // Autentificamos con la BBDD
         if ($AuthData->getAuthenticated() === 0) {
             $this->LogMessage->addDescription(__('Login incorrecto', false));
-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());
+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());
+
+            $this->addTracking();
 
             throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), '', self::STATUS_INVALID_LOGIN);
         } elseif ($AuthData->getAuthenticated() === 1) {
@@ -424,9 +528,11 @@ protected function authBrowser(BrowserAuthData $AuthData)
         if ($AuthData->getAuthenticated() === 0) {
             $this->LogMessage->addDescription(__('Login incorrecto', false));
             $this->LogMessage->addDetails(__('Tipo', false), __FUNCTION__);
-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());
+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());
             $this->LogMessage->addDetails(__('Autentificación', false), sprintf('%s (%s)', AuthUtil::getServerAuthType(), $AuthData->getName()));
 
+            $this->addTracking();
+
             throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), '', self::STATUS_INVALID_LOGIN);
         } elseif ($AuthData->getAuthenticated() === 1) {
             $this->LogMessage->addDetails(__('Tipo', false), __FUNCTION__);

--- inc/SP/Controller/MainActionController.class.php ---
@@ -0,0 +1,128 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Controller;
+
+use SP\Config\Config;
+use SP\Core\Exceptions\ValidationException;
+use SP\Core\Session;
+use SP\Core\TaskFactory;
+use SP\Core\Upgrade\Upgrade;
+use SP\Http\JsonResponse;
+use SP\Http\Request;
+use SP\Log\Log;
+use SP\Util\Json;
+use SP\Util\Util;
+
+/**
+ * Class MainActionController
+ *
+ * @package SP\Controller
+ */
+class MainActionController
+{
+    /**
+     * Realizar acción
+     *
+     * @param int $version
+     * @return bool
+     */
+    public function doAction($version = 0)
+    {
+        $version = Request::analyze('version', $version);
+        $type = Request::analyze('type');
+        $taskId = Request::analyze('taskId');
+
+        if (Request::analyze('a') === 'upgrade'
+            && Request::analyze('upgrade', 0) === 1
+        ) {
+            try {
+                $JsonResponse = new JsonResponse();
+                $JsonResponse->setAction(__('Actualización', false));
+
+                if (Request::analyze('h') !== Config::getConfig()->getUpgradeKey()) {
+                    throw new ValidationException(__('Código de seguridad incorrecto', false));
+                } elseif (Request::analyze('chkConfirm', false, false, true) === false) {
+                    throw new ValidationException(__('Es necesario confirmar la actualización', false));
+                }
+
+                TaskFactory::createTask('upgrade', $taskId);
+
+                $this->upgrade($version, $type);
+
+
+                $JsonResponse->setDescription(__('Aplicación actualizada correctamente', false));
+                $JsonResponse->addMessage(__('En 5 segundos será redirigido al login', false));
+                $JsonResponse->setStatus(0);
+            } catch (\Exception $e) {
+                TaskFactory::endTask();
+
+                $JsonResponse->setDescription($e->getMessage());
+            }
+
+            Json::returnJson($JsonResponse);
+        } elseif ($type === 'db' || $type === 'app') {
+            $controller = new MainController();
+            $controller->getUpgrade($version);
+        }
+
+        return false;
+    }
+
+    /**
+     * Actualizar
+     *
+     * @param int $version
+     * @param int $type
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    private function upgrade($version, $type)
+    {
+        Upgrade::doUpgrade($version);
+
+        TaskFactory::endTask();
+
+        $Config = Config::getConfig();
+        $Config->setMaintenance(false);
+        $Config->setUpgradeKey('');
+
+        $appVersion = implode('', Util::getVersion(true));
+
+        $Config->setConfigVersion($appVersion);
+
+        Config::saveConfig($Config);
+
+        Config::loadConfig(true);
+
+        Session::setAppUpdated();
+
+        $Log = new Log();
+        $LogMessage = $Log->getLogMessage();
+        $LogMessage->setAction(__('Actualización', false));
+        $LogMessage->addDescription(__('Actualización de versión realizada.', false));
+        $LogMessage->addDetails(__('Versión', false), sprintf('%d => %d', $version, $appVersion));
+        $LogMessage->addDetails(__('Tipo', false), $type);
+        $Log->writeLog();
+    }
+}
\ No newline at end of file

--- inc/SP/Controller/MainController.class.php ---
@@ -26,6 +26,7 @@
 
 defined('APP_ROOT') || die();
 
+use SP\Account\AccountUtil;
 use SP\Config\Config;
 use SP\Core\Acl;
 use SP\Core\ActionsInterface;
@@ -37,7 +38,9 @@
 use SP\Core\Plugin\PluginUtil;
 use SP\Core\Session;
 use SP\Core\SessionUtil;
+use SP\Core\Task;
 use SP\Core\Template;
+use SP\Core\Upgrade\Account;
 use SP\Core\Upgrade\Check;
 use SP\DataModel\NoticeData;
 use SP\Html\DataGrid\DataGridAction;
@@ -64,8 +67,8 @@ class MainController extends ControllerBase implements ActionsInterface
      * Constructor
      *
      * @param        $template   Template con instancia de plantilla
-     * @param string $page       El nombre de página para la clase del body
-     * @param bool   $initialize Si es una inicialización completa
+     * @param string $page El nombre de página para la clase del body
+     * @param bool $initialize Si es una inicialización completa
      */
     public function __construct(Template $template = null, $page = '', $initialize = true)
     {
@@ -329,7 +332,9 @@ public function getLogin()
         $this->view->assign('useLayout', false);
         $this->view->assign('mailEnabled', Checks::mailIsEnabled());
         $this->view->assign('isLogout', Request::analyze('logout', false, true));
-        $this->view->assign('updated', Init::$UPDATED === true);
+        $this->view->assign('updated', Session::getAppUpdated());
+
+        Session::setAppUpdated(false);
 
         $getParams = [];
 
@@ -420,9 +425,11 @@ public function getError()
     }
 
     /**
-     * Obtener los datos para el interface de actualización de BD
+     * Obtener los datos para el interface de actualización de componentes
+     *
+     * @param $version
      */
-    public function getUpgrade()
+    public function getUpgrade($version)
     {
         $this->setPage('upgrade');
 
@@ -431,20 +438,32 @@ public function getUpgrade()
         $this->view->addTemplate('body-footer');
         $this->view->addTemplate('body-end');
 
-        $this->view->assign('action', Request::analyze('a'));
-        $this->view->assign('time', Request::analyze('t'));
-        $this->view->assign('upgrade', $this->view->action === 'upgrade');
-        $this->view->assign('checkConstraints', Check::checkConstraints());
+        $action = Request::analyze('a');
+        $type = Request::analyze('type');
+
+        $this->view->assign('action', $action);
+        $this->view->assign('type', $type);
+        $this->view->assign('version', $version);
+        $this->view->assign('upgradeVersion', implode('.', Util::getVersion(true)));
+        $this->view->assign('taskId', Task::genTaskId('masterpass'));
+
+        if ($version < 1316011001) {
+            $this->view->assign('checkConstraints', Check::checkConstraints());
 
-        $constraints = [];
+            $constraints = [];
 
-        foreach ($this->view->checkConstraints as $key => $val) {
-            if ($val > 0) {
-                $constraints[] = sprintf('%s : %s', $key, $val);
+            foreach ($this->view->checkConstraints as $key => $val) {
+                if ($val > 0) {
+                    $constraints[] = sprintf('%s : %s', $key, $val);
+                }
             }
+
+            $this->view->assign('constraints', $constraints);
         }
 
-        $this->view->assign('constraints', $constraints);
+        if ($version < 21017022601) {
+            $this->view->assign('numAccounts', AccountUtil::getTotalNumAccounts());
+        }
 
         $this->view();
         exit();

--- inc/SP/Controller/RequestControllerTrait.class.php ---
@@ -92,8 +92,6 @@ protected function analyzeRequest()
 
     /**
      * Comprobaciones antes de realizar una acción
-     *
-     * @throws \SP\Core\Exceptions\SPException
      */
     protected function preActionChecks()
     {
@@ -104,8 +102,6 @@ protected function preActionChecks()
 
     /**
      * Acción no disponible
-     *
-     * @throws \SP\Core\Exceptions\SPException
      */
     protected function invalidAction()
     {
@@ -115,8 +111,6 @@ protected function invalidAction()
 
     /**
      * Comprobar si la sesión está activa
-     *
-     * @throws \SP\Core\Exceptions\SPException
      */
     protected function checkSession()
     {

--- inc/SP/Controller/TaskController.class.php ---
@@ -0,0 +1,267 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Controller;
+
+use SP\Core\Messages\TaskMessage;
+use SP\Core\Task;
+use SP\Http\Request;
+use SP\Util\Util;
+
+/**
+ * Class TaskController
+ *
+ * @package SP\Controller
+ */
+class TaskController
+{
+    /**
+     * @var Task Instancia de la tarea
+     */
+    protected $Task;
+    /**
+     * @var int Tiempo de espera en cada intendo de inicialización
+     */
+    protected $startupWaitTime = 10;
+    /**
+     * @var int Intentos de inicialización
+     */
+    protected $startupWaitCount = 30;
+    /**
+     * @var string Archivo de bloqueo
+     */
+    protected $lockFile;
+    /**
+     * @var string Directorio de las tareas
+     */
+    protected $dir;
+    /**
+     * @var string ID de la tarea
+     */
+    protected $taskId;
+    /**
+     * @var string Archivo de la tarea
+     */
+    protected $taskFile;
+
+    /**
+     * TaskController constructor.
+     */
+    public function __construct()
+    {
+        $this->dir = Util::getTempDir();
+        $this->taskId = Request::analyze('taskId');
+    }
+
+    /**
+     * Realizar acción
+     *
+     * @return bool
+     */
+    public function doAction()
+    {
+        $source = Request::analyze('source');
+
+        if ($this->dir === false || !$this->getLock($source)) {
+            return false;
+        }
+
+        $this->taskFile = $this->dir . DIRECTORY_SEPARATOR . $this->taskId . '.task';
+
+        $count = 0;
+
+        while (!$this->checkTaskRegistered() || !$this->checkTaskFile()) {
+            if ($count >= $this->startupWaitCount) {
+                debugLog('Aborting ...');
+
+                die(1);
+            }
+
+            debugLog('Waiting for task ...');
+
+            $count++;
+            sleep($this->startupWaitTime);
+        }
+
+        $this->readTaskStatus();
+
+        die(0);
+    }
+
+    /**
+     * Comprueba si una tarea ha sido registrada en la sesión
+     *
+     * @return bool
+     */
+    protected function checkTaskRegistered()
+    {
+        if (is_object($this->Task)) {
+            debugLog('Task detected: ' . $this->Task->getTaskId());
+
+            return true;
+        }
+
+        if (file_exists($this->taskFile)) {
+            $task = file_get_contents($this->taskFile);
+
+            if ($task !== false) {
+                $this->Task = unserialize($task);
+            }
+
+            return is_object($this->Task);
+        }
+
+        return false;
+    }
+
+    /**
+     *  Comprobar si el archivo de salida de la tarea existe
+     */
+    protected function checkTaskFile()
+    {
+        return file_exists($this->Task->getFileOut());
+    }
+
+    /**
+     * Leer el estado de una tarea y enviarlo
+     */
+    protected function readTaskStatus()
+    {
+        debugLog('Tracking task: ' . $this->Task->getTaskId());
+
+        $id = 0;
+        $failCount = 0;
+        $file = $this->Task->getFileOut();
+        $interval = $this->Task->getInterval();
+
+        $Message = new TaskMessage();
+        $Message->setTask($this->Task->getTaskId());
+        $Message->setMessage(__('Esperando actualización de progreso ...'));
+
+        while ($failCount <= 30 && file_exists($this->taskFile)) {
+            $content = file_get_contents($file);
+
+            if (!empty($content)) {
+                $this->sendMessage($id, $content);
+                $id++;
+            } else {
+                debugLog($Message->composeJson());
+
+                $this->sendMessage($id, $Message->composeJson());
+                $failCount++;
+            }
+
+            sleep($interval);
+        }
+    }
+
+    /**
+     * Enviar un mensaje
+     *
+     * @param $id
+     * @param $message
+     */
+    protected function sendMessage($id, $message)
+    {
+        echo 'id: ', $id, PHP_EOL, 'data: ', $message, PHP_EOL, PHP_EOL;
+
+        ob_flush();
+        flush();
+    }
+
+    /**
+     * Comprobar si hay una tarea a la espera
+     *
+     * @param $source
+     * @return bool
+     */
+    protected function checkWait($source)
+    {
+        $this->lockFile = sys_get_temp_dir() . DIRECTORY_SEPARATOR . $source . '.lock';
+
+        if (file_exists($this->lockFile)) {
+            $timeout = $this->startupWaitCount * $this->startupWaitTime;
+
+            if (filemtime($this->lockFile) + $timeout < time()) {
+                unlink($this->lockFile);
+
+                return false;
+            }
+
+            return true;
+        }
+
+        touch($this->lockFile);
+
+        return false;
+    }
+
+    /**
+     * Eliminar bloqueo
+     */
+    protected function removeLock()
+    {
+        debugLog(__METHOD__);
+
+        unlink($this->lockFile);
+    }
+
+    /**
+     * Obtener un bloqueo para la ejecución de la tarea
+     *
+     * @param $source
+     *
+     * @return bool
+     */
+    private function getLock($source)
+    {
+        if ($source === '') {
+            $source = 'task';
+        }
+
+        $this->lockFile = $this->dir . DIRECTORY_SEPARATOR . $source . '.lock';
+
+        if (file_exists($this->lockFile)) {
+            $timeout = $this->startupWaitCount * $this->startupWaitTime;
+
+            if (filemtime($this->lockFile) + $timeout < time()) {
+                unlink($this->lockFile);
+
+                return $this->updateLock();
+            }
+
+            return false;
+        } else {
+            return $this->updateLock();
+        }
+    }
+
+    /**
+     * Actualizar el tiempo del archivo de bloqueo
+     */
+    protected function updateLock()
+    {
+        return file_put_contents($this->lockFile, time()) !== false;
+    }
+}
\ No newline at end of file

--- inc/SP/Core/Crypt/Crypt.class.php ---
@@ -0,0 +1,141 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core\Crypt;
+
+use Defuse\Crypto\Crypto;
+use Defuse\Crypto\Exception\CryptoException;
+use Defuse\Crypto\Exception\WrongKeyOrModifiedCiphertextException;
+use Defuse\Crypto\Key;
+use Defuse\Crypto\KeyProtectedByPassword;
+
+/**
+ * Class Crypt
+ *
+ * @package SP\Core\Crypt
+ */
+class Crypt
+{
+    /**
+     * Encriptar datos con una clave segura
+     *
+     * @param string     $data
+     * @param string|Key $securedKey
+     * @param string     $password
+     * @return string
+     * @throws CryptoException
+     */
+    public static function encrypt($data, $securedKey, $password = null)
+    {
+        try {
+            if ($securedKey instanceof Key) {
+                $key = $securedKey;
+            } elseif (!empty($password)) {
+                $key = self::unlockSecuredKey($securedKey, $password, false);
+            } else {
+                $key = Key::loadFromAsciiSafeString($securedKey);
+            }
+
+            return Crypto::encrypt($data, $key);
+        } catch (CryptoException $e) {
+            debugLog($e->getMessage());
+
+            throw $e;
+        }
+    }
+
+    /**
+     * @param string $key
+     * @param string $password
+     * @param bool   $useAscii
+     * @return string|Key
+     * @throws CryptoException
+     */
+    public static function unlockSecuredKey($key, $password, $useAscii = true)
+    {
+        try {
+            if ($useAscii) {
+                return KeyProtectedByPassword::loadFromAsciiSafeString($key)->unlockKey($password)->saveToAsciiSafeString();
+            }
+
+            return KeyProtectedByPassword::loadFromAsciiSafeString($key)->unlockKey($password);
+        } catch (CryptoException $e) {
+            debugLog($e->getMessage());
+
+            throw $e;
+        }
+    }
+
+    /**
+     * Desencriptar datos con una clave segura
+     *
+     * @param string     $data
+     * @param string|Key $securedKey
+     * @param string     $password
+     * @return string
+     * @throws CryptoException
+     */
+    public static function decrypt($data, $securedKey, $password = null)
+    {
+        try {
+            if ($securedKey instanceof Key) {
+                $key = $securedKey;
+            } elseif (!empty($password) && $securedKey instanceof KeyProtectedByPassword) {
+                $key = self::unlockSecuredKey($securedKey, $password);
+            } else {
+                $key = Key::loadFromAsciiSafeString($securedKey);
+            }
+
+            return Crypto::decrypt($data, $key);
+        } catch (CryptoException $e) {
+            debugLog($e->getMessage());
+
+            throw $e;
+        }
+
+    }
+
+    /**
+     * Securiza una clave de seguridad
+     *
+     * @param string $password
+     * @param bool   $useAscii
+     * @return string|Key
+     * @throws CryptoException
+     */
+    public static function makeSecuredKey($password, $useAscii = true)
+    {
+        try {
+            if ($useAscii) {
+                return KeyProtectedByPassword::createRandomPasswordProtectedKey($password)->saveToAsciiSafeString();
+            }
+
+            return KeyProtectedByPassword::createRandomPasswordProtectedKey($password);
+        } catch (CryptoException $e) {
+            debugLog($e->getMessage());
+
+            throw $e;
+        }
+    }
+}
\ No newline at end of file

--- inc/SP/Core/Crypt/Hash.class.php ---
@@ -0,0 +1,57 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core\Crypt;
+
+/**
+ * Class Hash
+ *
+ * @package SP\Core\Crypt
+ */
+class Hash
+{
+    /**
+     * Comprobar el hash de una clave.
+     *
+     * @param string $key  con la clave a comprobar
+     * @param string $hash con el hash a comprobar
+     * @return bool
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public static function checkHashKey($key, $hash)
+    {
+        return password_verify($key, $hash);
+    }
+
+    /**
+     * Generar un hash de una clave criptográficamente segura
+     *
+     * @param string $key con la clave a 'hashear'
+     * @return string con el hash de la clave
+     */
+    public static function hashKey($key)
+    {
+        return password_hash($key, PASSWORD_BCRYPT);
+    }
+}
\ No newline at end of file

--- inc/SP/Core/Crypt/Session.class.php ---
@@ -0,0 +1,74 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core\Crypt;
+
+use SP\Core\Session as CoreSession;
+
+/**
+ * Class Session
+ *
+ * @package SP\Core\Crypt
+ */
+class Session
+{
+    /**
+     * Devolver la clave maestra de la sesión
+     *
+     * @return string
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     */
+    public static function getSessionKey()
+    {
+        return CoreSession::getVault()->getData();
+    }
+
+    /**
+     * Guardar la clave maestra en la sesión
+     *
+     * @param $data
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     */
+    public static function saveSessionKey($data)
+    {
+        $Vault = new Vault();
+        CoreSession::setVault($Vault->saveData($data));
+    }
+
+    /**
+     * Regenerar la clave de sesión
+     *
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     */
+    public static function reKey()
+    {
+        CoreSession::setVault(CoreSession::getVault()->reKey());
+    }
+}
\ No newline at end of file

--- inc/SP/Core/Crypt/Vault.class.php ---
@@ -0,0 +1,140 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core\Crypt;
+
+use SP\Core\Session as CoreSession;
+use SP\Core\SessionUtil;
+
+/**
+ * Class Vault
+ *
+ * @package SP\Core\Crypt
+ */
+class Vault
+{
+    /**
+     * @var string
+     */
+    private $data;
+    /**
+     * @var string
+     */
+    private $key;
+    /**
+     * @var int
+     */
+    private $timeSet = 0;
+    /**
+     * @var int
+     */
+    private $timeUpdated = 0;
+
+    /**
+     * Regenerar la clave de sesión
+     *
+     * @param  string $key
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @return Vault
+     */
+    public function reKey($key = null)
+    {
+        $this->timeUpdated = time();
+        $sessionMPass = $this->getData($key);
+
+        SessionUtil::regenerate();
+
+        $this->saveData($sessionMPass, $key);
+
+        return $this;
+    }
+
+    /**
+     * Devolver la clave maestra de la sesión
+     *
+     * @param  string $key
+     * @return string
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     */
+    public function getData($key = null)
+    {
+        $key = $key ?: $this->getKey();
+        $securedKey = Crypt::unlockSecuredKey($this->key, $key);
+
+        return Crypt::decrypt($this->data, $securedKey, $key);
+    }
+
+    /**
+     * Devolver la clave utilizada para generar la llave segura
+     *
+     * @return string
+     */
+    private function getKey()
+    {
+        return session_id() . CoreSession::getSidStartTime();
+    }
+
+    /**
+     * Guardar la clave maestra en la sesión
+     *
+     * @param $data
+     * @param  string $key
+     * @return $this
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     */
+    public function saveData($data, $key = null)
+    {
+        if ($this->timeSet === 0) {
+            $this->timeSet = time();
+        }
+
+        $key = $key ?: $this->getKey();
+        $this->key = Crypt::makeSecuredKey($key);
+        $this->data = Crypt::encrypt($data, $this->key, $key);
+
+        return $this;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTimeSet()
+    {
+        return $this->timeSet;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTimeUpdated()
+    {
+        return $this->timeUpdated;
+    }
+}
\ No newline at end of file

--- inc/SP/Core/CryptMasterPass.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -25,6 +25,9 @@
 namespace SP\Core;
 
 use SP\Config\ConfigDB;
+use SP\Core\Crypt\Session as CryptSession;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Hash;
 use SP\Log\Log;
 use SP\Util\Util;
 
@@ -47,20 +50,19 @@ class CryptMasterPass
      *
      * @param int $maxTime El tiempo máximo de validez de la clave
      * @return bool|string
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
      */
     public static function setTempMasterPass($maxTime = 14400)
     {
         // Encriptar la clave maestra con hash aleatorio generado
-        $randomKey = Crypt::generateAesKey(Util::generateRandomBytes());
-        $pass = Crypt::mkCustomMPassEncrypt($randomKey, SessionUtil::getSessionMPass());
+        $randomKey = Util::generateRandomBytes(32);
+        $securedKey = Crypt::makeSecuredKey($randomKey);
 
-        if (!is_array($pass)) {
-            return false;
-        }
-
-        ConfigDB::setCacheConfigValue('tempmaster_pass', bin2hex($pass[0]));
-        ConfigDB::setCacheConfigValue('tempmaster_passiv', bin2hex($pass[1]));
-        ConfigDB::setCacheConfigValue('tempmaster_passhash', Crypt::mkHashPassword($randomKey));
+        ConfigDB::setCacheConfigValue('tempmaster_pass', Crypt::encrypt(CryptSession::getSessionKey(), $securedKey, $randomKey));
+        ConfigDB::setCacheConfigValue('tempmaster_passkey', $securedKey);
+        ConfigDB::setCacheConfigValue('tempmaster_passhash', Hash::hashKey($randomKey));
         ConfigDB::setCacheConfigValue('tempmaster_passtime', time());
         ConfigDB::setCacheConfigValue('tempmaster_maxtime', time() + $maxTime);
         ConfigDB::setCacheConfigValue('tempmaster_attempts', 0);
@@ -97,7 +99,7 @@ public static function checkTempMasterPass($pass)
             || $attempts >= self::MAX_ATTEMPTS
         ) {
             ConfigDB::setCacheConfigValue('tempmaster_pass', '');
-            ConfigDB::setCacheConfigValue('tempmaster_passiv', '');
+            ConfigDB::setCacheConfigValue('tempmaster_passkey', '');
             ConfigDB::setCacheConfigValue('tempmaster_passhash', '');
             ConfigDB::setCacheConfigValue('tempmaster_maxtime', 0);
             ConfigDB::setCacheConfigValue('tempmaster_attempts', 0);
@@ -108,7 +110,7 @@ public static function checkTempMasterPass($pass)
             return false;
         }
 
-        $isValid = Crypt::checkHashPass($pass, ConfigDB::getValue('tempmaster_passhash'));
+        $isValid = Hash::checkHashKey($pass, ConfigDB::getValue('tempmaster_passhash'));
 
         if (!$isValid) {
             ConfigDB::setValue('tempmaster_attempts', $attempts + 1, false);
@@ -120,14 +122,16 @@ public static function checkTempMasterPass($pass)
     /**
      * Devuelve la clave maestra que ha sido encriptada con la clave temporal
      *
-     * @param $pass string con la clave utilizada para encriptar
+     * @param $randomKey string con la clave utilizada para encriptar
      * @return string con la clave maestra desencriptada
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      */
-    public static function getTempMasterPass($pass)
+    public static function getTempMasterPass($randomKey)
     {
-        $passLogin = hex2bin(ConfigDB::getValue('tempmaster_pass'));
-        $passLoginIV = hex2bin(ConfigDB::getValue('tempmaster_passiv'));
+        $securedKey = Crypt::unlockSecuredKey(ConfigDB::getValue('tempmaster_passkey'), $randomKey);
 
-        return Crypt::getDecrypt($passLogin, $passLoginIV, $pass);
+        return Crypt::decrypt(ConfigDB::getValue('tempmaster_pass'), $securedKey, $randomKey);
     }
 }
\ No newline at end of file

--- inc/SP/Core/Init.class.php ---
@@ -24,13 +24,14 @@
 
 namespace SP\Core;
 
+use Defuse\Crypto\Exception\CryptoException;
 use SP\Account\AccountAcl;
 use SP\Auth\Browser\Browser;
 use SP\Config\Config;
-use SP\Config\ConfigDB;
 use SP\Controller\MainController;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Plugin\PluginUtil;
+use SP\Core\Upgrade\Upgrade;
 use SP\Http\JsonResponse;
 use SP\Http\Request;
 use SP\Log\Email;
@@ -40,6 +41,7 @@
 use SP\Util\Checks;
 use SP\Util\Json;
 use SP\Util\Util;
+use SP\Core\Crypt\Session as CryptSession;
 
 defined('APP_ROOT') || die();
 
@@ -85,6 +87,8 @@ class Init
      *
      * @throws \SP\Core\Exceptions\SPException
      * @throws \phpmailer\phpmailerException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
      */
     public static function start()
     {
@@ -124,7 +128,7 @@ public static function start()
 
         // Comprobar si es necesario inicialización
         if (self::checkInitSourceInclude() ||
-            (defined('IS_INSTALLER') && Checks::isAjax())
+            ((defined('IS_INSTALLER') || defined('IS_UPGRADE')) && Checks::isAjax())
         ) {
             return;
         }
@@ -143,7 +147,7 @@ public static function start()
             Language::setLanguage(true);
             DiFactory::getTheme()->initTheme(true);
 
-            if (self::isLoggedIn()){
+            if (self::isLoggedIn()) {
                 // Recargar los permisos del perfil de usuario
                 Session::setUserProfile(Profile::getItem()->getById(Session::getUserData()->getUserProfileId()));
                 // Reset de los datos de ACL de cuentas
@@ -165,8 +169,8 @@ public static function start()
         // Comprobar si es cierre de sesión
         self::checkLogout();
 
-        // Comprobar la versión y actualizarla
-        self::checkDbVersion();
+        // Comprobar si es necesario actualizar componentes
+        self::checkUpgrade();
 
         // Inicializar la sesión
         self::initSession();
@@ -244,20 +248,29 @@ public static function setLogging()
         if (isset($_COOKIE['XDEBUG_SESSION']) && !defined('DEBUG')) {
             define('DEBUG', true);
         }
+
         if (defined('DEBUG') && DEBUG) {
             error_reporting(E_ALL);
             ini_set('display_errors', 'On');
         } else {
             error_reporting(E_ALL & ~(E_DEPRECATED | E_STRICT | E_NOTICE));
             ini_set('display_errors', 'Off');
         }
+
+        if (!file_exists(LOG_FILE) && touch(LOG_FILE) && chmod(LOG_FILE, 0600)) {
+            error_log('Setup log file: ' . LOG_FILE);
+        }
     }
 
     /**
      * Cargar las clases de las extensiones de sysPass
      */
     private static function loadExtensions()
     {
+        $CryptoLoader = new \SplClassLoader('Defuse\Crypto', EXTENSIONS_PATH);
+        $CryptoLoader->setPrepend(false);
+        $CryptoLoader->register();
+
         $PhpSecLoader = new \SplClassLoader('phpseclib', EXTENSIONS_PATH);
         $PhpSecLoader->setPrepend(false);
         $PhpSecLoader->register();
@@ -303,13 +316,12 @@ private static function startSession()
      * @param string $message con la descripción del error
      * @param string $hint    opcional, con una ayuda sobre el error
      * @param bool   $headers
-     * @throws \SP\Core\Exceptions\SPException
      */
     public static function initError($message, $hint = '', $headers = false)
     {
         debugLog(__FUNCTION__);
-        debugLog($message);
-        debugLog($hint);
+        debugLog(__($message));
+        debugLog(__($hint));
 
         if (Checks::isJson()) {
             $JsonResponse = new JsonResponse();
@@ -474,7 +486,7 @@ private static function checkConfig()
     private static function checkInitSourceInclude()
     {
         $srcScript = pathinfo($_SERVER['SCRIPT_NAME'], PATHINFO_BASENAME);
-        $skipInit = ['js.php', 'css.php', 'api.php', 'ajax_getEnvironment.php'];
+        $skipInit = ['js.php', 'css.php', 'api.php', 'ajax_getEnvironment.php', 'ajax_task.php'];
 
         return in_array($srcScript, $skipInit, true);
     }
@@ -491,6 +503,18 @@ private static function checkHttps()
         }
     }
 
+    /**
+     * Comprobar si el usuario está logado.
+     *
+     * @returns bool
+     */
+    public static function isLoggedIn()
+    {
+        return (DiFactory::getDBStorage()->getDbStatus() === 0
+            && Session::getUserData()->getUserLogin()
+            && is_object(Session::getUserPreferences()));
+    }
+
     /**
      * Comprueba que la aplicación esté instalada
      * Esta función comprueba si la aplicación está instalada. Si no lo está, redirige al instalador.
@@ -502,7 +526,9 @@ private static function checkInstalled()
         // Redirigir al instalador si no está instalada
         if (!Config::getConfig()->isInstalled()) {
             if (self::$SUBURI !== '/index.php') {
-                $url = 'http://' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . self::$WEBROOT . '/index.php';
+                $protocol = isset($_SERVER['HTTPS']) ? 'https://' : 'http://';
+
+                $url = $protocol . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . self::$WEBROOT . '/index.php';
                 header("Location: $url");
                 exit();
             } else {
@@ -529,7 +555,6 @@ private static function checkInstalled()
      *
      * @param bool $check sólo comprobar si está activado el modo
      * @return bool
-     * @throws \SP\Core\Exceptions\SPException
      */
     public static function checkMaintenanceMode($check = false)
     {
@@ -538,7 +563,7 @@ public static function checkMaintenanceMode($check = false)
 
             if ($check === true
                 || Checks::isAjax()
-                || Request::analyze('upgrade', 0) === 1
+                || (Request::analyze('a') === 'upgrade' && Request::analyze('type') !== '')
                 || Request::analyze('nodbupgrade', 0) === 1
                 || (self::$LOCK > 0 && self::isLoggedIn() && self::$LOCK === Session::getUserData()->getUserId())
             ) {
@@ -551,16 +576,6 @@ public static function checkMaintenanceMode($check = false)
         return false;
     }
 
-    /**
-     * Comprobar si el usuario está logado.
-     *
-     * @returns bool
-     */
-    public static function isLoggedIn()
-    {
-        return (DiFactory::getDBStorage()->getDbStatus() === 0 && Session::getUserData()->getUserLogin());
-    }
-
     /**
      * Comprobar si es necesario cerrar la sesión
      */
@@ -585,8 +600,8 @@ private static function logout()
      */
     private static function wrLogoutInfo()
     {
-        $inactiveTime = round((time() - Session::getLastActivity()) / 60, 2);
-        $totalTime = round((time() - Session::getStartActivity()) / 60, 2);
+        $inactiveTime = abs(round((time() - Session::getLastActivity()) / 60, 2));
+        $totalTime = abs(round((time() - Session::getStartActivity()) / 60, 2));
 
         $Log = new Log();
         $LogMessage = $Log->getLogMessage();
@@ -609,109 +624,58 @@ private static function goLogin()
     }
 
     /**
-     * Comrpueba y actualiza la versión de la aplicación.
-     *
-     * @throws \SP\Core\Exceptions\SPException
+     * Comprobar si es necesario actualizar componentes
      */
-    private static function checkDbVersion()
+    private static function checkUpgrade()
     {
-        if (self::$SUBURI !== '/index.php' || Request::analyze('logout', 0) === 1) {
-            return;
-        }
-
-        $update = false;
-        $databaseVersion = (int)str_replace('.', '', ConfigDB::getValue('version'));
-        $appVersion = (int)implode(Util::getVersion(true));
-
-        if ($databaseVersion < $appVersion
-            && Request::analyze('nodbupgrade', 0) === 0
-            && Upgrade::needDBUpgrade($databaseVersion)
-        ) {
-            if (!self::checkMaintenanceMode(true)) {
-                $upgradeKey = Config::getConfig()->getUpgradeKey();
-
-                if (empty($upgradeKey)) {
-                    Config::getConfig()->setUpgradeKey(sha1(uniqid(mt_rand(), true)));
-                    Config::getConfig()->setMaintenance(true);
-                    Config::saveConfig(null, false);
-                }
-
-                self::initError(__('La aplicación necesita actualizarse'), sprintf(__('Si es un administrador pulse en el enlace: %s'), '<a href="index.php?upgrade=1&a=upgrade">' . __('Actualizar') . '</a>'));
-            } else {
-                $action = Request::analyze('a');
-                $hash = Request::analyze('h');
-                $confirm = Request::analyze('chkConfirm', false, false, true);
-
-                if ($confirm === true
-                    && $action === 'upgrade'
-                    && $hash === Config::getConfig()->getUpgradeKey()
-                ) {
-                    try {
-                        $update = Upgrade::doUpgrade($databaseVersion);
-
-                        ConfigDB::setValue('version', $appVersion);
-                        Config::getConfig()->setMaintenance(false);
-                        Config::getConfig()->setUpgradeKey('');
-                        Config::saveConfig();
-                    } catch (SPException $e) {
-                        $hint = $e->getHint() . '<p class="center"><a href="index.php?nodbupgrade=1">' . __('Acceder') . '</a></p>';
-                        self::initError($e->getMessage(), $hint);
-                    }
-                } else {
-                    $controller = new MainController();
-                    $controller->getUpgrade();
-                }
-            }
-        }
-
-        if ($update === true) {
-            $Log = new Log();
-            $LogMessage = $Log->getLogMessage();
-            $LogMessage->setAction(__('Actualización', false));
-            $LogMessage->addDescription(__('Actualización de versión realizada.', false));
-            $LogMessage->addDetails(__('Versión', false), $appVersion);
-            $LogMessage->addDetails(__('Tipo', false), 'db');
-            $Log->writeLog();
-
-            Email::sendEmail($LogMessage);
-
-            self::$UPDATED = true;
-        }
+        return self::$SUBURI === '/index.php' && (Upgrade::checkDbVersion() || Upgrade::checkAppVersion());
     }
 
     /**
-     * Inicialiar la sesión de usuario
+     * Inicializar la sesión de usuario
+     *
      */
     private static function initSession()
     {
-        $sessionLifeTime = self::getSessionLifeTime();
+        $lastActivity = Session::getLastActivity();
+        $inMaintenance = Config::getConfig()->isMaintenance();
 
         // Timeout de sesión
-        if (Session::getLastActivity() && (time() - Session::getLastActivity() > $sessionLifeTime)) {
+        if ($lastActivity > 0
+            && !$inMaintenance
+            && (time() - $lastActivity) > self::getSessionLifeTime()
+        ) {
             if (isset($_COOKIE[session_name()])) {
                 setcookie(session_name(), '', time() - 42000, '/');
             }
 
             self::wrLogoutInfo();
 
-            session_unset();
-            session_destroy();
-            session_start();
+            SessionUtil::restart();
             return;
         }
 
+        $sidStartTime = Session::getSidStartTime();
+
         // Regenerar el Id de sesión periódicamente para evitar fijación
-        if (Session::getSidStartTime() === 0) {
+        if ($sidStartTime === 0) {
             Session::setSidStartTime(time());
             Session::setStartActivity(time());
-        } else if (Session::getUserData()->getUserId() > 0 && time() - Session::getSidStartTime() > $sessionLifeTime / 2) {
-            $sessionMPass = SessionUtil::getSessionMPass();
-            session_regenerate_id(true);
-            Session::setSidStartTime(time());
-            // Recargar los permisos del perfil de usuario
-            Session::setUserProfile(Profile::getItem()->getById(Session::getUserData()->getUserProfileId()));
-            // Regenerar la clave maestra
-            SessionUtil::saveSessionMPass($sessionMPass);
+        } else if (!$inMaintenance
+            && time() - $sidStartTime > 120
+            && Session::getUserData()->getUserId() > 0
+        ) {
+            try {
+                CryptSession::reKey();
+
+                // Recargar los permisos del perfil de usuario
+                Session::setUserProfile(Profile::getItem()->getById(Session::getUserData()->getUserProfileId()));
+            } catch (CryptoException $e) {
+                debugLog($e->getMessage());
+
+                SessionUtil::restart();
+                return;
+            }
         }
 
         Session::setLastActivity(time());
@@ -724,11 +688,16 @@ private static function initSession()
      */
     private static function getSessionLifeTime()
     {
-        if (null === Session::getSessionTimeout()) {
-            Session::setSessionTimeout(Config::getConfig()->getSessionTimeout());
+        $timeout = Session::getSessionTimeout();
+
+        if (null === $timeout) {
+            $configTimeout = Config::getConfig()->getSessionTimeout();
+            Session::setSessionTimeout($configTimeout);
+
+            return $configTimeout;
         }
 
-        return Session::getSessionTimeout();
+        return $timeout;
     }
 
     /**
@@ -795,7 +764,7 @@ public static function checkPostLoginActions()
         $Controller = new MainController();
         $Controller->doAction('postlogin.' . $action);
 
-        return true;
+        return false;
     }
 
     /**

--- inc/SP/Core/Installer.class.php ---
@@ -30,12 +30,13 @@
 use SP\Config\Config;
 use SP\Config\ConfigData;
 use SP\Config\ConfigDB;
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\InvalidArgumentException;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\GroupData;
 use SP\DataModel\InstallData;
 use SP\DataModel\ProfileData;
-use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 use SP\Mgmt\Groups\Group;
 use SP\Mgmt\Profiles\Profile;
 use SP\Mgmt\Users\User;
@@ -226,7 +227,10 @@ private function setupMySQLDatabase()
                 $sth->execute([$this->InstallData->getDbUser(), $this->InstallData->getDbAuthHost()]);
 
                 // Si no existe el usuario, se intenta crear
-                if ((int)$sth->fetchColumn() === 0) {
+                if ((int)$sth->fetchColumn() === 0
+                    // Se comprueba si el nuevo usuario es distinto del creado en otra instalación
+                    && $this->InstallData->getDbUser() != $this->Config->getDbUser()
+                ) {
                     $this->createDBUser();
                 }
             } catch (PDOException $e) {
@@ -362,13 +366,15 @@ private function rollback()
             $this->DB->exec('DROP USER `' . $this->InstallData->getDbUser() . '`@`' . $this->InstallData->getDbAuthHost() . '`');
             $this->DB->exec('DROP USER `' . $this->InstallData->getDbUser() . '`@`' . $this->InstallData->getDbAuthHostDns() . '`');
             $this->DB->exec('DROP USER `' . $this->InstallData->getDbUser() . '`@`%`');
+
+            debugLog('Rollback');
+
+            return true;
         } catch (PDOException $e) {
             debugLog($e->getMessage());
 
             return false;
         }
-
-        return true;
     }
 
     /**
@@ -387,8 +393,8 @@ private function createDBStructure()
                 __('No es posible crear la BBDD de la aplicación. Descárguela de nuevo.', false));
         }
 
-        // Usar la base de datos de sysPass
         try {
+            // Usar la base de datos de sysPass
             $this->DB->exec('USE `' . $this->InstallData->getDbName() . '`');
         } catch (PDOException $e) {
             throw new SPException(SPException::SP_CRITICAL,
@@ -443,59 +449,44 @@ protected function checkConnection()
      */
     private function createAdminAccount()
     {
-        $GroupData = new GroupData();
-        $GroupData->setUsergroupName('Admins');
-        $GroupData->setUsergroupDescription('sysPass Admins');
-
         try {
+            $GroupData = new GroupData();
+            $GroupData->setUsergroupName('Admins');
+            $GroupData->setUsergroupDescription('sysPass Admins');
+
             Group::getItem($GroupData)->add();
-        } catch (SPException $e) {
-            $this->rollback();
-            throw new SPException(SPException::SP_CRITICAL,
-                __('Error al crear el grupo "admin"', false),
-                __('Informe al desarrollador', false));
-        }
 
-        $ProfileData = new ProfileData();
-        $ProfileData->setUserprofileName('Admin');
+            $ProfileData = new ProfileData();
+            $ProfileData->setUserprofileName('Admin');
 
-        try {
             Profile::getItem($ProfileData)->add();
-        } catch (SPException $e) {
-            $this->rollback();
-            throw new SPException(SPException::SP_CRITICAL,
-                __('Error al crear el perfil "admin"', false),
-                __('Informe al desarrollador', false));
-        }
 
-        // Datos del usuario
-        $UserData = new UserData();
-        $UserData->setUserGroupId($GroupData->getUsergroupId());
-        $UserData->setUserProfileId($ProfileData->getUserprofileId());
-        $UserData->setUserLogin($this->InstallData->getAdminLogin());
-        $UserData->setUserPass($this->InstallData->getAdminPass());
-        $UserData->setUserName('Admin');
-        $UserData->setUserIsAdminApp(1);
+            // Datos del usuario
+            $UserData = new UserLoginData();
+            $UserData->setUserGroupId($GroupData->getUsergroupId());
+            $UserData->setUserProfileId($ProfileData->getUserprofileId());
+            $UserData->setUserLogin($this->InstallData->getAdminLogin());
+            $UserData->setLogin($this->InstallData->getAdminLogin());
+            $UserData->setUserPass($this->InstallData->getAdminPass());
+            $UserData->setLoginPass($this->InstallData->getAdminPass());
+            $UserData->setUserName('Admin');
+            $UserData->setUserIsAdminApp(1);
 
-        try {
             User::getItem($UserData)->add();
-        } catch (SPException $e) {
-            $this->rollback();
-            throw new SPException(SPException::SP_CRITICAL,
-                __('Error al crear el usuario "admin"', false),
-                __('Informe al desarrollador', false));
-        }
 
-        // Guardar el hash de la clave maestra
-        ConfigDB::setCacheConfigValue('masterPwd', Crypt::mkHashPassword($this->InstallData->getMasterPassword()));
-        ConfigDB::setCacheConfigValue('lastupdatempass', time());
-        ConfigDB::writeConfig(true);
+            // Guardar el hash de la clave maestra
+            ConfigDB::setCacheConfigValue('masterPwd', Hash::hashKey($this->InstallData->getMasterPassword()));
+            ConfigDB::setCacheConfigValue('lastupdatempass', time());
+            ConfigDB::writeConfig(true);
 
-        if (!UserPass::getItem($UserData)->updateUserMPass($this->InstallData->getMasterPassword())) {
+            if (!UserPass::updateUserMPass($this->InstallData->getMasterPassword(), $UserData)) {
+                throw new SPException(SPException::SP_CRITICAL,
+                    __('Error al actualizar la clave maestra del usuario "admin"', false));
+            }
+        } catch (\Exception $e) {
             $this->rollback();
-
             throw new SPException(SPException::SP_CRITICAL,
-                __('Error al actualizar la clave maestra del usuario "admin"', false),
+                $e->getMessage(),
                 __('Informe al desarrollador', false));
         }
     }

--- inc/SP/Core/Messages/LogMessage.class.php ---
@@ -41,6 +41,14 @@ class LogMessage extends MessageBase
      * @var array Detalles de la acción en formato "detalle : descripción"
      */
     protected $details = [];
+    /**
+     * @var int
+     */
+    protected $descriptionCounter = 0;
+    /**
+     * @var int
+     */
+    protected $detailsCounter = 0;
 
     /**
      * Devuelve la acción realizada
@@ -140,6 +148,8 @@ public function addDetails($key, $value)
 
         $this->details[] = [$this->formatString($key), $this->formatString($value)];
 
+        $this->detailsCounter++;
+
         return $this;
     }
 
@@ -175,6 +185,7 @@ public function addDescription($description = '')
     public function addDescriptionLine()
     {
         $this->description[] = '';
+        $this->descriptionCounter++;
 
         return $this;
     }
@@ -222,7 +233,7 @@ public function getDetails($translate = false)
      * Devolver un detalle formateado
      *
      * @param array $detail
-     * @param bool $translate
+     * @param bool  $translate
      * @return string
      */
     protected function formatDetail(array $detail, $translate = false)
@@ -257,6 +268,18 @@ public function composeHtml()
     public function resetDescription()
     {
         $this->description = [];
+        $this->descriptionCounter = 0;
+
+        return $this;
+    }
+
+    /**
+     * Restablecer la variable de detalles
+     */
+    public function resetDetails()
+    {
+        $this->details = [];
+        $this->detailsCounter = 0;
 
         return $this;
     }
@@ -271,4 +294,20 @@ public function getHtmlDetails($translate = false)
     {
         return nl2br($this->getDetails($translate));
     }
+
+    /**
+     * @return int
+     */
+    public function getDescriptionCounter()
+    {
+        return $this->descriptionCounter;
+    }
+
+    /**
+     * @return int
+     */
+    public function getDetailsCounter()
+    {
+        return $this->detailsCounter;
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Messages/TaskMessage.class.php ---
@@ -0,0 +1,211 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core\Messages;
+
+use JsonSerializable;
+
+/**
+ * Class TaskMessage
+ *
+ * @package SP\Core\Messages
+ */
+class TaskMessage implements MessageInterface, JsonSerializable
+{
+    /**
+     * @var string
+     */
+    protected $taskId;
+    /**
+     * @var string
+     */
+    protected $task;
+    /**
+     * @var string
+     */
+    protected $message;
+    /**
+     * @var int
+     */
+    protected $time = 0;
+    /**
+     * @var int
+     */
+    protected $progress = 0;
+    /**
+     * @var int
+     */
+    protected $end = 0;
+
+    /**
+     * @return string
+     */
+    public function getTask()
+    {
+        return $this->task;
+    }
+
+    /**
+     * @param string $task
+     */
+    public function setTask($task)
+    {
+        $this->task = $task;
+    }
+
+    /**
+     * @return string
+     */
+    public function getMessage()
+    {
+        return $this->message;
+    }
+
+    /**
+     * @param string $message
+     */
+    public function setMessage($message)
+    {
+        $this->message = $message;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTime()
+    {
+        return $this->time;
+    }
+
+    /**
+     * @param int $time
+     */
+    public function setTime($time)
+    {
+        $this->time = $time;
+    }
+
+    /**
+     * @return int
+     */
+    public function getProgress()
+    {
+        return $this->progress;
+    }
+
+    /**
+     * @param int $progress
+     */
+    public function setProgress($progress)
+    {
+        $this->progress = $progress;
+    }
+
+    /**
+     * @return int
+     */
+    public function getEnd()
+    {
+        return $this->end;
+    }
+
+    /**
+     * @param int $end
+     */
+    public function setEnd($end)
+    {
+        $this->end = $end;
+    }
+
+    /**
+     * Componer un mensaje en formato texto
+     *
+     * @return string
+     */
+    public function composeText()
+    {
+        return implode(PHP_EOL, [
+            'taskId' => $this->taskId,
+            'task' => $this->task,
+            'message' => $this->message,
+            'time' => $this->time,
+            'progress' => $this->progress,
+            'end' => $this->end
+        ]);
+    }
+
+    /**
+     * Componer un mensaje en formato HTML
+     *
+     * @return mixed
+     */
+    public function composeHtml()
+    {
+        return [
+            'taskId' => $this->taskId,
+            'task' => $this->task,
+            'message' => $this->message,
+            'time' => $this->time,
+            'progress' => $this->progress,
+            'end' => $this->end
+        ];
+    }
+
+    /**
+     * Componer un mensaje en formato JSON
+     */
+    public function composeJson()
+    {
+        return json_encode($this);
+    }
+
+    /**
+     * Specify data which should be serialized to JSON
+     *
+     * @link  http://php.net/manual/en/jsonserializable.jsonserialize.php
+     * @return mixed data which can be serialized by <b>json_encode</b>,
+     *        which is a value of any type other than a resource.
+     * @since 5.4.0
+     */
+    public function jsonSerialize()
+    {
+        return get_object_vars($this);
+    }
+
+    /**
+     * @return string
+     */
+    public function getTaskId()
+    {
+        return $this->taskId;
+    }
+
+    /**
+     * @param string $taskId
+     */
+    public function setTaskId($taskId)
+    {
+        $this->taskId = $taskId;
+    }
+}
\ No newline at end of file

--- inc/SP/Core/OldCrypt.class.php ---
@@ -36,53 +36,10 @@
 /**
  * Esta clase es la encargada de realizar el encriptado/desencriptado de claves
  */
-class Crypt
+class OldCrypt
 {
     public static $strInitialVector;
 
-    /**
-     * Comprobar el hash de una clave.
-     *
-     * @param string $pwd         con la clave a comprobar
-     * @param string $checkedHash con el hash a comprobar
-     * @param bool   $isMPass     si es la clave maestra
-     * @return bool
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public static function checkHashPass($pwd, $checkedHash, $isMPass = false)
-    {
-        if ($isMPass) {
-            // Comprobar si el hash está en formato anterior a 12002
-            if (strlen($checkedHash) === 128) {
-                $check = (hash('sha256', substr($checkedHash, 0, 64) . $pwd) === substr($checkedHash, 64, 64));
-
-                if ($check) {
-                    $newHash = self::mkHashPassword($pwd);
-
-                    AccountHistory::updateAccountsMPassHash($newHash);
-
-                    ConfigDB::setValue('masterPwd', $newHash);
-                    Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acción.', false), Log::NOTICE);
-                }
-
-                return $check;
-
-            // Hash de clave maestra anterior a 2.0.0.17013101
-            } elseif (hash_equals(crypt($pwd, substr($checkedHash, 0, 72)), substr($checkedHash, 72))) {
-                ConfigDB::setValue('masterPwd', Crypt::mkHashPassword($pwd));
-
-                Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acción.', false), Log::NOTICE);
-                return true;
-            }
-        }
-
-        // Timing attacks...
-//        usleep(mt_rand(100000, 300000));
-
-        // Obtener el hash de la clave y la clave para generar una clave y comparar
-        return hash_equals(crypt($pwd, substr($checkedHash, 0, 30)), substr($checkedHash, 30));
-    }
-
     /**
      * Generar un hash de una clave utilizando un salt.
      *
@@ -206,16 +163,17 @@ public static function encryptData($data, $pwd = null)
         }
 
         // Comprobar el módulo de encriptación
-        if (!Crypt::checkCryptModule()) {
+        if (!OldCrypt::checkCryptModule()) {
             throw new SPException(
                 SPException::SP_CRITICAL,
                 __('Error interno', false),
                 __('No se puede usar el módulo de encriptación', false)
             );
         }
 
+        // FIXME
         // Encriptar datos
-        $encData['data'] = Crypt::mkEncrypt($data, $pwd);
+        $encData['data'] = OldCrypt::mkEncrypt($data, $pwd);
 
         if (!empty($data) && ($encData['data'] === false || null === $encData['data'])) {
             throw new SPException(
@@ -225,7 +183,7 @@ public static function encryptData($data, $pwd = null)
             );
         }
 
-        $encData['iv'] = Crypt::$strInitialVector;
+        $encData['iv'] = OldCrypt::$strInitialVector;
 
         return $encData;
     }

--- inc/SP/Core/Session.class.php ---
@@ -27,6 +27,7 @@
 use SP\Account\AccountAcl;
 use SP\Account\AccountSearch;
 use SP\Config\ConfigData;
+use SP\Core\Crypt\Vault;
 use SP\DataModel\ProfileData;
 use SP\DataModel\UserData;
 use SP\DataModel\UserPreferencesData;
@@ -50,7 +51,7 @@ class Session
      *
      * @param UserData $UserData
      */
-    public static function setUserData($UserData = null)
+    public static function setUserData(UserData $UserData = null)
     {
         self::setSessionKey('userData', $UserData);
     }
@@ -237,66 +238,6 @@ public static function setSecurityKey($sk)
         self::setSessionKey('sk', $sk);
     }
 
-    /**
-     * Devuelve la clave maestra encriptada
-     *
-     * @return string
-     */
-    public static function getMPass()
-    {
-        return self::getSessionKey('mPass');
-    }
-
-    /**
-     * Establecer la clave maestra encriptada
-     *
-     * @param $mpass string La clave maestra
-     */
-    public static function setMPass($mpass)
-    {
-        self::setSessionKey('mPass', $mpass);
-    }
-
-    /**
-     * Devuelve la clave usada para encriptar la clave maestra
-     *
-     * @return string
-     */
-    public static function getMPassPwd()
-    {
-        return self::getSessionKey('mPassPwd');
-    }
-
-    /**
-     * Establece la clave usada para encriptar la clave maestra
-     *
-     * @param $mPassPwd string La clave usada
-     */
-    public static function setMPassPwd($mPassPwd)
-    {
-        self::setSessionKey('mPassPwd', $mPassPwd);
-    }
-
-    /**
-     * Devuelve el vector de inicialización de la clave maestra
-     *
-     * @return string
-     */
-    public static function getMPassIV()
-    {
-        return self::getSessionKey('mPassIV');
-    }
-
-    /**
-     * Establece el vector de inicialización de la clave maestra
-     *
-     * @param $mPassIV string El vector de inicialización
-     */
-    public static function setMPassIV($mPassIV)
-    {
-        self::setSessionKey('mPassIV', $mPassIV);
-    }
-
     /**
      * Devuelve la hora en la que el SID de sesión fue creado
      *
@@ -684,4 +625,64 @@ public static function getAccountAcl($accountId)
 
         return null;
     }
+
+    /**
+     * Establece si se ha actulizado la aplicación
+     *
+     * @param bool $bool
+     */
+    public static function setAppUpdated($bool = true)
+    {
+        self::setSessionKey('appupdated', $bool);
+    }
+
+    /**
+     * Devuelve si se ha actulizado la aplicación
+     *
+     * @return bool
+     */
+    public static function getAppUpdated()
+    {
+        return self::getSessionKey('appupdated', false);
+    }
+
+    /**
+     * Devuelve la clave maestra encriptada
+     *
+     * @return Vault
+     */
+    public static function getVault()
+    {
+        return self::getSessionKey('vault');
+    }
+
+    /**
+     * Establecer la clave maestra encriptada
+     *
+     * @param Vault $vault
+     */
+    public static function setVault(Vault $vault)
+    {
+        self::setSessionKey('vault', $vault);
+    }
+
+    /**
+     * Devuelve la tarea activa
+     *
+     * @return Task
+     */
+    public static function getTask()
+    {
+        return self::getSessionKey('task');
+    }
+
+    /**
+     * Establecer la tarea activa
+     *
+     * @param Task $task
+     */
+    public static function setTask(Task $task = null)
+    {
+        self::setSessionKey('task', $task);
+    }
 }
\ No newline at end of file

--- inc/SP/Core/SessionUtil.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -27,6 +27,7 @@
 use SP\Config\Config;
 use SP\DataModel\UserData;
 use SP\Mgmt\Profiles\Profile;
+use SP\Core\Crypt\Session as CryptSession;
 
 defined('APP_ROOT') || die();
 
@@ -60,27 +61,16 @@ public static function loadPublicKey()
         Session::setPublicKey($CryptPKI->getPublicKey());
     }
 
-    /**
-     * Guardar la clave maestra encriptada en la sesión
-     *
-     * @param $masterPass
-     */
-    public static function saveSessionMPass($masterPass)
-    {
-        $sessionMasterPass = Crypt::mkCustomMPassEncrypt(Crypt::generateAesKey(session_id()), $masterPass);
-
-        Session::setMPass($sessionMasterPass[0]);
-        Session::setMPassIV($sessionMasterPass[1]);
-    }
-
     /**
      * Desencriptar la clave maestra de la sesión.
      *
      * @return string con la clave maestra
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      */
     public static function getSessionMPass()
     {
-        return Crypt::getDecrypt(Session::getMPass(), Session::getMPassIV(), Crypt::generateAesKey(session_id()));
+        return CryptSession::getSessionKey();
     }
 
     /**
@@ -120,7 +110,7 @@ public static function checkSessionKey($key)
      */
     public static function cleanSession()
     {
-        foreach ($_SESSION as $key => $value){
+        foreach ($_SESSION as $key => $value) {
             unset($_SESSION[$key]);
         }
 
@@ -151,4 +141,23 @@ public static function cleanSession()
 //        Session::unsetSessionKey('config');
 //        Session::unsetSessionKey('configTime');
     }
+
+    /**
+     * Regenerad el ID de sesión
+     */
+    public static function regenerate()
+    {
+        session_regenerate_id(true);
+        Session::setSidStartTime(time());
+    }
+
+    /**
+     * Destruir la sesión y reiniciar
+     */
+    public static function restart()
+    {
+        session_unset();
+        session_destroy();
+        session_start();
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Task.class.php ---
@@ -0,0 +1,292 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core;
+
+use SP\Core\Messages\TaskMessage;
+use SP\Util\Util;
+
+/**
+ * Class Task
+ *
+ * @package SP\Core
+ */
+class Task
+{
+    /**
+     * @var string Nombre de la tarea
+     */
+    protected $name;
+    /**
+     * @var string ID de la tarea
+     */
+    protected $taskId;
+    /**
+     * @var string Ruta y archivo salida de la tarea
+     */
+    protected $fileOut;
+    /**
+     * @var string Ruta y archivo de la tarea
+     */
+    protected $fileTask;
+    /**
+     * @var resource Manejador del archivo
+     */
+    protected $fileHandler;
+    /**
+     * @var int Intérvalo en segundos
+     */
+    protected $interval = 5;
+    /**
+     * @var bool Si se ha inicializado para escribir en el archivo
+     */
+    protected $initialized = false;
+
+    /**
+     * Task constructor.
+     *
+     * @param string $name Nombre de la tarea
+     * @param string $id
+     */
+    public function __construct($name, $id)
+    {
+        $this->name = $name;
+        $this->taskId = $id;
+        $this->initialized = $this->checkFile();
+    }
+
+    /**
+     * Comprobar si se puede escribir en el archivo
+     *
+     * @return bool
+     */
+    protected function checkFile()
+    {
+        $tempDir = Util::getTempDir();
+
+        if ($tempDir !== false) {
+            $this->fileOut = $tempDir . DIRECTORY_SEPARATOR . $this->taskId . '.out';
+            $this->fileTask = $tempDir . DIRECTORY_SEPARATOR . $this->taskId . '.task';
+
+            $this->deleteTaskFiles();
+
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Eliminar los archivos de la tarea no usados
+     */
+    protected function deleteTaskFiles()
+    {
+        $filesOut = dirname($this->fileOut) . DIRECTORY_SEPARATOR . $this->taskId . '*.out';
+        $filesTask = dirname($this->fileOut) . DIRECTORY_SEPARATOR . $this->taskId . '*.task';
+
+        array_map('unlink', glob($filesOut));
+        array_map('unlink', glob($filesTask));
+    }
+
+    /**
+     * Generar un ID de tarea
+     *
+     * @param $name
+     * @return string
+     */
+    public static function genTaskId($name)
+    {
+        return uniqid($name, true);
+    }
+
+    /**
+     * Iniciar la tarea
+     *
+     * @return bool
+     */
+    public function start()
+    {
+        return $this->openFile();
+    }
+
+    /**
+     * Abrir el archivo para escritura
+     *
+     * @return  bool
+     */
+    protected function openFile()
+    {
+        if ($this->initialized === false
+            || !$this->fileHandler = fopen($this->fileOut, 'wb')
+        ) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Escribir el tado de la tarea a un archivo
+     *
+     * @param TaskMessage $Message
+     * @return bool
+     */
+    public function writeStatus(TaskMessage $Message)
+    {
+        if ($this->initialized === false
+            || !is_resource($this->fileHandler)
+        ) {
+            return false;
+        }
+
+        fwrite($this->fileHandler, $Message->composeText());
+
+        return true;
+    }
+
+    /**
+     * Escribir el tado de la tarea a un archivo
+     *
+     * @param TaskMessage $Message
+     * @return bool
+     */
+    public function writeStatusAndFlush(TaskMessage $Message)
+    {
+        return $this->initialized === true
+            && !is_resource($this->fileHandler)
+            && file_put_contents($this->fileOut, $Message->composeText()) !== false;
+    }
+
+    /**
+     * Escribir un mensaje en el archivo de la tarea en formato JSON
+     *
+     * @param TaskMessage $Message
+     * @return bool
+     */
+    public function writeJsonStatusAndFlush(TaskMessage $Message)
+    {
+        return $this->initialized === true
+            && !is_resource($this->fileHandler)
+            && file_put_contents($this->fileOut, $Message->composeJson()) !== false;
+    }
+
+    /**
+     * Iniciar la tarea
+     *
+     * @param bool $startSession
+     * @return bool
+     */
+    public function end($startSession = true)
+    {
+        if ($startSession) {
+            session_start();
+        }
+
+        $this->deregister();
+
+        return $this->closeFile() && @unlink($this->fileOut);
+    }
+
+    /**
+     * Desregistrar la tarea en la sesión
+     */
+    public function deregister()
+    {
+        debugLog('Deregister Task: ' . $this->name);
+
+        unlink($this->fileTask);
+    }
+
+    /**
+     * Abrir el archivo para escritura
+     *
+     * @return  bool
+     */
+    protected function closeFile()
+    {
+        if ($this->initialized === true && is_resource($this->fileHandler)) {
+            return fclose($this->fileHandler);
+        }
+
+        return $this->initialized;
+    }
+
+    /**
+     * @return int
+     */
+    public function getInterval()
+    {
+        return $this->interval;
+    }
+
+    /**
+     * @param int $interval
+     */
+    public function setInterval($interval)
+    {
+        $this->interval = $interval;
+    }
+
+    /**
+     * @return string
+     */
+    public function getTaskId()
+    {
+        return $this->taskId;
+    }
+
+    /**
+     * @return string
+     */
+    public function getFileOut()
+    {
+        return $this->fileOut;
+    }
+
+    /**
+     * Registrar la tarea en la sesión.
+     *
+     * Es necesario bloquear la sesión para permitir la ejecución de otros scripts
+     *
+     * @param bool $lockSession Bloquear la sesión
+     */
+    public function register($lockSession = true)
+    {
+        debugLog('Register Task: ' . $this->name);
+
+        file_put_contents($this->fileTask, serialize($this));
+
+        if ($lockSession === true) {
+            session_write_close();
+        }
+    }
+
+    /**
+     * @return string
+     */
+    public function getFileTask()
+    {
+        return $this->fileTask;
+    }
+}
\ No newline at end of file

--- inc/SP/Core/TaskFactory.class.php ---
@@ -0,0 +1,82 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core;
+
+use SP\Core\Messages\TaskMessage;
+
+/**
+ * Class TaskFactory
+ *
+ * @package SP\Core
+ */
+class TaskFactory
+{
+    /**
+     * @var TaskMessage
+     */
+    public static $Message;
+    /**
+     * @var Task
+     */
+    private static $Task;
+
+    /**
+     * Crear una tarea para la actualización de estado de la actualización
+     *
+     * @param $name
+     * @param $id
+     */
+    public static function createTask($name, $id)
+    {
+        if (self::$Task === null) {
+            self::$Task = new Task($name, $id);
+            self::$Task->register();
+        }
+
+        self::$Message = new TaskMessage();
+        self::$Message->setTaskId($id);
+    }
+
+    /**
+     * Finalizar la tarea
+     */
+    public static function endTask()
+    {
+        if (self::$Task !== null) {
+            self::$Task->end();
+            self::$Task = null;
+        }
+    }
+
+    /**
+     * Enviar un mensaje de actualización a la tarea
+     */
+    public static function sendTaskMessage()
+    {
+        if (self::$Task !== null) {
+            self::$Task->writeJsonStatusAndFlush(self::$Message);
+        }
+    }
+}
\ No newline at end of file

--- inc/SP/Core/Template.class.php ---
@@ -62,7 +62,6 @@ class Template
     /**
      * @param null  $file Archivo de plantilla a añadir
      * @param array $vars Variables a inicializar
-     * @throws \SP\Core\Exceptions\FileNotFoundException
      */
     public function __construct($file = null, array $vars = array())
     {

--- inc/SP/Core/Upgrade/Account.class.php ---
@@ -25,6 +25,7 @@
 namespace SP\Core\Upgrade;
 
 use SP\Core\Exceptions\SPException;
+use SP\Core\TaskFactory;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
 
@@ -42,6 +43,10 @@ class Account
      */
     public static function fixAccountsId()
     {
+        TaskFactory::$Message->setTask(__FUNCTION__);
+        TaskFactory::$Message->setMessage(__('Actualizando IDs de cuentas'));
+        TaskFactory::sendTaskMessage();
+
         try {
             DB::beginTransaction();
 

--- inc/SP/Core/Upgrade/Category.class.php ---
@@ -25,6 +25,7 @@
 namespace SP\Core\Upgrade;
 
 use SP\Core\Exceptions\SPException;
+use SP\Core\TaskFactory;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
 
@@ -43,29 +44,28 @@ class Category
      */
     public static function fixCategoriesId($categoryId)
     {
-        $Data = new QueryData();
-        $Data->setQuery('SELECT category_id FROM categories ORDER BY category_id');
-
-        $categories = DB::getResultsArray($Data);
-
-        $paramsIn = trim(str_repeat(',?', count($categories)), ',');
-        $Data->addParam($categoryId);
-
-        foreach ($categories as $category) {
-            $Data->addParam($category->category_id);
-        }
+        TaskFactory::$Message->setTask(__FUNCTION__);
+        TaskFactory::$Message->setMessage(__('Actualizando IDs de categorías'));
+        TaskFactory::sendTaskMessage();
 
         try {
             DB::beginTransaction();
 
+            if ($categoryId === 0) {
+                $categoryId = self::createOrphanCategory();
+            }
+
+            $Data = new QueryData();
+            $Data->addParam($categoryId);
+
             $query = /** @lang SQL */
-                'UPDATE accHistory SET acchistory_categoryId = ? WHERE acchistory_categoryId NOT IN (' . $paramsIn . ') OR acchistory_categoryId IS NULL';
+                'UPDATE accHistory SET acchistory_categoryId = ? WHERE acchistory_categoryId NOT IN (SELECT category_id FROM categories ORDER BY category_id) OR acchistory_categoryId IS NULL';
             $Data->setQuery($query);
 
             DB::getQuery($Data);
 
             $query = /** @lang SQL */
-                'UPDATE accounts SET account_categoryId = ? WHERE account_categoryId NOT IN (' . $paramsIn . ') OR account_categoryId IS NULL';
+                'UPDATE accounts SET account_categoryId = ? WHERE account_categoryId NOT IN (SELECT category_id FROM categories ORDER BY category_id) OR account_categoryId IS NULL';
             $Data->setQuery($query);
 
             DB::getQuery($Data);
@@ -79,4 +79,25 @@ public static function fixCategoriesId($categoryId)
             return false;
         }
     }
+
+    /**
+     * Crear una categoría para elementos huérfanos
+     *
+     * @return int
+     */
+    public static function createOrphanCategory()
+    {
+        $query = /** @lang SQL */
+            'INSERT INTO categories SET
+            category_name = \'Orphan category\',
+            category_description = \'Created by the upgrade process\'';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->setOnErrorMessage(__('Error al crear la categoría', false));
+
+        DB::getQuery($Data);
+
+        return DB::getLastId();
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Upgrade/Crypt.class.php ---
@@ -0,0 +1,151 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Core\Upgrade;
+
+use SP\Account\AccountCrypt;
+use SP\Account\AccountHistory;
+use SP\Account\AccountHistoryCrypt;
+use SP\Config\ConfigDB;
+use SP\Core\Crypt\Hash;
+use SP\Core\Exceptions\SPException;
+use SP\Core\Init;
+use SP\Log\Log;
+use SP\Mgmt\CustomFields\CustomFieldsUtil;
+use SP\Mgmt\Users\UserMigrate;
+use SP\Storage\DB;
+
+/**
+ * Class Crypt
+ *
+ * @package SP\Core\Upgrade
+ */
+class Crypt
+{
+    /**
+     * Migrar elementos encriptados
+     *
+     * @param $masterPass
+     * @return bool
+     * @throws \Exception
+     */
+    public static function migrate(&$masterPass)
+    {
+        global $timeStart;
+
+        try {
+            AccountHistoryCrypt::$currentMPassHash = ConfigDB::getValue('masterPwd');
+
+            if (!DB::beginTransaction()) {
+                throw new SPException(SPException::SP_ERROR, __('No es posible iniciar una transacción', false));
+            } elseif (!self::migrateHash($masterPass)) {
+                throw new SPException(SPException::SP_INFO, __('Clave maestra incorrecta', false));
+            }
+
+            self::migrateAccounts($masterPass);
+            self::migrateCustomFields($masterPass);
+            UserMigrate::setMigrateUsers();
+
+            if (!DB::endTransaction()) {
+                throw new SPException(SPException::SP_ERROR, __('No es posible finalizar una transacción', false));
+            }
+
+            debugLog('Total time: ' . (Init::microtime_float() - $timeStart));
+
+            return true;
+        } catch (\Exception $e) {
+            if (DB::rollbackTransaction()) {
+                debugLog('Rollback: ' . __METHOD__);
+            }
+
+            throw $e;
+        }
+    }
+
+    /**
+     * Migrar el hash de clave maestra
+     *
+     * @param $masterPass
+     * @return bool
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public static function migrateHash(&$masterPass)
+    {
+        $configHashMPass = ConfigDB::getValue('masterPwd');
+
+        // Comprobar si el hash está en formato anterior a 12002
+        if (strlen($configHashMPass) === 128) {
+            if (hash('sha256', substr($configHashMPass, 0, 64) . $masterPass) === substr($configHashMPass, 64, 64)) {
+                $newHash = Hash::hashKey($masterPass);
+
+                AccountHistory::updateAccountsMPassHash($newHash);
+
+                ConfigDB::setValue('masterPwd', $newHash);
+                Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acción.', false), Log::NOTICE);
+
+                return true;
+            }
+
+            // Hash de clave maestra anterior a 2.0.0.17013101
+            // Hash de clave maestra anterior a 2.0.0.17021601
+        } elseif ((substr($configHashMPass, 72) !== false && hash_equals(crypt($masterPass, substr($configHashMPass, 0, 72)), substr($configHashMPass, 72)))
+            || (substr($configHashMPass, 30) !== false && hash_equals(crypt($masterPass, substr($configHashMPass, 0, 30)), substr($configHashMPass, 30)))
+        ) {
+            ConfigDB::setValue('masterPwd', Hash::hashKey($masterPass));
+            Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acción.', false), Log::NOTICE);
+
+            return true;
+        }
+
+        return Hash::checkHashKey($masterPass, $configHashMPass);
+    }
+
+    /**
+     * Migrar claves de cuentas a nuevo formato
+     *
+     * @param $masterPass
+     */
+    private static function migrateAccounts(&$masterPass)
+    {
+        $AccountCrypt = new AccountCrypt();
+        $AccountCrypt->updateOldPass($masterPass);
+
+        $AccountHistoryCrypt = new AccountHistoryCrypt();
+        $AccountHistoryCrypt->updateOldPass($masterPass);
+    }
+
+    /**
+     * Migrar los datos de los campos personalizados a nuevo formato
+     *
+     * @param $masterPass
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \SP\Core\Exceptions\SPException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     */
+    private static function migrateCustomFields(&$masterPass)
+    {
+        CustomFieldsUtil::updateCustomFieldsOldCrypt($masterPass);
+    }
+}
\ No newline at end of file

--- inc/SP/Core/Upgrade/Customer.class.php ---
@@ -25,6 +25,7 @@
 namespace SP\Core\Upgrade;
 
 use SP\Core\Exceptions\SPException;
+use SP\Core\TaskFactory;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
 
@@ -43,33 +44,32 @@ class Customer
      */
     public static function fixCustomerId($customerId)
     {
-        $Data = new QueryData();
-        $Data->setQuery('SELECT customer_id FROM customers ORDER BY customer_id');
-
-        $customers = DB::getResultsArray($Data);
-
-        $paramsIn = trim(str_repeat(',?', count($customers)), ',');
-        $Data->addParam($customerId);
-
-        foreach ($customers as $customer) {
-            $Data->addParam($customer->customer_id);
-        }
+        TaskFactory::$Message->setTask(__FUNCTION__);
+        TaskFactory::$Message->setMessage(__('Actualizando IDs de clientes'));
+        TaskFactory::sendTaskMessage();
 
         try {
             DB::beginTransaction();
 
+            if ($customerId === 0) {
+                $customerId = self::createOrphanCustomer();
+            }
+
+            $Data = new QueryData();
+            $Data->addParam($customerId);
+
             $query = /** @lang SQL */
-                'UPDATE accHistory SET acchistory_customerId = ? WHERE acchistory_customerId NOT IN (' . $paramsIn . ') OR acchistory_customerId IS NULL';
+                'UPDATE accHistory SET acchistory_customerId = ? WHERE acchistory_customerId NOT IN (SELECT customer_id FROM customers ORDER BY customer_id) OR acchistory_customerId IS NULL';
             $Data->setQuery($query);
 
             DB::getQuery($Data);
 
             $query = /** @lang SQL */
-                'UPDATE accounts SET account_customerId = ? WHERE account_customerId NOT IN (' . $paramsIn . ') OR account_customerId IS NULL';
+                'UPDATE accounts SET account_customerId = ? WHERE account_customerId NOT IN (SELECT customer_id FROM customers ORDER BY customer_id) OR account_customerId IS NULL';
             $Data->setQuery($query);
 
             DB::getQuery($Data);
-
+            
             DB::endTransaction();
 
             return true;
@@ -79,4 +79,26 @@ public static function fixCustomerId($customerId)
             return false;
         }
     }
+
+    /**
+     * Crear un cliente para elementos huérfanos
+     *
+     * @return int
+     */
+    public static function createOrphanCustomer()
+    {
+        $query = /** @lang SQL */
+            'INSERT INTO customers SET
+            customer_name = \'Orphan customer\',
+            customer_hash = MD5(\'Orphan customer\'),
+            customer_description = \'Created by the upgrade process\'';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->setOnErrorMessage(__('Error al crear el cliente', false));
+
+        DB::getQuery($Data);
+
+        return DB::getLastId();
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Upgrade/Group.class.php ---
@@ -25,6 +25,7 @@
 namespace SP\Core\Upgrade;
 
 use SP\Core\Exceptions\SPException;
+use SP\Core\TaskFactory;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
 
@@ -34,37 +35,42 @@
  */
 class Group
 {
+    /**
+     * @var int
+     */
+    protected static $orphanGroupId;
+
     /**
      * Actualizar registros con grupos no existentes
      * @param int $groupId Id de grupo por defecto
      * @return bool
      */
     public static function fixGroupId($groupId)
     {
-        $Data = new QueryData();
-        $Data->setQuery('SELECT usergroup_id FROM usrGroups ORDER BY usergroup_id');
-
-        $groups = DB::getResultsArray($Data);
-
-        $paramsIn = trim(str_repeat(',?', count($groups)), ',');
-        $Data->addParam($groupId);
-
-        foreach ($groups as $group) {
-            $Data->addParam($group->usergroup_id);
-        }
+        TaskFactory::$Message->setTask(__FUNCTION__);
+        TaskFactory::$Message->setMessage(__('Actualizando IDs de grupos'));
+        TaskFactory::sendTaskMessage();
 
         try {
             DB::beginTransaction();
 
+            if ($groupId === 0){
+                $groupId = self::$orphanGroupId ?: self::createOrphanGroup();
+            }
+
+            $Data = new QueryData();
+
             $query = /** @lang SQL */
-                'UPDATE usrData SET user_groupId = ? WHERE user_groupId NOT IN (' . $paramsIn . ') OR user_groupId IS NULL';
+                'UPDATE usrData SET user_groupId = ? WHERE user_groupId NOT IN (SELECT usergroup_id FROM usrGroups ORDER BY usergroup_id) OR user_groupId IS NULL';
             $Data->setQuery($query);
+            $Data->addParam($groupId);
 
             DB::getQuery($Data);
 
             $query = /** @lang SQL */
-                'DELETE FROM usrToGroups WHERE usertogroup_groupId <> ? AND usertogroup_groupId NOT IN (' . $paramsIn . ') OR usertogroup_groupId IS NULL';
+                'DELETE FROM usrToGroups WHERE usertogroup_groupId NOT IN (SELECT usergroup_id FROM usrGroups ORDER BY usergroup_id) OR usertogroup_groupId IS NULL';
             $Data->setQuery($query);
+            $Data->setParams([]);
 
             DB::getQuery($Data);
 
@@ -77,4 +83,29 @@ public static function fixGroupId($groupId)
             return false;
         }
     }
+
+    /**
+     * Crear un grupo para elementos huérfanos
+     *
+     * @return int
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public static function createOrphanGroup()
+    {
+        $query = /** @lang SQL */
+            'INSERT INTO usrGroups SET
+            usergroup_name = \'Orphan group\',
+            usergroup_description = \'Created by the upgrade process\'';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->setOnErrorMessage(__('Error al crear el grupo', false));
+
+        DB::getQuery($Data);
+
+        self::$orphanGroupId = DB::getLastId();
+
+        return self::$orphanGroupId;
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Upgrade/Profile.class.php ---
@@ -25,6 +25,8 @@
 namespace SP\Core\Upgrade;
 
 use SP\Core\Exceptions\SPException;
+use SP\Core\TaskFactory;
+use SP\DataModel\ProfileData;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
 
@@ -35,6 +37,8 @@
  */
 class Profile
 {
+    protected static $orphanProfileId;
+
     /**
      * Actualizar registros con perfiles no existentes
      *
@@ -44,23 +48,22 @@ class Profile
     public static function fixProfilesId($profileId)
     {
         $Data = new QueryData();
-        $Data->setQuery('SELECT userprofile_id FROM usrProfiles ORDER BY userprofile_id');
-
-        $profiles = DB::getResultsArray($Data);
-
-        $paramsIn = trim(str_repeat(',?', count($profiles)), ',');
-        $Data->addParam($profileId);
-
-        foreach ($profiles as $profile) {
-            $Data->addParam($profile->userprofile_id);
-        }
 
         try {
+            TaskFactory::$Message->setTask(__FUNCTION__);
+            TaskFactory::$Message->setMessage(__('Actualizando IDs de perfil'));
+            TaskFactory::sendTaskMessage();
+
             DB::beginTransaction();
 
+            if ($profileId === 0){
+                $profileId = self::$orphanProfileId ?: self::createOrphanProfile();
+            }
+
             $query = /** @lang SQL */
-                'UPDATE usrData SET user_profileId = ? WHERE user_profileId NOT IN (' . $paramsIn . ') OR user_profileId IS NULL';
+                'UPDATE usrData SET user_profileId = ? WHERE user_profileId NOT IN (SELECT userprofile_id FROM usrProfiles ORDER BY userprofile_id) OR user_profileId IS NULL';
             $Data->setQuery($query);
+            $Data->addParam($profileId);
 
             DB::getQuery($Data);
 
@@ -73,4 +76,30 @@ public static function fixProfilesId($profileId)
             return false;
         }
     }
+
+    /**
+     * Crear un perfil para elementos huérfanos
+     *
+     * @return int
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public static function createOrphanProfile()
+    {
+        $query = /** @lang SQL */
+            'INSERT INTO usrProfiles SET
+            userprofile_name = \'Orphan profile\',
+            userProfile_profile = ?';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam(serialize(new ProfileData()));
+        $Data->setOnErrorMessage(__('Error al crear perfil', false));
+
+        DB::getQuery($Data);
+
+        self::$orphanProfileId = DB::getLastId();
+
+        return self::$orphanProfileId;
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Upgrade/Upgrade.class.php ---
@@ -23,27 +23,28 @@
  *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-namespace SP\Core;
+namespace SP\Core\Upgrade;
 
 use SP\Config\Config;
 use SP\Config\ConfigData;
 use SP\Config\ConfigDB;
+use SP\Controller\MainActionController;
 use SP\Core\Exceptions\SPException;
-use SP\Core\Upgrade\Account;
-use SP\Core\Upgrade\Group;
-use SP\Core\Upgrade\Profile;
-use SP\Core\Upgrade\User;
-use SP\Core\Upgrade\Category;
-use SP\Core\Upgrade\Customer;
+use SP\Core\Init;
+use SP\Core\Session as CoreSession;
+use SP\Core\TaskFactory;
 use SP\Http\Request;
 use SP\Log\Email;
 use SP\Log\Log;
 use SP\Mgmt\CustomFields\CustomFieldsUtil;
 use SP\Mgmt\Profiles\ProfileUtil;
+use SP\Mgmt\Users\User;
 use SP\Mgmt\Users\UserMigrate;
 use SP\Mgmt\Users\UserPreferencesUtil;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
+use SP\Util\Util;
+use SP\Core\Upgrade\User as UserUpgrade;
 
 defined('APP_ROOT') || die();
 
@@ -52,44 +53,46 @@
  */
 class Upgrade
 {
-    private static $dbUpgrade = [110, 1121, 1122, 1123, 11213, 11219, 11220, 12001, 12002, 1316011001, 1316100601, 20017011302, 20017011701, 20017012901];
+    private static $dbUpgrade = [110, 1121, 1122, 1123, 11213, 11219, 11220, 12001, 12002, 1316011001, 1316100601, 20017011302, 20017011701, 21017022601];
     private static $cfgUpgrade = [1124, 1316020501, 20017011202];
     private static $auxUpgrade = [12001, 12002, 20017010901, 20017011202];
+    private static $appUpgrade = [21017022601];
 
     /**
      * Inicia el proceso de actualización de la BBDD.
      *
      * @param int $version con la versión de la BBDD actual
      * @return bool
-     * @throws \SP\Core\Exceptions\QueryException
-     * @throws \SP\Core\Exceptions\InvalidClassException
-     * @throws \SP\Core\Exceptions\ConstraintException
-     * @throws \InvalidArgumentException
-     * @throws \phpmailer\phpmailerException
      * @throws SPException
      */
     public static function doUpgrade($version)
     {
         foreach (self::$dbUpgrade as $upgradeVersion) {
             if ($version < $upgradeVersion) {
-                if (self::auxPreUpgrades($upgradeVersion) === false) {
-
+                if (self::auxPreDbUpgrade($upgradeVersion) === false) {
                     throw new SPException(SPException::SP_CRITICAL,
                         __('Error al aplicar la actualización auxiliar', false),
                         __('Compruebe el registro de eventos para más detalles', false));
                 }
 
                 if (self::upgradeDB($upgradeVersion) === false) {
-
-                    throw new SPException(SPException::SP_CRITICAL, __('Error al aplicar la actualización de la Base de Datos', false),
+                    throw new SPException(SPException::SP_CRITICAL,
+                        __('Error al aplicar la actualización de la Base de Datos', false),
                         __('Compruebe el registro de eventos para más detalles', false));
                 }
             }
         }
 
+        foreach (self::$appUpgrade as $upgradeVersion) {
+            if ($version < $upgradeVersion && self::appUpgrades($upgradeVersion) === false) {
+                throw new SPException(SPException::SP_CRITICAL,
+                    __('Error al aplicar la actualización de la aplicación', false),
+                    __('Compruebe el registro de eventos para más detalles', false));
+            }
+        }
+
         foreach (self::$auxUpgrade as $upgradeVersion) {
             if ($version < $upgradeVersion && self::auxUpgrades($upgradeVersion) === false) {
-
                 throw new SPException(SPException::SP_CRITICAL,
                     __('Error al aplicar la actualización auxiliar', false),
                     __('Compruebe el registro de eventos para más detalles', false));
@@ -105,18 +108,27 @@ public static function doUpgrade($version)
      * @param $version
      * @return bool
      */
-    private static function auxPreUpgrades($version)
+    private static function auxPreDbUpgrade($version)
     {
+        if ((int)ConfigDB::getValue('version') >= $version) {
+            return true;
+        }
+
         switch ($version) {
             case 1316011001:
+                debugLog(__FUNCTION__ . ': ' . $version);
+
                 return self::upgradeDB(1300000000);
             case 1316100601:
-                return Account::fixAccountsId()
-                    && User::fixUsersId(Request::analyze('userid', 1))
-                    && Group::fixGroupId(Request::analyze('groupid', 1))
-                    && Profile::fixProfilesId(Request::analyze('profileid', 1))
-                    && Category::fixCategoriesId(Request::analyze('categoryid', 1))
-                    && Customer::fixCustomerId(Request::analyze('customerid', 1));
+                debugLog(__FUNCTION__ . ': ' . $version);
+
+                return
+                    Account::fixAccountsId()
+                    && UserUpgrade::fixUsersId(Request::analyze('userid', 0))
+                    && Group::fixGroupId(Request::analyze('groupid', 0))
+                    && Profile::fixProfilesId(Request::analyze('profileid', 0))
+                    && Category::fixCategoriesId(Request::analyze('categoryid', 0))
+                    && Customer::fixCustomerId(Request::analyze('customerid', 0));
         }
 
         return true;
@@ -137,22 +149,27 @@ private static function upgradeDB($version)
 
         $queries = self::getQueriesFromFile($version);
 
-        if (count($queries) === 0 || (int)ConfigDB::getValue('version') === $version) {
+        if (count($queries) === 0 || (int)ConfigDB::getValue('version') >= $version) {
             $LogMessage->addDescription(__('No es necesario actualizar la Base de Datos.', false));
             $Log->writeLog();
             return true;
         }
 
+        TaskFactory::$Message->setTask(__('Actualizar BBDD'));
+        TaskFactory::$Message->setMessage(sprintf('%s : %s', __('Versión'), $version));
+        TaskFactory::sendTaskMessage();
+
+        debugLog(__FUNCTION__ . ': ' . $version);
+
         $Data = new QueryData();
 
         foreach ($queries as $query) {
             try {
                 $Data->setQuery($query);
                 DB::getQuery($Data);
             } catch (SPException $e) {
-                $LogMessage->addDescription(__('Error al aplicar la actualización de la Base de Datos.', false));
+                $LogMessage->addDescription(__('Error al aplicar la actualización de la Base de Datos', false));
                 $LogMessage->addDetails('ERROR', sprintf('%s (%s)', $e->getMessage(), $e->getCode()));
-                $LogMessage->addDetails('SQL', $query);
                 $Log->setLogLevel(Log::ERROR);
                 $Log->writeLog();
 
@@ -197,44 +214,78 @@ private static function getQueriesFromFile($filename)
     }
 
     /**
-     * Aplicar actualizaciones auxiliares.
+     * Actualizaciones de la aplicación
      *
-     * @param $version int El número de versión
+     * @param $version
      * @return bool
-     * @throws \SP\Core\Exceptions\QueryException
-     * @throws \SP\Core\Exceptions\ConstraintException
-     * @throws \phpmailer\phpmailerException
-     * @throws \InvalidArgumentException
      * @throws \SP\Core\Exceptions\SPException
-     * @throws \SP\Core\Exceptions\InvalidClassException
      */
-    private static function auxUpgrades($version)
+    private static function appUpgrades($version)
     {
         switch ($version) {
-            case 12001:
-                return (ProfileUtil::migrateProfiles() && UserMigrate::migrateUsersGroup());
-            case 12002:
-                return UserMigrate::setMigrateUsers();
-            case 20017010901:
-                return CustomFieldsUtil::migrateCustomFields() && UserPreferencesUtil::migrate();
-            case 20017011202:
-                return UserPreferencesUtil::migrate();
+            case 21017022601:
+                $dbResult = true;
+                $databaseVersion = (int)str_replace('.', '', ConfigDB::getValue('version'));
+
+                if ($databaseVersion < $version) {
+                    if (!self::upgradeDB($version)) {
+                        $dbResult = false;
+                    }
+                }
+
+                $masterPass = Request::analyzeEncrypted('masterkey');
+                $UserData = User::getItem()->getByLogin(Request::analyze('userlogin'));
+
+                if (!is_object($UserData)) {
+                    throw new SPException(SPException::SP_ERROR, __('Error al obtener los datos del usuario', false));
+                }
+
+                @session_start();
+
+                CoreSession::setUserData($UserData);
+
+                @session_write_close();
+
+                return $dbResult === true
+                    && !empty($masterPass)
+                    && Crypt::migrate($masterPass);
         }
 
-        return true;
+        return false;
     }
 
     /**
-     * Comprueba si es necesario actualizar la BBDD.
+     * Aplicar actualizaciones auxiliares.
      *
-     * @param int $version con el número de versión actual
-     * @returns bool
+     * @param $version int El número de versión
+     * @return bool
      */
-    public static function needDBUpgrade($version)
+    private static function auxUpgrades($version)
     {
-        $latestUpgrade = self::$dbUpgrade[count(self::$dbUpgrade) - 1];
+        try {
+            switch ($version) {
+                case 12001:
+                    debugLog(__FUNCTION__ . ': ' . $version);
+
+                    return (ProfileUtil::migrateProfiles() && UserMigrate::migrateUsersGroup());
+                case 12002:
+                    debugLog(__FUNCTION__ . ': ' . $version);
+
+                    return UserMigrate::setMigrateUsers();
+                case 20017010901:
+                    debugLog(__FUNCTION__ . ': ' . $version);
+
+                    return CustomFieldsUtil::migrateCustomFields() && UserPreferencesUtil::migrate();
+                case 20017011202:
+                    debugLog(__FUNCTION__ . ': ' . $version);
+
+                    return UserPreferencesUtil::migrate();
+            }
+        } catch (SPException $e) {
+            return false;
+        }
 
-        return version_compare($version, $latestUpgrade) < 0;
+        return true;
     }
 
     /**
@@ -245,9 +296,7 @@ public static function needDBUpgrade($version)
      */
     public static function needConfigUpgrade($version)
     {
-        $latestUpgrade = self::$cfgUpgrade[count(self::$cfgUpgrade) - 1];
-
-        return version_compare($version, $latestUpgrade) < 0;
+        return version_compare($version, self::$cfgUpgrade[count(self::$cfgUpgrade) - 1]) < 0;
     }
 
     /**
@@ -265,6 +314,8 @@ public static function upgradeConfig($version)
             if (version_compare($version, $upgradeVersion) < 0) {
                 switch ($upgradeVersion) {
                     case 20017011202:
+                        debugLog(__FUNCTION__ . ': ' . $version);
+
                         $Config->setSiteTheme('material-blue');
                         $Config->setConfigVersion($upgradeVersion);
                         Config::saveConfig($Config, false);
@@ -398,4 +449,95 @@ private static function getConfigParams()
             'setWikiSearchUrl' => ['wikisearchurl', 'wiki_searchurl']
         ];
     }
+
+    /**
+     * Comrpueba y actualiza la versión de la BBDD.
+     *
+     * @return int|false
+     */
+    public static function checkDbVersion()
+    {
+        $appVersion = (int)implode('', Util::getVersion(true));
+        $databaseVersion = (int)str_replace('.', '', ConfigDB::getValue('version'));
+
+        if ($databaseVersion < $appVersion
+            && Request::analyze('nodbupgrade', 0) === 0
+            && self::needDBUpgrade($databaseVersion)
+        ) {
+            if (!Init::checkMaintenanceMode(true)) {
+                self::setUpgradeKey('db');
+            } else {
+                $Controller = new MainActionController();
+                $Controller->doAction($databaseVersion);
+            }
+
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Comprueba si es necesario actualizar la BBDD.
+     *
+     * @param int $version con el número de versión actual
+     * @returns bool
+     */
+    private static function needDBUpgrade($version)
+    {
+        return version_compare($version, self::$dbUpgrade[count(self::$dbUpgrade) - 1]) < 0;
+    }
+
+    /**
+     * Establecer la key de actualización
+     *
+     * @param string $type Tipo de actualización
+     */
+    private static function setUpgradeKey($type)
+    {
+        $upgradeKey = Config::getConfig()->getUpgradeKey();
+
+        if (empty($upgradeKey)) {
+            Config::getConfig()->setUpgradeKey(Util::generateRandomBytes(32));
+        }
+
+        Config::getConfig()->setMaintenance(true);
+        Config::saveConfig(null, false);
+
+        Init::initError(__('La aplicación necesita actualizarse'), sprintf(__('Si es un administrador pulse en el enlace: %s'), '<a href="index.php?a=upgrade&type=' . $type . '">' . __('Actualizar') . '</a>'));
+    }
+
+    /**
+     * Comrpueba y actualiza la versión de la aplicación.
+     *
+     * @return int|false
+     */
+    public static function checkAppVersion()
+    {
+        $appVersion = (int)Config::getConfig()->getConfigVersion();
+
+        if (self::needAppUpgrade($appVersion)) {
+            if (!Init::checkMaintenanceMode(true)) {
+                self::setUpgradeKey('app');
+            } else {
+                $Controller = new MainActionController();
+                $Controller->doAction($appVersion);
+            }
+
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Comprueba si es necesario actualizar los componentes de la aplicación.
+     *
+     * @param int $version con el número de versión actual
+     * @returns bool
+     */
+    private static function needAppUpgrade($version)
+    {
+        return version_compare($version, self::$appUpgrade[count(self::$appUpgrade) - 1]) < 0;
+    }
 }
\ No newline at end of file

--- inc/SP/Core/Upgrade/User.class.php ---
@@ -24,7 +24,12 @@
 
 namespace SP\Core\Upgrade;
 
+use Defuse\Crypto\Exception\CryptoException;
 use SP\Core\Exceptions\SPException;
+use SP\Core\OldCrypt;
+use SP\Core\TaskFactory;
+use SP\DataModel\UserLoginData;
+use SP\Mgmt\Users\UserPass;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
 
@@ -43,23 +48,34 @@ class User
      */
     public static function fixUsersId($userId)
     {
-        $Data = new QueryData();
-        $Data->setQuery('SELECT user_id FROM usrData ORDER BY user_id');
+        TaskFactory::$Message->setTask(__FUNCTION__);
+        TaskFactory::$Message->setMessage(__('Actualizando IDs de usuarios'));
+        TaskFactory::sendTaskMessage();
 
-        $users = DB::getResultsArray($Data);
+        try {
+            DB::beginTransaction();
 
-        $paramsIn = trim(str_repeat(',?', count($users)), ',');
-        $Data->addParam($userId);
+            $Data = new QueryData();
+            $Data->setQuery('SELECT user_id FROM usrData ORDER BY user_id');
 
-        foreach ($users as $user) {
-            $Data->addParam($user->user_id);
-        }
+            $users = DB::getResultsArray($Data);
 
-        try {
-            DB::beginTransaction();
+            $paramsIn = trim(str_repeat(',?', count($users)), ',');
+
+            if ($userId === 0) {
+                $groupId = Group::createOrphanGroup();
+                $profileId = Profile::createOrphanProfile();
+                $userId = self::createOrphanUser($groupId, $profileId);
+            }
+
+            $Data->addParam($userId);
+
+            foreach ($users as $user) {
+                $Data->addParam($user->user_id);
+            }
 
             $query = /** @lang SQL */
-                'UPDATE accounts SET account_userId = ? WHERE account_userId NOT IN (' . $paramsIn . ') OR account_userId IS NULL';
+                'UPDATE accounts SET account_userId = ? WHERE account_userId NOT IN (' . $paramsIn . ') OR account_userId IS NULL ';
             $Data->setQuery($query);
 
             DB::getQuery($Data);
@@ -109,4 +125,58 @@ public static function fixUsersId($userId)
             return false;
         }
     }
+
+    /**
+     * Crear un usuario para elementos huérfanos
+     *
+     * @param $groupId
+     * @param $profileId
+     * @return int
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public static function createOrphanUser($groupId, $profileId)
+    {
+        $query = /** @lang SQL */
+            'INSERT INTO usrData SET
+            user_name = \'Orphan User\',
+            user_login = \'orphan_user\',
+            user_notes = \'Created by the upgrade process\',
+            user_groupId = ?,
+            user_profileId = ?,
+            user_mIV = \'\',
+            user_isDisabled = 1,
+            user_pass = \'\',
+            user_hashSalt = \'\'';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($groupId);
+        $Data->addParam($profileId);
+        $Data->setOnErrorMessage(__('Error al crear el usuario', false));
+
+        DB::getQuery($Data);
+
+        return DB::getLastId();
+    }
+
+    /**
+     * Actualizar la clave maestra
+     *
+     * @param UserLoginData $UserData
+     * @return bool
+     */
+    public static function upgradeMasterKey(UserLoginData $UserData)
+    {
+        $key = OldCrypt::generateAesKey($UserData->getLoginPass() . $UserData->getLogin());
+        $mKey = OldCrypt::getDecrypt($UserData->getUserMPass(), $UserData->getUserMKey(), $key);
+
+        try {
+            return $mKey && UserPass::updateUserMPass($mKey, $UserData);
+        } catch (SPException $e) {
+        } catch (CryptoException $e) {
+        }
+
+        return false;
+    }
 }
\ No newline at end of file

--- inc/SP/Core/XmlExport.class.php ---
@@ -24,8 +24,11 @@
 
 namespace SP\Core;
 
+use Defuse\Crypto\Exception\CryptoException;
 use SP\Account\AccountUtil;
 use SP\Config\Config;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\CategoryData;
 use SP\Log\Email;
@@ -270,22 +273,22 @@ private function appendNode(\DOMElement $node)
                 $nodeXML = $this->xml->saveXML($node);
 
                 // Crear los datos encriptados con la información del nodo
-                $encrypted = Crypt::mkEncrypt($nodeXML, $this->exportPass);
-                $encryptedIV = Crypt::$strInitialVector;
+                $securedKey = Crypt::makeSecuredKey($this->exportPass);
+                $encrypted = Crypt::encrypt($nodeXML, $securedKey);
 
                 // Buscar si existe ya un nodo para el conjunto de datos encriptados
                 $encryptedNode = $this->root->getElementsByTagName('Encrypted')->item(0);
 
                 if (!$encryptedNode instanceof \DOMElement) {
                     $encryptedNode = $this->xml->createElement('Encrypted');
-                    $encryptedNode->setAttribute('hash', Crypt::mkHashPassword($this->exportPass));
+                    $encryptedNode->setAttribute('hash', Hash::hashKey($this->exportPass));
                 }
 
                 // Crear el nodo hijo con los datos encriptados
                 $encryptedData = $this->xml->createElement('Data', base64_encode($encrypted));
 
-                $encryptedDataIV = $this->xml->createAttribute('iv');
-                $encryptedDataIV->value = base64_encode($encryptedIV);
+                $encryptedDataIV = $this->xml->createAttribute('key');
+                $encryptedDataIV->value = $securedKey;
 
                 // Añadir nodos de datos
                 $encryptedData->appendChild($encryptedDataIV);
@@ -298,13 +301,17 @@ private function appendNode(\DOMElement $node)
             }
         } catch (\DOMException $e) {
             throw new SPException(SPException::SP_WARNING, $e->getMessage(), __FUNCTION__);
+        } catch (CryptoException $e) {
+            throw new SPException(SPException::SP_WARNING, $e->getMessage(), __FUNCTION__);
         }
     }
 
     /**
      * Crear el nodo con los datos de los clientes
      *
      * #@throws SPException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
      */
     private function createCustomers()
     {

--- inc/SP/DataModel/AccountData.class.php ---
@@ -77,9 +77,9 @@ class AccountData extends DataModelBase implements JsonSerializable, DataModelIn
      */
     public $account_pass = '';
     /**
-     * @var string El vector de inicialización de la cuenta.
+     * @var string La clave de encriptación de la cuenta
      */
-    public $account_IV = '';
+    public $account_key = '';
     /**
      * @var string Las nosta de la cuenta.
      */
@@ -207,17 +207,17 @@ public function setAccountPass($account_pass)
     /**
      * @return string
      */
-    public function getAccountIV()
+    public function getAccountKey()
     {
-        return $this->account_IV;
+        return $this->account_key;
     }
 
     /**
-     * @param string $account_IV
+     * @param string $account_key
      */
-    public function setAccountIV($account_IV)
+    public function setAccountKey($account_key)
     {
-        $this->account_IV = $account_IV;
+        $this->account_key = $account_key;
     }
 
     /**

--- inc/SP/DataModel/ApiTokenData.class.php ---
@@ -0,0 +1,212 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\DataModel;
+
+use SP\Core\Crypt\Vault;
+
+/**
+ * Class ApiTokenData
+ *
+ * @package SP\DataModel
+ */
+class ApiTokenData extends DataModelBase implements DataModelInterface
+{
+    /**
+     * @var int
+     */
+    public $authtoken_id;
+    /**
+     * @var Vault
+     */
+    public $authtoken_vault;
+    /**
+     * @var int
+     */
+    public $authtoken_userId;
+    /**
+     * @var string
+     */
+    public $authtoken_token = '';
+    /**
+     * @var int
+     */
+    public $authtoken_createdBy;
+    /**
+     * @var int
+     */
+    public $authtoken_startDate;
+    /**
+     * @var int
+     */
+    public $authtoken_actionId;
+    /**
+     * @var string
+     */
+    public $authtoken_hash;
+
+    /**
+     * @return int
+     */
+    public function getAuthtokenId()
+    {
+        return (int)$this->authtoken_id;
+    }
+
+    /**
+     * @param int $authtoken_id
+     */
+    public function setAuthtokenId($authtoken_id)
+    {
+        $this->authtoken_id = (int)$authtoken_id;
+    }
+
+    /**
+     * @return Vault
+     */
+    public function getAuthtokenVault()
+    {
+        return $this->authtoken_vault;
+    }
+
+    /**
+     * @param Vault $authtoken_vault
+     */
+    public function setAuthtokenVault(Vault $authtoken_vault)
+    {
+        $this->authtoken_vault = $authtoken_vault;
+    }
+
+    /**
+     * @return int
+     */
+    public function getAuthtokenUserId()
+    {
+        return (int)$this->authtoken_userId;
+    }
+
+    /**
+     * @param int $authtoken_userId
+     */
+    public function setAuthtokenUserId($authtoken_userId)
+    {
+        $this->authtoken_userId = (int)$authtoken_userId;
+    }
+
+    /**
+     * @return string
+     */
+    public function getAuthtokenToken()
+    {
+        return $this->authtoken_token;
+    }
+
+    /**
+     * @param string $authtoken_token
+     */
+    public function setAuthtokenToken($authtoken_token)
+    {
+        $this->authtoken_token = $authtoken_token;
+    }
+
+    /**
+     * @return int
+     */
+    public function getAuthtokenCreatedBy()
+    {
+        return (int)$this->authtoken_createdBy;
+    }
+
+    /**
+     * @param int $authtoken_createdBy
+     */
+    public function setAuthtokenCreatedBy($authtoken_createdBy)
+    {
+        $this->authtoken_createdBy = (int)$authtoken_createdBy;
+    }
+
+    /**
+     * @return int
+     */
+    public function getAuthtokenStartDate()
+    {
+        return (int)$this->authtoken_startDate;
+    }
+
+    /**
+     * @param int $authtoken_startDate
+     */
+    public function setAuthtokenStartDate($authtoken_startDate)
+    {
+        $this->authtoken_startDate = (int)$authtoken_startDate;
+    }
+
+    /**
+     * @return int
+     */
+    public function getId()
+    {
+        return (int)$this->authtoken_id;
+    }
+
+    /**
+     * @return string
+     */
+    public function getName()
+    {
+        return '';
+    }
+
+    /**
+     * @return int
+     */
+    public function getAuthtokenActionId()
+    {
+        return (int)$this->authtoken_actionId;
+    }
+
+    /**
+     * @param int $authtoken_actionId
+     */
+    public function setAuthtokenActionId($authtoken_actionId)
+    {
+        $this->authtoken_actionId = (int)$authtoken_actionId;
+    }
+
+    /**
+     * @return string
+     */
+    public function getAuthtokenHash()
+    {
+        return $this->authtoken_hash;
+    }
+
+    /**
+     * @param string $authtoken_hash
+     */
+    public function setAuthtokenHash($authtoken_hash)
+    {
+        $this->authtoken_hash = $authtoken_hash;
+    }
+}
\ No newline at end of file

--- inc/SP/DataModel/CustomFieldBaseData.class.php ---
@@ -48,7 +48,7 @@ class CustomFieldBaseData extends DataModelBase
     /**
      * @var string
      */
-    public $customfielddata_iv = '';
+    public $customfielddata_key = '';
     /**
      * @var string
      */
@@ -133,17 +133,17 @@ public function setCustomfielddataData($customfielddata_data)
     /**
      * @return string
      */
-    public function getCustomfielddataIv()
+    public function getCustomfielddataKey()
     {
-        return $this->customfielddata_iv;
+        return $this->customfielddata_key;
     }
 
     /**
-     * @param string $customfielddata_iv
+     * @param string $customfielddata_key
      */
-    public function setCustomfielddataIv($customfielddata_iv)
+    public function setCustomfielddataKey($customfielddata_key)
     {
-        $this->customfielddata_iv = $customfielddata_iv;
+        $this->customfielddata_key = $customfielddata_key;
     }
 
     /**

--- inc/SP/DataModel/PublicLinkData.class.php ---
@@ -81,6 +81,10 @@ class PublicLinkData extends PublicLinkBaseData
      * @var array
      */
     protected $useInfo = [];
+    /**
+     * @var string
+     */
+    protected $data;
 
     /**
      * @return int
@@ -289,4 +293,20 @@ public function addUseInfo($useInfo)
     {
         $this->useInfo[] = $useInfo;
     }
+
+    /**
+     * @return string
+     */
+    public function getData()
+    {
+        return $this->data;
+    }
+
+    /**
+     * @param string $data
+     */
+    public function setData($data)
+    {
+        $this->data = $data;
+    }
 }
\ No newline at end of file

--- inc/SP/DataModel/TrackData.class.php ---
@@ -0,0 +1,189 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\DataModel;
+use SP\Core\Exceptions\InvalidArgumentException;
+use SP\Core\Exceptions\SPException;
+
+/**
+ * Class TrackData
+ *
+ * @package SP\DataModel
+ */
+class TrackData extends DataModelBase
+{
+    /**
+     * @var int
+     */
+    public $track_id;
+    /**
+     * @var int
+     */
+    public $track_userId = 0;
+    /**
+     * @var string
+     */
+    public $track_source = '';
+    /**
+     * @var int
+     */
+    public $track_time = 0;
+    /**
+     * @var string
+     */
+    public $track_ipv4 = '';
+    /**
+     * @var string
+     */
+    public $track_ipv6 = '';
+
+    /**
+     * @return int
+     */
+    public function getTrackId()
+    {
+        return (int)$this->track_id;
+    }
+
+    /**
+     * @param int $track_id
+     */
+    public function setTrackId($track_id)
+    {
+        $this->track_id = (int)$track_id;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTrackUserId()
+    {
+        return (int)$this->track_userId;
+    }
+
+    /**
+     * @param int $track_userId
+     */
+    public function setTrackUserId($track_userId)
+    {
+        $this->track_userId = (int)$track_userId;
+    }
+
+    /**
+     * @return string
+     */
+    public function getTrackSource()
+    {
+        return $this->track_source;
+    }
+
+    /**
+     * @param string $track_source
+     */
+    public function setTrackSource($track_source)
+    {
+        $this->track_source = $track_source;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTrackTime()
+    {
+        return (int)$this->track_time;
+    }
+
+    /**
+     * @param int $track_time
+     */
+    public function setTrackTime($track_time)
+    {
+        $this->track_time = (int)$track_time;
+    }
+
+    /**
+     * @return string
+     */
+    public function getTrackIpv4()
+    {
+        return @inet_ntop($this->track_ipv4);
+    }
+
+    /**
+     * @param string $track_ipv4
+     */
+    public function setTrackIpv4($track_ipv4)
+    {
+        $this->track_ipv4 = @inet_pton($track_ipv4);
+    }
+
+    /**
+     * @param string $track_ip
+     * @throws \SP\Core\Exceptions\InvalidArgumentException
+     */
+    public function setTrackIp($track_ip)
+    {
+        $ip = @inet_pton($track_ip);
+
+        if (strlen($ip) === 4) {
+            $this->track_ipv4 = $ip;
+        } elseif (strlen($ip) > 4) {
+            $this->track_ipv6 = $ip;
+        } elseif ($ip === false) {
+            throw new InvalidArgumentException(SPException::SP_ERROR, __('IP inválida'));
+        }
+    }
+
+    /**
+     * @return int
+     */
+    public function getTrackIpv4Bin()
+    {
+        return $this->track_ipv4;
+    }
+
+    /**
+     * @return string
+     */
+    public function getTrackIpv6()
+    {
+        return @inet_ntop($this->track_ipv6);
+    }
+
+    /**
+     * @param string $track_ipv6
+     */
+    public function setTrackIpv6($track_ipv6)
+    {
+        $this->track_ipv6 = @inet_pton($track_ipv6);
+    }
+
+    /**
+     * @return string
+     */
+    public function getTrackIpv6Bin()
+    {
+        return $this->track_ipv6;
+    }
+}
\ No newline at end of file

--- inc/SP/DataModel/UserData.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -73,6 +73,10 @@ class UserData extends UserPassData implements DataModelInterface
      * @var bool
      */
     public $user_isChangePass = 0;
+    /**
+     * @var bool
+     */
+    public $user_isChangedPass = 0;
     /**
      * @var bool
      */
@@ -389,4 +393,20 @@ public function getName()
     {
         return $this->user_name;
     }
+
+    /**
+     * @return bool
+     */
+    public function isUserIsChangedPass()
+    {
+        return (int)$this->user_isChangedPass;
+    }
+
+    /**
+     * @param bool $user_isChangedPass
+     */
+    public function setUserIsChangedPass($user_isChangedPass)
+    {
+        $this->user_isChangedPass = (int)$user_isChangedPass;
+    }
 }
\ No newline at end of file

--- inc/SP/DataModel/UserLoginData.class.php ---
@@ -0,0 +1,74 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\DataModel;
+
+/**
+ * Class UserLoginData
+ *
+ * @package SP\DataModel
+ */
+class UserLoginData extends UserData
+{
+    /**
+     * @var string
+     */
+    protected $login;
+    /**
+     * @var string
+     */
+    protected $loginPass;
+
+    /**
+     * @return string
+     */
+    public function getLogin()
+    {
+        return $this->login;
+    }
+
+    /**
+     * @param string $login
+     */
+    public function setLogin($login)
+    {
+        $this->login = $login;
+    }
+
+    /**
+     * @return string
+     */
+    public function getLoginPass()
+    {
+        return $this->loginPass;
+    }
+
+    /**
+     * @param string $loginPass
+     */
+    public function setLoginPass($loginPass)
+    {
+        $this->loginPass = $loginPass;
+    }
+}
\ No newline at end of file

--- inc/SP/DataModel/UserPassData.class.php ---
@@ -50,7 +50,7 @@ class UserPassData extends DataModelBase
     /**
      * @var string
      */
-    public $user_mIV = '';
+    public $user_mKey = '';
     /**
      * @var int
      */
@@ -107,17 +107,17 @@ public function setUserMPass($user_mPass)
     /**
      * @return string
      */
-    public function getUserMIV()
+    public function getUserMKey()
     {
-        return $this->user_mIV;
+        return $this->user_mKey;
     }
 
     /**
-     * @param string $user_mIV
+     * @param string $user_mKey
      */
-    public function setUserMIV($user_mIV)
+    public function setUserMKey($user_mKey)
     {
-        $this->user_mIV = $user_mIV;
+        $this->user_mKey = $user_mKey;
     }
 
     /**

--- inc/SP/Forms/ApiTokenForm.class.php ---
@@ -24,10 +24,11 @@
 
 namespace SP\Forms;
 
-use SP\Api\ApiTokens;
 use SP\Core\ActionsInterface;
 use SP\Core\Exceptions\ValidationException;
+use SP\DataModel\ApiTokenData;
 use SP\Http\Request;
+use SP\Mgmt\ApiTokens\ApiTokensUtil;
 
 /**
  * Class ApiTokenForm
@@ -37,15 +38,15 @@
 class ApiTokenForm extends FormBase implements FormInterface
 {
     /**
-     * @var ApiTokens
+     * @var ApiTokenData
      */
-    protected $ApiTokens;
+    protected $ApiTokenData;
 
     /**
      * Validar el formulario
      *
      * @param $action
-     * @return bool
+     * @return ApiTokenForm
      * @throws \SP\Core\Exceptions\ValidationException
      */
     public function validate($action)
@@ -58,7 +59,7 @@ public function validate($action)
                 break;
         }
 
-        return true;
+        return $this;
     }
 
     /**
@@ -68,30 +69,34 @@ public function validate($action)
      */
     protected function analyzeRequestData()
     {
-        $this->ApiTokens = new ApiTokens();
-        $this->ApiTokens->setTokenId($this->itemId);
-        $this->ApiTokens->setUserId(Request::analyze('users', 0));
-        $this->ApiTokens->setActionId(Request::analyze('actions', 0));
-        $this->ApiTokens->setRefreshToken(Request::analyze('refreshtoken', false, false, true));
+        $this->ApiTokenData = new ApiTokenData();
+        $this->ApiTokenData->setAuthtokenId($this->itemId);
+        $this->ApiTokenData->setAuthtokenUserId(Request::analyze('users', 0));
+        $this->ApiTokenData->setAuthtokenActionId(Request::analyze('actions', 0));
+        $this->ApiTokenData->setAuthtokenHash(Request::analyzeEncrypted('pass'));
     }
 
     /**
      * @throws ValidationException
      */
     protected function checkCommon()
     {
-        if ($this->ApiTokens->getUserId() === 0) {
+        if ($this->ApiTokenData->getAuthtokenUserId() === 0) {
             throw new ValidationException(__('Usuario no indicado', false));
-        } elseif ($this->ApiTokens->getActionId() === 0) {
+        } elseif ($this->ApiTokenData->getAuthtokenActionId() === 0) {
             throw new ValidationException(__('Acción no indicada', false));
+        } elseif ($this->ApiTokenData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS
+            && $this->ApiTokenData->getAuthtokenHash() === ''
+        ) {
+            throw new ValidationException(__('La clave no puede estar en blanco', false));
         }
     }
 
     /**
-     * @return ApiTokens
+     * @return ApiTokenData
      */
     public function getItemData()
     {
-        return $this->ApiTokens;
+        return $this->ApiTokenData;
     }
 }
\ No newline at end of file

--- inc/SP/Forms/FormInterface.class.php ---
@@ -35,7 +35,7 @@ interface FormInterface
      * Validar el formulario
      *
      * @param $action
-     * @return bool
+     * @return FormInterface
      * @throws \SP\Core\Exceptions\ValidationException
      */
     public function validate($action);

--- inc/SP/Import/ImportBase.class.php ---
@@ -25,7 +25,8 @@
 namespace SP\Import;
 
 use SP\Account\Account;
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
+use SP\Core\OldCrypt;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Messages\LogMessage;
 use SP\DataModel\AccountExtData;
@@ -126,7 +127,11 @@ protected function addAccount(AccountExtData $AccountData)
         }
 
         if ($this->ImportParams->getImportMasterPwd() !== '') {
-            $pass = Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountIV(), $this->ImportParams->getImportMasterPwd());
+            $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $this->ImportParams->getImportMasterPwd());
+            $pass = Crypt::decrypt($AccountData->getAccountPass(), $securedKey);
+
+            // TODO: importar con encriptación anterior
+//            $pass = Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountKey(), $this->ImportParams->getImportMasterPwd());
             $AccountData->setAccountPass($pass);
         }
 

--- inc/SP/Import/SyspassImport.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -24,7 +24,9 @@
 
 namespace SP\Import;
 
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
+use SP\Core\OldCrypt;
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\AccountExtData;
 use SP\DataModel\CategoryData;
@@ -105,16 +107,20 @@ protected function processEncrypted()
     {
         $hash = $this->xmlDOM->getElementsByTagName('Encrypted')->item(0)->getAttribute('hash');
 
-        if ($hash !== '' && !Crypt::checkHashPass($this->ImportParams->getImportPwd(), $hash)) {
+        if ($hash !== '' && !Hash::checkHashKey($this->ImportParams->getImportPwd(), $hash)) {
             throw new SPException(SPException::SP_ERROR, __('Clave de encriptación incorrecta', false));
         }
 
         foreach ($this->xmlDOM->getElementsByTagName('Data') as $node) {
             /** @var $node \DOMElement */
             $data = base64_decode($node->nodeValue);
-            $iv = base64_decode($node->getAttribute('iv'));
 
-            $xmlDecrypted = Crypt::getDecrypt($data, $iv, $this->ImportParams->getImportPwd());
+            if ($iv = base64_decode($node->getAttribute('iv'))) {
+                $xmlDecrypted = OldCrypt::getDecrypt($data, $iv, $this->ImportParams->getImportPwd());
+            } else {
+                $securedKey = Crypt::unlockSecuredKey($node->getAttribute('key'), $this->ImportParams->getImportPwd());
+                $xmlDecrypted = Crypt::decrypt($data, $securedKey);
+            }
 
             $newXmlData = new \DOMDocument();
 //            $newXmlData->preserveWhiteSpace = true;
@@ -270,7 +276,7 @@ protected function processAccounts(\DOMElement $Account = null)
                         $AccountData->setAccountPass(base64_decode($accountNode->nodeValue));
                         break;
                     case 'passiv';
-                        $AccountData->setAccountIV(base64_decode($accountNode->nodeValue));
+                        $AccountData->setAccountKey(base64_decode($accountNode->nodeValue));
                         break;
                     case 'notes';
                         $AccountData->setAccountNotes($accountNode->nodeValue);

--- inc/SP/Log/Log.class.php ---
@@ -115,13 +115,34 @@ public static function writeNewLogAndEmail($action, $description = null, $level
         return $Log;
     }
 
+    /**
+     * Escribir un nuevo evento en el registro de eventos
+     *
+     * @param string $action      La acción realizada
+     * @param string $description La descripción de la acción realizada
+     * @param string $level
+     * @return Log
+     */
+    public static function writeNewLog($action, $description = null, $level = Log::INFO)
+    {
+        $LogMessage = new LogMessage();
+        $LogMessage->setAction($action);
+        $LogMessage->addDescription($description);
+
+        $Log = new Log($LogMessage, $level);
+        $Log->writeLog();
+
+        return $Log;
+    }
+
     /**
      * Escribir un nuevo evento en el registro de eventos
      *
      * @param bool $resetDescription Restablecer la descripción
+     * @param bool $resetDetails     Restablecer los detalles
      * @return bool
      */
-    public function writeLog($resetDescription = false)
+    public function writeLog($resetDescription = false, $resetDetails = false)
     {
         if ((defined('IS_INSTALLER') && IS_INSTALLER === 1)
             || self::$logDbEnabled === 0
@@ -166,6 +187,10 @@ public function writeLog($resetDescription = false)
             $this->LogMessage->resetDescription();
         }
 
+        if ($resetDetails === true) {
+            $this->LogMessage->resetDetails();
+        }
+
         try {
             DB::getQuery($Data);
         } catch (SPException $e) {
@@ -218,24 +243,4 @@ public static function newLog($action, $description = null, $level = Log::INFO)
 
         return new Log($LogMessage, $level);
     }
-
-    /**
-     * Escribir un nuevo evento en el registro de eventos
-     *
-     * @param string $action      La acción realizada
-     * @param string $description La descripción de la acción realizada
-     * @param string $level
-     * @return Log
-     */
-    public static function writeNewLog($action, $description = null, $level = Log::INFO)
-    {
-        $LogMessage = new LogMessage();
-        $LogMessage->setAction($action);
-        $LogMessage->addDescription($description);
-
-        $Log = new Log($LogMessage, $level);
-        $Log->writeLog();
-
-        return $Log;
-    }
 }
\ No newline at end of file

--- inc/SP/Mgmt/ApiTokens/ApiToken.class.php ---
@@ -0,0 +1,423 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Mgmt\ApiTokens;
+
+use SP\Core\ActionsInterface;
+use SP\Core\Crypt\Hash;
+use SP\Core\Crypt\Session as CryptSession;
+use SP\Core\Crypt\Vault;
+use SP\Core\Exceptions\SPException;
+use SP\Core\Session;
+use SP\DataModel\ApiTokenData;
+use SP\Mgmt\ItemInterface;
+use SP\Mgmt\ItemTrait;
+use SP\Storage\DB;
+use SP\Storage\QueryData;
+use SP\Util\Util;
+
+/**
+ * Class ApiToken
+ *
+ * @package SP\Mgmt\ApiTokens
+ */
+class ApiToken extends ApiTokenBase implements ItemInterface
+{
+    use ItemTrait;
+
+    /**
+     * @return mixed
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \SP\Core\Exceptions\SPException
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function add()
+    {
+        if ($this->checkDuplicatedOnAdd()) {
+            throw new SPException(SPException::SP_WARNING, __('La autorización ya existe', false));
+        }
+
+        $token = $this->getTokenByUserId($this->itemData->getAuthtokenUserId());
+
+        $query = /** @lang SQL */
+            'INSERT INTO authTokens 
+            SET authtoken_userId = ?,
+            authtoken_actionId = ?,
+            authtoken_createdBy = ?,
+            authtoken_token = ?,
+            authtoken_vault = ?,
+            authtoken_hash = ?,
+            authtoken_startDate = UNIX_TIMESTAMP()';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getAuthtokenUserId());
+        $Data->addParam($this->itemData->getAuthtokenActionId());
+        $Data->addParam(Session::getUserData()->getUserId());
+        $Data->addParam($token);
+
+        if ($this->itemData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS) {
+            $Data->addParam(serialize($this->getSecureData($token)));
+        } else {
+            $Data->addParam(null);
+        }
+
+        $Data->addParam(Hash::hashKey($this->itemData->getAuthtokenHash()));
+        $Data->setOnErrorMessage(__('Error interno', false));
+
+        DB::getQuery($Data);
+
+        return $this;
+    }
+
+    /**
+     * @return bool
+     * @throws SPException
+     */
+    public function checkDuplicatedOnAdd()
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_id FROM authTokens 
+            WHERE authtoken_userId = ? 
+            AND authtoken_actionId = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getAuthtokenUserId());
+        $Data->addParam($this->itemData->getAuthtokenActionId());
+
+        DB::getResults($Data);
+
+        return $Data->getQueryNumRows() === 1;
+    }
+
+    /**
+     * Obtener el token de la API de un usuario
+     *
+     * @param $id
+     * @return bool
+     */
+    private function getTokenByUserId($id)
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_token FROM authTokens WHERE authtoken_userId = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($id);
+
+        $queryRes = DB::getResults($Data);
+
+        return $Data->getQueryNumRows() === 1 ? $queryRes->authtoken_token : $this->generateToken();
+    }
+
+    /**
+     * Generar un token de acceso
+     *
+     * @return string
+     */
+    private function generateToken()
+    {
+        return Util::generateRandomBytes(32);
+    }
+
+    /**
+     * Generar la llave segura del token
+     *
+     * @param $token
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @return Vault
+     */
+    private function getSecureData($token)
+    {
+        $Vault = new Vault();
+        $Vault->saveData(CryptSession::getSessionKey(), $this->itemData->getAuthtokenHash() . $token);
+
+        return $Vault;
+    }
+
+    /**
+     * @param $id int
+     * @return $this
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function delete($id)
+    {
+        $query = /** @lang SQL */
+            'DELETE FROM authTokens WHERE authtoken_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($id);
+        $Data->setOnErrorMessage(__('Error interno', false));
+
+        DB::getQuery($Data);
+
+        if ($Data->getQueryNumRows() === 0) {
+            throw new SPException(SPException::SP_INFO, __('Token no encontrado', false));
+        } else {
+            $Data->addParam(null);
+        }
+
+        return $this;
+    }
+
+    /**
+     * @return mixed
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function update()
+    {
+        if ($this->checkDuplicatedOnUpdate()) {
+            throw new SPException(SPException::SP_WARNING, __('La autorización ya existe', false));
+        }
+
+        $token = $this->getTokenByUserId($this->itemData->getAuthtokenUserId());
+        $this->getSecureData($token);
+
+        $query = /** @lang SQL */
+            'UPDATE authTokens 
+            SET authtoken_userId = ?,
+            authtoken_actionId = ?,
+            authtoken_createdBy = ?,
+            authtoken_token = ?,
+            authtoken_vault = ?,
+            authtoken_hash = ?,
+            authtoken_startDate = UNIX_TIMESTAMP() 
+            WHERE authtoken_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getAuthtokenUserId());
+        $Data->addParam($this->itemData->getAuthtokenActionId());
+        $Data->addParam(Session::getUserData()->getUserId());
+        $Data->addParam($token);
+
+        if ($this->itemData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS) {
+            $Data->addParam(serialize($this->getSecureData($token)));
+        } else {
+            $Data->addParam(null);
+        }
+
+        $Data->addParam(Hash::hashKey($this->itemData->getAuthtokenHash()));
+        $Data->addParam($this->itemData->getAuthtokenId());
+        $Data->setOnErrorMessage(__('Error interno', false));
+
+        DB::getQuery($Data);
+
+        return $this;
+    }
+
+    /**
+     * @return bool
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function checkDuplicatedOnUpdate()
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_id FROM authTokens 
+            WHERE authtoken_userId = ? 
+            AND authtoken_actionId = ? 
+            AND authtoken_id <> ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getAuthtokenUserId());
+        $Data->addParam($this->itemData->getAuthtokenActionId());
+        $Data->addParam($this->itemData->getAuthtokenId());
+
+        DB::getResults($Data);
+
+        return $Data->getQueryNumRows() === 1;
+    }
+
+    /**
+     * Regenerar el hash de los tokens de un usuario
+     *
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     */
+    public function refreshToken()
+    {
+        $token = $this->generateToken();
+        $this->getSecureData($token);
+
+        $query = /** @lang SQL */
+            'UPDATE authTokens 
+            SET authtoken_token = ?,
+            authtoken_hash = ?,
+            authtoken_vault = ?,
+            authtoken_pass = ?,
+            authtoken_startDate = UNIX_TIMESTAMP() 
+            WHERE authtoken_userId = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->generateToken());
+        $Data->addParam(Hash::hashKey($this->itemData->getAuthtokenHash()));
+
+        if ($this->itemData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS) {
+            $Data->addParam(serialize($this->getSecureData($token)));
+        } else {
+            $Data->addParam(null);
+        }
+
+        $Data->addParam($this->itemData->getAuthtokenUserId());
+        $Data->setOnErrorMessage(__('Error interno', false));
+
+        DB::getQuery($Data);
+
+        return $this;
+    }
+
+    /**
+     * @param $id int
+     * @return ApiTokenData
+     */
+    public function getById($id)
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_id,
+            authtoken_userId,
+            authtoken_actionId,
+            authtoken_createdBy,
+            authtoken_startDate,
+            authtoken_token 
+            FROM authTokens 
+            WHERE authtoken_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setMapClassName($this->getDataModel());
+        $Data->setQuery($query);
+        $Data->addParam($id);
+
+        return DB::getResults($Data);
+    }
+
+    /**
+     * @return mixed
+     */
+    public function getAll()
+    {
+        // TODO: Implement getAll() method.
+    }
+
+    /**
+     * @param $id int
+     * @return mixed
+     */
+    public function checkInUse($id)
+    {
+        // TODO: Implement checkInUse() method.
+    }
+
+    /**
+     * Eliminar elementos en lote
+     *
+     * @param array $ids
+     * @return $this
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function deleteBatch(array $ids)
+    {
+        $query = /** @lang SQL */
+            'DELETE FROM authTokens WHERE authtoken_id IN (' . $this->getParamsFromArray($ids) . ')';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->setParams($ids);
+        $Data->setOnErrorMessage(__('Error interno', false));
+
+        DB::getQuery($Data);
+
+        return $this;
+    }
+
+    /**
+     * Devolver los elementos con los ids especificados
+     *
+     * @param array $ids
+     * @return mixed
+     */
+    public function getByIdBatch(array $ids)
+    {
+        // TODO: Implement getByIdBatch() method.
+    }
+
+    /**
+     * Obtener el usuario a partir del token
+     *
+     * @param $token string El token de autorización
+     * @return bool|mixed
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function getUserIdForToken($token)
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_userId FROM authTokens WHERE authtoken_token = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($token);
+
+        $queryRes = DB::getResults($Data);
+
+        return $Data->getQueryNumRows() === 1 ? $queryRes->authtoken_userId : false;
+    }
+
+    /**
+     * Devolver los datos de un token
+     *
+     * @param $actionId int El id de la accion
+     * @param $token    string El token de seguridad
+     * @return false|ApiTokenData
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function getTokenByToken($actionId, $token)
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_userId,
+            authtoken_vault,
+            authtoken_hash 
+            FROM authTokens
+            WHERE authtoken_actionId = ? 
+            AND authtoken_token = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setMapClassName($this->getDataModel());
+        $Data->setQuery($query);
+        $Data->addParam($actionId);
+        $Data->addParam($token);
+
+        $queryRes = DB::getResults($Data);
+
+        return $Data->getQueryNumRows() === 1 ? $queryRes : false;
+    }
+}
\ No newline at end of file

--- inc/SP/Mgmt/ApiTokens/ApiTokenBase.class.php ---
@@ -0,0 +1,66 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Mgmt\ApiTokens;
+
+defined('APP_ROOT') || die();
+
+use SP\DataModel\ApiTokenData;
+use SP\Mgmt\ItemBase;
+
+/**
+ * Class ApiTokensBase
+ *
+ * @package SP\Mgmt\ApiTokens
+ */
+abstract class ApiTokenBase extends ItemBase
+{
+    /** @var ApiTokenData */
+    protected $itemData;
+
+    /**
+     * ApiTokensBase constructor.
+     *
+     * @param $itemData
+     * @throws \SP\Core\Exceptions\InvalidClassException
+     */
+    public function __construct($itemData = null)
+    {
+        if (!$this->dataModel) {
+            $this->setDataModel(ApiTokenData::class);
+        }
+
+        parent::__construct($itemData);
+    }
+
+    /**
+     * Devolver los datos del elemento
+     *
+     * @return ApiTokenData
+     */
+    public function getItemData()
+    {
+        return parent::getItemData();
+    }
+}
\ No newline at end of file

--- inc/SP/Mgmt/ApiTokens/ApiTokenSearch.class.php ---
@@ -0,0 +1,84 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Mgmt\ApiTokens;
+
+use SP\Core\Acl;
+use SP\DataModel\ItemSearchData;
+use SP\Mgmt\ItemSearchInterface;
+use SP\Storage\DB;
+use SP\Storage\QueryData;
+
+/**
+ * Class ApiTokenSearch
+ *
+ * @package SP\Mgmt\ApiTokens
+ */
+class ApiTokenSearch extends ApiTokenBase implements ItemSearchInterface
+{
+    /**
+     * @param ItemSearchData $SearchData
+     * @return mixed
+     */
+    public function getMgmtSearch(ItemSearchData $SearchData)
+    {
+        $query = /** @lang SQL */
+            'SELECT authtoken_id,
+            authtoken_userId,
+            authtoken_actionId, 
+            authtoken_token,
+            CONCAT(user_name, \' (\', user_login, \')\') AS user_login 
+            FROM authTokens 
+            LEFT JOIN usrData ON user_id = authtoken_userId ';
+
+        $Data = new QueryData();
+
+        if ($SearchData->getSeachString() !== '') {
+            $search = '%' . $SearchData->getSeachString() . '%';
+            $query .= ' WHERE user_login LIKE ?';
+
+            $Data->addParam($search);
+        }
+
+        $query .= ' ORDER BY user_login';
+        $query .= ' LIMIT ?, ?';
+
+        $Data->addParam($SearchData->getLimitStart());
+        $Data->addParam($SearchData->getLimitCount());
+
+        $Data->setQuery($query);
+
+        DB::setFullRowCount();
+
+        $queryRes = DB::getResultsArray($Data);
+
+        foreach ($queryRes as $token) {
+            $token->authtoken_actionId = Acl::getActionName($token->authtoken_actionId);
+        }
+
+        $queryRes['count'] = $Data->getQueryNumRows();
+
+        return $queryRes;
+    }
+}
\ No newline at end of file

--- inc/SP/Mgmt/ApiTokens/ApiTokensUtil.class.php ---
@@ -0,0 +1,59 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Mgmt\ApiTokens;
+
+use SP\Core\Acl;
+use SP\Core\ActionsInterface;
+
+defined('APP_ROOT') || die();
+
+/**
+ * Class ApiTokensUtil con utilidades para la gestión de tokens API
+ *
+ * @package SP\Api
+ */
+class ApiTokensUtil
+{
+    /**
+     * Devuelver un array de acciones posibles para los tokens
+     *
+     * @return array
+     */
+    public static function getTokenActions()
+    {
+        $actions = [
+            ActionsInterface::ACTION_ACC_SEARCH => Acl::getActionName(ActionsInterface::ACTION_ACC_SEARCH),
+            ActionsInterface::ACTION_ACC_VIEW => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW),
+            ActionsInterface::ACTION_ACC_VIEW_PASS => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW_PASS),
+            ActionsInterface::ACTION_ACC_DELETE => Acl::getActionName(ActionsInterface::ACTION_ACC_DELETE),
+            ActionsInterface::ACTION_ACC_NEW => Acl::getActionName(ActionsInterface::ACTION_ACC_NEW),
+            ActionsInterface::ACTION_CFG_BACKUP => Acl::getActionName(ActionsInterface::ACTION_CFG_BACKUP),
+            ActionsInterface::ACTION_MGM_CATEGORIES => Acl::getActionName(ActionsInterface::ACTION_MGM_CATEGORIES),
+            ActionsInterface::ACTION_MGM_CUSTOMERS => Acl::getActionName(ActionsInterface::ACTION_MGM_CUSTOMERS)
+        ];
+
+        return $actions;
+    }
+}
\ No newline at end of file

--- inc/SP/Mgmt/CustomFields/CustomField.class.php ---
@@ -26,7 +26,10 @@
 
 defined('APP_ROOT') || die();
 
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Session as CryptSession;
+use SP\Core\Exceptions\QueryException;
+use SP\Core\Exceptions\SPException;
 use SP\DataModel\CustomFieldData;
 use SP\DataModel\CustomFieldDefData;
 use SP\Mgmt\ItemInterface;
@@ -67,6 +70,11 @@ public function __construct($itemData, $customFieldDefId = null)
 
     /**
      * @return mixed
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      * @throws \SP\Core\Exceptions\SPException
      */
     public function update()
@@ -79,20 +87,25 @@ public function update()
             return $this->delete($this->itemData->getId());
         }
 
-        $cryptData = Crypt::encryptData($this->itemData->getValue());
+        $sessionKey = CryptSession::getSessionKey();
+        $securedKey = Crypt::makeSecuredKey($sessionKey);
+
+        if (strlen($securedKey) > 1000) {
+            throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+        }
 
         $query = /** @lang SQL */
             'UPDATE customFieldsData SET
             customfielddata_data = ?,
-            customfielddata_iv = ?
+            customfielddata_key = ?
             WHERE customfielddata_moduleId = ?
             AND customfielddata_itemId = ?
             AND customfielddata_defId = ?';
 
         $Data = new QueryData();
         $Data->setQuery($query);
-        $Data->addParam($cryptData['data']);
-        $Data->addParam($cryptData['iv']);
+        $Data->addParam(Crypt::encrypt($this->itemData->getValue(), $securedKey, $sessionKey));
+        $Data->addParam($securedKey);
         $Data->addParam($this->itemData->getModule());
         $Data->addParam($this->itemData->getId());
         $Data->addParam($this->itemData->getDefinitionId());
@@ -128,6 +141,11 @@ protected function checkExists()
 
     /**
      * @return mixed
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
      * @throws \SP\Core\Exceptions\SPException
      */
     public function add()
@@ -136,23 +154,28 @@ public function add()
             return true;
         }
 
-        $cryptData = Crypt::encryptData($this->itemData->getValue());
+        $sessionKey = CryptSession::getSessionKey();
+        $securedKey = Crypt::makeSecuredKey($sessionKey);
+
+        if (strlen($securedKey) > 1000) {
+            throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+        }
 
         $query = /** @lang SQL */
             'INSERT INTO customFieldsData SET
             customfielddata_itemId = ?,
             customfielddata_moduleId = ?,
             customfielddata_defId = ?,
             customfielddata_data = ?,
-            customfielddata_iv = ?';
+            customfielddata_key = ?';
 
         $Data = new QueryData();
         $Data->setQuery($query);
         $Data->addParam($this->itemData->getId());
         $Data->addParam($this->itemData->getModule());
         $Data->addParam($this->itemData->getDefinitionId());
-        $Data->addParam($cryptData['data']);
-        $Data->addParam($cryptData['iv']);
+        $Data->addParam(Crypt::encrypt($this->itemData->getValue(), $securedKey, $sessionKey));
+        $Data->addParam($securedKey);
 
         return DB::getQuery($Data);
     }
@@ -187,7 +210,7 @@ public function getById($id)
             'SELECT customfielddata_id,
             customfielddef_id,
             customfielddata_data,
-            customfielddata_iv,
+            customfielddata_key,
             customfielddef_field
             FROM customFieldsData
             JOIN customFieldsDef ON customfielddata_defId = customfielddef_id
@@ -198,7 +221,7 @@ public function getById($id)
             0 as customfielddata_id,
             customfielddef_id,
             "" as customfielddata_data,
-            "" as customfielddata_iv,
+            "" as customfielddata_key,
             customfielddef_field
             FROM customFieldsDef
             WHERE customfielddef_module = ?
@@ -244,11 +267,14 @@ public function getById($id)
      *
      * @param CustomFieldData $CustomFieldData
      * @return string
+     * @throws \Defuse\Crypto\Exception\CryptoException
      */
     protected function unencryptData(CustomFieldData $CustomFieldData)
     {
         if ($CustomFieldData->getCustomfielddataData() !== '') {
-            return $this->formatValue(Crypt::getDecrypt($CustomFieldData->getCustomfielddataData(), $CustomFieldData->getCustomfielddataIv()));
+            $securedKey = Crypt::unlockSecuredKey($CustomFieldData->getCustomfielddataKey(), CryptSession::getSessionKey());
+
+            return $this->formatValue(Crypt::decrypt($CustomFieldData->getCustomfielddataData(), $securedKey));
         }
 
         return '';

--- inc/SP/Mgmt/CustomFields/CustomFieldsUtil.class.php ---
@@ -26,7 +26,10 @@
 
 defined('APP_ROOT') || die();
 
-use SP\Core\Crypt;
+use Defuse\Crypto\Exception\CryptoException;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Exceptions\QueryException;
+use SP\Core\OldCrypt;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\CustomFieldData;
 use SP\DataModel\CustomFieldDefData;
@@ -43,33 +46,91 @@
 class CustomFieldsUtil
 {
     /**
-     * Comprobar si el hash de cambios coincide con el camculado con el valor de los campos del elemento
+     * Actualizar los datos encriptados con una nueva clave
      *
-     * @param $fields
-     * @param $srcHhash
+     * @param string $currentMasterPass La clave maestra actual
+     * @param string $newMasterPassword La nueva clave maestra
      * @return bool
      */
-    public static function checkHash(&$fields, $srcHhash)
+    public static function updateCustomFieldsCrypt($currentMasterPass, $newMasterPassword)
     {
-        return (!is_array($fields) || $srcHhash === md5(implode('', $fields)));
+        $Log = new Log();
+        $LogMessage = $Log->getLogMessage();
+        $LogMessage->setAction(__('Campos Personalizados', false));
+
+        $query = /** @lang SQL */
+            'SELECT customfielddata_id, customfielddata_data, customfielddata_key FROM customFieldsData';
+
+        $Data = new QueryData();
+        $Data->setMapClassName(CustomFieldData::class);
+        $Data->setQuery($query);
+
+        /** @var CustomFieldData[] $queryRes */
+        $queryRes = DB::getResultsArray($Data);
+
+        if (count($queryRes) === 0) {
+            $LogMessage->addDescription(__('No hay datos de campos personalizados', false));
+            $Log->writeLog();
+            return true;
+        }
+
+        $LogMessage->addDescription(__('Actualizando datos encriptados', false));
+
+        $errors = [];
+        $success = [];
+
+        foreach ($queryRes as $CustomField) {
+            try {
+                $currentSecuredKey = Crypt::unlockSecuredKey($CustomField->getCustomfielddataKey(), $currentMasterPass);
+                $securedKey = Crypt::makeSecuredKey($newMasterPassword);
+
+                if (strlen($securedKey) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+                }
+
+                $query = /** @lang SQL */
+                    'UPDATE customFieldsData SET
+                customfielddata_data = ?,
+                customfielddata_key = ? 
+                WHERE customfielddata_id = ?';
+
+                $Data = new QueryData();
+                $Data->setQuery($query);
+                $Data->addParam(Crypt::encrypt(Crypt::decrypt($CustomField->getCustomfielddataData(), $currentSecuredKey, $currentMasterPass), $securedKey, $newMasterPassword));
+                $Data->addParam($securedKey);
+                $Data->addParam($CustomField->getCustomfielddataId());
+
+                DB::getQuery($Data);
+
+                $success[] = $CustomField->getCustomfielddataId();
+            } catch (\Exception $e) {
+                debugLog(__($e->getMessage()));
+
+                return false;
+            }
+        }
+
+        $LogMessage->addDetails(__('Registros no actualizados', false), implode(',', $errors));
+        $LogMessage->addDetails(__('Registros actualizados', false), implode(',', $success));
+        $Log->writeLog();
+
+        return true;
     }
 
     /**
      * Actualizar los datos encriptados con una nueva clave
      *
      * @param string $currentMasterPass La clave maestra actual
-     * @param string $newMasterPassword La nueva clave maestra
      * @return bool
-     * @throws \SP\Core\Exceptions\SPException
      */
-    public static function updateCustomFieldsCrypt($currentMasterPass, $newMasterPassword)
+    public static function updateCustomFieldsOldCrypt(&$currentMasterPass)
     {
         $Log = new Log();
         $LogMessage = $Log->getLogMessage();
         $LogMessage->setAction(__('Campos Personalizados', false));
 
         $query = /** @lang SQL */
-            'SELECT customfielddata_id, customfielddata_data, customfielddata_iv FROM customFieldsData';
+            'SELECT customfielddata_id, customfielddata_data, customfielddata_key FROM customFieldsData';
 
         $Data = new QueryData();
         $Data->setMapClassName(CustomFieldData::class);
@@ -90,52 +151,61 @@ public static function updateCustomFieldsCrypt($currentMasterPass, $newMasterPas
         $success = [];
 
         foreach ($queryRes as $CustomField) {
-            $fieldData = Crypt::getDecrypt($CustomField->getCustomfielddataData(), $CustomField->getCustomfielddataIv(), $currentMasterPass);
-            $fieldCryptData = Crypt::encryptData($fieldData, $newMasterPassword);
+            try {
+                $securedKey = Crypt::makeSecuredKey($currentMasterPass);
+                $fieldData = OldCrypt::getDecrypt($CustomField->getCustomfielddataData(), $CustomField->getCustomfielddataKey(), $currentMasterPass);
+
+                if (strlen($securedKey) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));
+                }
 
-            $query = /** @lang SQL */
-                'UPDATE customFieldsData SET
+                $query = /** @lang SQL */
+                    'UPDATE customFieldsData SET
                 customfielddata_data = ?,
-                customfielddata_iv = ? 
+                customfielddata_key = ? 
                 WHERE customfielddata_id = ?';
 
-            $Data = new QueryData();
-            $Data->setQuery($query);
-            $Data->addParam($fieldCryptData['data']);
-            $Data->addParam($fieldCryptData['iv']);
-            $Data->addParam($CustomField->getCustomfielddataId());
+                $Data = new QueryData();
+                $Data->setQuery($query);
+                $Data->addParam(Crypt::encrypt($fieldData, $securedKey, $currentMasterPass));
+                $Data->addParam($securedKey);
+                $Data->addParam($CustomField->getCustomfielddataId());
 
-            try {
                 DB::getQuery($Data);
 
                 $success[] = $CustomField->getCustomfielddataId();
-            } catch (SPException $e) {
-                $errors[] = $CustomField->getCustomfielddataId();
+            } catch (\Exception $e) {
+                debugLog(__($e->getMessage()));
+
+                return false;
             }
         }
 
         $LogMessage->addDetails(__('Registros no actualizados', false), implode(',', $errors));
         $LogMessage->addDetails(__('Registros actualizados', false), implode(',', $success));
         $Log->writeLog();
 
-        return (count($errors) === 0);
+        return true;
     }
 
     /**
      * Crear los campos personalizados de un elemento
      *
      * @param array           $customFields
      * @param CustomFieldData $CustomFieldData
-     * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \SP\Core\Exceptions\SPException
      */
     public static function addItemCustomFields(array &$customFields, CustomFieldData $CustomFieldData)
     {
-        foreach ($customFields as $id => $value) {
-            $CustomFieldData->setDefinitionId($id);
-            $CustomFieldData->setValue($value);
+        try {
+            foreach ($customFields as $id => $value) {
+                $CustomFieldData->setDefinitionId($id);
+                $CustomFieldData->setValue($value);
 
-            CustomField::getItem($CustomFieldData)->add();
+                CustomField::getItem($CustomFieldData)->add();
+            }
+        } catch (CryptoException $e) {
+            throw new SPException(SPException::SP_ERROR, __('Error interno'));
         }
     }
 
@@ -144,24 +214,26 @@ public static function addItemCustomFields(array &$customFields, CustomFieldData
      *
      * @param array           $customFields
      * @param CustomFieldData $CustomFieldData
-     * @throws \SP\Core\Exceptions\InvalidClassException
      * @throws \SP\Core\Exceptions\SPException
      */
     public static function updateItemCustomFields(array $customFields, CustomFieldData $CustomFieldData)
     {
-        foreach ($customFields as $id => $value) {
-            $CustomFieldData->setDefinitionId($id);
-            $CustomFieldData->setValue($value);
+        try {
+            foreach ($customFields as $id => $value) {
+                $CustomFieldData->setDefinitionId($id);
+                $CustomFieldData->setValue($value);
 
-            CustomField::getItem($CustomFieldData)->update();
+                CustomField::getItem($CustomFieldData)->update();
+            }
+        } catch (CryptoException $e) {
+            throw new SPException(SPException::SP_ERROR, __('Error interno'));
         }
     }
 
     /**
      * Migración de campos personalizados
      *
      * @return bool
-     * @throws \SP\Core\Exceptions\InvalidClassException
      */
     public static function migrateCustomFields()
     {
@@ -196,7 +268,7 @@ public static function migrateCustomFields()
                     'UPDATE customFieldsDef SET
                         customfielddef_module = ?,
                         customfielddef_field = ?
-                        WHERE customfielddef_id= ? LIMIT 1';
+                        WHERE customfielddef_id = ? LIMIT 1';
 
                 foreach ($oldDefs as $cf) {
                     $CustomFieldDef = Util::castToClass(CustomFieldDefData::class, $cf->customfielddef_field);

--- inc/SP/Mgmt/Files/File.class.php ---
@@ -120,7 +120,7 @@ public function delete($id)
         $Data = new QueryData();
         $Data->setQuery($query);
         $Data->addParam($id);
-        $Data->setOnErrorMessage(__('Error al eliminar archivo', false));
+        $Data->setOnErrorMessage(__('Error al eliminar el archivo', false));
 
         DB::getQuery($Data);
 

--- inc/SP/Mgmt/Profiles/ProfileUtil.class.php ---
@@ -44,9 +44,6 @@ class ProfileUtil
      * Migrar los perfiles con formato anterior a v1.2
      *
      * @return bool
-     * @throws \phpmailer\phpmailerException
-     * @throws \SP\Core\Exceptions\InvalidClassException
-     * @throws \SP\Core\Exceptions\SPException
      */
     public static function migrateProfiles()
     {

--- inc/SP/Mgmt/PublicLinks/PublicLink.class.php ---
@@ -110,6 +110,11 @@ public function update()
 
     /**
      * @return $this
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      * @throws SPException
      */
     public function add()
@@ -123,7 +128,7 @@ public function add()
         $this->itemData->setMaxCountViews(Config::getConfig()->getPublinksMaxViews());
         $this->calcDateExpire();
         $this->createLinkHash();
-        $this->createLinkPass();
+        $this->setLinkData();
 
         $query = /** @lang SQL */
             'INSERT INTO publicLinks
@@ -186,6 +191,9 @@ public function delete($id)
 
     /**
      * @return $this
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      * @throws SPException
      */
     public function refresh()
@@ -194,7 +202,7 @@ public function refresh()
 
         $this->calcDateExpire();
         $this->createLinkHash(true);
-        $this->createLinkPass();
+        $this->setLinkData();
 
         $query = /** @lang SQL */
             'UPDATE publicLinks
@@ -359,7 +367,7 @@ public function getByHash($hash)
     public function getHashForItem($itemId)
     {
         $query = /** @lang SQL */
-            'SELECT publicLink_hash FROM publicLinks WHERE publicLink_itemId = ? LIMIT 1';
+            'SELECT publicLink_id, publicLink_hash FROM publicLinks WHERE publicLink_itemId = ? LIMIT 1';
 
         $Data = new QueryData();
         $Data->setMapClassName($this->getDataModel());

--- inc/SP/Mgmt/PublicLinks/PublicLinkBase.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -26,10 +26,12 @@
 
 defined('APP_ROOT') || die();
 
+use SP\Account\Account;
 use SP\Config\Config;
-use SP\Core\Crypt;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Session as CryptSession;
 use SP\Core\Exceptions\SPException;
-use SP\Core\SessionUtil;
+use SP\DataModel\AccountExtData;
 use SP\DataModel\PublicLinkData;
 use SP\Mgmt\ItemBase;
 use SP\DataModel\PublicLinkBaseData;
@@ -71,14 +73,44 @@ public function getItemData()
      * Devolver la clave y el IV para el enlace
      *
      * @throws SPException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      */
     protected final function createLinkPass()
     {
-        $pass = Crypt::generateAesKey($this->createLinkHash());
-        $cryptPass = Crypt::encryptData(SessionUtil::getSessionMPass(), $pass);
+        $key = Config::getConfig()->getPasswordSalt() . $this->createLinkHash();
+        $securedKey = Crypt::makeSecuredKey($key);
 
-        $this->itemData->setPass($cryptPass['data']);
-        $this->itemData->setPassIV($cryptPass['iv']);
+        $this->itemData->setPass(Crypt::encrypt(CryptSession::getSessionKey(), $securedKey, $key));
+        $this->itemData->setPassIV($securedKey);
+    }
+
+    /**
+     * Obtener los datos de una cuenta y encriptarlos para el enlace
+     *
+     * @throws \Defuse\Crypto\Exception\CryptoException
+     * @throws \SP\Core\Exceptions\SPException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     */
+    protected final function setLinkData()
+    {
+        // Obtener los datos de la cuenta
+        $Account = new Account(new AccountExtData($this->itemData->getItemId()));
+        $AccountData = $Account->getDataForLink();
+
+        $key = CryptSession::getSessionKey();
+        $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $key);
+        $AccountData->setAccountPass(Crypt::decrypt($AccountData->getAccountPass(), $securedKey, $key));
+        $AccountData->setAccountKey(null);
+
+        // Encriptar los datos de la cuenta
+        $linkKey = Config::getConfig()->getPasswordSalt() . $this->createLinkHash();
+        $linkSecuredKey = Crypt::makeSecuredKey($linkKey);
+
+        $this->itemData->setData(Crypt::encrypt(serialize($AccountData), $linkSecuredKey, $linkKey));
+        $this->itemData->setPassIV($linkSecuredKey);
     }
 
     /**

--- inc/SP/Mgmt/Tracks/Track.class.php ---
@@ -0,0 +1,240 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author    nuxsmin
+ * @link      http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Mgmt\Tracks;
+
+use SP\Mgmt\ItemInterface;
+use SP\Storage\DB;
+use SP\Storage\QueryData;
+
+/**
+ * Class Track
+ *
+ * @package SP\Mgmt\Tracks
+ */
+class Track extends TrackBase implements ItemInterface
+{
+    /**
+     * @return mixed
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function add()
+    {
+        $query = /** @lang SQL */
+            'INSERT INTO track SET 
+            track_userId = ?, 
+            track_source = ?, 
+            track_time = UNIX_TIMESTAMP(),
+            track_ipv4 = ?,
+            track_ipv6 = ?';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getTrackUserId());
+        $Data->addParam($this->itemData->getTrackSource());
+        $Data->addParam($this->itemData->getTrackIpv4Bin());
+        $Data->addParam($this->itemData->getTrackIpv6Bin());
+        $Data->setOnErrorMessage(__('Error al crear track', false));
+
+        DB::getQuery($Data);
+
+        $this->itemData->setTrackId(DB::$lastId);
+
+        return $this;
+    }
+
+    /**
+     * @param $id int|array
+     * @return mixed
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function delete($id)
+    {
+        $query = /** @lang SQL */
+            'DELETE FROM track WHERE track_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getTrackId());
+        $Data->setOnErrorMessage(__('Error al eliminar track', false));
+
+        return DB::getQuery($Data);
+    }
+
+    /**
+     * @return bool
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function update()
+    {
+        $query = /** @lang SQL */
+            'UPDATE track SET 
+            track_userId = ?, 
+            track_source = ?, 
+            track_time = UNIX_TIMESTAMP(),
+            track_ipv4 = ?,
+            track_ipv6 = ? 
+            WHERE track_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getTrackUserId());
+        $Data->addParam($this->itemData->getTrackSource());
+        $Data->addParam($this->itemData->getTrackIpv4Bin());
+        $Data->addParam($this->itemData->getTrackIpv6Bin());
+        $Data->addParam($this->itemData->getTrackId());
+        $Data->setOnErrorMessage(__('Error al actualizar track', false));
+
+        return DB::getQuery($Data);
+    }
+
+    /**
+     * @param $id int
+     * @return mixed
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function getById($id)
+    {
+        $query = /** @lang SQL */
+            'SELECT track_id, 
+            track_userId, 
+            track_source, 
+            track_time,
+            track_ipv4,
+            track_ipv6 
+            FROM track 
+            WHERE track_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setMapClassName($this->getDataModel());
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getTrackId());
+        $Data->setOnErrorMessage(__('Error al obtener track', false));
+
+        return DB::getResults($Data);
+    }
+
+    /**
+     * @return array
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     */
+    public function getAll()
+    {
+        $query = /** @lang SQL */
+            'SELECT track_id, 
+            track_userId, 
+            track_source, 
+            track_time,
+            track_ipv4,
+            track_ipv6 FROM track';
+
+        $Data = new QueryData();
+        $Data->setMapClassName($this->getDataModel());
+        $Data->setQuery($query);
+        $Data->addParam($this->itemData->getTrackId());
+        $Data->setOnErrorMessage(__('Error al obtener tracks', false));
+
+        return DB::getResultsArray($Data);
+    }
+
+    /**
+     * @param $id int
+     * @return mixed
+     */
+    public function checkInUse($id)
+    {
+        // TODO: Implement checkInUse() method.
+    }
+
+    /**
+     * @return bool
+     */
+    public function checkDuplicatedOnUpdate()
+    {
+        // TODO: Implement checkDuplicatedOnUpdate() method.
+    }
+
+    /**
+     * @return bool
+     */
+    public function checkDuplicatedOnAdd()
+    {
+        // TODO: Implement checkDuplicatedOnAdd() method.
+    }
+
+    /**
+     * Eliminar elementos en lote
+     *
+     * @param array $ids
+     * @return $this
+     */
+    public function deleteBatch(array $ids)
+    {
+        // TODO: Implement deleteBatch() method.
+    }
+
+    /**
+     * Devolver los elementos con los ids especificados
+     *
+     * @param array $ids
+     * @return mixed
+     */
+    public function getByIdBatch(array $ids)
+    {
+        // TODO: Implement getByIdBatch() method.
+    }
+
+
+    /**
+     * Devuelve los tracks de un cliente desde un tiempo y origen determinados
+     *
+     * @param $time
+     * @return array
+     */
+    public function getTracksForClientFromTime($time)
+    {
+        $query = /** @lang SQL */
+            'SELECT track_id, track_userId 
+            FROM track 
+            WHERE track_time >= ? 
+            AND (track_ipv4 = ? OR track_ipv6 = ?) 
+            AND track_source = ?';
+
+        $Data = new QueryData();
+        $Data->setMapClassName($this->getDataModel());
+        $Data->setQuery($query);
+        $Data->addParam($time);
+        $Data->addParam($this->itemData->getTrackIpv4Bin());
+        $Data->addParam($this->itemData->getTrackIpv6Bin());
+        $Data->addParam($this->itemData->getTrackSource());
+        $Data->setOnErrorMessage(__('Error al obtener tracks', false));
+
+        return DB::getResultsArray($Data);
+    }
+}
\ No newline at end of file

--- inc/SP/Mgmt/Tracks/TrackBase.class.php ---
@@ -0,0 +1,65 @@
+<?php
+/**
+ * sysPass
+ *
+ * @author nuxsmin
+ * @link http://syspass.org
+ * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
+ *
+ * This file is part of sysPass.
+ *
+ * sysPass is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * sysPass is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace SP\Mgmt\Tracks;
+
+defined('APP_ROOT') || die();
+
+use SP\DataModel\TrackData;
+use SP\Mgmt\ItemBase;
+
+/**
+ * Class TrackBase
+ *
+ * @package SP\Mgmt\Tracks
+ */
+abstract class TrackBase extends ItemBase
+{
+    /** @var TrackData */
+    protected $itemData;
+
+    /**
+     * Track constructor.
+     *
+     * @param $itemData
+     * @throws \SP\Core\Exceptions\InvalidClassException
+     */
+    public function __construct($itemData = null)
+    {
+        if (!$this->dataModel) {
+            $this->setDataModel(TrackData::class);
+        }
+
+        parent::__construct($itemData);
+    }
+
+    /**
+     * Devolver los datos del elemento
+     * @return TrackData
+     */
+    public function getItemData()
+    {
+        return parent::getItemData();
+    }
+}
\ No newline at end of file

--- inc/SP/Mgmt/Users/User.class.php ---
@@ -26,6 +26,7 @@
 
 defined('APP_ROOT') || die();
 
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\UserData;
 use SP\Mgmt\ItemInterface;
@@ -53,8 +54,6 @@ public function add()
             throw new SPException(SPException::SP_INFO, __('Login/email de usuario duplicados', false));
         }
 
-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());
-
         $query = /** @lang SQL */
             'INSERT INTO usrData SET
             user_name = ?,
@@ -64,14 +63,14 @@ public function add()
             user_groupId = ?,
             user_profileId = ?,
             user_mPass = \'\',
-            user_mIV = \'\',
+            user_mKey = \'\',
             user_isAdminApp = ?,
             user_isAdminAcc = ?,
             user_isDisabled = ?,
             user_isChangePass = ?,
             user_isLdap = 0,
             user_pass = ?,
-            user_hashSalt = ?';
+            user_hashSalt = \'\'';
 
         $Data = new QueryData();
         $Data->setQuery($query);
@@ -85,8 +84,7 @@ public function add()
         $Data->addParam($this->itemData->isUserIsAdminAcc());
         $Data->addParam($this->itemData->isUserIsDisabled());
         $Data->addParam($this->itemData->isUserIsChangePass());
-        $Data->addParam($passdata['pass']);
-        $Data->addParam($passdata['salt']);
+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));
         $Data->setOnErrorMessage(__('Error al crear el usuario', false));
 
         DB::getQuery($Data);
@@ -266,20 +264,18 @@ public function checkInUse($id)
      */
     public function updatePass()
     {
-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());
-
         $query = /** @lang SQL */
             'UPDATE usrData SET
             user_pass = ?,
-            user_hashSalt = ?,
+            user_hashSalt = \'\',
             user_isChangePass = 0,
+            user_isChangedPass = 1,
             user_lastUpdate = NOW()
             WHERE user_id = ? LIMIT 1';
 
         $Data = new QueryData();
         $Data->setQuery($query);
-        $Data->addParam($passdata['pass']);
-        $Data->addParam($passdata['salt']);
+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));
         $Data->addParam($this->itemData->getUserId());
         $Data->setOnErrorMessage(__('Error al modificar la clave', false));
 
@@ -310,11 +306,16 @@ public function getById($id)
             user_lastUpdate,
             user_lastUpdateMPass,
             user_preferences,
+            user_pass,
+            user_hashSalt,
+            user_mPass,
+            user_mKey,            
             BIN(user_isAdminApp) AS user_isAdminApp,
             BIN(user_isAdminAcc) AS user_isAdminAcc,
             BIN(user_isLdap) AS user_isLdap,
             BIN(user_isDisabled) AS user_isDisabled,
             BIN(user_isChangePass) AS user_isChangePass,
+            BIN(user_isChangedPass) AS user_isChangedPass,
             BIN(user_isMigrate) AS user_isMigrate
             FROM usrData
             JOIN usrGroups ON usergroup_id = user_groupId
@@ -362,19 +363,30 @@ public function getByLogin($login)
             user_lastUpdate,
             user_lastUpdateMPass,
             user_preferences,
+            user_pass,
+            user_hashSalt,
+            user_mPass,
+            user_mKey,
             BIN(user_isAdminApp) AS user_isAdminApp,
             BIN(user_isAdminAcc) AS user_isAdminAcc,
             BIN(user_isLdap) AS user_isLdap,
             BIN(user_isDisabled) AS user_isDisabled,
             BIN(user_isChangePass) AS user_isChangePass,
+            BIN(user_isChangedPass) AS user_isChangedPass,
             BIN(user_isDisabled) AS user_isDisabled,
             BIN(user_isMigrate) AS user_isMigrate
             FROM usrData
             JOIN usrGroups ON usergroup_id = user_groupId
             WHERE user_login = ? LIMIT 1';
 
         $Data = new QueryData();
-        $Data->setMapClassName($this->getDataModel());
+
+        if (is_object($this->itemData)) {
+            $Data->setMapClass($this->itemData);
+        } else {
+            $Data->setMapClassName($this->getDataModel());
+        }
+        
         $Data->setQuery($query);
         $Data->addParam($login);
 
@@ -419,6 +431,7 @@ public function getByIdBatch(array $ids)
             BIN(user_isLdap) AS user_isLdap,
             BIN(user_isDisabled) AS user_isDisabled,
             BIN(user_isChangePass) AS user_isChangePass,
+            BIN(user_isChangedPass) AS user_isChangedPass,
             BIN(user_isMigrate) AS user_isMigrate
             FROM usrData
             JOIN usrGroups ON usergroup_id = user_groupId

--- inc/SP/Mgmt/Users/UserLdap.class.php ---
@@ -25,6 +25,7 @@
 namespace SP\Mgmt\Users;
 
 use SP\Config\Config;
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\SPException;
 use SP\Core\Messages\LogMessage;
 use SP\Log\Email;
@@ -77,7 +78,6 @@ public function add()
             throw new SPException(SPException::SP_INFO, __('Login/email de usuario duplicados', false));
         }
 
-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());
         $groupId = Config::getConfig()->getLdapDefaultGroup();
         $profileId = Config::getConfig()->getLdapDefaultProfile();
         $this->itemData->setUserIsDisabled(($groupId === 0 || $profileId === 0) ? 1 : 0);
@@ -91,14 +91,14 @@ public function add()
             user_groupId = ?,
             user_profileId = ?,
             user_mPass = \'\',
-            user_mIV = \'\',
+            user_mKey = \'\',
             user_isAdminApp = ?,
             user_isAdminAcc = ?,
             user_isDisabled = ?,
             user_isChangePass = ?,
             user_isLdap = 1,
             user_pass = ?,
-            user_hashSalt = ?';
+            user_hashSalt = \'\'';
 
         $Data = new QueryData();
         $Data->setQuery($query);
@@ -112,8 +112,7 @@ public function add()
         $Data->addParam((int)$this->itemData->isUserIsAdminAcc());
         $Data->addParam((int)$this->itemData->isUserIsDisabled());
         $Data->addParam((int)$this->itemData->isUserIsChangePass());
-        $Data->addParam($passdata['pass']);
-        $Data->addParam($passdata['salt']);
+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));
         $Data->setOnErrorMessage(__('Error al guardar los datos de LDAP', false));
 
         DB::getQuery($Data);
@@ -177,11 +176,9 @@ public function delete($id)
      */
     public function update()
     {
-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());
-
         $query = 'UPDATE usrData SET 
             user_pass = ?,
-            user_hashSalt = ?,
+            user_hashSalt = \'\',
             user_name = ?,
             user_email = ?,
             user_lastUpdate = NOW(),
@@ -190,8 +187,7 @@ public function update()
 
         $Data = new QueryData();
         $Data->setQuery($query);
-        $Data->addParam($passdata['pass']);
-        $Data->addParam($passdata['salt']);
+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));
         $Data->addParam($this->itemData->getUserName());
         $Data->addParam($this->itemData->getUserEmail());
         $Data->addParam($this->itemData->getUserLogin());

--- inc/SP/Mgmt/Users/UserMigrate.class.php ---
@@ -2,8 +2,8 @@
 /**
  * sysPass
  *
- * @author nuxsmin
- * @link http://syspass.org
+ * @author    nuxsmin
+ * @link      http://syspass.org
  * @copyright 2012-2017, Rubén Domínguez nuxsmin@$syspass.org
  *
  * This file is part of sysPass.
@@ -26,8 +26,11 @@
 
 defined('APP_ROOT') || die();
 
+use SP\Core\Crypt\Hash;
 use SP\Core\Exceptions\SPException;
 use SP\DataModel\GroupUsersData;
+use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 use SP\Log\Email;
 use SP\Log\Log;
 use SP\Mgmt\Groups\GroupUsers;
@@ -64,49 +67,51 @@ public static function checkUserIsMigrate($userLogin)
     /**
      * Actualizar la clave de un usuario desde phpPMS.
      *
-     * @param string $userLogin con el login del usuario
-     * @param string $userPass  con la clave del usuario
-     *
-     * Esta función actualiza la clave de un usuario que ha sido migrado desde phpPMS
+     * @param UserLoginData $UserData
+     * @return bool
      * @throws \SP\Core\Exceptions\SPException
-     * @throws \phpmailer\phpmailerException
-     * @throws \SP\Core\Exceptions\ConstraintException
      * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     *
+     * Esta función actualiza la clave de un usuario que ha sido migrado desde phpPMS
      */
-    public static function migrateUser($userLogin, $userPass)
+    public static function migrateUserPass(UserLoginData $UserData)
     {
-        $passdata = UserPass::makeUserPassHash($userPass);
-
-        $query = /** @lang SQL */
-            'UPDATE usrData SET
+        $passOk = ($UserData->getUserPass() === sha1($UserData->getUserHashSalt() . $UserData->getLoginPass())
+            || $UserData->getUserPass() === md5($UserData->getLoginPass())
+            || hash_equals($UserData->getUserPass(), crypt($UserData->getLoginPass(), $UserData->getUserHashSalt()))
+            || Hash::checkHashKey($UserData->getLoginPass(), $UserData->getUserPass()));
+
+        if ($passOk) {
+            $query = /** @lang SQL */
+                'UPDATE usrData SET
             user_pass = ?,
-            user_hashSalt = ?,
+            user_hashSalt = \'\',
             user_lastUpdate = NOW(),
             user_isMigrate = 0
-            WHERE user_login = ?
-            AND user_isMigrate = 1
-            AND (user_pass = SHA1(CONCAT(user_hashSalt,?))
-            OR user_pass = MD5(?)) LIMIT 1';
+            WHERE user_login = ? LIMIT 1';
 
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($passdata['pass']);
-        $Data->addParam($passdata['salt']);
-        $Data->addParam($userLogin);
-        $Data->addParam($userPass);
-        $Data->addParam($userPass);
-        $Data->setOnErrorMessage(__('Error al migrar cuenta de usuario', false));
+            $Data = new QueryData();
+            $Data->setQuery($query);
+            $Data->addParam(Hash::hashKey($UserData->getLoginPass()));
+            $Data->addParam($UserData->getLogin());
+            $Data->setOnErrorMessage(__('Error al migrar cuenta de usuario', false));
 
-        DB::getQuery($Data);
+            DB::getQuery($Data);
 
-        $Log = new Log();
-        $Log->getLogMessage()
-            ->setAction(__FUNCTION__)
-            ->addDescription(__('Usuario actualizado', false))
-            ->addDetails(__('Login', false), $userLogin);
-        $Log->writeLog();
+            $Log = new Log();
+            $Log->getLogMessage()
+                ->setAction(__FUNCTION__)
+                ->addDescription(__('Usuario actualizado', false))
+                ->addDetails(__('Login', false), $UserData->getLogin());
+            $Log->writeLog();
+
+            Email::sendEmail($Log->getLogMessage());
+
+            return true;
+        }
 
-        Email::sendEmail($Log->getLogMessage());
+        return false;
     }
 
     /**

--- inc/SP/Mgmt/Users/UserPass.class.php ---
@@ -26,15 +26,23 @@
 
 defined('APP_ROOT') || die();
 
+use Defuse\Crypto\Exception\WrongKeyOrModifiedCiphertextException;
+use SP\Config\Config;
 use SP\Config\ConfigDB;
-use SP\Core\Crypt;
+use SP\Controller\LoginController;
+use SP\Core\Crypt\Crypt;
+use SP\Core\Crypt\Hash;
+use SP\Core\Exceptions\QueryException;
 use SP\Core\Exceptions\SPException;
-use SP\Core\SessionUtil;
+use SP\Core\Upgrade\User as UpgradeUser;
+use SP\DataModel\UserData;
+use SP\DataModel\UserLoginData;
 use SP\DataModel\UserPassData;
 use SP\Log\Email;
 use SP\Log\Log;
 use SP\Storage\DB;
 use SP\Storage\QueryData;
+use SP\Core\Crypt\Session as CryptSession;
 
 /**
  * Class UserPass para la gestión de las claves de un usuario
@@ -43,10 +51,24 @@
  */
 class UserPass extends UserBase
 {
+    // La clave maestra incorrecta
+    const MPASS_WRONG = 0;
+    // La clave maestra correcta
+    const MPASS_OK = 1;
+    // La clave maestra no está guardada
+    const MPASS_NOTSET = 2;
+    // La clave maestra ha cambiado
+    const MPASS_CHANGED = 3;
+    // Comprobar la clave maestra con la calve del usuario anterior
+    const MPASS_CHECKOLD = 4;
+    /**
+     * @var bool
+     */
+    public static $gotMPass = false;
     /**
      * @var string
      */
-    protected $clearUserMPass = '';
+    private static $clearUserMPass = '';
 
     /**
      * Category constructor.
@@ -70,7 +92,7 @@ public function __construct($itemData = null)
     public static function getUserIVById($id)
     {
         $query = /** @lang SQL */
-            'SELECT user_mIV FROM usrData WHERE user_id = ? LIMIT 1';
+            'SELECT user_mKey FROM usrData WHERE user_id = ? LIMIT 1';
 
         $Data = new QueryData();
         $Data->setQuery($query);
@@ -82,15 +104,16 @@ public static function getUserIVById($id)
             return false;
         }
 
-        return $queryRes->user_mIV;
+        return $queryRes->user_mKey;
     }
 
     /**
      * Comprobar si el usuario tiene actualizada la clave maestra actual.
      *
+     * @param int $userId ID de usuario
      * @return bool
      */
-    public function checkUserUpdateMPass()
+    public static function checkUserUpdateMPass($userId)
     {
         $configMPassTime = ConfigDB::getValue('lastupdatempass');
 
@@ -104,7 +127,7 @@ public function checkUserUpdateMPass()
         $Data = new QueryData();
         $Data->setMapClassName(UserPassData::class);
         $Data->setQuery($query);
-        $Data->addParam($this->itemData->getUserId());
+        $Data->addParam($userId);
 
         /** @var UserPassData $queryRes */
         $queryRes = DB::getResults($Data);
@@ -113,205 +136,202 @@ public function checkUserUpdateMPass()
     }
 
     /**
-     * Modificar la clave de un usuario.
+     * Actualizar la clave maestra con la clave anterior del usuario
      *
-     * @param $userId
-     * @param $userPass
-     * @return $this
+     * @param string        $oldUserPass
+     * @param UserLoginData $UserData
+     * @return bool
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
+     * @throws \SP\Core\Exceptions\SPException
      * @throws \SP\Core\Exceptions\QueryException
      * @throws \SP\Core\Exceptions\ConstraintException
-     * @throws \phpmailer\phpmailerException
-     * @throws \SP\Core\Exceptions\InvalidClassException
-     * @throws \SP\Core\Exceptions\SPException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      */
-    public function updateUserPass($userId, $userPass)
+    public static function updateMasterPassFromOldPass($oldUserPass, UserLoginData $UserData)
     {
-        $passdata = self::makeUserPassHash($userPass);
-        $this->setItemData(User::getItem()->getById($userId));
-
-        $query = /** @lang SQL */
-            'UPDATE usrData SET
-            user_pass = ?,
-            user_hashSalt = ?,
-            user_isChangePass = 0,
-            user_lastUpdate = NOW() 
-            WHERE user_id = ? LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($passdata['pass']);
-        $Data->addParam($passdata['salt']);
-        $Data->addParam($userId);
-        $Data->setOnErrorMessage(__('Error al modificar la clave', false));
-
-        DB::getQuery($Data);
-
-        $Log = new Log();
-        $Log->getLogMessage()
-            ->setAction(__('Modificar Clave Usuario', false))
-            ->addDetails(__('Login', false), $this->itemData->getUserLogin());
-        $Log->writeLog();
-
-        Email::sendEmail($Log->getLogMessage());
-
-        return $this;
-    }
-
-    /**
-     * Crear la clave de un usuario.
-     *
-     * @param string $userPass con la clave del usuario
-     * @return array con la clave y salt del usuario
-     */
-    public static function makeUserPassHash($userPass)
-    {
-        $salt = Crypt::makeHashSalt();
+        if (self::loadUserMPass($UserData, $oldUserPass) === UserPass::MPASS_OK) {
+            return self::updateUserMPass(self::$clearUserMPass, $UserData);
+        }
 
-        return ['salt' => $salt, 'pass' => crypt($userPass, $salt)];
+        return UserPass::MPASS_WRONG;
     }
 
     /**
      * Comprueba la clave maestra del usuario.
      *
+     * @param UserLoginData $UserData
+     * @param string        $key Clave de cifrado
      * @return bool
+     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
+     * @throws \Defuse\Crypto\Exception\BadFormatException
      * @throws \SP\Core\Exceptions\SPException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      */
-    public function loadUserMPass()
+    public static function loadUserMPass(UserLoginData $UserData, $key = null)
     {
-        $userMPass = $this->getUserMPass();
         $configHashMPass = ConfigDB::getValue('masterPwd');
 
-        if ($userMPass === false || empty($configHashMPass)) {
-            return false;
-
-            // Comprobamos el hash de la clave del usuario con la guardada
-        } elseif (Crypt::checkHashPass($userMPass, $configHashMPass, true)) {
-            $this->clearUserMPass = $userMPass;
-
-            SessionUtil::saveSessionMPass($userMPass);
-
-            return true;
-        }
-
-        return null;
-    }
-
-    /**
-     * Desencriptar la clave maestra del usuario para la sesión.
-     *
-     * @param string $cypher Clave de cifrado
-     * @return false|string Devuelve bool se hay error o string si se devuelve la clave
-     */
-    public function getUserMPass($cypher = null)
-    {
-        $query = /** @lang SQL */
-            'SELECT user_mPass, user_mIV, user_lastUpdateMPass FROM usrData WHERE user_id = ? LIMIT 1';
-
-        $Data = new QueryData();
-        $Data->setQuery($query);
-        $Data->addParam($this->itemData->getUserId());
-
-        $queryRes = DB::getResults($Data);
-
-        if ($queryRes === false
-            || empty($queryRes->user_mPass)
-            || empty($queryRes->user_mIV)
-            || $queryRes->user_lastUpdateMPass < ConfigDB::getValue('lastupdatempass')
+        if (empty($configHashMPass)
+            || empty($UserData->getUserMPass())
+            || empty($UserData->getUserMKey())
         ) {
-            return false;
+            return self::MPASS_NOTSET;
+        } elseif ($UserData->getUserLastUpdateMPass() < ConfigDB::getValue('lastupdatempass')) {
+            return self::MPASS_CHANGED;
+        } elseif ($UserData->isUserIsMigrate() === 1) {
+            return UpgradeUser::upgradeMasterKey($UserData) ? self::MPASS_OK : self::MPASS_WRONG;
+        } elseif ($key === null && $UserData->isUserIsChangedPass() === 1) {
+            return self::MPASS_CHECKOLD;
+        } else {
+            try {
+                $securedKey = Crypt::unlockSecuredKey($UserData->getUserMKey(), self::getKey($UserData, $key));
+                $userMPass = Crypt::decrypt($UserData->getUserMPass(), $securedKey, self::getKey($UserData, $key));
+
+                // Comprobamos el hash de la clave del usuario con la guardada
+                if (Hash::checkHashKey($userMPass, $configHashMPass)) {
+                    self::$gotMPass = true;
+                    self::$clearUserMPass = $userMPass;
+
+                    CryptSession::saveSessionKey($userMPass);
+
+                    return self::MPASS_OK;
+                }
+            } catch (WrongKeyOrModifiedCiphertextException $e) {
+                return self::MPASS_CHECKOLD;
+            }
         }
 
-        $this->itemData->setUserMPass($queryRes->user_mPass);
-        $this->itemData->setUserMIV($queryRes->user_mIV);
-
-        return Crypt::getDecrypt($queryRes->user_mPass, $queryRes->user_mIV, $this->getCypherPass($cypher));
+        return self::MPASS_WRONG;
     }
 
     /**
      * Obtener una clave de cifrado basada en la clave del usuario y un salt.
      *
-     * @param string $cypher Clave de cifrado
+     * @param UserLoginData $UserData
+     * @param string        $key Clave de cifrado
      * @return string con la clave de cifrado
      */
-    private function getCypherPass($cypher = null)
-    {
-        $pass = $cypher === null ? $this->itemData->getUserPass() : $cypher;
-
-        return Crypt::generateAesKey($pass . $this->itemData->getUserLogin());
-    }
-
-    /**
-     * @return string
-     */
-    public function getClearUserMPass()
-    {
-        return $this->clearUserMPass;
-    }
-
-    /**
-     * Actualizar la clave maestra con la clave anterior del usuario
-     *
-     * @param $oldUserPass
-     * @return bool
-     * @throws \SP\Core\Exceptions\SPException
-     */
-    public function updateMasterPass($oldUserPass)
+    private static function getKey(UserLoginData $UserData, $key = null)
     {
-        $masterPass = $this->getUserMPass($oldUserPass);
-
-        if ($masterPass) {
-            return $this->updateUserMPass($masterPass);
-        }
+        $pass = $key === null ? $UserData->getLoginPass() : $key;
 
-        return false;
+        return $pass . $UserData->getLogin() . Config::getConfig()->getPasswordSalt();
     }
 
     /**
      * Actualizar la clave maestra del usuario en la BBDD.
      *
-     * @param string $masterPwd con la clave maestra
+     * @param string                 $userMPass con la clave maestra
+     * @param UserData|UserLoginData $UserData  $UserData
      * @return bool
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \Defuse\Crypto\Exception\CryptoException
      * @throws \SP\Core\Exceptions\SPException
+     * @throws QueryException
      */
-    public function updateUserMPass($masterPwd)
+    public static function updateUserMPass($userMPass, UserLoginData $UserData)
     {
         $configHashMPass = ConfigDB::getValue('masterPwd');
 
         if ($configHashMPass === false) {
-            return false;
+            return self::MPASS_NOTSET;
         } elseif (null === $configHashMPass) {
-            $configHashMPass = Crypt::mkHashPassword($masterPwd);
+            $configHashMPass = Hash::hashKey($userMPass);
             ConfigDB::setValue('masterPwd', $configHashMPass);
         }
 
-        if (Crypt::checkHashPass($masterPwd, $configHashMPass, true)) {
-            $cryptMPass = Crypt::mkCustomMPassEncrypt($this->getCypherPass(), $masterPwd);
+        if (Hash::checkHashKey($userMPass, $configHashMPass)
+            || \SP\Core\Upgrade\Crypt::migrateHash($userMPass)
+        ) {
+            $securedKey = Crypt::makeSecuredKey(self::getKey($UserData));
+            $cryptMPass = Crypt::encrypt($userMPass, $securedKey, self::getKey($UserData));
 
             if (!empty($cryptMPass)) {
+                if (strlen($securedKey) > 1000 || strlen($cryptMPass) > 1000) {
+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false), '', LoginController::STATUS_INTERNAL_ERROR);
+                }
+
                 $query = /** @lang SQL */
                     'UPDATE usrData SET 
                     user_mPass = ?,
-                    user_mIV = ?,
-                    user_lastUpdateMPass = UNIX_TIMESTAMP() 
+                    user_mKey = ?,
+                    user_lastUpdateMPass = UNIX_TIMESTAMP(),
+                    user_isMigrate = 0,
+                    user_isChangedPass = 0 
                     WHERE user_id = ? LIMIT 1';
 
                 $Data = new QueryData();
                 $Data->setQuery($query);
-                $Data->addParam($cryptMPass[0]);
-                $Data->addParam($cryptMPass[1]);
-                $Data->addParam($this->itemData->getUserId());
+                $Data->addParam($cryptMPass);
+                $Data->addParam($securedKey);
+                $Data->addParam($UserData->getUserId());
 
-                $this->clearUserMPass = $masterPwd;
+                self::$clearUserMPass = $userMPass;
+                self::$gotMPass = true;
 
-                $this->itemData->setUserMPass($cryptMPass[0]);
-                $this->itemData->setUserMIV($cryptMPass[1]);
+                CryptSession::saveSessionKey($userMPass);
+
+                $UserData->setUserMPass($cryptMPass);
+                $UserData->setUserMKey($securedKey);
 
                 DB::getQuery($Data);
 
-                return true;
+                return self::MPASS_OK;
             }
         }
 
-        return false;
+        return self::MPASS_WRONG;
+    }
+
+    /**
+     * @return string
+     */
+    public static function getClearUserMPass()
+    {
+        return self::$clearUserMPass;
+    }
+
+    /**
+     * Modificar la clave de un usuario.
+     *
+     * @param $userId
+     * @param $userPass
+     * @return $this
+     * @throws \SP\Core\Exceptions\QueryException
+     * @throws \SP\Core\Exceptions\ConstraintException
+     * @throws \phpmailer\phpmailerException
+     * @throws \SP\Core\Exceptions\InvalidClassException
+     * @throws \SP\Core\Exceptions\SPException
+     */
+    public function updateUserPass($userId, $userPass)
+    {
+        $this->setItemData(User::getItem()->getById($userId));
+
+        $query = /** @lang SQL */
+            'UPDATE usrData SET
+            user_pass = ?,
+            user_hashSalt = \'\',
+            user_isChangePass = 0,
+            user_lastUpdate = NOW() 
+            WHERE user_id = ? LIMIT 1';
+
+        $Data = new QueryData();
+        $Data->setQuery($query);
+        $Data->addParam(Hash::hashKey($userPass));
+        $Data->addParam($userId);
+        $Data->setOnErrorMessage(__('Error al modificar la clave', false));
+
+        DB::getQuery($Data);
+
+        $Log = new Log();
+        $Log->getLogMessage()
+            ->setAction(__('Modificar Clave Usuario', false))
+            ->addDetails(__('Login', false), $this->itemData->getUserLogin());
+        $Log->writeLog();
+
+        Email::sendEmail($Log->getLogMessage());
+
+        return $this;
     }
 }
\ No newline at end of file

--- inc/SP/Mgmt/Users/UserPreferencesUtil.class.php ---
@@ -48,8 +48,6 @@ class UserPreferencesUtil
      *
      * @return bool
      * @throws \SP\Core\Exceptions\SPException
-     * @throws \SP\Core\Exceptions\InvalidClassException
-     * @throws \InvalidArgumentException
      */
     public static function migrate()
     {
@@ -93,8 +91,6 @@ public static function migrate()
      *
      * @param UserData $UserData
      * @throws \SP\Core\Exceptions\SPException
-     * @throws \SP\Core\Exceptions\InvalidClassException
-     * @throws \InvalidArgumentException
      */
     protected static function migrateTwoFA(UserData $UserData)
     {

--- inc/SP/Storage/DB.class.php ---
@@ -110,7 +110,7 @@ public static function getResults(QueryData $queryData)
         } catch (SPException $e) {
             $queryData->setQueryStatus($e->getCode());
 
-            self::logDBException($queryData->getQuery(), $e->getMessage(), $e->getCode(), __FUNCTION__);
+            self::logDBException($queryData->getQuery(), $e, __FUNCTION__);
             return false;
         }
 
@@ -146,12 +146,8 @@ public function doQuery(QueryData $queryData, $getRawData = false)
         // Limpiar valores de caché
         $this->lastResult = [];
 
-        try {
-            /** @var PDOStatement $queryRes */
-            $queryRes = $this->prepareQueryData($queryData);
-        } catch (SPException $e) {
-            throw $e;
-        }
+        /** @var PDOStatement $queryRes */
+        $queryRes = $this->prepareQueryData($queryData);
 
         if ($isSelect) {
             if ($getRawData) {
@@ -250,7 +246,7 @@ private function prepareQueryData(QueryData $queryData, $isCount = false)
             debugLog('Exception: ' . $e->getMessage());
             debugLog(ob_get_clean());
 
-            throw new SPException(SPException::SP_CRITICAL, $e->getMessage(), '', $e->getCode(), $e);
+            throw new SPException(SPException::SP_CRITICAL, $e->getMessage(), $e->getCode());
         }
     }
 
@@ -267,34 +263,27 @@ private function getFullRowCount(QueryData $queryData)
             return 0;
         }
 
-        try {
-            $queryRes = $this->prepareQueryData($queryData, true);
-            $num = (int)$queryRes->fetchColumn();
-            $queryRes->closeCursor();
-            $queryData->setQueryNumRows($num);
-        } catch (SPException $e) {
-            debugLog('Exception: ' . $e->getMessage());
-
-            throw $e;
-        }
+        $queryRes = $this->prepareQueryData($queryData, true);
+        $num = (int)$queryRes->fetchColumn();
+        $queryRes->closeCursor();
+        $queryData->setQueryNumRows($num);
     }
 
     /**
      * Método para registar los eventos de BD en el log
      *
-     * @param $query     string  La consulta que genera el error
-     * @param $errorMsg  string  El mensaje de error
-     * @param $errorCode int     El código de error
-     * @param $queryFunction
+     * @param string     $query La consulta que genera el error
+     * @param \Exception $e
+     * @param string     $queryFunction
      */
-    private static function logDBException($query, $errorMsg, $errorCode, $queryFunction)
+    private static function logDBException($query, \Exception $e, $queryFunction)
     {
         $caller = Util::traceLastCall($queryFunction);
 
         $LogMessage = new LogMessage();
         $LogMessage->setAction($caller);
         $LogMessage->addDescription(__('Error en la consulta', false));
-        $LogMessage->addDescription(sprintf('%s (%s)', $errorMsg, $errorCode));
+        $LogMessage->addDescription(sprintf('%s (%s)', $e->getMessage(), $e->getCode()));
         $LogMessage->addDetails('SQL', DBUtil::escape($query));
 
         debugLog($LogMessage->getDescription(), true);
@@ -321,7 +310,7 @@ public static function getResultsRaw(QueryData $queryData)
             $db = new DB();
             return $db->doQuery($queryData, true);
         } catch (SPException $e) {
-            self::logDBException($queryData->getQuery(), $e->getMessage(), $e->getCode(), __FUNCTION__);
+            self::logDBException($queryData->getQuery(), $e, __FUNCTION__);
 
             throw $e;
         }
@@ -355,7 +344,7 @@ public static function getQuery(QueryData $queryData)
         } catch (SPException $e) {
             $queryData->setQueryStatus($e->getCode());
 
-            self::logDBException($queryData->getQuery(), $e->getMessage(), $e->getCode(), __FUNCTION__);
+            self::logDBException($queryData->getQuery(), $e, __FUNCTION__);
 
             if ($e->getCode() === 23000) {
                 throw new ConstraintException(SPException::SP_ERROR, __('Restricción de integridad', false), $e->getMessage(), $e->getCode());

--- inc/SP/Util/Json.class.php ---
@@ -38,14 +38,22 @@ class Json
     /**
      * Devuelve una respuesta en formato JSON con el estado y el mensaje.
      *
-     * @param JsonResponse $json
+     * @param JsonResponse $JsonResponse
      * @return bool
-     * @throws \SP\Core\Exceptions\SPException
      */
-    public static function returnJson(JsonResponse $json)
+    public static function returnJson(JsonResponse $JsonResponse)
     {
         header('Content-type: application/json');
-        exit(self::getJson($json));
+
+        try {
+            exit(self::getJson($JsonResponse));
+        } catch (SPException $e) {
+            $JsonResponse = new JsonResponse();
+            $JsonResponse->setDescription($e->getMessage());
+            $JsonResponse->addMessage($e->getHint());
+
+            exit(json_encode($JsonResponse));
+        }
     }
 
     /**

--- inc/SP/Util/Util.class.php ---
@@ -43,7 +43,7 @@ class Util
     /**
      * Generar una clave aleatoria
      *
-     * @param int $length Longitud de la clave
+     * @param int  $length     Longitud de la clave
      * @param bool $useNumbers Usar números
      * @param bool $useSpecial Usar carácteres especiales
      * @param bool $checKStrength
@@ -121,9 +121,13 @@ public static function randomPassword($length = 16, $useNumbers = true, $useSpec
      */
     public static function generateRandomBytes($length = 30)
     {
+        if (function_exists('random_bytes')) {
+            return bin2hex(random_bytes($length));
+        }
+
         // Try to use openssl_random_pseudo_bytes
         if (function_exists('openssl_random_pseudo_bytes')) {
-            $pseudo_byte = bin2hex(openssl_random_pseudo_bytes($length));
+            $pseudo_byte = bin2hex(openssl_random_pseudo_bytes($length, $strong));
             return substr($pseudo_byte, 0, $length); // Truncate it to match the length
         }
 
@@ -174,7 +178,7 @@ public static function init_var($s, $d = '')
      */
     public static function getVersionString()
     {
-        return '2.0';
+        return '2.1';
     }
 
     /**
@@ -242,10 +246,10 @@ public static function checkUpdates()
     /**
      * Obtener datos desde una URL usando CURL
      *
-     * @param string $url
-     * @param array $data
+     * @param string    $url
+     * @param array     $data
      * @param bool|null $useCookie
-     * @param bool $weak
+     * @param bool      $weak
      * @return bool|string
      * @throws SPException
      */
@@ -368,8 +372,8 @@ public static function getAppInfo($index = null)
      */
     public static function getVersion($retBuild = false)
     {
-        $build = '17022001';
-        $version = [2, 0, 0];
+        $build = '17022601';
+        $version = [2, 1, 0];
 
         if ($retBuild) {
             $version[] = $build;
@@ -449,8 +453,8 @@ public static function getMaxUpload()
      * such as 'false','N','yes','on','off', etc.
      *
      * @author Samuel Levy <sam+nospam@samuellevy.com>
-     * @param mixed $in The variable to check
-     * @param bool $strict If set to false, consider everything that is not false to
+     * @param mixed $in     The variable to check
+     * @param bool  $strict If set to false, consider everything that is not false to
      *                      be true.
      * @return bool The boolean equivalent or null (if strict, and no exact equivalent)
      */
@@ -524,7 +528,7 @@ public static function getServerUrl()
     /**
      * Cast an object to another class, keeping the properties, but changing the methods
      *
-     * @param string $class Class name
+     * @param string        $class Class name
      * @param string|object $object
      * @return mixed
      * @link http://blog.jasny.net/articles/a-dark-corner-of-php-class-casting/
@@ -580,9 +584,9 @@ public static function traceLastCall($function = null)
     /**
      * Comprobar si un valor existe en un array de objetos
      *
-     * @param array $objectArray
+     * @param array  $objectArray
      * @param string $method
-     * @param mixed $value
+     * @param mixed  $value
      * @return bool
      */
     public static function checkInObjectArray(array $objectArray, $method, $value)
@@ -598,6 +602,7 @@ public static function checkInObjectArray(array $objectArray, $method, $value)
 
     /**
      * Bloquear la aplicación
+     *
      * @param bool $setMaintenance
      */
     public static function lockApp($setMaintenance = true)
@@ -612,6 +617,7 @@ public static function lockApp($setMaintenance = true)
 
     /**
      * Desbloquear la aplicación
+     *
      * @param bool $unsetMaintenance
      */
     public static function unlockApp($unsetMaintenance = true)
@@ -633,4 +639,51 @@ public static function getAppLock()
     {
         return (int)ConfigDB::getValue('lock', 0);
     }
+
+    /**
+     * Devolver el tiempo aproximado en segundos de una operación
+     *
+     * @param $startTime
+     * @param $numItems
+     * @param $totalItems
+     *
+     * @return array Con el tiempo estimado y los elementos por segundo
+     */
+    public static function getETA($startTime, $numItems, $totalItems)
+    {
+        if ($numItems > 0 && $totalItems > 0) {
+            $runtime = time() - $startTime;
+            $eta = (int)((($totalItems * $runtime) / $numItems) - $runtime);
+
+            return [$eta, $numItems / $runtime];
+        }
+
+        return [0, 0];
+    }
+
+    /**
+     * Comprueba y devuelve un directorio temporal válido
+     *
+     * @return bool|string
+     */
+    public static function getTempDir()
+    {
+        $sysTmp = sys_get_temp_dir();
+        $appTmp = Init::$SERVERROOT . DIRECTORY_SEPARATOR . 'tmp';
+        $file = 'syspass.test';
+
+        if (file_exists($appTmp . DIRECTORY_SEPARATOR . $file)) {
+            return $appTmp;
+        } elseif (file_exists($sysTmp . DIRECTORY_SEPARATOR . $file)) {
+            return $sysTmp;
+        }
+
+        if (is_dir($appTmp) || @mkdir($appTmp)) {
+            if (touch($appTmp . DIRECTORY_SEPARATOR . $file)) {
+                return $appTmp;
+            }
+        }
+
+        return touch($sysTmp . DIRECTORY_SEPARATOR . $file) ? $sysTmp : false;
+    }
 }
\ No newline at end of file

--- inc/sql/21017022601.sql ---
@@ -0,0 +1,26 @@
+ALTER TABLE `accounts`
+  CHANGE COLUMN `account_pass` `account_pass` VARBINARY(1000) NOT NULL,
+  CHANGE COLUMN `account_IV` `account_key` VARBINARY(1000) NOT NULL;
+ALTER TABLE `accHistory`
+  CHANGE COLUMN `acchistory_IV` `acchistory_key` VARBINARY(1000) NOT NULL ;
+ALTER TABLE `customFieldsData`
+  CHANGE COLUMN `customfielddata_iv` `customfielddata_key` VARBINARY(1000) NOT NULL;
+ALTER TABLE `usrData`
+  CHANGE COLUMN `user_mPass` `user_mPass` VARBINARY(1000) NULL DEFAULT NULL,
+  CHANGE COLUMN `user_mIV` `user_mKey` VARBINARY(1000) NULL DEFAULT NULL;
+ALTER TABLE `authTokens`
+  ADD COLUMN `authtoken_vault` VARBINARY(2000) NULL,
+  ADD COLUMN `authtoken_hash` VARBINARY(100) NULL;
+CREATE TABLE `track` (
+  `track_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
+  `track_userId` SMALLINT(5) UNSIGNED NULL,
+  `track_source` VARCHAR(100) NOT NULL,
+  `track_time` INT UNSIGNED NOT NULL,
+  `track_ipv4` BINARY(4) NOT NULL,
+  `track_ipv6` BINARY(16) NULL,
+  PRIMARY KEY (`track_id`),
+  INDEX `IDX_userId` (`track_userId` ASC),
+  INDEX `IDX_time-ip-source` (`track_time` ASC, `track_ipv4` ASC, `track_ipv6` ASC, `track_source` ASC)
+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;
+ALTER TABLE `usrData` ADD COLUMN `user_isChangedPass` BIT(1) NULL DEFAULT b'0' AFTER `user_isChangePass`;
+

--- inc/sql/dbstructure.sql ---
@@ -19,7 +19,7 @@ CREATE TABLE `customers` (
   `customer_description` varchar(255) DEFAULT NULL,
   PRIMARY KEY (`customer_id`),
   KEY `IDX_name` (`customer_name`,`customer_hash`)
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `categories`;
@@ -31,7 +31,7 @@ CREATE TABLE `categories` (
   `category_hash` varbinary(40) NOT NULL,
   `category_description` varchar(255) DEFAULT NULL,
   PRIMARY KEY (`category_id`)
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `usrGroups`;
@@ -42,7 +42,7 @@ CREATE TABLE `usrGroups` (
   `usergroup_name` varchar(50) NOT NULL,
   `usergroup_description` varchar(255) DEFAULT NULL,
   PRIMARY KEY (`usergroup_id`)
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `usrProfiles`;
@@ -53,7 +53,7 @@ CREATE TABLE `usrProfiles` (
   `userprofile_name` varchar(45) NOT NULL,
   `userProfile_profile` blob NOT NULL,
   PRIMARY KEY (`userprofile_id`)
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `usrData`;
@@ -65,9 +65,9 @@ CREATE TABLE `usrData` (
   `user_groupId` smallint(3) unsigned NOT NULL,
   `user_secGroupId` smallint(3) unsigned DEFAULT NULL,
   `user_login` varchar(50) NOT NULL,
-  `user_pass` varbinary(255) NOT NULL,
-  `user_mPass` varbinary(255) DEFAULT NULL,
-  `user_mIV` varbinary(32) NOT NULL,
+  `user_pass` varbinary(1000) NOT NULL,
+  `user_mPass` varbinary(1000) DEFAULT NULL,
+  `user_mKey` varbinary(1000) NOT NULL,
   `user_email` varchar(80) DEFAULT NULL,
   `user_notes` text,
   `user_count` int(10) unsigned NOT NULL DEFAULT '0',
@@ -82,6 +82,7 @@ CREATE TABLE `usrData` (
   `user_hashSalt` varbinary(128) NOT NULL,
   `user_isMigrate` bit(1) DEFAULT b'0',
   `user_isChangePass` bit(1) DEFAULT b'0',
+  `user_isChangedPass` bit(1) DEFAULT b'0',
   `user_preferences` blob,
   PRIMARY KEY (`user_id`),
   UNIQUE KEY `IDX_login` (`user_login`),
@@ -90,7 +91,7 @@ CREATE TABLE `usrData` (
   KEY `fk_usrData_profiles_id_idx` (`user_profileId`),
   CONSTRAINT `fk_usrData_groups_id` FOREIGN KEY (`user_groupId`) REFERENCES `usrGroups` (`usergroup_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
   CONSTRAINT `fk_usrData_profiles_id` FOREIGN KEY (`user_profileId`) REFERENCES `usrProfiles` (`userprofile_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `accounts`;
@@ -106,8 +107,8 @@ CREATE TABLE `accounts` (
   `account_categoryId` smallint(5) unsigned NOT NULL,
   `account_login` varchar(50) DEFAULT NULL,
   `account_url` varchar(255) DEFAULT NULL,
-  `account_pass` varbinary(255) NOT NULL,
-  `account_IV` varbinary(32) NOT NULL,
+  `account_pass` varbinary(1000) NOT NULL,
+  `account_key` varbinary(1000) NOT NULL,
   `account_notes` text,
   `account_countView` int(10) unsigned NOT NULL DEFAULT '0',
   `account_countDecrypt` int(10) unsigned NOT NULL DEFAULT '0',
@@ -131,7 +132,7 @@ CREATE TABLE `accounts` (
   CONSTRAINT `fk_accounts_user_edit_id` FOREIGN KEY (`account_userEditId`) REFERENCES `usrData` (`user_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
   CONSTRAINT `fk_accounts_customer_id` FOREIGN KEY (`account_customerId`) REFERENCES `customers` (`customer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
   CONSTRAINT `fk_accounts_userGroup_id` FOREIGN KEY (`account_userGroupId`) REFERENCES `usrGroups` (`usergroup_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `accFavorites`;
@@ -161,7 +162,7 @@ CREATE TABLE `accFiles` (
   PRIMARY KEY (`accfile_id`),
   KEY `IDX_accountId` (`accfile_accountId`),
   CONSTRAINT `fk_accFiles_accounts_id` FOREIGN KEY (`accfile_accountId`) REFERENCES `accounts` (`account_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `accGroups`;
@@ -191,8 +192,8 @@ CREATE TABLE `accHistory` (
   `acchistory_categoryId` smallint(5) unsigned NOT NULL,
   `acchistory_login` varchar(50) NOT NULL,
   `acchistory_url` varchar(255) DEFAULT NULL,
-  `acchistory_pass` varbinary(255) NOT NULL,
-  `acchistory_IV` varbinary(32) NOT NULL,
+  `acchistory_pass` varbinary(500) NOT NULL,
+  `acchistory_key` varbinary(1000) NOT NULL,
   `acchistory_notes` text NOT NULL,
   `acchistory_countView` int(10) unsigned NOT NULL DEFAULT '0',
   `acchistory_countDecrypt` int(10) unsigned NOT NULL DEFAULT '0',
@@ -219,7 +220,7 @@ CREATE TABLE `accHistory` (
   CONSTRAINT `fk_accHistory_category_id` FOREIGN KEY (`acchistory_categoryId`) REFERENCES `categories` (`category_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
   CONSTRAINT `fk_accHistory_customer_id` FOREIGN KEY (`acchistory_customerId`) REFERENCES `customers` (`customer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
   CONSTRAINT `fk_accHistory_userGroup_id` FOREIGN KEY (`acchistory_userGroupId`) REFERENCES `usrGroups` (`usergroup_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `tags`;
@@ -232,7 +233,7 @@ CREATE TABLE `tags` (
   PRIMARY KEY (`tag_id`),
   UNIQUE KEY `tag_hash_UNIQUE` (`tag_hash`),
   KEY `IDX_name` (`tag_name`)
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `accTags`;
@@ -271,14 +272,16 @@ CREATE TABLE `authTokens` (
   `authtoken_actionId` smallint(5) unsigned NOT NULL,
   `authtoken_createdBy` smallint(5) unsigned NOT NULL,
   `authtoken_startDate` int(10) unsigned NOT NULL,
+  `authtoken_vault` varbinary(2000) NULL,
+  `authtoken_hash` varbinary(1000) NULL,
   PRIMARY KEY (`authtoken_id`),
   UNIQUE KEY `unique_authtoken_id` (`authtoken_id`),
   KEY `IDX_checkToken` (`authtoken_userId`,`authtoken_actionId`,`authtoken_token`),
   KEY `fk_authTokens_users_id_idx` (`authtoken_userId`,`authtoken_createdBy`),
   KEY `fk_authTokens_users_createdby_id` (`authtoken_createdBy`),
   CONSTRAINT `fk_authTokens_user_id` FOREIGN KEY (`authtoken_userId`) REFERENCES `usrData` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
   CONSTRAINT `fk_authTokens_createdBy_id` FOREIGN KEY (`authtoken_createdBy`) REFERENCES `usrData` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `config`;
@@ -300,7 +303,7 @@ CREATE TABLE `customFieldsData` (
   `customfielddata_itemId` int(10) unsigned NOT NULL,
   `customfielddata_defId` int(10) unsigned NOT NULL,
   `customfielddata_data` longblob,
-  `customfielddata_iv` varbinary(128) DEFAULT NULL,
+  `customfielddata_key` varbinary(1000) DEFAULT NULL,
   PRIMARY KEY (`customfielddata_id`),
   KEY `IDX_DEFID` (`customfielddata_defId`),
   KEY `IDX_DELETE` (`customfielddata_itemId`,`customfielddata_moduleId`),
@@ -335,7 +338,7 @@ CREATE TABLE `log` (
   `log_description` text,
   `log_level` varchar(20) NOT NULL,
   PRIMARY KEY (`log_id`)
-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `publicLinks`;
@@ -391,7 +394,8 @@ CREATE TABLE `plugins` (
   `plugin_data` VARBINARY(5000) NULL,
   `plugin_enabled` BIT(1) NOT NULL DEFAULT b'0',
   PRIMARY KEY (`plugin_id`),
-  UNIQUE INDEX `plugin_name_UNIQUE` (`plugin_name` ASC));
+  UNIQUE INDEX `plugin_name_UNIQUE` (`plugin_name` ASC)
+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `notices`;
@@ -409,7 +413,24 @@ CREATE TABLE `notices` (
   `notice_onlyAdmin` BIT(1) NULL DEFAULT b'0',
   PRIMARY KEY (`notice_id`),
   INDEX `IDX_userId` (`notice_userId` ASC, `notice_checked` ASC, `notice_date` ASC),
-  INDEX `IDX_component` (`notice_component` ASC, `notice_date` ASC, `notice_checked` ASC, `notice_userId` ASC));
+  INDEX `IDX_component` (`notice_component` ASC, `notice_date` ASC, `notice_checked` ASC, `notice_userId` ASC)
+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;
+/*!40101 SET character_set_client = @saved_cs_client */;
+
+DROP TABLE IF EXISTS `track`;
+/*!40101 SET @saved_cs_client     = @@character_set_client */;
+/*!40101 SET character_set_client = utf8 */;
+CREATE TABLE `track` (
+  `track_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
+  `track_userId` SMALLINT(5) UNSIGNED NULL,
+  `track_source` VARCHAR(100) NOT NULL,
+  `track_time` INT UNSIGNED NOT NULL,
+  `track_ipv4` BINARY(4) NOT NULL,
+  `track_ipv6` BINARY(16) NULL,
+  PRIMARY KEY (`track_id`),
+  INDEX `IDX_userId` (`track_userId` ASC),
+  INDEX `IDX_time-ip-source` (`track_time` ASC, `track_ipv4` ASC, `track_ipv6` ASC, `track_source` ASC)
+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;
 /*!40101 SET character_set_client = @saved_cs_client */;
 
 DROP TABLE IF EXISTS `account_data_v`;

--- inc/themes/material-blue/css/styles.css ---
@@ -153,6 +153,18 @@ pre, code, samp, kbd {
       position: absolute;
       top: 50%;
       left: 50%; }
+    #wrap-loading.overlay-full #taskStatus {
+      display: block; }
+  #wrap-loading #taskStatus {
+    display: none;
+    position: absolute;
+    left: 0;
+    top: 55%;
+    width: 100%;
+    text-align: center;
+    color: white;
+    background-color: rgba(0, 0, 0, 0.5);
+    padding: 1em 0; }
 
 #container {
   margin: auto;
@@ -530,8 +542,8 @@ pre, code, samp, kbd {
   padding: .3em 0; }
 
 #box-popup {
-  min-width: 25em;
-  max-width: 50em;
+  min-width: 30em;
+  max-width: 60em;
   margin: 5em auto;
   padding: 0;
   background-color: #fff; }

--- inc/themes/material-blue/css/styles.css.map ---
@@ -1,6 +1,6 @@
 {
 "version": 3,
-"mappings": "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",
+"mappings": "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",
 "sources": ["_elements.scss","_base.scss","styles.scss","_login.scss"],
 "names": [],
 "file": "styles.css"

--- inc/themes/material-blue/css/styles.min.css ---
@@ -1 +1 @@
-html,body{margin:0;padding:0;text-align:left;background-color:#f5f5f5;color:#555;font-size:12px;font-weight:normal;box-sizing:border-box}*{font-family:"Roboto Regular",Verdana,Tahoma,sans-serif;box-sizing:inherit}*:before,*:after{box-sizing:inherit}table{font-size:11px;border-spacing:0}table th{border-bottom:2px solid transparent;vertical-align:middle}table th .icon{width:24px;height:24px}table tr{height:20px}table tr.odd{background-color:#f9f9f9}table tr.even>td,table tr.odd>td{border-bottom:1px solid #d9d9d9!important}table tr.even:hover,table tr.odd:hover{background-color:#e8ff99}table td{padding:3px}table td.txtCliente{font-weight:bold;text-align:center}form{font-size:11px;margin:0}input.inputImg,img.inputImg{background-color:transparent!important;width:24px!important;height:24px!important;border:0;vertical-align:middle;margin:0 .5em}input.txtFile{width:200px}input.txtLong{width:300px}textarea{width:350px;resize:none}select.files{width:250px}input.spinner{width:5em}img{margin:0;padding:0;border:0;cursor:pointer}img.inputImgMini{background-color:transparent!important;width:16px!important;height:16px!important;margin:0 5px 0 5px;border:0;vertical-align:middle}i{cursor:pointer}form .form-field{display:flex;justify-content:space-between}form .form-field>label{min-width:12em;padding:.5em 0;font-size:16px;align-self:center}form .form-field>div{width:100%;align-self:center}a{text-decoration:none;color:#536dfe}a:visited{text-decoration:none;color:#536dfe}a:hover,a:active,a:focus{text-decoration:none;cursor:pointer}pre,code,samp,kbd{font-family:Consolas,"Andale Mono WT","Andale Mono","Bitstream Vera Sans Mono","Nimbus Mono L",Monaco,"Courier New",monospace;font-size:1em;direction:ltr;text-align:left;background-color:#fbfaf9;color:#333;box-shadow:inset 0 0 .3em #ccc;border-radius:2px}#nojs{width:80%;text-align:center;vertical-align:middle;margin:10px auto;padding:3px;background-color:#ef5350;color:white;font-weight:bold;font-size:14px}#wrap{height:auto!important;min-height:100%;width:100%;background-color:#f5f5f5}#wrap-loading{position:fixed;z-index:9999;top:50%;left:50%;padding:1em;background-color:rgba(255,255,255,0.8);display:none;border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}#wrap-loading.overlay-full{top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,0.5)}#wrap-loading.overlay-full #loading{position:absolute;top:50%;left:50%}#container{margin:auto;width:100%}#container.login{padding-top:5%}#container.error,#container.install,#container.passreset{width:100%}#container .logo{height:64px}#container #actions-bar{z-index:100;display:flex;justify-content:space-between;position:fixed;border:0 none;top:0;left:0;width:100%;padding:1em 0;background-color:transparent}#container #actions-bar-icons{flex-grow:1;text-align:center}#container #actions-bar-logo{display:none;padding:0 .5em}#container #actions-bar-logo img{display:inline-block;width:50px;opacity:.75}#container #content{width:95%;margin:2em auto 8em auto}#container #content.public-link{width:70%;min-height:0;margin:5em auto}#content td.descField,#box-popup td.descField{text-align:right;padding-right:20px;width:25%;border-right:1px solid #d9d9d9;color:#999;font-size:12px;font-weight:bold}#content td.valField,#box-popup td.valField{padding-left:1em;width:100%}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:none;width:100%;color:#607d8b;font-size:12px}#content .pager{width:100%;margin-top:15px;padding:.5em;vertical-align:middle;font-size:11px;color:#999;background-color:#fcfcfc}#content .pager img{margin-left:5px;vertical-align:middle}#content .pager a{margin-left:5px;font-size:12px;color:#999}#content .pager>div{display:inline-block;width:49%}#content .pager .pager-left{text-align:left}#content .pager .pager-right{text-align:right}#content #title{width:50%;padding:7px;margin:auto;background-color:#d9d9d9;color:#fff;font-size:17px;letter-spacing:.3em;text-align:center}#content #title.titleNormal{background-color:#607d8b;color:#fff}#content .data-container{width:75%;margin:0 auto}#content fieldset.data{margin:2em auto}#content fieldset.data>legend{color:#607d8b;padding:0 .5em;font-size:1.5em}#content fieldset.data>div{display:none}#content fieldset.data>div table{width:100%}#content .data{width:100%;padding:10px;border:1px solid #c9c9c9;margin:0 auto;background-color:#f9f9f9}#content .data #history-icon{position:relative;top:5em;right:2em}#content .data td{text-align:left}#content .data td.descField{text-align:right}#content .data select{min-width:210px}#content .data .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .dropzone{width:30em;padding:1em;border:2px dashed #26a69a;text-align:center}#content .data .dropzone img{vertical-align:middle}#content .data .file-upload{display:none}#content .data .account-permissions{width:100%}#content .data .account-permissions fieldset{border:1px solid #c9c9c9;padding:1em}#content .data .account-permissions legend{font-weight:bold;color:#999;padding:.2em 0}#content .data .account-permissions fieldset>span{font-weight:bold;color:#999;padding:.2em 0;display:inline-block;width:100px;text-align:right}#content span.tag{margin:0 3px 3px 0;padding:.2em;background:#5c6bc0;color:#fff;border:0 solid transparent;border-radius:3px!important;-moz-border-radius:3px!important;-webkit-border-radius:3px!important}#content .extra-info{margin-top:20px}#content #tabs fieldset{border:1px solid #c9c9c9}#content #tabs #frmConfig label{float:left}#content .tblConfig{margin-bottom:2em}#content .tblConfig td.descField{width:35%;font-size:11px;font-weight:bold}#content .tblConfig td.rowHeader{padding:5px 0 5px 0;background-color:#f5f5f5;text-align:center;font-weight:bold;border-top:15px solid #f9f9f9;border-bottom:3px solid #a9c1d7;letter-spacing:.5em;color:#696969}#content .tblConfig input.checkbox{width:15px;text-align:left;padding:0}#content .tblConfig .option-disabled{text-align:center;background-color:#fff8e1;color:#ffca28;font-weight:bold}#content h2{width:100%;height:1.5em;font-size:18px;color:white;background-color:#a9c1d7;margin:0;padding-top:.1em}#content .section{margin-top:2.5em;border-bottom:1px solid #d9d9d9;text-align:left;font-size:14px;font-weight:bold;color:#5c6bc0}#content .row_even>td{background-color:#f5f5f5}#content .row_odd>td{background-color:white}#content .data-header ul{list-style:none;width:100%;margin:0 0 10px 0;padding:0}#content .data-header li{display:inline-block;padding:.2em .5em;font-weight:bold;letter-spacing:.2em;color:#fff;text-align:center}#content .data-header li a{color:#777}#content .data-header li img{float:right;width:24px;height:24px;vertical-align:middle}#content .data-header-minimal{border-bottom:1px solid #dfdfdf}#content .data-header-minimal ul{display:flex;flex-wrap:wrap;justify-content:flex-start;margin:0}#content .data-header-minimal li{display:inline-flex;min-width:10em;font-weight:normal;letter-spacing:normal}#content .data-header-minimal li a{color:#b9b9b9;padding:.3em .8em}#content .data-table{width:100%}#content .data-table td:first-of-type,#content .data-table th:first-of-type{width:5em}#content .data-table thead th{background-color:#607d8b;color:#fff}#content .data-table tbody td.cell-data{text-align:left}#content .data-table tbody td.cell-nodata{padding:0 .5em;text-align:left}#content .data-table tbody td.cell-actions{text-align:right}#content .data-table tbody td.cell-actions i{opacity:.5}#content .data-table tbody td.cell-actions i:hover{opacity:1}#content .data-rows ul{display:table;list-style:none;width:100%;margin:0 0 10px 0;padding:0;background-color:#fcfcfc}#content .data-rows li{float:left;display:block;padding:1em;color:#696969;text-align:center;min-height:2em}#content .data-rows li.cell-nodata{padding:1em 0;min-height:2em;text-align:left}#content .data-rows li.cell-actions{float:right;min-height:2em;padding:1em 0;text-align:left;background-color:#fcfcfc;width:15em}#content .data-rows li.cell-nodata img,#content .data-rows li.cell-actions img{width:24px;height:24px;margin:0 .5em}#content #resEventLog .data{width:100%}#content #resEventLog thead{text-align:center}#content #resEventLog tbody{width:100%;height:500px;overflow:auto}#content #resEventLog td{border-bottom:1px solid #d9d9d9}#content #resEventLog .cell{text-align:center}#content #resEventLog .cell-description{width:60%}#content #searchbox{background-color:#fcfcfc;vertical-align:middle;position:relative;height:auto;padding:.5em 1em;margin-bottom:2em}#content #searchbox form{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:center;text-align:left}#content #searchbox .search-filters>*{margin:0 1em}#content #searchbox .search-filters .filter-buttons{display:inline-block}#content #searchbox .search-filters .filter-slider{width:10em}#content #searchbox .search-filters-tags{display:none;flex-grow:2}#content .btn-clear{opacity:.35;filter:alpha(opacity=35)}#content .btn-clear:hover{opacity:1;filter:alpha(opacity=100)}#content .actions-optional{display:none}#content .error{width:350px;padding:15px;margin:0 auto;text-align:center;font-size:16px;line-height:1.5em;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#box-popup .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .list-wrap ul,#box-popup .list-wrap ul{list-style-type:none;margin:0;padding:0}#content .data .list-wrap li,#box-popup .list-wrap li{display:flex;background:#f2f2f2;padding:.5em;font-size:1em;margin-bottom:.5em}#content .data .list-wrap li:hover,#box-popup .list-wrap li:hover{background:#e8eaf6;color:#000}#content .data .list-wrap div.files-item-info,#box-popup .list-wrap div.files-item-info{flex-grow:2}#content .data .list-wrap div.files-item-info img,#box-popup .list-wrap div.files-item-info img{margin:0 .5em}#content .data .list-wrap div.files-item-actions,#box-popup .list-wrap div.files-item-actions{padding:.3em 0}#box-popup{min-width:25em;max-width:50em;margin:5em auto;padding:0;background-color:#fff}#box-popup.box-password-view{min-width:30em;max-width:35em}#box-popup>h2{position:relative;width:100%;font-size:18px;color:#fff;background-color:#607d8b;margin:0;padding:.5em 0;line-height:1em}#box-popup>h2 .btn-popup-close{display:none;position:absolute;right:.5em;top:.2em}#box-popup>table{width:100%;padding-bottom:1em}#box-popup select{width:220px}#box-popup #resFancyAccion{display:none}#box-popup #resCheck{display:inline-block;width:80%;height:4em;padding:1em 0}#box-popup.image{background-color:transparent;max-width:100%;margin:0 auto;border-radius:0!important;-moz-border-radius:0!important;-webkit-border-radius:0!important}#box-popup.image img{width:auto;margin:0 auto}#box-popup.image>div.title{background-color:#607d8b;color:#fff;padding:.5em}#box-popup.help{min-height:100px;background-color:#f5f5f5}#box-popup.help p{font-size:14px;text-align:justify;line-height:2em}#box-complexity>div{text-align:justify;line-height:1.5em;margin-top:1em}#debug{float:left;text-align:left}#debuginfo{width:100%;min-height:10em;padding:1em;background-color:#fff8e1;text-align:left;line-height:1.5em}#debuginfo H3{text-align:center}.popup-data{width:100%;min-width:400px;border:0;text-align:left;margin:0;padding:1em .5em}.popup-data .descField{min-width:100px}footer{display:flex;justify-content:space-between;position:fixed;bottom:0;z-index:100;width:100%;padding:.5em 0;background-color:#f5f5f5;color:#b9b9b9;font-size:1em;-webkit-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);-moz-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14)}footer .footer-parts{display:flex;justify-content:space-between}footer #footer-left{width:50%;margin:0 1em}footer #footer-right{width:50%;margin:0 1em;justify-content:flex-end;text-align:right}footer #updates{min-width:10em;text-align:center;cursor:pointer}footer #status{margin:0 1em}footer #status>div{display:inline-block}footer #status .status-info{padding:.5em}footer #session{text-align:left;color:#999;font-size:.8em}footer a{color:#b9b9b9}footer a:visited{color:#b9b9b9}footer #project a:hover{color:#a9c1d7;border-bottom:1px solid #a9c1d7}footer #updates a:hover{color:#a9c1d7}footer img{border:0;width:16px;height:16px;vertical-align:middle}.round,.round5{border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}.midround{border-radius:0 0 10px 10px!important;-moz-border-radius:0 0 10px 10px!important;-webkit-border-radius:0 0 10px 10px!important}.midroundup{border-radius:10px 10px 0 0!important;-moz-border-radius:10px 10px 0 0!important;-webkit-border-radius:10px 10px 0 0!important}.fullround{border-radius:50%!important;-moz-border-radius:50%!important;-webkit-border-radius:50%!important}.iconMini{width:16px!important;height:16px!important;vertical-align:middle}.hide{display:none!important}.btn-checks{padding:5px;margin:.2em 0;width:30em;border-bottom:1px solid #c9c9c9}.shadow{-webkit-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);-moz-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);box-shadow:1px 1px 2px rgba(0,0,0,0.14)}.noRes{width:60%;padding:15px;background-color:#f9f9f9;color:#a9a9a9;border:#c9c9c9 1px solid;margin:20px auto;text-align:center;font-size:16px}.header-grey{background-color:#607d8b;color:#fff;min-height:2em}.no-background{background:none!important}.action-in-box{padding:1em;text-align:right}.action-in-box ul{list-style:none;margin:0;padding:0}.tab-data{margin:2em auto 0;width:75%}.item-actions{margin:1em auto}.tab-actions{margin:2em 0}.item-actions>ul,.tab-actions>ul{display:flex;flex-wrap:wrap;justify-content:flex-end;align-items:center;list-style:none;margin:0;padding:0}.item-actions>ul>li,.tab-actions>ul>li{width:auto;min-width:2em;margin-left:.5em}.item-actions>ul>li.datagrid-action-search,.tab-actions>ul>li.datagrid-action-search{min-width:5em}.item-actions>ul>li.datagrid-action-search form,.tab-actions>ul>li.datagrid-action-search form{width:100%}.fullWidth{max-width:100%!important}.filter-on{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;padding:.3em 1em}.global-on{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;padding:.3em 1em}.opacity50{filter:alpha(opacity=50);opacity:.5}.custom-combobox{position:relative;display:inline-block}.custom-combobox input{width:80%}.custom-combobox-toggle{position:absolute;top:0;bottom:0;margin-left:-1px;padding:0;*height:1.7em;*top:.1em}.custom-combobox-input{margin:0;padding:.3em}.passLevel{width:20px;height:20px;display:inline-block;position:relative;top:2px}.passLevel.strongest{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strongest:hover{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strong{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.strong:hover{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.good{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.good:hover{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.weak{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}.passLevel.weak:hover{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}#alert #alert-text{margin:15px auto;font-size:14px;font-weight:bold}#alert #alert-pass{width:50%;padding:10px;margin:15px auto;border:1px solid #c9c9c9;color:#555;font-weight:bold}.dialog-text,.dialog-user-text,.dialog-pass-text{font-family:Consolas,"Andale Mono WT","Andale Mono","Bitstream Vera Sans Mono","Nimbus Mono L",Monaco,"Courier New",monospace;padding:.5em;text-align:center;min-width:200px}.dialog-user-text{border-bottom:#d9d9d9 1px solid;color:#a9a9a9}.dialog-pass-text{border:transparent 1px solid;letter-spacing:.2em}.dialog-buttons{text-align:center;padding:.5em;border-top:1px solid #c9c9c9;line-height:2.5em}.dialog-clip-copy{color:#26a69a;background-color:#e0f2f1}.help-box{display:none;background-color:#fff!important;color:#607d8b}.help-box>*{font-weight:bold}.help-text{text-align:justify;line-height:1.5em;margin-top:1em}.tooltip{width:300px;max-width:300px;background-color:#777;color:#fff;z-index:101}.cursor-pointer{cursor:pointer}.password-actions{display:inline-block;width:12em}.password-actions>span,.password-actions i{margin-right:.6em}.custom-input-color{width:3em;height:1em;display:inline-block}.account-pass-image{height:32px;width:auto}.select-box{min-width:20em}fieldset.warning{padding:8px;border-radius:5px;color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}fieldset.warning legend{color:#ef5350!important}fieldset.warning a{color:#ef5350!important;font-weight:bold}#actions{width:100%;line-height:2em;margin-bottom:5em}#actions #logo{display:flex;width:100%;margin-bottom:30px;color:#607d8b;align-items:center;background:url("../imgs/logo_full_bg.png") left no-repeat;background-size:auto 150px;height:150px}#actions #page-title{width:100%;color:#607d8b;text-align:center}#actions #page-title h1{font-weight:bold;font-size:24px;letter-spacing:3px}#actions ul.errors{max-width:40vw;margin:0 auto;list-style:none;font-size:14px;text-align:left}#actions ul.errors>li{margin:1.5em auto;border-radius:3px;padding:1em .5em}#actions ul.errors>li.msg-critical{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}#actions ul.errors>li.msg-warning{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;color:#555}#actions ul.errors>li.msg-ok{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#actions ul.errors>li>p.hint{color:#555;font-size:12px}#actions ul.errors>li>p.hint i{margin-right:.5em}#actions form{width:450px;margin:0 auto;text-align:left}#actions form fieldset{margin-bottom:2em}#actions form fieldset legend{width:100%;color:#fff;font-size:14px;font-weight:bold;text-align:center;background-color:#607d8b;margin:1em 0;letter-spacing:.2em;padding:.2em 0}#actions div.buttons{margin-top:2em;text-align:center}.center{text-align:center!important}.right{text-align:right!important}.left{text-align:left!important}.opacity50{opacity:.5!important}#login-container{width:40em;margin:0 auto;background:transparent url("../imgs/logo_full_bg.png") no-repeat top left;background-size:auto 10em}#login-container #boxSpacer{height:11em;background-color:transparent}#login-container #boxLogin{position:relative;margin:0 auto;width:100%;min-height:14em;padding:1em;background-color:#fff}#login-container #boxLogin #boxData{height:100%;min-height:14em;text-align:left;background-color:transparent}#login-container #boxLogin #boxData i{margin-right:.5em;opacity:.5}#login-container #boxLogin #boxData .extra-hidden{display:none}#login-container #boxLogin #boxButton{position:absolute;top:2em;right:2em}#login-container #boxLogin #boxActions{width:100%;text-align:right}#login-container #boxLogin #boxActions a{color:#c9c9c9}#login-container #boxLogout{margin-top:4em;width:100%}#login-container #boxLogout>div{margin:0 auto;width:250px;font-size:14px;padding:.5em;text-align:center;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#login-container #boxUpdated{width:350px;margin:3em auto;font-size:14px;text-align:center;padding:.5em;color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#login-container #demo-info{margin:3em auto;color:#c9c9c9;border-top:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:.5em}#login-container #demo-info ul{display:flex;justify-content:space-around;list-style:none}#login-container #demo-info ul li span{margin:0 2em}@media screen and (max-width:1000px){#content #searchbox .search-filters>*{margin:.5em 1em .5em 0}#content .data-container #title,#content .tab-data #title{width:90%}footer{display:none;justify-content:space-between;flex-wrap:wrap}footer .footer-parts{justify-content:space-between;flex-wrap:wrap}footer #footer-left,footer #footer-right{width:100%}footer .footer-parts>div{width:100%;padding:.5em 0}}@media screen and (max-width:600px){#content input,#box-popup input{width:100%}#content .mdl-textfield,#box-popup .mdl-textfield{width:100%}#content td.descField,#box-popup td.descField{display:none}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:block}#content #searchbox .mdl-textfield{width:90%}#content #searchbox .search-text{width:90%}#content #searchbox .search-filters .selectize-control{width:100%}#content .data-container,#content .tab-data{width:100%}#content .data-container #title,#content .tab-data #title{width:90%}#content .data-container .selectize-control,#content .tab-data .selectize-control{width:100%}#box-popup h2>.btn-popup-close{display:inline-block}.mdl-data-table{table-layout:fixed;width:100%}.table-responsive td,.table-responsive th{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis}.table-responsive .cell-actions i{display:block!important}}
\ No newline at end of file
+html,body{margin:0;padding:0;text-align:left;background-color:#f5f5f5;color:#555;font-size:12px;font-weight:normal;box-sizing:border-box}*{font-family:"Roboto Regular",Verdana,Tahoma,sans-serif;box-sizing:inherit}*:before,*:after{box-sizing:inherit}table{font-size:11px;border-spacing:0}table th{border-bottom:2px solid transparent;vertical-align:middle}table th .icon{width:24px;height:24px}table tr{height:20px}table tr.odd{background-color:#f9f9f9}table tr.even>td,table tr.odd>td{border-bottom:1px solid #d9d9d9!important}table tr.even:hover,table tr.odd:hover{background-color:#e8ff99}table td{padding:3px}table td.txtCliente{font-weight:bold;text-align:center}form{font-size:11px;margin:0}input.inputImg,img.inputImg{background-color:transparent!important;width:24px!important;height:24px!important;border:0;vertical-align:middle;margin:0 .5em}input.txtFile{width:200px}input.txtLong{width:300px}textarea{width:350px;resize:none}select.files{width:250px}input.spinner{width:5em}img{margin:0;padding:0;border:0;cursor:pointer}img.inputImgMini{background-color:transparent!important;width:16px!important;height:16px!important;margin:0 5px 0 5px;border:0;vertical-align:middle}i{cursor:pointer}form .form-field{display:flex;justify-content:space-between}form .form-field>label{min-width:12em;padding:.5em 0;font-size:16px;align-self:center}form .form-field>div{width:100%;align-self:center}a{text-decoration:none;color:#536dfe}a:visited{text-decoration:none;color:#536dfe}a:hover,a:active,a:focus{text-decoration:none;cursor:pointer}pre,code,samp,kbd{font-family:Consolas,"Andale Mono WT","Andale Mono","Bitstream Vera Sans Mono","Nimbus Mono L",Monaco,"Courier New",monospace;font-size:1em;direction:ltr;text-align:left;background-color:#fbfaf9;color:#333;box-shadow:inset 0 0 .3em #ccc;border-radius:2px}#nojs{width:80%;text-align:center;vertical-align:middle;margin:10px auto;padding:3px;background-color:#ef5350;color:white;font-weight:bold;font-size:14px}#wrap{height:auto!important;min-height:100%;width:100%;background-color:#f5f5f5}#wrap-loading{position:fixed;z-index:9999;top:50%;left:50%;padding:1em;background-color:rgba(255,255,255,0.8);display:none;border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}#wrap-loading.overlay-full{top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,0.5)}#wrap-loading.overlay-full #loading{position:absolute;top:50%;left:50%}#wrap-loading.overlay-full #taskStatus{display:block}#wrap-loading #taskStatus{display:none;position:absolute;left:0;top:55%;width:100%;text-align:center;color:white;background-color:rgba(0,0,0,0.5);padding:1em 0}#container{margin:auto;width:100%}#container.login{padding-top:5%}#container.error,#container.install,#container.passreset{width:100%}#container .logo{height:64px}#container #actions-bar{z-index:100;display:flex;justify-content:space-between;position:fixed;border:0 none;top:0;left:0;width:100%;padding:1em 0;background-color:transparent}#container #actions-bar-icons{flex-grow:1;text-align:center}#container #actions-bar-logo{display:none;padding:0 .5em}#container #actions-bar-logo img{display:inline-block;width:50px;opacity:.75}#container #content{width:95%;margin:2em auto 8em auto}#container #content.public-link{width:70%;min-height:0;margin:5em auto}#content td.descField,#box-popup td.descField{text-align:right;padding-right:20px;width:25%;border-right:1px solid #d9d9d9;color:#999;font-size:12px;font-weight:bold}#content td.valField,#box-popup td.valField{padding-left:1em;width:100%}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:none;width:100%;color:#607d8b;font-size:12px}#content .pager{width:100%;margin-top:15px;padding:.5em;vertical-align:middle;font-size:11px;color:#999;background-color:#fcfcfc}#content .pager img{margin-left:5px;vertical-align:middle}#content .pager a{margin-left:5px;font-size:12px;color:#999}#content .pager>div{display:inline-block;width:49%}#content .pager .pager-left{text-align:left}#content .pager .pager-right{text-align:right}#content #title{width:50%;padding:7px;margin:auto;background-color:#d9d9d9;color:#fff;font-size:17px;letter-spacing:.3em;text-align:center}#content #title.titleNormal{background-color:#607d8b;color:#fff}#content .data-container{width:75%;margin:0 auto}#content fieldset.data{margin:2em auto}#content fieldset.data>legend{color:#607d8b;padding:0 .5em;font-size:1.5em}#content fieldset.data>div{display:none}#content fieldset.data>div table{width:100%}#content .data{width:100%;padding:10px;border:1px solid #c9c9c9;margin:0 auto;background-color:#f9f9f9}#content .data #history-icon{position:relative;top:5em;right:2em}#content .data td{text-align:left}#content .data td.descField{text-align:right}#content .data select{min-width:210px}#content .data .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .dropzone{width:30em;padding:1em;border:2px dashed #26a69a;text-align:center}#content .data .dropzone img{vertical-align:middle}#content .data .file-upload{display:none}#content .data .account-permissions{width:100%}#content .data .account-permissions fieldset{border:1px solid #c9c9c9;padding:1em}#content .data .account-permissions legend{font-weight:bold;color:#999;padding:.2em 0}#content .data .account-permissions fieldset>span{font-weight:bold;color:#999;padding:.2em 0;display:inline-block;width:100px;text-align:right}#content span.tag{margin:0 3px 3px 0;padding:.2em;background:#5c6bc0;color:#fff;border:0 solid transparent;border-radius:3px!important;-moz-border-radius:3px!important;-webkit-border-radius:3px!important}#content .extra-info{margin-top:20px}#content #tabs fieldset{border:1px solid #c9c9c9}#content #tabs #frmConfig label{float:left}#content .tblConfig{margin-bottom:2em}#content .tblConfig td.descField{width:35%;font-size:11px;font-weight:bold}#content .tblConfig td.rowHeader{padding:5px 0 5px 0;background-color:#f5f5f5;text-align:center;font-weight:bold;border-top:15px solid #f9f9f9;border-bottom:3px solid #a9c1d7;letter-spacing:.5em;color:#696969}#content .tblConfig input.checkbox{width:15px;text-align:left;padding:0}#content .tblConfig .option-disabled{text-align:center;background-color:#fff8e1;color:#ffca28;font-weight:bold}#content h2{width:100%;height:1.5em;font-size:18px;color:white;background-color:#a9c1d7;margin:0;padding-top:.1em}#content .section{margin-top:2.5em;border-bottom:1px solid #d9d9d9;text-align:left;font-size:14px;font-weight:bold;color:#5c6bc0}#content .row_even>td{background-color:#f5f5f5}#content .row_odd>td{background-color:white}#content .data-header ul{list-style:none;width:100%;margin:0 0 10px 0;padding:0}#content .data-header li{display:inline-block;padding:.2em .5em;font-weight:bold;letter-spacing:.2em;color:#fff;text-align:center}#content .data-header li a{color:#777}#content .data-header li img{float:right;width:24px;height:24px;vertical-align:middle}#content .data-header-minimal{border-bottom:1px solid #dfdfdf}#content .data-header-minimal ul{display:flex;flex-wrap:wrap;justify-content:flex-start;margin:0}#content .data-header-minimal li{display:inline-flex;min-width:10em;font-weight:normal;letter-spacing:normal}#content .data-header-minimal li a{color:#b9b9b9;padding:.3em .8em}#content .data-table{width:100%}#content .data-table td:first-of-type,#content .data-table th:first-of-type{width:5em}#content .data-table thead th{background-color:#607d8b;color:#fff}#content .data-table tbody td.cell-data{text-align:left}#content .data-table tbody td.cell-nodata{padding:0 .5em;text-align:left}#content .data-table tbody td.cell-actions{text-align:right}#content .data-table tbody td.cell-actions i{opacity:.5}#content .data-table tbody td.cell-actions i:hover{opacity:1}#content .data-rows ul{display:table;list-style:none;width:100%;margin:0 0 10px 0;padding:0;background-color:#fcfcfc}#content .data-rows li{float:left;display:block;padding:1em;color:#696969;text-align:center;min-height:2em}#content .data-rows li.cell-nodata{padding:1em 0;min-height:2em;text-align:left}#content .data-rows li.cell-actions{float:right;min-height:2em;padding:1em 0;text-align:left;background-color:#fcfcfc;width:15em}#content .data-rows li.cell-nodata img,#content .data-rows li.cell-actions img{width:24px;height:24px;margin:0 .5em}#content #resEventLog .data{width:100%}#content #resEventLog thead{text-align:center}#content #resEventLog tbody{width:100%;height:500px;overflow:auto}#content #resEventLog td{border-bottom:1px solid #d9d9d9}#content #resEventLog .cell{text-align:center}#content #resEventLog .cell-description{width:60%}#content #searchbox{background-color:#fcfcfc;vertical-align:middle;position:relative;height:auto;padding:.5em 1em;margin-bottom:2em}#content #searchbox form{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:center;text-align:left}#content #searchbox .search-filters>*{margin:0 1em}#content #searchbox .search-filters .filter-buttons{display:inline-block}#content #searchbox .search-filters .filter-slider{width:10em}#content #searchbox .search-filters-tags{display:none;flex-grow:2}#content .btn-clear{opacity:.35;filter:alpha(opacity=35)}#content .btn-clear:hover{opacity:1;filter:alpha(opacity=100)}#content .actions-optional{display:none}#content .error{width:350px;padding:15px;margin:0 auto;text-align:center;font-size:16px;line-height:1.5em;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#box-popup .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .list-wrap ul,#box-popup .list-wrap ul{list-style-type:none;margin:0;padding:0}#content .data .list-wrap li,#box-popup .list-wrap li{display:flex;background:#f2f2f2;padding:.5em;font-size:1em;margin-bottom:.5em}#content .data .list-wrap li:hover,#box-popup .list-wrap li:hover{background:#e8eaf6;color:#000}#content .data .list-wrap div.files-item-info,#box-popup .list-wrap div.files-item-info{flex-grow:2}#content .data .list-wrap div.files-item-info img,#box-popup .list-wrap div.files-item-info img{margin:0 .5em}#content .data .list-wrap div.files-item-actions,#box-popup .list-wrap div.files-item-actions{padding:.3em 0}#box-popup{min-width:30em;max-width:60em;margin:5em auto;padding:0;background-color:#fff}#box-popup.box-password-view{min-width:30em;max-width:35em}#box-popup>h2{position:relative;width:100%;font-size:18px;color:#fff;background-color:#607d8b;margin:0;padding:.5em 0;line-height:1em}#box-popup>h2 .btn-popup-close{display:none;position:absolute;right:.5em;top:.2em}#box-popup>table{width:100%;padding-bottom:1em}#box-popup select{width:220px}#box-popup #resFancyAccion{display:none}#box-popup #resCheck{display:inline-block;width:80%;height:4em;padding:1em 0}#box-popup.image{background-color:transparent;max-width:100%;margin:0 auto;border-radius:0!important;-moz-border-radius:0!important;-webkit-border-radius:0!important}#box-popup.image img{width:auto;margin:0 auto}#box-popup.image>div.title{background-color:#607d8b;color:#fff;padding:.5em}#box-popup.help{min-height:100px;background-color:#f5f5f5}#box-popup.help p{font-size:14px;text-align:justify;line-height:2em}#box-complexity>div{text-align:justify;line-height:1.5em;margin-top:1em}#debug{float:left;text-align:left}#debuginfo{width:100%;min-height:10em;padding:1em;background-color:#fff8e1;text-align:left;line-height:1.5em}#debuginfo H3{text-align:center}.popup-data{width:100%;min-width:400px;border:0;text-align:left;margin:0;padding:1em .5em}.popup-data .descField{min-width:100px}footer{display:flex;justify-content:space-between;position:fixed;bottom:0;z-index:100;width:100%;padding:.5em 0;background-color:#f5f5f5;color:#b9b9b9;font-size:1em;-webkit-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);-moz-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14)}footer .footer-parts{display:flex;justify-content:space-between}footer #footer-left{width:50%;margin:0 1em}footer #footer-right{width:50%;margin:0 1em;justify-content:flex-end;text-align:right}footer #updates{min-width:10em;text-align:center;cursor:pointer}footer #status{margin:0 1em}footer #status>div{display:inline-block}footer #status .status-info{padding:.5em}footer #session{text-align:left;color:#999;font-size:.8em}footer a{color:#b9b9b9}footer a:visited{color:#b9b9b9}footer #project a:hover{color:#a9c1d7;border-bottom:1px solid #a9c1d7}footer #updates a:hover{color:#a9c1d7}footer img{border:0;width:16px;height:16px;vertical-align:middle}.round,.round5{border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}.midround{border-radius:0 0 10px 10px!important;-moz-border-radius:0 0 10px 10px!important;-webkit-border-radius:0 0 10px 10px!important}.midroundup{border-radius:10px 10px 0 0!important;-moz-border-radius:10px 10px 0 0!important;-webkit-border-radius:10px 10px 0 0!important}.fullround{border-radius:50%!important;-moz-border-radius:50%!important;-webkit-border-radius:50%!important}.iconMini{width:16px!important;height:16px!important;vertical-align:middle}.hide{display:none!important}.btn-checks{padding:5px;margin:.2em 0;width:30em;border-bottom:1px solid #c9c9c9}.shadow{-webkit-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);-moz-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);box-shadow:1px 1px 2px rgba(0,0,0,0.14)}.noRes{width:60%;padding:15px;background-color:#f9f9f9;color:#a9a9a9;border:#c9c9c9 1px solid;margin:20px auto;text-align:center;font-size:16px}.header-grey{background-color:#607d8b;color:#fff;min-height:2em}.no-background{background:none!important}.action-in-box{padding:1em;text-align:right}.action-in-box ul{list-style:none;margin:0;padding:0}.tab-data{margin:2em auto 0;width:75%}.item-actions{margin:1em auto}.tab-actions{margin:2em 0}.item-actions>ul,.tab-actions>ul{display:flex;flex-wrap:wrap;justify-content:flex-end;align-items:center;list-style:none;margin:0;padding:0}.item-actions>ul>li,.tab-actions>ul>li{width:auto;min-width:2em;margin-left:.5em}.item-actions>ul>li.datagrid-action-search,.tab-actions>ul>li.datagrid-action-search{min-width:5em}.item-actions>ul>li.datagrid-action-search form,.tab-actions>ul>li.datagrid-action-search form{width:100%}.fullWidth{max-width:100%!important}.filter-on{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;padding:.3em 1em}.global-on{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;padding:.3em 1em}.opacity50{filter:alpha(opacity=50);opacity:.5}.custom-combobox{position:relative;display:inline-block}.custom-combobox input{width:80%}.custom-combobox-toggle{position:absolute;top:0;bottom:0;margin-left:-1px;padding:0;*height:1.7em;*top:.1em}.custom-combobox-input{margin:0;padding:.3em}.passLevel{width:20px;height:20px;display:inline-block;position:relative;top:2px}.passLevel.strongest{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strongest:hover{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strong{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.strong:hover{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.good{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.good:hover{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.weak{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}.passLevel.weak:hover{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}#alert #alert-text{margin:15px auto;font-size:14px;font-weight:bold}#alert #alert-pass{width:50%;padding:10px;margin:15px auto;border:1px solid #c9c9c9;color:#555;font-weight:bold}.dialog-text,.dialog-user-text,.dialog-pass-text{font-family:Consolas,"Andale Mono WT","Andale Mono","Bitstream Vera Sans Mono","Nimbus Mono L",Monaco,"Courier New",monospace;padding:.5em;text-align:center;min-width:200px}.dialog-user-text{border-bottom:#d9d9d9 1px solid;color:#a9a9a9}.dialog-pass-text{border:transparent 1px solid;letter-spacing:.2em}.dialog-buttons{text-align:center;padding:.5em;border-top:1px solid #c9c9c9;line-height:2.5em}.dialog-clip-copy{color:#26a69a;background-color:#e0f2f1}.help-box{display:none;background-color:#fff!important;color:#607d8b}.help-box>*{font-weight:bold}.help-text{text-align:justify;line-height:1.5em;margin-top:1em}.tooltip{width:300px;max-width:300px;background-color:#777;color:#fff;z-index:101}.cursor-pointer{cursor:pointer}.password-actions{display:inline-block;width:12em}.password-actions>span,.password-actions i{margin-right:.6em}.custom-input-color{width:3em;height:1em;display:inline-block}.account-pass-image{height:32px;width:auto}.select-box{min-width:20em}fieldset.warning{padding:8px;border-radius:5px;color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}fieldset.warning legend{color:#ef5350!important}fieldset.warning a{color:#ef5350!important;font-weight:bold}#actions{width:100%;line-height:2em;margin-bottom:5em}#actions #logo{display:flex;width:100%;margin-bottom:30px;color:#607d8b;align-items:center;background:url("../imgs/logo_full_bg.png") left no-repeat;background-size:auto 150px;height:150px}#actions #page-title{width:100%;color:#607d8b;text-align:center}#actions #page-title h1{font-weight:bold;font-size:24px;letter-spacing:3px}#actions ul.errors{max-width:40vw;margin:0 auto;list-style:none;font-size:14px;text-align:left}#actions ul.errors>li{margin:1.5em auto;border-radius:3px;padding:1em .5em}#actions ul.errors>li.msg-critical{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}#actions ul.errors>li.msg-warning{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;color:#555}#actions ul.errors>li.msg-ok{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#actions ul.errors>li>p.hint{color:#555;font-size:12px}#actions ul.errors>li>p.hint i{margin-right:.5em}#actions form{width:450px;margin:0 auto;text-align:left}#actions form fieldset{margin-bottom:2em}#actions form fieldset legend{width:100%;color:#fff;font-size:14px;font-weight:bold;text-align:center;background-color:#607d8b;margin:1em 0;letter-spacing:.2em;padding:.2em 0}#actions div.buttons{margin-top:2em;text-align:center}.center{text-align:center!important}.right{text-align:right!important}.left{text-align:left!important}.opacity50{opacity:.5!important}#login-container{width:40em;margin:0 auto;background:transparent url("../imgs/logo_full_bg.png") no-repeat top left;background-size:auto 10em}#login-container #boxSpacer{height:11em;background-color:transparent}#login-container #boxLogin{position:relative;margin:0 auto;width:100%;min-height:14em;padding:1em;background-color:#fff}#login-container #boxLogin #boxData{height:100%;min-height:14em;text-align:left;background-color:transparent}#login-container #boxLogin #boxData i{margin-right:.5em;opacity:.5}#login-container #boxLogin #boxData .extra-hidden{display:none}#login-container #boxLogin #boxButton{position:absolute;top:2em;right:2em}#login-container #boxLogin #boxActions{width:100%;text-align:right}#login-container #boxLogin #boxActions a{color:#c9c9c9}#login-container #boxLogout{margin-top:4em;width:100%}#login-container #boxLogout>div{margin:0 auto;width:250px;font-size:14px;padding:.5em;text-align:center;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#login-container #boxUpdated{width:350px;margin:3em auto;font-size:14px;text-align:center;padding:.5em;color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#login-container #demo-info{margin:3em auto;color:#c9c9c9;border-top:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:.5em}#login-container #demo-info ul{display:flex;justify-content:space-around;list-style:none}#login-container #demo-info ul li span{margin:0 2em}@media screen and (max-width:1000px){#content #searchbox .search-filters>*{margin:.5em 1em .5em 0}#content .data-container #title,#content .tab-data #title{width:90%}footer{display:none;justify-content:space-between;flex-wrap:wrap}footer .footer-parts{justify-content:space-between;flex-wrap:wrap}footer #footer-left,footer #footer-right{width:100%}footer .footer-parts>div{width:100%;padding:.5em 0}}@media screen and (max-width:600px){#content input,#box-popup input{width:100%}#content .mdl-textfield,#box-popup .mdl-textfield{width:100%}#content td.descField,#box-popup td.descField{display:none}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:block}#content #searchbox .mdl-textfield{width:90%}#content #searchbox .search-text{width:90%}#content #searchbox .search-filters .selectize-control{width:100%}#content .data-container,#content .tab-data{width:100%}#content .data-container #title,#content .tab-data #title{width:90%}#content .data-container .selectize-control,#content .tab-data .selectize-control{width:100%}#box-popup h2>.btn-popup-close{display:inline-block}.mdl-data-table{table-layout:fixed;width:100%}.table-responsive td,.table-responsive th{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis}.table-responsive .cell-actions i{display:block!important}}
\ No newline at end of file

--- inc/themes/material-blue/css/styles.scss ---
@@ -42,6 +42,20 @@
       top: 50%;
       left: 50%;
     }
+    #taskStatus {
+      display: block;
+    }
+  }
+  #taskStatus {
+    display: none;
+    position: absolute;
+    left: 0;
+    top: 55%;
+    width: 100%;
+    text-align: center;
+    color: white;
+    background-color: rgba(0, 0, 0, 0.5);
+    padding: 1em 0;
   }
 }
 
@@ -532,8 +546,8 @@
 }
 
 #box-popup {
-  min-width: 25em;
-  max-width: 50em;
+  min-width: 30em;
+  max-width: 60em;
   margin: 5em auto;
   padding: 0;
   background-color: #fff;

--- inc/themes/material-blue/js/app-theme.js ---
@@ -114,9 +114,12 @@ sysPass.Theme = function (Common) {
             // Poner la clave en los input y actualizar MDL
             $dstParent.find("input:password").val(genPassword);
             $dstParent.addClass(mdl.CssClasses_.IS_DIRTY).removeClass(mdl.CssClasses_.IS_INVALID);
+
             // Poner la clave en el input de repetición y encriptarla
-            $targetR.val(genPassword).parent().addClass(mdl.CssClasses_.IS_DIRTY).removeClass(mdl.CssClasses_.IS_INVALID);
-            Common.encryptFormValue($targetR);
+            if ($targetR.length > 0) {
+                $targetR.val(genPassword).parent().addClass(mdl.CssClasses_.IS_DIRTY).removeClass(mdl.CssClasses_.IS_INVALID);
+                Common.encryptFormValue($targetR);
+            }
 
             // Mostar el indicador de complejidad
             $dstParent.find("#passLevel").show(500);
@@ -127,8 +130,6 @@ sysPass.Theme = function (Common) {
         }
     };
 
-
-    // FIXME
     // Diálogo de configuración de complejidad de clave
     var complexityDialog = function () {
 
@@ -193,8 +194,6 @@ sysPass.Theme = function (Common) {
 
             var $thisParent = $this.parent();
             var targetId = $this.attr("id");
-            var $targetIdR = $("#" + targetId + "R");
-
 
             var btnMenu = "<button id=\"menu-speed-" + targetId + "\" class=\"mdl-button mdl-js-button mdl-button--icon\" type=\"button\" title=\"" + Common.config().LANG[27] + "\"><i class=\"material-icons\">more_vert</i></button>";
 
@@ -234,7 +233,12 @@ sysPass.Theme = function (Common) {
             // Reset de los campos de clave
             $passwordActions.find(".reset").on("click", function () {
                 $this.val("");
-                $targetIdR.val("");
+
+                var $targetIdR = $("#" + targetId + "R");
+
+                if ($targetIdR.length > 0) {
+                    $targetIdR.val("");
+                }
 
                 // Actualizar objetos de MDL
                 componentHandler.upgradeDom();

--- inc/themes/material-blue/js/app-theme.min.js ---
@@ -1,18 +1,18 @@
-var $jscomp={scope:{},findInternal:function(a,g,e){a instanceof String&&(a=String(a));for(var h=a.length,k=0;k<h;k++){var m=a[k];if(g.call(e,m,k,a))return{i:k,v:m}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,g,e){if(e.get||e.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[g]=e.value)};
+var $jscomp={scope:{},findInternal:function(a,g,e){a instanceof String&&(a=String(a));for(var h=a.length,k=0;k<h;k++){var l=a[k];if(g.call(e,l,k,a))return{i:k,v:l}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,g,e){if(e.get||e.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[g]=e.value)};
 $jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(a,g,e,h){if(g){e=$jscomp.global;a=a.split(".");for(h=0;h<a.length-1;h++){var k=a[h];k in e||(e[k]={});e=e[k]}a=a[a.length-1];h=e[a];g=g(h);g!=h&&null!=g&&$jscomp.defineProperty(e,a,{configurable:!0,writable:!0,value:g})}};
 $jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,e){return $jscomp.findInternal(this,a,e).v}},"es6-impl","es3");
 sysPass.Theme=function(a){var g=a.log,e={elems:{$wrap:$("#wrap-loading"),$loading:$("#loading")},show:function(a){void 0!==a&&!0===a&&e.elems.$wrap.addClass("overlay-full");e.elems.$wrap.show();e.elems.$loading.addClass("is-active")},hide:function(){e.elems.$wrap.removeClass("overlay-full").hide();e.elems.$loading.removeClass("is-active")},upgradeFull:function(){e.elems.$wrap.addClass("overlay-full")}},h=function(b){for(var d=0,f="",c;d<a.passwordData.complexity.numlength;)c=Math.floor(100*Math.random())%
 94+33,!a.passwordData.complexity.symbols&&(33<=c&&47>=c||58<=c&&64>=c||91<=c&&96>=c||123<=c&&126>=c)||!a.passwordData.complexity.numbers&&48<=c&&57>=c||!a.passwordData.complexity.uppercase&&65<=c&&90>=c||(d++,f+=String.fromCharCode(c));$("#viewPass").attr("title",f);var e=zxcvbn(f);a.passwordData.passLength=f.length;b?(d=b.parent(),c=$("#"+b.attr("id")+"R"),a.outputResult(e,b),b=new MaterialTextfield,d.find("input:password").val(f),d.addClass(b.CssClasses_.IS_DIRTY).removeClass(b.CssClasses_.IS_INVALID),
-c.val(f).parent().addClass(b.CssClasses_.IS_DIRTY).removeClass(b.CssClasses_.IS_INVALID),a.encryptFormValue(c),d.find("#passLevel").show(500)):(a.outputResult(e),$("input:password, input.password").val(f),$("#passLevel").show(500))},k=function(){var b='<div id="box-complexity"><div><label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="checkbox-numbers"><input type="checkbox" id="checkbox-numbers" class="mdl-checkbox__input" name="checkbox-numbers" checked/><span class="mdl-checkbox__label">'+
+0<c.length&&(c.val(f).parent().addClass(b.CssClasses_.IS_DIRTY).removeClass(b.CssClasses_.IS_INVALID),a.encryptFormValue(c)),d.find("#passLevel").show(500)):(a.outputResult(e),$("input:password, input.password").val(f),$("#passLevel").show(500))},k=function(){var b='<div id="box-complexity"><div><label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="checkbox-numbers"><input type="checkbox" id="checkbox-numbers" class="mdl-checkbox__input" name="checkbox-numbers" checked/><span class="mdl-checkbox__label">'+
 a.config().LANG[35]+'</span></label><label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="checkbox-uppercase"><input type="checkbox" id="checkbox-uppercase" class="mdl-checkbox__input" name="checkbox-uppercase"/><span class="mdl-checkbox__label">'+a.config().LANG[36]+'</span></label><label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="checkbox-symbols"><input type="checkbox" id="checkbox-symbols" class="mdl-checkbox__input" name="checkbox-symbols"/><span class="mdl-checkbox__label">'+
 a.config().LANG[37]+'</span></label><div class="mdl-textfield mdl-js-textfield textfield-passlength"><input class="mdl-textfield__input" type="number" pattern="[0-9]*" id="passlength" /><label class="mdl-textfield__label" for="passlength">'+a.config().LANG[38]+"</label></div></div></div>";showDialog({title:a.config().LANG[29],text:b,negative:{title:a.config().LANG[44]},positive:{title:a.config().LANG[43],onClick:function(d){d.preventDefault();a.passwordData.complexity.numbers=$("#checkbox-numbers").is(":checked");
 a.passwordData.complexity.uppercase=$("#checkbox-uppercase").is(":checked");a.passwordData.complexity.symbols=$("#checkbox-symbols").is(":checked");a.passwordData.complexity.numlength=parseInt($("#passlength").val())}},cancelable:!0,contentStyle:{"max-width":"300px"},onLoaded:function(){$("#checkbox-numbers").prop("checked",a.passwordData.complexity.numbers);$("#checkbox-uppercase").prop("checked",a.passwordData.complexity.uppercase);$("#checkbox-symbols").prop("checked",a.passwordData.complexity.symbols);
-$("#passlength").val(a.passwordData.complexity.numlength)}})},m=function(b){b.find(".passwordfield__input").each(function(){var d=$(this);if("true"!==d.attr("data-pass-upgraded")){var f=d.parent(),c=d.attr("id"),b=$("#"+c+"R"),l='<button id="menu-speed-'+c+'" class="mdl-button mdl-js-button mdl-button--icon" type="button" title="'+a.config().LANG[27]+'"><i class="material-icons">more_vert</i></button>',l=l+('<ul class="mdl-menu mdl-js-menu" for="menu-speed-'+c+'">')+('<li class="mdl-menu__item passGen"><i class="material-icons">settings</i>'+
-a.config().LANG[28]+"</li>"),l=l+('<li class="mdl-menu__item passComplexity"><i class="material-icons">vpn_key</i>'+a.config().LANG[29]+"</li>"),l=l+('<li class="mdl-menu__item reset"><i class="material-icons">refresh</i>'+a.config().LANG[30]+"</li>");f.after('<div class="password-actions" />');f.next(".password-actions").prepend('<span class="passLevel passLevel-'+c+' fullround" title="'+a.config().LANG[31]+'"></span>').prepend('<i class="showpass material-icons" title="'+a.config().LANG[32]+'">remove_red_eye</i>').prepend(l);
-d.on("keyup",function(){a.checkPassLevel(d)});f=d.parent().next();f.find(".passGen").on("click",function(){h(d);d.focus()});f.find(".passComplexity").on("click",function(){k()});f.find(".showpass").on("mouseover",function(){$(this).attr("title",d.val())});f.find(".reset").on("click",function(){d.val("");b.val("");componentHandler.upgradeDom()});d.attr("data-pass-upgraded","true")}});b.find(".passwordfield__input-show").each(function(){var b=$(this),f=$('<i class="showpass material-icons" title="'+
-a.config().LANG[32]+'" data-targetid="'+b.attr("id")+'">remove_red_eye</i>'),c=$('<i class="clip-pass-icon material-icons" title="'+a.config().LANG[34]+'" data-clipboard-text="'+b.val()+'">content_paste</i>');b.parent().after(c).after(f);f.on("mouseover",function(){f.attr("title",b.val())})})},n=function(b){g.info("setupDatePicker");var d={format:"YYYY-MM-DD",lang:a.config().LOCALE.substr(0,2),time:!1,cancelText:a.config().LANG[44],okText:a.config().LANG[43],clearText:a.config().LANG[30],nowText:a.config().LANG[56],
+$("#passlength").val(a.passwordData.complexity.numlength)}})},l=function(b){b.find(".passwordfield__input").each(function(){var d=$(this);if("true"!==d.attr("data-pass-upgraded")){var f=d.parent(),c=d.attr("id"),b='<button id="menu-speed-'+c+'" class="mdl-button mdl-js-button mdl-button--icon" type="button" title="'+a.config().LANG[27]+'"><i class="material-icons">more_vert</i></button>',b=b+('<ul class="mdl-menu mdl-js-menu" for="menu-speed-'+c+'">')+('<li class="mdl-menu__item passGen"><i class="material-icons">settings</i>'+
+a.config().LANG[28]+"</li>"),b=b+('<li class="mdl-menu__item passComplexity"><i class="material-icons">vpn_key</i>'+a.config().LANG[29]+"</li>"),b=b+('<li class="mdl-menu__item reset"><i class="material-icons">refresh</i>'+a.config().LANG[30]+"</li>");f.after('<div class="password-actions" />');f.next(".password-actions").prepend('<span class="passLevel passLevel-'+c+' fullround" title="'+a.config().LANG[31]+'"></span>').prepend('<i class="showpass material-icons" title="'+a.config().LANG[32]+'">remove_red_eye</i>').prepend(b);
+d.on("keyup",function(){a.checkPassLevel(d)});f=d.parent().next();f.find(".passGen").on("click",function(){h(d);d.focus()});f.find(".passComplexity").on("click",function(){k()});f.find(".showpass").on("mouseover",function(){$(this).attr("title",d.val())});f.find(".reset").on("click",function(){d.val("");var a=$("#"+c+"R");0<a.length&&a.val("");componentHandler.upgradeDom()});d.attr("data-pass-upgraded","true")}});b.find(".passwordfield__input-show").each(function(){var b=$(this),f=$('<i class="showpass material-icons" title="'+
+a.config().LANG[32]+'" data-targetid="'+b.attr("id")+'">remove_red_eye</i>'),c=$('<i class="clip-pass-icon material-icons" title="'+a.config().LANG[34]+'" data-clipboard-text="'+b.val()+'">content_paste</i>');b.parent().after(c).after(f);f.on("mouseover",function(){f.attr("title",b.val())})})},m=function(b){g.info("setupDatePicker");var d={format:"YYYY-MM-DD",lang:a.config().LOCALE.substr(0,2),time:!1,cancelText:a.config().LANG[44],okText:a.config().LANG[43],clearText:a.config().LANG[30],nowText:a.config().LANG[56],
 minDate:new Date,triggerEvent:"dateIconClick"};b.find(".password-datefield__input").each(function(){var b=$(this);b.bootstrapMaterialDatePicker(d);b.parent().append("<input type='hidden' name='passworddatechange_unix' value='"+moment.tz(b.val(),a.config().TIMEZONE).format("X")+"' />");b.parent().next("i").on("click",function(){b.trigger("dateIconClick")});b.on("change",function(){var c;c=moment.tz(b.val(),a.config().TIMEZONE).format("X");b.parent().find("input[name='passworddatechange_unix']").val(c)})})};
-return{passwordDetect:m,password:h,viewsTriggers:{search:function(){var b=$("#frmSearch"),d=$("#res-content");b.find(".icon-searchfav").on("click",function(){var c=$(this).find("i"),d=b.find("input[name='searchfav']");0==d.val()?(c.addClass("mdl-color-text--amber-A200"),c.attr("title",a.config().LANG[53]),d.val(1)):(c.removeClass("mdl-color-text--amber-A200"),c.attr("title",a.config().LANG[52]),d.val(0));b.submit()});var e=b.find("#tags")[0],c=b.find(".search-filters-tags"),g=b.find("i.show-filter");
+return{passwordDetect:l,password:h,viewsTriggers:{search:function(){var b=$("#frmSearch"),d=$("#res-content");b.find(".icon-searchfav").on("click",function(){var c=$(this).find("i"),d=b.find("input[name='searchfav']");0==d.val()?(c.addClass("mdl-color-text--amber-A200"),c.attr("title",a.config().LANG[53]),d.val(1)):(c.removeClass("mdl-color-text--amber-A200"),c.attr("title",a.config().LANG[52]),d.val(0));b.submit()});var e=b.find("#tags")[0],c=b.find(".search-filters-tags"),g=b.find("i.show-filter");
 d.on("click","#data-search-header .sort-down,#data-search-header .sort-up",function(){var b=$(this);b.parent().find("a").addClass("filterOn");a.appActions().account.sort(b)}).on("click","#search-rows i.icon-favorite",function(){var b=$(this);a.appActions().account.savefavorite(b,function(){"on"===b.data("status")?(b.addClass("mdl-color-text--amber-A100"),b.attr("title",a.config().LANG[50]),b.html("star")):(b.removeClass("mdl-color-text--amber-A100"),b.attr("title",a.config().LANG[49]),b.html("star_border"))})}).on("click",
-"#search-rows span.tag",function(){c.is(":hidden")&&g.trigger("click");e.selectize.addItem($(this).data("tag-id"))});g.on("click",function(){var a=$(this);c.is(":hidden")?(c.slideDown("slow"),a.html(a.data("icon-up"))):(c.slideUp("slow"),a.html(a.data("icon-down")))});0<e.selectedOptions.length&&g.trigger("click")},common:function(a){m(a);n(a)}},loading:e,ajax:{complete:function(){g.info("ajax:complete");componentHandler.upgradeDom()}},html:{getList:function(a){var b=$('<ul class="ldap-list-item mdl-list"></ul>'),
+"#search-rows span.tag",function(){c.is(":hidden")&&g.trigger("click");e.selectize.addItem($(this).data("tag-id"))});g.on("click",function(){var a=$(this);c.is(":hidden")?(c.slideDown("slow"),a.html(a.data("icon-up"))):(c.slideUp("slow"),a.html(a.data("icon-down")))});0<e.selectedOptions.length&&g.trigger("click")},common:function(a){l(a);m(a)}},loading:e,ajax:{complete:function(){g.info("ajax:complete");componentHandler.upgradeDom()}},html:{getList:function(a){var b=$('<ul class="ldap-list-item mdl-list"></ul>'),
 e=$('<li class="mdl-list__item"></li>'),c=$('<span class="mdl-list__item-primary-content"></span>');a.forEach(function(a){var d=c.clone();d.append('<i class="material-icons mdl-list__item-icon">person</i>');d.append(a);a=e.clone().append(d);b.append(a)});return b},tabs:{add:function(a,d,e,c){a=$(a);var b="";1===c&&(a.parent().find("#tabs-"+d).addClass("is-active"),b="is-active");a.append('<a href="#tabs-'+d+'" class="mdl-tabs__tab '+b+'">'+e+"</a>")}}}}};

--- inc/themes/material-blue/views/account/actions.inc ---
@@ -43,18 +43,34 @@ use SP\Util\Checks;
         <?php endif; ?>
 
         <?php if ($AccountAcl->isShowLink() && $AccountAcl->isShowViewPass() && $accountData->getAccountParentId() === 0 && $accountIsHistory !== 1): ?>
-            <li>
-                <button id="btnLink" type="button"
-                        class="btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconPublicLink()->getClassButton(); ?>"
-                        data-action-id="<?php echo \SP\Core\ActionsInterface::ACTION_MGM_PUBLICLINKS_NEW; ?>"
-                        data-nextaction-id="<?php echo \SP\Core\ActionsInterface::ACTION_ACC_VIEW; ?>"
-                        data-item-id="<?php echo $accountId; ?>"
-                        data-sk="<?php echo $sk; ?>"
-                        data-onclick="link/save"
-                        title="<?php echo __('Crear Enlace Público'); ?>">
-                    <i class="material-icons"><?php echo $icons->getIconPublicLink()->getIcon(); ?></i>
-                </button>
-            </li>
+            <?php if ($publicLinkUrl === null): ?>
+                <li>
+                    <button id="btnLink" type="button"
+                            class="btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconPublicLink()->getClassButton(); ?>"
+                            data-action-id="<?php echo \SP\Core\ActionsInterface::ACTION_MGM_PUBLICLINKS_NEW; ?>"
+                            data-nextaction-id="<?php echo \SP\Core\ActionsInterface::ACTION_ACC_VIEW; ?>"
+                            data-item-id="<?php echo $accountId; ?>"
+                            data-sk="<?php echo $sk; ?>"
+                            data-onclick="link/save"
+                            title="<?php echo __('Crear Enlace Público'); ?>">
+                        <i class="material-icons"><?php echo $icons->getIconPublicLink()->getIcon(); ?></i>
+                    </button>
+                </li>
+            <?php else: ?>
+                <li>
+                    <button id="btnLink" type="button"
+                            class="btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconPublicLink()->getClassButton(); ?>"
+                            data-action-id="<?php echo \SP\Core\ActionsInterface::ACTION_MGM_PUBLICLINKS_REFRESH; ?>"
+                            data-nextaction-id="<?php echo \SP\Core\ActionsInterface::ACTION_ACC_VIEW; ?>"
+                            data-item-id="<?php echo $publicLinkId; ?>"
+                            data-activetab="<?php echo $accountId; ?>"
+                            data-sk="<?php echo $sk; ?>"
+                            data-onclick="link/refresh"
+                            title="<?php echo __('Actualizar Enlace'); ?>">
+                        <i class="material-icons"><?php echo $icons->getIconPublicLink()->getIcon(); ?></i>
+                    </button>
+                </li>
+            <?php endif; ?>
         <?php endif; ?>
 
         <?php if ($AccountAcl->isShowViewPass()): ?>

--- inc/themes/material-blue/views/config/backup.inc ---
@@ -179,7 +179,7 @@
                     <div id="help_export" class="help-box" title="<?php echo $icons->getIconHelp()->getTitle(); ?>">
                         <p class="help-text"><?php echo __('La exportación de cuentas permite guardar las cuentas y sus datos en formato XML para posteriormente poder ser importados en otras instancias de sysPass.'); ?></p>
 
-                        <p class="help-text"><?php echo __('Los elementos exportados son cuentas, clientes y categorías.'); ?></p>
+                        <p class="help-text"><?php echo __('Los elementos exportados son cuentas, clientes, categorías y etiquetas.'); ?></p>
 
                         <p class="help-text"><?php echo __('Las claves de las cuentas son exportadas de forma encriptada para mayor seguridad.'); ?></p>
 

--- inc/themes/material-blue/views/config/encryption.inc ---
@@ -88,17 +88,20 @@
                     <td class="descField"></td>
                     <td class="valField">
                         <div
-                            class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
+                                class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
                         <?php echo __('Guarde la nueva clave en un lugar seguro.'); ?>
                         <br>
                         <div
-                            class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
+                                class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
                         <?php echo __('Se volverán a encriptar las claves de todas las cuentas.'); ?>
                         <br>
                         <div
-                            class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
+                                class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
                         <?php echo __('Los usuarios deberán de introducir la nueva clave maestra.'); ?>
                         <br>
+                        <div
+                                class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></div>
+                        <strong><?php printf(__('Se van a actualizar %s cuentas. Este proceso puede tardar algo de tiempo.'), $numAccounts); ?></strong>
                         <br>
                         <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="confirmPassChange">
                             <input type="checkbox" id="confirmPassChange" class="mdl-switch__input"
@@ -108,6 +111,13 @@
                     </td>
                 </tr>
             </table>
+
+            <?php if ($numAccounts >= 500): ?>
+                <input type="hidden" name="useTask" value="1">
+                <input type="hidden" name="taskId" value="<?php echo $taskId; ?>">
+                <input type="hidden" name="lock" value="masterpass">
+            <?php endif; ?>
+
             <input type="hidden" name="activeTab" value="<?php echo $encryption_tabIndex; ?>"/>
             <input type="hidden" name="actionId"
                    value="<?php echo \SP\Core\ActionsInterface::ACTION_CFG_ENCRYPTION; ?>"/>
@@ -128,19 +138,21 @@
                         <p class="help-text"><?php echo __('La clave maestra es utilizada para encriptar las claves de las cuentas de sysPass para mantenerlas seguras.'); ?></p>
 
                         <p class="help-text"><?php echo __('Es recomendable cambiarla cada cierto tiempo y utilizar una clave compleja que incluya números, letras y símbolos.'); ?></p>
+
+                        <p class="help-text"><?php printf(__('Para más información consulte: %s'), '<a target="_blank" href="https://doc.syspass.org">https://doc.syspass.org</a>'); ?></p>
                     </div>
                 </li>
                 <?php if ($isAdminApp): ?>
-                <li>
-                    <button type="button"
-                            class="btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconCheck()->getClassButton(); ?>"
-                            data-onclick="config/refreshMpass"
-                            data-action-id="<?php echo \SP\Core\ActionsInterface::ACTION_CFG_ENCRYPTION_REFRESH; ?>"
-                            data-sk="<?php echo $sk; ?>"
-                            title="<?php echo __('Actualizar hash de clave maestra'); ?>">
-                        <i class="material-icons"><?php echo $icons->getIconRefresh()->getIcon(); ?></i>
-                    </button>
-                </li>
+                    <li>
+                        <button type="button"
+                                class="btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconCheck()->getClassButton(); ?>"
+                                data-onclick="config/refreshMpass"
+                                data-action-id="<?php echo \SP\Core\ActionsInterface::ACTION_CFG_ENCRYPTION_REFRESH; ?>"
+                                data-sk="<?php echo $sk; ?>"
+                                title="<?php echo __('Actualizar hash de clave maestra'); ?>">
+                            <i class="material-icons"><?php echo $icons->getIconRefresh()->getIcon(); ?></i>
+                        </button>
+                    </li>
                 <?php endif; ?>
                 <li>
                     <button form="frmCrypt"

--- inc/themes/material-blue/views/itemshow/tokens.inc ---
@@ -1,3 +1,7 @@
+<?php
+/** @var  \SP\DataModel\ApiTokenData $ApiTokenData */
+/** @var  \SP\Core\UI\ThemeIconsBase $icons */
+?>
 <div id="box-popup">
     <h2 class="center"><?php echo $header; ?><i class="btn-popup-close material-icons">close</i></h2>
 
@@ -13,10 +17,10 @@
                 <td class="valField">
                     <div class="lowres-title"><?php echo __('Usuario'); ?></div>
 
-                    <select id="selUsers" name="users" class="select-box" required>
+                    <select id="selUsers" name="users" class="select-box" required <?php echo $isDisabled; ?>>
                         <option value=""><?php echo __('Seleccionar Usuario'); ?></option>
                         <?php foreach ($users as $user): ?>
-                            <?php $selected = ($gotData && $user->id == $token->authtoken_userId) ? 'selected' : ''; ?>
+                            <?php $selected = ($user->id === $ApiTokenData->getAuthtokenUserId()) ? 'selected' : ''; ?>
                             <option value="<?php echo $user->id; ?>" <?php echo $selected; ?>><?php echo $user->name; ?></option>
                         <?php endforeach; ?>
                     </select>
@@ -28,16 +32,28 @@
                     <div class="lowres-title"><?php echo __('Acción'); ?></div>
 
                     <select id="selActions" name="actions"
-                            class="select-box" required>
+                            class="select-box" required <?php echo $isDisabled; ?>>
                         <option value=""><?php echo __('Seleccionar Acción'); ?></option>
                         <?php foreach ($actions as $id => $name): ?>
-                            <?php $selected = ($gotData && $id == $token->authtoken_actionId) ? 'selected' : ''; ?>
+                            <?php $selected = ($id === $ApiTokenData->getAuthtokenActionId()) ? 'selected' : ''; ?>
                             <option value="<?php echo $id; ?>" <?php echo $selected; ?>><?php echo $name; ?></option>
                         <?php endforeach; ?>
                     </select>
                 </td>
             </tr>
             <?php if (!$isView): ?>
+                <tr>
+                    <td class="descField"><?php echo __('Clave'); ?></td>
+                    <td class="valField">
+                        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
+                            <input id="pass" name="pass" type="password"
+                                   class="mdl-textfield__input passwordfield__input mdl-color-text--indigo-400"
+                                   maxlength="50">
+                            <label class="mdl-textfield__label"
+                                   for="pass"><?php echo __('Clave'); ?></label>
+                        </div>
+                    </td>
+                </tr>
                 <tr>
                     <td class="descField"><?php echo __('Opciones'); ?></td>
                     <td class="valField">
@@ -56,22 +72,22 @@
                     <td class="valField">
                         <div class="lowres-title"><?php echo __('Token'); ?></div>
 
-                        <?php echo $gotData ? $token->authtoken_token : ''; ?>
+                        <?php echo $ApiTokenData->getAuthtokenToken(); ?>
                     </td>
                 </tr>
             <?php endif; ?>
             </tbody>
         </table>
 
-        <input type="hidden" name="itemId" value="<?php echo $gotData ? $token->authtoken_id : ''; ?>"/>
+        <input type="hidden" name="itemId" value="<?php echo $ApiTokenData->getAuthtokenId(); ?>"/>
         <input type="hidden" name="actionId" value="<?php echo $actionId; ?>"/>
         <input type="hidden" name="sk" value="">
         <input type="hidden" name="isAjax" value="1">
     </form>
     <div class="action-in-box">
         <button
-            class="mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconSave()->getClassButton(); ?>"
-            form="frmTokens" title="<?php echo $icons->getIconSave()->getTitle(); ?>">
+                class="mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconSave()->getClassButton(); ?>"
+                form="frmTokens" title="<?php echo $icons->getIconSave()->getTitle(); ?>">
             <i class="material-icons"><?php echo $icons->getIconSave()->getIcon(); ?></i>
         </button>
     </div>

--- inc/themes/material-blue/views/main/body-header-menu.inc ---
@@ -1,7 +1,13 @@
 <header class="mdl-layout__header mdl-color--indigo-400">
     <div class="mdl-layout__header-row">
         <!-- Title -->
-        <span class="mdl-layout-icon"><img class="logo" src="<?php echo $logonobg; ?>" alt="logo"/></span>
+        <span class="mdl-layout-icon">
+            <img class="logo btn-menu" src="<?php echo $logonobg; ?>"
+                 alt="logo"
+                 data-action-id="<?php echo \SP\Core\ActionsInterface::ACTION_ACC_SEARCH; ?>"
+                 data-view="search"
+                 data-historyReset="1"/>
+        </span>
         <!--        <span class="mdl-layout-title">--><?php //echo '#', $appInfo['appname']; ?><!--</span>-->
         <?php if ($loggedIn): ?>
             <!-- Add spacer, to align navigation to the right -->

--- inc/themes/material-blue/views/main/body-start.inc ---
@@ -5,6 +5,7 @@
     </noscript>
     <div id="wrap-loading">
         <div id="loading" class="mdl-spinner mdl-spinner--single-color mdl-js-spinner"></div>
+        <div id="taskStatus"></div>
     </div>
     <div id="container" class="<?php echo $page; ?>" data-page="<?php echo $page; ?>">
         <?php if ($useLayout === true): ?>

--- inc/themes/material-blue/views/main/upgrade.inc ---
@@ -1,12 +1,16 @@
 <main class="mdl-layout__content">
     <div id="actions" class="upgrade">
         <div id="page-title">
-            <h1><?php printf(__('Actualización  %s'), $appVersion); ?></h1>
+            <h1><?php printf(__('Actualización  %s'), $upgradeVersion); ?></h1>
         </div>
 
-        <form id="frmUpgrade" method="post" action="index.php">
+        <form id="frmUpgrade" method="get" action="index.php" class="form-action" data-onsubmit="main/upgrade">
             <fieldset>
-                <legend><?php echo __('Actualización de BBDD'); ?></legend>
+                <?php if ($type === 'db'): ?>
+                    <legend><?php echo __('Actualización de BBDD'); ?></legend>
+                <?php elseif ($type === 'app'): ?>
+                    <legend><?php echo __('Actualización de Aplicación'); ?></legend>
+                <?php endif; ?>
 
                 <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                     <input id="h" name="h" type="text" required class="mdl-textfield__input mdl-color-text--indigo-400"
@@ -23,12 +27,14 @@
                     <?php echo __('Este código se encuentra en el archivo de configuración de sysPass con la etiqueta "upgradeKey"'); ?>
                 </div>
 
-                <?php if (count($constraints) > 0): ?>
+                <?php if ($version < 1316011001 && count($constraints) > 0): ?>
                     <div>
                         <ul class="errors">
                             <li class="msg-warning">
                                 <i class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></i>
                                 <?php echo __('Se han encontrado elementos huérfanos. Por favor, modifique estos elementos o indique los IDs por defecto para los elementos huérfanos.'); ?>
+                                <br>
+                                <?php echo __('Si no se indican los IDs, se crearán nuevos elementos.'); ?>
                             </li>
                         </ul>
                     </div>
@@ -46,66 +52,104 @@
                         || $checkConstraints->accountshistory_useredit > 0
                     ): ?>
                         <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
-                            <input id="userid" name="userid" type="number" required
+                            <input id="userid" name="userid" type="number"
                                    class="mdl-textfield__input mdl-color-text--indigo-400"
-                                   autocomplete="off" min="1" max="1000">
+                                   autocomplete="off" min="0" max="1000" value="0">
                             <label class="mdl-textfield__label"
-                                   for="h"><?php echo __('Introducir un ID de usuario válido para cuentas'); ?></label>
+                                   for="userid"><?php echo __('Introducir un ID de usuario válido para cuentas'); ?></label>
                         </div>
                     <?php endif; ?>
 
                     <?php if ($checkConstraints->accounts_category > 0
                         || $checkConstraints->accountshistory_category > 0
                     ): ?>
                         <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
-                            <input id="categoryid" name="categoryid" type="number" required
+                            <input id="categoryid" name="categoryid" type="number"
                                    class="mdl-textfield__input mdl-color-text--indigo-400"
-                                   autocomplete="off" min="1" max="1000">
+                                   autocomplete="off" min="0" max="1000" value="0">
                             <label class="mdl-textfield__label"
-                                   for="h"><?php echo __('Introducir un ID de categoría válido para cuentas'); ?></label>
+                                   for="categoryid"><?php echo __('Introducir un ID de categoría válido para cuentas'); ?></label>
                         </div>
                     <?php endif; ?>
 
                     <?php if ($checkConstraints->accounts_customer > 0
                         || $checkConstraints->accountshistory_customer > 0
                     ): ?>
                         <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
-                            <input id="customerid" name="customerid" type="number" required
+                            <input id="customerid" name="customerid" type="number"
                                    class="mdl-textfield__input mdl-color-text--indigo-400"
-                                   autocomplete="off" min="1" max="1000">
+                                   autocomplete="off" min="0" max="1000" value="0">
                             <label class="mdl-textfield__label"
-                                   for="h"><?php echo __('Introducir un ID de cliente válido para cuentas'); ?></label>
+                                   for="customerid"><?php echo __('Introducir un ID de cliente válido para cuentas'); ?></label>
                         </div>
                     <?php endif; ?>
 
                     <?php if ($checkConstraints->users_group > 0): ?>
                         <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
-                            <input id="groupid" name="groupid" type="number" required
+                            <input id="groupid" name="groupid" type="number"
                                    class="mdl-textfield__input mdl-color-text--indigo-400"
-                                   autocomplete="off" min="1" max="1000">
+                                   autocomplete="off" min="0" max="1000" value="0">
                             <label class="mdl-textfield__label"
-                                   for="h"><?php echo __('Introducir un ID de grupo válido para usuarios'); ?></label>
+                                   for="groupid"><?php echo __('Introducir un ID de grupo válido para usuarios'); ?></label>
                         </div>
                     <?php endif; ?>
 
                     <?php if ($checkConstraints->users_profile > 0): ?>
                         <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
-                            <input id="profileid" name="profileid" type="number" required
+                            <input id="profileid" name="profileid" type="number"
                                    class="mdl-textfield__input mdl-color-text--indigo-400"
-                                   autocomplete="off" min="1" max="1000">
+                                   autocomplete="off" min="0" max="1000" value="0">
                             <label class="mdl-textfield__label"
-                                   for="h"><?php echo __('Introducir un ID de perfil válido para usuarios'); ?></label>
+                                   for="profileid"><?php echo __('Introducir un ID de perfil válido para usuarios'); ?></label>
                         </div>
                     <?php endif; ?>
                 <?php endif; ?>
 
+                <?php if ($version < 21017022601): ?>
+                    <div>
+                        <ul class="errors">
+                            <li class="msg-warning">
+                                <i class="icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>"><?php echo $icons->getIconWarning()->getIcon(); ?></i>
+                                <?php echo __('Esta actualización utiliza un nuevo esquema de encriptación, por lo que es necesario reencriptar los datos almacenados'); ?>
+                                <br>
+                                <strong><?php printf(__('Se van a actualizar %s cuentas. Este proceso puede tardar algo de tiempo.'), $numAccounts); ?></strong>
+                                <br>
+                                <?php printf(__('Para más información consulte: %s'), '<a target="_blank" href="https://doc.syspass.org">https://doc.syspass.org</a>'); ?>
+                            </li>
+                        </ul>
+                    </div>
+
+                    <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
+                        <input id="masterkey" name="masterkey" type="password"
+                               class="mdl-textfield__input mdl-color-text--indigo-400 passwordfield__input-show"
+                               maxlength="255" required/>
+                        <label class="mdl-textfield__label"
+                               for="masterkey"><?php echo __('Clave Maestra actual'); ?></label>
+                    </div>
+
+                    <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
+                        <input id="userlogin" name="userlogin" type="text" required
+                               class="mdl-textfield__input mdl-color-text--indigo-400"
+                               autocomplete="off">
+                        <label class="mdl-textfield__label"
+                               for="userlogin"><?php echo __('Introducir login de usuario válido'); ?></label>
+                    </div>
+
+                    <?php if ($numAccounts >= 500): ?>
+                        <input type="hidden" name="useTask" value="1">
+                        <input type="hidden" name="taskId" value="<?php echo $taskId; ?>">
+                        <input type="hidden" name="lock" value="upgrade">
+                    <?php endif; ?>
+                <?php endif; ?>
+
                 <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="chkConfirm">
                     <input type="checkbox" id="chkConfirm" class="mdl-checkbox__input" name="chkConfirm">
                     <span class="mdl-checkbox__label"><?php echo __('He realizado una copia de seguridad completa de sysPass'); ?></span>
                 </label>
 
                 <input type="hidden" name="a" value="<?php echo $action; ?>">
-                <input type="hidden" name="t" value="<?php echo $time; ?>">
+                <input type="hidden" name="type" value="<?php echo $type; ?>">
+                <input type="hidden" name="version" value="<?php echo $version; ?>">
                 <input type="hidden" name="upgrade" value="1">
             </fieldset>
 

--- js/app-actions.js ---
@@ -44,7 +44,9 @@ sysPass.Actions = function (Common) {
         main: {
             login: "/ajax/ajax_doLogin.php",
             install: "/ajax/ajax_install.php",
-            getUpdates: "/ajax/ajax_checkUpds.php"
+            upgrade: "/ajax/ajax_upgrade.php",
+            getUpdates: "/ajax/ajax_checkUpds.php",
+            task: "/ajax/ajax_task.php"
         },
         checks: "/ajax/ajax_checkConnection.php",
         config: {
@@ -399,6 +401,70 @@ sysPass.Actions = function (Common) {
                 }
             });
         },
+        upgrade: function ($obj) {
+            log.info("main:upgrade");
+
+            var atext = "<div id=\"alert\"><p id=\"alert-text\">" + Common.config().LANG[59] + "</p></div>";
+
+            showDialog({
+                text: atext,
+                negative: {
+                    title: Common.config().LANG[44],
+                    onClick: function (e) {
+                        e.preventDefault();
+
+                        Common.msg.error(Common.config().LANG[44]);
+                    }
+                },
+                positive: {
+                    title: Common.config().LANG[43],
+                    onClick: function (e) {
+                        var $useTask = $obj.find("input[name='useTask']");
+                        var $taskStatus = $("#taskStatus");
+
+                        $taskStatus.empty().html(Common.config().LANG[62]);
+
+                        if ($useTask.length > 0 && $useTask.val() == 1) {
+                            var optsTask = Common.appRequests().getRequestOpts();
+                            optsTask.url = ajaxUrl.main.task;
+                            optsTask.data = {
+                                source: $obj.find("input[name='lock']").val(),
+                                taskId: $obj.find("input[name='taskId']").val()
+                            };
+
+                            var task = Common.appRequests().getActionEvent(optsTask, function (result) {
+                                var text = result.task + " - " + result.message + " - " + result.time + " - " + result.progress + "%";
+                                text += "<br>" + Common.config().LANG[62];
+
+                                $taskStatus.empty().html(text);
+                            });
+                        }
+
+                        var opts = Common.appRequests().getRequestOpts();
+                        opts.url = ajaxUrl.main.upgrade;
+                        opts.method = "get";
+                        opts.useFullLoading = true;
+                        opts.data = $obj.serialize();
+
+                        Common.appRequests().getActionCall(opts, function (json) {
+                            Common.msg.out(json);
+
+                            if (json.status !== 0) {
+                                $obj.find(":input[name=h]").val("");
+                            } else {
+                                if (task !== undefined) {
+                                    task.close();
+                                }
+
+                                setTimeout(function () {
+                                    Common.redirect("index.php");
+                                }, 5000);
+                            }
+                        });
+                    }
+                }
+            });
+        },
         getUpdates: function ($obj) {
             log.info("main:getUpdates");
 
@@ -515,9 +581,41 @@ sysPass.Actions = function (Common) {
                 positive: {
                     title: Common.config().LANG[43],
                     onClick: function (e) {
-                        config.save($obj);
+                        var $useTask = $obj.find("input[name='useTask']");
+                        var $taskStatus = $("#taskStatus");
 
-                        $obj.find(":input[type=password]").val("");
+                        $taskStatus.empty().html(Common.config().LANG[62]);
+
+                        if ($useTask.length > 0 && $useTask.val() == 1) {
+                            var optsTask = Common.appRequests().getRequestOpts();
+                            optsTask.url = ajaxUrl.main.task;
+                            optsTask.data = {
+                                source: $obj.find("input[name='lock']").val(),
+                                taskId: $obj.find("input[name='taskId']").val()
+                            };
+
+                            var task = Common.appRequests().getActionEvent(optsTask, function (result) {
+                                var text = result.task + " - " + result.message + " - " + result.time + " - " + result.progress + "%";
+                                text += "<br>" + Common.config().LANG[62];
+
+                                $taskStatus.empty().html(text);
+                            });
+                        }
+
+                        var opts = Common.appRequests().getRequestOpts();
+                        opts.url = ajaxUrl.config.save;
+                        opts.useFullLoading = true;
+                        opts.data = $obj.serialize();
+
+                        Common.appRequests().getActionCall(opts, function (json) {
+                            Common.msg.out(json);
+
+                            $obj.find(":input[type=password]").val("");
+
+                            if (task !== undefined) {
+                                task.close();
+                            }
+                        });
                     }
                 }
             });
@@ -528,6 +626,7 @@ sysPass.Actions = function (Common) {
             var opts = Common.appRequests().getRequestOpts();
             opts.url = ajaxUrl.config.export;
             opts.method = "post";
+            opts.useFullLoading = true;
             opts.data = $obj.serialize();
 
             Common.appRequests().getActionCall(opts, function (json) {

--- js/app-actions.min.js ---
@@ -1,42 +1,45 @@
-var $jscomp={scope:{},findInternal:function(c,e,k){c instanceof String&&(c=String(c));for(var f=c.length,g=0;g<f;g++){var l=c[g];if(e.call(k,l,g,c))return{i:g,v:l}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(c,e,k){if(k.get||k.set)throw new TypeError("ES3 does not support getters and setters.");c!=Array.prototype&&c!=Object.prototype&&(c[e]=k.value)};
-$jscomp.getGlobal=function(c){return"undefined"!=typeof window&&window===c?c:"undefined"!=typeof global?global:c};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(c,e,k,f){if(e){k=$jscomp.global;c=c.split(".");for(f=0;f<c.length-1;f++){var g=c[f];g in k||(k[g]={});k=k[g]}c=c[c.length-1];f=k[c];e=e(f);e!=f&&null!=e&&$jscomp.defineProperty(k,c,{configurable:!0,writable:!0,value:e})}};
+var $jscomp={scope:{},findInternal:function(c,d,k){c instanceof String&&(c=String(c));for(var f=c.length,g=0;g<f;g++){var l=c[g];if(d.call(k,l,g,c))return{i:g,v:l}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(c,d,k){if(k.get||k.set)throw new TypeError("ES3 does not support getters and setters.");c!=Array.prototype&&c!=Object.prototype&&(c[d]=k.value)};
+$jscomp.getGlobal=function(c){return"undefined"!=typeof window&&window===c?c:"undefined"!=typeof global?global:c};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(c,d,k,f){if(d){k=$jscomp.global;c=c.split(".");for(f=0;f<c.length-1;f++){var g=c[f];g in k||(k[g]={});k=k[g]}c=c[c.length-1];f=k[c];d=d(f);d!=f&&null!=d&&$jscomp.defineProperty(k,c,{configurable:!0,writable:!0,value:d})}};
 $jscomp.polyfill("Array.prototype.find",function(c){return c?c:function(c,k){return $jscomp.findInternal(this,c,k).v}},"es6-impl","es3");
-sysPass.Actions=function(c){var e=c.log,k=0,f={doAction:"/ajax/ajax_getContent.php",updateItems:"/ajax/ajax_getItems.php",user:{savePreferences:"/ajax/ajax_userPrefsSave.php",password:"/ajax/ajax_usrpass.php",passreset:"/ajax/ajax_passReset.php"},main:{login:"/ajax/ajax_doLogin.php",install:"/ajax/ajax_install.php",getUpdates:"/ajax/ajax_checkUpds.php"},checks:"/ajax/ajax_checkConnection.php",config:{save:"/ajax/ajax_configSave.php","export":"/ajax/ajax_configSave.php","import":"/ajax/ajax_configSave.php"},
-file:"/ajax/ajax_filesMgmt.php",link:"/ajax/ajax_itemSave.php",plugin:"/ajax/ajax_itemSave.php",account:{save:"/ajax/ajax_itemSave.php",saveFavorite:"/ajax/ajax_itemSave.php",request:"/ajax/ajax_itemSave.php",getFiles:"/ajax/ajax_accGetFiles.php",search:"/ajax/ajax_accSearch.php"},appMgmt:{show:"/ajax/ajax_itemShow.php",save:"/ajax/ajax_itemSave.php",search:"/ajax/ajax_itemSearch.php"},eventlog:"/ajax/ajax_eventlog.php",wiki:{show:"/ajax/ajax_wiki.php"},notice:{show:"/ajax/ajax_noticeShow.php",search:"/ajax/ajax_noticeSearch.php"}},
-g=function(a,b){var d={actionId:a.actionId,itemId:"undefined"!==a.itemId?a.itemId:0,isAjax:1},h=c.appRequests().getRequestOpts();h.url=f.doAction;h.method="get";h.type="html";h.addHistory=!0;h.data=d;c.appRequests().getActionCall(h,function(a){var c=$("#content");c.empty().html(a);a=sysPassApp.triggers().views;a.common(c);if(void 0!==b&&"function"===typeof a[b])a[b]();c=$(".mdl-layout__content");0<c.scrollTop()&&c.animate({scrollTop:0},1E3)})},l=function(a,b){$.magnificPopup.open({items:{src:b,type:"inline"},
-callbacks:{open:function(){var a=$("#box-popup");c.appTriggers().views.common(a);a.find(":input:text:visible:first").focus()},close:function(){a.data("item-dst")&&p.update(a)}},showCloseBtn:!1})},t=function(a,b){var d=$('<div id="box-popup" class="image">'+b+"</div>"),h=d.find("img");if(0===h.length)return l(a,b);h.hide();$.magnificPopup.open({items:{src:d,type:"inline"},callbacks:{open:function(){var a=this;h.on("click",function(){a.close()});setTimeout(function(){var a=c.resizeImage(h);d.css({backgroundColor:"#fff",
-width:a.width,height:"auto"});h.show("slow")},500)}}})},p={get:function(a){e.info("items:get");var b=a[0].selectize;b.clearOptions();b.load(function(d){var h=c.appRequests().getRequestOpts();h.url=f.updateItems;h.method="get";h.cache=!0;h.data={sk:a.data("sk"),itemType:a.data("item-type"),itemId:a.data("item-id")};c.appRequests().getActionCall(h,function(h){d(h.data);b.setValue(a.data("selected-id"),!0);c.appTriggers().updateFormHash()})})},update:function(a){e.info("items:update");var b=$("#"+a.data("item-dst"))[0].selectize;
-b.clearOptions();b.load(function(b){var d=c.appRequests().getRequestOpts();d.url=f.updateItems;d.method="get";d.data={sk:c.sk.get(),itemType:a.data("item-type")};c.appRequests().getActionCall(d,function(a){b(a.data)})})}},q={logout:function(){var a=window.location.search;c.redirect(0<a.length?"index.php"+a+"&logout=1":"index.php?logout=1")},login:function(a){e.info("main:login");var b=c.appRequests().getRequestOpts();b.url=f.main.login;b.method="get";b.data=a.serialize();c.appRequests().getActionCall(b,
-function(b){var d=$(".extra-hidden");switch(b.status){case 0:c.redirect(b.data.url);break;case 2:c.msg.out(b);a.find("input[type='text'],input[type='password']").val("");a.find("input:first").focus();0<d.length&&d.hide();$("#mpass").prop("disabled",!1).val("");$("#smpass").show();break;case 5:c.msg.out(b);a.find("input[type='text'],input[type='password']").val("");a.find("input:first").focus();0<d.length&&d.hide();$("#oldpass").prop("disabled",!1).val("");$("#soldpass").show();break;default:c.msg.out(b),
-a.find("input[type='text'],input[type='password']").val(""),a.find("input:first").focus()}})},install:function(a){e.info("main:install");var b=c.appRequests().getRequestOpts();b.url=f.main.install;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect("index.php")},1E3)})},getUpdates:function(a){e.info("main:getUpdates");a=c.appRequests().getRequestOpts();a.url=f.main.getUpdates;a.type="html";a.method="get";a.timeout=1E4;a.useLoading=
-!1;a.data={isAjax:1};c.appRequests().getActionCall(a,function(a){$("#updates").html(a);"undefined"!==typeof componentHandler&&componentHandler.upgradeDom()},function(){$("#updates").html("!")})}},r={save:function(a){e.info("config:save");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data=a.serialize();"masterpass"===a.data("type")&&(b.useFullLoading=!0);c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&(void 0!==a.data("nextaction-id")?g({actionId:a.data("nextaction-id"),
-itemId:a.data("activetab")}):void 0!==a.data("reload")&&setTimeout(function(){c.redirect("index.php")},2E3))})},masterpass:function(a){var b='<div id="alert"><p id="alert-text">'+c.config().LANG[59]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(b){b.preventDefault();c.msg.error(c.config().LANG[44]);a.find(":input[type=password]").val("")}},positive:{title:c.config().LANG[43],onClick:function(c){r.save(a);a.find(":input[type=password]").val("")}}})},backup:function(a){e.info("config:backup");
-var b=c.appRequests().getRequestOpts();b.url=f.config["export"];b.method="post";b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},"export":function(a){e.info("config:export");var b=c.appRequests().getRequestOpts();b.url=f.config["export"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data("nextaction-id")&&
-g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},"import":function(a){e.info("config:import");var b=c.appRequests().getRequestOpts();b.url=f.config["import"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},refreshMpass:function(a){e.info("config:import");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data={actionId:a.data("action-id"),
-itemId:a.data("item-id"),sk:a.data("sk"),isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},m={show:function(a){e.info("account:show");g({actionId:a.data("action-id"),itemId:a.data("item-id")},"account")},showHistory:function(a){e.info("account:showHistory");g({actionId:a.data("action-id"),itemId:a.val()},"account")},edit:function(a){e.info("account:edit");g({actionId:a.data("action-id"),itemId:a.data("item-id")},"account")},"delete":function(a){e.info("account:delete");var b=
-'<div id="alert"><p id="alert-text">'+c.config().LANG[3]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(a){c.msg.out(a);m.search()})}}})},showpass:function(a){e.info("account:showpass");
-var b=a.data("parent-id"),d=c.appRequests().getRequestOpts();d.url=f.appMgmt.show;d.method="get";d.data={itemId:0==b?a.data("item-id"):b,actionId:a.data("action-id"),isHistory:a.data("history"),isLinked:0<b?1:0,isFull:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(d,function(b){0!==b.status?c.msg.out(b):(b=$(b.data.html),l(a,b),b.on("mouseleave",function(){clearTimeout(k);k=setTimeout(function(){$.magnificPopup.close()},3E4)}).on("mouseenter",function(){0!==k&&clearTimeout(k)}))})},copypass:function(a){e.info("account:copypass");
-var b=a.data("parent-id"),d=c.appRequests().getRequestOpts();d.url=f.appMgmt.show;d.method="get";d.async=!1;d.data={itemId:0==b?a.data("item-id"):b,actionId:a.data("action-id"),isHistory:a.data("history"),isFull:0,sk:c.sk.get(),isAjax:1};a=c.appRequests().getActionCall(d);void 0!==a.responseJSON.csrf&&c.sk.set(a.responseJSON.csrf);return a},copy:function(a){e.info("account:copy");g({actionId:a.data("action-id"),itemId:a.data("item-id")},"account")},savefavorite:function(a,b){e.info("account:saveFavorite");
-var d="on"===a.data("status"),h={actionId:d?a.data("action-id-off"):a.data("action-id-on"),itemId:a.data("item-id"),sk:c.sk.get(),isAjax:1},g=c.appRequests().getRequestOpts();g.url=f.account.saveFavorite;g.data=h;c.appRequests().getActionCall(g,function(h){c.msg.out(h);0===h.status&&(a.data("status",d?"off":"on"),"function"===typeof b&&b())})},request:function(a){e.info("account:request");var b=c.appRequests().getRequestOpts();b.url=f.account.request;b.data=a.serialize();c.appRequests().getActionCall(b,
-function(a){c.msg.out(a)})},menu:function(a){a.hide();a.parent().children(".actions-optional").show(250)},sort:function(a){e.info("account:sort");var c=$("#frmSearch");c.find('input[name="skey"]').val(a.data("key"));c.find('input[name="sorder"]').val(a.data("dir"));c.find('input[name="start"]').val(a.data("start"));m.search()},editpass:function(a){e.info("account:editpass");var c=a.data("parent-id");g({actionId:a.data("action-id"),itemId:0==c?a.data("item-id"):c},"account")},restore:function(a){e.info("account:restore");
-m.save(a)},getfiles:function(a){e.info("account:getfiles");var b=c.appRequests().getRequestOpts();b.method="get";b.type="html";b.url=f.account.getFiles;b.data={id:a.data("item-id"),del:a.data("delete"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(c){a.html(c)})},search:function(a){e.info("account:search");var b=$("#frmSearch");b.find("input[name='sk']").val(c.sk.get());b.find("input[name='skey']").val();b.find("input[name='sorder']").val();void 0!==a&&b.find("input[name='start']").val(0);
-a=c.appRequests().getRequestOpts();a.url=f.account.search;a.method="get";a.data=b.serialize();c.appRequests().getActionCall(a,function(a){10===a.status&&c.msg.out(a);c.sk.set(a.sk);$("#res-content").empty().html(a.html)})},save:function(a){e.info("account:save");var b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);void 0!==a.data.itemId&&void 0!==a.data.nextActionId&&g({actionId:a.data.nextActionId,itemId:a.data.itemId},
-"account")})}},n={refreshTab:!0,show:function(a){e.info("appMgmt:show");if(a.data("item-dst")||void 0===a.data("activetab"))e.info(a.data("activetab")),n.refreshTab=!1;var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.show;b.method="get";b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),activeTab:a.data("activetab"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})},"delete":function(a){e.info("appMgmt:delete");var b=
-'<div id="alert"><p id="alert-text">'+c.config().LANG[12]+"</p></div>",d=a.data("selection"),h=[];if(d&&($(d).find(".is-selected").each(function(a,c){var b=$(this);h.push(b.data("item-id"))}),0===h.length))return;showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={itemId:d?h:a.data("item-id"),
-actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){c.msg.out(b);a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})}}})},save:function(a){e.info("appMgmt:save");var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&(b=a.data("activetab"),!0===n.refreshTab&&void 0!==b&&g({actionId:a.data("nextaction-id"),itemId:b}),$.magnificPopup.close())})},
-search:function(a){e.info("appMgmt:search");var b=$(a.data("target")),d=c.appRequests().getRequestOpts();d.url=f.appMgmt.search;d.method="get";d.data=a.serialize();c.appRequests().getActionCall(d,function(a){0===a.status?b.html(a.data.html):b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},nav:function(a){e.info("appMgmt:nav");var b=$("#"+a.data("action-form"));b.find("[name='start']").val(a.data("start"));b.find("[name='count']").val(a.data("count"));b.find("[name='sk']").val(c.sk.get());
-n.search(b)},ldapSync:function(a){e.info("appMgmt:ldapSync");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[57]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}}})}};
-return{doAction:g,appMgmt:n,account:m,file:{view:function(a){e.info("file:view");var b=c.appRequests().getRequestOpts();b.url=f.file;b.type="html";b.data={fileId:a.data("item-id"),sk:c.sk.get(),actionId:a.data("action-id")};c.appRequests().getActionCall(b,function(b){void 0!==b.status&&1===b.status?c.msg.out(b):b?t(a,b):c.msg.error(c.config().LANG[14])})},download:function(a){e.info("file:download");a={fileId:a.data("item-id"),sk:c.sk.get(),actionId:a.data("action-id")};$.fileDownload(c.config().APP_ROOT+
-f.file,{httpMethod:"POST",data:a})},"delete":function(a){e.info("file:delete");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[15]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.file;b.data={fileId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(a){c.msg.out(a);
-0===a.status&&(a=$("#list-account-files"),m.getfiles(a))})}}})}},checks:{ldap:function(a){e.info("checks:ldap");a=$(a.data("src"));a.find("[name='sk']").val(c.sk.get());var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);var b=$("#ldap-results");b.find(".list-wrap").html(c.appTheme().html.getList(a.data));b.show("slow")})},wiki:function(a){e.info("checks:wiki");a=$(a.data("src"));a.find("[name='sk']").val(c.sk.get());
-var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&$("#dokuWikiResCheck").html(a.data)})}},config:r,main:q,user:{savePreferences:function(a){e.info("user:savePreferences");var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);setTimeout(function(){c.redirect("index.php")},2E3)})},saveSecurity:function(a){e.info("user:saveSecurity");
-var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},password:function(a){e.info("user:password");var b=c.appRequests().getRequestOpts();b.type="html";b.method="get";b.url=f.user.password;b.data={actionId:a.data("action-id"),itemId:a.data("item-id"),sk:a.data("sk"),isAjax:1};c.appRequests().getActionCall(b,function(c){0===c.length?q.logout():
-l(a,c)})},passreset:function(a){e.info("user:passreset");var b=c.appRequests().getRequestOpts();b.url=f.user.passreset;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect("index.php")},1E3)})}},link:{save:function(a){e.info("link:save");var b=c.appRequests().getRequestOpts();b.url=f.link;b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};var d='<div id="alert"><p id="alert-text">'+c.config().LANG[48]+
-"</p></div>";showDialog({text:d,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},positive:{title:c.config().LANG[43],onClick:function(d){d.preventDefault();b.data.notify=1;c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data("nextaction-id"),itemId:a.data("item-id")})})}}})},refresh:function(a){e.info("link:refresh");var b={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),
-activeTab:a.data("activetab")},d=c.appRequests().getRequestOpts();d.url=f.link;d.data=b;c.appRequests().getActionCall(d,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})}},eventlog:{nav:function(a){if(void 0===a.data("start"))return!1;var b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method="get";b.type="html";b.data={actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1,start:a.data("start"),count:a.data("count"),current:a.data("current")};
-c.appRequests().getActionCall(b,function(a){$("#content").html(a);c.scrollUp()})},clear:function(a){var b='<div id="alert"><p id="alert-text">'+c.config().LANG[20]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method="get";b.data={clear:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,
-function(b){c.msg.out(b);0==b.status&&g({actionId:a.data("nextaction-id")})})}}})}},ajaxUrl:f,plugin:{toggle:function(a){e.info("plugin:enable");a={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),activeTab:a.data("activetab")};var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a;c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&setTimeout(function(){c.redirect("index.php")},2E3)})},reset:function(a){e.info("plugin:reset");var b='<div id="alert"><p id="alert-text">'+
-c.config().LANG[58]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),activeTab:a.data("activetab")};var d=c.appRequests().getRequestOpts();d.url=f.appMgmt.save;d.data=b;c.appRequests().getActionCall(d,function(a){c.msg.out(a)})}}})}},notice:{check:function(a){e.info("notice:check");
-var b={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get()},d=c.appRequests().getRequestOpts();d.url=f.appMgmt.save;d.data=b;c.appRequests().getActionCall(d,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},search:function(a){e.info("notice:search");var b=$(a.data("target")),d=c.appRequests().getRequestOpts();d.url=f.notice.search;d.method="get";d.data=a.serialize();c.appRequests().getActionCall(d,function(a){0===a.status?b.html(a.data.html):
-b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},show:function(a){e.info("notice:show");var b=c.appRequests().getRequestOpts();b.url=f.notice.show;b.method="get";b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),activeTab:a.data("activetab"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},wiki:{show:function(a){e.info("wiki:show");var b=c.appRequests().getRequestOpts();b.url=f.wiki.show;b.method="get";b.data=
-{pageName:a.data("pagename"),actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},items:p}};
+sysPass.Actions=function(c){var d=c.log,k=0,f={doAction:"/ajax/ajax_getContent.php",updateItems:"/ajax/ajax_getItems.php",user:{savePreferences:"/ajax/ajax_userPrefsSave.php",password:"/ajax/ajax_usrpass.php",passreset:"/ajax/ajax_passReset.php"},main:{login:"/ajax/ajax_doLogin.php",install:"/ajax/ajax_install.php",upgrade:"/ajax/ajax_upgrade.php",getUpdates:"/ajax/ajax_checkUpds.php",task:"/ajax/ajax_task.php"},checks:"/ajax/ajax_checkConnection.php",config:{save:"/ajax/ajax_configSave.php","export":"/ajax/ajax_configSave.php",
+"import":"/ajax/ajax_configSave.php"},file:"/ajax/ajax_filesMgmt.php",link:"/ajax/ajax_itemSave.php",plugin:"/ajax/ajax_itemSave.php",account:{save:"/ajax/ajax_itemSave.php",saveFavorite:"/ajax/ajax_itemSave.php",request:"/ajax/ajax_itemSave.php",getFiles:"/ajax/ajax_accGetFiles.php",search:"/ajax/ajax_accSearch.php"},appMgmt:{show:"/ajax/ajax_itemShow.php",save:"/ajax/ajax_itemSave.php",search:"/ajax/ajax_itemSearch.php"},eventlog:"/ajax/ajax_eventlog.php",wiki:{show:"/ajax/ajax_wiki.php"},notice:{show:"/ajax/ajax_noticeShow.php",
+search:"/ajax/ajax_noticeSearch.php"}},g=function(a,b){var e={actionId:a.actionId,itemId:"undefined"!==a.itemId?a.itemId:0,isAjax:1},h=c.appRequests().getRequestOpts();h.url=f.doAction;h.method="get";h.type="html";h.addHistory=!0;h.data=e;c.appRequests().getActionCall(h,function(c){var a=$("#content");a.empty().html(c);c=sysPassApp.triggers().views;c.common(a);if(void 0!==b&&"function"===typeof c[b])c[b]();a=$(".mdl-layout__content");0<a.scrollTop()&&a.animate({scrollTop:0},1E3)})},l=function(a,b){$.magnificPopup.open({items:{src:b,
+type:"inline"},callbacks:{open:function(){var a=$("#box-popup");c.appTriggers().views.common(a);a.find(":input:text:visible:first").focus()},close:function(){a.data("item-dst")&&p.update(a)}},showCloseBtn:!1})},r=function(a,b){var e=$('<div id="box-popup" class="image">'+b+"</div>"),h=e.find("img");if(0===h.length)return l(a,b);h.hide();$.magnificPopup.open({items:{src:e,type:"inline"},callbacks:{open:function(){var a=this;h.on("click",function(){a.close()});setTimeout(function(){var a=c.resizeImage(h);
+e.css({backgroundColor:"#fff",width:a.width,height:"auto"});h.show("slow")},500)}}})},p={get:function(a){d.info("items:get");var b=a[0].selectize;b.clearOptions();b.load(function(e){var h=c.appRequests().getRequestOpts();h.url=f.updateItems;h.method="get";h.cache=!0;h.data={sk:a.data("sk"),itemType:a.data("item-type"),itemId:a.data("item-id")};c.appRequests().getActionCall(h,function(h){e(h.data);b.setValue(a.data("selected-id"),!0);c.appTriggers().updateFormHash()})})},update:function(a){d.info("items:update");
+var b=$("#"+a.data("item-dst"))[0].selectize;b.clearOptions();b.load(function(e){var b=c.appRequests().getRequestOpts();b.url=f.updateItems;b.method="get";b.data={sk:c.sk.get(),itemType:a.data("item-type")};c.appRequests().getActionCall(b,function(a){e(a.data)})})}},q={logout:function(){var a=window.location.search;c.redirect(0<a.length?"index.php"+a+"&logout=1":"index.php?logout=1")},login:function(a){d.info("main:login");var b=c.appRequests().getRequestOpts();b.url=f.main.login;b.method="get";b.data=
+a.serialize();c.appRequests().getActionCall(b,function(e){var b=$(".extra-hidden");switch(e.status){case 0:c.redirect(e.data.url);break;case 2:c.msg.out(e);a.find("input[type='text'],input[type='password']").val("");a.find("input:first").focus();0<b.length&&b.hide();$("#mpass").prop("disabled",!1).val("");$("#smpass").show();break;case 5:c.msg.out(e);a.find("input[type='text'],input[type='password']").val("");a.find("input:first").focus();0<b.length&&b.hide();$("#oldpass").prop("disabled",!1).val("");
+$("#soldpass").show();break;default:c.msg.out(e),a.find("input[type='text'],input[type='password']").val(""),a.find("input:first").focus()}})},install:function(a){d.info("main:install");var b=c.appRequests().getRequestOpts();b.url=f.main.install;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect("index.php")},1E3)})},upgrade:function(a){d.info("main:upgrade");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[59]+"</p></div>";
+showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=a.find("input[name='useTask']");var e=$("#taskStatus");e.empty().html(c.config().LANG[62]);if(0<b.length&&1==b.val()){b=c.appRequests().getRequestOpts();b.url=f.main.task;b.data={source:a.find("input[name='lock']").val(),taskId:a.find("input[name='taskId']").val()};var d=c.appRequests().getActionEvent(b,function(a){a=
+a.task+" - "+a.message+" - "+a.time+" - "+a.progress+"%";a+="<br>"+c.config().LANG[62];e.empty().html(a)})}b=c.appRequests().getRequestOpts();b.url=f.main.upgrade;b.method="get";b.useFullLoading=!0;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0!==b.status?a.find(":input[name=h]").val(""):(void 0!==d&&d.close(),setTimeout(function(){c.redirect("index.php")},5E3))})}}})},getUpdates:function(a){d.info("main:getUpdates");a=c.appRequests().getRequestOpts();a.url=f.main.getUpdates;
+a.type="html";a.method="get";a.timeout=1E4;a.useLoading=!1;a.data={isAjax:1};c.appRequests().getActionCall(a,function(a){$("#updates").html(a);"undefined"!==typeof componentHandler&&componentHandler.upgradeDom()},function(){$("#updates").html("!")})}},m={show:function(a){d.info("account:show");g({actionId:a.data("action-id"),itemId:a.data("item-id")},"account")},showHistory:function(a){d.info("account:showHistory");g({actionId:a.data("action-id"),itemId:a.val()},"account")},edit:function(a){d.info("account:edit");
+g({actionId:a.data("action-id"),itemId:a.data("item-id")},"account")},"delete":function(a){d.info("account:delete");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[3]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get()};
+c.appRequests().getActionCall(b,function(a){c.msg.out(a);m.search()})}}})},showpass:function(a){d.info("account:showpass");var b=a.data("parent-id"),e=c.appRequests().getRequestOpts();e.url=f.appMgmt.show;e.method="get";e.data={itemId:0==b?a.data("item-id"):b,actionId:a.data("action-id"),isHistory:a.data("history"),isLinked:0<b?1:0,isFull:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(e,function(b){0!==b.status?c.msg.out(b):(b=$(b.data.html),l(a,b),b.on("mouseleave",function(){clearTimeout(k);
+k=setTimeout(function(){$.magnificPopup.close()},3E4)}).on("mouseenter",function(){0!==k&&clearTimeout(k)}))})},copypass:function(a){d.info("account:copypass");var b=a.data("parent-id"),e=c.appRequests().getRequestOpts();e.url=f.appMgmt.show;e.method="get";e.async=!1;e.data={itemId:0==b?a.data("item-id"):b,actionId:a.data("action-id"),isHistory:a.data("history"),isFull:0,sk:c.sk.get(),isAjax:1};a=c.appRequests().getActionCall(e);void 0!==a.responseJSON.csrf&&c.sk.set(a.responseJSON.csrf);return a},
+copy:function(a){d.info("account:copy");g({actionId:a.data("action-id"),itemId:a.data("item-id")},"account")},savefavorite:function(a,b){d.info("account:saveFavorite");var e="on"===a.data("status"),h={actionId:e?a.data("action-id-off"):a.data("action-id-on"),itemId:a.data("item-id"),sk:c.sk.get(),isAjax:1},g=c.appRequests().getRequestOpts();g.url=f.account.saveFavorite;g.data=h;c.appRequests().getActionCall(g,function(h){c.msg.out(h);0===h.status&&(a.data("status",e?"off":"on"),"function"===typeof b&&
+b())})},request:function(a){d.info("account:request");var b=c.appRequests().getRequestOpts();b.url=f.account.request;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a)})},menu:function(a){a.hide();a.parent().children(".actions-optional").show(250)},sort:function(a){d.info("account:sort");var c=$("#frmSearch");c.find('input[name="skey"]').val(a.data("key"));c.find('input[name="sorder"]').val(a.data("dir"));c.find('input[name="start"]').val(a.data("start"));m.search()},editpass:function(a){d.info("account:editpass");
+var c=a.data("parent-id");g({actionId:a.data("action-id"),itemId:0==c?a.data("item-id"):c},"account")},restore:function(a){d.info("account:restore");m.save(a)},getfiles:function(a){d.info("account:getfiles");var b=c.appRequests().getRequestOpts();b.method="get";b.type="html";b.url=f.account.getFiles;b.data={id:a.data("item-id"),del:a.data("delete"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(c){a.html(c)})},search:function(a){d.info("account:search");var b=$("#frmSearch");b.find("input[name='sk']").val(c.sk.get());
+b.find("input[name='skey']").val();b.find("input[name='sorder']").val();void 0!==a&&b.find("input[name='start']").val(0);a=c.appRequests().getRequestOpts();a.url=f.account.search;a.method="get";a.data=b.serialize();c.appRequests().getActionCall(a,function(a){10===a.status&&c.msg.out(a);c.sk.set(a.sk);$("#res-content").empty().html(a.html)})},save:function(a){d.info("account:save");var b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);
+void 0!==a.data.itemId&&void 0!==a.data.nextActionId&&g({actionId:a.data.nextActionId,itemId:a.data.itemId},"account")})}},n={refreshTab:!0,show:function(a){d.info("appMgmt:show");if(a.data("item-dst")||void 0===a.data("activetab"))d.info(a.data("activetab")),n.refreshTab=!1;var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.show;b.method="get";b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),activeTab:a.data("activetab"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==
+b.status?c.msg.out(b):l(a,b.data.html)})},"delete":function(a){d.info("appMgmt:delete");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[12]+"</p></div>",e=a.data("selection"),h=[];if(e&&($(e).find(".is-selected").each(function(a,c){var b=$(this);h.push(b.data("item-id"))}),0===h.length))return;showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();
+b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={itemId:e?h:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){c.msg.out(b);a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})}}})},save:function(a){d.info("appMgmt:save");var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&(b=a.data("activetab"),
+!0===n.refreshTab&&void 0!==b&&g({actionId:a.data("nextaction-id"),itemId:b}),$.magnificPopup.close())})},search:function(a){d.info("appMgmt:search");var b=$(a.data("target")),e=c.appRequests().getRequestOpts();e.url=f.appMgmt.search;e.method="get";e.data=a.serialize();c.appRequests().getActionCall(e,function(a){0===a.status?b.html(a.data.html):b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},nav:function(a){d.info("appMgmt:nav");var b=$("#"+a.data("action-form"));b.find("[name='start']").val(a.data("start"));
+b.find("[name='count']").val(a.data("count"));b.find("[name='sk']").val(c.sk.get());n.search(b)},ldapSync:function(a){d.info("appMgmt:ldapSync");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[57]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={actionId:a.data("action-id"),sk:c.sk.get(),
+isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}}})}};return{doAction:g,appMgmt:n,account:m,file:{view:function(a){d.info("file:view");var b=c.appRequests().getRequestOpts();b.url=f.file;b.type="html";b.data={fileId:a.data("item-id"),sk:c.sk.get(),actionId:a.data("action-id")};c.appRequests().getActionCall(b,function(b){void 0!==b.status&&1===b.status?c.msg.out(b):b?r(a,b):c.msg.error(c.config().LANG[14])})},download:function(a){d.info("file:download");a={fileId:a.data("item-id"),
+sk:c.sk.get(),actionId:a.data("action-id")};$.fileDownload(c.config().APP_ROOT+f.file,{httpMethod:"POST",data:a})},"delete":function(a){d.info("file:delete");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[15]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.file;b.data={fileId:a.data("item-id"),
+actionId:a.data("action-id"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&(a=$("#list-account-files"),m.getfiles(a))})}}})}},checks:{ldap:function(a){d.info("checks:ldap");a=$(a.data("src"));a.find("[name='sk']").val(c.sk.get());var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);var b=$("#ldap-results");b.find(".list-wrap").html(c.appTheme().html.getList(a.data));b.show("slow")})},
+wiki:function(a){d.info("checks:wiki");a=$(a.data("src"));a.find("[name='sk']").val(c.sk.get());var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&$("#dokuWikiResCheck").html(a.data)})}},config:{save:function(a){d.info("config:save");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data=a.serialize();"masterpass"===a.data("type")&&(b.useFullLoading=!0);c.appRequests().getActionCall(b,function(b){c.msg.out(b);
+0===b.status&&(void 0!==a.data("nextaction-id")?g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")}):void 0!==a.data("reload")&&setTimeout(function(){c.redirect("index.php")},2E3))})},masterpass:function(a){var b='<div id="alert"><p id="alert-text">'+c.config().LANG[59]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(b){b.preventDefault();c.msg.error(c.config().LANG[44]);a.find(":input[type=password]").val("")}},positive:{title:c.config().LANG[43],
+onClick:function(b){b=a.find("input[name='useTask']");var e=$("#taskStatus");e.empty().html(c.config().LANG[62]);if(0<b.length&&1==b.val()){b=c.appRequests().getRequestOpts();b.url=f.main.task;b.data={source:a.find("input[name='lock']").val(),taskId:a.find("input[name='taskId']").val()};var d=c.appRequests().getActionEvent(b,function(a){a=a.task+" - "+a.message+" - "+a.time+" - "+a.progress+"%";a+="<br>"+c.config().LANG[62];e.empty().html(a)})}b=c.appRequests().getRequestOpts();b.url=f.config.save;
+b.useFullLoading=!0;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);a.find(":input[type=password]").val("");void 0!==d&&d.close()})}}})},backup:function(a){d.info("config:backup");var b=c.appRequests().getRequestOpts();b.url=f.config["export"];b.method="post";b.useFullLoading=!0;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},
+"export":function(a){d.info("config:export");var b=c.appRequests().getRequestOpts();b.url=f.config["export"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},"import":function(a){d.info("config:import");var b=c.appRequests().getRequestOpts();b.url=f.config["import"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&
+void 0!==a.data("nextaction-id")&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},refreshMpass:function(a){d.info("config:import");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data={actionId:a.data("action-id"),itemId:a.data("item-id"),sk:a.data("sk"),isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},main:q,user:{savePreferences:function(a){d.info("user:savePreferences");var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=
+a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);setTimeout(function(){c.redirect("index.php")},2E3)})},saveSecurity:function(a){d.info("user:saveSecurity");var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},password:function(a){d.info("user:password");var b=c.appRequests().getRequestOpts();b.type="html";b.method="get";
+b.url=f.user.password;b.data={actionId:a.data("action-id"),itemId:a.data("item-id"),sk:a.data("sk"),isAjax:1};c.appRequests().getActionCall(b,function(b){0===b.length?q.logout():l(a,b)})},passreset:function(a){d.info("user:passreset");var b=c.appRequests().getRequestOpts();b.url=f.user.passreset;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect("index.php")},1E3)})}},link:{save:function(a){d.info("link:save");var b=c.appRequests().getRequestOpts();
+b.url=f.link;b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};var e='<div id="alert"><p id="alert-text">'+c.config().LANG[48]+"</p></div>";showDialog({text:e,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},positive:{title:c.config().LANG[43],onClick:function(e){e.preventDefault();b.data.notify=1;c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data("nextaction-id"),
+itemId:a.data("item-id")})})}}})},refresh:function(a){d.info("link:refresh");var b={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),activeTab:a.data("activetab")},e=c.appRequests().getRequestOpts();e.url=f.link;e.data=b;c.appRequests().getActionCall(e,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})}},eventlog:{nav:function(a){if(void 0===a.data("start"))return!1;var b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method=
+"get";b.type="html";b.data={actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1,start:a.data("start"),count:a.data("count"),current:a.data("current")};c.appRequests().getActionCall(b,function(a){$("#content").html(a);c.scrollUp()})},clear:function(a){var b='<div id="alert"><p id="alert-text">'+c.config().LANG[20]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();
+b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method="get";b.data={clear:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){c.msg.out(b);0==b.status&&g({actionId:a.data("nextaction-id")})})}}})}},ajaxUrl:f,plugin:{toggle:function(a){d.info("plugin:enable");a={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),activeTab:a.data("activetab")};var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a;c.appRequests().getActionCall(b,function(a){c.msg.out(a);
+0===a.status&&setTimeout(function(){c.redirect("index.php")},2E3)})},reset:function(a){d.info("plugin:reset");var b='<div id="alert"><p id="alert-text">'+c.config().LANG[58]+"</p></div>";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get(),activeTab:a.data("activetab")};var e=c.appRequests().getRequestOpts();
+e.url=f.appMgmt.save;e.data=b;c.appRequests().getActionCall(e,function(a){c.msg.out(a)})}}})}},notice:{check:function(a){d.info("notice:check");var b={itemId:a.data("item-id"),actionId:a.data("action-id"),sk:c.sk.get()},e=c.appRequests().getRequestOpts();e.url=f.appMgmt.save;e.data=b;c.appRequests().getActionCall(e,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data("nextaction-id"),itemId:a.data("activetab")})})},search:function(a){d.info("notice:search");var b=$(a.data("target")),e=c.appRequests().getRequestOpts();
+e.url=f.notice.search;e.method="get";e.data=a.serialize();c.appRequests().getActionCall(e,function(a){0===a.status?b.html(a.data.html):b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},show:function(a){d.info("notice:show");var b=c.appRequests().getRequestOpts();b.url=f.notice.show;b.method="get";b.data={itemId:a.data("item-id"),actionId:a.data("action-id"),activeTab:a.data("activetab"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},
+wiki:{show:function(a){d.info("wiki:show");var b=c.appRequests().getRequestOpts();b.url=f.wiki.show;b.method="get";b.data={pageName:a.data("pagename"),actionId:a.data("action-id"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},items:p}};

--- js/app-main.js ---
@@ -87,6 +87,11 @@ sysPass.Main = function () {
         },
         warn: function (msg) {
             console.warn(msg);
+        },
+        debug: function (msg) {
+            if (config.DEBUG === true) {
+                console.debug(msg);
+            }
         }
     };
 
@@ -184,7 +189,7 @@ sysPass.Main = function () {
                         msg.sticky(description);
                         break;
                     default:
-                        return;
+                        msg.error(description);
                 }
             }
         },

--- js/app-main.min.js ---
@@ -4,19 +4,19 @@ $jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.
 $jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.array=$jscomp.array||{};$jscomp.iteratorFromArray=function(a,g){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var f=0,c={next:function(){if(f<a.length){var e=f++;return{value:g(e,a[e]),done:!1}}c.next=function(){return{done:!0,value:void 0}};return c.next()}};c[Symbol.iterator]=function(){return c};return c};
 $jscomp.polyfill=function(a,g,f,c){if(g){f=$jscomp.global;a=a.split(".");for(c=0;c<a.length-1;c++){var e=a[c];e in f||(f[e]={});f=f[e]}a=a[a.length-1];c=f[a];g=g(c);g!=c&&null!=g&&$jscomp.defineProperty(f,a,{configurable:!0,writable:!0,value:g})}};$jscomp.polyfill("Array.prototype.keys",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(a){return a})}},"es6-impl","es3");
 $jscomp.findInternal=function(a,g,f){a instanceof String&&(a=String(a));for(var c=a.length,e=0;e<c;e++){var m=a[e];if(g.call(f,m,e,a))return{i:e,v:m}}return{i:-1,v:void 0}};$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,f){return $jscomp.findInternal(this,a,f).v}},"es6-impl","es3");
-sysPass.Main=function(){var a={APP_ROOT:"",LANG:[],PK:"",MAX_FILE_SIZE:1024,CRYPT:new JSEncrypt,CHECK_UPDATES:!1,TIMEZONE:"",LOCALE:"",DEBUG:""},g={passLength:0,minPasswordLength:8,complexity:{numbers:!0,symbols:!0,uppercase:!0,numlength:12}},f={},c={},e={},m={},q={},n={},k={log:function(b){!0===a.DEBUG&&console.log(b)},info:function(b){!0===a.DEBUG&&console.info(b)},error:function(b){console.error(b)},warn:function(b){console.warn(b)}};toastr.options={closeButton:!0,debug:!1,newestOnTop:!1,progressBar:!1,
-positionClass:"toast-top-center",preventDuplicates:!1,onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};var w=function(){k.info("setupCallbacks");var b=$("#container").data("page");if(""!==b&&"function"===typeof c.views[b])c.views[b]();0<$("footer").length&&c.views.footer();$("#btnBack").click(function(){r("index.php")});c.bodyHooks()},l={ok:function(b){toastr.success(b)},error:function(b){toastr.error(b)},
-warn:function(b){toastr.warning(b)},info:function(b){toastr.info(b)},sticky:function(b,h){var d={timeOut:0};"function"===typeof h&&(d.onHidden=h);toastr.warning(b,a.LANG[60],d)},out:function(b){if("object"===typeof b){var a=b.status,d=b.description;void 0!==b.messages&&0<b.messages.length&&(d=d+"<br>"+b.messages.join("<br>"));switch(a){case 0:l.ok(d);break;case 1:case 2:case 4:l.error(d);break;case 3:l.warn(d);break;case 10:e.main.logout();break;case 100:l.ok(d),l.sticky(d)}}},html:{error:function(b){return'<p class="error round">Oops...<br>'+
-a.LANG[1]+"<br>"+b+"</p>"}}},x=function(b){k.info("getEnvironment");var h=window.location.pathname.split("/");a.APP_ROOT=window.location.protocol+"//"+window.location.host+function(){for(var b="",a=1;a<=h.length-2;a++)b+="/"+h[a];return b}();var d=m.getRequestOpts();d.url="/ajax/ajax_getEnvironment.php";d.method="get";d.async=!1;d.useLoading=!1;d.data={isAjax:1};m.getActionCall(d,function(d){a.LANG=d.lang;a.PK=d.pk;a.CHECK_UPDATES=d.check_updates;a.CRYPT.setPublicKey(d.pk);a.TIMEZONE=d.timezone;a.LOCALE=
-d.locale;a.DEBUG=d.debug;a.MAX_FILE_SIZE=parseInt(d.max_file_size);"function"===typeof b&&b()})},t={get:function(){k.info("sk:get");return $("#container").attr("data-sk")},set:function(a){k.info("sk:set");$("#container").attr("data-sk",a)}},y=function(){var a=$("#container");if(!a.hasClass("content-no-auto-resize")){var h=$("#content").height()+200;a.css("height",h)}},z=function(){$("html, body").animate({scrollTop:0},"slow")},A=function(a){for(var b=[],d,c=window.location.href.slice(window.location.href.indexOf("?")+
-1).split("&"),f=0;f<c.length;f++)d=c[f].split("="),b.push(d[0]),b[d[0]]=d[1];return void 0!==a&&void 0!==b[a]?b[a]:b},B=function(){k.info("checkLogout");1===parseInt(A("logout"))&&l.sticky(a.LANG[61],function(){r("index.php")})},r=function(a){window.location.replace(a)},C=function(b){var h={actionId:b.data("action-id"),itemId:b.data("item-id"),sk:t.get()},d={requestDoneAction:"",setRequestData:function(a){$.extend(h,a)},getRequestData:function(){return h},beforeSendAction:"",url:""},f=function(a){if(void 0===
-d.url||""===d.url)return!1;var b=new FormData;b.append("inFile",a);b.append("isAjax",1);h.sk=t.get();Object.keys(h).forEach(function(a){b.append(a,h[a])});a=m.getRequestOpts();a.url=d.url;a.processData=!1;a.contentType=!1;a.data=b;m.getActionCall(a,function(a){var b=a.status;a=a.description;0===b?("function"===typeof d.requestDoneAction&&d.requestDoneAction(),l.ok(a)):10===b?e.main.logout():l.error(a)})},c=function(d){if(5<d.length)l.error(a.LANG[17]+" (Max: 5)");else for(var h=0;h<d.length;h++){var p=
-d[h];if(p.size/1E3>a.MAX_FILE_SIZE)l.error(a.LANG[18]+"<br>"+p.name+" (Max: "+a.MAX_FILE_SIZE+")");else{var c;a:{c=p.name;for(var g=b.data("files-ext").toLowerCase().split(","),e=0;e<=g.length;e++)if(-1!==c.indexOf(g[e])){c=!0;break a}c=!1}c?f(d[h]):l.error(a.LANG[19]+"<br>"+p.name)}}},g=function(a){var b=$("#fileUploadForm");!1===a&&b.hide();a=b.find("input[type='file']");a.on("change",function(){"function"===typeof d.beforeSendAction&&d.beforeSendAction();c(this.files)});return a};window.File&&
-window.FileList&&window.FileReader?function(){k.info("fileUpload:init");var a=g(!1);b.on("dragover dragenter",function(a){k.info("fileUpload:drag");a.stopPropagation();a.preventDefault()});b.on("drop",function(a){k.info("fileUpload:drop");a.stopPropagation();a.preventDefault();"function"===typeof d.beforeSendAction&&d.beforeSendAction();c(a.originalEvent.dataTransfer.files)});b.on("click",function(){a.click()})}():g(!0);return d},D=function(a){k.info("checkPassLevel");g.passLength=a.val().length;
-v(zxcvbn(a.val()),a)},v=function(b,h){k.info("outputResult");var d=$(".passLevel-"+h.attr("id")),c=b.score;d.show();d.removeClass("weak good strong strongest");0===g.passLength?d.attr("title","").empty():g.passLength<g.minPasswordLength?d.attr("title",a.LANG[11]).addClass("weak"):0===c?d.attr("title",a.LANG[9]+" - "+b.feedback.warning).addClass("weak"):1===c||2===c?d.attr("title",a.LANG[8]+" - "+b.feedback.warning).addClass("good"):3===c?d.attr("title",a.LANG[7]).addClass("strong"):4===c&&d.attr("title",
-a.LANG[10]).addClass("strongest")},E=function(b){$(b).find(".checkbox").button({icons:{primary:"ui-icon-transferthick-e-w"}}).click(function(){var b=$(this);!0===b.prop("checked")?b.button("option","label",a.LANG[40]):b.button("option","label",a.LANG[41])})},u=function(b){k.info("encryptFormValue");var c=b.val();""!==c&&parseInt(b.attr("data-length"))!==c.length&&(c=a.CRYPT.encrypt(c),b.val(c),b.attr("data-length",c.length))},F=function(){k.info("initializeClipboard");var b=new Clipboard(".clip-pass-button",
-{text:function(a){return e.account.copypass($(a)).responseJSON.data.accpass}});b.on("success",function(b){l.ok(a.LANG[45])});b.on("error",function(b){l.error(a.LANG[46])});var b=new Clipboard(".dialog-clip-pass-button"),c=new Clipboard(".dialog-clip-user-button");b.on("success",function(a){$(".dialog-user-text").removeClass("dialog-clip-copy");$(".dialog-pass-text").addClass("dialog-clip-copy");a.clearSelection()});c.on("success",function(a){$(".dialog-pass-text").removeClass("dialog-clip-copy");
-$(".dialog-user-text").addClass("dialog-clip-copy");a.clearSelection()});(new Clipboard(".clip-pass-icon")).on("success",function(b){l.ok(a.LANG[45]);b.clearSelection()})},G=function(){k.info("bindPassEncrypt");$("body").on("blur",":input[type=password]",function(a){a=$(this);a.hasClass("passwordfield__no-pki")||u(a)}).on("keypress",":input[type=password]",function(a){13===a.keyCode&&(a.preventDefault(),a=$(this),u(a),a.closest("form").submit())})},H=function(a,c){console.info("Eval: "+a);if("function"===
-typeof a)a(c);else throw Error("Function not found: "+a);},I=function(a){k.info("resizeImage");var b=.9*$(window).width(),d=.9*$(window).height(),c={width:a.width(),height:a.height()},f={calc:0,main:0,secondary:0,factor:.9,rel:c.width/c.height},g=function(a){a.main>a.secondary?a.calc=a.main/a.rel:a.main<a.secondary&&(a.calc=a.main*a.rel);a.calc>a.secondary&&(a.main*=a.factor,g(a));return a},e=function(){f.main=b;f.secondary=d;var e=g(f);a.css({width:e.main,height:e.calc});c.width=e.main;c.height=
-e.calc},l=function(){f.main=d;f.secondary=b;var e=g(f);a.css({width:e.calc,height:e.main});c.width=e.calc;c.height=e.main};c.width>b?e():c.height>d&&(k.info("height"),l());return c},J=function(){return $.extend({log:k,config:function(){return a},appTheme:function(){return f},appActions:function(){return e},appTriggers:function(){return c},appRequests:function(){return m},evalAction:H,resizeImage:I},q)},K=function(){return{actions:function(){return e},triggers:function(){return c},theme:function(){return f},
-sk:t,msg:l,log:k,passToClip:0,passwordData:g,outputResult:v,checkboxDetect:E,checkPassLevel:D,encryptFormValue:u,fileUpload:C,redirect:r,scrollUp:z,setContentSize:y}};(function(){k.info("init");q=K();n=J();c=sysPass.Triggers(n);e=sysPass.Actions(n);m=sysPass.Requests(n);x(function(){""!==a.PK&&G();"function"===typeof sysPass.Theme&&(f=sysPass.Theme(n));!0===a.CHECK_UPDATES&&e.main.getUpdates();F();w();B()})})();return q};
+sysPass.Main=function(){var a={APP_ROOT:"",LANG:[],PK:"",MAX_FILE_SIZE:1024,CRYPT:new JSEncrypt,CHECK_UPDATES:!1,TIMEZONE:"",LOCALE:"",DEBUG:""},g={passLength:0,minPasswordLength:8,complexity:{numbers:!0,symbols:!0,uppercase:!0,numlength:12}},f={},c={},e={},m={},q={},n={},h={log:function(b){!0===a.DEBUG&&console.log(b)},info:function(b){!0===a.DEBUG&&console.info(b)},error:function(b){console.error(b)},warn:function(b){console.warn(b)},debug:function(b){!0===a.DEBUG&&console.debug(b)}};toastr.options=
+{closeButton:!0,debug:!1,newestOnTop:!1,progressBar:!1,positionClass:"toast-top-center",preventDuplicates:!1,onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};var w=function(){h.info("setupCallbacks");var b=$("#container").data("page");if(""!==b&&"function"===typeof c.views[b])c.views[b]();0<$("footer").length&&c.views.footer();$("#btnBack").click(function(){r("index.php")});c.bodyHooks()},
+l={ok:function(b){toastr.success(b)},error:function(b){toastr.error(b)},warn:function(b){toastr.warning(b)},info:function(b){toastr.info(b)},sticky:function(b,k){var d={timeOut:0};"function"===typeof k&&(d.onHidden=k);toastr.warning(b,a.LANG[60],d)},out:function(b){if("object"===typeof b){var a=b.status,d=b.description;void 0!==b.messages&&0<b.messages.length&&(d=d+"<br>"+b.messages.join("<br>"));switch(a){case 0:l.ok(d);break;case 1:case 2:case 4:l.error(d);break;case 3:l.warn(d);break;case 10:e.main.logout();
+break;case 100:l.ok(d);l.sticky(d);break;default:l.error(d)}}},html:{error:function(b){return'<p class="error round">Oops...<br>'+a.LANG[1]+"<br>"+b+"</p>"}}},x=function(b){h.info("getEnvironment");var k=window.location.pathname.split("/");a.APP_ROOT=window.location.protocol+"//"+window.location.host+function(){for(var b="",a=1;a<=k.length-2;a++)b+="/"+k[a];return b}();var d=m.getRequestOpts();d.url="/ajax/ajax_getEnvironment.php";d.method="get";d.async=!1;d.useLoading=!1;d.data={isAjax:1};m.getActionCall(d,
+function(d){a.LANG=d.lang;a.PK=d.pk;a.CHECK_UPDATES=d.check_updates;a.CRYPT.setPublicKey(d.pk);a.TIMEZONE=d.timezone;a.LOCALE=d.locale;a.DEBUG=d.debug;a.MAX_FILE_SIZE=parseInt(d.max_file_size);"function"===typeof b&&b()})},t={get:function(){h.info("sk:get");return $("#container").attr("data-sk")},set:function(b){h.info("sk:set");$("#container").attr("data-sk",b)}},y=function(){var b=$("#container");if(!b.hasClass("content-no-auto-resize")){var a=$("#content").height()+200;b.css("height",a)}},z=function(){$("html, body").animate({scrollTop:0},
+"slow")},A=function(a){for(var b=[],d,c=window.location.href.slice(window.location.href.indexOf("?")+1).split("&"),f=0;f<c.length;f++)d=c[f].split("="),b.push(d[0]),b[d[0]]=d[1];return void 0!==a&&void 0!==b[a]?b[a]:b},B=function(){h.info("checkLogout");1===parseInt(A("logout"))&&l.sticky(a.LANG[61],function(){r("index.php")})},r=function(a){window.location.replace(a)},C=function(b){var k={actionId:b.data("action-id"),itemId:b.data("item-id"),sk:t.get()},d={requestDoneAction:"",setRequestData:function(a){$.extend(k,
+a)},getRequestData:function(){return k},beforeSendAction:"",url:""},f=function(a){if(void 0===d.url||""===d.url)return!1;var b=new FormData;b.append("inFile",a);b.append("isAjax",1);k.sk=t.get();Object.keys(k).forEach(function(a){b.append(a,k[a])});a=m.getRequestOpts();a.url=d.url;a.processData=!1;a.contentType=!1;a.data=b;m.getActionCall(a,function(a){var b=a.status;a=a.description;0===b?("function"===typeof d.requestDoneAction&&d.requestDoneAction(),l.ok(a)):10===b?e.main.logout():l.error(a)})},
+c=function(d){if(5<d.length)l.error(a.LANG[17]+" (Max: 5)");else for(var k=0;k<d.length;k++){var p=d[k];if(p.size/1E3>a.MAX_FILE_SIZE)l.error(a.LANG[18]+"<br>"+p.name+" (Max: "+a.MAX_FILE_SIZE+")");else{var c;a:{c=p.name;for(var g=b.data("files-ext").toLowerCase().split(","),e=0;e<=g.length;e++)if(-1!==c.indexOf(g[e])){c=!0;break a}c=!1}c?f(d[k]):l.error(a.LANG[19]+"<br>"+p.name)}}},g=function(a){var b=$("#fileUploadForm");!1===a&&b.hide();a=b.find("input[type='file']");a.on("change",function(){"function"===
+typeof d.beforeSendAction&&d.beforeSendAction();c(this.files)});return a};window.File&&window.FileList&&window.FileReader?function(){h.info("fileUpload:init");var a=g(!1);b.on("dragover dragenter",function(a){h.info("fileUpload:drag");a.stopPropagation();a.preventDefault()});b.on("drop",function(a){h.info("fileUpload:drop");a.stopPropagation();a.preventDefault();"function"===typeof d.beforeSendAction&&d.beforeSendAction();c(a.originalEvent.dataTransfer.files)});b.on("click",function(){a.click()})}():
+g(!0);return d},D=function(a){h.info("checkPassLevel");g.passLength=a.val().length;v(zxcvbn(a.val()),a)},v=function(b,k){h.info("outputResult");var d=$(".passLevel-"+k.attr("id")),c=b.score;d.show();d.removeClass("weak good strong strongest");0===g.passLength?d.attr("title","").empty():g.passLength<g.minPasswordLength?d.attr("title",a.LANG[11]).addClass("weak"):0===c?d.attr("title",a.LANG[9]+" - "+b.feedback.warning).addClass("weak"):1===c||2===c?d.attr("title",a.LANG[8]+" - "+b.feedback.warning).addClass("good"):
+3===c?d.attr("title",a.LANG[7]).addClass("strong"):4===c&&d.attr("title",a.LANG[10]).addClass("strongest")},E=function(b){$(b).find(".checkbox").button({icons:{primary:"ui-icon-transferthick-e-w"}}).click(function(){var b=$(this);!0===b.prop("checked")?b.button("option","label",a.LANG[40]):b.button("option","label",a.LANG[41])})},u=function(b){h.info("encryptFormValue");var c=b.val();""!==c&&parseInt(b.attr("data-length"))!==c.length&&(c=a.CRYPT.encrypt(c),b.val(c),b.attr("data-length",c.length))},
+F=function(){h.info("initializeClipboard");var b=new Clipboard(".clip-pass-button",{text:function(a){return e.account.copypass($(a)).responseJSON.data.accpass}});b.on("success",function(b){l.ok(a.LANG[45])});b.on("error",function(b){l.error(a.LANG[46])});var b=new Clipboard(".dialog-clip-pass-button"),c=new Clipboard(".dialog-clip-user-button");b.on("success",function(a){$(".dialog-user-text").removeClass("dialog-clip-copy");$(".dialog-pass-text").addClass("dialog-clip-copy");a.clearSelection()});
+c.on("success",function(a){$(".dialog-pass-text").removeClass("dialog-clip-copy");$(".dialog-user-text").addClass("dialog-clip-copy");a.clearSelection()});(new Clipboard(".clip-pass-icon")).on("success",function(b){l.ok(a.LANG[45]);b.clearSelection()})},G=function(){h.info("bindPassEncrypt");$("body").on("blur",":input[type=password]",function(a){a=$(this);a.hasClass("passwordfield__no-pki")||u(a)}).on("keypress",":input[type=password]",function(a){13===a.keyCode&&(a.preventDefault(),a=$(this),u(a),
+a.closest("form").submit())})},H=function(a,c){console.info("Eval: "+a);if("function"===typeof a)a(c);else throw Error("Function not found: "+a);},I=function(a){h.info("resizeImage");var b=.9*$(window).width(),d=.9*$(window).height(),c={width:a.width(),height:a.height()},f={calc:0,main:0,secondary:0,factor:.9,rel:c.width/c.height},g=function(a){a.main>a.secondary?a.calc=a.main/a.rel:a.main<a.secondary&&(a.calc=a.main*a.rel);a.calc>a.secondary&&(a.main*=a.factor,g(a));return a},e=function(){f.main=
+b;f.secondary=d;var e=g(f);a.css({width:e.main,height:e.calc});c.width=e.main;c.height=e.calc},l=function(){f.main=d;f.secondary=b;var e=g(f);a.css({width:e.calc,height:e.main});c.width=e.calc;c.height=e.main};c.width>b?e():c.height>d&&(h.info("height"),l());return c},J=function(){return $.extend({log:h,config:function(){return a},appTheme:function(){return f},appActions:function(){return e},appTriggers:function(){return c},appRequests:function(){return m},evalAction:H,resizeImage:I},q)},K=function(){return{actions:function(){return e},
+triggers:function(){return c},theme:function(){return f},sk:t,msg:l,log:h,passToClip:0,passwordData:g,outputResult:v,checkboxDetect:E,checkPassLevel:D,encryptFormValue:u,fileUpload:C,redirect:r,scrollUp:z,setContentSize:y}};(function(){h.info("init");q=K();n=J();c=sysPass.Triggers(n);e=sysPass.Actions(n);m=sysPass.Requests(n);x(function(){""!==a.PK&&G();"function"===typeof sysPass.Theme&&(f=sysPass.Theme(n));!0===a.CHECK_UPDATES&&e.main.getUpdates();F();w();B()})})();return q};

--- js/app-requests.js ---
@@ -197,10 +197,51 @@ sysPass.Requests = function (Common) {
         })).done(callbackOk);
     };
 
+    /**
+     * Realizar una acción mediante envío de eventos
+     * @param opts
+     * @param callbackProgress
+     * @param callbackEnd
+     */
+    var getActionEvent = function (opts, callbackProgress, callbackEnd) {
+        var url = (!opts.url.startsWith("http", 0) && !opts.url.startsWith("https", 0)) ? Common.config().APP_ROOT + opts.url : opts.url;
+        url += "?" + $.param(opts.data);
+
+        var source = new EventSource(url);
+
+        //a message is received
+        source.addEventListener("message", function (e) {
+            var result = JSON.parse(e.data);
+
+            log.debug(result);
+
+            if (result.end === 1) {
+                log.info("getActionEvent:Ending");
+                source.close();
+
+                if (typeof callbackEnd === "function") {
+                    callbackEnd(result);
+                }
+            } else {
+                if (typeof callbackProgress === "function") {
+                    callbackProgress(result);
+                }
+            }
+        });
+
+        source.addEventListener("error", function (e) {
+            log.error("getActionEvent:Error occured");
+            source.close();
+        });
+
+        return source;
+    };
+
     return {
         getRequestOpts: getRequestOpts,
         getActionCall: getActionCall,
         getActionPromise: getActionPromise,
+        getActionEvent: getActionEvent,
         history: history
     };
 };

--- js/app-requests.min.js ---
@@ -1,8 +1,9 @@
 var $jscomp={scope:{},checkStringArgs:function(b,d,c){if(null==b)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(d instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return b+""}};
-$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(b,d,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");b!=Array.prototype&&b!=Object.prototype&&(b[d]=c.value)};$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);
+$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(b,d,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");b!=Array.prototype&&b!=Object.prototype&&(b[d]=c.value)};$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global?global:b};$jscomp.global=$jscomp.getGlobal(this);
 $jscomp.polyfill=function(b,d,c,e){if(d){c=$jscomp.global;b=b.split(".");for(e=0;e<b.length-1;e++){var a=b[e];a in c||(c[a]={});c=c[a]}b=b[b.length-1];e=c[b];d=d(e);d!=e&&null!=d&&$jscomp.defineProperty(c,b,{configurable:!0,writable:!0,value:d})}};
 $jscomp.polyfill("String.prototype.startsWith",function(b){return b?b:function(b,c){var d=$jscomp.checkStringArgs(this,b,"startsWith");b+="";for(var a=d.length,h=b.length,g=Math.max(0,Math.min(c|0,d.length)),f=0;f<h&&g<a;)if(d[g++]!=b[f++])return!1;return f>=h}},"es6-impl","es3");
 sysPass.Requests=function(b){var d=b.log,c=[],e={get:function(){return c},add:function(a){var b=""===a.hash?SparkMD5.hash(JSON.stringify(a),!1):a.hash;if(0<c.length&&c[c.length-1].hash===b)return c;d.info("history:add");a.hash=b;c.push(a);15<=c.length&&c.splice(0,10);return c},del:function(){d.info("history:del");if("undefined"!==typeof c.pop())return c[c.length-1]},reset:function(){d.info("history:reset");c=[]},length:function(){return c.length}};return{getRequestOpts:function(){return Object.create({type:"json",
 url:"",method:"post",callback:"",async:!0,data:"",cache:!1,processData:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",timeout:0,addHistory:!1,hash:"",useLoading:!0,useFullLoading:!1})},getActionCall:function(a,c,g){d.info("getActionCall");var f=a.url.startsWith("http",0)||a.url.startsWith("https",0)?a.url:b.config().APP_ROOT+a.url;return $.ajax({dataType:a.type,url:f,method:a.method,async:a.async,data:a.data,cache:a.cache,processData:a.processData,contentType:a.contentType,timeout:a.timeout,
 beforeSend:function(){!0===a.useLoading&&b.appTheme().loading.show(a.useFullLoading)},success:function(b){if("function"!==typeof c)return!0;!0===a.addHistory&&(a.callback=c,e.add(a));c(b)},error:function(c,e,f){"function"!==typeof g?(c=b.config().LANG[1]+"<p>"+f+e+"</p>",d.error(c),"html"===a.type&&$("#content").html(b.msg.html.error(f)),b.msg.error(c)):g()},complete:function(){!0===a.useLoading&&b.appTheme().loading.hide();b.appTheme().ajax.complete()}})},getActionPromise:function(a,c){d.info("getActionPromise");
-var e=a.url.startsWith("http",0)||a.url.startsWith("https",0)?a.url:b.config().APP_ROOT+a.url;$.when($.ajax({dataType:a.type,url:e,method:a.method,async:a.async,data:a.data,cache:a.cache,processData:a.processData,contentType:a.contentType,timeout:a.timeout})).done(c)},history:e}};
+var e=a.url.startsWith("http",0)||a.url.startsWith("https",0)?a.url:b.config().APP_ROOT+a.url;$.when($.ajax({dataType:a.type,url:e,method:a.method,async:a.async,data:a.data,cache:a.cache,processData:a.processData,contentType:a.contentType,timeout:a.timeout})).done(c)},getActionEvent:function(a,c,e){var f=a.url.startsWith("http",0)||a.url.startsWith("https",0)?a.url:b.config().APP_ROOT+a.url,f=f+("?"+$.param(a.data)),g=new EventSource(f);g.addEventListener("message",function(a){a=JSON.parse(a.data);
+d.debug(a);1===a.end?(d.info("getActionEvent:Ending"),g.close(),"function"===typeof e&&e(a)):"function"===typeof c&&c(a)});g.addEventListener("error",function(a){d.error("getActionEvent:Error occured");g.close()});return g},history:e}};

--- js/app-triggers.min.js ---
@@ -1,5 +1,5 @@
 var $jscomp={scope:{},findInternal:function(b,d,e){b instanceof String&&(b=String(b));for(var a=b.length,c=0;c<a;c++){var f=b[c];if(d.call(e,f,c,b))return{i:c,v:f}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(b,d,e){if(e.get||e.set)throw new TypeError("ES3 does not support getters and setters.");b!=Array.prototype&&b!=Object.prototype&&(b[d]=e.value)};
-$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(b,d,e,a){if(d){e=$jscomp.global;b=b.split(".");for(a=0;a<b.length-1;a++){var c=b[a];c in e||(e[c]={});e=e[c]}b=b[b.length-1];a=e[b];d=d(a);d!=a&&null!=d&&$jscomp.defineProperty(e,b,{configurable:!0,writable:!0,value:d})}};
+$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(b,d,e,a){if(d){e=$jscomp.global;b=b.split(".");for(a=0;a<b.length-1;a++){var c=b[a];c in e||(e[c]={});e=e[c]}b=b[b.length-1];a=e[b];d=d(a);d!=a&&null!=d&&$jscomp.defineProperty(e,b,{configurable:!0,writable:!0,value:d})}};
 $jscomp.polyfill("Array.prototype.find",function(b){return b?b:function(b,e){return $jscomp.findInternal(this,b,e).v}},"es6-impl","es3");
 sysPass.Triggers=function(b){var d=b.log,e=function(a){var c={valueField:"id",labelField:"name",searchField:["name"]};a.find(".select-box").each(function(a){var d=$(this);c.plugins=d.hasClass("select-box-deselect")?{clear_selection:{title:b.config().LANG[51]}}:{};if(d.data("onchange")){var f=d.data("onchange").split("/");c.onChange=function(a){if(0<a)if(2===f.length)sysPassApp.actions()[f[0]][f[1]](d);else sysPassApp.actions()[f[0]](d)}}d.selectize(c)});a.find("#allowed_exts").selectize({create:function(a){return{value:a.toUpperCase(),
 text:a.toUpperCase()}},createFilter:/^[a-z0-9]{1,4}$/i,plugins:["remove_button"]});a.find("#wikifilter").selectize({create:!0,createFilter:/^[a-z0-9:._-]+$/i,plugins:["remove_button"]})};return{views:{main:function(){d.info("views:main");$(".btn-menu").click(function(){var a=$(this);"1"===a.attr("data-history-reset")&&b.appRequests().history.reset();b.appActions().doAction({actionId:a.data("action-id")},a.data("view"))});b.appActions().doAction({actionId:1},"search")},search:function(){d.info("views:search");

--- js/eventsource.js ---
@@ -0,0 +1,686 @@
+/** @license
+ * eventsource.js
+ * Available under MIT License (MIT)
+ * https://github.com/Yaffle/EventSource/
+ */
+
+/*jslint indent: 2, vars: true, plusplus: true */
+/*global setTimeout, clearTimeout */
+
+(function (global) {
+  "use strict";
+
+  var setTimeout = global.setTimeout;
+  var clearTimeout = global.clearTimeout;
+
+  var k = function () {
+  };
+
+  function XHRTransport(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {
+    this._internal = new XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg);
+  }
+
+  XHRTransport.prototype.open = function (url, withCredentials) {
+    this._internal.open(url, withCredentials);
+  };
+
+  XHRTransport.prototype.cancel = function () {
+    this._internal.cancel();
+  };
+
+  function XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {
+    this.onStartCallback = onStartCallback;
+    this.onProgressCallback = onProgressCallback;
+    this.onFinishCallback = onFinishCallback;
+    this.thisArg = thisArg;
+    this.xhr = xhr;
+    this.state = 0;
+    this.charOffset = 0;
+    this.offset = 0;
+    this.url = "";
+    this.withCredentials = false;
+    this.timeout = 0;
+  }
+
+  XHRTransportInternal.prototype.onStart = function () {
+    if (this.state === 1) {
+      this.state = 2;
+      var status = 0;
+      var statusText = "";
+      var contentType = undefined;
+      if (!("contentType" in this.xhr)) {
+        try {
+          status = this.xhr.status;
+          statusText = this.xhr.statusText;
+          contentType = this.xhr.getResponseHeader("Content-Type");
+        } catch (error) {
+          // https://bugs.webkit.org/show_bug.cgi?id=29121
+          status = 0;
+          statusText = "";
+          contentType = undefined;
+          // FF < 14, WebKit
+          // https://bugs.webkit.org/show_bug.cgi?id=29658
+          // https://bugs.webkit.org/show_bug.cgi?id=77854
+        }
+      } else {
+        status = 200;
+        statusText = "OK";
+        contentType = this.xhr.contentType;
+      }
+      if (contentType == undefined) {
+        contentType = "";
+      }
+      this.onStartCallback.call(this.thisArg, status, statusText, contentType);
+    }
+  };
+  XHRTransportInternal.prototype.onProgress = function () {
+    this.onStart();
+    if (this.state === 2 || this.state === 3) {
+      this.state = 3;
+      var responseText = "";
+      try {
+        responseText = this.xhr.responseText;
+      } catch (error) {
+        // IE 8 - 9 with XMLHttpRequest
+      }
+      var chunkStart = this.charOffset;
+      var length = responseText.length;
+      for (var i = this.offset; i < length; i += 1) {
+        var c = responseText.charCodeAt(i);
+        if (c === "\n".charCodeAt(0) || c === "\r".charCodeAt(0)) {
+          this.charOffset = i + 1;
+        }
+      }
+      this.offset = length;
+      var chunk = responseText.slice(chunkStart, this.charOffset);
+      this.onProgressCallback.call(this.thisArg, chunk);
+    }
+  };
+  XHRTransportInternal.prototype.onFinish = function () {
+    // IE 8 fires "onload" without "onprogress
+    this.onProgress();
+    if (this.state === 3) {
+      this.state = 4;
+      if (this.timeout !== 0) {
+        clearTimeout(this.timeout);
+        this.timeout = 0;
+      }
+      this.onFinishCallback.call(this.thisArg);
+    }
+  };
+  XHRTransportInternal.prototype.onReadyStateChange = function () {
+    if (this.xhr != undefined) { // Opera 12
+      if (this.xhr.readyState === 4) {
+        if (this.xhr.status === 0) {
+          this.onFinish();
+        } else {
+          this.onFinish();
+        }
+      } else if (this.xhr.readyState === 3) {
+        this.onProgress();
+      } else if (this.xhr.readyState === 2) {
+        // Opera 10.63 throws exception for `this.xhr.status`
+        // this.onStart();
+      }
+    }
+  };
+  XHRTransportInternal.prototype.onTimeout2 = function () {
+    this.timeout = 0;
+    var tmp = (/^data\:([^,]*?)(base64)?,([\S]*)$/).exec(this.url);
+    var contentType = tmp[1];
+    var data = tmp[2] === "base64" ? global.atob(tmp[3]) : decodeURIComponent(tmp[3]);
+    if (this.state === 1) {
+      this.state = 2;
+      this.onStartCallback.call(this.thisArg, 200, "OK", contentType);
+    }
+    if (this.state === 2 || this.state === 3) {
+      this.state = 3;
+      this.onProgressCallback.call(this.thisArg, data);
+    }
+    if (this.state === 3) {
+      this.state = 4;
+      this.onFinishCallback.call(this.thisArg);
+    }
+  };
+  XHRTransportInternal.prototype.onTimeout1 = function () {
+    this.timeout = 0;
+    this.open(this.url, this.withCredentials);
+  };
+  XHRTransportInternal.prototype.onTimeout0 = function () {
+    var that = this;
+    this.timeout = setTimeout(function () {
+      that.onTimeout0();
+    }, 500);
+    if (this.xhr.readyState === 3) {
+      this.onProgress();
+    }
+  };
+  XHRTransportInternal.prototype.handleEvent = function (event) {
+    if (event.type === "load") {
+      this.onFinish();
+    } else if (event.type === "error") {
+      this.onFinish();
+    } else if (event.type === "abort") {
+      // improper fix to match Firefox behaviour, but it is better than just ignore abort
+      // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596
+      // https://bugzilla.mozilla.org/show_bug.cgi?id=880200
+      // https://code.google.com/p/chromium/issues/detail?id=153570
+      // IE 8 fires "onload" without "onprogress
+      this.onFinish();
+    } else if (event.type === "progress") {
+      this.onProgress();
+    } else if (event.type === "readystatechange") {
+      this.onReadyStateChange();
+    }
+  };
+  XHRTransportInternal.prototype.open = function (url, withCredentials) {
+    if (this.timeout !== 0) {
+      clearTimeout(this.timeout);
+      this.timeout = 0;
+    }
+
+    this.url = url;
+    this.withCredentials = withCredentials;
+
+    this.state = 1;
+    this.charOffset = 0;
+    this.offset = 0;
+
+    var that = this;
+
+    var tmp = (/^data\:([^,]*?)(?:;base64)?,[\S]*$/).exec(url);
+    if (tmp != undefined) {
+      this.timeout = setTimeout(function () {
+        that.onTimeout2();
+      }, 0);
+      return;
+    }
+
+    // loading indicator in Safari, Chrome < 14
+    // loading indicator in Firefox
+    // https://bugzilla.mozilla.org/show_bug.cgi?id=736723
+    if ((!("ontimeout" in this.xhr) || ("sendAsBinary" in this.xhr) || ("mozAnon" in this.xhr)) && global.document != undefined && global.document.readyState != undefined && global.document.readyState !== "complete") {
+      this.timeout = setTimeout(function () {
+        that.onTimeout1();
+      }, 4);
+      return;
+    }
+
+    // XDomainRequest#abort removes onprogress, onerror, onload
+    this.xhr.onload = function (event) {
+      that.handleEvent({type: "load"});
+    };
+    this.xhr.onerror = function () {
+      that.handleEvent({type: "error"});
+    };
+    this.xhr.onabort = function () {
+      that.handleEvent({type: "abort"});
+    };
+    this.xhr.onprogress = function () {
+      that.handleEvent({type: "progress"});
+    };
+    // IE 8-9 (XMLHTTPRequest)
+    // Firefox 3.5 - 3.6 - ? < 9.0
+    // onprogress is not fired sometimes or delayed
+    // see also #64
+    this.xhr.onreadystatechange = function () {
+      that.handleEvent({type: "readystatechange"});
+    };
+
+    this.xhr.open("GET", url, true);
+
+    // withCredentials should be set after "open" for Safari and Chrome (< 19 ?)
+    this.xhr.withCredentials = withCredentials;
+
+    this.xhr.responseType = "text";
+
+    if ("setRequestHeader" in this.xhr) {
+      // Request header field Cache-Control is not allowed by Access-Control-Allow-Headers.
+      // "Cache-control: no-cache" are not honored in Chrome and Firefox
+      // https://bugzilla.mozilla.org/show_bug.cgi?id=428916
+      //this.xhr.setRequestHeader("Cache-Control", "no-cache");
+      this.xhr.setRequestHeader("Accept", "text/event-stream");
+      // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.
+      //this.xhr.setRequestHeader("Last-Event-ID", this.lastEventId);
+    }
+
+    try {
+      this.xhr.send(undefined);
+    } catch (error1) {
+      // Safari 5.1.7, Opera 12
+      throw error1;
+    }
+
+    if (("readyState" in this.xhr) && global.opera != undefined) {
+      // workaround for Opera issue with "progress" events
+      this.timeout = setTimeout(function () {
+        that.onTimeout0();
+      }, 0);
+    }
+  };
+  XHRTransportInternal.prototype.cancel = function () {
+    if (this.state !== 0 && this.state !== 4) {
+      this.state = 4;
+      this.xhr.onload = k;
+      this.xhr.onerror = k;
+      this.xhr.onabort = k;
+      this.xhr.onprogress = k;
+      this.xhr.onreadystatechange = k;
+      this.xhr.abort();
+      if (this.timeout !== 0) {
+        clearTimeout(this.timeout);
+        this.timeout = 0;
+      }
+      this.onFinishCallback.call(this.thisArg);
+    }
+    this.state = 0;
+  };
+
+  function Map() {
+    this._data = {};
+  }
+
+  Map.prototype.get = function (key) {
+    return this._data[key + "~"];
+  };
+  Map.prototype.set = function (key, value) {
+    this._data[key + "~"] = value;
+  };
+  Map.prototype["delete"] = function (key) {
+    delete this._data[key + "~"];
+  };
+
+  function EventTarget() {
+    this._listeners = new Map();
+  }
+
+  function throwError(e) {
+    setTimeout(function () {
+      throw e;
+    }, 0);
+  }
+
+  EventTarget.prototype.dispatchEvent = function (event) {
+    event.target = this;
+    var type = event.type.toString();
+    var listeners = this._listeners;
+    var typeListeners = listeners.get(type);
+    if (typeListeners == undefined) {
+      return;
+    }
+    var length = typeListeners.length;
+    var listener = undefined;
+    for (var i = 0; i < length; i += 1) {
+      listener = typeListeners[i];
+      try {
+        if (typeof listener.handleEvent === "function") {
+          listener.handleEvent(event);
+        } else {
+          listener.call(this, event);
+        }
+      } catch (e) {
+        throwError(e);
+      }
+    }
+  };
+  EventTarget.prototype.addEventListener = function (type, callback) {
+    type = type.toString();
+    var listeners = this._listeners;
+    var typeListeners = listeners.get(type);
+    if (typeListeners == undefined) {
+      typeListeners = [];
+      listeners.set(type, typeListeners);
+    }
+    for (var i = typeListeners.length; i >= 0; i -= 1) {
+      if (typeListeners[i] === callback) {
+        return;
+      }
+    }
+    typeListeners.push(callback);
+  };
+  EventTarget.prototype.removeEventListener = function (type, callback) {
+    type = type.toString();
+    var listeners = this._listeners;
+    var typeListeners = listeners.get(type);
+    if (typeListeners == undefined) {
+      return;
+    }
+    var length = typeListeners.length;
+    var filtered = [];
+    for (var i = 0; i < length; i += 1) {
+      if (typeListeners[i] !== callback) {
+        filtered.push(typeListeners[i]);
+      }
+    }
+    if (filtered.length === 0) {
+      listeners["delete"](type);
+    } else {
+      listeners.set(type, filtered);
+    }
+  };
+
+  function Event(type) {
+    this.type = type;
+    this.target = undefined;
+  }
+
+  function MessageEvent(type, options) {
+    Event.call(this, type);
+    this.data = options.data;
+    this.lastEventId = options.lastEventId;
+  }
+
+  MessageEvent.prototype = Event.prototype;
+
+  var XHR = global.XMLHttpRequest;
+  var XDR = global.XDomainRequest;
+  var isCORSSupported = XHR != undefined && (new XHR()).withCredentials != undefined;
+  var Transport = isCORSSupported || (XHR != undefined && XDR == undefined) ? XHR : XDR;
+
+  var WAITING = -1;
+  var CONNECTING = 0;
+  var OPEN = 1;
+  var CLOSED = 2;
+  var AFTER_CR = 3;
+  var FIELD_START = 4;
+  var FIELD = 5;
+  var VALUE_START = 6;
+  var VALUE = 7;
+  var contentTypeRegExp = /^text\/event\-stream;?(\s*charset\=utf\-8)?$/i;
+
+  var MINIMUM_DURATION = 1000;
+  var MAXIMUM_DURATION = 18000000;
+
+  var getDuration = function (value, def) {
+    var n = value;
+    if (n !== n) {
+      n = def;
+    }
+    return (n < MINIMUM_DURATION ? MINIMUM_DURATION : (n > MAXIMUM_DURATION ? MAXIMUM_DURATION : n));
+  };
+
+  var fire = function (that, f, event) {
+    try {
+      if (typeof f === "function") {
+        f.call(that, event);
+      }
+    } catch (e) {
+      throwError(e);
+    }
+  };
+
+  function EventSource(url, options) {
+    EventTarget.call(this);
+
+    this.onopen = undefined;
+    this.onmessage = undefined;
+    this.onerror = undefined;
+
+    this.url = "";
+    this.readyState = CONNECTING;
+    this.withCredentials = false;
+
+    this._internal = new EventSourceInternal(this, url, options);
+  }
+
+  function EventSourceInternal(es, url, options) {
+    this.url = url.toString();
+    this.readyState = CONNECTING;
+    this.withCredentials = isCORSSupported && options != undefined && Boolean(options.withCredentials);
+
+    this.es = es;
+    this.initialRetry = getDuration(1000, 0);
+    this.heartbeatTimeout = getDuration(45000, 0);
+
+    this.lastEventId = "";
+    this.retry = this.initialRetry;
+    this.wasActivity = false;
+    var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : Transport;
+    var xhr = new CurrentTransport();
+    this.transport = new XHRTransport(xhr, this.onStart, this.onProgress, this.onFinish, this);
+    this.timeout = 0;
+    this.currentState = WAITING;
+    this.dataBuffer = [];
+    this.lastEventIdBuffer = "";
+    this.eventTypeBuffer = "";
+
+    this.state = FIELD_START;
+    this.fieldStart = 0;
+    this.valueStart = 0;
+
+    this.es.url = this.url;
+    this.es.readyState = this.readyState;
+    this.es.withCredentials = this.withCredentials;
+
+    this.onTimeout();
+  }
+
+  EventSourceInternal.prototype.onStart = function (status, statusText, contentType) {
+    if (this.currentState === CONNECTING) {
+      if (contentType == undefined) {
+        contentType = "";
+      }
+      if (status === 200 && contentTypeRegExp.test(contentType)) {
+        this.currentState = OPEN;
+        this.wasActivity = true;
+        this.retry = this.initialRetry;
+        this.readyState = OPEN;
+        this.es.readyState = OPEN;
+        var event = new Event("open");
+        this.es.dispatchEvent(event);
+        fire(this.es, this.es.onopen, event);
+      } else if (status !== 0) {
+        var message = "";
+        if (status !== 200) {
+          message = "EventSource's response has a status " + status + " " + statusText.replace(/\s+/g, " ") + " that is not 200. Aborting the connection.";
+        } else {
+          message = "EventSource's response has a Content-Type specifying an unsupported type: " + contentType.replace(/\s+/g, " ") + ". Aborting the connection.";
+        }
+        throwError(new Error(message));
+        this.close();
+        var event = new Event("error");
+        this.es.dispatchEvent(event);
+        fire(this.es, this.es.onerror, event);
+      }
+    }
+  };
+
+  EventSourceInternal.prototype.onProgress = function (chunk) {
+    if (this.currentState === OPEN) {
+      var length = chunk.length;
+      if (length !== 0) {
+        this.wasActivity = true;
+      }
+      for (var position = 0; position < length; position += 1) {
+        var c = chunk.charCodeAt(position);
+        if (this.state === AFTER_CR && c === "\n".charCodeAt(0)) {
+          this.state = FIELD_START;
+        } else {
+          if (this.state === AFTER_CR) {
+            this.state = FIELD_START;
+          }
+          if (c === "\r".charCodeAt(0) || c === "\n".charCodeAt(0)) {
+            if (this.state !== FIELD_START) {
+              if (this.state === FIELD) {
+                this.valueStart = position + 1;
+              }
+              var field = chunk.slice(this.fieldStart, this.valueStart - 1);
+              var value = chunk.slice(this.valueStart + (this.valueStart < position && chunk.charCodeAt(this.valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
+              if (field === "data") {
+                this.dataBuffer.push(value);
+              } else if (field === "id") {
+                this.lastEventIdBuffer = value;
+              } else if (field === "event") {
+                this.eventTypeBuffer = value;
+              } else if (field === "retry") {
+                this.initialRetry = getDuration(Number(value), this.initialRetry);
+                this.retry = this.initialRetry;
+              } else if (field === "heartbeatTimeout") {
+                this.heartbeatTimeout = getDuration(Number(value), this.heartbeatTimeout);
+                if (this.timeout !== 0) {
+                  clearTimeout(this.timeout);
+                  var that = this;
+                  this.timeout = setTimeout(function () {
+                    that.onTimeout();
+                  }, this.heartbeatTimeout);
+                }
+              }
+            }
+            if (this.state === FIELD_START) {
+              if (this.dataBuffer.length !== 0) {
+                this.lastEventId = this.lastEventIdBuffer;
+                if (this.eventTypeBuffer === "") {
+                  this.eventTypeBuffer = "message";
+                }
+                var event = new MessageEvent(this.eventTypeBuffer, {
+                  data: this.dataBuffer.join("\n"),
+                  lastEventId: this.lastEventIdBuffer
+                });
+                this.es.dispatchEvent(event);
+                if (this.eventTypeBuffer === "message") {
+                  fire(this.es, this.es.onmessage, event);
+                }
+                if (this.currentState === CLOSED) {
+                  return;
+                }
+              }
+              this.dataBuffer.length = 0;
+              this.eventTypeBuffer = "";
+            }
+            this.state = c === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
+          } else {
+            if (this.state === FIELD_START) {
+              this.fieldStart = position;
+              this.state = FIELD;
+            }
+            if (this.state === FIELD) {
+              if (c === ":".charCodeAt(0)) {
+                this.valueStart = position + 1;
+                this.state = VALUE_START;
+              }
+            } else if (this.state === VALUE_START) {
+              this.state = VALUE;
+            }
+          }
+        }
+      }
+    }
+  };
+
+  EventSourceInternal.prototype.onFinish = function () {
+    if (this.currentState === OPEN || this.currentState === CONNECTING) {
+      this.currentState = WAITING;
+      if (this.timeout !== 0) {
+        clearTimeout(this.timeout);
+        this.timeout = 0;
+      }
+      if (this.retry > this.initialRetry * 16) {
+        this.retry = this.initialRetry * 16;
+      }
+      if (this.retry > MAXIMUM_DURATION) {
+        this.retry = MAXIMUM_DURATION;
+      }
+      var that = this;
+      this.timeout = setTimeout(function () {
+        that.onTimeout();
+      }, this.retry);
+      this.retry = this.retry * 2 + 1;
+
+      this.readyState = CONNECTING;
+      this.es.readyState = CONNECTING;
+      var event = new Event("error");
+      this.es.dispatchEvent(event);
+      fire(this.es, this.es.onerror, event);
+    }
+  };
+
+  EventSourceInternal.prototype.onTimeout = function () {
+    this.timeout = 0;
+    if (this.currentState !== WAITING) {
+      if (!this.wasActivity) {
+        throwError(new Error("No activity within " + this.heartbeatTimeout + " milliseconds. Reconnecting."));
+        this.transport.cancel();
+      } else {
+        this.wasActivity = false;
+        var that = this;
+        this.timeout = setTimeout(function () {
+          that.onTimeout();
+        }, this.heartbeatTimeout);
+      }
+      return;
+    }
+
+    this.wasActivity = false;
+    var that = this;
+    this.timeout = setTimeout(function () {
+      that.onTimeout();
+    }, this.heartbeatTimeout);
+
+    this.currentState = CONNECTING;
+    this.dataBuffer.length = 0;
+    this.eventTypeBuffer = "";
+    this.lastEventIdBuffer = this.lastEventId;
+    this.fieldStart = 0;
+    this.valueStart = 0;
+    this.state = FIELD_START;
+
+    var s = this.url.slice(0, 5);
+    if (s !== "data:" && s !== "blob:") {
+      s = this.url + ((this.url.indexOf("?", 0) === -1 ? "?" : "&") + "lastEventId=" + encodeURIComponent(this.lastEventId) + "&r=" + (Math.random() + 1).toString().slice(2));
+    } else {
+      s = this.url;
+    }
+    try {
+      this.transport.open(s, this.withCredentials);
+    } catch (error) {
+      this.close();
+      throw error;
+    }
+  };
+
+  EventSourceInternal.prototype.close = function () {
+    this.currentState = CLOSED;
+    this.transport.cancel();
+    if (this.timeout !== 0) {
+      clearTimeout(this.timeout);
+      this.timeout = 0;
+    }
+    this.readyState = CLOSED;
+    this.es.readyState = CLOSED;
+  };
+
+  function F() {
+    this.CONNECTING = CONNECTING;
+    this.OPEN = OPEN;
+    this.CLOSED = CLOSED;
+  }
+  F.prototype = EventTarget.prototype;
+
+  EventSource.prototype = new F();
+
+  EventSource.prototype.close = function () {
+    this._internal.close();
+  };
+
+  F.call(EventSource);
+  if (isCORSSupported) {
+    EventSource.prototype.withCredentials = undefined;
+  }
+
+  var isEventSourceSupported = function () {
+    // Opera 12 fails this test, but this is fine.
+    return global.EventSource != undefined && ("withCredentials" in global.EventSource.prototype);
+  };
+
+  if (Transport != undefined && (global.EventSource == undefined || (isCORSSupported && !isEventSourceSupported()))) {
+    // Why replace a native EventSource ?
+    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328
+    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392
+    // https://code.google.com/p/chromium/issues/detail?id=260144
+    // https://code.google.com/p/chromium/issues/detail?id=225654
+    // ...
+    global.NativeEventSource = global.EventSource;
+    global.EventSource = EventSource;
+  }
+
+}(typeof window !== 'undefined' ? window : this));

--- js/eventsource.min.js ---
@@ -0,0 +1,26 @@
+/*
+
+ eventsource.js
+ Available under MIT License (MIT)
+ https://github.com/Yaffle/EventSource/
+*/
+(function(e){function y(a,c,b,d,f){this._internal=new g(a,c,b,d,f)}function g(a,c,b,d,f){this.onStartCallback=c;this.onProgressCallback=b;this.onFinishCallback=d;this.thisArg=f;this.xhr=a;this.offset=this.charOffset=this.state=0;this.url="";this.withCredentials=!1;this.timeout=0}function m(){this._data={}}function r(){this._listeners=new m}function t(a){h(function(){throw a;},0)}function n(a){this.type=a;this.target=void 0}function A(a,c){n.call(this,a);this.data=c.data;this.lastEventId=c.lastEventId}
+function p(a,c){this._listeners=new m;this.onerror=this.onmessage=this.onopen=void 0;this.url="";this.readyState=0;this.withCredentials=!1;this._internal=new k(this,a,c)}function k(a,c,b){this.url=c.toString();this.readyState=0;this.withCredentials=u&&void 0!=b&&!!b.withCredentials;this.es=a;this.initialRetry=v(1E3,0);this.heartbeatTimeout=v(45E3,0);this.lastEventId="";this.retry=this.initialRetry;this.wasActivity=!1;a=new (void 0!=b&&void 0!=b.Transport?b.Transport:B);this.transport=new y(a,this.onStart,
+this.onProgress,this.onFinish,this);this.timeout=0;this.currentState=-1;this.dataBuffer=[];this.eventTypeBuffer=this.lastEventIdBuffer="";this.state=4;this.valueStart=this.fieldStart=0;this.es.url=this.url;this.es.readyState=this.readyState;this.es.withCredentials=this.withCredentials;this.onTimeout()}function z(){this.CONNECTING=0;this.OPEN=1;this.CLOSED=2}var h=e.setTimeout,l=e.clearTimeout,q=function(){};y.prototype.open=function(a,c){this._internal.open(a,c)};y.prototype.cancel=function(){this._internal.cancel()};
+g.prototype.onStart=function(){if(1===this.state){this.state=2;var a=0,c="",b=void 0;if("contentType"in this.xhr)a=200,c="OK",b=this.xhr.contentType;else try{a=this.xhr.status,c=this.xhr.statusText,b=this.xhr.getResponseHeader("Content-Type")}catch(d){a=0,c="",b=void 0}void 0==b&&(b="");this.onStartCallback.call(this.thisArg,a,c,b)}};g.prototype.onProgress=function(){this.onStart();if(2===this.state||3===this.state){this.state=3;var a="";try{a=this.xhr.responseText}catch(C){}for(var c=this.charOffset,
+b=a.length,d=this.offset;d<b;d+=1){var f=a.charCodeAt(d);if(10===f||13===f)this.charOffset=d+1}this.offset=b;a=a.slice(c,this.charOffset);this.onProgressCallback.call(this.thisArg,a)}};g.prototype.onFinish=function(){this.onProgress();3===this.state&&(this.state=4,0!==this.timeout&&(l(this.timeout),this.timeout=0),this.onFinishCallback.call(this.thisArg))};g.prototype.onReadyStateChange=function(){if(void 0!=this.xhr)if(4===this.xhr.readyState)this.onFinish();else if(3===this.xhr.readyState)this.onProgress()};
+g.prototype.onTimeout2=function(){this.timeout=0;var a=/^data\:([^,]*?)(base64)?,([\S]*)$/.exec(this.url),c=a[1],a="base64"===a[2]?e.atob(a[3]):decodeURIComponent(a[3]);1===this.state&&(this.state=2,this.onStartCallback.call(this.thisArg,200,"OK",c));if(2===this.state||3===this.state)this.state=3,this.onProgressCallback.call(this.thisArg,a);3===this.state&&(this.state=4,this.onFinishCallback.call(this.thisArg))};g.prototype.onTimeout1=function(){this.timeout=0;this.open(this.url,this.withCredentials)};
+g.prototype.onTimeout0=function(){var a=this;this.timeout=h(function(){a.onTimeout0()},500);if(3===this.xhr.readyState)this.onProgress()};g.prototype.handleEvent=function(a){if("load"===a.type)this.onFinish();else if("error"===a.type)this.onFinish();else if("abort"===a.type)this.onFinish();else if("progress"===a.type)this.onProgress();else if("readystatechange"===a.type)this.onReadyStateChange()};g.prototype.open=function(a,c){0!==this.timeout&&(l(this.timeout),this.timeout=0);this.url=a;this.withCredentials=
+c;this.state=1;this.offset=this.charOffset=0;var b=this;if(void 0!=/^data\:([^,]*?)(?:;base64)?,[\S]*$/.exec(a))this.timeout=h(function(){b.onTimeout2()},0);else if((!("ontimeout"in this.xhr)||"sendAsBinary"in this.xhr||"mozAnon"in this.xhr)&&void 0!=e.document&&void 0!=e.document.readyState&&"complete"!==e.document.readyState)this.timeout=h(function(){b.onTimeout1()},4);else{this.xhr.onload=function(a){b.handleEvent({type:"load"})};this.xhr.onerror=function(){b.handleEvent({type:"error"})};this.xhr.onabort=
+function(){b.handleEvent({type:"abort"})};this.xhr.onprogress=function(){b.handleEvent({type:"progress"})};this.xhr.onreadystatechange=function(){b.handleEvent({type:"readystatechange"})};this.xhr.open("GET",a,!0);this.xhr.withCredentials=c;this.xhr.responseType="text";"setRequestHeader"in this.xhr&&this.xhr.setRequestHeader("Accept","text/event-stream");try{this.xhr.send(void 0)}catch(d){throw d;}"readyState"in this.xhr&&void 0!=e.opera&&(this.timeout=h(function(){b.onTimeout0()},0))}};g.prototype.cancel=
+function(){0!==this.state&&4!==this.state&&(this.state=4,this.xhr.onload=q,this.xhr.onerror=q,this.xhr.onabort=q,this.xhr.onprogress=q,this.xhr.onreadystatechange=q,this.xhr.abort(),0!==this.timeout&&(l(this.timeout),this.timeout=0),this.onFinishCallback.call(this.thisArg));this.state=0};m.prototype.get=function(a){return this._data[a+"~"]};m.prototype.set=function(a,c){this._data[a+"~"]=c};m.prototype["delete"]=function(a){delete this._data[a+"~"]};r.prototype.dispatchEvent=function(a){a.target=
+this;var c=this._listeners.get(a.type.toString());if(void 0!=c)for(var b=c.length,d,f=0;f<b;f+=1){d=c[f];try{"function"===typeof d.handleEvent?d.handleEvent(a):d.call(this,a)}catch(C){t(C)}}};r.prototype.addEventListener=function(a,c){a=a.toString();var b=this._listeners,d=b.get(a);void 0==d&&(d=[],b.set(a,d));for(b=d.length;0<=b;--b)if(d[b]===c)return;d.push(c)};r.prototype.removeEventListener=function(a,c){a=a.toString();var b=this._listeners,d=b.get(a);if(void 0!=d){for(var f=d.length,e=[],g=0;g<
+f;g+=1)d[g]!==c&&e.push(d[g]);if(0===e.length)b["delete"](a);else b.set(a,e)}};A.prototype=n.prototype;var w=e.XMLHttpRequest,D=e.XDomainRequest,u=void 0!=w&&void 0!=(new w).withCredentials,B=u||void 0!=w&&void 0==D?w:D,E=/^text\/event\-stream;?(\s*charset\=utf\-8)?$/i,v=function(a,c){var b=a;b!==b&&(b=c);return 1E3>b?1E3:18E6<b?18E6:b},x=function(a,c,b){try{"function"===typeof c&&c.call(a,b)}catch(d){t(d)}};k.prototype.onStart=function(a,c,b){0===this.currentState&&(void 0==b&&(b=""),200===a&&E.test(b)?
+(this.currentState=1,this.wasActivity=!0,this.retry=this.initialRetry,this.readyState=1,this.es.readyState=1,a=new n("open"),this.es.dispatchEvent(a),x(this.es,this.es.onopen,a)):0!==a&&(a=200!==a?"EventSource's response has a status "+a+" "+c.replace(/\s+/g," ")+" that is not 200. Aborting the connection.":"EventSource's response has a Content-Type specifying an unsupported type: "+b.replace(/\s+/g," ")+". Aborting the connection.",t(Error(a)),this.close(),a=new n("error"),this.es.dispatchEvent(a),
+x(this.es,this.es.onerror,a)))};k.prototype.onProgress=function(a){if(1===this.currentState){var c=a.length;0!==c&&(this.wasActivity=!0);for(var b=0;b<c;b+=1){var d=a.charCodeAt(b);if(3===this.state&&10===d)this.state=4;else if(3===this.state&&(this.state=4),13===d||10===d){if(4!==this.state){5===this.state&&(this.valueStart=b+1);var f=a.slice(this.fieldStart,this.valueStart-1),e=a.slice(this.valueStart+(this.valueStart<b&&32===a.charCodeAt(this.valueStart)?1:0),b);if("data"===f)this.dataBuffer.push(e);
+else if("id"===f)this.lastEventIdBuffer=e;else if("event"===f)this.eventTypeBuffer=e;else if("retry"===f)this.retry=this.initialRetry=v(Number(e),this.initialRetry);else if("heartbeatTimeout"===f&&(this.heartbeatTimeout=v(Number(e),this.heartbeatTimeout),0!==this.timeout)){l(this.timeout);var g=this;this.timeout=h(function(){g.onTimeout()},this.heartbeatTimeout)}}if(4===this.state){if(0!==this.dataBuffer.length&&(this.lastEventId=this.lastEventIdBuffer,""===this.eventTypeBuffer&&(this.eventTypeBuffer=
+"message"),f=new A(this.eventTypeBuffer,{data:this.dataBuffer.join("\n"),lastEventId:this.lastEventIdBuffer}),this.es.dispatchEvent(f),"message"===this.eventTypeBuffer&&x(this.es,this.es.onmessage,f),2===this.currentState))break;this.dataBuffer.length=0;this.eventTypeBuffer=""}this.state=13===d?3:4}else 4===this.state&&(this.fieldStart=b,this.state=5),5===this.state?58===d&&(this.valueStart=b+1,this.state=6):6===this.state&&(this.state=7)}}};k.prototype.onFinish=function(){if(1===this.currentState||
+0===this.currentState){this.currentState=-1;0!==this.timeout&&(l(this.timeout),this.timeout=0);this.retry>16*this.initialRetry&&(this.retry=16*this.initialRetry);18E6<this.retry&&(this.retry=18E6);var a=this;this.timeout=h(function(){a.onTimeout()},this.retry);this.retry=2*this.retry+1;this.readyState=0;this.es.readyState=0;var c=new n("error");this.es.dispatchEvent(c);x(this.es,this.es.onerror,c)}};k.prototype.onTimeout=function(){this.timeout=0;if(-1!==this.currentState)if(this.wasActivity){this.wasActivity=
+!1;var a=this;this.timeout=h(function(){a.onTimeout()},this.heartbeatTimeout)}else t(Error("No activity within "+this.heartbeatTimeout+" milliseconds. Reconnecting.")),this.transport.cancel();else{this.wasActivity=!1;a=this;this.timeout=h(function(){a.onTimeout()},this.heartbeatTimeout);this.currentState=0;this.dataBuffer.length=0;this.eventTypeBuffer="";this.lastEventIdBuffer=this.lastEventId;this.valueStart=this.fieldStart=0;this.state=4;var c=this.url.slice(0,5),c="data:"!==c&&"blob:"!==c?this.url+
+((-1===this.url.indexOf("?",0)?"?":"&")+"lastEventId="+encodeURIComponent(this.lastEventId)+"&r="+(Math.random()+1).toString().slice(2)):this.url;try{this.transport.open(c,this.withCredentials)}catch(b){throw this.close(),b;}}};k.prototype.close=function(){this.currentState=2;this.transport.cancel();0!==this.timeout&&(l(this.timeout),this.timeout=0);this.readyState=2;this.es.readyState=2};z.prototype=r.prototype;p.prototype=new z;p.prototype.close=function(){this._internal.close()};z.call(p);u&&(p.prototype.withCredentials=
+void 0);void 0==B||void 0!=e.EventSource&&(!u||void 0!=e.EventSource&&"withCredentials"in e.EventSource.prototype)||(e.NativeEventSource=e.EventSource,e.EventSource=p)})("undefined"!==typeof window?window:this);

--- js/js.php ---
@@ -51,7 +51,8 @@
             ->addFile('moment.min.js')
             ->addFile('moment-timezone.min.js')
             ->addFile('toastr.min.js')
-            ->addFile('jquery.magnific-popup.min.js');
+            ->addFile('jquery.magnific-popup.min.js')
+            ->addFile('eventsource.min.js');
     } elseif ($group === 1) {
         $Minify->addFile('app.min.js')
             ->addFile('app-triggers.min.js')

--- js/strings.js.php ---
@@ -83,5 +83,6 @@
     58 => __('Esta acción restablecerá todos los datos del plugin. Desea continuar?'),
     59 => __('Este proceso puede durar algo de tiempo. Desea continuar?'),
     60 => __('Aviso'),
-    61 => __('Sesión finalizada')
+    61 => __('Sesión finalizada'),
+    62 => __('Realizando tarea. Por favor, no cierre la ventana/pestaña del navegador.')
 ];
\ No newline at end of file

